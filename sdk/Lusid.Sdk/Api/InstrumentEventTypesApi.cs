/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Lusid.Sdk.Client;
using Lusid.Sdk.Client.Auth;
using Lusid.Sdk.Model;

namespace Lusid.Sdk.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IInstrumentEventTypesApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// [EXPERIMENTAL] CreateTransactionTemplate: Create Transaction Template
        /// </summary>
        /// <remarks>
        /// Create a transaction template for a particular instrument event type in a scope.
        /// </remarks>
        /// <exception cref="Lusid.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instrumentEventType">The type of instrument events that the template is applied to.</param>
        /// <param name="instrumentType">The template is applied to events which originate from instruments of this type</param>
        /// <param name="scope">The scope in which the template lies.</param>
        /// <param name="transactionTemplateRequest">A request defining a new transaction template to be created.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TransactionTemplate</returns>
        TransactionTemplate CreateTransactionTemplate(string instrumentEventType, string instrumentType, string scope, TransactionTemplateRequest transactionTemplateRequest, int operationIndex = 0);

        /// <summary>
        /// [EXPERIMENTAL] CreateTransactionTemplate: Create Transaction Template
        /// </summary>
        /// <remarks>
        /// Create a transaction template for a particular instrument event type in a scope.
        /// </remarks>
        /// <exception cref="Lusid.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instrumentEventType">The type of instrument events that the template is applied to.</param>
        /// <param name="instrumentType">The template is applied to events which originate from instruments of this type</param>
        /// <param name="scope">The scope in which the template lies.</param>
        /// <param name="transactionTemplateRequest">A request defining a new transaction template to be created.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TransactionTemplate</returns>
        ApiResponse<TransactionTemplate> CreateTransactionTemplateWithHttpInfo(string instrumentEventType, string instrumentType, string scope, TransactionTemplateRequest transactionTemplateRequest, int operationIndex = 0);
        /// <summary>
        /// [EXPERIMENTAL] GetTransactionTemplate: Get Transaction Template
        /// </summary>
        /// <remarks>
        /// Gets the Transaction Template that for the instrument event type within the scope specified.
        /// </remarks>
        /// <exception cref="Lusid.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instrumentEventType">The instrument event type of the transaction template</param>
        /// <param name="scope">The scope in which the template lies. When not supplied the scope is &#39;default&#39;. (optional)</param>
        /// <param name="asAt">The AsAt time of the requested Transaction Template (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TransactionTemplate</returns>
        TransactionTemplate GetTransactionTemplate(string instrumentEventType, string? scope = default(string?), DateTimeOffset? asAt = default(DateTimeOffset?), int operationIndex = 0);

        /// <summary>
        /// [EXPERIMENTAL] GetTransactionTemplate: Get Transaction Template
        /// </summary>
        /// <remarks>
        /// Gets the Transaction Template that for the instrument event type within the scope specified.
        /// </remarks>
        /// <exception cref="Lusid.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instrumentEventType">The instrument event type of the transaction template</param>
        /// <param name="scope">The scope in which the template lies. When not supplied the scope is &#39;default&#39;. (optional)</param>
        /// <param name="asAt">The AsAt time of the requested Transaction Template (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TransactionTemplate</returns>
        ApiResponse<TransactionTemplate> GetTransactionTemplateWithHttpInfo(string instrumentEventType, string? scope = default(string?), DateTimeOffset? asAt = default(DateTimeOffset?), int operationIndex = 0);
        /// <summary>
        /// [EXPERIMENTAL] GetTransactionTemplateSpecification: Get Transaction Template Specification.
        /// </summary>
        /// <remarks>
        /// Retrieve the transaction template specification for a particular event type.
        /// </remarks>
        /// <exception cref="Lusid.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instrumentEventType">The requested instrument event type.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TransactionTemplateSpecification</returns>
        TransactionTemplateSpecification GetTransactionTemplateSpecification(string instrumentEventType, int operationIndex = 0);

        /// <summary>
        /// [EXPERIMENTAL] GetTransactionTemplateSpecification: Get Transaction Template Specification.
        /// </summary>
        /// <remarks>
        /// Retrieve the transaction template specification for a particular event type.
        /// </remarks>
        /// <exception cref="Lusid.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instrumentEventType">The requested instrument event type.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TransactionTemplateSpecification</returns>
        ApiResponse<TransactionTemplateSpecification> GetTransactionTemplateSpecificationWithHttpInfo(string instrumentEventType, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IInstrumentEventTypesApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// [EXPERIMENTAL] CreateTransactionTemplate: Create Transaction Template
        /// </summary>
        /// <remarks>
        /// Create a transaction template for a particular instrument event type in a scope.
        /// </remarks>
        /// <exception cref="Lusid.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instrumentEventType">The type of instrument events that the template is applied to.</param>
        /// <param name="instrumentType">The template is applied to events which originate from instruments of this type</param>
        /// <param name="scope">The scope in which the template lies.</param>
        /// <param name="transactionTemplateRequest">A request defining a new transaction template to be created.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TransactionTemplate</returns>
        System.Threading.Tasks.Task<TransactionTemplate> CreateTransactionTemplateAsync(string instrumentEventType, string instrumentType, string scope, TransactionTemplateRequest transactionTemplateRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// [EXPERIMENTAL] CreateTransactionTemplate: Create Transaction Template
        /// </summary>
        /// <remarks>
        /// Create a transaction template for a particular instrument event type in a scope.
        /// </remarks>
        /// <exception cref="Lusid.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instrumentEventType">The type of instrument events that the template is applied to.</param>
        /// <param name="instrumentType">The template is applied to events which originate from instruments of this type</param>
        /// <param name="scope">The scope in which the template lies.</param>
        /// <param name="transactionTemplateRequest">A request defining a new transaction template to be created.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TransactionTemplate)</returns>
        System.Threading.Tasks.Task<ApiResponse<TransactionTemplate>> CreateTransactionTemplateWithHttpInfoAsync(string instrumentEventType, string instrumentType, string scope, TransactionTemplateRequest transactionTemplateRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// [EXPERIMENTAL] GetTransactionTemplate: Get Transaction Template
        /// </summary>
        /// <remarks>
        /// Gets the Transaction Template that for the instrument event type within the scope specified.
        /// </remarks>
        /// <exception cref="Lusid.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instrumentEventType">The instrument event type of the transaction template</param>
        /// <param name="scope">The scope in which the template lies. When not supplied the scope is &#39;default&#39;. (optional)</param>
        /// <param name="asAt">The AsAt time of the requested Transaction Template (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TransactionTemplate</returns>
        System.Threading.Tasks.Task<TransactionTemplate> GetTransactionTemplateAsync(string instrumentEventType, string? scope = default(string?), DateTimeOffset? asAt = default(DateTimeOffset?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// [EXPERIMENTAL] GetTransactionTemplate: Get Transaction Template
        /// </summary>
        /// <remarks>
        /// Gets the Transaction Template that for the instrument event type within the scope specified.
        /// </remarks>
        /// <exception cref="Lusid.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instrumentEventType">The instrument event type of the transaction template</param>
        /// <param name="scope">The scope in which the template lies. When not supplied the scope is &#39;default&#39;. (optional)</param>
        /// <param name="asAt">The AsAt time of the requested Transaction Template (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TransactionTemplate)</returns>
        System.Threading.Tasks.Task<ApiResponse<TransactionTemplate>> GetTransactionTemplateWithHttpInfoAsync(string instrumentEventType, string? scope = default(string?), DateTimeOffset? asAt = default(DateTimeOffset?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// [EXPERIMENTAL] GetTransactionTemplateSpecification: Get Transaction Template Specification.
        /// </summary>
        /// <remarks>
        /// Retrieve the transaction template specification for a particular event type.
        /// </remarks>
        /// <exception cref="Lusid.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instrumentEventType">The requested instrument event type.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TransactionTemplateSpecification</returns>
        System.Threading.Tasks.Task<TransactionTemplateSpecification> GetTransactionTemplateSpecificationAsync(string instrumentEventType, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// [EXPERIMENTAL] GetTransactionTemplateSpecification: Get Transaction Template Specification.
        /// </summary>
        /// <remarks>
        /// Retrieve the transaction template specification for a particular event type.
        /// </remarks>
        /// <exception cref="Lusid.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instrumentEventType">The requested instrument event type.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TransactionTemplateSpecification)</returns>
        System.Threading.Tasks.Task<ApiResponse<TransactionTemplateSpecification>> GetTransactionTemplateSpecificationWithHttpInfoAsync(string instrumentEventType, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IInstrumentEventTypesApi : IInstrumentEventTypesApiSync, IInstrumentEventTypesApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class InstrumentEventTypesApi : IInstrumentEventTypesApi
    {
        private Lusid.Sdk.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="InstrumentEventTypesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public InstrumentEventTypesApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="InstrumentEventTypesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public InstrumentEventTypesApi(string basePath)
        {
            this.Configuration = Lusid.Sdk.Client.Configuration.MergeConfigurations(
                Lusid.Sdk.Client.GlobalConfiguration.Instance,
                new Lusid.Sdk.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Lusid.Sdk.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Lusid.Sdk.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Lusid.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="InstrumentEventTypesApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public InstrumentEventTypesApi(Lusid.Sdk.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = configuration;
            this.Client = new Lusid.Sdk.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Lusid.Sdk.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Lusid.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="InstrumentEventTypesApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public InstrumentEventTypesApi(Lusid.Sdk.Client.ISynchronousClient client, Lusid.Sdk.Client.IAsynchronousClient asyncClient, Lusid.Sdk.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Lusid.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Lusid.Sdk.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Lusid.Sdk.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Lusid.Sdk.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Lusid.Sdk.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// [EXPERIMENTAL] CreateTransactionTemplate: Create Transaction Template Create a transaction template for a particular instrument event type in a scope.
        /// </summary>
        /// <exception cref="Lusid.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instrumentEventType">The type of instrument events that the template is applied to.</param>
        /// <param name="instrumentType">The template is applied to events which originate from instruments of this type</param>
        /// <param name="scope">The scope in which the template lies.</param>
        /// <param name="transactionTemplateRequest">A request defining a new transaction template to be created.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TransactionTemplate</returns>
        public TransactionTemplate CreateTransactionTemplate(string instrumentEventType, string instrumentType, string scope, TransactionTemplateRequest transactionTemplateRequest, int operationIndex = 0)
        {
            Lusid.Sdk.Client.ApiResponse<TransactionTemplate> localVarResponse = CreateTransactionTemplateWithHttpInfo(instrumentEventType, instrumentType, scope, transactionTemplateRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// [EXPERIMENTAL] CreateTransactionTemplate: Create Transaction Template Create a transaction template for a particular instrument event type in a scope.
        /// </summary>
        /// <exception cref="Lusid.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instrumentEventType">The type of instrument events that the template is applied to.</param>
        /// <param name="instrumentType">The template is applied to events which originate from instruments of this type</param>
        /// <param name="scope">The scope in which the template lies.</param>
        /// <param name="transactionTemplateRequest">A request defining a new transaction template to be created.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TransactionTemplate</returns>
        public Lusid.Sdk.Client.ApiResponse<TransactionTemplate> CreateTransactionTemplateWithHttpInfo(string instrumentEventType, string instrumentType, string scope, TransactionTemplateRequest transactionTemplateRequest, int operationIndex = 0)
        {
            // verify the required parameter 'instrumentEventType' is set
            if (instrumentEventType == null)
            {
                throw new Lusid.Sdk.Client.ApiException(400, "Missing required parameter 'instrumentEventType' when calling InstrumentEventTypesApi->CreateTransactionTemplate");
            }

            // verify the required parameter 'instrumentType' is set
            if (instrumentType == null)
            {
                throw new Lusid.Sdk.Client.ApiException(400, "Missing required parameter 'instrumentType' when calling InstrumentEventTypesApi->CreateTransactionTemplate");
            }

            // verify the required parameter 'scope' is set
            if (scope == null)
            {
                throw new Lusid.Sdk.Client.ApiException(400, "Missing required parameter 'scope' when calling InstrumentEventTypesApi->CreateTransactionTemplate");
            }

            // verify the required parameter 'transactionTemplateRequest' is set
            if (transactionTemplateRequest == null)
            {
                throw new Lusid.Sdk.Client.ApiException(400, "Missing required parameter 'transactionTemplateRequest' when calling InstrumentEventTypesApi->CreateTransactionTemplate");
            }

            Lusid.Sdk.Client.RequestOptions localVarRequestOptions = new Lusid.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json-patch+json",
                "application/json",
                "text/json",
                "application/*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Lusid.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Lusid.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("instrumentEventType", Lusid.Sdk.Client.ClientUtils.ParameterToString(instrumentEventType)); // path parameter
            localVarRequestOptions.PathParameters.Add("instrumentType", Lusid.Sdk.Client.ClientUtils.ParameterToString(instrumentType)); // path parameter
            localVarRequestOptions.PathParameters.Add("scope", Lusid.Sdk.Client.ClientUtils.ParameterToString(scope)); // path parameter
            localVarRequestOptions.Data = transactionTemplateRequest;

            localVarRequestOptions.Operation = "InstrumentEventTypesApi.CreateTransactionTemplate";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<TransactionTemplate>("/api/instrumenteventtypes/{instrumentEventType}/transactiontemplates/{instrumentType}/{scope}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateTransactionTemplate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// [EXPERIMENTAL] CreateTransactionTemplate: Create Transaction Template Create a transaction template for a particular instrument event type in a scope.
        /// </summary>
        /// <exception cref="Lusid.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instrumentEventType">The type of instrument events that the template is applied to.</param>
        /// <param name="instrumentType">The template is applied to events which originate from instruments of this type</param>
        /// <param name="scope">The scope in which the template lies.</param>
        /// <param name="transactionTemplateRequest">A request defining a new transaction template to be created.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TransactionTemplate</returns>
        public async System.Threading.Tasks.Task<TransactionTemplate> CreateTransactionTemplateAsync(string instrumentEventType, string instrumentType, string scope, TransactionTemplateRequest transactionTemplateRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Lusid.Sdk.Client.ApiResponse<TransactionTemplate> localVarResponse = await CreateTransactionTemplateWithHttpInfoAsync(instrumentEventType, instrumentType, scope, transactionTemplateRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// [EXPERIMENTAL] CreateTransactionTemplate: Create Transaction Template Create a transaction template for a particular instrument event type in a scope.
        /// </summary>
        /// <exception cref="Lusid.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instrumentEventType">The type of instrument events that the template is applied to.</param>
        /// <param name="instrumentType">The template is applied to events which originate from instruments of this type</param>
        /// <param name="scope">The scope in which the template lies.</param>
        /// <param name="transactionTemplateRequest">A request defining a new transaction template to be created.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TransactionTemplate)</returns>
        public async System.Threading.Tasks.Task<Lusid.Sdk.Client.ApiResponse<TransactionTemplate>> CreateTransactionTemplateWithHttpInfoAsync(string instrumentEventType, string instrumentType, string scope, TransactionTemplateRequest transactionTemplateRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'instrumentEventType' is set
            if (instrumentEventType == null)
            {
                throw new Lusid.Sdk.Client.ApiException(400, "Missing required parameter 'instrumentEventType' when calling InstrumentEventTypesApi->CreateTransactionTemplate");
            }

            // verify the required parameter 'instrumentType' is set
            if (instrumentType == null)
            {
                throw new Lusid.Sdk.Client.ApiException(400, "Missing required parameter 'instrumentType' when calling InstrumentEventTypesApi->CreateTransactionTemplate");
            }

            // verify the required parameter 'scope' is set
            if (scope == null)
            {
                throw new Lusid.Sdk.Client.ApiException(400, "Missing required parameter 'scope' when calling InstrumentEventTypesApi->CreateTransactionTemplate");
            }

            // verify the required parameter 'transactionTemplateRequest' is set
            if (transactionTemplateRequest == null)
            {
                throw new Lusid.Sdk.Client.ApiException(400, "Missing required parameter 'transactionTemplateRequest' when calling InstrumentEventTypesApi->CreateTransactionTemplate");
            }


            Lusid.Sdk.Client.RequestOptions localVarRequestOptions = new Lusid.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Lusid.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Lusid.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("instrumentEventType", Lusid.Sdk.Client.ClientUtils.ParameterToString(instrumentEventType)); // path parameter
            localVarRequestOptions.PathParameters.Add("instrumentType", Lusid.Sdk.Client.ClientUtils.ParameterToString(instrumentType)); // path parameter
            localVarRequestOptions.PathParameters.Add("scope", Lusid.Sdk.Client.ClientUtils.ParameterToString(scope)); // path parameter
            localVarRequestOptions.Data = transactionTemplateRequest;

            localVarRequestOptions.Operation = "InstrumentEventTypesApi.CreateTransactionTemplate";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<TransactionTemplate>("/api/instrumenteventtypes/{instrumentEventType}/transactiontemplates/{instrumentType}/{scope}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateTransactionTemplate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// [EXPERIMENTAL] GetTransactionTemplate: Get Transaction Template Gets the Transaction Template that for the instrument event type within the scope specified.
        /// </summary>
        /// <exception cref="Lusid.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instrumentEventType">The instrument event type of the transaction template</param>
        /// <param name="scope">The scope in which the template lies. When not supplied the scope is &#39;default&#39;. (optional)</param>
        /// <param name="asAt">The AsAt time of the requested Transaction Template (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TransactionTemplate</returns>
        public TransactionTemplate GetTransactionTemplate(string instrumentEventType, string? scope = default(string?), DateTimeOffset? asAt = default(DateTimeOffset?), int operationIndex = 0)
        {
            Lusid.Sdk.Client.ApiResponse<TransactionTemplate> localVarResponse = GetTransactionTemplateWithHttpInfo(instrumentEventType, scope, asAt);
            return localVarResponse.Data;
        }

        /// <summary>
        /// [EXPERIMENTAL] GetTransactionTemplate: Get Transaction Template Gets the Transaction Template that for the instrument event type within the scope specified.
        /// </summary>
        /// <exception cref="Lusid.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instrumentEventType">The instrument event type of the transaction template</param>
        /// <param name="scope">The scope in which the template lies. When not supplied the scope is &#39;default&#39;. (optional)</param>
        /// <param name="asAt">The AsAt time of the requested Transaction Template (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TransactionTemplate</returns>
        public Lusid.Sdk.Client.ApiResponse<TransactionTemplate> GetTransactionTemplateWithHttpInfo(string instrumentEventType, string? scope = default(string?), DateTimeOffset? asAt = default(DateTimeOffset?), int operationIndex = 0)
        {
            // verify the required parameter 'instrumentEventType' is set
            if (instrumentEventType == null)
            {
                throw new Lusid.Sdk.Client.ApiException(400, "Missing required parameter 'instrumentEventType' when calling InstrumentEventTypesApi->GetTransactionTemplate");
            }

            Lusid.Sdk.Client.RequestOptions localVarRequestOptions = new Lusid.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Lusid.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Lusid.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("instrumentEventType", Lusid.Sdk.Client.ClientUtils.ParameterToString(instrumentEventType)); // path parameter
            if (scope != null)
            {
                localVarRequestOptions.QueryParameters.Add(Lusid.Sdk.Client.ClientUtils.ParameterToMultiMap("", "scope", scope));
            }
            if (asAt != null)
            {
                localVarRequestOptions.QueryParameters.Add(Lusid.Sdk.Client.ClientUtils.ParameterToMultiMap("", "asAt", asAt));
            }

            localVarRequestOptions.Operation = "InstrumentEventTypesApi.GetTransactionTemplate";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<TransactionTemplate>("/api/instrumenteventtypes/{instrumentEventType}/transactiontemplates", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTransactionTemplate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// [EXPERIMENTAL] GetTransactionTemplate: Get Transaction Template Gets the Transaction Template that for the instrument event type within the scope specified.
        /// </summary>
        /// <exception cref="Lusid.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instrumentEventType">The instrument event type of the transaction template</param>
        /// <param name="scope">The scope in which the template lies. When not supplied the scope is &#39;default&#39;. (optional)</param>
        /// <param name="asAt">The AsAt time of the requested Transaction Template (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TransactionTemplate</returns>
        public async System.Threading.Tasks.Task<TransactionTemplate> GetTransactionTemplateAsync(string instrumentEventType, string? scope = default(string?), DateTimeOffset? asAt = default(DateTimeOffset?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Lusid.Sdk.Client.ApiResponse<TransactionTemplate> localVarResponse = await GetTransactionTemplateWithHttpInfoAsync(instrumentEventType, scope, asAt, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// [EXPERIMENTAL] GetTransactionTemplate: Get Transaction Template Gets the Transaction Template that for the instrument event type within the scope specified.
        /// </summary>
        /// <exception cref="Lusid.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instrumentEventType">The instrument event type of the transaction template</param>
        /// <param name="scope">The scope in which the template lies. When not supplied the scope is &#39;default&#39;. (optional)</param>
        /// <param name="asAt">The AsAt time of the requested Transaction Template (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TransactionTemplate)</returns>
        public async System.Threading.Tasks.Task<Lusid.Sdk.Client.ApiResponse<TransactionTemplate>> GetTransactionTemplateWithHttpInfoAsync(string instrumentEventType, string? scope = default(string?), DateTimeOffset? asAt = default(DateTimeOffset?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'instrumentEventType' is set
            if (instrumentEventType == null)
            {
                throw new Lusid.Sdk.Client.ApiException(400, "Missing required parameter 'instrumentEventType' when calling InstrumentEventTypesApi->GetTransactionTemplate");
            }


            Lusid.Sdk.Client.RequestOptions localVarRequestOptions = new Lusid.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Lusid.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Lusid.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("instrumentEventType", Lusid.Sdk.Client.ClientUtils.ParameterToString(instrumentEventType)); // path parameter
            if (scope != null)
            {
                localVarRequestOptions.QueryParameters.Add(Lusid.Sdk.Client.ClientUtils.ParameterToMultiMap("", "scope", scope));
            }
            if (asAt != null)
            {
                localVarRequestOptions.QueryParameters.Add(Lusid.Sdk.Client.ClientUtils.ParameterToMultiMap("", "asAt", asAt));
            }

            localVarRequestOptions.Operation = "InstrumentEventTypesApi.GetTransactionTemplate";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<TransactionTemplate>("/api/instrumenteventtypes/{instrumentEventType}/transactiontemplates", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTransactionTemplate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// [EXPERIMENTAL] GetTransactionTemplateSpecification: Get Transaction Template Specification. Retrieve the transaction template specification for a particular event type.
        /// </summary>
        /// <exception cref="Lusid.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instrumentEventType">The requested instrument event type.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TransactionTemplateSpecification</returns>
        public TransactionTemplateSpecification GetTransactionTemplateSpecification(string instrumentEventType, int operationIndex = 0)
        {
            Lusid.Sdk.Client.ApiResponse<TransactionTemplateSpecification> localVarResponse = GetTransactionTemplateSpecificationWithHttpInfo(instrumentEventType);
            return localVarResponse.Data;
        }

        /// <summary>
        /// [EXPERIMENTAL] GetTransactionTemplateSpecification: Get Transaction Template Specification. Retrieve the transaction template specification for a particular event type.
        /// </summary>
        /// <exception cref="Lusid.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instrumentEventType">The requested instrument event type.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TransactionTemplateSpecification</returns>
        public Lusid.Sdk.Client.ApiResponse<TransactionTemplateSpecification> GetTransactionTemplateSpecificationWithHttpInfo(string instrumentEventType, int operationIndex = 0)
        {
            // verify the required parameter 'instrumentEventType' is set
            if (instrumentEventType == null)
            {
                throw new Lusid.Sdk.Client.ApiException(400, "Missing required parameter 'instrumentEventType' when calling InstrumentEventTypesApi->GetTransactionTemplateSpecification");
            }

            Lusid.Sdk.Client.RequestOptions localVarRequestOptions = new Lusid.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Lusid.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Lusid.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("instrumentEventType", Lusid.Sdk.Client.ClientUtils.ParameterToString(instrumentEventType)); // path parameter

            localVarRequestOptions.Operation = "InstrumentEventTypesApi.GetTransactionTemplateSpecification";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<TransactionTemplateSpecification>("/api/instrumenteventtypes/{instrumentEventType}/transactiontemplatespecification", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTransactionTemplateSpecification", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// [EXPERIMENTAL] GetTransactionTemplateSpecification: Get Transaction Template Specification. Retrieve the transaction template specification for a particular event type.
        /// </summary>
        /// <exception cref="Lusid.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instrumentEventType">The requested instrument event type.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TransactionTemplateSpecification</returns>
        public async System.Threading.Tasks.Task<TransactionTemplateSpecification> GetTransactionTemplateSpecificationAsync(string instrumentEventType, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Lusid.Sdk.Client.ApiResponse<TransactionTemplateSpecification> localVarResponse = await GetTransactionTemplateSpecificationWithHttpInfoAsync(instrumentEventType, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// [EXPERIMENTAL] GetTransactionTemplateSpecification: Get Transaction Template Specification. Retrieve the transaction template specification for a particular event type.
        /// </summary>
        /// <exception cref="Lusid.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instrumentEventType">The requested instrument event type.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TransactionTemplateSpecification)</returns>
        public async System.Threading.Tasks.Task<Lusid.Sdk.Client.ApiResponse<TransactionTemplateSpecification>> GetTransactionTemplateSpecificationWithHttpInfoAsync(string instrumentEventType, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'instrumentEventType' is set
            if (instrumentEventType == null)
            {
                throw new Lusid.Sdk.Client.ApiException(400, "Missing required parameter 'instrumentEventType' when calling InstrumentEventTypesApi->GetTransactionTemplateSpecification");
            }


            Lusid.Sdk.Client.RequestOptions localVarRequestOptions = new Lusid.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Lusid.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Lusid.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("instrumentEventType", Lusid.Sdk.Client.ClientUtils.ParameterToString(instrumentEventType)); // path parameter

            localVarRequestOptions.Operation = "InstrumentEventTypesApi.GetTransactionTemplateSpecification";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<TransactionTemplateSpecification>("/api/instrumenteventtypes/{instrumentEventType}/transactiontemplatespecification", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTransactionTemplateSpecification", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}