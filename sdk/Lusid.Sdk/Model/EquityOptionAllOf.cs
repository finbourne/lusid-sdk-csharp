/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Lusid.Sdk.Client.OpenAPIDateConverter;

namespace Lusid.Sdk.Model
{
    /// <summary>
    /// EquityOptionAllOf
    /// </summary>
    [DataContract(Name = "EquityOption_allOf")]
    public partial class EquityOptionAllOf : IEquatable<EquityOptionAllOf>, IValidatableObject
    {
        /// <summary>
        /// The available values are: QuotedSecurity, InterestRateSwap, FxForward, Future, ExoticInstrument, FxOption, CreditDefaultSwap, InterestRateSwaption, Bond, EquityOption, FixedLeg, FloatingLeg, BespokeCashFlowsLeg, Unknown, TermDeposit, ContractForDifference, EquitySwap, CashPerpetual, CapFloor, CashSettled, CdsIndex, Basket, FundingLeg, FxSwap, ForwardRateAgreement, SimpleInstrument, Repo, Equity, ExchangeTradedOption, ReferenceInstrument, ComplexBond, InflationLinkedBond, InflationSwap, SimpleCashFlowLoan, TotalReturnSwap, InflationLeg, FundShareClass, FlexibleLoan, UnsettledCash, Cash
        /// </summary>
        /// <value>The available values are: QuotedSecurity, InterestRateSwap, FxForward, Future, ExoticInstrument, FxOption, CreditDefaultSwap, InterestRateSwaption, Bond, EquityOption, FixedLeg, FloatingLeg, BespokeCashFlowsLeg, Unknown, TermDeposit, ContractForDifference, EquitySwap, CashPerpetual, CapFloor, CashSettled, CdsIndex, Basket, FundingLeg, FxSwap, ForwardRateAgreement, SimpleInstrument, Repo, Equity, ExchangeTradedOption, ReferenceInstrument, ComplexBond, InflationLinkedBond, InflationSwap, SimpleCashFlowLoan, TotalReturnSwap, InflationLeg, FundShareClass, FlexibleLoan, UnsettledCash, Cash</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum InstrumentTypeEnum
        {
            /// <summary>
            /// Enum QuotedSecurity for value: QuotedSecurity
            /// </summary>
            [EnumMember(Value = "QuotedSecurity")]
            QuotedSecurity = 1,

            /// <summary>
            /// Enum InterestRateSwap for value: InterestRateSwap
            /// </summary>
            [EnumMember(Value = "InterestRateSwap")]
            InterestRateSwap = 2,

            /// <summary>
            /// Enum FxForward for value: FxForward
            /// </summary>
            [EnumMember(Value = "FxForward")]
            FxForward = 3,

            /// <summary>
            /// Enum Future for value: Future
            /// </summary>
            [EnumMember(Value = "Future")]
            Future = 4,

            /// <summary>
            /// Enum ExoticInstrument for value: ExoticInstrument
            /// </summary>
            [EnumMember(Value = "ExoticInstrument")]
            ExoticInstrument = 5,

            /// <summary>
            /// Enum FxOption for value: FxOption
            /// </summary>
            [EnumMember(Value = "FxOption")]
            FxOption = 6,

            /// <summary>
            /// Enum CreditDefaultSwap for value: CreditDefaultSwap
            /// </summary>
            [EnumMember(Value = "CreditDefaultSwap")]
            CreditDefaultSwap = 7,

            /// <summary>
            /// Enum InterestRateSwaption for value: InterestRateSwaption
            /// </summary>
            [EnumMember(Value = "InterestRateSwaption")]
            InterestRateSwaption = 8,

            /// <summary>
            /// Enum Bond for value: Bond
            /// </summary>
            [EnumMember(Value = "Bond")]
            Bond = 9,

            /// <summary>
            /// Enum EquityOption for value: EquityOption
            /// </summary>
            [EnumMember(Value = "EquityOption")]
            EquityOption = 10,

            /// <summary>
            /// Enum FixedLeg for value: FixedLeg
            /// </summary>
            [EnumMember(Value = "FixedLeg")]
            FixedLeg = 11,

            /// <summary>
            /// Enum FloatingLeg for value: FloatingLeg
            /// </summary>
            [EnumMember(Value = "FloatingLeg")]
            FloatingLeg = 12,

            /// <summary>
            /// Enum BespokeCashFlowsLeg for value: BespokeCashFlowsLeg
            /// </summary>
            [EnumMember(Value = "BespokeCashFlowsLeg")]
            BespokeCashFlowsLeg = 13,

            /// <summary>
            /// Enum Unknown for value: Unknown
            /// </summary>
            [EnumMember(Value = "Unknown")]
            Unknown = 14,

            /// <summary>
            /// Enum TermDeposit for value: TermDeposit
            /// </summary>
            [EnumMember(Value = "TermDeposit")]
            TermDeposit = 15,

            /// <summary>
            /// Enum ContractForDifference for value: ContractForDifference
            /// </summary>
            [EnumMember(Value = "ContractForDifference")]
            ContractForDifference = 16,

            /// <summary>
            /// Enum EquitySwap for value: EquitySwap
            /// </summary>
            [EnumMember(Value = "EquitySwap")]
            EquitySwap = 17,

            /// <summary>
            /// Enum CashPerpetual for value: CashPerpetual
            /// </summary>
            [EnumMember(Value = "CashPerpetual")]
            CashPerpetual = 18,

            /// <summary>
            /// Enum CapFloor for value: CapFloor
            /// </summary>
            [EnumMember(Value = "CapFloor")]
            CapFloor = 19,

            /// <summary>
            /// Enum CashSettled for value: CashSettled
            /// </summary>
            [EnumMember(Value = "CashSettled")]
            CashSettled = 20,

            /// <summary>
            /// Enum CdsIndex for value: CdsIndex
            /// </summary>
            [EnumMember(Value = "CdsIndex")]
            CdsIndex = 21,

            /// <summary>
            /// Enum Basket for value: Basket
            /// </summary>
            [EnumMember(Value = "Basket")]
            Basket = 22,

            /// <summary>
            /// Enum FundingLeg for value: FundingLeg
            /// </summary>
            [EnumMember(Value = "FundingLeg")]
            FundingLeg = 23,

            /// <summary>
            /// Enum FxSwap for value: FxSwap
            /// </summary>
            [EnumMember(Value = "FxSwap")]
            FxSwap = 24,

            /// <summary>
            /// Enum ForwardRateAgreement for value: ForwardRateAgreement
            /// </summary>
            [EnumMember(Value = "ForwardRateAgreement")]
            ForwardRateAgreement = 25,

            /// <summary>
            /// Enum SimpleInstrument for value: SimpleInstrument
            /// </summary>
            [EnumMember(Value = "SimpleInstrument")]
            SimpleInstrument = 26,

            /// <summary>
            /// Enum Repo for value: Repo
            /// </summary>
            [EnumMember(Value = "Repo")]
            Repo = 27,

            /// <summary>
            /// Enum Equity for value: Equity
            /// </summary>
            [EnumMember(Value = "Equity")]
            Equity = 28,

            /// <summary>
            /// Enum ExchangeTradedOption for value: ExchangeTradedOption
            /// </summary>
            [EnumMember(Value = "ExchangeTradedOption")]
            ExchangeTradedOption = 29,

            /// <summary>
            /// Enum ReferenceInstrument for value: ReferenceInstrument
            /// </summary>
            [EnumMember(Value = "ReferenceInstrument")]
            ReferenceInstrument = 30,

            /// <summary>
            /// Enum ComplexBond for value: ComplexBond
            /// </summary>
            [EnumMember(Value = "ComplexBond")]
            ComplexBond = 31,

            /// <summary>
            /// Enum InflationLinkedBond for value: InflationLinkedBond
            /// </summary>
            [EnumMember(Value = "InflationLinkedBond")]
            InflationLinkedBond = 32,

            /// <summary>
            /// Enum InflationSwap for value: InflationSwap
            /// </summary>
            [EnumMember(Value = "InflationSwap")]
            InflationSwap = 33,

            /// <summary>
            /// Enum SimpleCashFlowLoan for value: SimpleCashFlowLoan
            /// </summary>
            [EnumMember(Value = "SimpleCashFlowLoan")]
            SimpleCashFlowLoan = 34,

            /// <summary>
            /// Enum TotalReturnSwap for value: TotalReturnSwap
            /// </summary>
            [EnumMember(Value = "TotalReturnSwap")]
            TotalReturnSwap = 35,

            /// <summary>
            /// Enum InflationLeg for value: InflationLeg
            /// </summary>
            [EnumMember(Value = "InflationLeg")]
            InflationLeg = 36,

            /// <summary>
            /// Enum FundShareClass for value: FundShareClass
            /// </summary>
            [EnumMember(Value = "FundShareClass")]
            FundShareClass = 37,

            /// <summary>
            /// Enum FlexibleLoan for value: FlexibleLoan
            /// </summary>
            [EnumMember(Value = "FlexibleLoan")]
            FlexibleLoan = 38,

            /// <summary>
            /// Enum UnsettledCash for value: UnsettledCash
            /// </summary>
            [EnumMember(Value = "UnsettledCash")]
            UnsettledCash = 39,

            /// <summary>
            /// Enum Cash for value: Cash
            /// </summary>
            [EnumMember(Value = "Cash")]
            Cash = 40

        }


        /// <summary>
        /// The available values are: QuotedSecurity, InterestRateSwap, FxForward, Future, ExoticInstrument, FxOption, CreditDefaultSwap, InterestRateSwaption, Bond, EquityOption, FixedLeg, FloatingLeg, BespokeCashFlowsLeg, Unknown, TermDeposit, ContractForDifference, EquitySwap, CashPerpetual, CapFloor, CashSettled, CdsIndex, Basket, FundingLeg, FxSwap, ForwardRateAgreement, SimpleInstrument, Repo, Equity, ExchangeTradedOption, ReferenceInstrument, ComplexBond, InflationLinkedBond, InflationSwap, SimpleCashFlowLoan, TotalReturnSwap, InflationLeg, FundShareClass, FlexibleLoan, UnsettledCash, Cash
        /// </summary>
        /// <value>The available values are: QuotedSecurity, InterestRateSwap, FxForward, Future, ExoticInstrument, FxOption, CreditDefaultSwap, InterestRateSwaption, Bond, EquityOption, FixedLeg, FloatingLeg, BespokeCashFlowsLeg, Unknown, TermDeposit, ContractForDifference, EquitySwap, CashPerpetual, CapFloor, CashSettled, CdsIndex, Basket, FundingLeg, FxSwap, ForwardRateAgreement, SimpleInstrument, Repo, Equity, ExchangeTradedOption, ReferenceInstrument, ComplexBond, InflationLinkedBond, InflationSwap, SimpleCashFlowLoan, TotalReturnSwap, InflationLeg, FundShareClass, FlexibleLoan, UnsettledCash, Cash</value>
        [DataMember(Name = "instrumentType", IsRequired = true, EmitDefaultValue = true)]
        public InstrumentTypeEnum InstrumentType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="EquityOptionAllOf" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected EquityOptionAllOf() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="EquityOptionAllOf" /> class.
        /// </summary>
        /// <param name="startDate">The start date of the instrument. This is normally synonymous with the trade-date. (required).</param>
        /// <param name="optionMaturityDate">The maturity date of the option. (required).</param>
        /// <param name="optionSettlementDate">The settlement date of the option. (required).</param>
        /// <param name="deliveryType">Is the option cash settled or physical delivery of option    Supported string (enumeration) values are: [Cash, Physical]. (required).</param>
        /// <param name="optionType">Type of optionality for the option    Supported string (enumeration) values are: [Call, Put]. (required).</param>
        /// <param name="strike">The strike of the option. (required).</param>
        /// <param name="domCcy">The domestic currency of the instrument. (required).</param>
        /// <param name="underlyingIdentifier">The market identifier type of the underlying code, e.g RIC.    Supported string (enumeration) values are: [LusidInstrumentId, Isin, Sedol, Cusip, ClientInternal, Figi, RIC, QuotePermId, REDCode, BBGId, ICECode]. (required).</param>
        /// <param name="code">The identifying code for the equity underlying, e.g. &#39;IBM.N&#39;. (required).</param>
        /// <param name="equityOptionType">Equity option types. E.g. Vanilla (default), RightsIssue, Warrant.    Supported string (enumeration) values are: [Vanilla, RightsIssue, Warrant]..</param>
        /// <param name="numberOfShares">The amount of shares to exchange if the option is exercised..</param>
        /// <param name="premium">premium.</param>
        /// <param name="exerciseType">Type of optionality that is present; European, American.    Supported string (enumeration) values are: [European, American]..</param>
        /// <param name="instrumentType">The available values are: QuotedSecurity, InterestRateSwap, FxForward, Future, ExoticInstrument, FxOption, CreditDefaultSwap, InterestRateSwaption, Bond, EquityOption, FixedLeg, FloatingLeg, BespokeCashFlowsLeg, Unknown, TermDeposit, ContractForDifference, EquitySwap, CashPerpetual, CapFloor, CashSettled, CdsIndex, Basket, FundingLeg, FxSwap, ForwardRateAgreement, SimpleInstrument, Repo, Equity, ExchangeTradedOption, ReferenceInstrument, ComplexBond, InflationLinkedBond, InflationSwap, SimpleCashFlowLoan, TotalReturnSwap, InflationLeg, FundShareClass, FlexibleLoan, UnsettledCash, Cash (required).</param>
        public EquityOptionAllOf(DateTimeOffset startDate = default(DateTimeOffset), DateTimeOffset optionMaturityDate = default(DateTimeOffset), DateTimeOffset optionSettlementDate = default(DateTimeOffset), string deliveryType = default(string), string optionType = default(string), decimal strike = default(decimal), string domCcy = default(string), string underlyingIdentifier = default(string), string code = default(string), string equityOptionType = default(string), decimal? numberOfShares = default(decimal?), Premium premium = default(Premium), string exerciseType = default(string), InstrumentTypeEnum instrumentType = default(InstrumentTypeEnum))
        {
            this.StartDate = startDate;
            this.OptionMaturityDate = optionMaturityDate;
            this.OptionSettlementDate = optionSettlementDate;
            // to ensure "deliveryType" is required (not null)
            if (deliveryType == null)
            {
                throw new ArgumentNullException("deliveryType is a required property for EquityOptionAllOf and cannot be null");
            }
            this.DeliveryType = deliveryType;
            // to ensure "optionType" is required (not null)
            if (optionType == null)
            {
                throw new ArgumentNullException("optionType is a required property for EquityOptionAllOf and cannot be null");
            }
            this.OptionType = optionType;
            this.Strike = strike;
            // to ensure "domCcy" is required (not null)
            if (domCcy == null)
            {
                throw new ArgumentNullException("domCcy is a required property for EquityOptionAllOf and cannot be null");
            }
            this.DomCcy = domCcy;
            // to ensure "underlyingIdentifier" is required (not null)
            if (underlyingIdentifier == null)
            {
                throw new ArgumentNullException("underlyingIdentifier is a required property for EquityOptionAllOf and cannot be null");
            }
            this.UnderlyingIdentifier = underlyingIdentifier;
            // to ensure "code" is required (not null)
            if (code == null)
            {
                throw new ArgumentNullException("code is a required property for EquityOptionAllOf and cannot be null");
            }
            this.Code = code;
            this.InstrumentType = instrumentType;
            this.EquityOptionType = equityOptionType;
            this.NumberOfShares = numberOfShares;
            this.Premium = premium;
            this.ExerciseType = exerciseType;
        }

        /// <summary>
        /// The start date of the instrument. This is normally synonymous with the trade-date.
        /// </summary>
        /// <value>The start date of the instrument. This is normally synonymous with the trade-date.</value>
        [DataMember(Name = "startDate", IsRequired = true, EmitDefaultValue = true)]
        public DateTimeOffset StartDate { get; set; }

        /// <summary>
        /// The maturity date of the option.
        /// </summary>
        /// <value>The maturity date of the option.</value>
        [DataMember(Name = "optionMaturityDate", IsRequired = true, EmitDefaultValue = true)]
        public DateTimeOffset OptionMaturityDate { get; set; }

        /// <summary>
        /// The settlement date of the option.
        /// </summary>
        /// <value>The settlement date of the option.</value>
        [DataMember(Name = "optionSettlementDate", IsRequired = true, EmitDefaultValue = true)]
        public DateTimeOffset OptionSettlementDate { get; set; }

        /// <summary>
        /// Is the option cash settled or physical delivery of option    Supported string (enumeration) values are: [Cash, Physical].
        /// </summary>
        /// <value>Is the option cash settled or physical delivery of option    Supported string (enumeration) values are: [Cash, Physical].</value>
        [DataMember(Name = "deliveryType", IsRequired = true, EmitDefaultValue = true)]
        public string DeliveryType { get; set; }

        /// <summary>
        /// Type of optionality for the option    Supported string (enumeration) values are: [Call, Put].
        /// </summary>
        /// <value>Type of optionality for the option    Supported string (enumeration) values are: [Call, Put].</value>
        [DataMember(Name = "optionType", IsRequired = true, EmitDefaultValue = true)]
        public string OptionType { get; set; }

        /// <summary>
        /// The strike of the option.
        /// </summary>
        /// <value>The strike of the option.</value>
        [DataMember(Name = "strike", IsRequired = true, EmitDefaultValue = true)]
        public decimal Strike { get; set; }

        /// <summary>
        /// The domestic currency of the instrument.
        /// </summary>
        /// <value>The domestic currency of the instrument.</value>
        [DataMember(Name = "domCcy", IsRequired = true, EmitDefaultValue = true)]
        public string DomCcy { get; set; }

        /// <summary>
        /// The market identifier type of the underlying code, e.g RIC.    Supported string (enumeration) values are: [LusidInstrumentId, Isin, Sedol, Cusip, ClientInternal, Figi, RIC, QuotePermId, REDCode, BBGId, ICECode].
        /// </summary>
        /// <value>The market identifier type of the underlying code, e.g RIC.    Supported string (enumeration) values are: [LusidInstrumentId, Isin, Sedol, Cusip, ClientInternal, Figi, RIC, QuotePermId, REDCode, BBGId, ICECode].</value>
        [DataMember(Name = "underlyingIdentifier", IsRequired = true, EmitDefaultValue = true)]
        public string UnderlyingIdentifier { get; set; }

        /// <summary>
        /// The identifying code for the equity underlying, e.g. &#39;IBM.N&#39;.
        /// </summary>
        /// <value>The identifying code for the equity underlying, e.g. &#39;IBM.N&#39;.</value>
        [DataMember(Name = "code", IsRequired = true, EmitDefaultValue = true)]
        public string Code { get; set; }

        /// <summary>
        /// Equity option types. E.g. Vanilla (default), RightsIssue, Warrant.    Supported string (enumeration) values are: [Vanilla, RightsIssue, Warrant].
        /// </summary>
        /// <value>Equity option types. E.g. Vanilla (default), RightsIssue, Warrant.    Supported string (enumeration) values are: [Vanilla, RightsIssue, Warrant].</value>
        [DataMember(Name = "equityOptionType", EmitDefaultValue = true)]
        public string EquityOptionType { get; set; }

        /// <summary>
        /// The amount of shares to exchange if the option is exercised.
        /// </summary>
        /// <value>The amount of shares to exchange if the option is exercised.</value>
        [DataMember(Name = "numberOfShares", EmitDefaultValue = true)]
        public decimal? NumberOfShares { get; set; }

        /// <summary>
        /// Gets or Sets Premium
        /// </summary>
        [DataMember(Name = "premium", EmitDefaultValue = false)]
        public Premium Premium { get; set; }

        /// <summary>
        /// Type of optionality that is present; European, American.    Supported string (enumeration) values are: [European, American].
        /// </summary>
        /// <value>Type of optionality that is present; European, American.    Supported string (enumeration) values are: [European, American].</value>
        [DataMember(Name = "exerciseType", EmitDefaultValue = true)]
        public string ExerciseType { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EquityOptionAllOf {\n");
            sb.Append("  StartDate: ").Append(StartDate).Append("\n");
            sb.Append("  OptionMaturityDate: ").Append(OptionMaturityDate).Append("\n");
            sb.Append("  OptionSettlementDate: ").Append(OptionSettlementDate).Append("\n");
            sb.Append("  DeliveryType: ").Append(DeliveryType).Append("\n");
            sb.Append("  OptionType: ").Append(OptionType).Append("\n");
            sb.Append("  Strike: ").Append(Strike).Append("\n");
            sb.Append("  DomCcy: ").Append(DomCcy).Append("\n");
            sb.Append("  UnderlyingIdentifier: ").Append(UnderlyingIdentifier).Append("\n");
            sb.Append("  Code: ").Append(Code).Append("\n");
            sb.Append("  EquityOptionType: ").Append(EquityOptionType).Append("\n");
            sb.Append("  NumberOfShares: ").Append(NumberOfShares).Append("\n");
            sb.Append("  Premium: ").Append(Premium).Append("\n");
            sb.Append("  ExerciseType: ").Append(ExerciseType).Append("\n");
            sb.Append("  InstrumentType: ").Append(InstrumentType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as EquityOptionAllOf);
        }

        /// <summary>
        /// Returns true if EquityOptionAllOf instances are equal
        /// </summary>
        /// <param name="input">Instance of EquityOptionAllOf to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EquityOptionAllOf input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.StartDate == input.StartDate ||
                    (this.StartDate != null &&
                    this.StartDate.Equals(input.StartDate))
                ) && 
                (
                    this.OptionMaturityDate == input.OptionMaturityDate ||
                    (this.OptionMaturityDate != null &&
                    this.OptionMaturityDate.Equals(input.OptionMaturityDate))
                ) && 
                (
                    this.OptionSettlementDate == input.OptionSettlementDate ||
                    (this.OptionSettlementDate != null &&
                    this.OptionSettlementDate.Equals(input.OptionSettlementDate))
                ) && 
                (
                    this.DeliveryType == input.DeliveryType ||
                    (this.DeliveryType != null &&
                    this.DeliveryType.Equals(input.DeliveryType))
                ) && 
                (
                    this.OptionType == input.OptionType ||
                    (this.OptionType != null &&
                    this.OptionType.Equals(input.OptionType))
                ) && 
                (
                    this.Strike == input.Strike ||
                    this.Strike.Equals(input.Strike)
                ) && 
                (
                    this.DomCcy == input.DomCcy ||
                    (this.DomCcy != null &&
                    this.DomCcy.Equals(input.DomCcy))
                ) && 
                (
                    this.UnderlyingIdentifier == input.UnderlyingIdentifier ||
                    (this.UnderlyingIdentifier != null &&
                    this.UnderlyingIdentifier.Equals(input.UnderlyingIdentifier))
                ) && 
                (
                    this.Code == input.Code ||
                    (this.Code != null &&
                    this.Code.Equals(input.Code))
                ) && 
                (
                    this.EquityOptionType == input.EquityOptionType ||
                    (this.EquityOptionType != null &&
                    this.EquityOptionType.Equals(input.EquityOptionType))
                ) && 
                (
                    this.NumberOfShares == input.NumberOfShares ||
                    (this.NumberOfShares != null &&
                    this.NumberOfShares.Equals(input.NumberOfShares))
                ) && 
                (
                    this.Premium == input.Premium ||
                    (this.Premium != null &&
                    this.Premium.Equals(input.Premium))
                ) && 
                (
                    this.ExerciseType == input.ExerciseType ||
                    (this.ExerciseType != null &&
                    this.ExerciseType.Equals(input.ExerciseType))
                ) && 
                (
                    this.InstrumentType == input.InstrumentType ||
                    this.InstrumentType.Equals(input.InstrumentType)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.StartDate != null)
                {
                    hashCode = (hashCode * 59) + this.StartDate.GetHashCode();
                }
                if (this.OptionMaturityDate != null)
                {
                    hashCode = (hashCode * 59) + this.OptionMaturityDate.GetHashCode();
                }
                if (this.OptionSettlementDate != null)
                {
                    hashCode = (hashCode * 59) + this.OptionSettlementDate.GetHashCode();
                }
                if (this.DeliveryType != null)
                {
                    hashCode = (hashCode * 59) + this.DeliveryType.GetHashCode();
                }
                if (this.OptionType != null)
                {
                    hashCode = (hashCode * 59) + this.OptionType.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Strike.GetHashCode();
                if (this.DomCcy != null)
                {
                    hashCode = (hashCode * 59) + this.DomCcy.GetHashCode();
                }
                if (this.UnderlyingIdentifier != null)
                {
                    hashCode = (hashCode * 59) + this.UnderlyingIdentifier.GetHashCode();
                }
                if (this.Code != null)
                {
                    hashCode = (hashCode * 59) + this.Code.GetHashCode();
                }
                if (this.EquityOptionType != null)
                {
                    hashCode = (hashCode * 59) + this.EquityOptionType.GetHashCode();
                }
                if (this.NumberOfShares != null)
                {
                    hashCode = (hashCode * 59) + this.NumberOfShares.GetHashCode();
                }
                if (this.Premium != null)
                {
                    hashCode = (hashCode * 59) + this.Premium.GetHashCode();
                }
                if (this.ExerciseType != null)
                {
                    hashCode = (hashCode * 59) + this.ExerciseType.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.InstrumentType.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // DeliveryType (string) minLength
            if (this.DeliveryType != null && this.DeliveryType.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for DeliveryType, length must be greater than 1.", new [] { "DeliveryType" });
            }

            // OptionType (string) minLength
            if (this.OptionType != null && this.OptionType.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for OptionType, length must be greater than 1.", new [] { "OptionType" });
            }

            // UnderlyingIdentifier (string) minLength
            if (this.UnderlyingIdentifier != null && this.UnderlyingIdentifier.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for UnderlyingIdentifier, length must be greater than 1.", new [] { "UnderlyingIdentifier" });
            }

            // Code (string) minLength
            if (this.Code != null && this.Code.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Code, length must be greater than 1.", new [] { "Code" });
            }

            yield break;
        }
    }
}
