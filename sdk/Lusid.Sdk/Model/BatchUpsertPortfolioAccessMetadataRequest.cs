/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Lusid.Sdk.Client.OpenAPIDateConverter;

namespace Lusid.Sdk.Model
{
    /// <summary>
    /// BatchUpsertPortfolioAccessMetadataRequest
    /// </summary>
    [DataContract(Name = "BatchUpsertPortfolioAccessMetadataRequest")]
    public partial class BatchUpsertPortfolioAccessMetadataRequest : IEquatable<BatchUpsertPortfolioAccessMetadataRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="BatchUpsertPortfolioAccessMetadataRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected BatchUpsertPortfolioAccessMetadataRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="BatchUpsertPortfolioAccessMetadataRequest" /> class.
        /// </summary>
        /// <param name="portfolioId">portfolioId (required).</param>
        /// <param name="metadata">metadata (required).</param>
        public BatchUpsertPortfolioAccessMetadataRequest(ResourceId portfolioId = default(ResourceId), Dictionary<string, List<AccessMetadataValue>> metadata = default(Dictionary<string, List<AccessMetadataValue>>))
        {
            // to ensure "portfolioId" is required (not null)
            if (portfolioId == null)
            {
                throw new ArgumentNullException("portfolioId is a required property for BatchUpsertPortfolioAccessMetadataRequest and cannot be null");
            }
            this.PortfolioId = portfolioId;
            // to ensure "metadata" is required (not null)
            if (metadata == null)
            {
                throw new ArgumentNullException("metadata is a required property for BatchUpsertPortfolioAccessMetadataRequest and cannot be null");
            }
            this.Metadata = metadata;
        }

        /// <summary>
        /// Gets or Sets PortfolioId
        /// </summary>
        [DataMember(Name = "portfolioId", IsRequired = true, EmitDefaultValue = true)]
        public ResourceId PortfolioId { get; set; }

        /// <summary>
        /// Gets or Sets Metadata
        /// </summary>
        [DataMember(Name = "metadata", IsRequired = true, EmitDefaultValue = true)]
        public Dictionary<string, List<AccessMetadataValue>> Metadata { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class BatchUpsertPortfolioAccessMetadataRequest {\n");
            sb.Append("  PortfolioId: ").Append(PortfolioId).Append("\n");
            sb.Append("  Metadata: ").Append(Metadata).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as BatchUpsertPortfolioAccessMetadataRequest);
        }

        /// <summary>
        /// Returns true if BatchUpsertPortfolioAccessMetadataRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of BatchUpsertPortfolioAccessMetadataRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BatchUpsertPortfolioAccessMetadataRequest input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.PortfolioId == input.PortfolioId ||
                    (this.PortfolioId != null &&
                    this.PortfolioId.Equals(input.PortfolioId))
                ) && 
                (
                    this.Metadata == input.Metadata ||
                    this.Metadata != null &&
                    input.Metadata != null &&
                    this.Metadata.SequenceEqual(input.Metadata)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.PortfolioId != null)
                {
                    hashCode = (hashCode * 59) + this.PortfolioId.GetHashCode();
                }
                if (this.Metadata != null)
                {
                    hashCode = (hashCode * 59) + this.Metadata.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
