/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Lusid.Sdk.Client.OpenAPIDateConverter;

namespace Lusid.Sdk.Model
{
    /// <summary>
    /// The request used to create an Abor.
    /// </summary>
    [DataContract(Name = "AborRequest")]
    public partial class AborRequest : IEquatable<AborRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AborRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected AborRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="AborRequest" /> class.
        /// </summary>
        /// <param name="code">The code given for the Abor. (required).</param>
        /// <param name="displayName">The name of the Abor. (required).</param>
        /// <param name="description">The description for the Abor..</param>
        /// <param name="portfolioIds">The list with the portfolio ids which are part of the Abor. Note: These must all have the same base currency. (required).</param>
        /// <param name="aborConfigurationId">aborConfigurationId (required).</param>
        /// <param name="properties">A set of properties for the Abor..</param>
        public AborRequest(string code = default(string), string displayName = default(string), string description = default(string), List<PortfolioEntityId> portfolioIds = default(List<PortfolioEntityId>), ResourceId aborConfigurationId = default(ResourceId), Dictionary<string, Property> properties = default(Dictionary<string, Property>))
        {
            // to ensure "code" is required (not null)
            if (code == null)
            {
                throw new ArgumentNullException("code is a required property for AborRequest and cannot be null");
            }
            this.Code = code;
            // to ensure "displayName" is required (not null)
            if (displayName == null)
            {
                throw new ArgumentNullException("displayName is a required property for AborRequest and cannot be null");
            }
            this.DisplayName = displayName;
            // to ensure "portfolioIds" is required (not null)
            if (portfolioIds == null)
            {
                throw new ArgumentNullException("portfolioIds is a required property for AborRequest and cannot be null");
            }
            this.PortfolioIds = portfolioIds;
            // to ensure "aborConfigurationId" is required (not null)
            if (aborConfigurationId == null)
            {
                throw new ArgumentNullException("aborConfigurationId is a required property for AborRequest and cannot be null");
            }
            this.AborConfigurationId = aborConfigurationId;
            this.Description = description;
            this.Properties = properties;
        }

        /// <summary>
        /// The code given for the Abor.
        /// </summary>
        /// <value>The code given for the Abor.</value>
        [DataMember(Name = "code", IsRequired = true, EmitDefaultValue = true)]
        public string Code { get; set; }

        /// <summary>
        /// The name of the Abor.
        /// </summary>
        /// <value>The name of the Abor.</value>
        [DataMember(Name = "displayName", IsRequired = true, EmitDefaultValue = true)]
        public string DisplayName { get; set; }

        /// <summary>
        /// The description for the Abor.
        /// </summary>
        /// <value>The description for the Abor.</value>
        [DataMember(Name = "description", EmitDefaultValue = true)]
        public string Description { get; set; }

        /// <summary>
        /// The list with the portfolio ids which are part of the Abor. Note: These must all have the same base currency.
        /// </summary>
        /// <value>The list with the portfolio ids which are part of the Abor. Note: These must all have the same base currency.</value>
        [DataMember(Name = "portfolioIds", IsRequired = true, EmitDefaultValue = true)]
        public List<PortfolioEntityId> PortfolioIds { get; set; }

        /// <summary>
        /// Gets or Sets AborConfigurationId
        /// </summary>
        [DataMember(Name = "aborConfigurationId", IsRequired = true, EmitDefaultValue = true)]
        public ResourceId AborConfigurationId { get; set; }

        /// <summary>
        /// A set of properties for the Abor.
        /// </summary>
        /// <value>A set of properties for the Abor.</value>
        [DataMember(Name = "properties", EmitDefaultValue = true)]
        public Dictionary<string, Property> Properties { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AborRequest {\n");
            sb.Append("  Code: ").Append(Code).Append("\n");
            sb.Append("  DisplayName: ").Append(DisplayName).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  PortfolioIds: ").Append(PortfolioIds).Append("\n");
            sb.Append("  AborConfigurationId: ").Append(AborConfigurationId).Append("\n");
            sb.Append("  Properties: ").Append(Properties).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AborRequest);
        }

        /// <summary>
        /// Returns true if AborRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of AborRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AborRequest input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Code == input.Code ||
                    (this.Code != null &&
                    this.Code.Equals(input.Code))
                ) && 
                (
                    this.DisplayName == input.DisplayName ||
                    (this.DisplayName != null &&
                    this.DisplayName.Equals(input.DisplayName))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.PortfolioIds == input.PortfolioIds ||
                    this.PortfolioIds != null &&
                    input.PortfolioIds != null &&
                    this.PortfolioIds.SequenceEqual(input.PortfolioIds)
                ) && 
                (
                    this.AborConfigurationId == input.AborConfigurationId ||
                    (this.AborConfigurationId != null &&
                    this.AborConfigurationId.Equals(input.AborConfigurationId))
                ) && 
                (
                    this.Properties == input.Properties ||
                    this.Properties != null &&
                    input.Properties != null &&
                    this.Properties.SequenceEqual(input.Properties)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Code != null)
                {
                    hashCode = (hashCode * 59) + this.Code.GetHashCode();
                }
                if (this.DisplayName != null)
                {
                    hashCode = (hashCode * 59) + this.DisplayName.GetHashCode();
                }
                if (this.Description != null)
                {
                    hashCode = (hashCode * 59) + this.Description.GetHashCode();
                }
                if (this.PortfolioIds != null)
                {
                    hashCode = (hashCode * 59) + this.PortfolioIds.GetHashCode();
                }
                if (this.AborConfigurationId != null)
                {
                    hashCode = (hashCode * 59) + this.AborConfigurationId.GetHashCode();
                }
                if (this.Properties != null)
                {
                    hashCode = (hashCode * 59) + this.Properties.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Code (string) maxLength
            if (this.Code != null && this.Code.Length > 64)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Code, length must be less than 64.", new [] { "Code" });
            }

            // Code (string) minLength
            if (this.Code != null && this.Code.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Code, length must be greater than 1.", new [] { "Code" });
            }

            // Code (string) pattern
            Regex regexCode = new Regex(@"^[a-zA-Z0-9\-_]+$", RegexOptions.CultureInvariant);
            if (false == regexCode.Match(this.Code).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Code, must match a pattern of " + regexCode, new [] { "Code" });
            }

            // DisplayName (string) maxLength
            if (this.DisplayName != null && this.DisplayName.Length > 256)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for DisplayName, length must be less than 256.", new [] { "DisplayName" });
            }

            // DisplayName (string) minLength
            if (this.DisplayName != null && this.DisplayName.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for DisplayName, length must be greater than 1.", new [] { "DisplayName" });
            }

            // Description (string) maxLength
            if (this.Description != null && this.Description.Length > 1024)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Description, length must be less than 1024.", new [] { "Description" });
            }

            // Description (string) minLength
            if (this.Description != null && this.Description.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Description, length must be greater than 0.", new [] { "Description" });
            }

            // Description (string) pattern
            Regex regexDescription = new Regex(@"^[\s\S]*$", RegexOptions.CultureInvariant);
            if (false == regexDescription.Match(this.Description).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Description, must match a pattern of " + regexDescription, new [] { "Description" });
            }

            yield break;
        }
    }
}
