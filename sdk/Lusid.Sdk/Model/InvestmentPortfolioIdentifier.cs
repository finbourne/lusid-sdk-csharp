/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Lusid.Sdk.Client.OpenAPIDateConverter;

namespace Lusid.Sdk.Model
{
    /// <summary>
    /// InvestmentPortfolioIdentifier
    /// </summary>
    [DataContract(Name = "InvestmentPortfolioIdentifier")]
    public partial class InvestmentPortfolioIdentifier : IEquatable<InvestmentPortfolioIdentifier>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InvestmentPortfolioIdentifier" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected InvestmentPortfolioIdentifier() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="InvestmentPortfolioIdentifier" /> class.
        /// </summary>
        /// <param name="key">A client-defined key used to identify the Investment Portfolio, unique within the Investment Account (required).</param>
        /// <param name="portfolioScope">The scope of the Investment Portfolio. (required).</param>
        /// <param name="portfolioCode">The code of the Investment Portfolio. (required).</param>
        public InvestmentPortfolioIdentifier(string key = default(string), string portfolioScope = default(string), string portfolioCode = default(string))
        {
            // to ensure "key" is required (not null)
            if (key == null)
            {
                throw new ArgumentNullException("key is a required property for InvestmentPortfolioIdentifier and cannot be null");
            }
            this.Key = key;
            // to ensure "portfolioScope" is required (not null)
            if (portfolioScope == null)
            {
                throw new ArgumentNullException("portfolioScope is a required property for InvestmentPortfolioIdentifier and cannot be null");
            }
            this.PortfolioScope = portfolioScope;
            // to ensure "portfolioCode" is required (not null)
            if (portfolioCode == null)
            {
                throw new ArgumentNullException("portfolioCode is a required property for InvestmentPortfolioIdentifier and cannot be null");
            }
            this.PortfolioCode = portfolioCode;
        }

        /// <summary>
        /// A client-defined key used to identify the Investment Portfolio, unique within the Investment Account
        /// </summary>
        /// <value>A client-defined key used to identify the Investment Portfolio, unique within the Investment Account</value>
        [DataMember(Name = "key", IsRequired = true, EmitDefaultValue = true)]
        public string Key { get; set; }

        /// <summary>
        /// The scope of the Investment Portfolio.
        /// </summary>
        /// <value>The scope of the Investment Portfolio.</value>
        [DataMember(Name = "portfolioScope", IsRequired = true, EmitDefaultValue = true)]
        public string PortfolioScope { get; set; }

        /// <summary>
        /// The code of the Investment Portfolio.
        /// </summary>
        /// <value>The code of the Investment Portfolio.</value>
        [DataMember(Name = "portfolioCode", IsRequired = true, EmitDefaultValue = true)]
        public string PortfolioCode { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class InvestmentPortfolioIdentifier {\n");
            sb.Append("  Key: ").Append(Key).Append("\n");
            sb.Append("  PortfolioScope: ").Append(PortfolioScope).Append("\n");
            sb.Append("  PortfolioCode: ").Append(PortfolioCode).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as InvestmentPortfolioIdentifier);
        }

        /// <summary>
        /// Returns true if InvestmentPortfolioIdentifier instances are equal
        /// </summary>
        /// <param name="input">Instance of InvestmentPortfolioIdentifier to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InvestmentPortfolioIdentifier input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Key == input.Key ||
                    (this.Key != null &&
                    this.Key.Equals(input.Key))
                ) && 
                (
                    this.PortfolioScope == input.PortfolioScope ||
                    (this.PortfolioScope != null &&
                    this.PortfolioScope.Equals(input.PortfolioScope))
                ) && 
                (
                    this.PortfolioCode == input.PortfolioCode ||
                    (this.PortfolioCode != null &&
                    this.PortfolioCode.Equals(input.PortfolioCode))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Key != null)
                {
                    hashCode = (hashCode * 59) + this.Key.GetHashCode();
                }
                if (this.PortfolioScope != null)
                {
                    hashCode = (hashCode * 59) + this.PortfolioScope.GetHashCode();
                }
                if (this.PortfolioCode != null)
                {
                    hashCode = (hashCode * 59) + this.PortfolioCode.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Key (string) maxLength
            if (this.Key != null && this.Key.Length > 64)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Key, length must be less than 64.", new [] { "Key" });
            }

            // Key (string) minLength
            if (this.Key != null && this.Key.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Key, length must be greater than 1.", new [] { "Key" });
            }

            // Key (string) pattern
            Regex regexKey = new Regex(@"^[a-zA-Z0-9\-_]+$", RegexOptions.CultureInvariant);
            if (false == regexKey.Match(this.Key).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Key, must match a pattern of " + regexKey, new [] { "Key" });
            }

            // PortfolioScope (string) maxLength
            if (this.PortfolioScope != null && this.PortfolioScope.Length > 64)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PortfolioScope, length must be less than 64.", new [] { "PortfolioScope" });
            }

            // PortfolioScope (string) minLength
            if (this.PortfolioScope != null && this.PortfolioScope.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PortfolioScope, length must be greater than 1.", new [] { "PortfolioScope" });
            }

            // PortfolioScope (string) pattern
            Regex regexPortfolioScope = new Regex(@"^[a-zA-Z0-9\-_]+$", RegexOptions.CultureInvariant);
            if (false == regexPortfolioScope.Match(this.PortfolioScope).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PortfolioScope, must match a pattern of " + regexPortfolioScope, new [] { "PortfolioScope" });
            }

            // PortfolioCode (string) maxLength
            if (this.PortfolioCode != null && this.PortfolioCode.Length > 64)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PortfolioCode, length must be less than 64.", new [] { "PortfolioCode" });
            }

            // PortfolioCode (string) minLength
            if (this.PortfolioCode != null && this.PortfolioCode.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PortfolioCode, length must be greater than 1.", new [] { "PortfolioCode" });
            }

            // PortfolioCode (string) pattern
            Regex regexPortfolioCode = new Regex(@"^[a-zA-Z0-9\-_]+$", RegexOptions.CultureInvariant);
            if (false == regexPortfolioCode.Match(this.PortfolioCode).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PortfolioCode, must match a pattern of " + regexPortfolioCode, new [] { "PortfolioCode" });
            }

            yield break;
        }
    }
}
