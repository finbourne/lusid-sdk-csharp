/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Lusid.Sdk.Client.OpenAPIDateConverter;

namespace Lusid.Sdk.Model
{
    /// <summary>
    /// A Fund entity.
    /// </summary>
    [DataContract(Name = "Fund")]
    public partial class Fund : IEquatable<Fund>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Fund" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Fund() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Fund" /> class.
        /// </summary>
        /// <param name="href">The specific Uniform Resource Identifier (URI) for this resource at the requested effective and asAt datetime..</param>
        /// <param name="id">id (required).</param>
        /// <param name="displayName">The name of the Fund..</param>
        /// <param name="description">A description for the Fund..</param>
        /// <param name="baseCurrency">The base currency of the Fund in ISO 4217 currency code format. All portfolios must be of a matching base currency..</param>
        /// <param name="investorStructure">The Investor structure to be used by the Fund. Supported values are &#39;NonUnitised&#39;, &#39;Classes&#39; and &#39;Custom&#39;. (required).</param>
        /// <param name="portfolioIds">A list of the portfolios on the fund, which are part of the Fund. Note: These must all have the same base currency, which must also much the Fund Base Currency..</param>
        /// <param name="fundConfigurationId">fundConfigurationId.</param>
        /// <param name="aborId">aborId.</param>
        /// <param name="shareClassInstruments">Details the user-provided instrument identifiers and the instrument resolved from them..</param>
        /// <param name="type">The type of fund; &#39;Standalone&#39;, &#39;Master&#39; or &#39;Feeder&#39;.</param>
        /// <param name="inceptionDate">Inception date of the Fund (required).</param>
        /// <param name="decimalPlaces">Number of decimal places for reporting.</param>
        /// <param name="yearEndDate">yearEndDate.</param>
        /// <param name="primaryNavType">primaryNavType.</param>
        /// <param name="additionalNavTypes">The definitions for any additional NAVs on the Fund..</param>
        /// <param name="properties">A set of properties for the Fund..</param>
        /// <param name="varVersion">varVersion.</param>
        /// <param name="links">links.</param>
        public Fund(string href = default(string), ResourceId id = default(ResourceId), string displayName = default(string), string description = default(string), string baseCurrency = default(string), string investorStructure = default(string), List<PortfolioEntityIdWithDetails> portfolioIds = default(List<PortfolioEntityIdWithDetails>), ResourceId fundConfigurationId = default(ResourceId), ResourceId aborId = default(ResourceId), List<InstrumentResolutionDetail> shareClassInstruments = default(List<InstrumentResolutionDetail>), string type = default(string), DateTimeOffset inceptionDate = default(DateTimeOffset), int? decimalPlaces = default(int?), DayMonth yearEndDate = default(DayMonth), NavTypeDefinition primaryNavType = default(NavTypeDefinition), List<NavTypeDefinition> additionalNavTypes = default(List<NavTypeDefinition>), Dictionary<string, Property> properties = default(Dictionary<string, Property>), ModelVersion varVersion = default(ModelVersion), List<Link> links = default(List<Link>))
        {
            // to ensure "id" is required (not null)
            if (id == null)
            {
                throw new ArgumentNullException("id is a required property for Fund and cannot be null");
            }
            this.Id = id;
            // to ensure "investorStructure" is required (not null)
            if (investorStructure == null)
            {
                throw new ArgumentNullException("investorStructure is a required property for Fund and cannot be null");
            }
            this.InvestorStructure = investorStructure;
            this.InceptionDate = inceptionDate;
            this.Href = href;
            this.DisplayName = displayName;
            this.Description = description;
            this.BaseCurrency = baseCurrency;
            this.PortfolioIds = portfolioIds;
            this.FundConfigurationId = fundConfigurationId;
            this.AborId = aborId;
            this.ShareClassInstruments = shareClassInstruments;
            this.Type = type;
            this.DecimalPlaces = decimalPlaces;
            this.YearEndDate = yearEndDate;
            this.PrimaryNavType = primaryNavType;
            this.AdditionalNavTypes = additionalNavTypes;
            this.Properties = properties;
            this.VarVersion = varVersion;
            this.Links = links;
        }

        /// <summary>
        /// The specific Uniform Resource Identifier (URI) for this resource at the requested effective and asAt datetime.
        /// </summary>
        /// <value>The specific Uniform Resource Identifier (URI) for this resource at the requested effective and asAt datetime.</value>
        [DataMember(Name = "href", EmitDefaultValue = true)]
        public string Href { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = true)]
        public ResourceId Id { get; set; }

        /// <summary>
        /// The name of the Fund.
        /// </summary>
        /// <value>The name of the Fund.</value>
        [DataMember(Name = "displayName", EmitDefaultValue = true)]
        public string DisplayName { get; set; }

        /// <summary>
        /// A description for the Fund.
        /// </summary>
        /// <value>A description for the Fund.</value>
        [DataMember(Name = "description", EmitDefaultValue = true)]
        public string Description { get; set; }

        /// <summary>
        /// The base currency of the Fund in ISO 4217 currency code format. All portfolios must be of a matching base currency.
        /// </summary>
        /// <value>The base currency of the Fund in ISO 4217 currency code format. All portfolios must be of a matching base currency.</value>
        [DataMember(Name = "baseCurrency", EmitDefaultValue = true)]
        public string BaseCurrency { get; set; }

        /// <summary>
        /// The Investor structure to be used by the Fund. Supported values are &#39;NonUnitised&#39;, &#39;Classes&#39; and &#39;Custom&#39;.
        /// </summary>
        /// <value>The Investor structure to be used by the Fund. Supported values are &#39;NonUnitised&#39;, &#39;Classes&#39; and &#39;Custom&#39;.</value>
        [DataMember(Name = "investorStructure", IsRequired = true, EmitDefaultValue = true)]
        public string InvestorStructure { get; set; }

        /// <summary>
        /// A list of the portfolios on the fund, which are part of the Fund. Note: These must all have the same base currency, which must also much the Fund Base Currency.
        /// </summary>
        /// <value>A list of the portfolios on the fund, which are part of the Fund. Note: These must all have the same base currency, which must also much the Fund Base Currency.</value>
        [DataMember(Name = "portfolioIds", EmitDefaultValue = true)]
        public List<PortfolioEntityIdWithDetails> PortfolioIds { get; set; }

        /// <summary>
        /// Gets or Sets FundConfigurationId
        /// </summary>
        [DataMember(Name = "fundConfigurationId", EmitDefaultValue = false)]
        public ResourceId FundConfigurationId { get; set; }

        /// <summary>
        /// Gets or Sets AborId
        /// </summary>
        [DataMember(Name = "aborId", EmitDefaultValue = false)]
        public ResourceId AborId { get; set; }

        /// <summary>
        /// Details the user-provided instrument identifiers and the instrument resolved from them.
        /// </summary>
        /// <value>Details the user-provided instrument identifiers and the instrument resolved from them.</value>
        [DataMember(Name = "shareClassInstruments", EmitDefaultValue = true)]
        public List<InstrumentResolutionDetail> ShareClassInstruments { get; set; }

        /// <summary>
        /// The type of fund; &#39;Standalone&#39;, &#39;Master&#39; or &#39;Feeder&#39;
        /// </summary>
        /// <value>The type of fund; &#39;Standalone&#39;, &#39;Master&#39; or &#39;Feeder&#39;</value>
        [DataMember(Name = "type", EmitDefaultValue = true)]
        public string Type { get; set; }

        /// <summary>
        /// Inception date of the Fund
        /// </summary>
        /// <value>Inception date of the Fund</value>
        [DataMember(Name = "inceptionDate", IsRequired = true, EmitDefaultValue = true)]
        public DateTimeOffset InceptionDate { get; set; }

        /// <summary>
        /// Number of decimal places for reporting
        /// </summary>
        /// <value>Number of decimal places for reporting</value>
        [DataMember(Name = "decimalPlaces", EmitDefaultValue = true)]
        public int? DecimalPlaces { get; set; }

        /// <summary>
        /// Gets or Sets YearEndDate
        /// </summary>
        [DataMember(Name = "yearEndDate", EmitDefaultValue = false)]
        public DayMonth YearEndDate { get; set; }

        /// <summary>
        /// Gets or Sets PrimaryNavType
        /// </summary>
        [DataMember(Name = "primaryNavType", EmitDefaultValue = false)]
        public NavTypeDefinition PrimaryNavType { get; set; }

        /// <summary>
        /// The definitions for any additional NAVs on the Fund.
        /// </summary>
        /// <value>The definitions for any additional NAVs on the Fund.</value>
        [DataMember(Name = "additionalNavTypes", EmitDefaultValue = true)]
        public List<NavTypeDefinition> AdditionalNavTypes { get; set; }

        /// <summary>
        /// A set of properties for the Fund.
        /// </summary>
        /// <value>A set of properties for the Fund.</value>
        [DataMember(Name = "properties", EmitDefaultValue = true)]
        public Dictionary<string, Property> Properties { get; set; }

        /// <summary>
        /// Gets or Sets VarVersion
        /// </summary>
        [DataMember(Name = "version", EmitDefaultValue = false)]
        public ModelVersion VarVersion { get; set; }

        /// <summary>
        /// Gets or Sets Links
        /// </summary>
        [DataMember(Name = "links", EmitDefaultValue = true)]
        public List<Link> Links { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Fund {\n");
            sb.Append("  Href: ").Append(Href).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  DisplayName: ").Append(DisplayName).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  BaseCurrency: ").Append(BaseCurrency).Append("\n");
            sb.Append("  InvestorStructure: ").Append(InvestorStructure).Append("\n");
            sb.Append("  PortfolioIds: ").Append(PortfolioIds).Append("\n");
            sb.Append("  FundConfigurationId: ").Append(FundConfigurationId).Append("\n");
            sb.Append("  AborId: ").Append(AborId).Append("\n");
            sb.Append("  ShareClassInstruments: ").Append(ShareClassInstruments).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  InceptionDate: ").Append(InceptionDate).Append("\n");
            sb.Append("  DecimalPlaces: ").Append(DecimalPlaces).Append("\n");
            sb.Append("  YearEndDate: ").Append(YearEndDate).Append("\n");
            sb.Append("  PrimaryNavType: ").Append(PrimaryNavType).Append("\n");
            sb.Append("  AdditionalNavTypes: ").Append(AdditionalNavTypes).Append("\n");
            sb.Append("  Properties: ").Append(Properties).Append("\n");
            sb.Append("  VarVersion: ").Append(VarVersion).Append("\n");
            sb.Append("  Links: ").Append(Links).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Fund);
        }

        /// <summary>
        /// Returns true if Fund instances are equal
        /// </summary>
        /// <param name="input">Instance of Fund to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Fund input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Href == input.Href ||
                    (this.Href != null &&
                    this.Href.Equals(input.Href))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.DisplayName == input.DisplayName ||
                    (this.DisplayName != null &&
                    this.DisplayName.Equals(input.DisplayName))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.BaseCurrency == input.BaseCurrency ||
                    (this.BaseCurrency != null &&
                    this.BaseCurrency.Equals(input.BaseCurrency))
                ) && 
                (
                    this.InvestorStructure == input.InvestorStructure ||
                    (this.InvestorStructure != null &&
                    this.InvestorStructure.Equals(input.InvestorStructure))
                ) && 
                (
                    this.PortfolioIds == input.PortfolioIds ||
                    this.PortfolioIds != null &&
                    input.PortfolioIds != null &&
                    this.PortfolioIds.SequenceEqual(input.PortfolioIds)
                ) && 
                (
                    this.FundConfigurationId == input.FundConfigurationId ||
                    (this.FundConfigurationId != null &&
                    this.FundConfigurationId.Equals(input.FundConfigurationId))
                ) && 
                (
                    this.AborId == input.AborId ||
                    (this.AborId != null &&
                    this.AborId.Equals(input.AborId))
                ) && 
                (
                    this.ShareClassInstruments == input.ShareClassInstruments ||
                    this.ShareClassInstruments != null &&
                    input.ShareClassInstruments != null &&
                    this.ShareClassInstruments.SequenceEqual(input.ShareClassInstruments)
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.InceptionDate == input.InceptionDate ||
                    (this.InceptionDate != null &&
                    this.InceptionDate.Equals(input.InceptionDate))
                ) && 
                (
                    this.DecimalPlaces == input.DecimalPlaces ||
                    (this.DecimalPlaces != null &&
                    this.DecimalPlaces.Equals(input.DecimalPlaces))
                ) && 
                (
                    this.YearEndDate == input.YearEndDate ||
                    (this.YearEndDate != null &&
                    this.YearEndDate.Equals(input.YearEndDate))
                ) && 
                (
                    this.PrimaryNavType == input.PrimaryNavType ||
                    (this.PrimaryNavType != null &&
                    this.PrimaryNavType.Equals(input.PrimaryNavType))
                ) && 
                (
                    this.AdditionalNavTypes == input.AdditionalNavTypes ||
                    this.AdditionalNavTypes != null &&
                    input.AdditionalNavTypes != null &&
                    this.AdditionalNavTypes.SequenceEqual(input.AdditionalNavTypes)
                ) && 
                (
                    this.Properties == input.Properties ||
                    this.Properties != null &&
                    input.Properties != null &&
                    this.Properties.SequenceEqual(input.Properties)
                ) && 
                (
                    this.VarVersion == input.VarVersion ||
                    (this.VarVersion != null &&
                    this.VarVersion.Equals(input.VarVersion))
                ) && 
                (
                    this.Links == input.Links ||
                    this.Links != null &&
                    input.Links != null &&
                    this.Links.SequenceEqual(input.Links)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Href != null)
                {
                    hashCode = (hashCode * 59) + this.Href.GetHashCode();
                }
                if (this.Id != null)
                {
                    hashCode = (hashCode * 59) + this.Id.GetHashCode();
                }
                if (this.DisplayName != null)
                {
                    hashCode = (hashCode * 59) + this.DisplayName.GetHashCode();
                }
                if (this.Description != null)
                {
                    hashCode = (hashCode * 59) + this.Description.GetHashCode();
                }
                if (this.BaseCurrency != null)
                {
                    hashCode = (hashCode * 59) + this.BaseCurrency.GetHashCode();
                }
                if (this.InvestorStructure != null)
                {
                    hashCode = (hashCode * 59) + this.InvestorStructure.GetHashCode();
                }
                if (this.PortfolioIds != null)
                {
                    hashCode = (hashCode * 59) + this.PortfolioIds.GetHashCode();
                }
                if (this.FundConfigurationId != null)
                {
                    hashCode = (hashCode * 59) + this.FundConfigurationId.GetHashCode();
                }
                if (this.AborId != null)
                {
                    hashCode = (hashCode * 59) + this.AborId.GetHashCode();
                }
                if (this.ShareClassInstruments != null)
                {
                    hashCode = (hashCode * 59) + this.ShareClassInstruments.GetHashCode();
                }
                if (this.Type != null)
                {
                    hashCode = (hashCode * 59) + this.Type.GetHashCode();
                }
                if (this.InceptionDate != null)
                {
                    hashCode = (hashCode * 59) + this.InceptionDate.GetHashCode();
                }
                if (this.DecimalPlaces != null)
                {
                    hashCode = (hashCode * 59) + this.DecimalPlaces.GetHashCode();
                }
                if (this.YearEndDate != null)
                {
                    hashCode = (hashCode * 59) + this.YearEndDate.GetHashCode();
                }
                if (this.PrimaryNavType != null)
                {
                    hashCode = (hashCode * 59) + this.PrimaryNavType.GetHashCode();
                }
                if (this.AdditionalNavTypes != null)
                {
                    hashCode = (hashCode * 59) + this.AdditionalNavTypes.GetHashCode();
                }
                if (this.Properties != null)
                {
                    hashCode = (hashCode * 59) + this.Properties.GetHashCode();
                }
                if (this.VarVersion != null)
                {
                    hashCode = (hashCode * 59) + this.VarVersion.GetHashCode();
                }
                if (this.Links != null)
                {
                    hashCode = (hashCode * 59) + this.Links.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // DisplayName (string) maxLength
            if (this.DisplayName != null && this.DisplayName.Length > 256)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for DisplayName, length must be less than 256.", new [] { "DisplayName" });
            }

            // DisplayName (string) minLength
            if (this.DisplayName != null && this.DisplayName.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for DisplayName, length must be greater than 1.", new [] { "DisplayName" });
            }

            // Description (string) maxLength
            if (this.Description != null && this.Description.Length > 1024)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Description, length must be less than 1024.", new [] { "Description" });
            }

            // Description (string) minLength
            if (this.Description != null && this.Description.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Description, length must be greater than 0.", new [] { "Description" });
            }

            // Description (string) pattern
            Regex regexDescription = new Regex(@"^[\s\S]*$", RegexOptions.CultureInvariant);
            if (false == regexDescription.Match(this.Description).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Description, must match a pattern of " + regexDescription, new [] { "Description" });
            }

            // InvestorStructure (string) minLength
            if (this.InvestorStructure != null && this.InvestorStructure.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for InvestorStructure, length must be greater than 1.", new [] { "InvestorStructure" });
            }

            // DecimalPlaces (int?) maximum
            if (this.DecimalPlaces > (int?)30)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for DecimalPlaces, must be a value less than or equal to 30.", new [] { "DecimalPlaces" });
            }

            // DecimalPlaces (int?) minimum
            if (this.DecimalPlaces < (int?)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for DecimalPlaces, must be a value greater than or equal to 0.", new [] { "DecimalPlaces" });
            }

            yield break;
        }
    }
}
