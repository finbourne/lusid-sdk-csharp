/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Lusid.Sdk.Client.OpenAPIDateConverter;

namespace Lusid.Sdk.Model
{
    /// <summary>
    /// Instrument capabilities containing useful information about the instrument and the model. This includes  - features corresponding to the instrument i.e. Optionality:American, Other:InflationLinked  - supported addresses (if model provided) i.e. Valuation/Pv, Valuation/DirtyPriceKey, Valuation/Accrued  - economic dependencies (if model provided) i.e. Cash:USD, Fx:GBP.USD, Rates:GBP.GBPOIS
    /// </summary>
    [DataContract(Name = "InstrumentCapabilities")]
    public partial class InstrumentCapabilities : IEquatable<InstrumentCapabilities>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InstrumentCapabilities" /> class.
        /// </summary>
        /// <param name="instrumentId">The Lusid instrument id for the instrument e.g. &#39;LUID_00003D4X&#39;..</param>
        /// <param name="model">The pricing model e.g. &#39;Discounting&#39;..</param>
        /// <param name="features">Features of the instrument describing its optionality, payoff type and more e.g. &#39;Instrument/Features/Exercise: American&#39;, &#39;Instrument/Features/Product: Option&#39;.</param>
        /// <param name="supportedAddresses">Queryable addresses supported by the model, e.g. &#39;Valuation/Pv&#39;, &#39;Valuation/Accrued&#39;..</param>
        /// <param name="economicDependencies">Economic dependencies for the model, e.g. &#39;Fx:GBP.USD&#39;, &#39;Cash:GBP&#39;, &#39;Rates:GBP.GBPOIS&#39;..</param>
        /// <param name="links">links.</param>
        public InstrumentCapabilities(string instrumentId = default(string), string model = default(string), Dictionary<string, string> features = default(Dictionary<string, string>), List<DescribedAddressKey> supportedAddresses = default(List<DescribedAddressKey>), List<EconomicDependency> economicDependencies = default(List<EconomicDependency>), List<Link> links = default(List<Link>))
        {
            this.InstrumentId = instrumentId;
            this.Model = model;
            this.Features = features;
            this.SupportedAddresses = supportedAddresses;
            this.EconomicDependencies = economicDependencies;
            this.Links = links;
        }

        /// <summary>
        /// The Lusid instrument id for the instrument e.g. &#39;LUID_00003D4X&#39;.
        /// </summary>
        /// <value>The Lusid instrument id for the instrument e.g. &#39;LUID_00003D4X&#39;.</value>
        [DataMember(Name = "instrumentId", EmitDefaultValue = true)]
        public string InstrumentId { get; set; }

        /// <summary>
        /// The pricing model e.g. &#39;Discounting&#39;.
        /// </summary>
        /// <value>The pricing model e.g. &#39;Discounting&#39;.</value>
        [DataMember(Name = "model", EmitDefaultValue = true)]
        public string Model { get; set; }

        /// <summary>
        /// Features of the instrument describing its optionality, payoff type and more e.g. &#39;Instrument/Features/Exercise: American&#39;, &#39;Instrument/Features/Product: Option&#39;
        /// </summary>
        /// <value>Features of the instrument describing its optionality, payoff type and more e.g. &#39;Instrument/Features/Exercise: American&#39;, &#39;Instrument/Features/Product: Option&#39;</value>
        [DataMember(Name = "features", EmitDefaultValue = true)]
        public Dictionary<string, string> Features { get; set; }

        /// <summary>
        /// Queryable addresses supported by the model, e.g. &#39;Valuation/Pv&#39;, &#39;Valuation/Accrued&#39;.
        /// </summary>
        /// <value>Queryable addresses supported by the model, e.g. &#39;Valuation/Pv&#39;, &#39;Valuation/Accrued&#39;.</value>
        [DataMember(Name = "supportedAddresses", EmitDefaultValue = true)]
        public List<DescribedAddressKey> SupportedAddresses { get; set; }

        /// <summary>
        /// Economic dependencies for the model, e.g. &#39;Fx:GBP.USD&#39;, &#39;Cash:GBP&#39;, &#39;Rates:GBP.GBPOIS&#39;.
        /// </summary>
        /// <value>Economic dependencies for the model, e.g. &#39;Fx:GBP.USD&#39;, &#39;Cash:GBP&#39;, &#39;Rates:GBP.GBPOIS&#39;.</value>
        [DataMember(Name = "economicDependencies", EmitDefaultValue = true)]
        public List<EconomicDependency> EconomicDependencies { get; set; }

        /// <summary>
        /// Gets or Sets Links
        /// </summary>
        [DataMember(Name = "links", EmitDefaultValue = true)]
        public List<Link> Links { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class InstrumentCapabilities {\n");
            sb.Append("  InstrumentId: ").Append(InstrumentId).Append("\n");
            sb.Append("  Model: ").Append(Model).Append("\n");
            sb.Append("  Features: ").Append(Features).Append("\n");
            sb.Append("  SupportedAddresses: ").Append(SupportedAddresses).Append("\n");
            sb.Append("  EconomicDependencies: ").Append(EconomicDependencies).Append("\n");
            sb.Append("  Links: ").Append(Links).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as InstrumentCapabilities);
        }

        /// <summary>
        /// Returns true if InstrumentCapabilities instances are equal
        /// </summary>
        /// <param name="input">Instance of InstrumentCapabilities to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InstrumentCapabilities input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.InstrumentId == input.InstrumentId ||
                    (this.InstrumentId != null &&
                    this.InstrumentId.Equals(input.InstrumentId))
                ) && 
                (
                    this.Model == input.Model ||
                    (this.Model != null &&
                    this.Model.Equals(input.Model))
                ) && 
                (
                    this.Features == input.Features ||
                    this.Features != null &&
                    input.Features != null &&
                    this.Features.SequenceEqual(input.Features)
                ) && 
                (
                    this.SupportedAddresses == input.SupportedAddresses ||
                    this.SupportedAddresses != null &&
                    input.SupportedAddresses != null &&
                    this.SupportedAddresses.SequenceEqual(input.SupportedAddresses)
                ) && 
                (
                    this.EconomicDependencies == input.EconomicDependencies ||
                    this.EconomicDependencies != null &&
                    input.EconomicDependencies != null &&
                    this.EconomicDependencies.SequenceEqual(input.EconomicDependencies)
                ) && 
                (
                    this.Links == input.Links ||
                    this.Links != null &&
                    input.Links != null &&
                    this.Links.SequenceEqual(input.Links)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.InstrumentId != null)
                {
                    hashCode = (hashCode * 59) + this.InstrumentId.GetHashCode();
                }
                if (this.Model != null)
                {
                    hashCode = (hashCode * 59) + this.Model.GetHashCode();
                }
                if (this.Features != null)
                {
                    hashCode = (hashCode * 59) + this.Features.GetHashCode();
                }
                if (this.SupportedAddresses != null)
                {
                    hashCode = (hashCode * 59) + this.SupportedAddresses.GetHashCode();
                }
                if (this.EconomicDependencies != null)
                {
                    hashCode = (hashCode * 59) + this.EconomicDependencies.GetHashCode();
                }
                if (this.Links != null)
                {
                    hashCode = (hashCode * 59) + this.Links.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
