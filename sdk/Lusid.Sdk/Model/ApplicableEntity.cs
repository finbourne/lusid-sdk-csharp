/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Lusid.Sdk.Client.OpenAPIDateConverter;

namespace Lusid.Sdk.Model
{
    /// <summary>
    /// ApplicableEntity
    /// </summary>
    [DataContract(Name = "ApplicableEntity")]
    public partial class ApplicableEntity : IEquatable<ApplicableEntity>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ApplicableEntity" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ApplicableEntity() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ApplicableEntity" /> class.
        /// </summary>
        /// <param name="entityType">The type of entity (e.g., Instrument, Portfolio) that this DataSeries applies to. (required).</param>
        /// <param name="entityScope">The scope of the entity..</param>
        /// <param name="identifierScope">The scope of the identifier used to uniquely identify the entity..</param>
        /// <param name="identifierType">The type of identifier (e.g., Figi, Isin) used to uniquely identify the entity..</param>
        /// <param name="identifierValue">The value of the identifier used to uniquely identify the entity..</param>
        public ApplicableEntity(string entityType = default(string), string entityScope = default(string), string identifierScope = default(string), string identifierType = default(string), string identifierValue = default(string))
        {
            // to ensure "entityType" is required (not null)
            if (entityType == null)
            {
                throw new ArgumentNullException("entityType is a required property for ApplicableEntity and cannot be null");
            }
            this.EntityType = entityType;
            this.EntityScope = entityScope;
            this.IdentifierScope = identifierScope;
            this.IdentifierType = identifierType;
            this.IdentifierValue = identifierValue;
        }

        /// <summary>
        /// The type of entity (e.g., Instrument, Portfolio) that this DataSeries applies to.
        /// </summary>
        /// <value>The type of entity (e.g., Instrument, Portfolio) that this DataSeries applies to.</value>
        [DataMember(Name = "entityType", IsRequired = true, EmitDefaultValue = true)]
        public string EntityType { get; set; }

        /// <summary>
        /// The scope of the entity.
        /// </summary>
        /// <value>The scope of the entity.</value>
        [DataMember(Name = "entityScope", EmitDefaultValue = true)]
        public string EntityScope { get; set; }

        /// <summary>
        /// The scope of the identifier used to uniquely identify the entity.
        /// </summary>
        /// <value>The scope of the identifier used to uniquely identify the entity.</value>
        [DataMember(Name = "identifierScope", EmitDefaultValue = true)]
        public string IdentifierScope { get; set; }

        /// <summary>
        /// The type of identifier (e.g., Figi, Isin) used to uniquely identify the entity.
        /// </summary>
        /// <value>The type of identifier (e.g., Figi, Isin) used to uniquely identify the entity.</value>
        [DataMember(Name = "identifierType", EmitDefaultValue = true)]
        public string IdentifierType { get; set; }

        /// <summary>
        /// The value of the identifier used to uniquely identify the entity.
        /// </summary>
        /// <value>The value of the identifier used to uniquely identify the entity.</value>
        [DataMember(Name = "identifierValue", EmitDefaultValue = true)]
        public string IdentifierValue { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ApplicableEntity {\n");
            sb.Append("  EntityType: ").Append(EntityType).Append("\n");
            sb.Append("  EntityScope: ").Append(EntityScope).Append("\n");
            sb.Append("  IdentifierScope: ").Append(IdentifierScope).Append("\n");
            sb.Append("  IdentifierType: ").Append(IdentifierType).Append("\n");
            sb.Append("  IdentifierValue: ").Append(IdentifierValue).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ApplicableEntity);
        }

        /// <summary>
        /// Returns true if ApplicableEntity instances are equal
        /// </summary>
        /// <param name="input">Instance of ApplicableEntity to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ApplicableEntity input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.EntityType == input.EntityType ||
                    (this.EntityType != null &&
                    this.EntityType.Equals(input.EntityType))
                ) && 
                (
                    this.EntityScope == input.EntityScope ||
                    (this.EntityScope != null &&
                    this.EntityScope.Equals(input.EntityScope))
                ) && 
                (
                    this.IdentifierScope == input.IdentifierScope ||
                    (this.IdentifierScope != null &&
                    this.IdentifierScope.Equals(input.IdentifierScope))
                ) && 
                (
                    this.IdentifierType == input.IdentifierType ||
                    (this.IdentifierType != null &&
                    this.IdentifierType.Equals(input.IdentifierType))
                ) && 
                (
                    this.IdentifierValue == input.IdentifierValue ||
                    (this.IdentifierValue != null &&
                    this.IdentifierValue.Equals(input.IdentifierValue))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.EntityType != null)
                {
                    hashCode = (hashCode * 59) + this.EntityType.GetHashCode();
                }
                if (this.EntityScope != null)
                {
                    hashCode = (hashCode * 59) + this.EntityScope.GetHashCode();
                }
                if (this.IdentifierScope != null)
                {
                    hashCode = (hashCode * 59) + this.IdentifierScope.GetHashCode();
                }
                if (this.IdentifierType != null)
                {
                    hashCode = (hashCode * 59) + this.IdentifierType.GetHashCode();
                }
                if (this.IdentifierValue != null)
                {
                    hashCode = (hashCode * 59) + this.IdentifierValue.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // EntityType (string) maxLength
            if (this.EntityType != null && this.EntityType.Length > 512)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for EntityType, length must be less than 512.", new [] { "EntityType" });
            }

            // EntityType (string) minLength
            if (this.EntityType != null && this.EntityType.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for EntityType, length must be greater than 0.", new [] { "EntityType" });
            }

            // EntityType (string) pattern
            Regex regexEntityType = new Regex(@"^[a-zA-Z]*$", RegexOptions.CultureInvariant);
            if (false == regexEntityType.Match(this.EntityType).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for EntityType, must match a pattern of " + regexEntityType, new [] { "EntityType" });
            }

            // EntityScope (string) maxLength
            if (this.EntityScope != null && this.EntityScope.Length > 512)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for EntityScope, length must be less than 512.", new [] { "EntityScope" });
            }

            // EntityScope (string) minLength
            if (this.EntityScope != null && this.EntityScope.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for EntityScope, length must be greater than 0.", new [] { "EntityScope" });
            }

            // IdentifierScope (string) maxLength
            if (this.IdentifierScope != null && this.IdentifierScope.Length > 512)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for IdentifierScope, length must be less than 512.", new [] { "IdentifierScope" });
            }

            // IdentifierScope (string) minLength
            if (this.IdentifierScope != null && this.IdentifierScope.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for IdentifierScope, length must be greater than 0.", new [] { "IdentifierScope" });
            }

            // IdentifierType (string) maxLength
            if (this.IdentifierType != null && this.IdentifierType.Length > 512)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for IdentifierType, length must be less than 512.", new [] { "IdentifierType" });
            }

            // IdentifierType (string) minLength
            if (this.IdentifierType != null && this.IdentifierType.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for IdentifierType, length must be greater than 0.", new [] { "IdentifierType" });
            }

            // IdentifierValue (string) maxLength
            if (this.IdentifierValue != null && this.IdentifierValue.Length > 512)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for IdentifierValue, length must be less than 512.", new [] { "IdentifierValue" });
            }

            // IdentifierValue (string) minLength
            if (this.IdentifierValue != null && this.IdentifierValue.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for IdentifierValue, length must be greater than 0.", new [] { "IdentifierValue" });
            }

            yield break;
        }
    }
}
