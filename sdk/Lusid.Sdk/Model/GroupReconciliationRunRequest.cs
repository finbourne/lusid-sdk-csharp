/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Lusid.Sdk.Client.OpenAPIDateConverter;

namespace Lusid.Sdk.Model
{
    /// <summary>
    /// GroupReconciliationRunRequest
    /// </summary>
    [DataContract(Name = "GroupReconciliationRunRequest")]
    public partial class GroupReconciliationRunRequest : IEquatable<GroupReconciliationRunRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GroupReconciliationRunRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected GroupReconciliationRunRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="GroupReconciliationRunRequest" /> class.
        /// </summary>
        /// <param name="instanceId">Reconciliation run Id. Consists of run type (manual or workflow) and identifier. (required).</param>
        /// <param name="datesToReconcile">datesToReconcile.</param>
        public GroupReconciliationRunRequest(string instanceId = default(string), GroupReconciliationDates datesToReconcile = default(GroupReconciliationDates))
        {
            // to ensure "instanceId" is required (not null)
            if (instanceId == null)
            {
                throw new ArgumentNullException("instanceId is a required property for GroupReconciliationRunRequest and cannot be null");
            }
            this.InstanceId = instanceId;
            this.DatesToReconcile = datesToReconcile;
        }

        /// <summary>
        /// Reconciliation run Id. Consists of run type (manual or workflow) and identifier.
        /// </summary>
        /// <value>Reconciliation run Id. Consists of run type (manual or workflow) and identifier.</value>
        [DataMember(Name = "instanceId", IsRequired = true, EmitDefaultValue = true)]
        public string InstanceId { get; set; }

        /// <summary>
        /// Gets or Sets DatesToReconcile
        /// </summary>
        [DataMember(Name = "datesToReconcile", EmitDefaultValue = false)]
        public GroupReconciliationDates DatesToReconcile { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class GroupReconciliationRunRequest {\n");
            sb.Append("  InstanceId: ").Append(InstanceId).Append("\n");
            sb.Append("  DatesToReconcile: ").Append(DatesToReconcile).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GroupReconciliationRunRequest);
        }

        /// <summary>
        /// Returns true if GroupReconciliationRunRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of GroupReconciliationRunRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GroupReconciliationRunRequest input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.InstanceId == input.InstanceId ||
                    (this.InstanceId != null &&
                    this.InstanceId.Equals(input.InstanceId))
                ) && 
                (
                    this.DatesToReconcile == input.DatesToReconcile ||
                    (this.DatesToReconcile != null &&
                    this.DatesToReconcile.Equals(input.DatesToReconcile))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.InstanceId != null)
                {
                    hashCode = (hashCode * 59) + this.InstanceId.GetHashCode();
                }
                if (this.DatesToReconcile != null)
                {
                    hashCode = (hashCode * 59) + this.DatesToReconcile.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // InstanceId (string) maxLength
            if (this.InstanceId != null && this.InstanceId.Length > 64)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for InstanceId, length must be less than 64.", new [] { "InstanceId" });
            }

            // InstanceId (string) minLength
            if (this.InstanceId != null && this.InstanceId.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for InstanceId, length must be greater than 1.", new [] { "InstanceId" });
            }

            yield break;
        }
    }
}
