/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Lusid.Sdk.Client.OpenAPIDateConverter;

namespace Lusid.Sdk.Model
{
    /// <summary>
    /// UpsertRelationalDataPointRequest
    /// </summary>
    [DataContract(Name = "UpsertRelationalDataPointRequest")]
    public partial class UpsertRelationalDataPointRequest : IEquatable<UpsertRelationalDataPointRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UpsertRelationalDataPointRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected UpsertRelationalDataPointRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="UpsertRelationalDataPointRequest" /> class.
        /// </summary>
        /// <param name="dataPointDataSeries">dataPointDataSeries (required).</param>
        /// <param name="effectiveAt">The effectiveAt or cut-label datetime of the DataPoint. (required).</param>
        /// <param name="valueFields">The values associated with the DataPoint, structured according to the FieldSchema of the parent RelationalDatasetDefinition. (required).</param>
        /// <param name="metaDataFields">The metadata associated with the DataPoint, structured according to the FieldSchema of the parent RelationalDatasetDefinition..</param>
        public UpsertRelationalDataPointRequest(UpsertRelationalDataPointDataSeries dataPointDataSeries = default(UpsertRelationalDataPointDataSeries), string effectiveAt = default(string), Dictionary<string, Object> valueFields = default(Dictionary<string, Object>), Dictionary<string, Object> metaDataFields = default(Dictionary<string, Object>))
        {
            // to ensure "dataPointDataSeries" is required (not null)
            if (dataPointDataSeries == null)
            {
                throw new ArgumentNullException("dataPointDataSeries is a required property for UpsertRelationalDataPointRequest and cannot be null");
            }
            this.DataPointDataSeries = dataPointDataSeries;
            // to ensure "effectiveAt" is required (not null)
            if (effectiveAt == null)
            {
                throw new ArgumentNullException("effectiveAt is a required property for UpsertRelationalDataPointRequest and cannot be null");
            }
            this.EffectiveAt = effectiveAt;
            // to ensure "valueFields" is required (not null)
            if (valueFields == null)
            {
                throw new ArgumentNullException("valueFields is a required property for UpsertRelationalDataPointRequest and cannot be null");
            }
            this.ValueFields = valueFields;
            this.MetaDataFields = metaDataFields;
        }

        /// <summary>
        /// Gets or Sets DataPointDataSeries
        /// </summary>
        [DataMember(Name = "dataPointDataSeries", IsRequired = true, EmitDefaultValue = true)]
        public UpsertRelationalDataPointDataSeries DataPointDataSeries { get; set; }

        /// <summary>
        /// The effectiveAt or cut-label datetime of the DataPoint.
        /// </summary>
        /// <value>The effectiveAt or cut-label datetime of the DataPoint.</value>
        [DataMember(Name = "effectiveAt", IsRequired = true, EmitDefaultValue = true)]
        public string EffectiveAt { get; set; }

        /// <summary>
        /// The values associated with the DataPoint, structured according to the FieldSchema of the parent RelationalDatasetDefinition.
        /// </summary>
        /// <value>The values associated with the DataPoint, structured according to the FieldSchema of the parent RelationalDatasetDefinition.</value>
        [DataMember(Name = "valueFields", IsRequired = true, EmitDefaultValue = true)]
        public Dictionary<string, Object> ValueFields { get; set; }

        /// <summary>
        /// The metadata associated with the DataPoint, structured according to the FieldSchema of the parent RelationalDatasetDefinition.
        /// </summary>
        /// <value>The metadata associated with the DataPoint, structured according to the FieldSchema of the parent RelationalDatasetDefinition.</value>
        [DataMember(Name = "metaDataFields", EmitDefaultValue = true)]
        public Dictionary<string, Object> MetaDataFields { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class UpsertRelationalDataPointRequest {\n");
            sb.Append("  DataPointDataSeries: ").Append(DataPointDataSeries).Append("\n");
            sb.Append("  EffectiveAt: ").Append(EffectiveAt).Append("\n");
            sb.Append("  ValueFields: ").Append(ValueFields).Append("\n");
            sb.Append("  MetaDataFields: ").Append(MetaDataFields).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as UpsertRelationalDataPointRequest);
        }

        /// <summary>
        /// Returns true if UpsertRelationalDataPointRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of UpsertRelationalDataPointRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UpsertRelationalDataPointRequest input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.DataPointDataSeries == input.DataPointDataSeries ||
                    (this.DataPointDataSeries != null &&
                    this.DataPointDataSeries.Equals(input.DataPointDataSeries))
                ) && 
                (
                    this.EffectiveAt == input.EffectiveAt ||
                    (this.EffectiveAt != null &&
                    this.EffectiveAt.Equals(input.EffectiveAt))
                ) && 
                (
                    this.ValueFields == input.ValueFields ||
                    this.ValueFields != null &&
                    input.ValueFields != null &&
                    this.ValueFields.SequenceEqual(input.ValueFields)
                ) && 
                (
                    this.MetaDataFields == input.MetaDataFields ||
                    this.MetaDataFields != null &&
                    input.MetaDataFields != null &&
                    this.MetaDataFields.SequenceEqual(input.MetaDataFields)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.DataPointDataSeries != null)
                {
                    hashCode = (hashCode * 59) + this.DataPointDataSeries.GetHashCode();
                }
                if (this.EffectiveAt != null)
                {
                    hashCode = (hashCode * 59) + this.EffectiveAt.GetHashCode();
                }
                if (this.ValueFields != null)
                {
                    hashCode = (hashCode * 59) + this.ValueFields.GetHashCode();
                }
                if (this.MetaDataFields != null)
                {
                    hashCode = (hashCode * 59) + this.MetaDataFields.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // EffectiveAt (string) minLength
            if (this.EffectiveAt != null && this.EffectiveAt.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for EffectiveAt, length must be greater than 1.", new [] { "EffectiveAt" });
            }

            yield break;
        }
    }
}
