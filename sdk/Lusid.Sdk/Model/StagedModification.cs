/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Lusid.Sdk.Client.OpenAPIDateConverter;

namespace Lusid.Sdk.Model
{
    /// <summary>
    /// StagedModification
    /// </summary>
    [DataContract(Name = "StagedModification")]
    public partial class StagedModification : IEquatable<StagedModification>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="StagedModification" /> class.
        /// </summary>
        /// <param name="id">The unique Id for the staged modification.</param>
        /// <param name="asAtStaged">Time at which the modification was staged..</param>
        /// <param name="userIdStaged">Id of the user who created the stage modification request..</param>
        /// <param name="requestedIdStaged">The Request Id that initiated this staged modification..</param>
        /// <param name="action">Type of action of the staged modification, either create, update or delete..</param>
        /// <param name="stagingRule">stagingRule.</param>
        /// <param name="decisions">Object containing information relating to the decision on the staged modification..</param>
        /// <param name="decisionsCount">Number of decisions made..</param>
        /// <param name="status">The status of the staged modification..</param>
        /// <param name="entityType">The type of the entity that the staged modification applies to..</param>
        /// <param name="scope">The scope of the entity that this staged modification applies to..</param>
        /// <param name="entityUniqueId">The unique Id of the entity the staged modification applies to..</param>
        /// <param name="requestedChanges">requestedChanges.</param>
        /// <param name="entityHrefs">entityHrefs.</param>
        /// <param name="displayName">The display name of the entity the staged modification applies to..</param>
        /// <param name="links">links.</param>
        public StagedModification(string id = default(string), DateTimeOffset asAtStaged = default(DateTimeOffset), string userIdStaged = default(string), string requestedIdStaged = default(string), string action = default(string), StagedModificationStagingRule stagingRule = default(StagedModificationStagingRule), List<StagedModificationDecision> decisions = default(List<StagedModificationDecision>), int decisionsCount = default(int), string status = default(string), string entityType = default(string), string scope = default(string), string entityUniqueId = default(string), RequestedChanges requestedChanges = default(RequestedChanges), StagedModificationsEntityHrefs entityHrefs = default(StagedModificationsEntityHrefs), string displayName = default(string), List<Link> links = default(List<Link>))
        {
            this.Id = id;
            this.AsAtStaged = asAtStaged;
            this.UserIdStaged = userIdStaged;
            this.RequestedIdStaged = requestedIdStaged;
            this.Action = action;
            this.StagingRule = stagingRule;
            this.Decisions = decisions;
            this.DecisionsCount = decisionsCount;
            this.Status = status;
            this.EntityType = entityType;
            this.Scope = scope;
            this.EntityUniqueId = entityUniqueId;
            this.RequestedChanges = requestedChanges;
            this.EntityHrefs = entityHrefs;
            this.DisplayName = displayName;
            this.Links = links;
        }

        /// <summary>
        /// The unique Id for the staged modification
        /// </summary>
        /// <value>The unique Id for the staged modification</value>
        [DataMember(Name = "id", EmitDefaultValue = true)]
        public string Id { get; set; }

        /// <summary>
        /// Time at which the modification was staged.
        /// </summary>
        /// <value>Time at which the modification was staged.</value>
        [DataMember(Name = "asAtStaged", EmitDefaultValue = false)]
        public DateTimeOffset AsAtStaged { get; set; }

        /// <summary>
        /// Id of the user who created the stage modification request.
        /// </summary>
        /// <value>Id of the user who created the stage modification request.</value>
        [DataMember(Name = "userIdStaged", EmitDefaultValue = true)]
        public string UserIdStaged { get; set; }

        /// <summary>
        /// The Request Id that initiated this staged modification.
        /// </summary>
        /// <value>The Request Id that initiated this staged modification.</value>
        [DataMember(Name = "requestedIdStaged", EmitDefaultValue = true)]
        public string RequestedIdStaged { get; set; }

        /// <summary>
        /// Type of action of the staged modification, either create, update or delete.
        /// </summary>
        /// <value>Type of action of the staged modification, either create, update or delete.</value>
        [DataMember(Name = "action", EmitDefaultValue = true)]
        public string Action { get; set; }

        /// <summary>
        /// Gets or Sets StagingRule
        /// </summary>
        [DataMember(Name = "stagingRule", EmitDefaultValue = false)]
        public StagedModificationStagingRule StagingRule { get; set; }

        /// <summary>
        /// Object containing information relating to the decision on the staged modification.
        /// </summary>
        /// <value>Object containing information relating to the decision on the staged modification.</value>
        [DataMember(Name = "decisions", EmitDefaultValue = true)]
        public List<StagedModificationDecision> Decisions { get; set; }

        /// <summary>
        /// Number of decisions made.
        /// </summary>
        /// <value>Number of decisions made.</value>
        [DataMember(Name = "decisionsCount", EmitDefaultValue = true)]
        public int DecisionsCount { get; set; }

        /// <summary>
        /// The status of the staged modification.
        /// </summary>
        /// <value>The status of the staged modification.</value>
        [DataMember(Name = "status", EmitDefaultValue = true)]
        public string Status { get; set; }

        /// <summary>
        /// The type of the entity that the staged modification applies to.
        /// </summary>
        /// <value>The type of the entity that the staged modification applies to.</value>
        [DataMember(Name = "entityType", EmitDefaultValue = true)]
        public string EntityType { get; set; }

        /// <summary>
        /// The scope of the entity that this staged modification applies to.
        /// </summary>
        /// <value>The scope of the entity that this staged modification applies to.</value>
        [DataMember(Name = "scope", EmitDefaultValue = true)]
        public string Scope { get; set; }

        /// <summary>
        /// The unique Id of the entity the staged modification applies to.
        /// </summary>
        /// <value>The unique Id of the entity the staged modification applies to.</value>
        [DataMember(Name = "entityUniqueId", EmitDefaultValue = true)]
        public string EntityUniqueId { get; set; }

        /// <summary>
        /// Gets or Sets RequestedChanges
        /// </summary>
        [DataMember(Name = "requestedChanges", EmitDefaultValue = false)]
        public RequestedChanges RequestedChanges { get; set; }

        /// <summary>
        /// Gets or Sets EntityHrefs
        /// </summary>
        [DataMember(Name = "entityHrefs", EmitDefaultValue = false)]
        public StagedModificationsEntityHrefs EntityHrefs { get; set; }

        /// <summary>
        /// The display name of the entity the staged modification applies to.
        /// </summary>
        /// <value>The display name of the entity the staged modification applies to.</value>
        [DataMember(Name = "displayName", EmitDefaultValue = true)]
        public string DisplayName { get; set; }

        /// <summary>
        /// Gets or Sets Links
        /// </summary>
        [DataMember(Name = "links", EmitDefaultValue = true)]
        public List<Link> Links { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class StagedModification {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  AsAtStaged: ").Append(AsAtStaged).Append("\n");
            sb.Append("  UserIdStaged: ").Append(UserIdStaged).Append("\n");
            sb.Append("  RequestedIdStaged: ").Append(RequestedIdStaged).Append("\n");
            sb.Append("  Action: ").Append(Action).Append("\n");
            sb.Append("  StagingRule: ").Append(StagingRule).Append("\n");
            sb.Append("  Decisions: ").Append(Decisions).Append("\n");
            sb.Append("  DecisionsCount: ").Append(DecisionsCount).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  EntityType: ").Append(EntityType).Append("\n");
            sb.Append("  Scope: ").Append(Scope).Append("\n");
            sb.Append("  EntityUniqueId: ").Append(EntityUniqueId).Append("\n");
            sb.Append("  RequestedChanges: ").Append(RequestedChanges).Append("\n");
            sb.Append("  EntityHrefs: ").Append(EntityHrefs).Append("\n");
            sb.Append("  DisplayName: ").Append(DisplayName).Append("\n");
            sb.Append("  Links: ").Append(Links).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as StagedModification);
        }

        /// <summary>
        /// Returns true if StagedModification instances are equal
        /// </summary>
        /// <param name="input">Instance of StagedModification to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(StagedModification input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.AsAtStaged == input.AsAtStaged ||
                    (this.AsAtStaged != null &&
                    this.AsAtStaged.Equals(input.AsAtStaged))
                ) && 
                (
                    this.UserIdStaged == input.UserIdStaged ||
                    (this.UserIdStaged != null &&
                    this.UserIdStaged.Equals(input.UserIdStaged))
                ) && 
                (
                    this.RequestedIdStaged == input.RequestedIdStaged ||
                    (this.RequestedIdStaged != null &&
                    this.RequestedIdStaged.Equals(input.RequestedIdStaged))
                ) && 
                (
                    this.Action == input.Action ||
                    (this.Action != null &&
                    this.Action.Equals(input.Action))
                ) && 
                (
                    this.StagingRule == input.StagingRule ||
                    (this.StagingRule != null &&
                    this.StagingRule.Equals(input.StagingRule))
                ) && 
                (
                    this.Decisions == input.Decisions ||
                    this.Decisions != null &&
                    input.Decisions != null &&
                    this.Decisions.SequenceEqual(input.Decisions)
                ) && 
                (
                    this.DecisionsCount == input.DecisionsCount ||
                    this.DecisionsCount.Equals(input.DecisionsCount)
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.EntityType == input.EntityType ||
                    (this.EntityType != null &&
                    this.EntityType.Equals(input.EntityType))
                ) && 
                (
                    this.Scope == input.Scope ||
                    (this.Scope != null &&
                    this.Scope.Equals(input.Scope))
                ) && 
                (
                    this.EntityUniqueId == input.EntityUniqueId ||
                    (this.EntityUniqueId != null &&
                    this.EntityUniqueId.Equals(input.EntityUniqueId))
                ) && 
                (
                    this.RequestedChanges == input.RequestedChanges ||
                    (this.RequestedChanges != null &&
                    this.RequestedChanges.Equals(input.RequestedChanges))
                ) && 
                (
                    this.EntityHrefs == input.EntityHrefs ||
                    (this.EntityHrefs != null &&
                    this.EntityHrefs.Equals(input.EntityHrefs))
                ) && 
                (
                    this.DisplayName == input.DisplayName ||
                    (this.DisplayName != null &&
                    this.DisplayName.Equals(input.DisplayName))
                ) && 
                (
                    this.Links == input.Links ||
                    this.Links != null &&
                    input.Links != null &&
                    this.Links.SequenceEqual(input.Links)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                {
                    hashCode = (hashCode * 59) + this.Id.GetHashCode();
                }
                if (this.AsAtStaged != null)
                {
                    hashCode = (hashCode * 59) + this.AsAtStaged.GetHashCode();
                }
                if (this.UserIdStaged != null)
                {
                    hashCode = (hashCode * 59) + this.UserIdStaged.GetHashCode();
                }
                if (this.RequestedIdStaged != null)
                {
                    hashCode = (hashCode * 59) + this.RequestedIdStaged.GetHashCode();
                }
                if (this.Action != null)
                {
                    hashCode = (hashCode * 59) + this.Action.GetHashCode();
                }
                if (this.StagingRule != null)
                {
                    hashCode = (hashCode * 59) + this.StagingRule.GetHashCode();
                }
                if (this.Decisions != null)
                {
                    hashCode = (hashCode * 59) + this.Decisions.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.DecisionsCount.GetHashCode();
                if (this.Status != null)
                {
                    hashCode = (hashCode * 59) + this.Status.GetHashCode();
                }
                if (this.EntityType != null)
                {
                    hashCode = (hashCode * 59) + this.EntityType.GetHashCode();
                }
                if (this.Scope != null)
                {
                    hashCode = (hashCode * 59) + this.Scope.GetHashCode();
                }
                if (this.EntityUniqueId != null)
                {
                    hashCode = (hashCode * 59) + this.EntityUniqueId.GetHashCode();
                }
                if (this.RequestedChanges != null)
                {
                    hashCode = (hashCode * 59) + this.RequestedChanges.GetHashCode();
                }
                if (this.EntityHrefs != null)
                {
                    hashCode = (hashCode * 59) + this.EntityHrefs.GetHashCode();
                }
                if (this.DisplayName != null)
                {
                    hashCode = (hashCode * 59) + this.DisplayName.GetHashCode();
                }
                if (this.Links != null)
                {
                    hashCode = (hashCode * 59) + this.Links.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
