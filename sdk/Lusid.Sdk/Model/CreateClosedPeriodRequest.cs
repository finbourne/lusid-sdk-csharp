/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Lusid.Sdk.Client.OpenAPIDateConverter;

namespace Lusid.Sdk.Model
{
    /// <summary>
    /// CreateClosedPeriodRequest
    /// </summary>
    [DataContract(Name = "CreateClosedPeriodRequest")]
    public partial class CreateClosedPeriodRequest : IEquatable<CreateClosedPeriodRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateClosedPeriodRequest" /> class.
        /// </summary>
        /// <param name="closedPeriodId">The unique Id of the Closed Period. The ClosedPeriodId, together with the Timeline Scope and Code, uniquely identifies a Closed Period.</param>
        /// <param name="effectiveEnd">The effective end of the Closed Period.</param>
        /// <param name="properties">The Closed Periods properties. These will be from the &#39;ClosedPeriod&#39; domain..</param>
        /// <param name="asAtClosed">The asAt closed datetime for the Closed Period.</param>
        public CreateClosedPeriodRequest(string closedPeriodId = default(string), DateTimeOffset effectiveEnd = default(DateTimeOffset), Dictionary<string, Property> properties = default(Dictionary<string, Property>), DateTimeOffset? asAtClosed = default(DateTimeOffset?))
        {
            this.ClosedPeriodId = closedPeriodId;
            this.EffectiveEnd = effectiveEnd;
            this.Properties = properties;
            this.AsAtClosed = asAtClosed;
        }

        /// <summary>
        /// The unique Id of the Closed Period. The ClosedPeriodId, together with the Timeline Scope and Code, uniquely identifies a Closed Period
        /// </summary>
        /// <value>The unique Id of the Closed Period. The ClosedPeriodId, together with the Timeline Scope and Code, uniquely identifies a Closed Period</value>
        [DataMember(Name = "closedPeriodId", EmitDefaultValue = true)]
        public string ClosedPeriodId { get; set; }

        /// <summary>
        /// The effective end of the Closed Period
        /// </summary>
        /// <value>The effective end of the Closed Period</value>
        [DataMember(Name = "effectiveEnd", EmitDefaultValue = false)]
        public DateTimeOffset EffectiveEnd { get; set; }

        /// <summary>
        /// The Closed Periods properties. These will be from the &#39;ClosedPeriod&#39; domain.
        /// </summary>
        /// <value>The Closed Periods properties. These will be from the &#39;ClosedPeriod&#39; domain.</value>
        [DataMember(Name = "properties", EmitDefaultValue = true)]
        public Dictionary<string, Property> Properties { get; set; }

        /// <summary>
        /// The asAt closed datetime for the Closed Period
        /// </summary>
        /// <value>The asAt closed datetime for the Closed Period</value>
        [DataMember(Name = "asAtClosed", EmitDefaultValue = true)]
        public DateTimeOffset? AsAtClosed { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CreateClosedPeriodRequest {\n");
            sb.Append("  ClosedPeriodId: ").Append(ClosedPeriodId).Append("\n");
            sb.Append("  EffectiveEnd: ").Append(EffectiveEnd).Append("\n");
            sb.Append("  Properties: ").Append(Properties).Append("\n");
            sb.Append("  AsAtClosed: ").Append(AsAtClosed).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CreateClosedPeriodRequest);
        }

        /// <summary>
        /// Returns true if CreateClosedPeriodRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of CreateClosedPeriodRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CreateClosedPeriodRequest input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.ClosedPeriodId == input.ClosedPeriodId ||
                    (this.ClosedPeriodId != null &&
                    this.ClosedPeriodId.Equals(input.ClosedPeriodId))
                ) && 
                (
                    this.EffectiveEnd == input.EffectiveEnd ||
                    (this.EffectiveEnd != null &&
                    this.EffectiveEnd.Equals(input.EffectiveEnd))
                ) && 
                (
                    this.Properties == input.Properties ||
                    this.Properties != null &&
                    input.Properties != null &&
                    this.Properties.SequenceEqual(input.Properties)
                ) && 
                (
                    this.AsAtClosed == input.AsAtClosed ||
                    (this.AsAtClosed != null &&
                    this.AsAtClosed.Equals(input.AsAtClosed))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ClosedPeriodId != null)
                {
                    hashCode = (hashCode * 59) + this.ClosedPeriodId.GetHashCode();
                }
                if (this.EffectiveEnd != null)
                {
                    hashCode = (hashCode * 59) + this.EffectiveEnd.GetHashCode();
                }
                if (this.Properties != null)
                {
                    hashCode = (hashCode * 59) + this.Properties.GetHashCode();
                }
                if (this.AsAtClosed != null)
                {
                    hashCode = (hashCode * 59) + this.AsAtClosed.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // ClosedPeriodId (string) maxLength
            if (this.ClosedPeriodId != null && this.ClosedPeriodId.Length > 512)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ClosedPeriodId, length must be less than 512.", new [] { "ClosedPeriodId" });
            }

            // ClosedPeriodId (string) minLength
            if (this.ClosedPeriodId != null && this.ClosedPeriodId.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ClosedPeriodId, length must be greater than 1.", new [] { "ClosedPeriodId" });
            }

            yield break;
        }
    }
}
