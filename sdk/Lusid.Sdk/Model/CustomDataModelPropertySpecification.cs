/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Lusid.Sdk.Client.OpenAPIDateConverter;

namespace Lusid.Sdk.Model
{
    /// <summary>
    /// CustomDataModelPropertySpecification
    /// </summary>
    [DataContract(Name = "CustomDataModelPropertySpecification")]
    public partial class CustomDataModelPropertySpecification : IEquatable<CustomDataModelPropertySpecification>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CustomDataModelPropertySpecification" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CustomDataModelPropertySpecification() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CustomDataModelPropertySpecification" /> class.
        /// </summary>
        /// <param name="propertyKey">The property key that is required/allowed on the bound entity. (required).</param>
        /// <param name="required">Whether property is required or allowed..</param>
        public CustomDataModelPropertySpecification(string propertyKey = default(string), bool required = default(bool))
        {
            // to ensure "propertyKey" is required (not null)
            if (propertyKey == null)
            {
                throw new ArgumentNullException("propertyKey is a required property for CustomDataModelPropertySpecification and cannot be null");
            }
            this.PropertyKey = propertyKey;
            this.Required = required;
        }

        /// <summary>
        /// The property key that is required/allowed on the bound entity.
        /// </summary>
        /// <value>The property key that is required/allowed on the bound entity.</value>
        [DataMember(Name = "propertyKey", IsRequired = true, EmitDefaultValue = true)]
        public string PropertyKey { get; set; }

        /// <summary>
        /// Whether property is required or allowed.
        /// </summary>
        /// <value>Whether property is required or allowed.</value>
        [DataMember(Name = "required", EmitDefaultValue = true)]
        public bool Required { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CustomDataModelPropertySpecification {\n");
            sb.Append("  PropertyKey: ").Append(PropertyKey).Append("\n");
            sb.Append("  Required: ").Append(Required).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CustomDataModelPropertySpecification);
        }

        /// <summary>
        /// Returns true if CustomDataModelPropertySpecification instances are equal
        /// </summary>
        /// <param name="input">Instance of CustomDataModelPropertySpecification to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CustomDataModelPropertySpecification input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.PropertyKey == input.PropertyKey ||
                    (this.PropertyKey != null &&
                    this.PropertyKey.Equals(input.PropertyKey))
                ) && 
                (
                    this.Required == input.Required ||
                    this.Required.Equals(input.Required)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.PropertyKey != null)
                {
                    hashCode = (hashCode * 59) + this.PropertyKey.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Required.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
