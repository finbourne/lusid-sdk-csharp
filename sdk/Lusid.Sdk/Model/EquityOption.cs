/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using JsonSubTypes;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Lusid.Sdk.Client.OpenAPIDateConverter;

namespace Lusid.Sdk.Model
{
    /// <summary>
    /// LUSID representation of a plain vanilla OTC Equity Option.
    /// </summary>
    [DataContract(Name = "EquityOption")]
    [JsonConverter(typeof(JsonSubtypes), "InstrumentType")]
    public partial class EquityOption : LusidInstrument, IEquatable<EquityOption>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EquityOption" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected EquityOption() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="EquityOption" /> class.
        /// </summary>
        /// <param name="startDate">The start date of the instrument. This is normally synonymous with the trade-date. (required).</param>
        /// <param name="optionMaturityDate">The maturity date of the option. (required).</param>
        /// <param name="optionSettlementDate">The settlement date of the option..</param>
        /// <param name="deliveryType">Is the option cash settled or physical delivery of option    Supported string (enumeration) values are: [Cash, Physical]. (required).</param>
        /// <param name="optionType">Type of optionality for the option    Supported string (enumeration) values are: [Call, Put]. (required).</param>
        /// <param name="strike">The strike of the option. (required).</param>
        /// <param name="domCcy">The domestic currency of the instrument. (required).</param>
        /// <param name="underlyingIdentifier">The market identifier type of the underlying code, e.g RIC.    Supported string (enumeration) values are: [LusidInstrumentId, Isin, Sedol, Cusip, ClientInternal, Figi, RIC, QuotePermId, REDCode, BBGId, ICECode].  Optional field, should be used in combination with the Code field.  Not compatible with the Underlying field..</param>
        /// <param name="code">The identifying code for the equity underlying, e.g. &#39;IBM.N&#39;.  Optional field, should be used in combination with the UnderlyingIdentifier field.  Not compatible with the Underlying field..</param>
        /// <param name="equityOptionType">Equity option types. E.g. Vanilla (default), RightsIssue, Warrant.    Supported string (enumeration) values are: [Vanilla, RightsIssue, Warrant]..</param>
        /// <param name="numberOfShares">The amount of shares to exchange if the option is exercised..</param>
        /// <param name="premium">premium.</param>
        /// <param name="exerciseType">Type of optionality that is present; European, American.    Supported string (enumeration) values are: [European, American]..</param>
        /// <param name="underlying">underlying.</param>
        /// <param name="deliveryDays">Number of business days between exercise date and settlement of the option payoff or underlying..</param>
        /// <param name="businessDayConvention">Business day convention for option exercise date to settlement date calculation.  Supported string (enumeration) values are: [NoAdjustment, Previous, P, Following, F, ModifiedPrevious, MP, ModifiedFollowing, MF, HalfMonthModifiedFollowing, Nearest]..</param>
        /// <param name="settlementCalendars">Holiday calendars for option exercise date to settlement date calculation..</param>
        /// <param name="instrumentType">The available values are: QuotedSecurity, InterestRateSwap, FxForward, Future, ExoticInstrument, FxOption, CreditDefaultSwap, InterestRateSwaption, Bond, EquityOption, FixedLeg, FloatingLeg, BespokeCashFlowsLeg, Unknown, TermDeposit, ContractForDifference, EquitySwap, CashPerpetual, CapFloor, CashSettled, CdsIndex, Basket, FundingLeg, FxSwap, ForwardRateAgreement, SimpleInstrument, Repo, Equity, ExchangeTradedOption, ReferenceInstrument, ComplexBond, InflationLinkedBond, InflationSwap, SimpleCashFlowLoan, TotalReturnSwap, InflationLeg, FundShareClass, FlexibleLoan, UnsettledCash, Cash, MasteredInstrument, LoanFacility, FlexibleDeposit (required) (default to &quot;EquityOption&quot;).</param>
        public EquityOption(DateTimeOffset startDate = default(DateTimeOffset), DateTimeOffset optionMaturityDate = default(DateTimeOffset), DateTimeOffset? optionSettlementDate = default(DateTimeOffset?), string deliveryType = default(string), string optionType = default(string), decimal strike = default(decimal), string domCcy = default(string), string underlyingIdentifier = default(string), string code = default(string), string equityOptionType = default(string), decimal? numberOfShares = default(decimal?), Premium premium = default(Premium), string exerciseType = default(string), LusidInstrument underlying = default(LusidInstrument), int deliveryDays = default(int), string businessDayConvention = default(string), List<string> settlementCalendars = default(List<string>), InstrumentTypeEnum instrumentType = default(InstrumentTypeEnum)) : base(instrumentType)
        {
            this.StartDate = startDate;
            this.OptionMaturityDate = optionMaturityDate;
            // to ensure "deliveryType" is required (not null)
            if (deliveryType == null)
            {
                throw new ArgumentNullException("deliveryType is a required property for EquityOption and cannot be null");
            }
            this.DeliveryType = deliveryType;
            // to ensure "optionType" is required (not null)
            if (optionType == null)
            {
                throw new ArgumentNullException("optionType is a required property for EquityOption and cannot be null");
            }
            this.OptionType = optionType;
            this.Strike = strike;
            // to ensure "domCcy" is required (not null)
            if (domCcy == null)
            {
                throw new ArgumentNullException("domCcy is a required property for EquityOption and cannot be null");
            }
            this.DomCcy = domCcy;
            this.OptionSettlementDate = optionSettlementDate;
            this.UnderlyingIdentifier = underlyingIdentifier;
            this.Code = code;
            this.EquityOptionType = equityOptionType;
            this.NumberOfShares = numberOfShares;
            this.Premium = premium;
            this.ExerciseType = exerciseType;
            this.Underlying = underlying;
            this.DeliveryDays = deliveryDays;
            this.BusinessDayConvention = businessDayConvention;
            this.SettlementCalendars = settlementCalendars;
        }

        /// <summary>
        /// The start date of the instrument. This is normally synonymous with the trade-date.
        /// </summary>
        /// <value>The start date of the instrument. This is normally synonymous with the trade-date.</value>
        [DataMember(Name = "startDate", IsRequired = true, EmitDefaultValue = true)]
        public DateTimeOffset StartDate { get; set; }

        /// <summary>
        /// The maturity date of the option.
        /// </summary>
        /// <value>The maturity date of the option.</value>
        [DataMember(Name = "optionMaturityDate", IsRequired = true, EmitDefaultValue = true)]
        public DateTimeOffset OptionMaturityDate { get; set; }

        /// <summary>
        /// The settlement date of the option.
        /// </summary>
        /// <value>The settlement date of the option.</value>
        [DataMember(Name = "optionSettlementDate", EmitDefaultValue = true)]
        public DateTimeOffset? OptionSettlementDate { get; set; }

        /// <summary>
        /// Is the option cash settled or physical delivery of option    Supported string (enumeration) values are: [Cash, Physical].
        /// </summary>
        /// <value>Is the option cash settled or physical delivery of option    Supported string (enumeration) values are: [Cash, Physical].</value>
        [DataMember(Name = "deliveryType", IsRequired = true, EmitDefaultValue = true)]
        public string DeliveryType { get; set; }

        /// <summary>
        /// Type of optionality for the option    Supported string (enumeration) values are: [Call, Put].
        /// </summary>
        /// <value>Type of optionality for the option    Supported string (enumeration) values are: [Call, Put].</value>
        [DataMember(Name = "optionType", IsRequired = true, EmitDefaultValue = true)]
        public string OptionType { get; set; }

        /// <summary>
        /// The strike of the option.
        /// </summary>
        /// <value>The strike of the option.</value>
        [DataMember(Name = "strike", IsRequired = true, EmitDefaultValue = true)]
        public decimal Strike { get; set; }

        /// <summary>
        /// The domestic currency of the instrument.
        /// </summary>
        /// <value>The domestic currency of the instrument.</value>
        [DataMember(Name = "domCcy", IsRequired = true, EmitDefaultValue = true)]
        public string DomCcy { get; set; }

        /// <summary>
        /// The market identifier type of the underlying code, e.g RIC.    Supported string (enumeration) values are: [LusidInstrumentId, Isin, Sedol, Cusip, ClientInternal, Figi, RIC, QuotePermId, REDCode, BBGId, ICECode].  Optional field, should be used in combination with the Code field.  Not compatible with the Underlying field.
        /// </summary>
        /// <value>The market identifier type of the underlying code, e.g RIC.    Supported string (enumeration) values are: [LusidInstrumentId, Isin, Sedol, Cusip, ClientInternal, Figi, RIC, QuotePermId, REDCode, BBGId, ICECode].  Optional field, should be used in combination with the Code field.  Not compatible with the Underlying field.</value>
        [DataMember(Name = "underlyingIdentifier", EmitDefaultValue = true)]
        public string UnderlyingIdentifier { get; set; }

        /// <summary>
        /// The identifying code for the equity underlying, e.g. &#39;IBM.N&#39;.  Optional field, should be used in combination with the UnderlyingIdentifier field.  Not compatible with the Underlying field.
        /// </summary>
        /// <value>The identifying code for the equity underlying, e.g. &#39;IBM.N&#39;.  Optional field, should be used in combination with the UnderlyingIdentifier field.  Not compatible with the Underlying field.</value>
        [DataMember(Name = "code", EmitDefaultValue = true)]
        public string Code { get; set; }

        /// <summary>
        /// Equity option types. E.g. Vanilla (default), RightsIssue, Warrant.    Supported string (enumeration) values are: [Vanilla, RightsIssue, Warrant].
        /// </summary>
        /// <value>Equity option types. E.g. Vanilla (default), RightsIssue, Warrant.    Supported string (enumeration) values are: [Vanilla, RightsIssue, Warrant].</value>
        [DataMember(Name = "equityOptionType", EmitDefaultValue = true)]
        public string EquityOptionType { get; set; }

        /// <summary>
        /// The amount of shares to exchange if the option is exercised.
        /// </summary>
        /// <value>The amount of shares to exchange if the option is exercised.</value>
        [DataMember(Name = "numberOfShares", EmitDefaultValue = true)]
        public decimal? NumberOfShares { get; set; }

        /// <summary>
        /// Gets or Sets Premium
        /// </summary>
        [DataMember(Name = "premium", EmitDefaultValue = false)]
        public Premium Premium { get; set; }

        /// <summary>
        /// Type of optionality that is present; European, American.    Supported string (enumeration) values are: [European, American].
        /// </summary>
        /// <value>Type of optionality that is present; European, American.    Supported string (enumeration) values are: [European, American].</value>
        [DataMember(Name = "exerciseType", EmitDefaultValue = true)]
        public string ExerciseType { get; set; }

        /// <summary>
        /// Gets or Sets Underlying
        /// </summary>
        [DataMember(Name = "underlying", EmitDefaultValue = false)]
        public LusidInstrument Underlying { get; set; }

        /// <summary>
        /// Number of business days between exercise date and settlement of the option payoff or underlying.
        /// </summary>
        /// <value>Number of business days between exercise date and settlement of the option payoff or underlying.</value>
        [DataMember(Name = "deliveryDays", EmitDefaultValue = true)]
        public int DeliveryDays { get; set; }

        /// <summary>
        /// Business day convention for option exercise date to settlement date calculation.  Supported string (enumeration) values are: [NoAdjustment, Previous, P, Following, F, ModifiedPrevious, MP, ModifiedFollowing, MF, HalfMonthModifiedFollowing, Nearest].
        /// </summary>
        /// <value>Business day convention for option exercise date to settlement date calculation.  Supported string (enumeration) values are: [NoAdjustment, Previous, P, Following, F, ModifiedPrevious, MP, ModifiedFollowing, MF, HalfMonthModifiedFollowing, Nearest].</value>
        [DataMember(Name = "businessDayConvention", EmitDefaultValue = true)]
        public string BusinessDayConvention { get; set; }

        /// <summary>
        /// Holiday calendars for option exercise date to settlement date calculation.
        /// </summary>
        /// <value>Holiday calendars for option exercise date to settlement date calculation.</value>
        [DataMember(Name = "settlementCalendars", EmitDefaultValue = true)]
        public List<string> SettlementCalendars { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EquityOption {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  StartDate: ").Append(StartDate).Append("\n");
            sb.Append("  OptionMaturityDate: ").Append(OptionMaturityDate).Append("\n");
            sb.Append("  OptionSettlementDate: ").Append(OptionSettlementDate).Append("\n");
            sb.Append("  DeliveryType: ").Append(DeliveryType).Append("\n");
            sb.Append("  OptionType: ").Append(OptionType).Append("\n");
            sb.Append("  Strike: ").Append(Strike).Append("\n");
            sb.Append("  DomCcy: ").Append(DomCcy).Append("\n");
            sb.Append("  UnderlyingIdentifier: ").Append(UnderlyingIdentifier).Append("\n");
            sb.Append("  Code: ").Append(Code).Append("\n");
            sb.Append("  EquityOptionType: ").Append(EquityOptionType).Append("\n");
            sb.Append("  NumberOfShares: ").Append(NumberOfShares).Append("\n");
            sb.Append("  Premium: ").Append(Premium).Append("\n");
            sb.Append("  ExerciseType: ").Append(ExerciseType).Append("\n");
            sb.Append("  Underlying: ").Append(Underlying).Append("\n");
            sb.Append("  DeliveryDays: ").Append(DeliveryDays).Append("\n");
            sb.Append("  BusinessDayConvention: ").Append(BusinessDayConvention).Append("\n");
            sb.Append("  SettlementCalendars: ").Append(SettlementCalendars).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as EquityOption);
        }

        /// <summary>
        /// Returns true if EquityOption instances are equal
        /// </summary>
        /// <param name="input">Instance of EquityOption to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EquityOption input)
        {
            if (input == null)
            {
                return false;
            }
            return base.Equals(input) && 
                (
                    this.StartDate == input.StartDate ||
                    (this.StartDate != null &&
                    this.StartDate.Equals(input.StartDate))
                ) && base.Equals(input) && 
                (
                    this.OptionMaturityDate == input.OptionMaturityDate ||
                    (this.OptionMaturityDate != null &&
                    this.OptionMaturityDate.Equals(input.OptionMaturityDate))
                ) && base.Equals(input) && 
                (
                    this.OptionSettlementDate == input.OptionSettlementDate ||
                    (this.OptionSettlementDate != null &&
                    this.OptionSettlementDate.Equals(input.OptionSettlementDate))
                ) && base.Equals(input) && 
                (
                    this.DeliveryType == input.DeliveryType ||
                    (this.DeliveryType != null &&
                    this.DeliveryType.Equals(input.DeliveryType))
                ) && base.Equals(input) && 
                (
                    this.OptionType == input.OptionType ||
                    (this.OptionType != null &&
                    this.OptionType.Equals(input.OptionType))
                ) && base.Equals(input) && 
                (
                    this.Strike == input.Strike ||
                    this.Strike.Equals(input.Strike)
                ) && base.Equals(input) && 
                (
                    this.DomCcy == input.DomCcy ||
                    (this.DomCcy != null &&
                    this.DomCcy.Equals(input.DomCcy))
                ) && base.Equals(input) && 
                (
                    this.UnderlyingIdentifier == input.UnderlyingIdentifier ||
                    (this.UnderlyingIdentifier != null &&
                    this.UnderlyingIdentifier.Equals(input.UnderlyingIdentifier))
                ) && base.Equals(input) && 
                (
                    this.Code == input.Code ||
                    (this.Code != null &&
                    this.Code.Equals(input.Code))
                ) && base.Equals(input) && 
                (
                    this.EquityOptionType == input.EquityOptionType ||
                    (this.EquityOptionType != null &&
                    this.EquityOptionType.Equals(input.EquityOptionType))
                ) && base.Equals(input) && 
                (
                    this.NumberOfShares == input.NumberOfShares ||
                    (this.NumberOfShares != null &&
                    this.NumberOfShares.Equals(input.NumberOfShares))
                ) && base.Equals(input) && 
                (
                    this.Premium == input.Premium ||
                    (this.Premium != null &&
                    this.Premium.Equals(input.Premium))
                ) && base.Equals(input) && 
                (
                    this.ExerciseType == input.ExerciseType ||
                    (this.ExerciseType != null &&
                    this.ExerciseType.Equals(input.ExerciseType))
                ) && base.Equals(input) && 
                (
                    this.Underlying == input.Underlying ||
                    (this.Underlying != null &&
                    this.Underlying.Equals(input.Underlying))
                ) && base.Equals(input) && 
                (
                    this.DeliveryDays == input.DeliveryDays ||
                    this.DeliveryDays.Equals(input.DeliveryDays)
                ) && base.Equals(input) && 
                (
                    this.BusinessDayConvention == input.BusinessDayConvention ||
                    (this.BusinessDayConvention != null &&
                    this.BusinessDayConvention.Equals(input.BusinessDayConvention))
                ) && base.Equals(input) && 
                (
                    this.SettlementCalendars == input.SettlementCalendars ||
                    this.SettlementCalendars != null &&
                    input.SettlementCalendars != null &&
                    this.SettlementCalendars.SequenceEqual(input.SettlementCalendars)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = base.GetHashCode();
                if (this.StartDate != null)
                {
                    hashCode = (hashCode * 59) + this.StartDate.GetHashCode();
                }
                if (this.OptionMaturityDate != null)
                {
                    hashCode = (hashCode * 59) + this.OptionMaturityDate.GetHashCode();
                }
                if (this.OptionSettlementDate != null)
                {
                    hashCode = (hashCode * 59) + this.OptionSettlementDate.GetHashCode();
                }
                if (this.DeliveryType != null)
                {
                    hashCode = (hashCode * 59) + this.DeliveryType.GetHashCode();
                }
                if (this.OptionType != null)
                {
                    hashCode = (hashCode * 59) + this.OptionType.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Strike.GetHashCode();
                if (this.DomCcy != null)
                {
                    hashCode = (hashCode * 59) + this.DomCcy.GetHashCode();
                }
                if (this.UnderlyingIdentifier != null)
                {
                    hashCode = (hashCode * 59) + this.UnderlyingIdentifier.GetHashCode();
                }
                if (this.Code != null)
                {
                    hashCode = (hashCode * 59) + this.Code.GetHashCode();
                }
                if (this.EquityOptionType != null)
                {
                    hashCode = (hashCode * 59) + this.EquityOptionType.GetHashCode();
                }
                if (this.NumberOfShares != null)
                {
                    hashCode = (hashCode * 59) + this.NumberOfShares.GetHashCode();
                }
                if (this.Premium != null)
                {
                    hashCode = (hashCode * 59) + this.Premium.GetHashCode();
                }
                if (this.ExerciseType != null)
                {
                    hashCode = (hashCode * 59) + this.ExerciseType.GetHashCode();
                }
                if (this.Underlying != null)
                {
                    hashCode = (hashCode * 59) + this.Underlying.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.DeliveryDays.GetHashCode();
                if (this.BusinessDayConvention != null)
                {
                    hashCode = (hashCode * 59) + this.BusinessDayConvention.GetHashCode();
                }
                if (this.SettlementCalendars != null)
                {
                    hashCode = (hashCode * 59) + this.SettlementCalendars.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            return this.BaseValidate(validationContext);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        protected IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> BaseValidate(ValidationContext validationContext)
        {
            foreach (var x in base.BaseValidate(validationContext))
            {
                yield return x;
            }
            // DeliveryType (string) minLength
            if (this.DeliveryType != null && this.DeliveryType.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for DeliveryType, length must be greater than 1.", new [] { "DeliveryType" });
            }

            // OptionType (string) minLength
            if (this.OptionType != null && this.OptionType.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for OptionType, length must be greater than 1.", new [] { "OptionType" });
            }

            yield break;
        }
    }
}
