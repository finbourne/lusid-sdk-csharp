/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Lusid.Sdk.Client.OpenAPIDateConverter;

namespace Lusid.Sdk.Model
{
    /// <summary>
    /// A collection of instruments to translate, along with the target dialect to translate into.
    /// </summary>
    [DataContract(Name = "TranslateTradeTicketRequest")]
    public partial class TranslateTradeTicketRequest : IEquatable<TranslateTradeTicketRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TranslateTradeTicketRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected TranslateTradeTicketRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="TranslateTradeTicketRequest" /> class.
        /// </summary>
        /// <param name="tickets">The collection of trade tickets to translate.                Each trade ticket should be keyed by a unique correlation id. This id is ephemeral  and is not stored by LUSID. It serves only as a way to easily identify each instrument in the response. (required).</param>
        /// <param name="dialect">The target dialect that the given instruments should be translated to. (required).</param>
        public TranslateTradeTicketRequest(Dictionary<string, TradeTicket> tickets = default(Dictionary<string, TradeTicket>), string dialect = default(string))
        {
            // to ensure "tickets" is required (not null)
            if (tickets == null)
            {
                throw new ArgumentNullException("tickets is a required property for TranslateTradeTicketRequest and cannot be null");
            }
            this.Tickets = tickets;
            // to ensure "dialect" is required (not null)
            if (dialect == null)
            {
                throw new ArgumentNullException("dialect is a required property for TranslateTradeTicketRequest and cannot be null");
            }
            this.Dialect = dialect;
        }

        /// <summary>
        /// The collection of trade tickets to translate.                Each trade ticket should be keyed by a unique correlation id. This id is ephemeral  and is not stored by LUSID. It serves only as a way to easily identify each instrument in the response.
        /// </summary>
        /// <value>The collection of trade tickets to translate.                Each trade ticket should be keyed by a unique correlation id. This id is ephemeral  and is not stored by LUSID. It serves only as a way to easily identify each instrument in the response.</value>
        [DataMember(Name = "tickets", IsRequired = true, EmitDefaultValue = true)]
        public Dictionary<string, TradeTicket> Tickets { get; set; }

        /// <summary>
        /// The target dialect that the given instruments should be translated to.
        /// </summary>
        /// <value>The target dialect that the given instruments should be translated to.</value>
        [DataMember(Name = "dialect", IsRequired = true, EmitDefaultValue = true)]
        public string Dialect { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class TranslateTradeTicketRequest {\n");
            sb.Append("  Tickets: ").Append(Tickets).Append("\n");
            sb.Append("  Dialect: ").Append(Dialect).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TranslateTradeTicketRequest);
        }

        /// <summary>
        /// Returns true if TranslateTradeTicketRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of TranslateTradeTicketRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TranslateTradeTicketRequest input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Tickets == input.Tickets ||
                    this.Tickets != null &&
                    input.Tickets != null &&
                    this.Tickets.SequenceEqual(input.Tickets)
                ) && 
                (
                    this.Dialect == input.Dialect ||
                    (this.Dialect != null &&
                    this.Dialect.Equals(input.Dialect))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Tickets != null)
                {
                    hashCode = (hashCode * 59) + this.Tickets.GetHashCode();
                }
                if (this.Dialect != null)
                {
                    hashCode = (hashCode * 59) + this.Dialect.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Dialect (string) maxLength
            if (this.Dialect != null && this.Dialect.Length > 256)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Dialect, length must be less than 256.", new [] { "Dialect" });
            }

            // Dialect (string) minLength
            if (this.Dialect != null && this.Dialect.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Dialect, length must be greater than 1.", new [] { "Dialect" });
            }

            // Dialect (string) pattern
            Regex regexDialect = new Regex(@"^[a-zA-Z]*$", RegexOptions.CultureInvariant);
            if (false == regexDialect.Match(this.Dialect).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Dialect, must match a pattern of " + regexDialect, new [] { "Dialect" });
            }

            yield break;
        }
    }
}
