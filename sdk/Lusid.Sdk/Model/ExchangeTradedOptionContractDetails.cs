/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Lusid.Sdk.Client.OpenAPIDateConverter;

namespace Lusid.Sdk.Model
{
    /// <summary>
    /// Most, if not all, information about contracts is standardised. See, e.g. https://www.cmegroup.com/ for  common codes and similar data. This appears to be in common use by well known market information providers, e.g. Bloomberg and Refinitiv.  There is a lot of overlap with this and FuturesContractDetails but as that is an established DTO we must duplicate a number of fields here
    /// </summary>
    [DataContract(Name = "ExchangeTradedOptionContractDetails")]
    public partial class ExchangeTradedOptionContractDetails : IEquatable<ExchangeTradedOptionContractDetails>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ExchangeTradedOptionContractDetails" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ExchangeTradedOptionContractDetails() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ExchangeTradedOptionContractDetails" /> class.
        /// </summary>
        /// <param name="domCcy">Currency in which the contract is paid. (required).</param>
        /// <param name="strike">The option strike, this can be negative for some options. (required).</param>
        /// <param name="contractSize">Size of a single contract. By default this should be set to 1000 if otherwise unknown and is defaulted to such. (required).</param>
        /// <param name="country">Country (code) for the exchange. (required).</param>
        /// <param name="deliveryType">The delivery type, cash or physical. An option on a future is physically settled if upon exercising the  holder receives a future.    Supported string (enumeration) values are: [Cash, Physical]. (required).</param>
        /// <param name="description">Description of contract (required).</param>
        /// <param name="exchangeCode">Exchange code for contract. This can be any string to uniquely identify the exchange (e.g. Exchange Name, MIC, BBG code). (required).</param>
        /// <param name="exerciseDate">The last exercise date of the option. (required).</param>
        /// <param name="exerciseType">The exercise type, European, American or Bermudan.    Supported string (enumeration) values are: [European, Bermudan, American]. (required).</param>
        /// <param name="optionCode">Option Contract Code, typically one or two letters, e.g. OG &#x3D;&gt; Option on Gold. (required).</param>
        /// <param name="optionType">The option type, Call or Put.    Supported string (enumeration) values are: [Call, Put]. (required).</param>
        /// <param name="underlying">underlying (required).</param>
        /// <param name="underlyingCode">Code of the underlying, for an option on futures this should be the futures code. (required).</param>
        /// <param name="deliveryDays">Number of business days between exercise date and settlement of the option payoff or underlying.  Defaults to 0 if not set..</param>
        /// <param name="businessDayConvention">The adjustment type to apply to dates that fall upon a non-business day, e.g. modified following or following.  Supported string (enumeration) values are: [NoAdjustment, Previous, P, Following, F, ModifiedPrevious, MP, ModifiedFollowing, MF, HalfMonthModifiedFollowing, Nearest].  Defaults to \&quot;F\&quot; if not set..</param>
        /// <param name="settlementCalendars">An array of strings denoting calendars used in calculating the option settlement date..</param>
        public ExchangeTradedOptionContractDetails(string domCcy = default(string), decimal strike = default(decimal), decimal contractSize = default(decimal), string country = default(string), string deliveryType = default(string), string description = default(string), string exchangeCode = default(string), DateTimeOffset exerciseDate = default(DateTimeOffset), string exerciseType = default(string), string optionCode = default(string), string optionType = default(string), LusidInstrument underlying = default(LusidInstrument), string underlyingCode = default(string), int deliveryDays = default(int), string businessDayConvention = default(string), List<string> settlementCalendars = default(List<string>))
        {
            // to ensure "domCcy" is required (not null)
            if (domCcy == null)
            {
                throw new ArgumentNullException("domCcy is a required property for ExchangeTradedOptionContractDetails and cannot be null");
            }
            this.DomCcy = domCcy;
            this.Strike = strike;
            this.ContractSize = contractSize;
            // to ensure "country" is required (not null)
            if (country == null)
            {
                throw new ArgumentNullException("country is a required property for ExchangeTradedOptionContractDetails and cannot be null");
            }
            this.Country = country;
            // to ensure "deliveryType" is required (not null)
            if (deliveryType == null)
            {
                throw new ArgumentNullException("deliveryType is a required property for ExchangeTradedOptionContractDetails and cannot be null");
            }
            this.DeliveryType = deliveryType;
            // to ensure "description" is required (not null)
            if (description == null)
            {
                throw new ArgumentNullException("description is a required property for ExchangeTradedOptionContractDetails and cannot be null");
            }
            this.Description = description;
            // to ensure "exchangeCode" is required (not null)
            if (exchangeCode == null)
            {
                throw new ArgumentNullException("exchangeCode is a required property for ExchangeTradedOptionContractDetails and cannot be null");
            }
            this.ExchangeCode = exchangeCode;
            this.ExerciseDate = exerciseDate;
            // to ensure "exerciseType" is required (not null)
            if (exerciseType == null)
            {
                throw new ArgumentNullException("exerciseType is a required property for ExchangeTradedOptionContractDetails and cannot be null");
            }
            this.ExerciseType = exerciseType;
            // to ensure "optionCode" is required (not null)
            if (optionCode == null)
            {
                throw new ArgumentNullException("optionCode is a required property for ExchangeTradedOptionContractDetails and cannot be null");
            }
            this.OptionCode = optionCode;
            // to ensure "optionType" is required (not null)
            if (optionType == null)
            {
                throw new ArgumentNullException("optionType is a required property for ExchangeTradedOptionContractDetails and cannot be null");
            }
            this.OptionType = optionType;
            // to ensure "underlying" is required (not null)
            if (underlying == null)
            {
                throw new ArgumentNullException("underlying is a required property for ExchangeTradedOptionContractDetails and cannot be null");
            }
            this.Underlying = underlying;
            // to ensure "underlyingCode" is required (not null)
            if (underlyingCode == null)
            {
                throw new ArgumentNullException("underlyingCode is a required property for ExchangeTradedOptionContractDetails and cannot be null");
            }
            this.UnderlyingCode = underlyingCode;
            this.DeliveryDays = deliveryDays;
            this.BusinessDayConvention = businessDayConvention;
            this.SettlementCalendars = settlementCalendars;
        }

        /// <summary>
        /// Currency in which the contract is paid.
        /// </summary>
        /// <value>Currency in which the contract is paid.</value>
        [DataMember(Name = "domCcy", IsRequired = true, EmitDefaultValue = true)]
        public string DomCcy { get; set; }

        /// <summary>
        /// The option strike, this can be negative for some options.
        /// </summary>
        /// <value>The option strike, this can be negative for some options.</value>
        [DataMember(Name = "strike", IsRequired = true, EmitDefaultValue = true)]
        public decimal Strike { get; set; }

        /// <summary>
        /// Size of a single contract. By default this should be set to 1000 if otherwise unknown and is defaulted to such.
        /// </summary>
        /// <value>Size of a single contract. By default this should be set to 1000 if otherwise unknown and is defaulted to such.</value>
        [DataMember(Name = "contractSize", IsRequired = true, EmitDefaultValue = true)]
        public decimal ContractSize { get; set; }

        /// <summary>
        /// Country (code) for the exchange.
        /// </summary>
        /// <value>Country (code) for the exchange.</value>
        [DataMember(Name = "country", IsRequired = true, EmitDefaultValue = true)]
        public string Country { get; set; }

        /// <summary>
        /// The delivery type, cash or physical. An option on a future is physically settled if upon exercising the  holder receives a future.    Supported string (enumeration) values are: [Cash, Physical].
        /// </summary>
        /// <value>The delivery type, cash or physical. An option on a future is physically settled if upon exercising the  holder receives a future.    Supported string (enumeration) values are: [Cash, Physical].</value>
        [DataMember(Name = "deliveryType", IsRequired = true, EmitDefaultValue = true)]
        public string DeliveryType { get; set; }

        /// <summary>
        /// Description of contract
        /// </summary>
        /// <value>Description of contract</value>
        [DataMember(Name = "description", IsRequired = true, EmitDefaultValue = true)]
        public string Description { get; set; }

        /// <summary>
        /// Exchange code for contract. This can be any string to uniquely identify the exchange (e.g. Exchange Name, MIC, BBG code).
        /// </summary>
        /// <value>Exchange code for contract. This can be any string to uniquely identify the exchange (e.g. Exchange Name, MIC, BBG code).</value>
        [DataMember(Name = "exchangeCode", IsRequired = true, EmitDefaultValue = true)]
        public string ExchangeCode { get; set; }

        /// <summary>
        /// The last exercise date of the option.
        /// </summary>
        /// <value>The last exercise date of the option.</value>
        [DataMember(Name = "exerciseDate", IsRequired = true, EmitDefaultValue = true)]
        public DateTimeOffset ExerciseDate { get; set; }

        /// <summary>
        /// The exercise type, European, American or Bermudan.    Supported string (enumeration) values are: [European, Bermudan, American].
        /// </summary>
        /// <value>The exercise type, European, American or Bermudan.    Supported string (enumeration) values are: [European, Bermudan, American].</value>
        [DataMember(Name = "exerciseType", IsRequired = true, EmitDefaultValue = true)]
        public string ExerciseType { get; set; }

        /// <summary>
        /// Option Contract Code, typically one or two letters, e.g. OG &#x3D;&gt; Option on Gold.
        /// </summary>
        /// <value>Option Contract Code, typically one or two letters, e.g. OG &#x3D;&gt; Option on Gold.</value>
        [DataMember(Name = "optionCode", IsRequired = true, EmitDefaultValue = true)]
        public string OptionCode { get; set; }

        /// <summary>
        /// The option type, Call or Put.    Supported string (enumeration) values are: [Call, Put].
        /// </summary>
        /// <value>The option type, Call or Put.    Supported string (enumeration) values are: [Call, Put].</value>
        [DataMember(Name = "optionType", IsRequired = true, EmitDefaultValue = true)]
        public string OptionType { get; set; }

        /// <summary>
        /// Gets or Sets Underlying
        /// </summary>
        [DataMember(Name = "underlying", IsRequired = true, EmitDefaultValue = true)]
        public LusidInstrument Underlying { get; set; }

        /// <summary>
        /// Code of the underlying, for an option on futures this should be the futures code.
        /// </summary>
        /// <value>Code of the underlying, for an option on futures this should be the futures code.</value>
        [DataMember(Name = "underlyingCode", IsRequired = true, EmitDefaultValue = true)]
        public string UnderlyingCode { get; set; }

        /// <summary>
        /// Number of business days between exercise date and settlement of the option payoff or underlying.  Defaults to 0 if not set.
        /// </summary>
        /// <value>Number of business days between exercise date and settlement of the option payoff or underlying.  Defaults to 0 if not set.</value>
        [DataMember(Name = "deliveryDays", EmitDefaultValue = true)]
        public int DeliveryDays { get; set; }

        /// <summary>
        /// The adjustment type to apply to dates that fall upon a non-business day, e.g. modified following or following.  Supported string (enumeration) values are: [NoAdjustment, Previous, P, Following, F, ModifiedPrevious, MP, ModifiedFollowing, MF, HalfMonthModifiedFollowing, Nearest].  Defaults to \&quot;F\&quot; if not set.
        /// </summary>
        /// <value>The adjustment type to apply to dates that fall upon a non-business day, e.g. modified following or following.  Supported string (enumeration) values are: [NoAdjustment, Previous, P, Following, F, ModifiedPrevious, MP, ModifiedFollowing, MF, HalfMonthModifiedFollowing, Nearest].  Defaults to \&quot;F\&quot; if not set.</value>
        [DataMember(Name = "businessDayConvention", EmitDefaultValue = true)]
        public string BusinessDayConvention { get; set; }

        /// <summary>
        /// An array of strings denoting calendars used in calculating the option settlement date.
        /// </summary>
        /// <value>An array of strings denoting calendars used in calculating the option settlement date.</value>
        [DataMember(Name = "settlementCalendars", EmitDefaultValue = true)]
        public List<string> SettlementCalendars { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ExchangeTradedOptionContractDetails {\n");
            sb.Append("  DomCcy: ").Append(DomCcy).Append("\n");
            sb.Append("  Strike: ").Append(Strike).Append("\n");
            sb.Append("  ContractSize: ").Append(ContractSize).Append("\n");
            sb.Append("  Country: ").Append(Country).Append("\n");
            sb.Append("  DeliveryType: ").Append(DeliveryType).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  ExchangeCode: ").Append(ExchangeCode).Append("\n");
            sb.Append("  ExerciseDate: ").Append(ExerciseDate).Append("\n");
            sb.Append("  ExerciseType: ").Append(ExerciseType).Append("\n");
            sb.Append("  OptionCode: ").Append(OptionCode).Append("\n");
            sb.Append("  OptionType: ").Append(OptionType).Append("\n");
            sb.Append("  Underlying: ").Append(Underlying).Append("\n");
            sb.Append("  UnderlyingCode: ").Append(UnderlyingCode).Append("\n");
            sb.Append("  DeliveryDays: ").Append(DeliveryDays).Append("\n");
            sb.Append("  BusinessDayConvention: ").Append(BusinessDayConvention).Append("\n");
            sb.Append("  SettlementCalendars: ").Append(SettlementCalendars).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ExchangeTradedOptionContractDetails);
        }

        /// <summary>
        /// Returns true if ExchangeTradedOptionContractDetails instances are equal
        /// </summary>
        /// <param name="input">Instance of ExchangeTradedOptionContractDetails to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ExchangeTradedOptionContractDetails input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.DomCcy == input.DomCcy ||
                    (this.DomCcy != null &&
                    this.DomCcy.Equals(input.DomCcy))
                ) && 
                (
                    this.Strike == input.Strike ||
                    this.Strike.Equals(input.Strike)
                ) && 
                (
                    this.ContractSize == input.ContractSize ||
                    this.ContractSize.Equals(input.ContractSize)
                ) && 
                (
                    this.Country == input.Country ||
                    (this.Country != null &&
                    this.Country.Equals(input.Country))
                ) && 
                (
                    this.DeliveryType == input.DeliveryType ||
                    (this.DeliveryType != null &&
                    this.DeliveryType.Equals(input.DeliveryType))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.ExchangeCode == input.ExchangeCode ||
                    (this.ExchangeCode != null &&
                    this.ExchangeCode.Equals(input.ExchangeCode))
                ) && 
                (
                    this.ExerciseDate == input.ExerciseDate ||
                    (this.ExerciseDate != null &&
                    this.ExerciseDate.Equals(input.ExerciseDate))
                ) && 
                (
                    this.ExerciseType == input.ExerciseType ||
                    (this.ExerciseType != null &&
                    this.ExerciseType.Equals(input.ExerciseType))
                ) && 
                (
                    this.OptionCode == input.OptionCode ||
                    (this.OptionCode != null &&
                    this.OptionCode.Equals(input.OptionCode))
                ) && 
                (
                    this.OptionType == input.OptionType ||
                    (this.OptionType != null &&
                    this.OptionType.Equals(input.OptionType))
                ) && 
                (
                    this.Underlying == input.Underlying ||
                    (this.Underlying != null &&
                    this.Underlying.Equals(input.Underlying))
                ) && 
                (
                    this.UnderlyingCode == input.UnderlyingCode ||
                    (this.UnderlyingCode != null &&
                    this.UnderlyingCode.Equals(input.UnderlyingCode))
                ) && 
                (
                    this.DeliveryDays == input.DeliveryDays ||
                    this.DeliveryDays.Equals(input.DeliveryDays)
                ) && 
                (
                    this.BusinessDayConvention == input.BusinessDayConvention ||
                    (this.BusinessDayConvention != null &&
                    this.BusinessDayConvention.Equals(input.BusinessDayConvention))
                ) && 
                (
                    this.SettlementCalendars == input.SettlementCalendars ||
                    this.SettlementCalendars != null &&
                    input.SettlementCalendars != null &&
                    this.SettlementCalendars.SequenceEqual(input.SettlementCalendars)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.DomCcy != null)
                {
                    hashCode = (hashCode * 59) + this.DomCcy.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Strike.GetHashCode();
                hashCode = (hashCode * 59) + this.ContractSize.GetHashCode();
                if (this.Country != null)
                {
                    hashCode = (hashCode * 59) + this.Country.GetHashCode();
                }
                if (this.DeliveryType != null)
                {
                    hashCode = (hashCode * 59) + this.DeliveryType.GetHashCode();
                }
                if (this.Description != null)
                {
                    hashCode = (hashCode * 59) + this.Description.GetHashCode();
                }
                if (this.ExchangeCode != null)
                {
                    hashCode = (hashCode * 59) + this.ExchangeCode.GetHashCode();
                }
                if (this.ExerciseDate != null)
                {
                    hashCode = (hashCode * 59) + this.ExerciseDate.GetHashCode();
                }
                if (this.ExerciseType != null)
                {
                    hashCode = (hashCode * 59) + this.ExerciseType.GetHashCode();
                }
                if (this.OptionCode != null)
                {
                    hashCode = (hashCode * 59) + this.OptionCode.GetHashCode();
                }
                if (this.OptionType != null)
                {
                    hashCode = (hashCode * 59) + this.OptionType.GetHashCode();
                }
                if (this.Underlying != null)
                {
                    hashCode = (hashCode * 59) + this.Underlying.GetHashCode();
                }
                if (this.UnderlyingCode != null)
                {
                    hashCode = (hashCode * 59) + this.UnderlyingCode.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.DeliveryDays.GetHashCode();
                if (this.BusinessDayConvention != null)
                {
                    hashCode = (hashCode * 59) + this.BusinessDayConvention.GetHashCode();
                }
                if (this.SettlementCalendars != null)
                {
                    hashCode = (hashCode * 59) + this.SettlementCalendars.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Country (string) minLength
            if (this.Country != null && this.Country.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Country, length must be greater than 1.", new [] { "Country" });
            }

            // DeliveryType (string) minLength
            if (this.DeliveryType != null && this.DeliveryType.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for DeliveryType, length must be greater than 1.", new [] { "DeliveryType" });
            }

            // Description (string) minLength
            if (this.Description != null && this.Description.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Description, length must be greater than 1.", new [] { "Description" });
            }

            // ExchangeCode (string) minLength
            if (this.ExchangeCode != null && this.ExchangeCode.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ExchangeCode, length must be greater than 1.", new [] { "ExchangeCode" });
            }

            // ExerciseType (string) minLength
            if (this.ExerciseType != null && this.ExerciseType.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ExerciseType, length must be greater than 1.", new [] { "ExerciseType" });
            }

            // OptionCode (string) minLength
            if (this.OptionCode != null && this.OptionCode.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for OptionCode, length must be greater than 1.", new [] { "OptionCode" });
            }

            // OptionType (string) minLength
            if (this.OptionType != null && this.OptionType.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for OptionType, length must be greater than 1.", new [] { "OptionType" });
            }

            // UnderlyingCode (string) minLength
            if (this.UnderlyingCode != null && this.UnderlyingCode.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for UnderlyingCode, length must be greater than 1.", new [] { "UnderlyingCode" });
            }

            yield break;
        }
    }
}
