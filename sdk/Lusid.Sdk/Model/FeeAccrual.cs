/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Lusid.Sdk.Client.OpenAPIDateConverter;

namespace Lusid.Sdk.Model
{
    /// <summary>
    /// FeeAccrual
    /// </summary>
    [DataContract(Name = "FeeAccrual")]
    public partial class FeeAccrual : IEquatable<FeeAccrual>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FeeAccrual" /> class.
        /// </summary>
        /// <param name="effectiveAt">effectiveAt.</param>
        /// <param name="name">name.</param>
        /// <param name="calculationBase">calculationBase.</param>
        /// <param name="amount">amount.</param>
        /// <param name="previousAccrual">previousAccrual.</param>
        public FeeAccrual(DateTimeOffset effectiveAt = default(DateTimeOffset), string name = default(string), decimal calculationBase = default(decimal), decimal amount = default(decimal), decimal previousAccrual = default(decimal))
        {
            this.EffectiveAt = effectiveAt;
            this.Name = name;
            this.CalculationBase = calculationBase;
            this.Amount = amount;
            this.PreviousAccrual = previousAccrual;
        }

        /// <summary>
        /// Gets or Sets EffectiveAt
        /// </summary>
        [DataMember(Name = "effectiveAt", EmitDefaultValue = false)]
        public DateTimeOffset EffectiveAt { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets CalculationBase
        /// </summary>
        [DataMember(Name = "calculationBase", EmitDefaultValue = true)]
        public decimal CalculationBase { get; set; }

        /// <summary>
        /// Gets or Sets Amount
        /// </summary>
        [DataMember(Name = "amount", EmitDefaultValue = true)]
        public decimal Amount { get; set; }

        /// <summary>
        /// Gets or Sets PreviousAccrual
        /// </summary>
        [DataMember(Name = "previousAccrual", EmitDefaultValue = true)]
        public decimal PreviousAccrual { get; set; }

        /// <summary>
        /// Gets or Sets TotalAccrual
        /// </summary>
        [DataMember(Name = "totalAccrual", EmitDefaultValue = true)]
        public decimal TotalAccrual { get; private set; }

        /// <summary>
        /// Returns false as TotalAccrual should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeTotalAccrual()
        {
            return false;
        }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class FeeAccrual {\n");
            sb.Append("  EffectiveAt: ").Append(EffectiveAt).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  CalculationBase: ").Append(CalculationBase).Append("\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("  PreviousAccrual: ").Append(PreviousAccrual).Append("\n");
            sb.Append("  TotalAccrual: ").Append(TotalAccrual).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as FeeAccrual);
        }

        /// <summary>
        /// Returns true if FeeAccrual instances are equal
        /// </summary>
        /// <param name="input">Instance of FeeAccrual to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FeeAccrual input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.EffectiveAt == input.EffectiveAt ||
                    (this.EffectiveAt != null &&
                    this.EffectiveAt.Equals(input.EffectiveAt))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.CalculationBase == input.CalculationBase ||
                    this.CalculationBase.Equals(input.CalculationBase)
                ) && 
                (
                    this.Amount == input.Amount ||
                    this.Amount.Equals(input.Amount)
                ) && 
                (
                    this.PreviousAccrual == input.PreviousAccrual ||
                    this.PreviousAccrual.Equals(input.PreviousAccrual)
                ) && 
                (
                    this.TotalAccrual == input.TotalAccrual ||
                    this.TotalAccrual.Equals(input.TotalAccrual)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.EffectiveAt != null)
                {
                    hashCode = (hashCode * 59) + this.EffectiveAt.GetHashCode();
                }
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.CalculationBase.GetHashCode();
                hashCode = (hashCode * 59) + this.Amount.GetHashCode();
                hashCode = (hashCode * 59) + this.PreviousAccrual.GetHashCode();
                hashCode = (hashCode * 59) + this.TotalAccrual.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
