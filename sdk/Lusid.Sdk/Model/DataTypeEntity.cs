/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Lusid.Sdk.Client.OpenAPIDateConverter;

namespace Lusid.Sdk.Model
{
    /// <summary>
    /// DataTypeEntity
    /// </summary>
    [DataContract(Name = "DataTypeEntity")]
    public partial class DataTypeEntity : IEquatable<DataTypeEntity>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DataTypeEntity" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected DataTypeEntity() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="DataTypeEntity" /> class.
        /// </summary>
        /// <param name="href">The specific Uniform Resource Identifier (URI) for this resource at the requested effective and asAt datetime. (required).</param>
        /// <param name="entityUniqueId">The unique id of the entity. (required).</param>
        /// <param name="asAtVersionNumber">The integer version number for the entity (the entity was created at version 1).</param>
        /// <param name="status">The status of the entity at the current time. (required).</param>
        /// <param name="asAtDeleted">The asAt datetime at which the entity was deleted..</param>
        /// <param name="userIdDeleted">The unique id of the user who deleted the entity..</param>
        /// <param name="requestIdDeleted">The unique request id of the command that deleted the entity..</param>
        /// <param name="effectiveAtCreated">The EffectiveAt this Entity is created, if entity does not currently exist in EffectiveAt..</param>
        /// <param name="prevailingDataType">prevailingDataType.</param>
        /// <param name="deletedDataType">deletedDataType.</param>
        /// <param name="previewedStatus">The status of the previewed entity..</param>
        /// <param name="previewedDataType">previewedDataType.</param>
        public DataTypeEntity(string href = default(string), string entityUniqueId = default(string), int? asAtVersionNumber = default(int?), string status = default(string), DateTimeOffset? asAtDeleted = default(DateTimeOffset?), string userIdDeleted = default(string), string requestIdDeleted = default(string), DateTimeOffset? effectiveAtCreated = default(DateTimeOffset?), DataType prevailingDataType = default(DataType), DataType deletedDataType = default(DataType), string previewedStatus = default(string), DataType previewedDataType = default(DataType))
        {
            // to ensure "href" is required (not null)
            if (href == null)
            {
                throw new ArgumentNullException("href is a required property for DataTypeEntity and cannot be null");
            }
            this.Href = href;
            // to ensure "entityUniqueId" is required (not null)
            if (entityUniqueId == null)
            {
                throw new ArgumentNullException("entityUniqueId is a required property for DataTypeEntity and cannot be null");
            }
            this.EntityUniqueId = entityUniqueId;
            // to ensure "status" is required (not null)
            if (status == null)
            {
                throw new ArgumentNullException("status is a required property for DataTypeEntity and cannot be null");
            }
            this.Status = status;
            this.AsAtVersionNumber = asAtVersionNumber;
            this.AsAtDeleted = asAtDeleted;
            this.UserIdDeleted = userIdDeleted;
            this.RequestIdDeleted = requestIdDeleted;
            this.EffectiveAtCreated = effectiveAtCreated;
            this.PrevailingDataType = prevailingDataType;
            this.DeletedDataType = deletedDataType;
            this.PreviewedStatus = previewedStatus;
            this.PreviewedDataType = previewedDataType;
        }

        /// <summary>
        /// The specific Uniform Resource Identifier (URI) for this resource at the requested effective and asAt datetime.
        /// </summary>
        /// <value>The specific Uniform Resource Identifier (URI) for this resource at the requested effective and asAt datetime.</value>
        [DataMember(Name = "href", IsRequired = true, EmitDefaultValue = true)]
        public string Href { get; set; }

        /// <summary>
        /// The unique id of the entity.
        /// </summary>
        /// <value>The unique id of the entity.</value>
        [DataMember(Name = "entityUniqueId", IsRequired = true, EmitDefaultValue = true)]
        public string EntityUniqueId { get; set; }

        /// <summary>
        /// The integer version number for the entity (the entity was created at version 1)
        /// </summary>
        /// <value>The integer version number for the entity (the entity was created at version 1)</value>
        [DataMember(Name = "asAtVersionNumber", EmitDefaultValue = true)]
        public int? AsAtVersionNumber { get; set; }

        /// <summary>
        /// The status of the entity at the current time.
        /// </summary>
        /// <value>The status of the entity at the current time.</value>
        [DataMember(Name = "status", IsRequired = true, EmitDefaultValue = true)]
        public string Status { get; set; }

        /// <summary>
        /// The asAt datetime at which the entity was deleted.
        /// </summary>
        /// <value>The asAt datetime at which the entity was deleted.</value>
        [DataMember(Name = "asAtDeleted", EmitDefaultValue = true)]
        public DateTimeOffset? AsAtDeleted { get; set; }

        /// <summary>
        /// The unique id of the user who deleted the entity.
        /// </summary>
        /// <value>The unique id of the user who deleted the entity.</value>
        [DataMember(Name = "userIdDeleted", EmitDefaultValue = true)]
        public string UserIdDeleted { get; set; }

        /// <summary>
        /// The unique request id of the command that deleted the entity.
        /// </summary>
        /// <value>The unique request id of the command that deleted the entity.</value>
        [DataMember(Name = "requestIdDeleted", EmitDefaultValue = true)]
        public string RequestIdDeleted { get; set; }

        /// <summary>
        /// The EffectiveAt this Entity is created, if entity does not currently exist in EffectiveAt.
        /// </summary>
        /// <value>The EffectiveAt this Entity is created, if entity does not currently exist in EffectiveAt.</value>
        [DataMember(Name = "effectiveAtCreated", EmitDefaultValue = true)]
        public DateTimeOffset? EffectiveAtCreated { get; set; }

        /// <summary>
        /// Gets or Sets PrevailingDataType
        /// </summary>
        [DataMember(Name = "prevailingDataType", EmitDefaultValue = false)]
        public DataType PrevailingDataType { get; set; }

        /// <summary>
        /// Gets or Sets DeletedDataType
        /// </summary>
        [DataMember(Name = "deletedDataType", EmitDefaultValue = false)]
        public DataType DeletedDataType { get; set; }

        /// <summary>
        /// The status of the previewed entity.
        /// </summary>
        /// <value>The status of the previewed entity.</value>
        [DataMember(Name = "previewedStatus", EmitDefaultValue = true)]
        public string PreviewedStatus { get; set; }

        /// <summary>
        /// Gets or Sets PreviewedDataType
        /// </summary>
        [DataMember(Name = "previewedDataType", EmitDefaultValue = false)]
        public DataType PreviewedDataType { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DataTypeEntity {\n");
            sb.Append("  Href: ").Append(Href).Append("\n");
            sb.Append("  EntityUniqueId: ").Append(EntityUniqueId).Append("\n");
            sb.Append("  AsAtVersionNumber: ").Append(AsAtVersionNumber).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  AsAtDeleted: ").Append(AsAtDeleted).Append("\n");
            sb.Append("  UserIdDeleted: ").Append(UserIdDeleted).Append("\n");
            sb.Append("  RequestIdDeleted: ").Append(RequestIdDeleted).Append("\n");
            sb.Append("  EffectiveAtCreated: ").Append(EffectiveAtCreated).Append("\n");
            sb.Append("  PrevailingDataType: ").Append(PrevailingDataType).Append("\n");
            sb.Append("  DeletedDataType: ").Append(DeletedDataType).Append("\n");
            sb.Append("  PreviewedStatus: ").Append(PreviewedStatus).Append("\n");
            sb.Append("  PreviewedDataType: ").Append(PreviewedDataType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DataTypeEntity);
        }

        /// <summary>
        /// Returns true if DataTypeEntity instances are equal
        /// </summary>
        /// <param name="input">Instance of DataTypeEntity to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DataTypeEntity input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Href == input.Href ||
                    (this.Href != null &&
                    this.Href.Equals(input.Href))
                ) && 
                (
                    this.EntityUniqueId == input.EntityUniqueId ||
                    (this.EntityUniqueId != null &&
                    this.EntityUniqueId.Equals(input.EntityUniqueId))
                ) && 
                (
                    this.AsAtVersionNumber == input.AsAtVersionNumber ||
                    (this.AsAtVersionNumber != null &&
                    this.AsAtVersionNumber.Equals(input.AsAtVersionNumber))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.AsAtDeleted == input.AsAtDeleted ||
                    (this.AsAtDeleted != null &&
                    this.AsAtDeleted.Equals(input.AsAtDeleted))
                ) && 
                (
                    this.UserIdDeleted == input.UserIdDeleted ||
                    (this.UserIdDeleted != null &&
                    this.UserIdDeleted.Equals(input.UserIdDeleted))
                ) && 
                (
                    this.RequestIdDeleted == input.RequestIdDeleted ||
                    (this.RequestIdDeleted != null &&
                    this.RequestIdDeleted.Equals(input.RequestIdDeleted))
                ) && 
                (
                    this.EffectiveAtCreated == input.EffectiveAtCreated ||
                    (this.EffectiveAtCreated != null &&
                    this.EffectiveAtCreated.Equals(input.EffectiveAtCreated))
                ) && 
                (
                    this.PrevailingDataType == input.PrevailingDataType ||
                    (this.PrevailingDataType != null &&
                    this.PrevailingDataType.Equals(input.PrevailingDataType))
                ) && 
                (
                    this.DeletedDataType == input.DeletedDataType ||
                    (this.DeletedDataType != null &&
                    this.DeletedDataType.Equals(input.DeletedDataType))
                ) && 
                (
                    this.PreviewedStatus == input.PreviewedStatus ||
                    (this.PreviewedStatus != null &&
                    this.PreviewedStatus.Equals(input.PreviewedStatus))
                ) && 
                (
                    this.PreviewedDataType == input.PreviewedDataType ||
                    (this.PreviewedDataType != null &&
                    this.PreviewedDataType.Equals(input.PreviewedDataType))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Href != null)
                {
                    hashCode = (hashCode * 59) + this.Href.GetHashCode();
                }
                if (this.EntityUniqueId != null)
                {
                    hashCode = (hashCode * 59) + this.EntityUniqueId.GetHashCode();
                }
                if (this.AsAtVersionNumber != null)
                {
                    hashCode = (hashCode * 59) + this.AsAtVersionNumber.GetHashCode();
                }
                if (this.Status != null)
                {
                    hashCode = (hashCode * 59) + this.Status.GetHashCode();
                }
                if (this.AsAtDeleted != null)
                {
                    hashCode = (hashCode * 59) + this.AsAtDeleted.GetHashCode();
                }
                if (this.UserIdDeleted != null)
                {
                    hashCode = (hashCode * 59) + this.UserIdDeleted.GetHashCode();
                }
                if (this.RequestIdDeleted != null)
                {
                    hashCode = (hashCode * 59) + this.RequestIdDeleted.GetHashCode();
                }
                if (this.EffectiveAtCreated != null)
                {
                    hashCode = (hashCode * 59) + this.EffectiveAtCreated.GetHashCode();
                }
                if (this.PrevailingDataType != null)
                {
                    hashCode = (hashCode * 59) + this.PrevailingDataType.GetHashCode();
                }
                if (this.DeletedDataType != null)
                {
                    hashCode = (hashCode * 59) + this.DeletedDataType.GetHashCode();
                }
                if (this.PreviewedStatus != null)
                {
                    hashCode = (hashCode * 59) + this.PreviewedStatus.GetHashCode();
                }
                if (this.PreviewedDataType != null)
                {
                    hashCode = (hashCode * 59) + this.PreviewedDataType.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // EntityUniqueId (string) minLength
            if (this.EntityUniqueId != null && this.EntityUniqueId.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for EntityUniqueId, length must be greater than 1.", new [] { "EntityUniqueId" });
            }

            // Status (string) minLength
            if (this.Status != null && this.Status.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Status, length must be greater than 1.", new [] { "Status" });
            }

            yield break;
        }
    }
}
