/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Lusid.Sdk.Client.OpenAPIDateConverter;

namespace Lusid.Sdk.Model
{
    /// <summary>
    /// A list of transactions contributed to a holding.
    /// </summary>
    [DataContract(Name = "HoldingContributor")]
    public partial class HoldingContributor : IEquatable<HoldingContributor>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="HoldingContributor" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected HoldingContributor() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="HoldingContributor" /> class.
        /// </summary>
        /// <param name="transaction">transaction (required).</param>
        /// <param name="holdingId">The unique holding identifier.</param>
        /// <param name="movements">Movements contributed to holding.</param>
        public HoldingContributor(Transaction transaction = default(Transaction), long? holdingId = default(long?), List<MovementSettlementSummary> movements = default(List<MovementSettlementSummary>))
        {
            // to ensure "transaction" is required (not null)
            if (transaction == null)
            {
                throw new ArgumentNullException("transaction is a required property for HoldingContributor and cannot be null");
            }
            this.Transaction = transaction;
            this.HoldingId = holdingId;
            this.Movements = movements;
        }

        /// <summary>
        /// Gets or Sets Transaction
        /// </summary>
        [DataMember(Name = "transaction", IsRequired = true, EmitDefaultValue = true)]
        public Transaction Transaction { get; set; }

        /// <summary>
        /// The unique holding identifier
        /// </summary>
        /// <value>The unique holding identifier</value>
        [DataMember(Name = "holdingId", EmitDefaultValue = true)]
        public long? HoldingId { get; set; }

        /// <summary>
        /// Movements contributed to holding
        /// </summary>
        /// <value>Movements contributed to holding</value>
        [DataMember(Name = "movements", EmitDefaultValue = true)]
        public List<MovementSettlementSummary> Movements { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class HoldingContributor {\n");
            sb.Append("  Transaction: ").Append(Transaction).Append("\n");
            sb.Append("  HoldingId: ").Append(HoldingId).Append("\n");
            sb.Append("  Movements: ").Append(Movements).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as HoldingContributor);
        }

        /// <summary>
        /// Returns true if HoldingContributor instances are equal
        /// </summary>
        /// <param name="input">Instance of HoldingContributor to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(HoldingContributor input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Transaction == input.Transaction ||
                    (this.Transaction != null &&
                    this.Transaction.Equals(input.Transaction))
                ) && 
                (
                    this.HoldingId == input.HoldingId ||
                    (this.HoldingId != null &&
                    this.HoldingId.Equals(input.HoldingId))
                ) && 
                (
                    this.Movements == input.Movements ||
                    this.Movements != null &&
                    input.Movements != null &&
                    this.Movements.SequenceEqual(input.Movements)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Transaction != null)
                {
                    hashCode = (hashCode * 59) + this.Transaction.GetHashCode();
                }
                if (this.HoldingId != null)
                {
                    hashCode = (hashCode * 59) + this.HoldingId.GetHashCode();
                }
                if (this.Movements != null)
                {
                    hashCode = (hashCode * 59) + this.Movements.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
