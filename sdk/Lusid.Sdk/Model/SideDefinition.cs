/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Lusid.Sdk.Client.OpenAPIDateConverter;

namespace Lusid.Sdk.Model
{
    /// <summary>
    /// SideDefinition
    /// </summary>
    [DataContract(Name = "SideDefinition")]
    public partial class SideDefinition : IEquatable<SideDefinition>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SideDefinition" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected SideDefinition() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="SideDefinition" /> class.
        /// </summary>
        /// <param name="side">A unique label identifying the side definition. (required).</param>
        /// <param name="security">The field or property key defining the side&#39;s security, or instrument. (required).</param>
        /// <param name="currency">The field or property key defining the side&#39;s currency. (required).</param>
        /// <param name="rate">The field or property key defining the side&#39;s rate. (required).</param>
        /// <param name="units">The value, field or property key defining the side&#39;s units. (required).</param>
        /// <param name="amount">The value, field or property key defining the side&#39;s amount (required).</param>
        /// <param name="notionalAmount">The value, field or property key defining the side&#39;s notional amount.</param>
        /// <param name="links">links.</param>
        public SideDefinition(string side = default(string), string security = default(string), string currency = default(string), string rate = default(string), string units = default(string), string amount = default(string), string notionalAmount = default(string), List<Link> links = default(List<Link>))
        {
            // to ensure "side" is required (not null)
            if (side == null)
            {
                throw new ArgumentNullException("side is a required property for SideDefinition and cannot be null");
            }
            this.Side = side;
            // to ensure "security" is required (not null)
            if (security == null)
            {
                throw new ArgumentNullException("security is a required property for SideDefinition and cannot be null");
            }
            this.Security = security;
            // to ensure "currency" is required (not null)
            if (currency == null)
            {
                throw new ArgumentNullException("currency is a required property for SideDefinition and cannot be null");
            }
            this.Currency = currency;
            // to ensure "rate" is required (not null)
            if (rate == null)
            {
                throw new ArgumentNullException("rate is a required property for SideDefinition and cannot be null");
            }
            this.Rate = rate;
            // to ensure "units" is required (not null)
            if (units == null)
            {
                throw new ArgumentNullException("units is a required property for SideDefinition and cannot be null");
            }
            this.Units = units;
            // to ensure "amount" is required (not null)
            if (amount == null)
            {
                throw new ArgumentNullException("amount is a required property for SideDefinition and cannot be null");
            }
            this.Amount = amount;
            this.NotionalAmount = notionalAmount;
            this.Links = links;
        }

        /// <summary>
        /// A unique label identifying the side definition.
        /// </summary>
        /// <value>A unique label identifying the side definition.</value>
        [DataMember(Name = "side", IsRequired = true, EmitDefaultValue = true)]
        public string Side { get; set; }

        /// <summary>
        /// The field or property key defining the side&#39;s security, or instrument.
        /// </summary>
        /// <value>The field or property key defining the side&#39;s security, or instrument.</value>
        [DataMember(Name = "security", IsRequired = true, EmitDefaultValue = true)]
        public string Security { get; set; }

        /// <summary>
        /// The field or property key defining the side&#39;s currency.
        /// </summary>
        /// <value>The field or property key defining the side&#39;s currency.</value>
        [DataMember(Name = "currency", IsRequired = true, EmitDefaultValue = true)]
        public string Currency { get; set; }

        /// <summary>
        /// The field or property key defining the side&#39;s rate.
        /// </summary>
        /// <value>The field or property key defining the side&#39;s rate.</value>
        [DataMember(Name = "rate", IsRequired = true, EmitDefaultValue = true)]
        public string Rate { get; set; }

        /// <summary>
        /// The value, field or property key defining the side&#39;s units.
        /// </summary>
        /// <value>The value, field or property key defining the side&#39;s units.</value>
        [DataMember(Name = "units", IsRequired = true, EmitDefaultValue = true)]
        public string Units { get; set; }

        /// <summary>
        /// The value, field or property key defining the side&#39;s amount
        /// </summary>
        /// <value>The value, field or property key defining the side&#39;s amount</value>
        [DataMember(Name = "amount", IsRequired = true, EmitDefaultValue = true)]
        public string Amount { get; set; }

        /// <summary>
        /// The value, field or property key defining the side&#39;s notional amount
        /// </summary>
        /// <value>The value, field or property key defining the side&#39;s notional amount</value>
        [DataMember(Name = "notionalAmount", EmitDefaultValue = true)]
        public string NotionalAmount { get; set; }

        /// <summary>
        /// Gets or Sets Links
        /// </summary>
        [DataMember(Name = "links", EmitDefaultValue = true)]
        public List<Link> Links { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SideDefinition {\n");
            sb.Append("  Side: ").Append(Side).Append("\n");
            sb.Append("  Security: ").Append(Security).Append("\n");
            sb.Append("  Currency: ").Append(Currency).Append("\n");
            sb.Append("  Rate: ").Append(Rate).Append("\n");
            sb.Append("  Units: ").Append(Units).Append("\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("  NotionalAmount: ").Append(NotionalAmount).Append("\n");
            sb.Append("  Links: ").Append(Links).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SideDefinition);
        }

        /// <summary>
        /// Returns true if SideDefinition instances are equal
        /// </summary>
        /// <param name="input">Instance of SideDefinition to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SideDefinition input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Side == input.Side ||
                    (this.Side != null &&
                    this.Side.Equals(input.Side))
                ) && 
                (
                    this.Security == input.Security ||
                    (this.Security != null &&
                    this.Security.Equals(input.Security))
                ) && 
                (
                    this.Currency == input.Currency ||
                    (this.Currency != null &&
                    this.Currency.Equals(input.Currency))
                ) && 
                (
                    this.Rate == input.Rate ||
                    (this.Rate != null &&
                    this.Rate.Equals(input.Rate))
                ) && 
                (
                    this.Units == input.Units ||
                    (this.Units != null &&
                    this.Units.Equals(input.Units))
                ) && 
                (
                    this.Amount == input.Amount ||
                    (this.Amount != null &&
                    this.Amount.Equals(input.Amount))
                ) && 
                (
                    this.NotionalAmount == input.NotionalAmount ||
                    (this.NotionalAmount != null &&
                    this.NotionalAmount.Equals(input.NotionalAmount))
                ) && 
                (
                    this.Links == input.Links ||
                    this.Links != null &&
                    input.Links != null &&
                    this.Links.SequenceEqual(input.Links)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Side != null)
                {
                    hashCode = (hashCode * 59) + this.Side.GetHashCode();
                }
                if (this.Security != null)
                {
                    hashCode = (hashCode * 59) + this.Security.GetHashCode();
                }
                if (this.Currency != null)
                {
                    hashCode = (hashCode * 59) + this.Currency.GetHashCode();
                }
                if (this.Rate != null)
                {
                    hashCode = (hashCode * 59) + this.Rate.GetHashCode();
                }
                if (this.Units != null)
                {
                    hashCode = (hashCode * 59) + this.Units.GetHashCode();
                }
                if (this.Amount != null)
                {
                    hashCode = (hashCode * 59) + this.Amount.GetHashCode();
                }
                if (this.NotionalAmount != null)
                {
                    hashCode = (hashCode * 59) + this.NotionalAmount.GetHashCode();
                }
                if (this.Links != null)
                {
                    hashCode = (hashCode * 59) + this.Links.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Side (string) maxLength
            if (this.Side != null && this.Side.Length > 64)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Side, length must be less than 64.", new [] { "Side" });
            }

            // Side (string) minLength
            if (this.Side != null && this.Side.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Side, length must be greater than 1.", new [] { "Side" });
            }

            // Security (string) maxLength
            if (this.Security != null && this.Security.Length > 64)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Security, length must be less than 64.", new [] { "Security" });
            }

            // Security (string) minLength
            if (this.Security != null && this.Security.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Security, length must be greater than 1.", new [] { "Security" });
            }

            // Currency (string) maxLength
            if (this.Currency != null && this.Currency.Length > 64)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Currency, length must be less than 64.", new [] { "Currency" });
            }

            // Currency (string) minLength
            if (this.Currency != null && this.Currency.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Currency, length must be greater than 1.", new [] { "Currency" });
            }

            // Rate (string) maxLength
            if (this.Rate != null && this.Rate.Length > 64)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Rate, length must be less than 64.", new [] { "Rate" });
            }

            // Rate (string) minLength
            if (this.Rate != null && this.Rate.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Rate, length must be greater than 1.", new [] { "Rate" });
            }

            // Units (string) maxLength
            if (this.Units != null && this.Units.Length > 64)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Units, length must be less than 64.", new [] { "Units" });
            }

            // Units (string) minLength
            if (this.Units != null && this.Units.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Units, length must be greater than 1.", new [] { "Units" });
            }

            // Amount (string) maxLength
            if (this.Amount != null && this.Amount.Length > 64)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Amount, length must be less than 64.", new [] { "Amount" });
            }

            // Amount (string) minLength
            if (this.Amount != null && this.Amount.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Amount, length must be greater than 1.", new [] { "Amount" });
            }

            // NotionalAmount (string) maxLength
            if (this.NotionalAmount != null && this.NotionalAmount.Length > 64)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for NotionalAmount, length must be less than 64.", new [] { "NotionalAmount" });
            }

            // NotionalAmount (string) minLength
            if (this.NotionalAmount != null && this.NotionalAmount.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for NotionalAmount, length must be greater than 1.", new [] { "NotionalAmount" });
            }

            yield break;
        }
    }
}
