/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Lusid.Sdk.Client.OpenAPIDateConverter;

namespace Lusid.Sdk.Model
{
    /// <summary>
    /// Any overriding data for notionals, spreads or rates that would affect generation of a leg.  This supports the case where an amortisation schedule is given but otherwise generation is allowed as usual.
    /// </summary>
    [DataContract(Name = "FixedLeg_allOf_overrides")]
    public partial class FixedLegAllOfOverrides : IEquatable<FixedLegAllOfOverrides>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FixedLegAllOfOverrides" /> class.
        /// </summary>
        /// <param name="amortization">amortization.</param>
        /// <param name="spreads">spreads.</param>
        public FixedLegAllOfOverrides(List<decimal> amortization = default(List<decimal>), List<decimal> spreads = default(List<decimal>))
        {
            this.Amortization = amortization;
            this.Spreads = spreads;
        }

        /// <summary>
        /// Gets or Sets Amortization
        /// </summary>
        [DataMember(Name = "Amortization", EmitDefaultValue = false)]
        public List<decimal> Amortization { get; set; }

        /// <summary>
        /// Gets or Sets Spreads
        /// </summary>
        [DataMember(Name = "Spreads", EmitDefaultValue = false)]
        public List<decimal> Spreads { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class FixedLegAllOfOverrides {\n");
            sb.Append("  Amortization: ").Append(Amortization).Append("\n");
            sb.Append("  Spreads: ").Append(Spreads).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as FixedLegAllOfOverrides);
        }

        /// <summary>
        /// Returns true if FixedLegAllOfOverrides instances are equal
        /// </summary>
        /// <param name="input">Instance of FixedLegAllOfOverrides to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FixedLegAllOfOverrides input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Amortization == input.Amortization ||
                    this.Amortization != null &&
                    input.Amortization != null &&
                    this.Amortization.SequenceEqual(input.Amortization)
                ) && 
                (
                    this.Spreads == input.Spreads ||
                    this.Spreads != null &&
                    input.Spreads != null &&
                    this.Spreads.SequenceEqual(input.Spreads)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Amortization != null)
                {
                    hashCode = (hashCode * 59) + this.Amortization.GetHashCode();
                }
                if (this.Spreads != null)
                {
                    hashCode = (hashCode * 59) + this.Spreads.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
