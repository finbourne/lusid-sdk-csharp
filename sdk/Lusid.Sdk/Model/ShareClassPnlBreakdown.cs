/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Lusid.Sdk.Client.OpenAPIDateConverter;

namespace Lusid.Sdk.Model
{
    /// <summary>
    /// The breakdown of PnL for a Share Class on a specified date.
    /// </summary>
    [DataContract(Name = "ShareClassPnlBreakdown")]
    public partial class ShareClassPnlBreakdown : IEquatable<ShareClassPnlBreakdown>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ShareClassPnlBreakdown" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ShareClassPnlBreakdown() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ShareClassPnlBreakdown" /> class.
        /// </summary>
        /// <param name="apportionedNonClassSpecificPnl">Bucket of detail for PnL within the queried period not explicitly allocated to any share class but has been apportioned to the share class. (required).</param>
        /// <param name="classPnl">Bucket of detail for PnL specific to the share class within the queried period. (required).</param>
        /// <param name="totalPnl">Bucket of detail for the sum of class PnL and PnL not specific to a class within the queried period. (required).</param>
        public ShareClassPnlBreakdown(Dictionary<string, ShareClassAmount> apportionedNonClassSpecificPnl = default(Dictionary<string, ShareClassAmount>), Dictionary<string, ShareClassAmount> classPnl = default(Dictionary<string, ShareClassAmount>), Dictionary<string, ShareClassAmount> totalPnl = default(Dictionary<string, ShareClassAmount>))
        {
            // to ensure "apportionedNonClassSpecificPnl" is required (not null)
            if (apportionedNonClassSpecificPnl == null)
            {
                throw new ArgumentNullException("apportionedNonClassSpecificPnl is a required property for ShareClassPnlBreakdown and cannot be null");
            }
            this.ApportionedNonClassSpecificPnl = apportionedNonClassSpecificPnl;
            // to ensure "classPnl" is required (not null)
            if (classPnl == null)
            {
                throw new ArgumentNullException("classPnl is a required property for ShareClassPnlBreakdown and cannot be null");
            }
            this.ClassPnl = classPnl;
            // to ensure "totalPnl" is required (not null)
            if (totalPnl == null)
            {
                throw new ArgumentNullException("totalPnl is a required property for ShareClassPnlBreakdown and cannot be null");
            }
            this.TotalPnl = totalPnl;
        }

        /// <summary>
        /// Bucket of detail for PnL within the queried period not explicitly allocated to any share class but has been apportioned to the share class.
        /// </summary>
        /// <value>Bucket of detail for PnL within the queried period not explicitly allocated to any share class but has been apportioned to the share class.</value>
        [DataMember(Name = "apportionedNonClassSpecificPnl", IsRequired = true, EmitDefaultValue = true)]
        public Dictionary<string, ShareClassAmount> ApportionedNonClassSpecificPnl { get; set; }

        /// <summary>
        /// Bucket of detail for PnL specific to the share class within the queried period.
        /// </summary>
        /// <value>Bucket of detail for PnL specific to the share class within the queried period.</value>
        [DataMember(Name = "classPnl", IsRequired = true, EmitDefaultValue = true)]
        public Dictionary<string, ShareClassAmount> ClassPnl { get; set; }

        /// <summary>
        /// Bucket of detail for the sum of class PnL and PnL not specific to a class within the queried period.
        /// </summary>
        /// <value>Bucket of detail for the sum of class PnL and PnL not specific to a class within the queried period.</value>
        [DataMember(Name = "totalPnl", IsRequired = true, EmitDefaultValue = true)]
        public Dictionary<string, ShareClassAmount> TotalPnl { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ShareClassPnlBreakdown {\n");
            sb.Append("  ApportionedNonClassSpecificPnl: ").Append(ApportionedNonClassSpecificPnl).Append("\n");
            sb.Append("  ClassPnl: ").Append(ClassPnl).Append("\n");
            sb.Append("  TotalPnl: ").Append(TotalPnl).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ShareClassPnlBreakdown);
        }

        /// <summary>
        /// Returns true if ShareClassPnlBreakdown instances are equal
        /// </summary>
        /// <param name="input">Instance of ShareClassPnlBreakdown to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ShareClassPnlBreakdown input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.ApportionedNonClassSpecificPnl == input.ApportionedNonClassSpecificPnl ||
                    this.ApportionedNonClassSpecificPnl != null &&
                    input.ApportionedNonClassSpecificPnl != null &&
                    this.ApportionedNonClassSpecificPnl.SequenceEqual(input.ApportionedNonClassSpecificPnl)
                ) && 
                (
                    this.ClassPnl == input.ClassPnl ||
                    this.ClassPnl != null &&
                    input.ClassPnl != null &&
                    this.ClassPnl.SequenceEqual(input.ClassPnl)
                ) && 
                (
                    this.TotalPnl == input.TotalPnl ||
                    this.TotalPnl != null &&
                    input.TotalPnl != null &&
                    this.TotalPnl.SequenceEqual(input.TotalPnl)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ApportionedNonClassSpecificPnl != null)
                {
                    hashCode = (hashCode * 59) + this.ApportionedNonClassSpecificPnl.GetHashCode();
                }
                if (this.ClassPnl != null)
                {
                    hashCode = (hashCode * 59) + this.ClassPnl.GetHashCode();
                }
                if (this.TotalPnl != null)
                {
                    hashCode = (hashCode * 59) + this.TotalPnl.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
