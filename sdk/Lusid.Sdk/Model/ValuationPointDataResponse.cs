/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Lusid.Sdk.Client.OpenAPIDateConverter;

namespace Lusid.Sdk.Model
{
    /// <summary>
    /// The Valuation Point Data Response for the Fund and specified date.
    /// </summary>
    [DataContract(Name = "ValuationPointDataResponse")]
    public partial class ValuationPointDataResponse : IEquatable<ValuationPointDataResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ValuationPointDataResponse" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ValuationPointDataResponse() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ValuationPointDataResponse" /> class.
        /// </summary>
        /// <param name="href">The specific Uniform Resource Identifier (URI) for this resource at the requested effective and asAt datetime..</param>
        /// <param name="type">The Type of the associated Diary Entry (&#39;PeriodBoundary&#39;,&#39;ValuationPoint&#39;,&#39;Other&#39; or &#39;Adhoc&#39; when a diary Entry wasn&#39;t used). (required).</param>
        /// <param name="status">The Status of the associated Diary Entry (&#39;Estimate&#39;,&#39;Final&#39;,&#39;Candidate&#39; or &#39;Unofficial&#39;). (required).</param>
        /// <param name="backout">Bucket of detail for the Valuation Point, where data points have been &#39;backed out&#39;. (required).</param>
        /// <param name="dealing">Bucket of detail for any &#39;Dealing&#39; that has occured inside the queried period. (required).</param>
        /// <param name="pnL">Bucket of detail for &#39;PnL&#39; that has occured inside the queried period. (required).</param>
        /// <param name="gav">The Gross Asset Value of the Fund at the Period end. This is effectively a summation of all Trial balance entries linked to accounts of types &#39;Asset&#39; and &#39;Liabilities&#39;. (required).</param>
        /// <param name="fees">Bucket of detail for any &#39;Fees&#39; that have been charged in the selected period. (required).</param>
        /// <param name="nav">The Net Asset Value of the Fund at the Period end. This represents the GAV with any fees applied in the period. (required).</param>
        /// <param name="previousNav">The Net Asset Value of the Fund at the End of the last Period. (required).</param>
        /// <param name="links">links.</param>
        public ValuationPointDataResponse(string href = default(string), string type = default(string), string status = default(string), Dictionary<string, decimal> backout = default(Dictionary<string, decimal>), Dictionary<string, decimal> dealing = default(Dictionary<string, decimal>), Dictionary<string, decimal> pnL = default(Dictionary<string, decimal>), decimal gav = default(decimal), Dictionary<string, decimal> fees = default(Dictionary<string, decimal>), decimal nav = default(decimal), decimal previousNav = default(decimal), List<Link> links = default(List<Link>))
        {
            // to ensure "type" is required (not null)
            if (type == null)
            {
                throw new ArgumentNullException("type is a required property for ValuationPointDataResponse and cannot be null");
            }
            this.Type = type;
            // to ensure "status" is required (not null)
            if (status == null)
            {
                throw new ArgumentNullException("status is a required property for ValuationPointDataResponse and cannot be null");
            }
            this.Status = status;
            // to ensure "backout" is required (not null)
            if (backout == null)
            {
                throw new ArgumentNullException("backout is a required property for ValuationPointDataResponse and cannot be null");
            }
            this.Backout = backout;
            // to ensure "dealing" is required (not null)
            if (dealing == null)
            {
                throw new ArgumentNullException("dealing is a required property for ValuationPointDataResponse and cannot be null");
            }
            this.Dealing = dealing;
            // to ensure "pnL" is required (not null)
            if (pnL == null)
            {
                throw new ArgumentNullException("pnL is a required property for ValuationPointDataResponse and cannot be null");
            }
            this.PnL = pnL;
            this.Gav = gav;
            // to ensure "fees" is required (not null)
            if (fees == null)
            {
                throw new ArgumentNullException("fees is a required property for ValuationPointDataResponse and cannot be null");
            }
            this.Fees = fees;
            this.Nav = nav;
            this.PreviousNav = previousNav;
            this.Href = href;
            this.Links = links;
        }

        /// <summary>
        /// The specific Uniform Resource Identifier (URI) for this resource at the requested effective and asAt datetime.
        /// </summary>
        /// <value>The specific Uniform Resource Identifier (URI) for this resource at the requested effective and asAt datetime.</value>
        [DataMember(Name = "href", EmitDefaultValue = true)]
        public string Href { get; set; }

        /// <summary>
        /// The Type of the associated Diary Entry (&#39;PeriodBoundary&#39;,&#39;ValuationPoint&#39;,&#39;Other&#39; or &#39;Adhoc&#39; when a diary Entry wasn&#39;t used).
        /// </summary>
        /// <value>The Type of the associated Diary Entry (&#39;PeriodBoundary&#39;,&#39;ValuationPoint&#39;,&#39;Other&#39; or &#39;Adhoc&#39; when a diary Entry wasn&#39;t used).</value>
        [DataMember(Name = "type", IsRequired = true, EmitDefaultValue = true)]
        public string Type { get; set; }

        /// <summary>
        /// The Status of the associated Diary Entry (&#39;Estimate&#39;,&#39;Final&#39;,&#39;Candidate&#39; or &#39;Unofficial&#39;).
        /// </summary>
        /// <value>The Status of the associated Diary Entry (&#39;Estimate&#39;,&#39;Final&#39;,&#39;Candidate&#39; or &#39;Unofficial&#39;).</value>
        [DataMember(Name = "status", IsRequired = true, EmitDefaultValue = true)]
        public string Status { get; set; }

        /// <summary>
        /// Bucket of detail for the Valuation Point, where data points have been &#39;backed out&#39;.
        /// </summary>
        /// <value>Bucket of detail for the Valuation Point, where data points have been &#39;backed out&#39;.</value>
        [DataMember(Name = "backout", IsRequired = true, EmitDefaultValue = true)]
        public Dictionary<string, decimal> Backout { get; set; }

        /// <summary>
        /// Bucket of detail for any &#39;Dealing&#39; that has occured inside the queried period.
        /// </summary>
        /// <value>Bucket of detail for any &#39;Dealing&#39; that has occured inside the queried period.</value>
        [DataMember(Name = "dealing", IsRequired = true, EmitDefaultValue = true)]
        public Dictionary<string, decimal> Dealing { get; set; }

        /// <summary>
        /// Bucket of detail for &#39;PnL&#39; that has occured inside the queried period.
        /// </summary>
        /// <value>Bucket of detail for &#39;PnL&#39; that has occured inside the queried period.</value>
        [DataMember(Name = "pnL", IsRequired = true, EmitDefaultValue = true)]
        public Dictionary<string, decimal> PnL { get; set; }

        /// <summary>
        /// The Gross Asset Value of the Fund at the Period end. This is effectively a summation of all Trial balance entries linked to accounts of types &#39;Asset&#39; and &#39;Liabilities&#39;.
        /// </summary>
        /// <value>The Gross Asset Value of the Fund at the Period end. This is effectively a summation of all Trial balance entries linked to accounts of types &#39;Asset&#39; and &#39;Liabilities&#39;.</value>
        [DataMember(Name = "gav", IsRequired = true, EmitDefaultValue = true)]
        public decimal Gav { get; set; }

        /// <summary>
        /// Bucket of detail for any &#39;Fees&#39; that have been charged in the selected period.
        /// </summary>
        /// <value>Bucket of detail for any &#39;Fees&#39; that have been charged in the selected period.</value>
        [DataMember(Name = "fees", IsRequired = true, EmitDefaultValue = true)]
        public Dictionary<string, decimal> Fees { get; set; }

        /// <summary>
        /// The Net Asset Value of the Fund at the Period end. This represents the GAV with any fees applied in the period.
        /// </summary>
        /// <value>The Net Asset Value of the Fund at the Period end. This represents the GAV with any fees applied in the period.</value>
        [DataMember(Name = "nav", IsRequired = true, EmitDefaultValue = true)]
        public decimal Nav { get; set; }

        /// <summary>
        /// The Net Asset Value of the Fund at the End of the last Period.
        /// </summary>
        /// <value>The Net Asset Value of the Fund at the End of the last Period.</value>
        [DataMember(Name = "previousNav", IsRequired = true, EmitDefaultValue = true)]
        public decimal PreviousNav { get; set; }

        /// <summary>
        /// Gets or Sets Links
        /// </summary>
        [DataMember(Name = "links", EmitDefaultValue = true)]
        public List<Link> Links { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ValuationPointDataResponse {\n");
            sb.Append("  Href: ").Append(Href).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Backout: ").Append(Backout).Append("\n");
            sb.Append("  Dealing: ").Append(Dealing).Append("\n");
            sb.Append("  PnL: ").Append(PnL).Append("\n");
            sb.Append("  Gav: ").Append(Gav).Append("\n");
            sb.Append("  Fees: ").Append(Fees).Append("\n");
            sb.Append("  Nav: ").Append(Nav).Append("\n");
            sb.Append("  PreviousNav: ").Append(PreviousNav).Append("\n");
            sb.Append("  Links: ").Append(Links).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ValuationPointDataResponse);
        }

        /// <summary>
        /// Returns true if ValuationPointDataResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of ValuationPointDataResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ValuationPointDataResponse input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Href == input.Href ||
                    (this.Href != null &&
                    this.Href.Equals(input.Href))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.Backout == input.Backout ||
                    this.Backout != null &&
                    input.Backout != null &&
                    this.Backout.SequenceEqual(input.Backout)
                ) && 
                (
                    this.Dealing == input.Dealing ||
                    this.Dealing != null &&
                    input.Dealing != null &&
                    this.Dealing.SequenceEqual(input.Dealing)
                ) && 
                (
                    this.PnL == input.PnL ||
                    this.PnL != null &&
                    input.PnL != null &&
                    this.PnL.SequenceEqual(input.PnL)
                ) && 
                (
                    this.Gav == input.Gav ||
                    this.Gav.Equals(input.Gav)
                ) && 
                (
                    this.Fees == input.Fees ||
                    this.Fees != null &&
                    input.Fees != null &&
                    this.Fees.SequenceEqual(input.Fees)
                ) && 
                (
                    this.Nav == input.Nav ||
                    this.Nav.Equals(input.Nav)
                ) && 
                (
                    this.PreviousNav == input.PreviousNav ||
                    this.PreviousNav.Equals(input.PreviousNav)
                ) && 
                (
                    this.Links == input.Links ||
                    this.Links != null &&
                    input.Links != null &&
                    this.Links.SequenceEqual(input.Links)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Href != null)
                {
                    hashCode = (hashCode * 59) + this.Href.GetHashCode();
                }
                if (this.Type != null)
                {
                    hashCode = (hashCode * 59) + this.Type.GetHashCode();
                }
                if (this.Status != null)
                {
                    hashCode = (hashCode * 59) + this.Status.GetHashCode();
                }
                if (this.Backout != null)
                {
                    hashCode = (hashCode * 59) + this.Backout.GetHashCode();
                }
                if (this.Dealing != null)
                {
                    hashCode = (hashCode * 59) + this.Dealing.GetHashCode();
                }
                if (this.PnL != null)
                {
                    hashCode = (hashCode * 59) + this.PnL.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Gav.GetHashCode();
                if (this.Fees != null)
                {
                    hashCode = (hashCode * 59) + this.Fees.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Nav.GetHashCode();
                hashCode = (hashCode * 59) + this.PreviousNav.GetHashCode();
                if (this.Links != null)
                {
                    hashCode = (hashCode * 59) + this.Links.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Type (string) minLength
            if (this.Type != null && this.Type.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Type, length must be greater than 1.", new [] { "Type" });
            }

            // Status (string) minLength
            if (this.Status != null && this.Status.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Status, length must be greater than 1.", new [] { "Status" });
            }

            yield break;
        }
    }
}
