/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Lusid.Sdk.Client.OpenAPIDateConverter;

namespace Lusid.Sdk.Model
{
    /// <summary>
    /// SettlementConfigurationCategory
    /// </summary>
    [DataContract(Name = "SettlementConfigurationCategory")]
    public partial class SettlementConfigurationCategory : IEquatable<SettlementConfigurationCategory>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SettlementConfigurationCategory" /> class.
        /// </summary>
        /// <param name="method">The method of settlement for the movements of the relevant type(s). Allowed values: &#39;Automatic&#39; and &#39;Instructed&#39;. A value of &#39;Instructed&#39; means that such movements can only be settled with a SettlementInstruction. A value of &#39;Automatic&#39; means that such movements will settle automatically but a SettlementInstruction will still override automatic settlement..</param>
        /// <param name="calculateInstructionToPortfolioRate">An optional flag that allows for the calculation of the instruction to portfolio rate for instructions with settlement category CashSettlement or DeferredCashReceipt, if it is not provided on the settlement instruction. Defaults to false if not specified..</param>
        /// <param name="calculateInLieuSettlementAmount">An optional flag that allows for the calculation of the in lieu amount for instructions with settlement category CashSettlement or DeferredCashReceipt, if it is not provided on the settlement instruction. Defaults to false if not specified..</param>
        public SettlementConfigurationCategory(string method = default(string), bool calculateInstructionToPortfolioRate = default(bool), bool calculateInLieuSettlementAmount = default(bool))
        {
            this.Method = method;
            this.CalculateInstructionToPortfolioRate = calculateInstructionToPortfolioRate;
            this.CalculateInLieuSettlementAmount = calculateInLieuSettlementAmount;
        }

        /// <summary>
        /// The method of settlement for the movements of the relevant type(s). Allowed values: &#39;Automatic&#39; and &#39;Instructed&#39;. A value of &#39;Instructed&#39; means that such movements can only be settled with a SettlementInstruction. A value of &#39;Automatic&#39; means that such movements will settle automatically but a SettlementInstruction will still override automatic settlement.
        /// </summary>
        /// <value>The method of settlement for the movements of the relevant type(s). Allowed values: &#39;Automatic&#39; and &#39;Instructed&#39;. A value of &#39;Instructed&#39; means that such movements can only be settled with a SettlementInstruction. A value of &#39;Automatic&#39; means that such movements will settle automatically but a SettlementInstruction will still override automatic settlement.</value>
        [DataMember(Name = "method", EmitDefaultValue = true)]
        public string Method { get; set; }

        /// <summary>
        /// An optional flag that allows for the calculation of the instruction to portfolio rate for instructions with settlement category CashSettlement or DeferredCashReceipt, if it is not provided on the settlement instruction. Defaults to false if not specified.
        /// </summary>
        /// <value>An optional flag that allows for the calculation of the instruction to portfolio rate for instructions with settlement category CashSettlement or DeferredCashReceipt, if it is not provided on the settlement instruction. Defaults to false if not specified.</value>
        [DataMember(Name = "calculateInstructionToPortfolioRate", EmitDefaultValue = true)]
        public bool CalculateInstructionToPortfolioRate { get; set; }

        /// <summary>
        /// An optional flag that allows for the calculation of the in lieu amount for instructions with settlement category CashSettlement or DeferredCashReceipt, if it is not provided on the settlement instruction. Defaults to false if not specified.
        /// </summary>
        /// <value>An optional flag that allows for the calculation of the in lieu amount for instructions with settlement category CashSettlement or DeferredCashReceipt, if it is not provided on the settlement instruction. Defaults to false if not specified.</value>
        [DataMember(Name = "calculateInLieuSettlementAmount", EmitDefaultValue = true)]
        public bool CalculateInLieuSettlementAmount { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SettlementConfigurationCategory {\n");
            sb.Append("  Method: ").Append(Method).Append("\n");
            sb.Append("  CalculateInstructionToPortfolioRate: ").Append(CalculateInstructionToPortfolioRate).Append("\n");
            sb.Append("  CalculateInLieuSettlementAmount: ").Append(CalculateInLieuSettlementAmount).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SettlementConfigurationCategory);
        }

        /// <summary>
        /// Returns true if SettlementConfigurationCategory instances are equal
        /// </summary>
        /// <param name="input">Instance of SettlementConfigurationCategory to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SettlementConfigurationCategory input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Method == input.Method ||
                    (this.Method != null &&
                    this.Method.Equals(input.Method))
                ) && 
                (
                    this.CalculateInstructionToPortfolioRate == input.CalculateInstructionToPortfolioRate ||
                    this.CalculateInstructionToPortfolioRate.Equals(input.CalculateInstructionToPortfolioRate)
                ) && 
                (
                    this.CalculateInLieuSettlementAmount == input.CalculateInLieuSettlementAmount ||
                    this.CalculateInLieuSettlementAmount.Equals(input.CalculateInLieuSettlementAmount)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Method != null)
                {
                    hashCode = (hashCode * 59) + this.Method.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.CalculateInstructionToPortfolioRate.GetHashCode();
                hashCode = (hashCode * 59) + this.CalculateInLieuSettlementAmount.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
