/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Lusid.Sdk.Client.OpenAPIDateConverter;

namespace Lusid.Sdk.Model
{
    /// <summary>
    /// AddressDefinition
    /// </summary>
    [DataContract(Name = "AddressDefinition")]
    public partial class AddressDefinition : IEquatable<AddressDefinition>, IValidatableObject
    {
        /// <summary>
        /// The available values are: String, Int, Decimal, DateTime, Boolean, ResultValue, Result0D, Json
        /// </summary>
        /// <value>The available values are: String, Int, Decimal, DateTime, Boolean, ResultValue, Result0D, Json</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeEnum
        {
            /// <summary>
            /// Enum String for value: String
            /// </summary>
            [EnumMember(Value = "String")]
            String = 1,

            /// <summary>
            /// Enum Int for value: Int
            /// </summary>
            [EnumMember(Value = "Int")]
            Int = 2,

            /// <summary>
            /// Enum Decimal for value: Decimal
            /// </summary>
            [EnumMember(Value = "Decimal")]
            Decimal = 3,

            /// <summary>
            /// Enum DateTime for value: DateTime
            /// </summary>
            [EnumMember(Value = "DateTime")]
            DateTime = 4,

            /// <summary>
            /// Enum Boolean for value: Boolean
            /// </summary>
            [EnumMember(Value = "Boolean")]
            Boolean = 5,

            /// <summary>
            /// Enum ResultValue for value: ResultValue
            /// </summary>
            [EnumMember(Value = "ResultValue")]
            ResultValue = 6,

            /// <summary>
            /// Enum Result0D for value: Result0D
            /// </summary>
            [EnumMember(Value = "Result0D")]
            Result0D = 7,

            /// <summary>
            /// Enum Json for value: Json
            /// </summary>
            [EnumMember(Value = "Json")]
            Json = 8
        }


        /// <summary>
        /// The available values are: String, Int, Decimal, DateTime, Boolean, ResultValue, Result0D, Json
        /// </summary>
        /// <value>The available values are: String, Int, Decimal, DateTime, Boolean, ResultValue, Result0D, Json</value>
        [DataMember(Name = "type", EmitDefaultValue = false)]
        public TypeEnum? Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="AddressDefinition" /> class.
        /// </summary>
        /// <param name="displayName">The display name of the address key..</param>
        /// <param name="type">The available values are: String, Int, Decimal, DateTime, Boolean, ResultValue, Result0D, Json.</param>
        /// <param name="description">The description for this result..</param>
        /// <param name="lifeCycleStatus">What is the status of the address path. If it is not Production then it might be removed at some point in the future.  See the removal date for the likely timing of that if any..</param>
        /// <param name="removalDate">If the life-cycle status of the address is Deprecated then this is the date at which support of the address will be suspended.  After that date it will be removed at the earliest possible point subject to any specific contractual support and development constraints..</param>
        /// <param name="documentationLink">Contains a link to the documentation for this AddressDefinition in KnowledgeBase..</param>
        public AddressDefinition(string displayName = default(string), TypeEnum? type = default(TypeEnum?), string description = default(string), string lifeCycleStatus = default(string), DateTimeOffset? removalDate = default(DateTimeOffset?), string documentationLink = default(string))
        {
            this.DisplayName = displayName;
            this.Type = type;
            this.Description = description;
            this.LifeCycleStatus = lifeCycleStatus;
            this.RemovalDate = removalDate;
            this.DocumentationLink = documentationLink;
        }

        /// <summary>
        /// The display name of the address key.
        /// </summary>
        /// <value>The display name of the address key.</value>
        [DataMember(Name = "displayName", EmitDefaultValue = true)]
        public string DisplayName { get; set; }

        /// <summary>
        /// The description for this result.
        /// </summary>
        /// <value>The description for this result.</value>
        [DataMember(Name = "description", EmitDefaultValue = true)]
        public string Description { get; set; }

        /// <summary>
        /// What is the status of the address path. If it is not Production then it might be removed at some point in the future.  See the removal date for the likely timing of that if any.
        /// </summary>
        /// <value>What is the status of the address path. If it is not Production then it might be removed at some point in the future.  See the removal date for the likely timing of that if any.</value>
        [DataMember(Name = "lifeCycleStatus", EmitDefaultValue = true)]
        public string LifeCycleStatus { get; set; }

        /// <summary>
        /// If the life-cycle status of the address is Deprecated then this is the date at which support of the address will be suspended.  After that date it will be removed at the earliest possible point subject to any specific contractual support and development constraints.
        /// </summary>
        /// <value>If the life-cycle status of the address is Deprecated then this is the date at which support of the address will be suspended.  After that date it will be removed at the earliest possible point subject to any specific contractual support and development constraints.</value>
        [DataMember(Name = "removalDate", EmitDefaultValue = true)]
        public DateTimeOffset? RemovalDate { get; set; }

        /// <summary>
        /// Contains a link to the documentation for this AddressDefinition in KnowledgeBase.
        /// </summary>
        /// <value>Contains a link to the documentation for this AddressDefinition in KnowledgeBase.</value>
        [DataMember(Name = "documentationLink", EmitDefaultValue = true)]
        public string DocumentationLink { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AddressDefinition {\n");
            sb.Append("  DisplayName: ").Append(DisplayName).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  LifeCycleStatus: ").Append(LifeCycleStatus).Append("\n");
            sb.Append("  RemovalDate: ").Append(RemovalDate).Append("\n");
            sb.Append("  DocumentationLink: ").Append(DocumentationLink).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AddressDefinition);
        }

        /// <summary>
        /// Returns true if AddressDefinition instances are equal
        /// </summary>
        /// <param name="input">Instance of AddressDefinition to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AddressDefinition input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.DisplayName == input.DisplayName ||
                    (this.DisplayName != null &&
                    this.DisplayName.Equals(input.DisplayName))
                ) && 
                (
                    this.Type == input.Type ||
                    this.Type.Equals(input.Type)
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.LifeCycleStatus == input.LifeCycleStatus ||
                    (this.LifeCycleStatus != null &&
                    this.LifeCycleStatus.Equals(input.LifeCycleStatus))
                ) && 
                (
                    this.RemovalDate == input.RemovalDate ||
                    (this.RemovalDate != null &&
                    this.RemovalDate.Equals(input.RemovalDate))
                ) && 
                (
                    this.DocumentationLink == input.DocumentationLink ||
                    (this.DocumentationLink != null &&
                    this.DocumentationLink.Equals(input.DocumentationLink))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.DisplayName != null)
                {
                    hashCode = (hashCode * 59) + this.DisplayName.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Type.GetHashCode();
                if (this.Description != null)
                {
                    hashCode = (hashCode * 59) + this.Description.GetHashCode();
                }
                if (this.LifeCycleStatus != null)
                {
                    hashCode = (hashCode * 59) + this.LifeCycleStatus.GetHashCode();
                }
                if (this.RemovalDate != null)
                {
                    hashCode = (hashCode * 59) + this.RemovalDate.GetHashCode();
                }
                if (this.DocumentationLink != null)
                {
                    hashCode = (hashCode * 59) + this.DocumentationLink.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
