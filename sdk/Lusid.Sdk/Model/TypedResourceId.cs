/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Lusid.Sdk.Client.OpenAPIDateConverter;

namespace Lusid.Sdk.Model
{
    /// <summary>
    /// Represents the user-defined identifier for a Legal Entity or Person.  Users can define their own, scoped identifiers for Legal Entities and Persons using identifier properties.  For example,  when used to identify a Person, the identifier defined by Person/myScope/username would be represented as   {     \&quot;idTypeScope\&quot;: \&quot;myScope\&quot;,     \&quot;idTypeCode\&quot;: \&quot;username\&quot;,     \&quot;code\&quot;: \&quot;john_doe_001\&quot;   }
    /// </summary>
    [DataContract(Name = "TypedResourceId")]
    public partial class TypedResourceId : IEquatable<TypedResourceId>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TypedResourceId" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected TypedResourceId() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="TypedResourceId" /> class.
        /// </summary>
        /// <param name="idTypeScope">The scope of the identifier&#39;s (property) definition. (required).</param>
        /// <param name="idTypeCode">The code of identifier&#39;s (property) definition. This describes what the identifier represents.  For a Person this might be a username, nationalInsuranceNumber or similar.  For a Legal Entity, this might be a registeredCompanyNumber or LEI. (required).</param>
        /// <param name="code">The value of the user-defined identifier in respect of the entity. (required).</param>
        public TypedResourceId(string idTypeScope = default(string), string idTypeCode = default(string), string code = default(string))
        {
            // to ensure "idTypeScope" is required (not null)
            if (idTypeScope == null)
            {
                throw new ArgumentNullException("idTypeScope is a required property for TypedResourceId and cannot be null");
            }
            this.IdTypeScope = idTypeScope;
            // to ensure "idTypeCode" is required (not null)
            if (idTypeCode == null)
            {
                throw new ArgumentNullException("idTypeCode is a required property for TypedResourceId and cannot be null");
            }
            this.IdTypeCode = idTypeCode;
            // to ensure "code" is required (not null)
            if (code == null)
            {
                throw new ArgumentNullException("code is a required property for TypedResourceId and cannot be null");
            }
            this.Code = code;
        }

        /// <summary>
        /// The scope of the identifier&#39;s (property) definition.
        /// </summary>
        /// <value>The scope of the identifier&#39;s (property) definition.</value>
        [DataMember(Name = "idTypeScope", IsRequired = true, EmitDefaultValue = true)]
        public string IdTypeScope { get; set; }

        /// <summary>
        /// The code of identifier&#39;s (property) definition. This describes what the identifier represents.  For a Person this might be a username, nationalInsuranceNumber or similar.  For a Legal Entity, this might be a registeredCompanyNumber or LEI.
        /// </summary>
        /// <value>The code of identifier&#39;s (property) definition. This describes what the identifier represents.  For a Person this might be a username, nationalInsuranceNumber or similar.  For a Legal Entity, this might be a registeredCompanyNumber or LEI.</value>
        [DataMember(Name = "idTypeCode", IsRequired = true, EmitDefaultValue = true)]
        public string IdTypeCode { get; set; }

        /// <summary>
        /// The value of the user-defined identifier in respect of the entity.
        /// </summary>
        /// <value>The value of the user-defined identifier in respect of the entity.</value>
        [DataMember(Name = "code", IsRequired = true, EmitDefaultValue = true)]
        public string Code { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class TypedResourceId {\n");
            sb.Append("  IdTypeScope: ").Append(IdTypeScope).Append("\n");
            sb.Append("  IdTypeCode: ").Append(IdTypeCode).Append("\n");
            sb.Append("  Code: ").Append(Code).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TypedResourceId);
        }

        /// <summary>
        /// Returns true if TypedResourceId instances are equal
        /// </summary>
        /// <param name="input">Instance of TypedResourceId to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TypedResourceId input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.IdTypeScope == input.IdTypeScope ||
                    (this.IdTypeScope != null &&
                    this.IdTypeScope.Equals(input.IdTypeScope))
                ) && 
                (
                    this.IdTypeCode == input.IdTypeCode ||
                    (this.IdTypeCode != null &&
                    this.IdTypeCode.Equals(input.IdTypeCode))
                ) && 
                (
                    this.Code == input.Code ||
                    (this.Code != null &&
                    this.Code.Equals(input.Code))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.IdTypeScope != null)
                {
                    hashCode = (hashCode * 59) + this.IdTypeScope.GetHashCode();
                }
                if (this.IdTypeCode != null)
                {
                    hashCode = (hashCode * 59) + this.IdTypeCode.GetHashCode();
                }
                if (this.Code != null)
                {
                    hashCode = (hashCode * 59) + this.Code.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // IdTypeScope (string) maxLength
            if (this.IdTypeScope != null && this.IdTypeScope.Length > 64)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for IdTypeScope, length must be less than 64.", new [] { "IdTypeScope" });
            }

            // IdTypeScope (string) minLength
            if (this.IdTypeScope != null && this.IdTypeScope.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for IdTypeScope, length must be greater than 1.", new [] { "IdTypeScope" });
            }

            // IdTypeScope (string) pattern
            Regex regexIdTypeScope = new Regex(@"^[a-zA-Z0-9\-_]+$", RegexOptions.CultureInvariant);
            if (false == regexIdTypeScope.Match(this.IdTypeScope).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for IdTypeScope, must match a pattern of " + regexIdTypeScope, new [] { "IdTypeScope" });
            }

            // IdTypeCode (string) maxLength
            if (this.IdTypeCode != null && this.IdTypeCode.Length > 64)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for IdTypeCode, length must be less than 64.", new [] { "IdTypeCode" });
            }

            // IdTypeCode (string) minLength
            if (this.IdTypeCode != null && this.IdTypeCode.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for IdTypeCode, length must be greater than 1.", new [] { "IdTypeCode" });
            }

            // IdTypeCode (string) pattern
            Regex regexIdTypeCode = new Regex(@"^[a-zA-Z0-9\-_]+$", RegexOptions.CultureInvariant);
            if (false == regexIdTypeCode.Match(this.IdTypeCode).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for IdTypeCode, must match a pattern of " + regexIdTypeCode, new [] { "IdTypeCode" });
            }

            // Code (string) maxLength
            if (this.Code != null && this.Code.Length > 64)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Code, length must be less than 64.", new [] { "Code" });
            }

            // Code (string) minLength
            if (this.Code != null && this.Code.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Code, length must be greater than 1.", new [] { "Code" });
            }

            // Code (string) pattern
            Regex regexCode = new Regex(@"^[a-zA-Z0-9\-_]+$", RegexOptions.CultureInvariant);
            if (false == regexCode.Match(this.Code).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Code, must match a pattern of " + regexCode, new [] { "Code" });
            }

            yield break;
        }
    }
}
