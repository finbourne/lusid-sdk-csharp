/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Lusid.Sdk.Client.OpenAPIDateConverter;

namespace Lusid.Sdk.Model
{
    /// <summary>
    /// TransactionSettlementInstruction
    /// </summary>
    [DataContract(Name = "TransactionSettlementInstruction")]
    public partial class TransactionSettlementInstruction : IEquatable<TransactionSettlementInstruction>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TransactionSettlementInstruction" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected TransactionSettlementInstruction() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="TransactionSettlementInstruction" /> class.
        /// </summary>
        /// <param name="settlementInstructionId">The instruction identifier. Unique within the portfolio. (required).</param>
        /// <param name="instructionType">The type of instruction which can be Complete or CancelAutomatic. Complete means that the instruction is intended to completely settle a settlement bucket. CancelAutomatic means that it is intended to cancel Automatic settlement. (required).</param>
        /// <param name="actualSettlementDate">The date that settlement takes place. (required).</param>
        /// <param name="units">The number of units for the instruction. (required).</param>
        /// <param name="transactionId">The ID for the transaction being instructed. (required).</param>
        /// <param name="settlementCategory">A category representing the set of movement types that this instruction applies to. (required).</param>
        /// <param name="lusidInstrumentId">The LusidInstrumentId of the instrument being settled. (required).</param>
        /// <param name="contractualSettlementDate">The contractual settlement date. Used to match the instruction to the correct settlement bucket..</param>
        /// <param name="subHoldingKeyOverrides">Allows one or more sub-holding keys to be overridden for any movement being settled by an instruction. Providing a key and value will set the sub-holding key to the specified value; Providing a key only will nullify the sub-holding key. Not referenced sub-holding keys will not be impacted. .</param>
        /// <param name="custodianAccountOverride">custodianAccountOverride.</param>
        /// <param name="instrumentIdentifiers">A set of instrument identifiers that can resolve the settlement instruction to a unique instrument. (required).</param>
        /// <param name="status">The status of the settlement instruction - &#39;Invalid&#39;, &#39;Rejected&#39; &#39;Applied&#39; or &#39;Orphan&#39;..</param>
        /// <param name="instructionToPortfolioRate">The exchange rate between the Settlement Instruction and Portfolio..</param>
        public TransactionSettlementInstruction(string settlementInstructionId = default(string), string instructionType = default(string), DateTimeOffset actualSettlementDate = default(DateTimeOffset), decimal units = default(decimal), string transactionId = default(string), string settlementCategory = default(string), string lusidInstrumentId = default(string), DateTimeOffset? contractualSettlementDate = default(DateTimeOffset?), Dictionary<string, PerpetualProperty> subHoldingKeyOverrides = default(Dictionary<string, PerpetualProperty>), ResourceId custodianAccountOverride = default(ResourceId), Dictionary<string, string> instrumentIdentifiers = default(Dictionary<string, string>), string status = default(string), decimal? instructionToPortfolioRate = default(decimal?))
        {
            // to ensure "settlementInstructionId" is required (not null)
            if (settlementInstructionId == null)
            {
                throw new ArgumentNullException("settlementInstructionId is a required property for TransactionSettlementInstruction and cannot be null");
            }
            this.SettlementInstructionId = settlementInstructionId;
            // to ensure "instructionType" is required (not null)
            if (instructionType == null)
            {
                throw new ArgumentNullException("instructionType is a required property for TransactionSettlementInstruction and cannot be null");
            }
            this.InstructionType = instructionType;
            this.ActualSettlementDate = actualSettlementDate;
            this.Units = units;
            // to ensure "transactionId" is required (not null)
            if (transactionId == null)
            {
                throw new ArgumentNullException("transactionId is a required property for TransactionSettlementInstruction and cannot be null");
            }
            this.TransactionId = transactionId;
            // to ensure "settlementCategory" is required (not null)
            if (settlementCategory == null)
            {
                throw new ArgumentNullException("settlementCategory is a required property for TransactionSettlementInstruction and cannot be null");
            }
            this.SettlementCategory = settlementCategory;
            // to ensure "lusidInstrumentId" is required (not null)
            if (lusidInstrumentId == null)
            {
                throw new ArgumentNullException("lusidInstrumentId is a required property for TransactionSettlementInstruction and cannot be null");
            }
            this.LusidInstrumentId = lusidInstrumentId;
            // to ensure "instrumentIdentifiers" is required (not null)
            if (instrumentIdentifiers == null)
            {
                throw new ArgumentNullException("instrumentIdentifiers is a required property for TransactionSettlementInstruction and cannot be null");
            }
            this.InstrumentIdentifiers = instrumentIdentifiers;
            this.ContractualSettlementDate = contractualSettlementDate;
            this.SubHoldingKeyOverrides = subHoldingKeyOverrides;
            this.CustodianAccountOverride = custodianAccountOverride;
            this.Status = status;
            this.InstructionToPortfolioRate = instructionToPortfolioRate;
        }

        /// <summary>
        /// The instruction identifier. Unique within the portfolio.
        /// </summary>
        /// <value>The instruction identifier. Unique within the portfolio.</value>
        [DataMember(Name = "settlementInstructionId", IsRequired = true, EmitDefaultValue = true)]
        public string SettlementInstructionId { get; set; }

        /// <summary>
        /// The type of instruction which can be Complete or CancelAutomatic. Complete means that the instruction is intended to completely settle a settlement bucket. CancelAutomatic means that it is intended to cancel Automatic settlement.
        /// </summary>
        /// <value>The type of instruction which can be Complete or CancelAutomatic. Complete means that the instruction is intended to completely settle a settlement bucket. CancelAutomatic means that it is intended to cancel Automatic settlement.</value>
        [DataMember(Name = "instructionType", IsRequired = true, EmitDefaultValue = true)]
        public string InstructionType { get; set; }

        /// <summary>
        /// The date that settlement takes place.
        /// </summary>
        /// <value>The date that settlement takes place.</value>
        [DataMember(Name = "actualSettlementDate", IsRequired = true, EmitDefaultValue = true)]
        public DateTimeOffset ActualSettlementDate { get; set; }

        /// <summary>
        /// The number of units for the instruction.
        /// </summary>
        /// <value>The number of units for the instruction.</value>
        [DataMember(Name = "units", IsRequired = true, EmitDefaultValue = true)]
        public decimal Units { get; set; }

        /// <summary>
        /// The ID for the transaction being instructed.
        /// </summary>
        /// <value>The ID for the transaction being instructed.</value>
        [DataMember(Name = "transactionId", IsRequired = true, EmitDefaultValue = true)]
        public string TransactionId { get; set; }

        /// <summary>
        /// A category representing the set of movement types that this instruction applies to.
        /// </summary>
        /// <value>A category representing the set of movement types that this instruction applies to.</value>
        [DataMember(Name = "settlementCategory", IsRequired = true, EmitDefaultValue = true)]
        public string SettlementCategory { get; set; }

        /// <summary>
        /// The LusidInstrumentId of the instrument being settled.
        /// </summary>
        /// <value>The LusidInstrumentId of the instrument being settled.</value>
        [DataMember(Name = "lusidInstrumentId", IsRequired = true, EmitDefaultValue = true)]
        public string LusidInstrumentId { get; set; }

        /// <summary>
        /// The contractual settlement date. Used to match the instruction to the correct settlement bucket.
        /// </summary>
        /// <value>The contractual settlement date. Used to match the instruction to the correct settlement bucket.</value>
        [DataMember(Name = "contractualSettlementDate", EmitDefaultValue = true)]
        public DateTimeOffset? ContractualSettlementDate { get; set; }

        /// <summary>
        /// Allows one or more sub-holding keys to be overridden for any movement being settled by an instruction. Providing a key and value will set the sub-holding key to the specified value; Providing a key only will nullify the sub-holding key. Not referenced sub-holding keys will not be impacted. 
        /// </summary>
        /// <value>Allows one or more sub-holding keys to be overridden for any movement being settled by an instruction. Providing a key and value will set the sub-holding key to the specified value; Providing a key only will nullify the sub-holding key. Not referenced sub-holding keys will not be impacted. </value>
        [DataMember(Name = "subHoldingKeyOverrides", EmitDefaultValue = true)]
        public Dictionary<string, PerpetualProperty> SubHoldingKeyOverrides { get; set; }

        /// <summary>
        /// Gets or Sets CustodianAccountOverride
        /// </summary>
        [DataMember(Name = "custodianAccountOverride", EmitDefaultValue = false)]
        public ResourceId CustodianAccountOverride { get; set; }

        /// <summary>
        /// A set of instrument identifiers that can resolve the settlement instruction to a unique instrument.
        /// </summary>
        /// <value>A set of instrument identifiers that can resolve the settlement instruction to a unique instrument.</value>
        [DataMember(Name = "instrumentIdentifiers", IsRequired = true, EmitDefaultValue = true)]
        public Dictionary<string, string> InstrumentIdentifiers { get; set; }

        /// <summary>
        /// The status of the settlement instruction - &#39;Invalid&#39;, &#39;Rejected&#39; &#39;Applied&#39; or &#39;Orphan&#39;.
        /// </summary>
        /// <value>The status of the settlement instruction - &#39;Invalid&#39;, &#39;Rejected&#39; &#39;Applied&#39; or &#39;Orphan&#39;.</value>
        [DataMember(Name = "status", EmitDefaultValue = true)]
        public string Status { get; set; }

        /// <summary>
        /// The exchange rate between the Settlement Instruction and Portfolio.
        /// </summary>
        /// <value>The exchange rate between the Settlement Instruction and Portfolio.</value>
        [DataMember(Name = "instructionToPortfolioRate", EmitDefaultValue = true)]
        public decimal? InstructionToPortfolioRate { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class TransactionSettlementInstruction {\n");
            sb.Append("  SettlementInstructionId: ").Append(SettlementInstructionId).Append("\n");
            sb.Append("  InstructionType: ").Append(InstructionType).Append("\n");
            sb.Append("  ActualSettlementDate: ").Append(ActualSettlementDate).Append("\n");
            sb.Append("  Units: ").Append(Units).Append("\n");
            sb.Append("  TransactionId: ").Append(TransactionId).Append("\n");
            sb.Append("  SettlementCategory: ").Append(SettlementCategory).Append("\n");
            sb.Append("  LusidInstrumentId: ").Append(LusidInstrumentId).Append("\n");
            sb.Append("  ContractualSettlementDate: ").Append(ContractualSettlementDate).Append("\n");
            sb.Append("  SubHoldingKeyOverrides: ").Append(SubHoldingKeyOverrides).Append("\n");
            sb.Append("  CustodianAccountOverride: ").Append(CustodianAccountOverride).Append("\n");
            sb.Append("  InstrumentIdentifiers: ").Append(InstrumentIdentifiers).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  InstructionToPortfolioRate: ").Append(InstructionToPortfolioRate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TransactionSettlementInstruction);
        }

        /// <summary>
        /// Returns true if TransactionSettlementInstruction instances are equal
        /// </summary>
        /// <param name="input">Instance of TransactionSettlementInstruction to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TransactionSettlementInstruction input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.SettlementInstructionId == input.SettlementInstructionId ||
                    (this.SettlementInstructionId != null &&
                    this.SettlementInstructionId.Equals(input.SettlementInstructionId))
                ) && 
                (
                    this.InstructionType == input.InstructionType ||
                    (this.InstructionType != null &&
                    this.InstructionType.Equals(input.InstructionType))
                ) && 
                (
                    this.ActualSettlementDate == input.ActualSettlementDate ||
                    (this.ActualSettlementDate != null &&
                    this.ActualSettlementDate.Equals(input.ActualSettlementDate))
                ) && 
                (
                    this.Units == input.Units ||
                    this.Units.Equals(input.Units)
                ) && 
                (
                    this.TransactionId == input.TransactionId ||
                    (this.TransactionId != null &&
                    this.TransactionId.Equals(input.TransactionId))
                ) && 
                (
                    this.SettlementCategory == input.SettlementCategory ||
                    (this.SettlementCategory != null &&
                    this.SettlementCategory.Equals(input.SettlementCategory))
                ) && 
                (
                    this.LusidInstrumentId == input.LusidInstrumentId ||
                    (this.LusidInstrumentId != null &&
                    this.LusidInstrumentId.Equals(input.LusidInstrumentId))
                ) && 
                (
                    this.ContractualSettlementDate == input.ContractualSettlementDate ||
                    (this.ContractualSettlementDate != null &&
                    this.ContractualSettlementDate.Equals(input.ContractualSettlementDate))
                ) && 
                (
                    this.SubHoldingKeyOverrides == input.SubHoldingKeyOverrides ||
                    this.SubHoldingKeyOverrides != null &&
                    input.SubHoldingKeyOverrides != null &&
                    this.SubHoldingKeyOverrides.SequenceEqual(input.SubHoldingKeyOverrides)
                ) && 
                (
                    this.CustodianAccountOverride == input.CustodianAccountOverride ||
                    (this.CustodianAccountOverride != null &&
                    this.CustodianAccountOverride.Equals(input.CustodianAccountOverride))
                ) && 
                (
                    this.InstrumentIdentifiers == input.InstrumentIdentifiers ||
                    this.InstrumentIdentifiers != null &&
                    input.InstrumentIdentifiers != null &&
                    this.InstrumentIdentifiers.SequenceEqual(input.InstrumentIdentifiers)
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.InstructionToPortfolioRate == input.InstructionToPortfolioRate ||
                    (this.InstructionToPortfolioRate != null &&
                    this.InstructionToPortfolioRate.Equals(input.InstructionToPortfolioRate))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.SettlementInstructionId != null)
                {
                    hashCode = (hashCode * 59) + this.SettlementInstructionId.GetHashCode();
                }
                if (this.InstructionType != null)
                {
                    hashCode = (hashCode * 59) + this.InstructionType.GetHashCode();
                }
                if (this.ActualSettlementDate != null)
                {
                    hashCode = (hashCode * 59) + this.ActualSettlementDate.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Units.GetHashCode();
                if (this.TransactionId != null)
                {
                    hashCode = (hashCode * 59) + this.TransactionId.GetHashCode();
                }
                if (this.SettlementCategory != null)
                {
                    hashCode = (hashCode * 59) + this.SettlementCategory.GetHashCode();
                }
                if (this.LusidInstrumentId != null)
                {
                    hashCode = (hashCode * 59) + this.LusidInstrumentId.GetHashCode();
                }
                if (this.ContractualSettlementDate != null)
                {
                    hashCode = (hashCode * 59) + this.ContractualSettlementDate.GetHashCode();
                }
                if (this.SubHoldingKeyOverrides != null)
                {
                    hashCode = (hashCode * 59) + this.SubHoldingKeyOverrides.GetHashCode();
                }
                if (this.CustodianAccountOverride != null)
                {
                    hashCode = (hashCode * 59) + this.CustodianAccountOverride.GetHashCode();
                }
                if (this.InstrumentIdentifiers != null)
                {
                    hashCode = (hashCode * 59) + this.InstrumentIdentifiers.GetHashCode();
                }
                if (this.Status != null)
                {
                    hashCode = (hashCode * 59) + this.Status.GetHashCode();
                }
                if (this.InstructionToPortfolioRate != null)
                {
                    hashCode = (hashCode * 59) + this.InstructionToPortfolioRate.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // SettlementInstructionId (string) minLength
            if (this.SettlementInstructionId != null && this.SettlementInstructionId.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SettlementInstructionId, length must be greater than 1.", new [] { "SettlementInstructionId" });
            }

            // InstructionType (string) minLength
            if (this.InstructionType != null && this.InstructionType.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for InstructionType, length must be greater than 1.", new [] { "InstructionType" });
            }

            // TransactionId (string) minLength
            if (this.TransactionId != null && this.TransactionId.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for TransactionId, length must be greater than 1.", new [] { "TransactionId" });
            }

            // SettlementCategory (string) minLength
            if (this.SettlementCategory != null && this.SettlementCategory.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SettlementCategory, length must be greater than 1.", new [] { "SettlementCategory" });
            }

            // LusidInstrumentId (string) minLength
            if (this.LusidInstrumentId != null && this.LusidInstrumentId.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for LusidInstrumentId, length must be greater than 1.", new [] { "LusidInstrumentId" });
            }

            yield break;
        }
    }
}
