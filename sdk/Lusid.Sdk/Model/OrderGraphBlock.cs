/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Lusid.Sdk.Client.OpenAPIDateConverter;

namespace Lusid.Sdk.Model
{
    /// <summary>
    /// OrderGraphBlock
    /// </summary>
    [DataContract(Name = "OrderGraphBlock")]
    public partial class OrderGraphBlock : IEquatable<OrderGraphBlock>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="OrderGraphBlock" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected OrderGraphBlock() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="OrderGraphBlock" /> class.
        /// </summary>
        /// <param name="block">block (required).</param>
        /// <param name="ordered">ordered (required).</param>
        /// <param name="placed">placed (required).</param>
        /// <param name="executed">executed (required).</param>
        /// <param name="allocated">allocated (required).</param>
        /// <param name="booked">booked (required).</param>
        /// <param name="derivedState">A simple description of the overall state of a block. (required).</param>
        /// <param name="derivedComplianceState">The overall compliance state of a block, derived from the block&#39;s orders. Possible values are &#39;Pending&#39;, &#39;Failed&#39;, &#39;Manually approved&#39; and &#39;Passed&#39;. (required).</param>
        /// <param name="derivedApprovalState">The overall approval state of a block, derived from approval of the block&#39;s orders. Possible values are &#39;Pending&#39;, &#39;Approved&#39; and &#39;Rejected&#39;. (required).</param>
        public OrderGraphBlock(Block block = default(Block), OrderGraphBlockOrderSynopsis ordered = default(OrderGraphBlockOrderSynopsis), OrderGraphBlockPlacementSynopsis placed = default(OrderGraphBlockPlacementSynopsis), OrderGraphBlockExecutionSynopsis executed = default(OrderGraphBlockExecutionSynopsis), OrderGraphBlockAllocationSynopsis allocated = default(OrderGraphBlockAllocationSynopsis), OrderGraphBlockTransactionSynopsis booked = default(OrderGraphBlockTransactionSynopsis), string derivedState = default(string), string derivedComplianceState = default(string), string derivedApprovalState = default(string))
        {
            // to ensure "block" is required (not null)
            if (block == null)
            {
                throw new ArgumentNullException("block is a required property for OrderGraphBlock and cannot be null");
            }
            this.Block = block;
            // to ensure "ordered" is required (not null)
            if (ordered == null)
            {
                throw new ArgumentNullException("ordered is a required property for OrderGraphBlock and cannot be null");
            }
            this.Ordered = ordered;
            // to ensure "placed" is required (not null)
            if (placed == null)
            {
                throw new ArgumentNullException("placed is a required property for OrderGraphBlock and cannot be null");
            }
            this.Placed = placed;
            // to ensure "executed" is required (not null)
            if (executed == null)
            {
                throw new ArgumentNullException("executed is a required property for OrderGraphBlock and cannot be null");
            }
            this.Executed = executed;
            // to ensure "allocated" is required (not null)
            if (allocated == null)
            {
                throw new ArgumentNullException("allocated is a required property for OrderGraphBlock and cannot be null");
            }
            this.Allocated = allocated;
            // to ensure "booked" is required (not null)
            if (booked == null)
            {
                throw new ArgumentNullException("booked is a required property for OrderGraphBlock and cannot be null");
            }
            this.Booked = booked;
            // to ensure "derivedState" is required (not null)
            if (derivedState == null)
            {
                throw new ArgumentNullException("derivedState is a required property for OrderGraphBlock and cannot be null");
            }
            this.DerivedState = derivedState;
            // to ensure "derivedComplianceState" is required (not null)
            if (derivedComplianceState == null)
            {
                throw new ArgumentNullException("derivedComplianceState is a required property for OrderGraphBlock and cannot be null");
            }
            this.DerivedComplianceState = derivedComplianceState;
            // to ensure "derivedApprovalState" is required (not null)
            if (derivedApprovalState == null)
            {
                throw new ArgumentNullException("derivedApprovalState is a required property for OrderGraphBlock and cannot be null");
            }
            this.DerivedApprovalState = derivedApprovalState;
        }

        /// <summary>
        /// Gets or Sets Block
        /// </summary>
        [DataMember(Name = "block", IsRequired = true, EmitDefaultValue = true)]
        public Block Block { get; set; }

        /// <summary>
        /// Gets or Sets Ordered
        /// </summary>
        [DataMember(Name = "ordered", IsRequired = true, EmitDefaultValue = true)]
        public OrderGraphBlockOrderSynopsis Ordered { get; set; }

        /// <summary>
        /// Gets or Sets Placed
        /// </summary>
        [DataMember(Name = "placed", IsRequired = true, EmitDefaultValue = true)]
        public OrderGraphBlockPlacementSynopsis Placed { get; set; }

        /// <summary>
        /// Gets or Sets Executed
        /// </summary>
        [DataMember(Name = "executed", IsRequired = true, EmitDefaultValue = true)]
        public OrderGraphBlockExecutionSynopsis Executed { get; set; }

        /// <summary>
        /// Gets or Sets Allocated
        /// </summary>
        [DataMember(Name = "allocated", IsRequired = true, EmitDefaultValue = true)]
        public OrderGraphBlockAllocationSynopsis Allocated { get; set; }

        /// <summary>
        /// Gets or Sets Booked
        /// </summary>
        [DataMember(Name = "booked", IsRequired = true, EmitDefaultValue = true)]
        public OrderGraphBlockTransactionSynopsis Booked { get; set; }

        /// <summary>
        /// A simple description of the overall state of a block.
        /// </summary>
        /// <value>A simple description of the overall state of a block.</value>
        [DataMember(Name = "derivedState", IsRequired = true, EmitDefaultValue = true)]
        public string DerivedState { get; set; }

        /// <summary>
        /// The overall compliance state of a block, derived from the block&#39;s orders. Possible values are &#39;Pending&#39;, &#39;Failed&#39;, &#39;Manually approved&#39; and &#39;Passed&#39;.
        /// </summary>
        /// <value>The overall compliance state of a block, derived from the block&#39;s orders. Possible values are &#39;Pending&#39;, &#39;Failed&#39;, &#39;Manually approved&#39; and &#39;Passed&#39;.</value>
        [DataMember(Name = "derivedComplianceState", IsRequired = true, EmitDefaultValue = true)]
        public string DerivedComplianceState { get; set; }

        /// <summary>
        /// The overall approval state of a block, derived from approval of the block&#39;s orders. Possible values are &#39;Pending&#39;, &#39;Approved&#39; and &#39;Rejected&#39;.
        /// </summary>
        /// <value>The overall approval state of a block, derived from approval of the block&#39;s orders. Possible values are &#39;Pending&#39;, &#39;Approved&#39; and &#39;Rejected&#39;.</value>
        [DataMember(Name = "derivedApprovalState", IsRequired = true, EmitDefaultValue = true)]
        public string DerivedApprovalState { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class OrderGraphBlock {\n");
            sb.Append("  Block: ").Append(Block).Append("\n");
            sb.Append("  Ordered: ").Append(Ordered).Append("\n");
            sb.Append("  Placed: ").Append(Placed).Append("\n");
            sb.Append("  Executed: ").Append(Executed).Append("\n");
            sb.Append("  Allocated: ").Append(Allocated).Append("\n");
            sb.Append("  Booked: ").Append(Booked).Append("\n");
            sb.Append("  DerivedState: ").Append(DerivedState).Append("\n");
            sb.Append("  DerivedComplianceState: ").Append(DerivedComplianceState).Append("\n");
            sb.Append("  DerivedApprovalState: ").Append(DerivedApprovalState).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as OrderGraphBlock);
        }

        /// <summary>
        /// Returns true if OrderGraphBlock instances are equal
        /// </summary>
        /// <param name="input">Instance of OrderGraphBlock to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OrderGraphBlock input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Block == input.Block ||
                    (this.Block != null &&
                    this.Block.Equals(input.Block))
                ) && 
                (
                    this.Ordered == input.Ordered ||
                    (this.Ordered != null &&
                    this.Ordered.Equals(input.Ordered))
                ) && 
                (
                    this.Placed == input.Placed ||
                    (this.Placed != null &&
                    this.Placed.Equals(input.Placed))
                ) && 
                (
                    this.Executed == input.Executed ||
                    (this.Executed != null &&
                    this.Executed.Equals(input.Executed))
                ) && 
                (
                    this.Allocated == input.Allocated ||
                    (this.Allocated != null &&
                    this.Allocated.Equals(input.Allocated))
                ) && 
                (
                    this.Booked == input.Booked ||
                    (this.Booked != null &&
                    this.Booked.Equals(input.Booked))
                ) && 
                (
                    this.DerivedState == input.DerivedState ||
                    (this.DerivedState != null &&
                    this.DerivedState.Equals(input.DerivedState))
                ) && 
                (
                    this.DerivedComplianceState == input.DerivedComplianceState ||
                    (this.DerivedComplianceState != null &&
                    this.DerivedComplianceState.Equals(input.DerivedComplianceState))
                ) && 
                (
                    this.DerivedApprovalState == input.DerivedApprovalState ||
                    (this.DerivedApprovalState != null &&
                    this.DerivedApprovalState.Equals(input.DerivedApprovalState))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Block != null)
                {
                    hashCode = (hashCode * 59) + this.Block.GetHashCode();
                }
                if (this.Ordered != null)
                {
                    hashCode = (hashCode * 59) + this.Ordered.GetHashCode();
                }
                if (this.Placed != null)
                {
                    hashCode = (hashCode * 59) + this.Placed.GetHashCode();
                }
                if (this.Executed != null)
                {
                    hashCode = (hashCode * 59) + this.Executed.GetHashCode();
                }
                if (this.Allocated != null)
                {
                    hashCode = (hashCode * 59) + this.Allocated.GetHashCode();
                }
                if (this.Booked != null)
                {
                    hashCode = (hashCode * 59) + this.Booked.GetHashCode();
                }
                if (this.DerivedState != null)
                {
                    hashCode = (hashCode * 59) + this.DerivedState.GetHashCode();
                }
                if (this.DerivedComplianceState != null)
                {
                    hashCode = (hashCode * 59) + this.DerivedComplianceState.GetHashCode();
                }
                if (this.DerivedApprovalState != null)
                {
                    hashCode = (hashCode * 59) + this.DerivedApprovalState.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // DerivedState (string) minLength
            if (this.DerivedState != null && this.DerivedState.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for DerivedState, length must be greater than 1.", new [] { "DerivedState" });
            }

            // DerivedComplianceState (string) minLength
            if (this.DerivedComplianceState != null && this.DerivedComplianceState.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for DerivedComplianceState, length must be greater than 1.", new [] { "DerivedComplianceState" });
            }

            // DerivedApprovalState (string) minLength
            if (this.DerivedApprovalState != null && this.DerivedApprovalState.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for DerivedApprovalState, length must be greater than 1.", new [] { "DerivedApprovalState" });
            }

            yield break;
        }
    }
}
