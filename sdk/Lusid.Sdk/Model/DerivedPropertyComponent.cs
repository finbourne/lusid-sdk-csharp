/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Lusid.Sdk.Client.OpenAPIDateConverter;

namespace Lusid.Sdk.Model
{
    /// <summary>
    /// DerivedPropertyComponent
    /// </summary>
    [DataContract(Name = "DerivedPropertyComponent")]
    public partial class DerivedPropertyComponent : IEquatable<DerivedPropertyComponent>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DerivedPropertyComponent" /> class.
        /// </summary>
        /// <param name="component">The component of the formula which is being evaluated..</param>
        /// <param name="type">The type of the formula component. This can be a Literal, Variable, DerivedProperty, or PartialFormula..</param>
        /// <param name="value">value.</param>
        /// <param name="derivationFormula">The derivation formula of the component. This field will only be populated if the component is a derived property..</param>
        /// <param name="subComponents">Any sub-components of this formula. If this formula cannot be further decomposed, this collection will be null..</param>
        /// <param name="links">links.</param>
        public DerivedPropertyComponent(string component = default(string), string type = default(string), PropertyValue value = default(PropertyValue), string derivationFormula = default(string), List<DerivedPropertyComponent> subComponents = default(List<DerivedPropertyComponent>), List<Link> links = default(List<Link>))
        {
            this.Component = component;
            this.Type = type;
            this.Value = value;
            this.DerivationFormula = derivationFormula;
            this.SubComponents = subComponents;
            this.Links = links;
        }

        /// <summary>
        /// The component of the formula which is being evaluated.
        /// </summary>
        /// <value>The component of the formula which is being evaluated.</value>
        [DataMember(Name = "component", EmitDefaultValue = true)]
        public string Component { get; set; }

        /// <summary>
        /// The type of the formula component. This can be a Literal, Variable, DerivedProperty, or PartialFormula.
        /// </summary>
        /// <value>The type of the formula component. This can be a Literal, Variable, DerivedProperty, or PartialFormula.</value>
        [DataMember(Name = "type", EmitDefaultValue = true)]
        public string Type { get; set; }

        /// <summary>
        /// Gets or Sets Value
        /// </summary>
        [DataMember(Name = "value", EmitDefaultValue = false)]
        public PropertyValue Value { get; set; }

        /// <summary>
        /// The derivation formula of the component. This field will only be populated if the component is a derived property.
        /// </summary>
        /// <value>The derivation formula of the component. This field will only be populated if the component is a derived property.</value>
        [DataMember(Name = "derivationFormula", EmitDefaultValue = true)]
        public string DerivationFormula { get; set; }

        /// <summary>
        /// Any sub-components of this formula. If this formula cannot be further decomposed, this collection will be null.
        /// </summary>
        /// <value>Any sub-components of this formula. If this formula cannot be further decomposed, this collection will be null.</value>
        [DataMember(Name = "subComponents", EmitDefaultValue = true)]
        public List<DerivedPropertyComponent> SubComponents { get; set; }

        /// <summary>
        /// Gets or Sets Links
        /// </summary>
        [DataMember(Name = "links", EmitDefaultValue = true)]
        public List<Link> Links { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DerivedPropertyComponent {\n");
            sb.Append("  Component: ").Append(Component).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("  DerivationFormula: ").Append(DerivationFormula).Append("\n");
            sb.Append("  SubComponents: ").Append(SubComponents).Append("\n");
            sb.Append("  Links: ").Append(Links).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DerivedPropertyComponent);
        }

        /// <summary>
        /// Returns true if DerivedPropertyComponent instances are equal
        /// </summary>
        /// <param name="input">Instance of DerivedPropertyComponent to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DerivedPropertyComponent input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Component == input.Component ||
                    (this.Component != null &&
                    this.Component.Equals(input.Component))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.Value == input.Value ||
                    (this.Value != null &&
                    this.Value.Equals(input.Value))
                ) && 
                (
                    this.DerivationFormula == input.DerivationFormula ||
                    (this.DerivationFormula != null &&
                    this.DerivationFormula.Equals(input.DerivationFormula))
                ) && 
                (
                    this.SubComponents == input.SubComponents ||
                    this.SubComponents != null &&
                    input.SubComponents != null &&
                    this.SubComponents.SequenceEqual(input.SubComponents)
                ) && 
                (
                    this.Links == input.Links ||
                    this.Links != null &&
                    input.Links != null &&
                    this.Links.SequenceEqual(input.Links)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Component != null)
                {
                    hashCode = (hashCode * 59) + this.Component.GetHashCode();
                }
                if (this.Type != null)
                {
                    hashCode = (hashCode * 59) + this.Type.GetHashCode();
                }
                if (this.Value != null)
                {
                    hashCode = (hashCode * 59) + this.Value.GetHashCode();
                }
                if (this.DerivationFormula != null)
                {
                    hashCode = (hashCode * 59) + this.DerivationFormula.GetHashCode();
                }
                if (this.SubComponents != null)
                {
                    hashCode = (hashCode * 59) + this.SubComponents.GetHashCode();
                }
                if (this.Links != null)
                {
                    hashCode = (hashCode * 59) + this.Links.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
