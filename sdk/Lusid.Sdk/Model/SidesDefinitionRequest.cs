/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Lusid.Sdk.Client.OpenAPIDateConverter;

namespace Lusid.Sdk.Model
{
    /// <summary>
    /// SidesDefinitionRequest
    /// </summary>
    [DataContract(Name = "SidesDefinitionRequest")]
    public partial class SidesDefinitionRequest : IEquatable<SidesDefinitionRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SidesDefinitionRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected SidesDefinitionRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="SidesDefinitionRequest" /> class.
        /// </summary>
        /// <param name="side">A unique label identifying the side definition. (required).</param>
        /// <param name="sideRequest">sideRequest (required).</param>
        public SidesDefinitionRequest(string side = default(string), SideDefinitionRequest sideRequest = default(SideDefinitionRequest))
        {
            // to ensure "side" is required (not null)
            if (side == null)
            {
                throw new ArgumentNullException("side is a required property for SidesDefinitionRequest and cannot be null");
            }
            this.Side = side;
            // to ensure "sideRequest" is required (not null)
            if (sideRequest == null)
            {
                throw new ArgumentNullException("sideRequest is a required property for SidesDefinitionRequest and cannot be null");
            }
            this.SideRequest = sideRequest;
        }

        /// <summary>
        /// A unique label identifying the side definition.
        /// </summary>
        /// <value>A unique label identifying the side definition.</value>
        [DataMember(Name = "side", IsRequired = true, EmitDefaultValue = true)]
        public string Side { get; set; }

        /// <summary>
        /// Gets or Sets SideRequest
        /// </summary>
        [DataMember(Name = "sideRequest", IsRequired = true, EmitDefaultValue = true)]
        public SideDefinitionRequest SideRequest { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SidesDefinitionRequest {\n");
            sb.Append("  Side: ").Append(Side).Append("\n");
            sb.Append("  SideRequest: ").Append(SideRequest).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SidesDefinitionRequest);
        }

        /// <summary>
        /// Returns true if SidesDefinitionRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of SidesDefinitionRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SidesDefinitionRequest input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Side == input.Side ||
                    (this.Side != null &&
                    this.Side.Equals(input.Side))
                ) && 
                (
                    this.SideRequest == input.SideRequest ||
                    (this.SideRequest != null &&
                    this.SideRequest.Equals(input.SideRequest))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Side != null)
                {
                    hashCode = (hashCode * 59) + this.Side.GetHashCode();
                }
                if (this.SideRequest != null)
                {
                    hashCode = (hashCode * 59) + this.SideRequest.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Side (string) maxLength
            if (this.Side != null && this.Side.Length > 64)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Side, length must be less than 64.", new [] { "Side" });
            }

            // Side (string) minLength
            if (this.Side != null && this.Side.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Side, length must be greater than 1.", new [] { "Side" });
            }

            yield break;
        }
    }
}
