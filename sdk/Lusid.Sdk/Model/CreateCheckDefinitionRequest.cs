/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Lusid.Sdk.Client.OpenAPIDateConverter;

namespace Lusid.Sdk.Model
{
    /// <summary>
    /// CreateCheckDefinitionRequest
    /// </summary>
    [DataContract(Name = "CreateCheckDefinitionRequest")]
    public partial class CreateCheckDefinitionRequest : IEquatable<CreateCheckDefinitionRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateCheckDefinitionRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CreateCheckDefinitionRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateCheckDefinitionRequest" /> class.
        /// </summary>
        /// <param name="id">id (required).</param>
        /// <param name="displayName">The name of the Check Definition. (required).</param>
        /// <param name="description">A description for the Check Definition. (required).</param>
        /// <param name="datasetSchema">datasetSchema.</param>
        /// <param name="ruleSets">A collection of rule sets for the Check Definition. (required).</param>
        /// <param name="properties">A set of properties for the Check Definition..</param>
        public CreateCheckDefinitionRequest(ResourceId id = default(ResourceId), string displayName = default(string), string description = default(string), CheckDefinitionDatasetSchema datasetSchema = default(CheckDefinitionDatasetSchema), List<CheckDefinitionRuleSet> ruleSets = default(List<CheckDefinitionRuleSet>), Dictionary<string, Property> properties = default(Dictionary<string, Property>))
        {
            // to ensure "id" is required (not null)
            if (id == null)
            {
                throw new ArgumentNullException("id is a required property for CreateCheckDefinitionRequest and cannot be null");
            }
            this.Id = id;
            // to ensure "displayName" is required (not null)
            if (displayName == null)
            {
                throw new ArgumentNullException("displayName is a required property for CreateCheckDefinitionRequest and cannot be null");
            }
            this.DisplayName = displayName;
            // to ensure "description" is required (not null)
            if (description == null)
            {
                throw new ArgumentNullException("description is a required property for CreateCheckDefinitionRequest and cannot be null");
            }
            this.Description = description;
            // to ensure "ruleSets" is required (not null)
            if (ruleSets == null)
            {
                throw new ArgumentNullException("ruleSets is a required property for CreateCheckDefinitionRequest and cannot be null");
            }
            this.RuleSets = ruleSets;
            this.DatasetSchema = datasetSchema;
            this.Properties = properties;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = true)]
        public ResourceId Id { get; set; }

        /// <summary>
        /// The name of the Check Definition.
        /// </summary>
        /// <value>The name of the Check Definition.</value>
        [DataMember(Name = "displayName", IsRequired = true, EmitDefaultValue = true)]
        public string DisplayName { get; set; }

        /// <summary>
        /// A description for the Check Definition.
        /// </summary>
        /// <value>A description for the Check Definition.</value>
        [DataMember(Name = "description", IsRequired = true, EmitDefaultValue = true)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets DatasetSchema
        /// </summary>
        [DataMember(Name = "datasetSchema", EmitDefaultValue = false)]
        public CheckDefinitionDatasetSchema DatasetSchema { get; set; }

        /// <summary>
        /// A collection of rule sets for the Check Definition.
        /// </summary>
        /// <value>A collection of rule sets for the Check Definition.</value>
        [DataMember(Name = "ruleSets", IsRequired = true, EmitDefaultValue = true)]
        public List<CheckDefinitionRuleSet> RuleSets { get; set; }

        /// <summary>
        /// A set of properties for the Check Definition.
        /// </summary>
        /// <value>A set of properties for the Check Definition.</value>
        [DataMember(Name = "properties", EmitDefaultValue = true)]
        public Dictionary<string, Property> Properties { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CreateCheckDefinitionRequest {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  DisplayName: ").Append(DisplayName).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  DatasetSchema: ").Append(DatasetSchema).Append("\n");
            sb.Append("  RuleSets: ").Append(RuleSets).Append("\n");
            sb.Append("  Properties: ").Append(Properties).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CreateCheckDefinitionRequest);
        }

        /// <summary>
        /// Returns true if CreateCheckDefinitionRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of CreateCheckDefinitionRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CreateCheckDefinitionRequest input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.DisplayName == input.DisplayName ||
                    (this.DisplayName != null &&
                    this.DisplayName.Equals(input.DisplayName))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.DatasetSchema == input.DatasetSchema ||
                    (this.DatasetSchema != null &&
                    this.DatasetSchema.Equals(input.DatasetSchema))
                ) && 
                (
                    this.RuleSets == input.RuleSets ||
                    this.RuleSets != null &&
                    input.RuleSets != null &&
                    this.RuleSets.SequenceEqual(input.RuleSets)
                ) && 
                (
                    this.Properties == input.Properties ||
                    this.Properties != null &&
                    input.Properties != null &&
                    this.Properties.SequenceEqual(input.Properties)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                {
                    hashCode = (hashCode * 59) + this.Id.GetHashCode();
                }
                if (this.DisplayName != null)
                {
                    hashCode = (hashCode * 59) + this.DisplayName.GetHashCode();
                }
                if (this.Description != null)
                {
                    hashCode = (hashCode * 59) + this.Description.GetHashCode();
                }
                if (this.DatasetSchema != null)
                {
                    hashCode = (hashCode * 59) + this.DatasetSchema.GetHashCode();
                }
                if (this.RuleSets != null)
                {
                    hashCode = (hashCode * 59) + this.RuleSets.GetHashCode();
                }
                if (this.Properties != null)
                {
                    hashCode = (hashCode * 59) + this.Properties.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // DisplayName (string) maxLength
            if (this.DisplayName != null && this.DisplayName.Length > 512)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for DisplayName, length must be less than 512.", new [] { "DisplayName" });
            }

            // DisplayName (string) minLength
            if (this.DisplayName != null && this.DisplayName.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for DisplayName, length must be greater than 0.", new [] { "DisplayName" });
            }

            // DisplayName (string) pattern
            Regex regexDisplayName = new Regex(@"^[\s\S]*$", RegexOptions.CultureInvariant);
            if (false == regexDisplayName.Match(this.DisplayName).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for DisplayName, must match a pattern of " + regexDisplayName, new [] { "DisplayName" });
            }

            // Description (string) maxLength
            if (this.Description != null && this.Description.Length > 512)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Description, length must be less than 512.", new [] { "Description" });
            }

            // Description (string) minLength
            if (this.Description != null && this.Description.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Description, length must be greater than 0.", new [] { "Description" });
            }

            // Description (string) pattern
            Regex regexDescription = new Regex(@"^[\s\S]*$", RegexOptions.CultureInvariant);
            if (false == regexDescription.Match(this.Description).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Description, must match a pattern of " + regexDescription, new [] { "Description" });
            }

            yield break;
        }
    }
}
