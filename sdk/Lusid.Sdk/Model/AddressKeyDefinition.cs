/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Lusid.Sdk.Client.OpenAPIDateConverter;

namespace Lusid.Sdk.Model
{
    /// <summary>
    /// AddressKeyDefinition
    /// </summary>
    [DataContract(Name = "AddressKeyDefinition")]
    public partial class AddressKeyDefinition : IEquatable<AddressKeyDefinition>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AddressKeyDefinition" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected AddressKeyDefinition() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="AddressKeyDefinition" /> class.
        /// </summary>
        /// <param name="addressKey">The address key of the address key definition. (required).</param>
        /// <param name="type">The type of the address key definition (required).</param>
        /// <param name="varVersion">varVersion.</param>
        /// <param name="links">links.</param>
        public AddressKeyDefinition(string addressKey = default(string), string type = default(string), ModelVersion varVersion = default(ModelVersion), List<Link> links = default(List<Link>))
        {
            // to ensure "addressKey" is required (not null)
            if (addressKey == null)
            {
                throw new ArgumentNullException("addressKey is a required property for AddressKeyDefinition and cannot be null");
            }
            this.AddressKey = addressKey;
            // to ensure "type" is required (not null)
            if (type == null)
            {
                throw new ArgumentNullException("type is a required property for AddressKeyDefinition and cannot be null");
            }
            this.Type = type;
            this.VarVersion = varVersion;
            this.Links = links;
        }

        /// <summary>
        /// The address key of the address key definition.
        /// </summary>
        /// <value>The address key of the address key definition.</value>
        [DataMember(Name = "addressKey", IsRequired = true, EmitDefaultValue = true)]
        public string AddressKey { get; set; }

        /// <summary>
        /// The type of the address key definition
        /// </summary>
        /// <value>The type of the address key definition</value>
        [DataMember(Name = "type", IsRequired = true, EmitDefaultValue = true)]
        public string Type { get; set; }

        /// <summary>
        /// Gets or Sets VarVersion
        /// </summary>
        [DataMember(Name = "version", EmitDefaultValue = false)]
        public ModelVersion VarVersion { get; set; }

        /// <summary>
        /// Gets or Sets Links
        /// </summary>
        [DataMember(Name = "links", EmitDefaultValue = true)]
        public List<Link> Links { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AddressKeyDefinition {\n");
            sb.Append("  AddressKey: ").Append(AddressKey).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  VarVersion: ").Append(VarVersion).Append("\n");
            sb.Append("  Links: ").Append(Links).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AddressKeyDefinition);
        }

        /// <summary>
        /// Returns true if AddressKeyDefinition instances are equal
        /// </summary>
        /// <param name="input">Instance of AddressKeyDefinition to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AddressKeyDefinition input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.AddressKey == input.AddressKey ||
                    (this.AddressKey != null &&
                    this.AddressKey.Equals(input.AddressKey))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.VarVersion == input.VarVersion ||
                    (this.VarVersion != null &&
                    this.VarVersion.Equals(input.VarVersion))
                ) && 
                (
                    this.Links == input.Links ||
                    this.Links != null &&
                    input.Links != null &&
                    this.Links.SequenceEqual(input.Links)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AddressKey != null)
                {
                    hashCode = (hashCode * 59) + this.AddressKey.GetHashCode();
                }
                if (this.Type != null)
                {
                    hashCode = (hashCode * 59) + this.Type.GetHashCode();
                }
                if (this.VarVersion != null)
                {
                    hashCode = (hashCode * 59) + this.VarVersion.GetHashCode();
                }
                if (this.Links != null)
                {
                    hashCode = (hashCode * 59) + this.Links.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Type (string) minLength
            if (this.Type != null && this.Type.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Type, length must be greater than 1.", new [] { "Type" });
            }

            yield break;
        }
    }
}
