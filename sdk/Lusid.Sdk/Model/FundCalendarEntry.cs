/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using JsonSubTypes;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Lusid.Sdk.Client.OpenAPIDateConverter;

namespace Lusid.Sdk.Model
{
    /// <summary>
    /// FundCalendarEntry
    /// </summary>
    [DataContract(Name = "FundCalendarEntry")]
    [JsonConverter(typeof(JsonSubtypes), "EntryType")]
    [JsonSubtypes.KnownSubType(typeof(ValuationPointFundCalendarEntry), "ValuationPointFundCalendarEntry")]
    public partial class FundCalendarEntry : IEquatable<FundCalendarEntry>, IValidatableObject
    {
        /// <summary>
        /// The type of the Fund Calendar Entry. Only &#39;ValuationPoint&#39; currently supported. The available values are: ValuationPointFundCalendarEntry
        /// </summary>
        /// <value>The type of the Fund Calendar Entry. Only &#39;ValuationPoint&#39; currently supported. The available values are: ValuationPointFundCalendarEntry</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum EntryTypeEnum
        {
            /// <summary>
            /// Enum ValuationPointFundCalendarEntry for value: ValuationPointFundCalendarEntry
            /// </summary>
            [EnumMember(Value = "ValuationPointFundCalendarEntry")]
            ValuationPointFundCalendarEntry = 1
        }


        /// <summary>
        /// The type of the Fund Calendar Entry. Only &#39;ValuationPoint&#39; currently supported. The available values are: ValuationPointFundCalendarEntry
        /// </summary>
        /// <value>The type of the Fund Calendar Entry. Only &#39;ValuationPoint&#39; currently supported. The available values are: ValuationPointFundCalendarEntry</value>
        [DataMember(Name = "entryType", IsRequired = true, EmitDefaultValue = true)]
        public EntryTypeEnum EntryType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="FundCalendarEntry" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected FundCalendarEntry() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="FundCalendarEntry" /> class.
        /// </summary>
        /// <param name="entryType">The type of the Fund Calendar Entry. Only &#39;ValuationPoint&#39; currently supported. The available values are: ValuationPointFundCalendarEntry (required).</param>
        public FundCalendarEntry(EntryTypeEnum entryType = default(EntryTypeEnum))
        {
            this.EntryType = entryType;
        }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class FundCalendarEntry {\n");
            sb.Append("  EntryType: ").Append(EntryType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as FundCalendarEntry);
        }

        /// <summary>
        /// Returns true if FundCalendarEntry instances are equal
        /// </summary>
        /// <param name="input">Instance of FundCalendarEntry to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FundCalendarEntry input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.EntryType == input.EntryType ||
                    this.EntryType.Equals(input.EntryType)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.EntryType.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            return this.BaseValidate(validationContext);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        protected IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> BaseValidate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
