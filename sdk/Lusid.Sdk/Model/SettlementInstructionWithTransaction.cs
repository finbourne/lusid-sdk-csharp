/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Lusid.Sdk.Client.OpenAPIDateConverter;

namespace Lusid.Sdk.Model
{
    /// <summary>
    /// A Settlement Instruction with its Matched Transaction (if any)
    /// </summary>
    [DataContract(Name = "SettlementInstructionWithTransaction")]
    public partial class SettlementInstructionWithTransaction : IEquatable<SettlementInstructionWithTransaction>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SettlementInstructionWithTransaction" /> class.
        /// </summary>
        /// <param name="settlementInstruction">settlementInstruction.</param>
        /// <param name="matchedTransaction">matchedTransaction.</param>
        public SettlementInstructionWithTransaction(TransactionSettlementInstruction settlementInstruction = default(TransactionSettlementInstruction), OutputTransaction matchedTransaction = default(OutputTransaction))
        {
            this.SettlementInstruction = settlementInstruction;
            this.MatchedTransaction = matchedTransaction;
        }

        /// <summary>
        /// Gets or Sets SettlementInstruction
        /// </summary>
        [DataMember(Name = "settlementInstruction", EmitDefaultValue = false)]
        public TransactionSettlementInstruction SettlementInstruction { get; set; }

        /// <summary>
        /// Gets or Sets MatchedTransaction
        /// </summary>
        [DataMember(Name = "matchedTransaction", EmitDefaultValue = false)]
        public OutputTransaction MatchedTransaction { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SettlementInstructionWithTransaction {\n");
            sb.Append("  SettlementInstruction: ").Append(SettlementInstruction).Append("\n");
            sb.Append("  MatchedTransaction: ").Append(MatchedTransaction).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SettlementInstructionWithTransaction);
        }

        /// <summary>
        /// Returns true if SettlementInstructionWithTransaction instances are equal
        /// </summary>
        /// <param name="input">Instance of SettlementInstructionWithTransaction to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SettlementInstructionWithTransaction input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.SettlementInstruction == input.SettlementInstruction ||
                    (this.SettlementInstruction != null &&
                    this.SettlementInstruction.Equals(input.SettlementInstruction))
                ) && 
                (
                    this.MatchedTransaction == input.MatchedTransaction ||
                    (this.MatchedTransaction != null &&
                    this.MatchedTransaction.Equals(input.MatchedTransaction))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.SettlementInstruction != null)
                {
                    hashCode = (hashCode * 59) + this.SettlementInstruction.GetHashCode();
                }
                if (this.MatchedTransaction != null)
                {
                    hashCode = (hashCode * 59) + this.MatchedTransaction.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
