/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Lusid.Sdk.Client.OpenAPIDateConverter;

namespace Lusid.Sdk.Model
{
    /// <summary>
    /// SettlementInstructionRequest
    /// </summary>
    [DataContract(Name = "SettlementInstructionRequest")]
    public partial class SettlementInstructionRequest : IEquatable<SettlementInstructionRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SettlementInstructionRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected SettlementInstructionRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="SettlementInstructionRequest" /> class.
        /// </summary>
        /// <param name="settlementInstructionId">settlementInstructionId (required).</param>
        /// <param name="transactionId">transactionId (required).</param>
        /// <param name="settlementCategory">settlementCategory (required).</param>
        /// <param name="instructionType">instructionType.</param>
        /// <param name="instrumentIdentifiers">instrumentIdentifiers (required).</param>
        /// <param name="contractualSettlementDate">contractualSettlementDate.</param>
        /// <param name="actualSettlementDate">actualSettlementDate (required).</param>
        /// <param name="units">units (required).</param>
        /// <param name="subHoldingKeyOverrides">subHoldingKeyOverrides.</param>
        /// <param name="custodianAccountOverride">custodianAccountOverride.</param>
        public SettlementInstructionRequest(string settlementInstructionId = default(string), string transactionId = default(string), string settlementCategory = default(string), string instructionType = default(string), Dictionary<string, string> instrumentIdentifiers = default(Dictionary<string, string>), DateTimeOffset? contractualSettlementDate = default(DateTimeOffset?), DateTimeOffset actualSettlementDate = default(DateTimeOffset), decimal units = default(decimal), Dictionary<string, PerpetualProperty> subHoldingKeyOverrides = default(Dictionary<string, PerpetualProperty>), ResourceId custodianAccountOverride = default(ResourceId))
        {
            // to ensure "settlementInstructionId" is required (not null)
            if (settlementInstructionId == null)
            {
                throw new ArgumentNullException("settlementInstructionId is a required property for SettlementInstructionRequest and cannot be null");
            }
            this.SettlementInstructionId = settlementInstructionId;
            // to ensure "transactionId" is required (not null)
            if (transactionId == null)
            {
                throw new ArgumentNullException("transactionId is a required property for SettlementInstructionRequest and cannot be null");
            }
            this.TransactionId = transactionId;
            // to ensure "settlementCategory" is required (not null)
            if (settlementCategory == null)
            {
                throw new ArgumentNullException("settlementCategory is a required property for SettlementInstructionRequest and cannot be null");
            }
            this.SettlementCategory = settlementCategory;
            // to ensure "instrumentIdentifiers" is required (not null)
            if (instrumentIdentifiers == null)
            {
                throw new ArgumentNullException("instrumentIdentifiers is a required property for SettlementInstructionRequest and cannot be null");
            }
            this.InstrumentIdentifiers = instrumentIdentifiers;
            this.ActualSettlementDate = actualSettlementDate;
            this.Units = units;
            this.InstructionType = instructionType;
            this.ContractualSettlementDate = contractualSettlementDate;
            this.SubHoldingKeyOverrides = subHoldingKeyOverrides;
            this.CustodianAccountOverride = custodianAccountOverride;
        }

        /// <summary>
        /// Gets or Sets SettlementInstructionId
        /// </summary>
        [DataMember(Name = "settlementInstructionId", IsRequired = true, EmitDefaultValue = true)]
        public string SettlementInstructionId { get; set; }

        /// <summary>
        /// Gets or Sets TransactionId
        /// </summary>
        [DataMember(Name = "transactionId", IsRequired = true, EmitDefaultValue = true)]
        public string TransactionId { get; set; }

        /// <summary>
        /// Gets or Sets SettlementCategory
        /// </summary>
        [DataMember(Name = "settlementCategory", IsRequired = true, EmitDefaultValue = true)]
        public string SettlementCategory { get; set; }

        /// <summary>
        /// Gets or Sets InstructionType
        /// </summary>
        [DataMember(Name = "instructionType", EmitDefaultValue = true)]
        public string InstructionType { get; set; }

        /// <summary>
        /// Gets or Sets InstrumentIdentifiers
        /// </summary>
        [DataMember(Name = "instrumentIdentifiers", IsRequired = true, EmitDefaultValue = true)]
        public Dictionary<string, string> InstrumentIdentifiers { get; set; }

        /// <summary>
        /// Gets or Sets ContractualSettlementDate
        /// </summary>
        [DataMember(Name = "contractualSettlementDate", EmitDefaultValue = true)]
        public DateTimeOffset? ContractualSettlementDate { get; set; }

        /// <summary>
        /// Gets or Sets ActualSettlementDate
        /// </summary>
        [DataMember(Name = "actualSettlementDate", IsRequired = true, EmitDefaultValue = true)]
        public DateTimeOffset ActualSettlementDate { get; set; }

        /// <summary>
        /// Gets or Sets Units
        /// </summary>
        [DataMember(Name = "units", IsRequired = true, EmitDefaultValue = true)]
        public decimal Units { get; set; }

        /// <summary>
        /// Gets or Sets SubHoldingKeyOverrides
        /// </summary>
        [DataMember(Name = "subHoldingKeyOverrides", EmitDefaultValue = true)]
        public Dictionary<string, PerpetualProperty> SubHoldingKeyOverrides { get; set; }

        /// <summary>
        /// Gets or Sets CustodianAccountOverride
        /// </summary>
        [DataMember(Name = "custodianAccountOverride", EmitDefaultValue = false)]
        public ResourceId CustodianAccountOverride { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SettlementInstructionRequest {\n");
            sb.Append("  SettlementInstructionId: ").Append(SettlementInstructionId).Append("\n");
            sb.Append("  TransactionId: ").Append(TransactionId).Append("\n");
            sb.Append("  SettlementCategory: ").Append(SettlementCategory).Append("\n");
            sb.Append("  InstructionType: ").Append(InstructionType).Append("\n");
            sb.Append("  InstrumentIdentifiers: ").Append(InstrumentIdentifiers).Append("\n");
            sb.Append("  ContractualSettlementDate: ").Append(ContractualSettlementDate).Append("\n");
            sb.Append("  ActualSettlementDate: ").Append(ActualSettlementDate).Append("\n");
            sb.Append("  Units: ").Append(Units).Append("\n");
            sb.Append("  SubHoldingKeyOverrides: ").Append(SubHoldingKeyOverrides).Append("\n");
            sb.Append("  CustodianAccountOverride: ").Append(CustodianAccountOverride).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SettlementInstructionRequest);
        }

        /// <summary>
        /// Returns true if SettlementInstructionRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of SettlementInstructionRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SettlementInstructionRequest input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.SettlementInstructionId == input.SettlementInstructionId ||
                    (this.SettlementInstructionId != null &&
                    this.SettlementInstructionId.Equals(input.SettlementInstructionId))
                ) && 
                (
                    this.TransactionId == input.TransactionId ||
                    (this.TransactionId != null &&
                    this.TransactionId.Equals(input.TransactionId))
                ) && 
                (
                    this.SettlementCategory == input.SettlementCategory ||
                    (this.SettlementCategory != null &&
                    this.SettlementCategory.Equals(input.SettlementCategory))
                ) && 
                (
                    this.InstructionType == input.InstructionType ||
                    (this.InstructionType != null &&
                    this.InstructionType.Equals(input.InstructionType))
                ) && 
                (
                    this.InstrumentIdentifiers == input.InstrumentIdentifiers ||
                    this.InstrumentIdentifiers != null &&
                    input.InstrumentIdentifiers != null &&
                    this.InstrumentIdentifiers.SequenceEqual(input.InstrumentIdentifiers)
                ) && 
                (
                    this.ContractualSettlementDate == input.ContractualSettlementDate ||
                    (this.ContractualSettlementDate != null &&
                    this.ContractualSettlementDate.Equals(input.ContractualSettlementDate))
                ) && 
                (
                    this.ActualSettlementDate == input.ActualSettlementDate ||
                    (this.ActualSettlementDate != null &&
                    this.ActualSettlementDate.Equals(input.ActualSettlementDate))
                ) && 
                (
                    this.Units == input.Units ||
                    this.Units.Equals(input.Units)
                ) && 
                (
                    this.SubHoldingKeyOverrides == input.SubHoldingKeyOverrides ||
                    this.SubHoldingKeyOverrides != null &&
                    input.SubHoldingKeyOverrides != null &&
                    this.SubHoldingKeyOverrides.SequenceEqual(input.SubHoldingKeyOverrides)
                ) && 
                (
                    this.CustodianAccountOverride == input.CustodianAccountOverride ||
                    (this.CustodianAccountOverride != null &&
                    this.CustodianAccountOverride.Equals(input.CustodianAccountOverride))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.SettlementInstructionId != null)
                {
                    hashCode = (hashCode * 59) + this.SettlementInstructionId.GetHashCode();
                }
                if (this.TransactionId != null)
                {
                    hashCode = (hashCode * 59) + this.TransactionId.GetHashCode();
                }
                if (this.SettlementCategory != null)
                {
                    hashCode = (hashCode * 59) + this.SettlementCategory.GetHashCode();
                }
                if (this.InstructionType != null)
                {
                    hashCode = (hashCode * 59) + this.InstructionType.GetHashCode();
                }
                if (this.InstrumentIdentifiers != null)
                {
                    hashCode = (hashCode * 59) + this.InstrumentIdentifiers.GetHashCode();
                }
                if (this.ContractualSettlementDate != null)
                {
                    hashCode = (hashCode * 59) + this.ContractualSettlementDate.GetHashCode();
                }
                if (this.ActualSettlementDate != null)
                {
                    hashCode = (hashCode * 59) + this.ActualSettlementDate.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Units.GetHashCode();
                if (this.SubHoldingKeyOverrides != null)
                {
                    hashCode = (hashCode * 59) + this.SubHoldingKeyOverrides.GetHashCode();
                }
                if (this.CustodianAccountOverride != null)
                {
                    hashCode = (hashCode * 59) + this.CustodianAccountOverride.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // SettlementInstructionId (string) maxLength
            if (this.SettlementInstructionId != null && this.SettlementInstructionId.Length > 64)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SettlementInstructionId, length must be less than 64.", new [] { "SettlementInstructionId" });
            }

            // SettlementInstructionId (string) minLength
            if (this.SettlementInstructionId != null && this.SettlementInstructionId.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SettlementInstructionId, length must be greater than 1.", new [] { "SettlementInstructionId" });
            }

            // TransactionId (string) maxLength
            if (this.TransactionId != null && this.TransactionId.Length > 64)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for TransactionId, length must be less than 64.", new [] { "TransactionId" });
            }

            // TransactionId (string) minLength
            if (this.TransactionId != null && this.TransactionId.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for TransactionId, length must be greater than 1.", new [] { "TransactionId" });
            }

            // SettlementCategory (string) minLength
            if (this.SettlementCategory != null && this.SettlementCategory.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SettlementCategory, length must be greater than 1.", new [] { "SettlementCategory" });
            }

            yield break;
        }
    }
}
