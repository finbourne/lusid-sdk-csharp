/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Lusid.Sdk.Client.OpenAPIDateConverter;

namespace Lusid.Sdk.Model
{
    /// <summary>
    /// A request to create or update a Placement.
    /// </summary>
    [DataContract(Name = "PlacementUpdateRequest")]
    public partial class PlacementUpdateRequest : IEquatable<PlacementUpdateRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PlacementUpdateRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected PlacementUpdateRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="PlacementUpdateRequest" /> class.
        /// </summary>
        /// <param name="id">id (required).</param>
        /// <param name="quantity">The quantity of given instrument ordered. (required).</param>
        /// <param name="properties">Client-defined properties associated with this placement..</param>
        /// <param name="counterparty">Optionally specifies the market entity this placement is placed with..</param>
        /// <param name="executionSystem">Optionally specifies the execution system in use..</param>
        /// <param name="entryType">Optionally specifies the entry type of this placement..</param>
        public PlacementUpdateRequest(ResourceId id = default(ResourceId), decimal quantity = default(decimal), Dictionary<string, PerpetualProperty> properties = default(Dictionary<string, PerpetualProperty>), string counterparty = default(string), string executionSystem = default(string), string entryType = default(string))
        {
            // to ensure "id" is required (not null)
            if (id == null)
            {
                throw new ArgumentNullException("id is a required property for PlacementUpdateRequest and cannot be null");
            }
            this.Id = id;
            this.Quantity = quantity;
            this.Properties = properties;
            this.Counterparty = counterparty;
            this.ExecutionSystem = executionSystem;
            this.EntryType = entryType;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = true)]
        public ResourceId Id { get; set; }

        /// <summary>
        /// The quantity of given instrument ordered.
        /// </summary>
        /// <value>The quantity of given instrument ordered.</value>
        [DataMember(Name = "quantity", IsRequired = true, EmitDefaultValue = true)]
        public decimal Quantity { get; set; }

        /// <summary>
        /// Client-defined properties associated with this placement.
        /// </summary>
        /// <value>Client-defined properties associated with this placement.</value>
        [DataMember(Name = "properties", EmitDefaultValue = true)]
        public Dictionary<string, PerpetualProperty> Properties { get; set; }

        /// <summary>
        /// Optionally specifies the market entity this placement is placed with.
        /// </summary>
        /// <value>Optionally specifies the market entity this placement is placed with.</value>
        [DataMember(Name = "counterparty", EmitDefaultValue = true)]
        public string Counterparty { get; set; }

        /// <summary>
        /// Optionally specifies the execution system in use.
        /// </summary>
        /// <value>Optionally specifies the execution system in use.</value>
        [DataMember(Name = "executionSystem", EmitDefaultValue = true)]
        public string ExecutionSystem { get; set; }

        /// <summary>
        /// Optionally specifies the entry type of this placement.
        /// </summary>
        /// <value>Optionally specifies the entry type of this placement.</value>
        [DataMember(Name = "entryType", EmitDefaultValue = true)]
        public string EntryType { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PlacementUpdateRequest {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Quantity: ").Append(Quantity).Append("\n");
            sb.Append("  Properties: ").Append(Properties).Append("\n");
            sb.Append("  Counterparty: ").Append(Counterparty).Append("\n");
            sb.Append("  ExecutionSystem: ").Append(ExecutionSystem).Append("\n");
            sb.Append("  EntryType: ").Append(EntryType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PlacementUpdateRequest);
        }

        /// <summary>
        /// Returns true if PlacementUpdateRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of PlacementUpdateRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PlacementUpdateRequest input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Quantity == input.Quantity ||
                    this.Quantity.Equals(input.Quantity)
                ) && 
                (
                    this.Properties == input.Properties ||
                    this.Properties != null &&
                    input.Properties != null &&
                    this.Properties.SequenceEqual(input.Properties)
                ) && 
                (
                    this.Counterparty == input.Counterparty ||
                    (this.Counterparty != null &&
                    this.Counterparty.Equals(input.Counterparty))
                ) && 
                (
                    this.ExecutionSystem == input.ExecutionSystem ||
                    (this.ExecutionSystem != null &&
                    this.ExecutionSystem.Equals(input.ExecutionSystem))
                ) && 
                (
                    this.EntryType == input.EntryType ||
                    (this.EntryType != null &&
                    this.EntryType.Equals(input.EntryType))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                {
                    hashCode = (hashCode * 59) + this.Id.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Quantity.GetHashCode();
                if (this.Properties != null)
                {
                    hashCode = (hashCode * 59) + this.Properties.GetHashCode();
                }
                if (this.Counterparty != null)
                {
                    hashCode = (hashCode * 59) + this.Counterparty.GetHashCode();
                }
                if (this.ExecutionSystem != null)
                {
                    hashCode = (hashCode * 59) + this.ExecutionSystem.GetHashCode();
                }
                if (this.EntryType != null)
                {
                    hashCode = (hashCode * 59) + this.EntryType.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // ExecutionSystem (string) maxLength
            if (this.ExecutionSystem != null && this.ExecutionSystem.Length > 256)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ExecutionSystem, length must be less than 256.", new [] { "ExecutionSystem" });
            }

            // ExecutionSystem (string) minLength
            if (this.ExecutionSystem != null && this.ExecutionSystem.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ExecutionSystem, length must be greater than 1.", new [] { "ExecutionSystem" });
            }

            // EntryType (string) maxLength
            if (this.EntryType != null && this.EntryType.Length > 256)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for EntryType, length must be less than 256.", new [] { "EntryType" });
            }

            // EntryType (string) minLength
            if (this.EntryType != null && this.EntryType.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for EntryType, length must be greater than 1.", new [] { "EntryType" });
            }

            yield break;
        }
    }
}
