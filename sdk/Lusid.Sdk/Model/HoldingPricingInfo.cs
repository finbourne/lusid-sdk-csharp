/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Lusid.Sdk.Client.OpenAPIDateConverter;

namespace Lusid.Sdk.Model
{
    /// <summary>
    /// Enables price quotes to be created from Holding fields as either overrides or fallbacks to the Market Data resolution process. For example, we may wish to price an instrument at Cost if Market Data resolution fails. We may also wish to always price Bonds using the LastTradedPrice on the corresponding Holding.
    /// </summary>
    [DataContract(Name = "HoldingPricingInfo")]
    public partial class HoldingPricingInfo : IEquatable<HoldingPricingInfo>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="HoldingPricingInfo" /> class.
        /// </summary>
        /// <param name="fallbackField">The default Holding field to fall back on if the Market Data resolution process fails to find a price quote..</param>
        /// <param name="overrideField">The default Holding field to be used as an override for instrument price quotes. This cannot be specified along with a FallbackField or any SpecificFallbacks, since we&#39;ll never attempt Market Data resolution for price quotes if this field is populated..</param>
        /// <param name="specificFallbacks">Allows a user to specify fallbacks using Holding fields for sources that match a particular DependencySourceFilter..</param>
        /// <param name="specificOverrides">Allows a user to specify overrides using Holding fields for sources that match a particular DependencySourceFilter..</param>
        public HoldingPricingInfo(string fallbackField = default(string), string overrideField = default(string), List<SpecificHoldingPricingInfo> specificFallbacks = default(List<SpecificHoldingPricingInfo>), List<SpecificHoldingPricingInfo> specificOverrides = default(List<SpecificHoldingPricingInfo>))
        {
            this.FallbackField = fallbackField;
            this.OverrideField = overrideField;
            this.SpecificFallbacks = specificFallbacks;
            this.SpecificOverrides = specificOverrides;
        }

        /// <summary>
        /// The default Holding field to fall back on if the Market Data resolution process fails to find a price quote.
        /// </summary>
        /// <value>The default Holding field to fall back on if the Market Data resolution process fails to find a price quote.</value>
        [DataMember(Name = "fallbackField", EmitDefaultValue = true)]
        public string FallbackField { get; set; }

        /// <summary>
        /// The default Holding field to be used as an override for instrument price quotes. This cannot be specified along with a FallbackField or any SpecificFallbacks, since we&#39;ll never attempt Market Data resolution for price quotes if this field is populated.
        /// </summary>
        /// <value>The default Holding field to be used as an override for instrument price quotes. This cannot be specified along with a FallbackField or any SpecificFallbacks, since we&#39;ll never attempt Market Data resolution for price quotes if this field is populated.</value>
        [DataMember(Name = "overrideField", EmitDefaultValue = true)]
        public string OverrideField { get; set; }

        /// <summary>
        /// Allows a user to specify fallbacks using Holding fields for sources that match a particular DependencySourceFilter.
        /// </summary>
        /// <value>Allows a user to specify fallbacks using Holding fields for sources that match a particular DependencySourceFilter.</value>
        [DataMember(Name = "specificFallbacks", EmitDefaultValue = true)]
        public List<SpecificHoldingPricingInfo> SpecificFallbacks { get; set; }

        /// <summary>
        /// Allows a user to specify overrides using Holding fields for sources that match a particular DependencySourceFilter.
        /// </summary>
        /// <value>Allows a user to specify overrides using Holding fields for sources that match a particular DependencySourceFilter.</value>
        [DataMember(Name = "specificOverrides", EmitDefaultValue = true)]
        public List<SpecificHoldingPricingInfo> SpecificOverrides { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class HoldingPricingInfo {\n");
            sb.Append("  FallbackField: ").Append(FallbackField).Append("\n");
            sb.Append("  OverrideField: ").Append(OverrideField).Append("\n");
            sb.Append("  SpecificFallbacks: ").Append(SpecificFallbacks).Append("\n");
            sb.Append("  SpecificOverrides: ").Append(SpecificOverrides).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as HoldingPricingInfo);
        }

        /// <summary>
        /// Returns true if HoldingPricingInfo instances are equal
        /// </summary>
        /// <param name="input">Instance of HoldingPricingInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(HoldingPricingInfo input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.FallbackField == input.FallbackField ||
                    (this.FallbackField != null &&
                    this.FallbackField.Equals(input.FallbackField))
                ) && 
                (
                    this.OverrideField == input.OverrideField ||
                    (this.OverrideField != null &&
                    this.OverrideField.Equals(input.OverrideField))
                ) && 
                (
                    this.SpecificFallbacks == input.SpecificFallbacks ||
                    this.SpecificFallbacks != null &&
                    input.SpecificFallbacks != null &&
                    this.SpecificFallbacks.SequenceEqual(input.SpecificFallbacks)
                ) && 
                (
                    this.SpecificOverrides == input.SpecificOverrides ||
                    this.SpecificOverrides != null &&
                    input.SpecificOverrides != null &&
                    this.SpecificOverrides.SequenceEqual(input.SpecificOverrides)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.FallbackField != null)
                {
                    hashCode = (hashCode * 59) + this.FallbackField.GetHashCode();
                }
                if (this.OverrideField != null)
                {
                    hashCode = (hashCode * 59) + this.OverrideField.GetHashCode();
                }
                if (this.SpecificFallbacks != null)
                {
                    hashCode = (hashCode * 59) + this.SpecificFallbacks.GetHashCode();
                }
                if (this.SpecificOverrides != null)
                {
                    hashCode = (hashCode * 59) + this.SpecificOverrides.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
