/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Lusid.Sdk.Client.OpenAPIDateConverter;

namespace Lusid.Sdk.Model
{
    /// <summary>
    /// Representation of an abstract definition of a flow convention set consisting of currency, tenor and an index name (arbitrary string but likely something like \&quot;IBOR\&quot;).
    /// </summary>
    [DataContract(Name = "FlowConventionName")]
    public partial class FlowConventionName : IEquatable<FlowConventionName>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FlowConventionName" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected FlowConventionName() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="FlowConventionName" /> class.
        /// </summary>
        /// <param name="currency">Currency of the flow convention name. (required).</param>
        /// <param name="indexName">The index, if present, that is required. e.g. \&quot;IBOR\&quot;, \&quot;OIS\&quot; or \&quot;SONIA\&quot;..</param>
        /// <param name="tenor">Tenor for the convention name.    For more information on tenors, see [knowledge base article KA-02097](https://support.lusid.com/knowledgebase/article/KA-02097) (required).</param>
        public FlowConventionName(string currency = default(string), string indexName = default(string), string tenor = default(string))
        {
            // to ensure "currency" is required (not null)
            if (currency == null)
            {
                throw new ArgumentNullException("currency is a required property for FlowConventionName and cannot be null");
            }
            this.Currency = currency;
            // to ensure "tenor" is required (not null)
            if (tenor == null)
            {
                throw new ArgumentNullException("tenor is a required property for FlowConventionName and cannot be null");
            }
            this.Tenor = tenor;
            this.IndexName = indexName;
        }

        /// <summary>
        /// Currency of the flow convention name.
        /// </summary>
        /// <value>Currency of the flow convention name.</value>
        [DataMember(Name = "currency", IsRequired = true, EmitDefaultValue = true)]
        public string Currency { get; set; }

        /// <summary>
        /// The index, if present, that is required. e.g. \&quot;IBOR\&quot;, \&quot;OIS\&quot; or \&quot;SONIA\&quot;.
        /// </summary>
        /// <value>The index, if present, that is required. e.g. \&quot;IBOR\&quot;, \&quot;OIS\&quot; or \&quot;SONIA\&quot;.</value>
        [DataMember(Name = "indexName", EmitDefaultValue = true)]
        public string IndexName { get; set; }

        /// <summary>
        /// Tenor for the convention name.    For more information on tenors, see [knowledge base article KA-02097](https://support.lusid.com/knowledgebase/article/KA-02097)
        /// </summary>
        /// <value>Tenor for the convention name.    For more information on tenors, see [knowledge base article KA-02097](https://support.lusid.com/knowledgebase/article/KA-02097)</value>
        [DataMember(Name = "tenor", IsRequired = true, EmitDefaultValue = true)]
        public string Tenor { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class FlowConventionName {\n");
            sb.Append("  Currency: ").Append(Currency).Append("\n");
            sb.Append("  IndexName: ").Append(IndexName).Append("\n");
            sb.Append("  Tenor: ").Append(Tenor).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as FlowConventionName);
        }

        /// <summary>
        /// Returns true if FlowConventionName instances are equal
        /// </summary>
        /// <param name="input">Instance of FlowConventionName to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FlowConventionName input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Currency == input.Currency ||
                    (this.Currency != null &&
                    this.Currency.Equals(input.Currency))
                ) && 
                (
                    this.IndexName == input.IndexName ||
                    (this.IndexName != null &&
                    this.IndexName.Equals(input.IndexName))
                ) && 
                (
                    this.Tenor == input.Tenor ||
                    (this.Tenor != null &&
                    this.Tenor.Equals(input.Tenor))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Currency != null)
                {
                    hashCode = (hashCode * 59) + this.Currency.GetHashCode();
                }
                if (this.IndexName != null)
                {
                    hashCode = (hashCode * 59) + this.IndexName.GetHashCode();
                }
                if (this.Tenor != null)
                {
                    hashCode = (hashCode * 59) + this.Tenor.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Tenor (string) minLength
            if (this.Tenor != null && this.Tenor.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Tenor, length must be greater than 1.", new [] { "Tenor" });
            }

            yield break;
        }
    }
}
