/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using JsonSubTypes;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Lusid.Sdk.Client.OpenAPIDateConverter;

namespace Lusid.Sdk.Model
{
    /// <summary>
    /// Definition of a credit event for credit default swap index (CDX) instruments.
    /// </summary>
    [DataContract(Name = "CdxCreditEvent")]
    [JsonConverter(typeof(JsonSubtypes), "InstrumentEventType")]
    public partial class CdxCreditEvent : InstrumentEvent, IEquatable<CdxCreditEvent>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CdxCreditEvent" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CdxCreditEvent() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CdxCreditEvent" /> class.
        /// </summary>
        /// <param name="effectiveDate">The date of the credit default - i.e. date on which the debt issuer defaulted on its repayment obligation. (required).</param>
        /// <param name="auctionDate">The date of the credit event auction - i.e. date on which the defaulted debt is sold via auction, and a recovery rate determined..</param>
        /// <param name="recoveryRate">The fraction of the defaulted debt that can be recovered..</param>
        /// <param name="constituentWeight">The relative weight of the CDX constituent. (required).</param>
        /// <param name="constituentReference">Reference value used to identify the CDX constituent..</param>
        /// <param name="instrumentEventType">The Type of Event. The available values are: TransitionEvent, InformationalEvent, OpenEvent, CloseEvent, StockSplitEvent, BondDefaultEvent, CashDividendEvent, AmortisationEvent, CashFlowEvent, ExerciseEvent, ResetEvent, TriggerEvent, RawVendorEvent, InformationalErrorEvent, BondCouponEvent, DividendReinvestmentEvent, AccumulationEvent, BondPrincipalEvent, DividendOptionEvent, MaturityEvent, FxForwardSettlementEvent, ExpiryEvent, ScripDividendEvent, StockDividendEvent, ReverseStockSplitEvent, CapitalDistributionEvent, SpinOffEvent, MergerEvent, FutureExpiryEvent, SwapCashFlowEvent, SwapPrincipalEvent, CreditPremiumCashFlowEvent, CdsCreditEvent, CdxCreditEvent, MbsCouponEvent, MbsPrincipalEvent, BonusIssueEvent, MbsPrincipalWriteOffEvent, MbsInterestDeferralEvent, MbsInterestShortfallEvent, TenderEvent, CallOnIntermediateSecuritiesEvent, IntermediateSecuritiesDistributionEvent, OptionExercisePhysicalEvent, OptionExerciseCashEvent, ProtectionPayoutCashFlowEvent, TermDepositInterestEvent, TermDepositPrincipalEvent, EarlyRedemptionEvent (required) (default to &quot;CdxCreditEvent&quot;).</param>
        public CdxCreditEvent(DateTimeOffset effectiveDate = default(DateTimeOffset), DateTimeOffset? auctionDate = default(DateTimeOffset?), decimal? recoveryRate = default(decimal?), decimal constituentWeight = default(decimal), string constituentReference = default(string), InstrumentEventTypeEnum instrumentEventType = default(InstrumentEventTypeEnum)) : base(instrumentEventType)
        {
            this.EffectiveDate = effectiveDate;
            this.ConstituentWeight = constituentWeight;
            this.AuctionDate = auctionDate;
            this.RecoveryRate = recoveryRate;
            this.ConstituentReference = constituentReference;
        }

        /// <summary>
        /// The date of the credit default - i.e. date on which the debt issuer defaulted on its repayment obligation.
        /// </summary>
        /// <value>The date of the credit default - i.e. date on which the debt issuer defaulted on its repayment obligation.</value>
        [DataMember(Name = "effectiveDate", IsRequired = true, EmitDefaultValue = true)]
        public DateTimeOffset EffectiveDate { get; set; }

        /// <summary>
        /// The date of the credit event auction - i.e. date on which the defaulted debt is sold via auction, and a recovery rate determined.
        /// </summary>
        /// <value>The date of the credit event auction - i.e. date on which the defaulted debt is sold via auction, and a recovery rate determined.</value>
        [DataMember(Name = "auctionDate", EmitDefaultValue = true)]
        public DateTimeOffset? AuctionDate { get; set; }

        /// <summary>
        /// The fraction of the defaulted debt that can be recovered.
        /// </summary>
        /// <value>The fraction of the defaulted debt that can be recovered.</value>
        [DataMember(Name = "recoveryRate", EmitDefaultValue = true)]
        public decimal? RecoveryRate { get; set; }

        /// <summary>
        /// The relative weight of the CDX constituent.
        /// </summary>
        /// <value>The relative weight of the CDX constituent.</value>
        [DataMember(Name = "constituentWeight", IsRequired = true, EmitDefaultValue = true)]
        public decimal ConstituentWeight { get; set; }

        /// <summary>
        /// Reference value used to identify the CDX constituent.
        /// </summary>
        /// <value>Reference value used to identify the CDX constituent.</value>
        [DataMember(Name = "constituentReference", EmitDefaultValue = true)]
        public string ConstituentReference { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CdxCreditEvent {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  EffectiveDate: ").Append(EffectiveDate).Append("\n");
            sb.Append("  AuctionDate: ").Append(AuctionDate).Append("\n");
            sb.Append("  RecoveryRate: ").Append(RecoveryRate).Append("\n");
            sb.Append("  ConstituentWeight: ").Append(ConstituentWeight).Append("\n");
            sb.Append("  ConstituentReference: ").Append(ConstituentReference).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CdxCreditEvent);
        }

        /// <summary>
        /// Returns true if CdxCreditEvent instances are equal
        /// </summary>
        /// <param name="input">Instance of CdxCreditEvent to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CdxCreditEvent input)
        {
            if (input == null)
            {
                return false;
            }
            return base.Equals(input) && 
                (
                    this.EffectiveDate == input.EffectiveDate ||
                    (this.EffectiveDate != null &&
                    this.EffectiveDate.Equals(input.EffectiveDate))
                ) && base.Equals(input) && 
                (
                    this.AuctionDate == input.AuctionDate ||
                    (this.AuctionDate != null &&
                    this.AuctionDate.Equals(input.AuctionDate))
                ) && base.Equals(input) && 
                (
                    this.RecoveryRate == input.RecoveryRate ||
                    (this.RecoveryRate != null &&
                    this.RecoveryRate.Equals(input.RecoveryRate))
                ) && base.Equals(input) && 
                (
                    this.ConstituentWeight == input.ConstituentWeight ||
                    this.ConstituentWeight.Equals(input.ConstituentWeight)
                ) && base.Equals(input) && 
                (
                    this.ConstituentReference == input.ConstituentReference ||
                    (this.ConstituentReference != null &&
                    this.ConstituentReference.Equals(input.ConstituentReference))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = base.GetHashCode();
                if (this.EffectiveDate != null)
                {
                    hashCode = (hashCode * 59) + this.EffectiveDate.GetHashCode();
                }
                if (this.AuctionDate != null)
                {
                    hashCode = (hashCode * 59) + this.AuctionDate.GetHashCode();
                }
                if (this.RecoveryRate != null)
                {
                    hashCode = (hashCode * 59) + this.RecoveryRate.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.ConstituentWeight.GetHashCode();
                if (this.ConstituentReference != null)
                {
                    hashCode = (hashCode * 59) + this.ConstituentReference.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            return this.BaseValidate(validationContext);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        protected IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> BaseValidate(ValidationContext validationContext)
        {
            foreach (var x in base.BaseValidate(validationContext))
            {
                yield return x;
            }
            yield break;
        }
    }
}
