/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using JsonSubTypes;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Lusid.Sdk.Client.OpenAPIDateConverter;

namespace Lusid.Sdk.Model
{
    /// <summary>
    /// Loan Facility. This is a very lightweight instrument which acts as a placeholder for the events occurring within  the related facility Portfolio. This Portfolio is identified by its Scope and Code, which is recorded on the  instrument definition. The instrument acts as an agreement between a single borrower and many lenders (investors).  Several contracts may be drawn up to enable the lending of funds to the borrower. These contracts are modelled via  FlexibleLoan instruments in LUSID. The events occurring within the linked Portfolio may be related  to the facility as a whole (for example to define a global commitment amount), or they may relate to a single  contract (such as a paydown transaction on a particular contract).
    /// </summary>
    [DataContract(Name = "LoanFacility")]
    [JsonConverter(typeof(JsonSubtypes), "InstrumentType")]
    public partial class LoanFacility : LusidInstrument, IEquatable<LoanFacility>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LoanFacility" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected LoanFacility() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="LoanFacility" /> class.
        /// </summary>
        /// <param name="startDate">The start date of the instrument. This is normally synonymous with the trade-date. (required).</param>
        /// <param name="domCcy">The domestic currency of the instrument. (required).</param>
        /// <param name="facilityPortfolioScope">The Scope of the Transaction Portfolio to which the Loan Facility instrument is linked. (required).</param>
        /// <param name="facilityPortfolioCode">The Code of the Transaction Portfolio to which the Loan Facility instrument is linked. (required).</param>
        /// <param name="instrumentType">The available values are: QuotedSecurity, InterestRateSwap, FxForward, Future, ExoticInstrument, FxOption, CreditDefaultSwap, InterestRateSwaption, Bond, EquityOption, FixedLeg, FloatingLeg, BespokeCashFlowsLeg, Unknown, TermDeposit, ContractForDifference, EquitySwap, CashPerpetual, CapFloor, CashSettled, CdsIndex, Basket, FundingLeg, FxSwap, ForwardRateAgreement, SimpleInstrument, Repo, Equity, ExchangeTradedOption, ReferenceInstrument, ComplexBond, InflationLinkedBond, InflationSwap, SimpleCashFlowLoan, TotalReturnSwap, InflationLeg, FundShareClass, FlexibleLoan, UnsettledCash, Cash, MasteredInstrument, LoanFacility, FlexibleDeposit (required) (default to &quot;LoanFacility&quot;).</param>
        public LoanFacility(DateTimeOffset startDate = default(DateTimeOffset), string domCcy = default(string), string facilityPortfolioScope = default(string), string facilityPortfolioCode = default(string), InstrumentTypeEnum instrumentType = default(InstrumentTypeEnum)) : base(instrumentType)
        {
            this.StartDate = startDate;
            // to ensure "domCcy" is required (not null)
            if (domCcy == null)
            {
                throw new ArgumentNullException("domCcy is a required property for LoanFacility and cannot be null");
            }
            this.DomCcy = domCcy;
            // to ensure "facilityPortfolioScope" is required (not null)
            if (facilityPortfolioScope == null)
            {
                throw new ArgumentNullException("facilityPortfolioScope is a required property for LoanFacility and cannot be null");
            }
            this.FacilityPortfolioScope = facilityPortfolioScope;
            // to ensure "facilityPortfolioCode" is required (not null)
            if (facilityPortfolioCode == null)
            {
                throw new ArgumentNullException("facilityPortfolioCode is a required property for LoanFacility and cannot be null");
            }
            this.FacilityPortfolioCode = facilityPortfolioCode;
        }

        /// <summary>
        /// The start date of the instrument. This is normally synonymous with the trade-date.
        /// </summary>
        /// <value>The start date of the instrument. This is normally synonymous with the trade-date.</value>
        [DataMember(Name = "startDate", IsRequired = true, EmitDefaultValue = true)]
        public DateTimeOffset StartDate { get; set; }

        /// <summary>
        /// The domestic currency of the instrument.
        /// </summary>
        /// <value>The domestic currency of the instrument.</value>
        [DataMember(Name = "domCcy", IsRequired = true, EmitDefaultValue = true)]
        public string DomCcy { get; set; }

        /// <summary>
        /// The Scope of the Transaction Portfolio to which the Loan Facility instrument is linked.
        /// </summary>
        /// <value>The Scope of the Transaction Portfolio to which the Loan Facility instrument is linked.</value>
        [DataMember(Name = "facilityPortfolioScope", IsRequired = true, EmitDefaultValue = true)]
        public string FacilityPortfolioScope { get; set; }

        /// <summary>
        /// The Code of the Transaction Portfolio to which the Loan Facility instrument is linked.
        /// </summary>
        /// <value>The Code of the Transaction Portfolio to which the Loan Facility instrument is linked.</value>
        [DataMember(Name = "facilityPortfolioCode", IsRequired = true, EmitDefaultValue = true)]
        public string FacilityPortfolioCode { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class LoanFacility {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  StartDate: ").Append(StartDate).Append("\n");
            sb.Append("  DomCcy: ").Append(DomCcy).Append("\n");
            sb.Append("  FacilityPortfolioScope: ").Append(FacilityPortfolioScope).Append("\n");
            sb.Append("  FacilityPortfolioCode: ").Append(FacilityPortfolioCode).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as LoanFacility);
        }

        /// <summary>
        /// Returns true if LoanFacility instances are equal
        /// </summary>
        /// <param name="input">Instance of LoanFacility to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LoanFacility input)
        {
            if (input == null)
            {
                return false;
            }
            return base.Equals(input) && 
                (
                    this.StartDate == input.StartDate ||
                    (this.StartDate != null &&
                    this.StartDate.Equals(input.StartDate))
                ) && base.Equals(input) && 
                (
                    this.DomCcy == input.DomCcy ||
                    (this.DomCcy != null &&
                    this.DomCcy.Equals(input.DomCcy))
                ) && base.Equals(input) && 
                (
                    this.FacilityPortfolioScope == input.FacilityPortfolioScope ||
                    (this.FacilityPortfolioScope != null &&
                    this.FacilityPortfolioScope.Equals(input.FacilityPortfolioScope))
                ) && base.Equals(input) && 
                (
                    this.FacilityPortfolioCode == input.FacilityPortfolioCode ||
                    (this.FacilityPortfolioCode != null &&
                    this.FacilityPortfolioCode.Equals(input.FacilityPortfolioCode))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = base.GetHashCode();
                if (this.StartDate != null)
                {
                    hashCode = (hashCode * 59) + this.StartDate.GetHashCode();
                }
                if (this.DomCcy != null)
                {
                    hashCode = (hashCode * 59) + this.DomCcy.GetHashCode();
                }
                if (this.FacilityPortfolioScope != null)
                {
                    hashCode = (hashCode * 59) + this.FacilityPortfolioScope.GetHashCode();
                }
                if (this.FacilityPortfolioCode != null)
                {
                    hashCode = (hashCode * 59) + this.FacilityPortfolioCode.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            return this.BaseValidate(validationContext);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        protected IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> BaseValidate(ValidationContext validationContext)
        {
            foreach (var x in base.BaseValidate(validationContext))
            {
                yield return x;
            }
            // FacilityPortfolioScope (string) maxLength
            if (this.FacilityPortfolioScope != null && this.FacilityPortfolioScope.Length > 256)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for FacilityPortfolioScope, length must be less than 256.", new [] { "FacilityPortfolioScope" });
            }

            // FacilityPortfolioScope (string) minLength
            if (this.FacilityPortfolioScope != null && this.FacilityPortfolioScope.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for FacilityPortfolioScope, length must be greater than 0.", new [] { "FacilityPortfolioScope" });
            }

            // FacilityPortfolioCode (string) maxLength
            if (this.FacilityPortfolioCode != null && this.FacilityPortfolioCode.Length > 256)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for FacilityPortfolioCode, length must be less than 256.", new [] { "FacilityPortfolioCode" });
            }

            // FacilityPortfolioCode (string) minLength
            if (this.FacilityPortfolioCode != null && this.FacilityPortfolioCode.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for FacilityPortfolioCode, length must be greater than 0.", new [] { "FacilityPortfolioCode" });
            }

            yield break;
        }
    }
}
