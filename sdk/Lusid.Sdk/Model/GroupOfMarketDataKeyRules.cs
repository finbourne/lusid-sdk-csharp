/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Lusid.Sdk.Client.OpenAPIDateConverter;

namespace Lusid.Sdk.Model
{
    /// <summary>
    /// Represents a collection of MarketDataKeyRules that should be resolved together when resolving market data.  That is, market data resolution will always attempt to resolve with all rules in the group  before deciding what market data to return.
    /// </summary>
    [DataContract(Name = "GroupOfMarketDataKeyRules")]
    public partial class GroupOfMarketDataKeyRules : IEquatable<GroupOfMarketDataKeyRules>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GroupOfMarketDataKeyRules" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected GroupOfMarketDataKeyRules() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="GroupOfMarketDataKeyRules" /> class.
        /// </summary>
        /// <param name="marketDataKeyRuleGroupOperation">The operation that will be used to process the collection of market data items and failures found on resolution  into a single market data item or failure to be used.  Supported values: [FirstLatest, AverageOfQuotesFound, AverageOfAllQuotes, FirstMinimum, FirstMaximum] (required).</param>
        /// <param name="marketRules">The rules that should be grouped together in market data resolution. (required).</param>
        public GroupOfMarketDataKeyRules(string marketDataKeyRuleGroupOperation = default(string), List<MarketDataKeyRule> marketRules = default(List<MarketDataKeyRule>))
        {
            // to ensure "marketDataKeyRuleGroupOperation" is required (not null)
            if (marketDataKeyRuleGroupOperation == null)
            {
                throw new ArgumentNullException("marketDataKeyRuleGroupOperation is a required property for GroupOfMarketDataKeyRules and cannot be null");
            }
            this.MarketDataKeyRuleGroupOperation = marketDataKeyRuleGroupOperation;
            // to ensure "marketRules" is required (not null)
            if (marketRules == null)
            {
                throw new ArgumentNullException("marketRules is a required property for GroupOfMarketDataKeyRules and cannot be null");
            }
            this.MarketRules = marketRules;
        }

        /// <summary>
        /// The operation that will be used to process the collection of market data items and failures found on resolution  into a single market data item or failure to be used.  Supported values: [FirstLatest, AverageOfQuotesFound, AverageOfAllQuotes, FirstMinimum, FirstMaximum]
        /// </summary>
        /// <value>The operation that will be used to process the collection of market data items and failures found on resolution  into a single market data item or failure to be used.  Supported values: [FirstLatest, AverageOfQuotesFound, AverageOfAllQuotes, FirstMinimum, FirstMaximum]</value>
        [DataMember(Name = "marketDataKeyRuleGroupOperation", IsRequired = true, EmitDefaultValue = true)]
        public string MarketDataKeyRuleGroupOperation { get; set; }

        /// <summary>
        /// The rules that should be grouped together in market data resolution.
        /// </summary>
        /// <value>The rules that should be grouped together in market data resolution.</value>
        [DataMember(Name = "marketRules", IsRequired = true, EmitDefaultValue = true)]
        public List<MarketDataKeyRule> MarketRules { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class GroupOfMarketDataKeyRules {\n");
            sb.Append("  MarketDataKeyRuleGroupOperation: ").Append(MarketDataKeyRuleGroupOperation).Append("\n");
            sb.Append("  MarketRules: ").Append(MarketRules).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GroupOfMarketDataKeyRules);
        }

        /// <summary>
        /// Returns true if GroupOfMarketDataKeyRules instances are equal
        /// </summary>
        /// <param name="input">Instance of GroupOfMarketDataKeyRules to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GroupOfMarketDataKeyRules input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.MarketDataKeyRuleGroupOperation == input.MarketDataKeyRuleGroupOperation ||
                    (this.MarketDataKeyRuleGroupOperation != null &&
                    this.MarketDataKeyRuleGroupOperation.Equals(input.MarketDataKeyRuleGroupOperation))
                ) && 
                (
                    this.MarketRules == input.MarketRules ||
                    this.MarketRules != null &&
                    input.MarketRules != null &&
                    this.MarketRules.SequenceEqual(input.MarketRules)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.MarketDataKeyRuleGroupOperation != null)
                {
                    hashCode = (hashCode * 59) + this.MarketDataKeyRuleGroupOperation.GetHashCode();
                }
                if (this.MarketRules != null)
                {
                    hashCode = (hashCode * 59) + this.MarketRules.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // MarketDataKeyRuleGroupOperation (string) minLength
            if (this.MarketDataKeyRuleGroupOperation != null && this.MarketDataKeyRuleGroupOperation.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for MarketDataKeyRuleGroupOperation, length must be greater than 1.", new [] { "MarketDataKeyRuleGroupOperation" });
            }

            yield break;
        }
    }
}
