/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Lusid.Sdk.Client.OpenAPIDateConverter;

namespace Lusid.Sdk.Model
{
    /// <summary>
    /// The request used to create a Fund.
    /// </summary>
    [DataContract(Name = "FundDefinitionRequest")]
    public partial class FundDefinitionRequest : IEquatable<FundDefinitionRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FundDefinitionRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected FundDefinitionRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="FundDefinitionRequest" /> class.
        /// </summary>
        /// <param name="code">The code given for the Fund. (required).</param>
        /// <param name="displayName">The name of the Fund. (required).</param>
        /// <param name="description">A description for the Fund..</param>
        /// <param name="baseCurrency">The base currency of the Fund in ISO 4217 currency code format. All portfolios must be of a matching base currency. (required).</param>
        /// <param name="portfolioIds">A list of the Portfolio IDs associated with the fund, which are part of the Fund. Note: These must all have the same base currency, which must also much the Fund Base Currency. (required).</param>
        /// <param name="fundConfigurationId">fundConfigurationId (required).</param>
        /// <param name="shareClassInstrumentScopes">The scopes in which the instruments lie, currently limited to one..</param>
        /// <param name="shareClassInstruments">Details the user-provided instrument identifiers and the instrument resolved from them..</param>
        /// <param name="type">The type of fund; &#39;Standalone&#39;, &#39;Master&#39; or &#39;Feeder&#39; (required).</param>
        /// <param name="inceptionDate">Inception date of the Fund (required).</param>
        /// <param name="decimalPlaces">Number of decimal places for reporting.</param>
        /// <param name="primaryNavType">primaryNavType (required).</param>
        /// <param name="additionalNavTypes">The definitions for any additional NAVs on the Fund..</param>
        /// <param name="properties">A set of properties for the Fund..</param>
        public FundDefinitionRequest(string code = default(string), string displayName = default(string), string description = default(string), string baseCurrency = default(string), List<PortfolioEntityId> portfolioIds = default(List<PortfolioEntityId>), ResourceId fundConfigurationId = default(ResourceId), List<string> shareClassInstrumentScopes = default(List<string>), List<InstrumentResolutionDetail> shareClassInstruments = default(List<InstrumentResolutionDetail>), string type = default(string), DateTimeOffset inceptionDate = default(DateTimeOffset), int? decimalPlaces = default(int?), NavTypeDefinition primaryNavType = default(NavTypeDefinition), List<NavTypeDefinition> additionalNavTypes = default(List<NavTypeDefinition>), Dictionary<string, Property> properties = default(Dictionary<string, Property>))
        {
            // to ensure "code" is required (not null)
            if (code == null)
            {
                throw new ArgumentNullException("code is a required property for FundDefinitionRequest and cannot be null");
            }
            this.Code = code;
            // to ensure "displayName" is required (not null)
            if (displayName == null)
            {
                throw new ArgumentNullException("displayName is a required property for FundDefinitionRequest and cannot be null");
            }
            this.DisplayName = displayName;
            // to ensure "baseCurrency" is required (not null)
            if (baseCurrency == null)
            {
                throw new ArgumentNullException("baseCurrency is a required property for FundDefinitionRequest and cannot be null");
            }
            this.BaseCurrency = baseCurrency;
            // to ensure "portfolioIds" is required (not null)
            if (portfolioIds == null)
            {
                throw new ArgumentNullException("portfolioIds is a required property for FundDefinitionRequest and cannot be null");
            }
            this.PortfolioIds = portfolioIds;
            // to ensure "fundConfigurationId" is required (not null)
            if (fundConfigurationId == null)
            {
                throw new ArgumentNullException("fundConfigurationId is a required property for FundDefinitionRequest and cannot be null");
            }
            this.FundConfigurationId = fundConfigurationId;
            // to ensure "type" is required (not null)
            if (type == null)
            {
                throw new ArgumentNullException("type is a required property for FundDefinitionRequest and cannot be null");
            }
            this.Type = type;
            this.InceptionDate = inceptionDate;
            // to ensure "primaryNavType" is required (not null)
            if (primaryNavType == null)
            {
                throw new ArgumentNullException("primaryNavType is a required property for FundDefinitionRequest and cannot be null");
            }
            this.PrimaryNavType = primaryNavType;
            this.Description = description;
            this.ShareClassInstrumentScopes = shareClassInstrumentScopes;
            this.ShareClassInstruments = shareClassInstruments;
            this.DecimalPlaces = decimalPlaces;
            this.AdditionalNavTypes = additionalNavTypes;
            this.Properties = properties;
        }

        /// <summary>
        /// The code given for the Fund.
        /// </summary>
        /// <value>The code given for the Fund.</value>
        [DataMember(Name = "code", IsRequired = true, EmitDefaultValue = true)]
        public string Code { get; set; }

        /// <summary>
        /// The name of the Fund.
        /// </summary>
        /// <value>The name of the Fund.</value>
        [DataMember(Name = "displayName", IsRequired = true, EmitDefaultValue = true)]
        public string DisplayName { get; set; }

        /// <summary>
        /// A description for the Fund.
        /// </summary>
        /// <value>A description for the Fund.</value>
        [DataMember(Name = "description", EmitDefaultValue = true)]
        public string Description { get; set; }

        /// <summary>
        /// The base currency of the Fund in ISO 4217 currency code format. All portfolios must be of a matching base currency.
        /// </summary>
        /// <value>The base currency of the Fund in ISO 4217 currency code format. All portfolios must be of a matching base currency.</value>
        [DataMember(Name = "baseCurrency", IsRequired = true, EmitDefaultValue = true)]
        public string BaseCurrency { get; set; }

        /// <summary>
        /// A list of the Portfolio IDs associated with the fund, which are part of the Fund. Note: These must all have the same base currency, which must also much the Fund Base Currency.
        /// </summary>
        /// <value>A list of the Portfolio IDs associated with the fund, which are part of the Fund. Note: These must all have the same base currency, which must also much the Fund Base Currency.</value>
        [DataMember(Name = "portfolioIds", IsRequired = true, EmitDefaultValue = true)]
        public List<PortfolioEntityId> PortfolioIds { get; set; }

        /// <summary>
        /// Gets or Sets FundConfigurationId
        /// </summary>
        [DataMember(Name = "fundConfigurationId", IsRequired = true, EmitDefaultValue = true)]
        public ResourceId FundConfigurationId { get; set; }

        /// <summary>
        /// The scopes in which the instruments lie, currently limited to one.
        /// </summary>
        /// <value>The scopes in which the instruments lie, currently limited to one.</value>
        [DataMember(Name = "shareClassInstrumentScopes", EmitDefaultValue = true)]
        public List<string> ShareClassInstrumentScopes { get; set; }

        /// <summary>
        /// Details the user-provided instrument identifiers and the instrument resolved from them.
        /// </summary>
        /// <value>Details the user-provided instrument identifiers and the instrument resolved from them.</value>
        [DataMember(Name = "shareClassInstruments", EmitDefaultValue = true)]
        public List<InstrumentResolutionDetail> ShareClassInstruments { get; set; }

        /// <summary>
        /// The type of fund; &#39;Standalone&#39;, &#39;Master&#39; or &#39;Feeder&#39;
        /// </summary>
        /// <value>The type of fund; &#39;Standalone&#39;, &#39;Master&#39; or &#39;Feeder&#39;</value>
        [DataMember(Name = "type", IsRequired = true, EmitDefaultValue = true)]
        public string Type { get; set; }

        /// <summary>
        /// Inception date of the Fund
        /// </summary>
        /// <value>Inception date of the Fund</value>
        [DataMember(Name = "inceptionDate", IsRequired = true, EmitDefaultValue = true)]
        public DateTimeOffset InceptionDate { get; set; }

        /// <summary>
        /// Number of decimal places for reporting
        /// </summary>
        /// <value>Number of decimal places for reporting</value>
        [DataMember(Name = "decimalPlaces", EmitDefaultValue = true)]
        public int? DecimalPlaces { get; set; }

        /// <summary>
        /// Gets or Sets PrimaryNavType
        /// </summary>
        [DataMember(Name = "primaryNavType", IsRequired = true, EmitDefaultValue = true)]
        public NavTypeDefinition PrimaryNavType { get; set; }

        /// <summary>
        /// The definitions for any additional NAVs on the Fund.
        /// </summary>
        /// <value>The definitions for any additional NAVs on the Fund.</value>
        [DataMember(Name = "additionalNavTypes", EmitDefaultValue = true)]
        public List<NavTypeDefinition> AdditionalNavTypes { get; set; }

        /// <summary>
        /// A set of properties for the Fund.
        /// </summary>
        /// <value>A set of properties for the Fund.</value>
        [DataMember(Name = "properties", EmitDefaultValue = true)]
        public Dictionary<string, Property> Properties { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class FundDefinitionRequest {\n");
            sb.Append("  Code: ").Append(Code).Append("\n");
            sb.Append("  DisplayName: ").Append(DisplayName).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  BaseCurrency: ").Append(BaseCurrency).Append("\n");
            sb.Append("  PortfolioIds: ").Append(PortfolioIds).Append("\n");
            sb.Append("  FundConfigurationId: ").Append(FundConfigurationId).Append("\n");
            sb.Append("  ShareClassInstrumentScopes: ").Append(ShareClassInstrumentScopes).Append("\n");
            sb.Append("  ShareClassInstruments: ").Append(ShareClassInstruments).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  InceptionDate: ").Append(InceptionDate).Append("\n");
            sb.Append("  DecimalPlaces: ").Append(DecimalPlaces).Append("\n");
            sb.Append("  PrimaryNavType: ").Append(PrimaryNavType).Append("\n");
            sb.Append("  AdditionalNavTypes: ").Append(AdditionalNavTypes).Append("\n");
            sb.Append("  Properties: ").Append(Properties).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as FundDefinitionRequest);
        }

        /// <summary>
        /// Returns true if FundDefinitionRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of FundDefinitionRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FundDefinitionRequest input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Code == input.Code ||
                    (this.Code != null &&
                    this.Code.Equals(input.Code))
                ) && 
                (
                    this.DisplayName == input.DisplayName ||
                    (this.DisplayName != null &&
                    this.DisplayName.Equals(input.DisplayName))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.BaseCurrency == input.BaseCurrency ||
                    (this.BaseCurrency != null &&
                    this.BaseCurrency.Equals(input.BaseCurrency))
                ) && 
                (
                    this.PortfolioIds == input.PortfolioIds ||
                    this.PortfolioIds != null &&
                    input.PortfolioIds != null &&
                    this.PortfolioIds.SequenceEqual(input.PortfolioIds)
                ) && 
                (
                    this.FundConfigurationId == input.FundConfigurationId ||
                    (this.FundConfigurationId != null &&
                    this.FundConfigurationId.Equals(input.FundConfigurationId))
                ) && 
                (
                    this.ShareClassInstrumentScopes == input.ShareClassInstrumentScopes ||
                    this.ShareClassInstrumentScopes != null &&
                    input.ShareClassInstrumentScopes != null &&
                    this.ShareClassInstrumentScopes.SequenceEqual(input.ShareClassInstrumentScopes)
                ) && 
                (
                    this.ShareClassInstruments == input.ShareClassInstruments ||
                    this.ShareClassInstruments != null &&
                    input.ShareClassInstruments != null &&
                    this.ShareClassInstruments.SequenceEqual(input.ShareClassInstruments)
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.InceptionDate == input.InceptionDate ||
                    (this.InceptionDate != null &&
                    this.InceptionDate.Equals(input.InceptionDate))
                ) && 
                (
                    this.DecimalPlaces == input.DecimalPlaces ||
                    (this.DecimalPlaces != null &&
                    this.DecimalPlaces.Equals(input.DecimalPlaces))
                ) && 
                (
                    this.PrimaryNavType == input.PrimaryNavType ||
                    (this.PrimaryNavType != null &&
                    this.PrimaryNavType.Equals(input.PrimaryNavType))
                ) && 
                (
                    this.AdditionalNavTypes == input.AdditionalNavTypes ||
                    this.AdditionalNavTypes != null &&
                    input.AdditionalNavTypes != null &&
                    this.AdditionalNavTypes.SequenceEqual(input.AdditionalNavTypes)
                ) && 
                (
                    this.Properties == input.Properties ||
                    this.Properties != null &&
                    input.Properties != null &&
                    this.Properties.SequenceEqual(input.Properties)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Code != null)
                {
                    hashCode = (hashCode * 59) + this.Code.GetHashCode();
                }
                if (this.DisplayName != null)
                {
                    hashCode = (hashCode * 59) + this.DisplayName.GetHashCode();
                }
                if (this.Description != null)
                {
                    hashCode = (hashCode * 59) + this.Description.GetHashCode();
                }
                if (this.BaseCurrency != null)
                {
                    hashCode = (hashCode * 59) + this.BaseCurrency.GetHashCode();
                }
                if (this.PortfolioIds != null)
                {
                    hashCode = (hashCode * 59) + this.PortfolioIds.GetHashCode();
                }
                if (this.FundConfigurationId != null)
                {
                    hashCode = (hashCode * 59) + this.FundConfigurationId.GetHashCode();
                }
                if (this.ShareClassInstrumentScopes != null)
                {
                    hashCode = (hashCode * 59) + this.ShareClassInstrumentScopes.GetHashCode();
                }
                if (this.ShareClassInstruments != null)
                {
                    hashCode = (hashCode * 59) + this.ShareClassInstruments.GetHashCode();
                }
                if (this.Type != null)
                {
                    hashCode = (hashCode * 59) + this.Type.GetHashCode();
                }
                if (this.InceptionDate != null)
                {
                    hashCode = (hashCode * 59) + this.InceptionDate.GetHashCode();
                }
                if (this.DecimalPlaces != null)
                {
                    hashCode = (hashCode * 59) + this.DecimalPlaces.GetHashCode();
                }
                if (this.PrimaryNavType != null)
                {
                    hashCode = (hashCode * 59) + this.PrimaryNavType.GetHashCode();
                }
                if (this.AdditionalNavTypes != null)
                {
                    hashCode = (hashCode * 59) + this.AdditionalNavTypes.GetHashCode();
                }
                if (this.Properties != null)
                {
                    hashCode = (hashCode * 59) + this.Properties.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Code (string) maxLength
            if (this.Code != null && this.Code.Length > 64)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Code, length must be less than 64.", new [] { "Code" });
            }

            // Code (string) minLength
            if (this.Code != null && this.Code.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Code, length must be greater than 1.", new [] { "Code" });
            }

            // Code (string) pattern
            Regex regexCode = new Regex(@"^[a-zA-Z0-9\-_]+$", RegexOptions.CultureInvariant);
            if (false == regexCode.Match(this.Code).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Code, must match a pattern of " + regexCode, new [] { "Code" });
            }

            // DisplayName (string) maxLength
            if (this.DisplayName != null && this.DisplayName.Length > 256)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for DisplayName, length must be less than 256.", new [] { "DisplayName" });
            }

            // DisplayName (string) minLength
            if (this.DisplayName != null && this.DisplayName.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for DisplayName, length must be greater than 1.", new [] { "DisplayName" });
            }

            // Description (string) maxLength
            if (this.Description != null && this.Description.Length > 1024)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Description, length must be less than 1024.", new [] { "Description" });
            }

            // Description (string) minLength
            if (this.Description != null && this.Description.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Description, length must be greater than 0.", new [] { "Description" });
            }

            // Description (string) pattern
            Regex regexDescription = new Regex(@"^[\s\S]*$", RegexOptions.CultureInvariant);
            if (false == regexDescription.Match(this.Description).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Description, must match a pattern of " + regexDescription, new [] { "Description" });
            }

            // Type (string) minLength
            if (this.Type != null && this.Type.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Type, length must be greater than 1.", new [] { "Type" });
            }

            // DecimalPlaces (int?) maximum
            if (this.DecimalPlaces > (int?)30)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for DecimalPlaces, must be a value less than or equal to 30.", new [] { "DecimalPlaces" });
            }

            // DecimalPlaces (int?) minimum
            if (this.DecimalPlaces < (int?)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for DecimalPlaces, must be a value greater than or equal to 0.", new [] { "DecimalPlaces" });
            }

            yield break;
        }
    }
}
