/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Lusid.Sdk.Client.OpenAPIDateConverter;

namespace Lusid.Sdk.Model
{
    /// <summary>
    /// Bucket
    /// </summary>
    [DataContract(Name = "Bucket")]
    public partial class Bucket : IEquatable<Bucket>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Bucket" /> class.
        /// </summary>
        /// <param name="taxLotId">The identifier of the tax lot this bucket is for..</param>
        /// <param name="movementName">The name of the movement..</param>
        /// <param name="holdingType">The type of the holding..</param>
        /// <param name="economicBucket">The economic bucket..</param>
        /// <param name="economicBucketComponent">The economic bucket component..</param>
        /// <param name="economicBucketVariant">The economic bucket component..</param>
        /// <param name="holdingSign">The holding sign..</param>
        /// <param name="local">local.</param>
        /// <param name="varBase">varBase.</param>
        /// <param name="units">The units..</param>
        /// <param name="activityDate">The activity date of the bucket..</param>
        public Bucket(string taxLotId = default(string), string movementName = default(string), string holdingType = default(string), string economicBucket = default(string), string economicBucketComponent = default(string), string economicBucketVariant = default(string), string holdingSign = default(string), CurrencyAndAmount local = default(CurrencyAndAmount), CurrencyAndAmount varBase = default(CurrencyAndAmount), decimal units = default(decimal), DateTimeOffset activityDate = default(DateTimeOffset))
        {
            this.TaxLotId = taxLotId;
            this.MovementName = movementName;
            this.HoldingType = holdingType;
            this.EconomicBucket = economicBucket;
            this.EconomicBucketComponent = economicBucketComponent;
            this.EconomicBucketVariant = economicBucketVariant;
            this.HoldingSign = holdingSign;
            this.Local = local;
            this.Base = varBase;
            this.Units = units;
            this.ActivityDate = activityDate;
        }

        /// <summary>
        /// The identifier of the tax lot this bucket is for.
        /// </summary>
        /// <value>The identifier of the tax lot this bucket is for.</value>
        [DataMember(Name = "taxLotId", EmitDefaultValue = true)]
        public string TaxLotId { get; set; }

        /// <summary>
        /// The name of the movement.
        /// </summary>
        /// <value>The name of the movement.</value>
        [DataMember(Name = "movementName", EmitDefaultValue = true)]
        public string MovementName { get; set; }

        /// <summary>
        /// The type of the holding.
        /// </summary>
        /// <value>The type of the holding.</value>
        [DataMember(Name = "holdingType", EmitDefaultValue = true)]
        public string HoldingType { get; set; }

        /// <summary>
        /// The economic bucket.
        /// </summary>
        /// <value>The economic bucket.</value>
        [DataMember(Name = "economicBucket", EmitDefaultValue = true)]
        public string EconomicBucket { get; set; }

        /// <summary>
        /// The economic bucket component.
        /// </summary>
        /// <value>The economic bucket component.</value>
        [DataMember(Name = "economicBucketComponent", EmitDefaultValue = true)]
        public string EconomicBucketComponent { get; set; }

        /// <summary>
        /// The economic bucket component.
        /// </summary>
        /// <value>The economic bucket component.</value>
        [DataMember(Name = "economicBucketVariant", EmitDefaultValue = true)]
        public string EconomicBucketVariant { get; set; }

        /// <summary>
        /// The holding sign.
        /// </summary>
        /// <value>The holding sign.</value>
        [DataMember(Name = "holdingSign", EmitDefaultValue = true)]
        public string HoldingSign { get; set; }

        /// <summary>
        /// Gets or Sets Local
        /// </summary>
        [DataMember(Name = "local", EmitDefaultValue = false)]
        public CurrencyAndAmount Local { get; set; }

        /// <summary>
        /// Gets or Sets Base
        /// </summary>
        [DataMember(Name = "base", EmitDefaultValue = false)]
        public CurrencyAndAmount Base { get; set; }

        /// <summary>
        /// The units.
        /// </summary>
        /// <value>The units.</value>
        [DataMember(Name = "units", EmitDefaultValue = true)]
        public decimal Units { get; set; }

        /// <summary>
        /// The activity date of the bucket.
        /// </summary>
        /// <value>The activity date of the bucket.</value>
        [DataMember(Name = "activityDate", EmitDefaultValue = false)]
        public DateTimeOffset ActivityDate { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Bucket {\n");
            sb.Append("  TaxLotId: ").Append(TaxLotId).Append("\n");
            sb.Append("  MovementName: ").Append(MovementName).Append("\n");
            sb.Append("  HoldingType: ").Append(HoldingType).Append("\n");
            sb.Append("  EconomicBucket: ").Append(EconomicBucket).Append("\n");
            sb.Append("  EconomicBucketComponent: ").Append(EconomicBucketComponent).Append("\n");
            sb.Append("  EconomicBucketVariant: ").Append(EconomicBucketVariant).Append("\n");
            sb.Append("  HoldingSign: ").Append(HoldingSign).Append("\n");
            sb.Append("  Local: ").Append(Local).Append("\n");
            sb.Append("  Base: ").Append(Base).Append("\n");
            sb.Append("  Units: ").Append(Units).Append("\n");
            sb.Append("  ActivityDate: ").Append(ActivityDate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Bucket);
        }

        /// <summary>
        /// Returns true if Bucket instances are equal
        /// </summary>
        /// <param name="input">Instance of Bucket to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Bucket input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.TaxLotId == input.TaxLotId ||
                    (this.TaxLotId != null &&
                    this.TaxLotId.Equals(input.TaxLotId))
                ) && 
                (
                    this.MovementName == input.MovementName ||
                    (this.MovementName != null &&
                    this.MovementName.Equals(input.MovementName))
                ) && 
                (
                    this.HoldingType == input.HoldingType ||
                    (this.HoldingType != null &&
                    this.HoldingType.Equals(input.HoldingType))
                ) && 
                (
                    this.EconomicBucket == input.EconomicBucket ||
                    (this.EconomicBucket != null &&
                    this.EconomicBucket.Equals(input.EconomicBucket))
                ) && 
                (
                    this.EconomicBucketComponent == input.EconomicBucketComponent ||
                    (this.EconomicBucketComponent != null &&
                    this.EconomicBucketComponent.Equals(input.EconomicBucketComponent))
                ) && 
                (
                    this.EconomicBucketVariant == input.EconomicBucketVariant ||
                    (this.EconomicBucketVariant != null &&
                    this.EconomicBucketVariant.Equals(input.EconomicBucketVariant))
                ) && 
                (
                    this.HoldingSign == input.HoldingSign ||
                    (this.HoldingSign != null &&
                    this.HoldingSign.Equals(input.HoldingSign))
                ) && 
                (
                    this.Local == input.Local ||
                    (this.Local != null &&
                    this.Local.Equals(input.Local))
                ) && 
                (
                    this.Base == input.Base ||
                    (this.Base != null &&
                    this.Base.Equals(input.Base))
                ) && 
                (
                    this.Units == input.Units ||
                    this.Units.Equals(input.Units)
                ) && 
                (
                    this.ActivityDate == input.ActivityDate ||
                    (this.ActivityDate != null &&
                    this.ActivityDate.Equals(input.ActivityDate))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.TaxLotId != null)
                {
                    hashCode = (hashCode * 59) + this.TaxLotId.GetHashCode();
                }
                if (this.MovementName != null)
                {
                    hashCode = (hashCode * 59) + this.MovementName.GetHashCode();
                }
                if (this.HoldingType != null)
                {
                    hashCode = (hashCode * 59) + this.HoldingType.GetHashCode();
                }
                if (this.EconomicBucket != null)
                {
                    hashCode = (hashCode * 59) + this.EconomicBucket.GetHashCode();
                }
                if (this.EconomicBucketComponent != null)
                {
                    hashCode = (hashCode * 59) + this.EconomicBucketComponent.GetHashCode();
                }
                if (this.EconomicBucketVariant != null)
                {
                    hashCode = (hashCode * 59) + this.EconomicBucketVariant.GetHashCode();
                }
                if (this.HoldingSign != null)
                {
                    hashCode = (hashCode * 59) + this.HoldingSign.GetHashCode();
                }
                if (this.Local != null)
                {
                    hashCode = (hashCode * 59) + this.Local.GetHashCode();
                }
                if (this.Base != null)
                {
                    hashCode = (hashCode * 59) + this.Base.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Units.GetHashCode();
                if (this.ActivityDate != null)
                {
                    hashCode = (hashCode * 59) + this.ActivityDate.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
