/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Lusid.Sdk.Client.OpenAPIDateConverter;

namespace Lusid.Sdk.Model
{
    /// <summary>
    /// CalculateOrderDatesRequest
    /// </summary>
    [DataContract(Name = "CalculateOrderDatesRequest")]
    public partial class CalculateOrderDatesRequest : IEquatable<CalculateOrderDatesRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CalculateOrderDatesRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CalculateOrderDatesRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CalculateOrderDatesRequest" /> class.
        /// </summary>
        /// <param name="instrumentIdentifierType">instrumentIdentifierType (required).</param>
        /// <param name="instrumentIdentifier">instrumentIdentifier (required).</param>
        /// <param name="instrumentScope">instrumentScope.</param>
        /// <param name="receivedDate">receivedDate.</param>
        /// <param name="priceDate">priceDate.</param>
        /// <param name="transactionCategory">transactionCategory.</param>
        /// <param name="liquidatingShareClassIdentifier">liquidatingShareClassIdentifier.</param>
        /// <param name="liquidatingShareClassIdentifierType">liquidatingShareClassIdentifierType.</param>
        /// <param name="liquidatingShareClassInstrumentScope">liquidatingShareClassInstrumentScope.</param>
        public CalculateOrderDatesRequest(string instrumentIdentifierType = default(string), string instrumentIdentifier = default(string), string instrumentScope = default(string), DateTimeOffset? receivedDate = default(DateTimeOffset?), DateTimeOffset? priceDate = default(DateTimeOffset?), string transactionCategory = default(string), string liquidatingShareClassIdentifier = default(string), string liquidatingShareClassIdentifierType = default(string), string liquidatingShareClassInstrumentScope = default(string))
        {
            // to ensure "instrumentIdentifierType" is required (not null)
            if (instrumentIdentifierType == null)
            {
                throw new ArgumentNullException("instrumentIdentifierType is a required property for CalculateOrderDatesRequest and cannot be null");
            }
            this.InstrumentIdentifierType = instrumentIdentifierType;
            // to ensure "instrumentIdentifier" is required (not null)
            if (instrumentIdentifier == null)
            {
                throw new ArgumentNullException("instrumentIdentifier is a required property for CalculateOrderDatesRequest and cannot be null");
            }
            this.InstrumentIdentifier = instrumentIdentifier;
            this.InstrumentScope = instrumentScope;
            this.ReceivedDate = receivedDate;
            this.PriceDate = priceDate;
            this.TransactionCategory = transactionCategory;
            this.LiquidatingShareClassIdentifier = liquidatingShareClassIdentifier;
            this.LiquidatingShareClassIdentifierType = liquidatingShareClassIdentifierType;
            this.LiquidatingShareClassInstrumentScope = liquidatingShareClassInstrumentScope;
        }

        /// <summary>
        /// Gets or Sets InstrumentIdentifierType
        /// </summary>
        [DataMember(Name = "instrumentIdentifierType", IsRequired = true, EmitDefaultValue = true)]
        public string InstrumentIdentifierType { get; set; }

        /// <summary>
        /// Gets or Sets InstrumentIdentifier
        /// </summary>
        [DataMember(Name = "instrumentIdentifier", IsRequired = true, EmitDefaultValue = true)]
        public string InstrumentIdentifier { get; set; }

        /// <summary>
        /// Gets or Sets InstrumentScope
        /// </summary>
        [DataMember(Name = "instrumentScope", EmitDefaultValue = true)]
        public string InstrumentScope { get; set; }

        /// <summary>
        /// Gets or Sets ReceivedDate
        /// </summary>
        [DataMember(Name = "receivedDate", EmitDefaultValue = true)]
        public DateTimeOffset? ReceivedDate { get; set; }

        /// <summary>
        /// Gets or Sets PriceDate
        /// </summary>
        [DataMember(Name = "priceDate", EmitDefaultValue = true)]
        public DateTimeOffset? PriceDate { get; set; }

        /// <summary>
        /// Gets or Sets TransactionCategory
        /// </summary>
        [DataMember(Name = "transactionCategory", EmitDefaultValue = true)]
        public string TransactionCategory { get; set; }

        /// <summary>
        /// Gets or Sets LiquidatingShareClassIdentifier
        /// </summary>
        [DataMember(Name = "liquidatingShareClassIdentifier", EmitDefaultValue = true)]
        public string LiquidatingShareClassIdentifier { get; set; }

        /// <summary>
        /// Gets or Sets LiquidatingShareClassIdentifierType
        /// </summary>
        [DataMember(Name = "liquidatingShareClassIdentifierType", EmitDefaultValue = true)]
        public string LiquidatingShareClassIdentifierType { get; set; }

        /// <summary>
        /// Gets or Sets LiquidatingShareClassInstrumentScope
        /// </summary>
        [DataMember(Name = "liquidatingShareClassInstrumentScope", EmitDefaultValue = true)]
        public string LiquidatingShareClassInstrumentScope { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CalculateOrderDatesRequest {\n");
            sb.Append("  InstrumentIdentifierType: ").Append(InstrumentIdentifierType).Append("\n");
            sb.Append("  InstrumentIdentifier: ").Append(InstrumentIdentifier).Append("\n");
            sb.Append("  InstrumentScope: ").Append(InstrumentScope).Append("\n");
            sb.Append("  ReceivedDate: ").Append(ReceivedDate).Append("\n");
            sb.Append("  PriceDate: ").Append(PriceDate).Append("\n");
            sb.Append("  TransactionCategory: ").Append(TransactionCategory).Append("\n");
            sb.Append("  LiquidatingShareClassIdentifier: ").Append(LiquidatingShareClassIdentifier).Append("\n");
            sb.Append("  LiquidatingShareClassIdentifierType: ").Append(LiquidatingShareClassIdentifierType).Append("\n");
            sb.Append("  LiquidatingShareClassInstrumentScope: ").Append(LiquidatingShareClassInstrumentScope).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CalculateOrderDatesRequest);
        }

        /// <summary>
        /// Returns true if CalculateOrderDatesRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of CalculateOrderDatesRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CalculateOrderDatesRequest input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.InstrumentIdentifierType == input.InstrumentIdentifierType ||
                    (this.InstrumentIdentifierType != null &&
                    this.InstrumentIdentifierType.Equals(input.InstrumentIdentifierType))
                ) && 
                (
                    this.InstrumentIdentifier == input.InstrumentIdentifier ||
                    (this.InstrumentIdentifier != null &&
                    this.InstrumentIdentifier.Equals(input.InstrumentIdentifier))
                ) && 
                (
                    this.InstrumentScope == input.InstrumentScope ||
                    (this.InstrumentScope != null &&
                    this.InstrumentScope.Equals(input.InstrumentScope))
                ) && 
                (
                    this.ReceivedDate == input.ReceivedDate ||
                    (this.ReceivedDate != null &&
                    this.ReceivedDate.Equals(input.ReceivedDate))
                ) && 
                (
                    this.PriceDate == input.PriceDate ||
                    (this.PriceDate != null &&
                    this.PriceDate.Equals(input.PriceDate))
                ) && 
                (
                    this.TransactionCategory == input.TransactionCategory ||
                    (this.TransactionCategory != null &&
                    this.TransactionCategory.Equals(input.TransactionCategory))
                ) && 
                (
                    this.LiquidatingShareClassIdentifier == input.LiquidatingShareClassIdentifier ||
                    (this.LiquidatingShareClassIdentifier != null &&
                    this.LiquidatingShareClassIdentifier.Equals(input.LiquidatingShareClassIdentifier))
                ) && 
                (
                    this.LiquidatingShareClassIdentifierType == input.LiquidatingShareClassIdentifierType ||
                    (this.LiquidatingShareClassIdentifierType != null &&
                    this.LiquidatingShareClassIdentifierType.Equals(input.LiquidatingShareClassIdentifierType))
                ) && 
                (
                    this.LiquidatingShareClassInstrumentScope == input.LiquidatingShareClassInstrumentScope ||
                    (this.LiquidatingShareClassInstrumentScope != null &&
                    this.LiquidatingShareClassInstrumentScope.Equals(input.LiquidatingShareClassInstrumentScope))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.InstrumentIdentifierType != null)
                {
                    hashCode = (hashCode * 59) + this.InstrumentIdentifierType.GetHashCode();
                }
                if (this.InstrumentIdentifier != null)
                {
                    hashCode = (hashCode * 59) + this.InstrumentIdentifier.GetHashCode();
                }
                if (this.InstrumentScope != null)
                {
                    hashCode = (hashCode * 59) + this.InstrumentScope.GetHashCode();
                }
                if (this.ReceivedDate != null)
                {
                    hashCode = (hashCode * 59) + this.ReceivedDate.GetHashCode();
                }
                if (this.PriceDate != null)
                {
                    hashCode = (hashCode * 59) + this.PriceDate.GetHashCode();
                }
                if (this.TransactionCategory != null)
                {
                    hashCode = (hashCode * 59) + this.TransactionCategory.GetHashCode();
                }
                if (this.LiquidatingShareClassIdentifier != null)
                {
                    hashCode = (hashCode * 59) + this.LiquidatingShareClassIdentifier.GetHashCode();
                }
                if (this.LiquidatingShareClassIdentifierType != null)
                {
                    hashCode = (hashCode * 59) + this.LiquidatingShareClassIdentifierType.GetHashCode();
                }
                if (this.LiquidatingShareClassInstrumentScope != null)
                {
                    hashCode = (hashCode * 59) + this.LiquidatingShareClassInstrumentScope.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // InstrumentIdentifierType (string) maxLength
            if (this.InstrumentIdentifierType != null && this.InstrumentIdentifierType.Length > 64)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for InstrumentIdentifierType, length must be less than 64.", new [] { "InstrumentIdentifierType" });
            }

            // InstrumentIdentifierType (string) minLength
            if (this.InstrumentIdentifierType != null && this.InstrumentIdentifierType.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for InstrumentIdentifierType, length must be greater than 1.", new [] { "InstrumentIdentifierType" });
            }

            // InstrumentIdentifierType (string) pattern
            Regex regexInstrumentIdentifierType = new Regex(@"^[a-zA-Z0-9\-_]+$", RegexOptions.CultureInvariant);
            if (false == regexInstrumentIdentifierType.Match(this.InstrumentIdentifierType).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for InstrumentIdentifierType, must match a pattern of " + regexInstrumentIdentifierType, new [] { "InstrumentIdentifierType" });
            }

            // InstrumentIdentifier (string) maxLength
            if (this.InstrumentIdentifier != null && this.InstrumentIdentifier.Length > 64)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for InstrumentIdentifier, length must be less than 64.", new [] { "InstrumentIdentifier" });
            }

            // InstrumentIdentifier (string) minLength
            if (this.InstrumentIdentifier != null && this.InstrumentIdentifier.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for InstrumentIdentifier, length must be greater than 1.", new [] { "InstrumentIdentifier" });
            }

            // InstrumentIdentifier (string) pattern
            Regex regexInstrumentIdentifier = new Regex(@"^[a-zA-Z0-9\-_]+$", RegexOptions.CultureInvariant);
            if (false == regexInstrumentIdentifier.Match(this.InstrumentIdentifier).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for InstrumentIdentifier, must match a pattern of " + regexInstrumentIdentifier, new [] { "InstrumentIdentifier" });
            }

            // InstrumentScope (string) maxLength
            if (this.InstrumentScope != null && this.InstrumentScope.Length > 64)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for InstrumentScope, length must be less than 64.", new [] { "InstrumentScope" });
            }

            // InstrumentScope (string) minLength
            if (this.InstrumentScope != null && this.InstrumentScope.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for InstrumentScope, length must be greater than 1.", new [] { "InstrumentScope" });
            }

            // InstrumentScope (string) pattern
            Regex regexInstrumentScope = new Regex(@"^[a-zA-Z0-9\-_]+$", RegexOptions.CultureInvariant);
            if (false == regexInstrumentScope.Match(this.InstrumentScope).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for InstrumentScope, must match a pattern of " + regexInstrumentScope, new [] { "InstrumentScope" });
            }

            // LiquidatingShareClassIdentifier (string) maxLength
            if (this.LiquidatingShareClassIdentifier != null && this.LiquidatingShareClassIdentifier.Length > 64)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for LiquidatingShareClassIdentifier, length must be less than 64.", new [] { "LiquidatingShareClassIdentifier" });
            }

            // LiquidatingShareClassIdentifier (string) minLength
            if (this.LiquidatingShareClassIdentifier != null && this.LiquidatingShareClassIdentifier.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for LiquidatingShareClassIdentifier, length must be greater than 1.", new [] { "LiquidatingShareClassIdentifier" });
            }

            // LiquidatingShareClassIdentifier (string) pattern
            Regex regexLiquidatingShareClassIdentifier = new Regex(@"^[a-zA-Z0-9\-_]+$", RegexOptions.CultureInvariant);
            if (false == regexLiquidatingShareClassIdentifier.Match(this.LiquidatingShareClassIdentifier).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for LiquidatingShareClassIdentifier, must match a pattern of " + regexLiquidatingShareClassIdentifier, new [] { "LiquidatingShareClassIdentifier" });
            }

            // LiquidatingShareClassIdentifierType (string) maxLength
            if (this.LiquidatingShareClassIdentifierType != null && this.LiquidatingShareClassIdentifierType.Length > 64)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for LiquidatingShareClassIdentifierType, length must be less than 64.", new [] { "LiquidatingShareClassIdentifierType" });
            }

            // LiquidatingShareClassIdentifierType (string) minLength
            if (this.LiquidatingShareClassIdentifierType != null && this.LiquidatingShareClassIdentifierType.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for LiquidatingShareClassIdentifierType, length must be greater than 1.", new [] { "LiquidatingShareClassIdentifierType" });
            }

            // LiquidatingShareClassIdentifierType (string) pattern
            Regex regexLiquidatingShareClassIdentifierType = new Regex(@"^[a-zA-Z0-9\-_]+$", RegexOptions.CultureInvariant);
            if (false == regexLiquidatingShareClassIdentifierType.Match(this.LiquidatingShareClassIdentifierType).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for LiquidatingShareClassIdentifierType, must match a pattern of " + regexLiquidatingShareClassIdentifierType, new [] { "LiquidatingShareClassIdentifierType" });
            }

            // LiquidatingShareClassInstrumentScope (string) maxLength
            if (this.LiquidatingShareClassInstrumentScope != null && this.LiquidatingShareClassInstrumentScope.Length > 64)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for LiquidatingShareClassInstrumentScope, length must be less than 64.", new [] { "LiquidatingShareClassInstrumentScope" });
            }

            // LiquidatingShareClassInstrumentScope (string) minLength
            if (this.LiquidatingShareClassInstrumentScope != null && this.LiquidatingShareClassInstrumentScope.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for LiquidatingShareClassInstrumentScope, length must be greater than 1.", new [] { "LiquidatingShareClassInstrumentScope" });
            }

            // LiquidatingShareClassInstrumentScope (string) pattern
            Regex regexLiquidatingShareClassInstrumentScope = new Regex(@"^[a-zA-Z0-9\-_]+$", RegexOptions.CultureInvariant);
            if (false == regexLiquidatingShareClassInstrumentScope.Match(this.LiquidatingShareClassInstrumentScope).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for LiquidatingShareClassInstrumentScope, must match a pattern of " + regexLiquidatingShareClassInstrumentScope, new [] { "LiquidatingShareClassInstrumentScope" });
            }

            yield break;
        }
    }
}
