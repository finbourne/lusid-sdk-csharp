/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using JsonSubTypes;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Lusid.Sdk.Client.OpenAPIDateConverter;

namespace Lusid.Sdk.Model
{
    /// <summary>
    /// Event holder containing error information
    /// </summary>
    [DataContract(Name = "InformationalErrorEvent")]
    [JsonConverter(typeof(JsonSubtypes), "InstrumentEventType")]
    public partial class InformationalErrorEvent : InstrumentEvent, IEquatable<InformationalErrorEvent>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InformationalErrorEvent" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected InformationalErrorEvent() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="InformationalErrorEvent" /> class.
        /// </summary>
        /// <param name="errorDetail">The details of the error (required).</param>
        /// <param name="errorReason">The error reason (required).</param>
        /// <param name="effectiveAt">The effective date of the evaulation (required).</param>
        /// <param name="instrumentEventType">The Type of Event. The available values are: TransitionEvent, InformationalEvent, OpenEvent, CloseEvent, StockSplitEvent, BondDefaultEvent, CashDividendEvent, AmortisationEvent, CashFlowEvent, ExerciseEvent, ResetEvent, TriggerEvent, RawVendorEvent, InformationalErrorEvent, BondCouponEvent, DividendReinvestmentEvent, AccumulationEvent, BondPrincipalEvent, DividendOptionEvent, MaturityEvent, FxForwardSettlementEvent, ExpiryEvent, ScripDividendEvent, StockDividendEvent, ReverseStockSplitEvent, CapitalDistributionEvent, SpinOffEvent, MergerEvent, FutureExpiryEvent, SwapCashFlowEvent, SwapPrincipalEvent, CreditPremiumCashFlowEvent, CdsCreditEvent, CdxCreditEvent, MbsCouponEvent, MbsPrincipalEvent, BonusIssueEvent, MbsPrincipalWriteOffEvent, MbsInterestDeferralEvent, MbsInterestShortfallEvent, TenderEvent, CallOnIntermediateSecuritiesEvent, IntermediateSecuritiesDistributionEvent, OptionExercisePhysicalEvent, ProtectionPayoutCashFlowEvent (required) (default to &quot;InformationalErrorEvent&quot;).</param>
        public InformationalErrorEvent(string errorDetail = default(string), string errorReason = default(string), DateTimeOffset effectiveAt = default(DateTimeOffset), InstrumentEventTypeEnum instrumentEventType = default(InstrumentEventTypeEnum)) : base(instrumentEventType)
        {
            // to ensure "errorDetail" is required (not null)
            if (errorDetail == null)
            {
                throw new ArgumentNullException("errorDetail is a required property for InformationalErrorEvent and cannot be null");
            }
            this.ErrorDetail = errorDetail;
            // to ensure "errorReason" is required (not null)
            if (errorReason == null)
            {
                throw new ArgumentNullException("errorReason is a required property for InformationalErrorEvent and cannot be null");
            }
            this.ErrorReason = errorReason;
            this.EffectiveAt = effectiveAt;
        }

        /// <summary>
        /// The details of the error
        /// </summary>
        /// <value>The details of the error</value>
        [DataMember(Name = "errorDetail", IsRequired = true, EmitDefaultValue = true)]
        public string ErrorDetail { get; set; }

        /// <summary>
        /// The error reason
        /// </summary>
        /// <value>The error reason</value>
        [DataMember(Name = "errorReason", IsRequired = true, EmitDefaultValue = true)]
        public string ErrorReason { get; set; }

        /// <summary>
        /// The effective date of the evaulation
        /// </summary>
        /// <value>The effective date of the evaulation</value>
        [DataMember(Name = "effectiveAt", IsRequired = true, EmitDefaultValue = true)]
        public DateTimeOffset EffectiveAt { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class InformationalErrorEvent {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  ErrorDetail: ").Append(ErrorDetail).Append("\n");
            sb.Append("  ErrorReason: ").Append(ErrorReason).Append("\n");
            sb.Append("  EffectiveAt: ").Append(EffectiveAt).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as InformationalErrorEvent);
        }

        /// <summary>
        /// Returns true if InformationalErrorEvent instances are equal
        /// </summary>
        /// <param name="input">Instance of InformationalErrorEvent to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InformationalErrorEvent input)
        {
            if (input == null)
            {
                return false;
            }
            return base.Equals(input) && 
                (
                    this.ErrorDetail == input.ErrorDetail ||
                    (this.ErrorDetail != null &&
                    this.ErrorDetail.Equals(input.ErrorDetail))
                ) && base.Equals(input) && 
                (
                    this.ErrorReason == input.ErrorReason ||
                    (this.ErrorReason != null &&
                    this.ErrorReason.Equals(input.ErrorReason))
                ) && base.Equals(input) && 
                (
                    this.EffectiveAt == input.EffectiveAt ||
                    (this.EffectiveAt != null &&
                    this.EffectiveAt.Equals(input.EffectiveAt))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = base.GetHashCode();
                if (this.ErrorDetail != null)
                {
                    hashCode = (hashCode * 59) + this.ErrorDetail.GetHashCode();
                }
                if (this.ErrorReason != null)
                {
                    hashCode = (hashCode * 59) + this.ErrorReason.GetHashCode();
                }
                if (this.EffectiveAt != null)
                {
                    hashCode = (hashCode * 59) + this.EffectiveAt.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            return this.BaseValidate(validationContext);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        protected IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> BaseValidate(ValidationContext validationContext)
        {
            foreach (var x in base.BaseValidate(validationContext))
            {
                yield return x;
            }
            // ErrorDetail (string) minLength
            if (this.ErrorDetail != null && this.ErrorDetail.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ErrorDetail, length must be greater than 1.", new [] { "ErrorDetail" });
            }

            // ErrorReason (string) minLength
            if (this.ErrorReason != null && this.ErrorReason.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ErrorReason, length must be greater than 1.", new [] { "ErrorReason" });
            }

            yield break;
        }
    }
}
