/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Lusid.Sdk.Client.OpenAPIDateConverter;

namespace Lusid.Sdk.Model
{
    /// <summary>
    /// Class specifying a filtering operation
    /// </summary>
    [DataContract(Name = "AddressKeyFilter")]
    public partial class AddressKeyFilter : IEquatable<AddressKeyFilter>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AddressKeyFilter" /> class.
        /// </summary>
        /// <param name="left">Address for the value in the row.</param>
        /// <param name="varOperator">What sort of comparison is the filter performing. Can be either \&quot;eq\&quot; for equals or \&quot;neq\&quot; for not equals..</param>
        /// <param name="right">right.</param>
        public AddressKeyFilter(string left = default(string), string varOperator = default(string), ResultValue right = default(ResultValue))
        {
            this.Left = left;
            this.Operator = varOperator;
            this.Right = right;
        }

        /// <summary>
        /// Address for the value in the row
        /// </summary>
        /// <value>Address for the value in the row</value>
        [DataMember(Name = "left", EmitDefaultValue = true)]
        public string Left { get; set; }

        /// <summary>
        /// What sort of comparison is the filter performing. Can be either \&quot;eq\&quot; for equals or \&quot;neq\&quot; for not equals.
        /// </summary>
        /// <value>What sort of comparison is the filter performing. Can be either \&quot;eq\&quot; for equals or \&quot;neq\&quot; for not equals.</value>
        [DataMember(Name = "operator", EmitDefaultValue = true)]
        public string Operator { get; set; }

        /// <summary>
        /// Gets or Sets Right
        /// </summary>
        [DataMember(Name = "right", EmitDefaultValue = false)]
        public ResultValue Right { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AddressKeyFilter {\n");
            sb.Append("  Left: ").Append(Left).Append("\n");
            sb.Append("  Operator: ").Append(Operator).Append("\n");
            sb.Append("  Right: ").Append(Right).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AddressKeyFilter);
        }

        /// <summary>
        /// Returns true if AddressKeyFilter instances are equal
        /// </summary>
        /// <param name="input">Instance of AddressKeyFilter to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AddressKeyFilter input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Left == input.Left ||
                    (this.Left != null &&
                    this.Left.Equals(input.Left))
                ) && 
                (
                    this.Operator == input.Operator ||
                    (this.Operator != null &&
                    this.Operator.Equals(input.Operator))
                ) && 
                (
                    this.Right == input.Right ||
                    (this.Right != null &&
                    this.Right.Equals(input.Right))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Left != null)
                {
                    hashCode = (hashCode * 59) + this.Left.GetHashCode();
                }
                if (this.Operator != null)
                {
                    hashCode = (hashCode * 59) + this.Operator.GetHashCode();
                }
                if (this.Right != null)
                {
                    hashCode = (hashCode * 59) + this.Right.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Operator (string) maxLength
            if (this.Operator != null && this.Operator.Length > 3)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Operator, length must be less than 3.", new [] { "Operator" });
            }

            // Operator (string) minLength
            if (this.Operator != null && this.Operator.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Operator, length must be greater than 0.", new [] { "Operator" });
            }

            yield break;
        }
    }
}
