/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Lusid.Sdk.Client.OpenAPIDateConverter;

namespace Lusid.Sdk.Model
{
    /// <summary>
    /// An individual mapping rule, for mapping between a left and right field/property.
    /// </summary>
    [DataContract(Name = "MappingRule")]
    public partial class MappingRule : IEquatable<MappingRule>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="MappingRule" /> class.
        /// </summary>
        /// <param name="left">The name of the field/property in the left resource (e.g. a transaction).</param>
        /// <param name="right">The name of the field/property in the right resource (e.g. a transaction).</param>
        /// <param name="comparisonType">The type of comparison to be performed.</param>
        /// <param name="comparisonValue">The (optional) value used with ComparisonType..</param>
        /// <param name="weight">A factor used to influence the importance of this item..</param>
        /// <param name="mappedStrings">The (optional) value used to map string values..</param>
        /// <param name="isCaseSensitive">Should string comparisons take case into account, defaults to &#x60;false&#x60;..</param>
        public MappingRule(string left = default(string), string right = default(string), string comparisonType = default(string), decimal? comparisonValue = default(decimal?), decimal weight = default(decimal), List<MappedString> mappedStrings = default(List<MappedString>), bool isCaseSensitive = default(bool))
        {
            this.Left = left;
            this.Right = right;
            this.ComparisonType = comparisonType;
            this.ComparisonValue = comparisonValue;
            this.Weight = weight;
            this.MappedStrings = mappedStrings;
            this.IsCaseSensitive = isCaseSensitive;
        }

        /// <summary>
        /// The name of the field/property in the left resource (e.g. a transaction)
        /// </summary>
        /// <value>The name of the field/property in the left resource (e.g. a transaction)</value>
        [DataMember(Name = "left", EmitDefaultValue = true)]
        public string Left { get; set; }

        /// <summary>
        /// The name of the field/property in the right resource (e.g. a transaction)
        /// </summary>
        /// <value>The name of the field/property in the right resource (e.g. a transaction)</value>
        [DataMember(Name = "right", EmitDefaultValue = true)]
        public string Right { get; set; }

        /// <summary>
        /// The type of comparison to be performed
        /// </summary>
        /// <value>The type of comparison to be performed</value>
        [DataMember(Name = "comparisonType", EmitDefaultValue = true)]
        public string ComparisonType { get; set; }

        /// <summary>
        /// The (optional) value used with ComparisonType.
        /// </summary>
        /// <value>The (optional) value used with ComparisonType.</value>
        [DataMember(Name = "comparisonValue", EmitDefaultValue = true)]
        public decimal? ComparisonValue { get; set; }

        /// <summary>
        /// A factor used to influence the importance of this item.
        /// </summary>
        /// <value>A factor used to influence the importance of this item.</value>
        [DataMember(Name = "weight", EmitDefaultValue = true)]
        public decimal Weight { get; set; }

        /// <summary>
        /// The (optional) value used to map string values.
        /// </summary>
        /// <value>The (optional) value used to map string values.</value>
        [DataMember(Name = "mappedStrings", EmitDefaultValue = true)]
        public List<MappedString> MappedStrings { get; set; }

        /// <summary>
        /// Should string comparisons take case into account, defaults to &#x60;false&#x60;.
        /// </summary>
        /// <value>Should string comparisons take case into account, defaults to &#x60;false&#x60;.</value>
        [DataMember(Name = "isCaseSensitive", EmitDefaultValue = true)]
        public bool IsCaseSensitive { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class MappingRule {\n");
            sb.Append("  Left: ").Append(Left).Append("\n");
            sb.Append("  Right: ").Append(Right).Append("\n");
            sb.Append("  ComparisonType: ").Append(ComparisonType).Append("\n");
            sb.Append("  ComparisonValue: ").Append(ComparisonValue).Append("\n");
            sb.Append("  Weight: ").Append(Weight).Append("\n");
            sb.Append("  MappedStrings: ").Append(MappedStrings).Append("\n");
            sb.Append("  IsCaseSensitive: ").Append(IsCaseSensitive).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as MappingRule);
        }

        /// <summary>
        /// Returns true if MappingRule instances are equal
        /// </summary>
        /// <param name="input">Instance of MappingRule to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MappingRule input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Left == input.Left ||
                    (this.Left != null &&
                    this.Left.Equals(input.Left))
                ) && 
                (
                    this.Right == input.Right ||
                    (this.Right != null &&
                    this.Right.Equals(input.Right))
                ) && 
                (
                    this.ComparisonType == input.ComparisonType ||
                    (this.ComparisonType != null &&
                    this.ComparisonType.Equals(input.ComparisonType))
                ) && 
                (
                    this.ComparisonValue == input.ComparisonValue ||
                    (this.ComparisonValue != null &&
                    this.ComparisonValue.Equals(input.ComparisonValue))
                ) && 
                (
                    this.Weight == input.Weight ||
                    this.Weight.Equals(input.Weight)
                ) && 
                (
                    this.MappedStrings == input.MappedStrings ||
                    this.MappedStrings != null &&
                    input.MappedStrings != null &&
                    this.MappedStrings.SequenceEqual(input.MappedStrings)
                ) && 
                (
                    this.IsCaseSensitive == input.IsCaseSensitive ||
                    this.IsCaseSensitive.Equals(input.IsCaseSensitive)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Left != null)
                {
                    hashCode = (hashCode * 59) + this.Left.GetHashCode();
                }
                if (this.Right != null)
                {
                    hashCode = (hashCode * 59) + this.Right.GetHashCode();
                }
                if (this.ComparisonType != null)
                {
                    hashCode = (hashCode * 59) + this.ComparisonType.GetHashCode();
                }
                if (this.ComparisonValue != null)
                {
                    hashCode = (hashCode * 59) + this.ComparisonValue.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Weight.GetHashCode();
                if (this.MappedStrings != null)
                {
                    hashCode = (hashCode * 59) + this.MappedStrings.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.IsCaseSensitive.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
