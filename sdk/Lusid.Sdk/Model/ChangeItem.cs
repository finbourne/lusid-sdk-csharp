/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Lusid.Sdk.Client.OpenAPIDateConverter;

namespace Lusid.Sdk.Model
{
    /// <summary>
    /// Information about a change to a field / property.  At least one of &#39;PreviousValue&#39; or &#39;NewValue&#39; will be set.
    /// </summary>
    [DataContract(Name = "ChangeItem")]
    public partial class ChangeItem : IEquatable<ChangeItem>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ChangeItem" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ChangeItem() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ChangeItem" /> class.
        /// </summary>
        /// <param name="fieldName">The name of the field or property that has been changed. (required).</param>
        /// <param name="previousValue">The previous value for this field / property..</param>
        /// <param name="newValue">The new value for this field / property..</param>
        /// <param name="effectiveFrom">The market data time, i.e. the time to run the change from..</param>
        /// <param name="effectiveUntil">The market data time, i.e. the time to run the change until..</param>
        public ChangeItem(string fieldName = default(string), string previousValue = default(string), string newValue = default(string), DateTimeOffset? effectiveFrom = default(DateTimeOffset?), DateTimeOffset? effectiveUntil = default(DateTimeOffset?))
        {
            // to ensure "fieldName" is required (not null)
            if (fieldName == null)
            {
                throw new ArgumentNullException("fieldName is a required property for ChangeItem and cannot be null");
            }
            this.FieldName = fieldName;
            this.PreviousValue = previousValue;
            this.NewValue = newValue;
            this.EffectiveFrom = effectiveFrom;
            this.EffectiveUntil = effectiveUntil;
        }

        /// <summary>
        /// The name of the field or property that has been changed.
        /// </summary>
        /// <value>The name of the field or property that has been changed.</value>
        [DataMember(Name = "fieldName", IsRequired = true, EmitDefaultValue = true)]
        public string FieldName { get; set; }

        /// <summary>
        /// The previous value for this field / property.
        /// </summary>
        /// <value>The previous value for this field / property.</value>
        [DataMember(Name = "previousValue", EmitDefaultValue = true)]
        public string PreviousValue { get; set; }

        /// <summary>
        /// The new value for this field / property.
        /// </summary>
        /// <value>The new value for this field / property.</value>
        [DataMember(Name = "newValue", EmitDefaultValue = true)]
        public string NewValue { get; set; }

        /// <summary>
        /// The market data time, i.e. the time to run the change from.
        /// </summary>
        /// <value>The market data time, i.e. the time to run the change from.</value>
        [DataMember(Name = "effectiveFrom", EmitDefaultValue = true)]
        public DateTimeOffset? EffectiveFrom { get; set; }

        /// <summary>
        /// The market data time, i.e. the time to run the change until.
        /// </summary>
        /// <value>The market data time, i.e. the time to run the change until.</value>
        [DataMember(Name = "effectiveUntil", EmitDefaultValue = true)]
        public DateTimeOffset? EffectiveUntil { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ChangeItem {\n");
            sb.Append("  FieldName: ").Append(FieldName).Append("\n");
            sb.Append("  PreviousValue: ").Append(PreviousValue).Append("\n");
            sb.Append("  NewValue: ").Append(NewValue).Append("\n");
            sb.Append("  EffectiveFrom: ").Append(EffectiveFrom).Append("\n");
            sb.Append("  EffectiveUntil: ").Append(EffectiveUntil).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ChangeItem);
        }

        /// <summary>
        /// Returns true if ChangeItem instances are equal
        /// </summary>
        /// <param name="input">Instance of ChangeItem to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ChangeItem input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.FieldName == input.FieldName ||
                    (this.FieldName != null &&
                    this.FieldName.Equals(input.FieldName))
                ) && 
                (
                    this.PreviousValue == input.PreviousValue ||
                    (this.PreviousValue != null &&
                    this.PreviousValue.Equals(input.PreviousValue))
                ) && 
                (
                    this.NewValue == input.NewValue ||
                    (this.NewValue != null &&
                    this.NewValue.Equals(input.NewValue))
                ) && 
                (
                    this.EffectiveFrom == input.EffectiveFrom ||
                    (this.EffectiveFrom != null &&
                    this.EffectiveFrom.Equals(input.EffectiveFrom))
                ) && 
                (
                    this.EffectiveUntil == input.EffectiveUntil ||
                    (this.EffectiveUntil != null &&
                    this.EffectiveUntil.Equals(input.EffectiveUntil))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.FieldName != null)
                {
                    hashCode = (hashCode * 59) + this.FieldName.GetHashCode();
                }
                if (this.PreviousValue != null)
                {
                    hashCode = (hashCode * 59) + this.PreviousValue.GetHashCode();
                }
                if (this.NewValue != null)
                {
                    hashCode = (hashCode * 59) + this.NewValue.GetHashCode();
                }
                if (this.EffectiveFrom != null)
                {
                    hashCode = (hashCode * 59) + this.EffectiveFrom.GetHashCode();
                }
                if (this.EffectiveUntil != null)
                {
                    hashCode = (hashCode * 59) + this.EffectiveUntil.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // FieldName (string) minLength
            if (this.FieldName != null && this.FieldName.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for FieldName, length must be greater than 1.", new [] { "FieldName" });
            }

            yield break;
        }
    }
}
