/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Lusid.Sdk.Client.OpenAPIDateConverter;

namespace Lusid.Sdk.Model
{
    /// <summary>
    /// FxRateScheduleAllOf
    /// </summary>
    [DataContract(Name = "FxRateSchedule_allOf")]
    public partial class FxRateScheduleAllOf : IEquatable<FxRateScheduleAllOf>, IValidatableObject
    {
        /// <summary>
        /// The available values are: FixedSchedule, FloatSchedule, OptionalitySchedule, StepSchedule, Exercise, FxRateSchedule, FxLinkedNotionalSchedule, Invalid
        /// </summary>
        /// <value>The available values are: FixedSchedule, FloatSchedule, OptionalitySchedule, StepSchedule, Exercise, FxRateSchedule, FxLinkedNotionalSchedule, Invalid</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ScheduleTypeEnum
        {
            /// <summary>
            /// Enum FixedSchedule for value: FixedSchedule
            /// </summary>
            [EnumMember(Value = "FixedSchedule")]
            FixedSchedule = 1,

            /// <summary>
            /// Enum FloatSchedule for value: FloatSchedule
            /// </summary>
            [EnumMember(Value = "FloatSchedule")]
            FloatSchedule = 2,

            /// <summary>
            /// Enum OptionalitySchedule for value: OptionalitySchedule
            /// </summary>
            [EnumMember(Value = "OptionalitySchedule")]
            OptionalitySchedule = 3,

            /// <summary>
            /// Enum StepSchedule for value: StepSchedule
            /// </summary>
            [EnumMember(Value = "StepSchedule")]
            StepSchedule = 4,

            /// <summary>
            /// Enum Exercise for value: Exercise
            /// </summary>
            [EnumMember(Value = "Exercise")]
            Exercise = 5,

            /// <summary>
            /// Enum FxRateSchedule for value: FxRateSchedule
            /// </summary>
            [EnumMember(Value = "FxRateSchedule")]
            FxRateSchedule = 6,

            /// <summary>
            /// Enum FxLinkedNotionalSchedule for value: FxLinkedNotionalSchedule
            /// </summary>
            [EnumMember(Value = "FxLinkedNotionalSchedule")]
            FxLinkedNotionalSchedule = 7,

            /// <summary>
            /// Enum Invalid for value: Invalid
            /// </summary>
            [EnumMember(Value = "Invalid")]
            Invalid = 8

        }


        /// <summary>
        /// The available values are: FixedSchedule, FloatSchedule, OptionalitySchedule, StepSchedule, Exercise, FxRateSchedule, FxLinkedNotionalSchedule, Invalid
        /// </summary>
        /// <value>The available values are: FixedSchedule, FloatSchedule, OptionalitySchedule, StepSchedule, Exercise, FxRateSchedule, FxLinkedNotionalSchedule, Invalid</value>
        [DataMember(Name = "scheduleType", IsRequired = true, EmitDefaultValue = true)]
        public ScheduleTypeEnum ScheduleType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="FxRateScheduleAllOf" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected FxRateScheduleAllOf() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="FxRateScheduleAllOf" /> class.
        /// </summary>
        /// <param name="flowConventions">flowConventions.</param>
        /// <param name="fxConversionTypes">List of flags to indicate if coupon payments, principal payments or both are converted.</param>
        /// <param name="rate">FxRate used to convert payments. Assumed to be in units of the ToCurrency so conversion is paymentAmount x fxRate.</param>
        /// <param name="toCurrency">Currency that payments are converted to.</param>
        /// <param name="scheduleType">The available values are: FixedSchedule, FloatSchedule, OptionalitySchedule, StepSchedule, Exercise, FxRateSchedule, FxLinkedNotionalSchedule, Invalid (required).</param>
        public FxRateScheduleAllOf(FlowConventions flowConventions = default(FlowConventions), List<string> fxConversionTypes = default(List<string>), decimal rate = default(decimal), string toCurrency = default(string), ScheduleTypeEnum scheduleType = default(ScheduleTypeEnum))
        {
            this.ScheduleType = scheduleType;
            this.FlowConventions = flowConventions;
            this.FxConversionTypes = fxConversionTypes;
            this.Rate = rate;
            this.ToCurrency = toCurrency;
        }

        /// <summary>
        /// Gets or Sets FlowConventions
        /// </summary>
        [DataMember(Name = "flowConventions", EmitDefaultValue = false)]
        public FlowConventions FlowConventions { get; set; }

        /// <summary>
        /// List of flags to indicate if coupon payments, principal payments or both are converted
        /// </summary>
        /// <value>List of flags to indicate if coupon payments, principal payments or both are converted</value>
        [DataMember(Name = "fxConversionTypes", EmitDefaultValue = true)]
        public List<string> FxConversionTypes { get; set; }

        /// <summary>
        /// FxRate used to convert payments. Assumed to be in units of the ToCurrency so conversion is paymentAmount x fxRate
        /// </summary>
        /// <value>FxRate used to convert payments. Assumed to be in units of the ToCurrency so conversion is paymentAmount x fxRate</value>
        [DataMember(Name = "rate", EmitDefaultValue = true)]
        public decimal Rate { get; set; }

        /// <summary>
        /// Currency that payments are converted to
        /// </summary>
        /// <value>Currency that payments are converted to</value>
        [DataMember(Name = "toCurrency", EmitDefaultValue = true)]
        public string ToCurrency { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class FxRateScheduleAllOf {\n");
            sb.Append("  FlowConventions: ").Append(FlowConventions).Append("\n");
            sb.Append("  FxConversionTypes: ").Append(FxConversionTypes).Append("\n");
            sb.Append("  Rate: ").Append(Rate).Append("\n");
            sb.Append("  ToCurrency: ").Append(ToCurrency).Append("\n");
            sb.Append("  ScheduleType: ").Append(ScheduleType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as FxRateScheduleAllOf);
        }

        /// <summary>
        /// Returns true if FxRateScheduleAllOf instances are equal
        /// </summary>
        /// <param name="input">Instance of FxRateScheduleAllOf to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FxRateScheduleAllOf input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.FlowConventions == input.FlowConventions ||
                    (this.FlowConventions != null &&
                    this.FlowConventions.Equals(input.FlowConventions))
                ) && 
                (
                    this.FxConversionTypes == input.FxConversionTypes ||
                    this.FxConversionTypes != null &&
                    input.FxConversionTypes != null &&
                    this.FxConversionTypes.SequenceEqual(input.FxConversionTypes)
                ) && 
                (
                    this.Rate == input.Rate ||
                    this.Rate.Equals(input.Rate)
                ) && 
                (
                    this.ToCurrency == input.ToCurrency ||
                    (this.ToCurrency != null &&
                    this.ToCurrency.Equals(input.ToCurrency))
                ) && 
                (
                    this.ScheduleType == input.ScheduleType ||
                    this.ScheduleType.Equals(input.ScheduleType)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.FlowConventions != null)
                {
                    hashCode = (hashCode * 59) + this.FlowConventions.GetHashCode();
                }
                if (this.FxConversionTypes != null)
                {
                    hashCode = (hashCode * 59) + this.FxConversionTypes.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Rate.GetHashCode();
                if (this.ToCurrency != null)
                {
                    hashCode = (hashCode * 59) + this.ToCurrency.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.ScheduleType.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
