/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Lusid.Sdk.Client.OpenAPIDateConverter;

namespace Lusid.Sdk.Model
{
    /// <summary>
    /// GroupReconciliationReviewStatuses
    /// </summary>
    [DataContract(Name = "GroupReconciliationReviewStatuses")]
    public partial class GroupReconciliationReviewStatuses : IEquatable<GroupReconciliationReviewStatuses>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GroupReconciliationReviewStatuses" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected GroupReconciliationReviewStatuses() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="GroupReconciliationReviewStatuses" /> class.
        /// </summary>
        /// <param name="countPending">The number of comparison results of reviewStatus \&quot;Pending\&quot; with this instanceId and reconciliationType (required).</param>
        /// <param name="linkPending">linkPending (required).</param>
        /// <param name="countReviewed">The number of comparison results of reviewStatus \&quot;Reviewed\&quot; with this instanceId and reconciliationType (required).</param>
        /// <param name="linkReviewed">linkReviewed (required).</param>
        /// <param name="countMatched">The number of comparison results of reviewStatus \&quot;Matched\&quot; with this instanceId and reconciliationType (required).</param>
        /// <param name="linkMatched">linkMatched (required).</param>
        /// <param name="countInvalid">The number of comparison results of reviewStatus \&quot;Invalid\&quot; with this instanceId and reconciliationType (required).</param>
        /// <param name="linkInvalid">linkInvalid (required).</param>
        public GroupReconciliationReviewStatuses(int countPending = default(int), Link linkPending = default(Link), int countReviewed = default(int), Link linkReviewed = default(Link), int countMatched = default(int), Link linkMatched = default(Link), int countInvalid = default(int), Link linkInvalid = default(Link))
        {
            this.CountPending = countPending;
            // to ensure "linkPending" is required (not null)
            if (linkPending == null)
            {
                throw new ArgumentNullException("linkPending is a required property for GroupReconciliationReviewStatuses and cannot be null");
            }
            this.LinkPending = linkPending;
            this.CountReviewed = countReviewed;
            // to ensure "linkReviewed" is required (not null)
            if (linkReviewed == null)
            {
                throw new ArgumentNullException("linkReviewed is a required property for GroupReconciliationReviewStatuses and cannot be null");
            }
            this.LinkReviewed = linkReviewed;
            this.CountMatched = countMatched;
            // to ensure "linkMatched" is required (not null)
            if (linkMatched == null)
            {
                throw new ArgumentNullException("linkMatched is a required property for GroupReconciliationReviewStatuses and cannot be null");
            }
            this.LinkMatched = linkMatched;
            this.CountInvalid = countInvalid;
            // to ensure "linkInvalid" is required (not null)
            if (linkInvalid == null)
            {
                throw new ArgumentNullException("linkInvalid is a required property for GroupReconciliationReviewStatuses and cannot be null");
            }
            this.LinkInvalid = linkInvalid;
        }

        /// <summary>
        /// The number of comparison results of reviewStatus \&quot;Pending\&quot; with this instanceId and reconciliationType
        /// </summary>
        /// <value>The number of comparison results of reviewStatus \&quot;Pending\&quot; with this instanceId and reconciliationType</value>
        [DataMember(Name = "countPending", IsRequired = true, EmitDefaultValue = true)]
        public int CountPending { get; set; }

        /// <summary>
        /// Gets or Sets LinkPending
        /// </summary>
        [DataMember(Name = "linkPending", IsRequired = true, EmitDefaultValue = true)]
        public Link LinkPending { get; set; }

        /// <summary>
        /// The number of comparison results of reviewStatus \&quot;Reviewed\&quot; with this instanceId and reconciliationType
        /// </summary>
        /// <value>The number of comparison results of reviewStatus \&quot;Reviewed\&quot; with this instanceId and reconciliationType</value>
        [DataMember(Name = "countReviewed", IsRequired = true, EmitDefaultValue = true)]
        public int CountReviewed { get; set; }

        /// <summary>
        /// Gets or Sets LinkReviewed
        /// </summary>
        [DataMember(Name = "linkReviewed", IsRequired = true, EmitDefaultValue = true)]
        public Link LinkReviewed { get; set; }

        /// <summary>
        /// The number of comparison results of reviewStatus \&quot;Matched\&quot; with this instanceId and reconciliationType
        /// </summary>
        /// <value>The number of comparison results of reviewStatus \&quot;Matched\&quot; with this instanceId and reconciliationType</value>
        [DataMember(Name = "countMatched", IsRequired = true, EmitDefaultValue = true)]
        public int CountMatched { get; set; }

        /// <summary>
        /// Gets or Sets LinkMatched
        /// </summary>
        [DataMember(Name = "linkMatched", IsRequired = true, EmitDefaultValue = true)]
        public Link LinkMatched { get; set; }

        /// <summary>
        /// The number of comparison results of reviewStatus \&quot;Invalid\&quot; with this instanceId and reconciliationType
        /// </summary>
        /// <value>The number of comparison results of reviewStatus \&quot;Invalid\&quot; with this instanceId and reconciliationType</value>
        [DataMember(Name = "countInvalid", IsRequired = true, EmitDefaultValue = true)]
        public int CountInvalid { get; set; }

        /// <summary>
        /// Gets or Sets LinkInvalid
        /// </summary>
        [DataMember(Name = "linkInvalid", IsRequired = true, EmitDefaultValue = true)]
        public Link LinkInvalid { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class GroupReconciliationReviewStatuses {\n");
            sb.Append("  CountPending: ").Append(CountPending).Append("\n");
            sb.Append("  LinkPending: ").Append(LinkPending).Append("\n");
            sb.Append("  CountReviewed: ").Append(CountReviewed).Append("\n");
            sb.Append("  LinkReviewed: ").Append(LinkReviewed).Append("\n");
            sb.Append("  CountMatched: ").Append(CountMatched).Append("\n");
            sb.Append("  LinkMatched: ").Append(LinkMatched).Append("\n");
            sb.Append("  CountInvalid: ").Append(CountInvalid).Append("\n");
            sb.Append("  LinkInvalid: ").Append(LinkInvalid).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GroupReconciliationReviewStatuses);
        }

        /// <summary>
        /// Returns true if GroupReconciliationReviewStatuses instances are equal
        /// </summary>
        /// <param name="input">Instance of GroupReconciliationReviewStatuses to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GroupReconciliationReviewStatuses input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.CountPending == input.CountPending ||
                    this.CountPending.Equals(input.CountPending)
                ) && 
                (
                    this.LinkPending == input.LinkPending ||
                    (this.LinkPending != null &&
                    this.LinkPending.Equals(input.LinkPending))
                ) && 
                (
                    this.CountReviewed == input.CountReviewed ||
                    this.CountReviewed.Equals(input.CountReviewed)
                ) && 
                (
                    this.LinkReviewed == input.LinkReviewed ||
                    (this.LinkReviewed != null &&
                    this.LinkReviewed.Equals(input.LinkReviewed))
                ) && 
                (
                    this.CountMatched == input.CountMatched ||
                    this.CountMatched.Equals(input.CountMatched)
                ) && 
                (
                    this.LinkMatched == input.LinkMatched ||
                    (this.LinkMatched != null &&
                    this.LinkMatched.Equals(input.LinkMatched))
                ) && 
                (
                    this.CountInvalid == input.CountInvalid ||
                    this.CountInvalid.Equals(input.CountInvalid)
                ) && 
                (
                    this.LinkInvalid == input.LinkInvalid ||
                    (this.LinkInvalid != null &&
                    this.LinkInvalid.Equals(input.LinkInvalid))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.CountPending.GetHashCode();
                if (this.LinkPending != null)
                {
                    hashCode = (hashCode * 59) + this.LinkPending.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.CountReviewed.GetHashCode();
                if (this.LinkReviewed != null)
                {
                    hashCode = (hashCode * 59) + this.LinkReviewed.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.CountMatched.GetHashCode();
                if (this.LinkMatched != null)
                {
                    hashCode = (hashCode * 59) + this.LinkMatched.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.CountInvalid.GetHashCode();
                if (this.LinkInvalid != null)
                {
                    hashCode = (hashCode * 59) + this.LinkInvalid.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
