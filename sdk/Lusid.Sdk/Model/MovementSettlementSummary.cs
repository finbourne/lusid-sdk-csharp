/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Lusid.Sdk.Client.OpenAPIDateConverter;

namespace Lusid.Sdk.Model
{
    /// <summary>
    /// MovementSettlementSummary
    /// </summary>
    [DataContract(Name = "MovementSettlementSummary")]
    public partial class MovementSettlementSummary : IEquatable<MovementSettlementSummary>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="MovementSettlementSummary" /> class.
        /// </summary>
        /// <param name="name">name.</param>
        /// <param name="type">type.</param>
        /// <param name="lusidInstrumentId">lusidInstrumentId.</param>
        /// <param name="instrumentScope">instrumentScope.</param>
        /// <param name="settlementMode">settlementMode.</param>
        /// <param name="contractualSettlementDate">contractualSettlementDate.</param>
        /// <param name="units">units.</param>
        /// <param name="settledUnits">settledUnits.</param>
        /// <param name="unsettledUnits">unsettledUnits.</param>
        /// <param name="overdueUnits">overdueUnits.</param>
        public MovementSettlementSummary(string name = default(string), string type = default(string), string lusidInstrumentId = default(string), string instrumentScope = default(string), string settlementMode = default(string), string contractualSettlementDate = default(string), decimal units = default(decimal), decimal settledUnits = default(decimal), decimal unsettledUnits = default(decimal), decimal overdueUnits = default(decimal))
        {
            this.Name = name;
            this.Type = type;
            this.LusidInstrumentId = lusidInstrumentId;
            this.InstrumentScope = instrumentScope;
            this.SettlementMode = settlementMode;
            this.ContractualSettlementDate = contractualSettlementDate;
            this.Units = units;
            this.SettledUnits = settledUnits;
            this.UnsettledUnits = unsettledUnits;
            this.OverdueUnits = overdueUnits;
        }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name = "type", EmitDefaultValue = true)]
        public string Type { get; set; }

        /// <summary>
        /// Gets or Sets LusidInstrumentId
        /// </summary>
        [DataMember(Name = "lusidInstrumentId", EmitDefaultValue = true)]
        public string LusidInstrumentId { get; set; }

        /// <summary>
        /// Gets or Sets InstrumentScope
        /// </summary>
        [DataMember(Name = "instrumentScope", EmitDefaultValue = true)]
        public string InstrumentScope { get; set; }

        /// <summary>
        /// Gets or Sets SettlementMode
        /// </summary>
        [DataMember(Name = "settlementMode", EmitDefaultValue = true)]
        public string SettlementMode { get; set; }

        /// <summary>
        /// Gets or Sets ContractualSettlementDate
        /// </summary>
        [DataMember(Name = "contractualSettlementDate", EmitDefaultValue = true)]
        public string ContractualSettlementDate { get; set; }

        /// <summary>
        /// Gets or Sets Units
        /// </summary>
        [DataMember(Name = "units", EmitDefaultValue = true)]
        public decimal Units { get; set; }

        /// <summary>
        /// Gets or Sets SettledUnits
        /// </summary>
        [DataMember(Name = "settledUnits", EmitDefaultValue = true)]
        public decimal SettledUnits { get; set; }

        /// <summary>
        /// Gets or Sets UnsettledUnits
        /// </summary>
        [DataMember(Name = "unsettledUnits", EmitDefaultValue = true)]
        public decimal UnsettledUnits { get; set; }

        /// <summary>
        /// Gets or Sets OverdueUnits
        /// </summary>
        [DataMember(Name = "overdueUnits", EmitDefaultValue = true)]
        public decimal OverdueUnits { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class MovementSettlementSummary {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  LusidInstrumentId: ").Append(LusidInstrumentId).Append("\n");
            sb.Append("  InstrumentScope: ").Append(InstrumentScope).Append("\n");
            sb.Append("  SettlementMode: ").Append(SettlementMode).Append("\n");
            sb.Append("  ContractualSettlementDate: ").Append(ContractualSettlementDate).Append("\n");
            sb.Append("  Units: ").Append(Units).Append("\n");
            sb.Append("  SettledUnits: ").Append(SettledUnits).Append("\n");
            sb.Append("  UnsettledUnits: ").Append(UnsettledUnits).Append("\n");
            sb.Append("  OverdueUnits: ").Append(OverdueUnits).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as MovementSettlementSummary);
        }

        /// <summary>
        /// Returns true if MovementSettlementSummary instances are equal
        /// </summary>
        /// <param name="input">Instance of MovementSettlementSummary to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MovementSettlementSummary input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.LusidInstrumentId == input.LusidInstrumentId ||
                    (this.LusidInstrumentId != null &&
                    this.LusidInstrumentId.Equals(input.LusidInstrumentId))
                ) && 
                (
                    this.InstrumentScope == input.InstrumentScope ||
                    (this.InstrumentScope != null &&
                    this.InstrumentScope.Equals(input.InstrumentScope))
                ) && 
                (
                    this.SettlementMode == input.SettlementMode ||
                    (this.SettlementMode != null &&
                    this.SettlementMode.Equals(input.SettlementMode))
                ) && 
                (
                    this.ContractualSettlementDate == input.ContractualSettlementDate ||
                    (this.ContractualSettlementDate != null &&
                    this.ContractualSettlementDate.Equals(input.ContractualSettlementDate))
                ) && 
                (
                    this.Units == input.Units ||
                    this.Units.Equals(input.Units)
                ) && 
                (
                    this.SettledUnits == input.SettledUnits ||
                    this.SettledUnits.Equals(input.SettledUnits)
                ) && 
                (
                    this.UnsettledUnits == input.UnsettledUnits ||
                    this.UnsettledUnits.Equals(input.UnsettledUnits)
                ) && 
                (
                    this.OverdueUnits == input.OverdueUnits ||
                    this.OverdueUnits.Equals(input.OverdueUnits)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.Type != null)
                {
                    hashCode = (hashCode * 59) + this.Type.GetHashCode();
                }
                if (this.LusidInstrumentId != null)
                {
                    hashCode = (hashCode * 59) + this.LusidInstrumentId.GetHashCode();
                }
                if (this.InstrumentScope != null)
                {
                    hashCode = (hashCode * 59) + this.InstrumentScope.GetHashCode();
                }
                if (this.SettlementMode != null)
                {
                    hashCode = (hashCode * 59) + this.SettlementMode.GetHashCode();
                }
                if (this.ContractualSettlementDate != null)
                {
                    hashCode = (hashCode * 59) + this.ContractualSettlementDate.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Units.GetHashCode();
                hashCode = (hashCode * 59) + this.SettledUnits.GetHashCode();
                hashCode = (hashCode * 59) + this.UnsettledUnits.GetHashCode();
                hashCode = (hashCode * 59) + this.OverdueUnits.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
