/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Lusid.Sdk.Client.OpenAPIDateConverter;

namespace Lusid.Sdk.Model
{
    /// <summary>
    /// GroupReconciliationUserReviewBreakCode
    /// </summary>
    [DataContract(Name = "GroupReconciliationUserReviewBreakCode")]
    public partial class GroupReconciliationUserReviewBreakCode : IEquatable<GroupReconciliationUserReviewBreakCode>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GroupReconciliationUserReviewBreakCode" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected GroupReconciliationUserReviewBreakCode() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="GroupReconciliationUserReviewBreakCode" /> class.
        /// </summary>
        /// <param name="breakCode">The break code of the reconciliation result. (required).</param>
        /// <param name="userId">Id of the user who made a User Review input..</param>
        /// <param name="asAtAdded">The timestamp of the added User Review input..</param>
        /// <param name="asAtInvalid">The timestamp when User Review input became invalid e.g. because of the different attribute values within the new run..</param>
        public GroupReconciliationUserReviewBreakCode(string breakCode = default(string), string userId = default(string), DateTimeOffset asAtAdded = default(DateTimeOffset), DateTimeOffset asAtInvalid = default(DateTimeOffset))
        {
            // to ensure "breakCode" is required (not null)
            if (breakCode == null)
            {
                throw new ArgumentNullException("breakCode is a required property for GroupReconciliationUserReviewBreakCode and cannot be null");
            }
            this.BreakCode = breakCode;
            this.UserId = userId;
            this.AsAtAdded = asAtAdded;
            this.AsAtInvalid = asAtInvalid;
        }

        /// <summary>
        /// The break code of the reconciliation result.
        /// </summary>
        /// <value>The break code of the reconciliation result.</value>
        [DataMember(Name = "breakCode", IsRequired = true, EmitDefaultValue = true)]
        public string BreakCode { get; set; }

        /// <summary>
        /// Id of the user who made a User Review input.
        /// </summary>
        /// <value>Id of the user who made a User Review input.</value>
        [DataMember(Name = "userId", EmitDefaultValue = true)]
        public string UserId { get; set; }

        /// <summary>
        /// The timestamp of the added User Review input.
        /// </summary>
        /// <value>The timestamp of the added User Review input.</value>
        [DataMember(Name = "asAtAdded", EmitDefaultValue = false)]
        public DateTimeOffset AsAtAdded { get; set; }

        /// <summary>
        /// The timestamp when User Review input became invalid e.g. because of the different attribute values within the new run.
        /// </summary>
        /// <value>The timestamp when User Review input became invalid e.g. because of the different attribute values within the new run.</value>
        [DataMember(Name = "asAtInvalid", EmitDefaultValue = false)]
        public DateTimeOffset AsAtInvalid { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class GroupReconciliationUserReviewBreakCode {\n");
            sb.Append("  BreakCode: ").Append(BreakCode).Append("\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("  AsAtAdded: ").Append(AsAtAdded).Append("\n");
            sb.Append("  AsAtInvalid: ").Append(AsAtInvalid).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GroupReconciliationUserReviewBreakCode);
        }

        /// <summary>
        /// Returns true if GroupReconciliationUserReviewBreakCode instances are equal
        /// </summary>
        /// <param name="input">Instance of GroupReconciliationUserReviewBreakCode to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GroupReconciliationUserReviewBreakCode input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.BreakCode == input.BreakCode ||
                    (this.BreakCode != null &&
                    this.BreakCode.Equals(input.BreakCode))
                ) && 
                (
                    this.UserId == input.UserId ||
                    (this.UserId != null &&
                    this.UserId.Equals(input.UserId))
                ) && 
                (
                    this.AsAtAdded == input.AsAtAdded ||
                    (this.AsAtAdded != null &&
                    this.AsAtAdded.Equals(input.AsAtAdded))
                ) && 
                (
                    this.AsAtInvalid == input.AsAtInvalid ||
                    (this.AsAtInvalid != null &&
                    this.AsAtInvalid.Equals(input.AsAtInvalid))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.BreakCode != null)
                {
                    hashCode = (hashCode * 59) + this.BreakCode.GetHashCode();
                }
                if (this.UserId != null)
                {
                    hashCode = (hashCode * 59) + this.UserId.GetHashCode();
                }
                if (this.AsAtAdded != null)
                {
                    hashCode = (hashCode * 59) + this.AsAtAdded.GetHashCode();
                }
                if (this.AsAtInvalid != null)
                {
                    hashCode = (hashCode * 59) + this.AsAtInvalid.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // BreakCode (string) minLength
            if (this.BreakCode != null && this.BreakCode.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for BreakCode, length must be greater than 1.", new [] { "BreakCode" });
            }

            // UserId (string) maxLength
            if (this.UserId != null && this.UserId.Length > 16384)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for UserId, length must be less than 16384.", new [] { "UserId" });
            }

            // UserId (string) minLength
            if (this.UserId != null && this.UserId.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for UserId, length must be greater than 0.", new [] { "UserId" });
            }

            yield break;
        }
    }
}
