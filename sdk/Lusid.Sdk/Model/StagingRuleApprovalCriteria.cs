/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Lusid.Sdk.Client.OpenAPIDateConverter;

namespace Lusid.Sdk.Model
{
    /// <summary>
    /// StagingRuleApprovalCriteria
    /// </summary>
    [DataContract(Name = "StagingRuleApprovalCriteria")]
    public partial class StagingRuleApprovalCriteria : IEquatable<StagingRuleApprovalCriteria>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="StagingRuleApprovalCriteria" /> class.
        /// </summary>
        /// <param name="requiredApprovals">requiredApprovals.</param>
        /// <param name="decidingUser">decidingUser.</param>
        /// <param name="stagingUserCanDecide">stagingUserCanDecide.</param>
        public StagingRuleApprovalCriteria(int? requiredApprovals = default(int?), string decidingUser = default(string), bool? stagingUserCanDecide = default(bool?))
        {
            this.RequiredApprovals = requiredApprovals;
            this.DecidingUser = decidingUser;
            this.StagingUserCanDecide = stagingUserCanDecide;
        }

        /// <summary>
        /// Gets or Sets RequiredApprovals
        /// </summary>
        [DataMember(Name = "requiredApprovals", EmitDefaultValue = true)]
        public int? RequiredApprovals { get; set; }

        /// <summary>
        /// Gets or Sets DecidingUser
        /// </summary>
        [DataMember(Name = "decidingUser", EmitDefaultValue = true)]
        public string DecidingUser { get; set; }

        /// <summary>
        /// Gets or Sets StagingUserCanDecide
        /// </summary>
        [DataMember(Name = "stagingUserCanDecide", EmitDefaultValue = true)]
        public bool? StagingUserCanDecide { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class StagingRuleApprovalCriteria {\n");
            sb.Append("  RequiredApprovals: ").Append(RequiredApprovals).Append("\n");
            sb.Append("  DecidingUser: ").Append(DecidingUser).Append("\n");
            sb.Append("  StagingUserCanDecide: ").Append(StagingUserCanDecide).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as StagingRuleApprovalCriteria);
        }

        /// <summary>
        /// Returns true if StagingRuleApprovalCriteria instances are equal
        /// </summary>
        /// <param name="input">Instance of StagingRuleApprovalCriteria to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(StagingRuleApprovalCriteria input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.RequiredApprovals == input.RequiredApprovals ||
                    (this.RequiredApprovals != null &&
                    this.RequiredApprovals.Equals(input.RequiredApprovals))
                ) && 
                (
                    this.DecidingUser == input.DecidingUser ||
                    (this.DecidingUser != null &&
                    this.DecidingUser.Equals(input.DecidingUser))
                ) && 
                (
                    this.StagingUserCanDecide == input.StagingUserCanDecide ||
                    (this.StagingUserCanDecide != null &&
                    this.StagingUserCanDecide.Equals(input.StagingUserCanDecide))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.RequiredApprovals != null)
                {
                    hashCode = (hashCode * 59) + this.RequiredApprovals.GetHashCode();
                }
                if (this.DecidingUser != null)
                {
                    hashCode = (hashCode * 59) + this.DecidingUser.GetHashCode();
                }
                if (this.StagingUserCanDecide != null)
                {
                    hashCode = (hashCode * 59) + this.StagingUserCanDecide.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // DecidingUser (string) maxLength
            if (this.DecidingUser != null && this.DecidingUser.Length > 16384)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for DecidingUser, length must be less than 16384.", new [] { "DecidingUser" });
            }

            // DecidingUser (string) minLength
            if (this.DecidingUser != null && this.DecidingUser.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for DecidingUser, length must be greater than 0.", new [] { "DecidingUser" });
            }

            yield break;
        }
    }
}
