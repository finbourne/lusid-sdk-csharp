/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using JsonSubTypes;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Lusid.Sdk.Client.OpenAPIDateConverter;

namespace Lusid.Sdk.Model
{
    /// <summary>
    /// LUSID representation of a Term Deposit.
    /// </summary>
    [DataContract(Name = "TermDeposit")]
    [JsonConverter(typeof(JsonSubtypes), "InstrumentType")]
    public partial class TermDeposit : LusidInstrument, IEquatable<TermDeposit>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TermDeposit" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected TermDeposit() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="TermDeposit" /> class.
        /// </summary>
        /// <param name="startDate">The start date of the instrument. For term deposits this is the start date of the interest calculation period. (required).</param>
        /// <param name="maturityDate">The maturity date of the instrument. For term deposits this is the last date of the interest calculation period. (required).</param>
        /// <param name="contractSize">The principal amount of the term deposit. (required).</param>
        /// <param name="flowConvention">flowConvention (required).</param>
        /// <param name="rate">The fixed rate for the term deposit. Specified as a decimal, e.g 0.03 is meant to be 3% interest (required).</param>
        /// <param name="domCcy">The domestic currency of the instrument. This should be the same as the Currency set on the FlowConventions.  You do not need to populate this field for Term Deposits in LUSID as all functionality is driven by the Currency set on the FlowConventions.  LUSID will not store values saved on this field..</param>
        /// <param name="instrumentType">The available values are: QuotedSecurity, InterestRateSwap, FxForward, Future, ExoticInstrument, FxOption, CreditDefaultSwap, InterestRateSwaption, Bond, EquityOption, FixedLeg, FloatingLeg, BespokeCashFlowsLeg, Unknown, TermDeposit, ContractForDifference, EquitySwap, CashPerpetual, CapFloor, CashSettled, CdsIndex, Basket, FundingLeg, FxSwap, ForwardRateAgreement, SimpleInstrument, Repo, Equity, ExchangeTradedOption, ReferenceInstrument, ComplexBond, InflationLinkedBond, InflationSwap, SimpleCashFlowLoan, TotalReturnSwap, InflationLeg, FundShareClass, FlexibleLoan, UnsettledCash, Cash, MasteredInstrument, LoanFacility, FlexibleDeposit (required) (default to &quot;TermDeposit&quot;).</param>
        public TermDeposit(DateTimeOffset startDate = default(DateTimeOffset), DateTimeOffset maturityDate = default(DateTimeOffset), decimal contractSize = default(decimal), FlowConventions flowConvention = default(FlowConventions), decimal rate = default(decimal), string domCcy = default(string), InstrumentTypeEnum instrumentType = default(InstrumentTypeEnum)) : base(instrumentType)
        {
            this.StartDate = startDate;
            this.MaturityDate = maturityDate;
            this.ContractSize = contractSize;
            // to ensure "flowConvention" is required (not null)
            if (flowConvention == null)
            {
                throw new ArgumentNullException("flowConvention is a required property for TermDeposit and cannot be null");
            }
            this.FlowConvention = flowConvention;
            this.Rate = rate;
            this.DomCcy = domCcy;
        }

        /// <summary>
        /// The start date of the instrument. For term deposits this is the start date of the interest calculation period.
        /// </summary>
        /// <value>The start date of the instrument. For term deposits this is the start date of the interest calculation period.</value>
        [DataMember(Name = "startDate", IsRequired = true, EmitDefaultValue = true)]
        public DateTimeOffset StartDate { get; set; }

        /// <summary>
        /// The maturity date of the instrument. For term deposits this is the last date of the interest calculation period.
        /// </summary>
        /// <value>The maturity date of the instrument. For term deposits this is the last date of the interest calculation period.</value>
        [DataMember(Name = "maturityDate", IsRequired = true, EmitDefaultValue = true)]
        public DateTimeOffset MaturityDate { get; set; }

        /// <summary>
        /// The principal amount of the term deposit.
        /// </summary>
        /// <value>The principal amount of the term deposit.</value>
        [DataMember(Name = "contractSize", IsRequired = true, EmitDefaultValue = true)]
        public decimal ContractSize { get; set; }

        /// <summary>
        /// Gets or Sets FlowConvention
        /// </summary>
        [DataMember(Name = "flowConvention", IsRequired = true, EmitDefaultValue = true)]
        public FlowConventions FlowConvention { get; set; }

        /// <summary>
        /// The fixed rate for the term deposit. Specified as a decimal, e.g 0.03 is meant to be 3% interest
        /// </summary>
        /// <value>The fixed rate for the term deposit. Specified as a decimal, e.g 0.03 is meant to be 3% interest</value>
        [DataMember(Name = "rate", IsRequired = true, EmitDefaultValue = true)]
        public decimal Rate { get; set; }

        /// <summary>
        /// The domestic currency of the instrument. This should be the same as the Currency set on the FlowConventions.  You do not need to populate this field for Term Deposits in LUSID as all functionality is driven by the Currency set on the FlowConventions.  LUSID will not store values saved on this field.
        /// </summary>
        /// <value>The domestic currency of the instrument. This should be the same as the Currency set on the FlowConventions.  You do not need to populate this field for Term Deposits in LUSID as all functionality is driven by the Currency set on the FlowConventions.  LUSID will not store values saved on this field.</value>
        [DataMember(Name = "domCcy", EmitDefaultValue = true)]
        public string DomCcy { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class TermDeposit {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  StartDate: ").Append(StartDate).Append("\n");
            sb.Append("  MaturityDate: ").Append(MaturityDate).Append("\n");
            sb.Append("  ContractSize: ").Append(ContractSize).Append("\n");
            sb.Append("  FlowConvention: ").Append(FlowConvention).Append("\n");
            sb.Append("  Rate: ").Append(Rate).Append("\n");
            sb.Append("  DomCcy: ").Append(DomCcy).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TermDeposit);
        }

        /// <summary>
        /// Returns true if TermDeposit instances are equal
        /// </summary>
        /// <param name="input">Instance of TermDeposit to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TermDeposit input)
        {
            if (input == null)
            {
                return false;
            }
            return base.Equals(input) && 
                (
                    this.StartDate == input.StartDate ||
                    (this.StartDate != null &&
                    this.StartDate.Equals(input.StartDate))
                ) && base.Equals(input) && 
                (
                    this.MaturityDate == input.MaturityDate ||
                    (this.MaturityDate != null &&
                    this.MaturityDate.Equals(input.MaturityDate))
                ) && base.Equals(input) && 
                (
                    this.ContractSize == input.ContractSize ||
                    this.ContractSize.Equals(input.ContractSize)
                ) && base.Equals(input) && 
                (
                    this.FlowConvention == input.FlowConvention ||
                    (this.FlowConvention != null &&
                    this.FlowConvention.Equals(input.FlowConvention))
                ) && base.Equals(input) && 
                (
                    this.Rate == input.Rate ||
                    this.Rate.Equals(input.Rate)
                ) && base.Equals(input) && 
                (
                    this.DomCcy == input.DomCcy ||
                    (this.DomCcy != null &&
                    this.DomCcy.Equals(input.DomCcy))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = base.GetHashCode();
                if (this.StartDate != null)
                {
                    hashCode = (hashCode * 59) + this.StartDate.GetHashCode();
                }
                if (this.MaturityDate != null)
                {
                    hashCode = (hashCode * 59) + this.MaturityDate.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.ContractSize.GetHashCode();
                if (this.FlowConvention != null)
                {
                    hashCode = (hashCode * 59) + this.FlowConvention.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Rate.GetHashCode();
                if (this.DomCcy != null)
                {
                    hashCode = (hashCode * 59) + this.DomCcy.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            return this.BaseValidate(validationContext);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        protected IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> BaseValidate(ValidationContext validationContext)
        {
            foreach (var x in base.BaseValidate(validationContext))
            {
                yield return x;
            }
            yield break;
        }
    }
}
