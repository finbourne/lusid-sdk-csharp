/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using JsonSubTypes;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Lusid.Sdk.Client.OpenAPIDateConverter;

namespace Lusid.Sdk.Model
{
    /// <summary>
    /// Definition of FlexibleRepoCashFlowEvent which represents a cash transfer as part of a repo contract modelled  as a FlexibleRepo, either as part of the purchase leg or repurchase leg, or any early closure.
    /// </summary>
    [DataContract(Name = "FlexibleRepoCashFlowEvent")]
    [JsonConverter(typeof(JsonSubtypes), "InstrumentEventType")]
    public partial class FlexibleRepoCashFlowEvent : InstrumentEvent, IEquatable<FlexibleRepoCashFlowEvent>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FlexibleRepoCashFlowEvent" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected FlexibleRepoCashFlowEvent() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="FlexibleRepoCashFlowEvent" /> class.
        /// </summary>
        /// <param name="settlementDate">Date that the cash payment settles. This is a required field..</param>
        /// <param name="entitlementDate">Date the recipient of the cash payment is entitled to receive the cash. This is a required field..</param>
        /// <param name="currency">Currency of the payment. This is a required field. (required).</param>
        /// <param name="cashFlowPerUnit">Amount of cash to be paid per unit of the instrument.  This amount is signed to indicate direction of the payment, i.e. as part of the purchase leg vs the repurchase leg.  This field is optional. If not specified, the system will not generate a virtual transaction for this event..</param>
        /// <param name="instrumentEventType">The Type of Event. The available values are: TransitionEvent, InformationalEvent, OpenEvent, CloseEvent, StockSplitEvent, BondDefaultEvent, CashDividendEvent, AmortisationEvent, CashFlowEvent, ExerciseEvent, ResetEvent, TriggerEvent, RawVendorEvent, InformationalErrorEvent, BondCouponEvent, DividendReinvestmentEvent, AccumulationEvent, BondPrincipalEvent, DividendOptionEvent, MaturityEvent, FxForwardSettlementEvent, ExpiryEvent, ScripDividendEvent, StockDividendEvent, ReverseStockSplitEvent, CapitalDistributionEvent, SpinOffEvent, MergerEvent, FutureExpiryEvent, SwapCashFlowEvent, SwapPrincipalEvent, CreditPremiumCashFlowEvent, CdsCreditEvent, CdxCreditEvent, MbsCouponEvent, MbsPrincipalEvent, BonusIssueEvent, MbsPrincipalWriteOffEvent, MbsInterestDeferralEvent, MbsInterestShortfallEvent, TenderEvent, CallOnIntermediateSecuritiesEvent, IntermediateSecuritiesDistributionEvent, OptionExercisePhysicalEvent, OptionExerciseCashEvent, ProtectionPayoutCashFlowEvent, TermDepositInterestEvent, TermDepositPrincipalEvent, EarlyRedemptionEvent, FutureMarkToMarketEvent, AdjustGlobalCommitmentEvent, ContractInitialisationEvent, DrawdownEvent, LoanInterestRepaymentEvent, UpdateDepositAmountEvent, LoanPrincipalRepaymentEvent, DepositInterestPaymentEvent, DepositCloseEvent, LoanFacilityContractRolloverEvent, RepurchaseOfferEvent, RepoPartialClosureEvent, RepoCashFlowEvent, FlexibleRepoInterestPaymentEvent, FlexibleRepoCashFlowEvent, FlexibleRepoCollateralEvent, ConversionEvent, FlexibleRepoPartialClosureEvent, FlexibleRepoFullClosureEvent (required) (default to &quot;FlexibleRepoCashFlowEvent&quot;).</param>
        public FlexibleRepoCashFlowEvent(DateTimeOffset settlementDate = default(DateTimeOffset), DateTimeOffset entitlementDate = default(DateTimeOffset), string currency = default(string), decimal? cashFlowPerUnit = default(decimal?), InstrumentEventTypeEnum instrumentEventType = default(InstrumentEventTypeEnum)) : base(instrumentEventType)
        {
            // to ensure "currency" is required (not null)
            if (currency == null)
            {
                throw new ArgumentNullException("currency is a required property for FlexibleRepoCashFlowEvent and cannot be null");
            }
            this.Currency = currency;
            this.SettlementDate = settlementDate;
            this.EntitlementDate = entitlementDate;
            this.CashFlowPerUnit = cashFlowPerUnit;
        }

        /// <summary>
        /// Date that the cash payment settles. This is a required field.
        /// </summary>
        /// <value>Date that the cash payment settles. This is a required field.</value>
        [DataMember(Name = "settlementDate", EmitDefaultValue = false)]
        public DateTimeOffset SettlementDate { get; set; }

        /// <summary>
        /// Date the recipient of the cash payment is entitled to receive the cash. This is a required field.
        /// </summary>
        /// <value>Date the recipient of the cash payment is entitled to receive the cash. This is a required field.</value>
        [DataMember(Name = "entitlementDate", EmitDefaultValue = false)]
        public DateTimeOffset EntitlementDate { get; set; }

        /// <summary>
        /// Currency of the payment. This is a required field.
        /// </summary>
        /// <value>Currency of the payment. This is a required field.</value>
        [DataMember(Name = "currency", IsRequired = true, EmitDefaultValue = true)]
        public string Currency { get; set; }

        /// <summary>
        /// Amount of cash to be paid per unit of the instrument.  This amount is signed to indicate direction of the payment, i.e. as part of the purchase leg vs the repurchase leg.  This field is optional. If not specified, the system will not generate a virtual transaction for this event.
        /// </summary>
        /// <value>Amount of cash to be paid per unit of the instrument.  This amount is signed to indicate direction of the payment, i.e. as part of the purchase leg vs the repurchase leg.  This field is optional. If not specified, the system will not generate a virtual transaction for this event.</value>
        [DataMember(Name = "cashFlowPerUnit", EmitDefaultValue = true)]
        public decimal? CashFlowPerUnit { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class FlexibleRepoCashFlowEvent {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  SettlementDate: ").Append(SettlementDate).Append("\n");
            sb.Append("  EntitlementDate: ").Append(EntitlementDate).Append("\n");
            sb.Append("  Currency: ").Append(Currency).Append("\n");
            sb.Append("  CashFlowPerUnit: ").Append(CashFlowPerUnit).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as FlexibleRepoCashFlowEvent);
        }

        /// <summary>
        /// Returns true if FlexibleRepoCashFlowEvent instances are equal
        /// </summary>
        /// <param name="input">Instance of FlexibleRepoCashFlowEvent to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FlexibleRepoCashFlowEvent input)
        {
            if (input == null)
            {
                return false;
            }
            return base.Equals(input) && 
                (
                    this.SettlementDate == input.SettlementDate ||
                    (this.SettlementDate != null &&
                    this.SettlementDate.Equals(input.SettlementDate))
                ) && base.Equals(input) && 
                (
                    this.EntitlementDate == input.EntitlementDate ||
                    (this.EntitlementDate != null &&
                    this.EntitlementDate.Equals(input.EntitlementDate))
                ) && base.Equals(input) && 
                (
                    this.Currency == input.Currency ||
                    (this.Currency != null &&
                    this.Currency.Equals(input.Currency))
                ) && base.Equals(input) && 
                (
                    this.CashFlowPerUnit == input.CashFlowPerUnit ||
                    (this.CashFlowPerUnit != null &&
                    this.CashFlowPerUnit.Equals(input.CashFlowPerUnit))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = base.GetHashCode();
                if (this.SettlementDate != null)
                {
                    hashCode = (hashCode * 59) + this.SettlementDate.GetHashCode();
                }
                if (this.EntitlementDate != null)
                {
                    hashCode = (hashCode * 59) + this.EntitlementDate.GetHashCode();
                }
                if (this.Currency != null)
                {
                    hashCode = (hashCode * 59) + this.Currency.GetHashCode();
                }
                if (this.CashFlowPerUnit != null)
                {
                    hashCode = (hashCode * 59) + this.CashFlowPerUnit.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            return this.BaseValidate(validationContext);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        protected IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> BaseValidate(ValidationContext validationContext)
        {
            foreach (var x in base.BaseValidate(validationContext))
            {
                yield return x;
            }
            yield break;
        }
    }
}
