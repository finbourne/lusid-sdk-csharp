/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Lusid.Sdk.Client.OpenAPIDateConverter;

namespace Lusid.Sdk.Model
{
    /// <summary>
    /// CancelledPlacementResult
    /// </summary>
    [DataContract(Name = "CancelledPlacementResult")]
    public partial class CancelledPlacementResult : IEquatable<CancelledPlacementResult>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CancelledPlacementResult" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CancelledPlacementResult() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CancelledPlacementResult" /> class.
        /// </summary>
        /// <param name="placementState">placementState.</param>
        /// <param name="cancelledChildPlacements">Child placements which have also been cancelled following cancellation of the parent (required).</param>
        public CancelledPlacementResult(Placement placementState = default(Placement), List<ResourceId> cancelledChildPlacements = default(List<ResourceId>))
        {
            // to ensure "cancelledChildPlacements" is required (not null)
            if (cancelledChildPlacements == null)
            {
                throw new ArgumentNullException("cancelledChildPlacements is a required property for CancelledPlacementResult and cannot be null");
            }
            this.CancelledChildPlacements = cancelledChildPlacements;
            this.PlacementState = placementState;
        }

        /// <summary>
        /// Gets or Sets PlacementState
        /// </summary>
        [DataMember(Name = "placementState", EmitDefaultValue = false)]
        public Placement PlacementState { get; set; }

        /// <summary>
        /// Child placements which have also been cancelled following cancellation of the parent
        /// </summary>
        /// <value>Child placements which have also been cancelled following cancellation of the parent</value>
        [DataMember(Name = "cancelledChildPlacements", IsRequired = true, EmitDefaultValue = true)]
        public List<ResourceId> CancelledChildPlacements { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CancelledPlacementResult {\n");
            sb.Append("  PlacementState: ").Append(PlacementState).Append("\n");
            sb.Append("  CancelledChildPlacements: ").Append(CancelledChildPlacements).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CancelledPlacementResult);
        }

        /// <summary>
        /// Returns true if CancelledPlacementResult instances are equal
        /// </summary>
        /// <param name="input">Instance of CancelledPlacementResult to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CancelledPlacementResult input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.PlacementState == input.PlacementState ||
                    (this.PlacementState != null &&
                    this.PlacementState.Equals(input.PlacementState))
                ) && 
                (
                    this.CancelledChildPlacements == input.CancelledChildPlacements ||
                    this.CancelledChildPlacements != null &&
                    input.CancelledChildPlacements != null &&
                    this.CancelledChildPlacements.SequenceEqual(input.CancelledChildPlacements)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.PlacementState != null)
                {
                    hashCode = (hashCode * 59) + this.PlacementState.GetHashCode();
                }
                if (this.CancelledChildPlacements != null)
                {
                    hashCode = (hashCode * 59) + this.CancelledChildPlacements.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
