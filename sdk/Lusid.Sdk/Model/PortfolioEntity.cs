/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Lusid.Sdk.Client.OpenAPIDateConverter;

namespace Lusid.Sdk.Model
{
    /// <summary>
    /// A list of portfolios.
    /// </summary>
    [DataContract(Name = "PortfolioEntity")]
    public partial class PortfolioEntity : IEquatable<PortfolioEntity>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PortfolioEntity" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected PortfolioEntity() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="PortfolioEntity" /> class.
        /// </summary>
        /// <param name="href">The specific Uniform Resource Identifier (URI) for this resource at the requested effective and asAt datetime. (required).</param>
        /// <param name="entityUniqueId">The unique id of the entity (required).</param>
        /// <param name="status">The status of the entity at the current time (required).</param>
        /// <param name="prevailingPortfolio">prevailingPortfolio.</param>
        /// <param name="deletedPortfolio">deletedPortfolio.</param>
        /// <param name="links">links.</param>
        public PortfolioEntity(string href = default(string), string entityUniqueId = default(string), string status = default(string), PortfolioWithoutHref prevailingPortfolio = default(PortfolioWithoutHref), PortfolioWithoutHref deletedPortfolio = default(PortfolioWithoutHref), List<Link> links = default(List<Link>))
        {
            // to ensure "href" is required (not null)
            if (href == null)
            {
                throw new ArgumentNullException("href is a required property for PortfolioEntity and cannot be null");
            }
            this.Href = href;
            // to ensure "entityUniqueId" is required (not null)
            if (entityUniqueId == null)
            {
                throw new ArgumentNullException("entityUniqueId is a required property for PortfolioEntity and cannot be null");
            }
            this.EntityUniqueId = entityUniqueId;
            // to ensure "status" is required (not null)
            if (status == null)
            {
                throw new ArgumentNullException("status is a required property for PortfolioEntity and cannot be null");
            }
            this.Status = status;
            this.PrevailingPortfolio = prevailingPortfolio;
            this.DeletedPortfolio = deletedPortfolio;
            this.Links = links;
        }

        /// <summary>
        /// The specific Uniform Resource Identifier (URI) for this resource at the requested effective and asAt datetime.
        /// </summary>
        /// <value>The specific Uniform Resource Identifier (URI) for this resource at the requested effective and asAt datetime.</value>
        [DataMember(Name = "href", IsRequired = true, EmitDefaultValue = true)]
        public string Href { get; set; }

        /// <summary>
        /// The unique id of the entity
        /// </summary>
        /// <value>The unique id of the entity</value>
        [DataMember(Name = "entityUniqueId", IsRequired = true, EmitDefaultValue = true)]
        public string EntityUniqueId { get; set; }

        /// <summary>
        /// The status of the entity at the current time
        /// </summary>
        /// <value>The status of the entity at the current time</value>
        [DataMember(Name = "status", IsRequired = true, EmitDefaultValue = true)]
        public string Status { get; set; }

        /// <summary>
        /// Gets or Sets PrevailingPortfolio
        /// </summary>
        [DataMember(Name = "prevailingPortfolio", EmitDefaultValue = false)]
        public PortfolioWithoutHref PrevailingPortfolio { get; set; }

        /// <summary>
        /// Gets or Sets DeletedPortfolio
        /// </summary>
        [DataMember(Name = "deletedPortfolio", EmitDefaultValue = false)]
        public PortfolioWithoutHref DeletedPortfolio { get; set; }

        /// <summary>
        /// Gets or Sets Links
        /// </summary>
        [DataMember(Name = "links", EmitDefaultValue = true)]
        public List<Link> Links { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PortfolioEntity {\n");
            sb.Append("  Href: ").Append(Href).Append("\n");
            sb.Append("  EntityUniqueId: ").Append(EntityUniqueId).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  PrevailingPortfolio: ").Append(PrevailingPortfolio).Append("\n");
            sb.Append("  DeletedPortfolio: ").Append(DeletedPortfolio).Append("\n");
            sb.Append("  Links: ").Append(Links).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PortfolioEntity);
        }

        /// <summary>
        /// Returns true if PortfolioEntity instances are equal
        /// </summary>
        /// <param name="input">Instance of PortfolioEntity to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PortfolioEntity input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Href == input.Href ||
                    (this.Href != null &&
                    this.Href.Equals(input.Href))
                ) && 
                (
                    this.EntityUniqueId == input.EntityUniqueId ||
                    (this.EntityUniqueId != null &&
                    this.EntityUniqueId.Equals(input.EntityUniqueId))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.PrevailingPortfolio == input.PrevailingPortfolio ||
                    (this.PrevailingPortfolio != null &&
                    this.PrevailingPortfolio.Equals(input.PrevailingPortfolio))
                ) && 
                (
                    this.DeletedPortfolio == input.DeletedPortfolio ||
                    (this.DeletedPortfolio != null &&
                    this.DeletedPortfolio.Equals(input.DeletedPortfolio))
                ) && 
                (
                    this.Links == input.Links ||
                    this.Links != null &&
                    input.Links != null &&
                    this.Links.SequenceEqual(input.Links)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Href != null)
                {
                    hashCode = (hashCode * 59) + this.Href.GetHashCode();
                }
                if (this.EntityUniqueId != null)
                {
                    hashCode = (hashCode * 59) + this.EntityUniqueId.GetHashCode();
                }
                if (this.Status != null)
                {
                    hashCode = (hashCode * 59) + this.Status.GetHashCode();
                }
                if (this.PrevailingPortfolio != null)
                {
                    hashCode = (hashCode * 59) + this.PrevailingPortfolio.GetHashCode();
                }
                if (this.DeletedPortfolio != null)
                {
                    hashCode = (hashCode * 59) + this.DeletedPortfolio.GetHashCode();
                }
                if (this.Links != null)
                {
                    hashCode = (hashCode * 59) + this.Links.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // EntityUniqueId (string) minLength
            if (this.EntityUniqueId != null && this.EntityUniqueId.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for EntityUniqueId, length must be greater than 1.", new [] { "EntityUniqueId" });
            }

            // Status (string) minLength
            if (this.Status != null && this.Status.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Status, length must be greater than 1.", new [] { "Status" });
            }

            yield break;
        }
    }
}
