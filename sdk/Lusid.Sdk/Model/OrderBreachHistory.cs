/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Lusid.Sdk.Client.OpenAPIDateConverter;

namespace Lusid.Sdk.Model
{
    /// <summary>
    /// OrderBreachHistory
    /// </summary>
    [DataContract(Name = "OrderBreachHistory")]
    public partial class OrderBreachHistory : IEquatable<OrderBreachHistory>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="OrderBreachHistory" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected OrderBreachHistory() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="OrderBreachHistory" /> class.
        /// </summary>
        /// <param name="id">id (required).</param>
        /// <param name="orderId">orderId (required).</param>
        /// <param name="runId">runId (required).</param>
        /// <param name="breachesByRule">Compliance rule breaches associations with the order and run..</param>
        /// <param name="asAt">The asAt datetime at which the order breach was created in LUSID. (required).</param>
        public OrderBreachHistory(ResourceId id = default(ResourceId), ResourceId orderId = default(ResourceId), ResourceId runId = default(ResourceId), Dictionary<string, List<OrderRuleBreach>> breachesByRule = default(Dictionary<string, List<OrderRuleBreach>>), DateTimeOffset asAt = default(DateTimeOffset))
        {
            // to ensure "id" is required (not null)
            if (id == null)
            {
                throw new ArgumentNullException("id is a required property for OrderBreachHistory and cannot be null");
            }
            this.Id = id;
            // to ensure "orderId" is required (not null)
            if (orderId == null)
            {
                throw new ArgumentNullException("orderId is a required property for OrderBreachHistory and cannot be null");
            }
            this.OrderId = orderId;
            // to ensure "runId" is required (not null)
            if (runId == null)
            {
                throw new ArgumentNullException("runId is a required property for OrderBreachHistory and cannot be null");
            }
            this.RunId = runId;
            this.AsAt = asAt;
            this.BreachesByRule = breachesByRule;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = true)]
        public ResourceId Id { get; set; }

        /// <summary>
        /// Gets or Sets OrderId
        /// </summary>
        [DataMember(Name = "orderId", IsRequired = true, EmitDefaultValue = true)]
        public ResourceId OrderId { get; set; }

        /// <summary>
        /// Gets or Sets RunId
        /// </summary>
        [DataMember(Name = "runId", IsRequired = true, EmitDefaultValue = true)]
        public ResourceId RunId { get; set; }

        /// <summary>
        /// Compliance rule breaches associations with the order and run.
        /// </summary>
        /// <value>Compliance rule breaches associations with the order and run.</value>
        [DataMember(Name = "breachesByRule", EmitDefaultValue = true)]
        public Dictionary<string, List<OrderRuleBreach>> BreachesByRule { get; set; }

        /// <summary>
        /// The asAt datetime at which the order breach was created in LUSID.
        /// </summary>
        /// <value>The asAt datetime at which the order breach was created in LUSID.</value>
        [DataMember(Name = "asAt", IsRequired = true, EmitDefaultValue = true)]
        public DateTimeOffset AsAt { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class OrderBreachHistory {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  OrderId: ").Append(OrderId).Append("\n");
            sb.Append("  RunId: ").Append(RunId).Append("\n");
            sb.Append("  BreachesByRule: ").Append(BreachesByRule).Append("\n");
            sb.Append("  AsAt: ").Append(AsAt).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as OrderBreachHistory);
        }

        /// <summary>
        /// Returns true if OrderBreachHistory instances are equal
        /// </summary>
        /// <param name="input">Instance of OrderBreachHistory to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OrderBreachHistory input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.OrderId == input.OrderId ||
                    (this.OrderId != null &&
                    this.OrderId.Equals(input.OrderId))
                ) && 
                (
                    this.RunId == input.RunId ||
                    (this.RunId != null &&
                    this.RunId.Equals(input.RunId))
                ) && 
                (
                    this.BreachesByRule == input.BreachesByRule ||
                    this.BreachesByRule != null &&
                    input.BreachesByRule != null &&
                    this.BreachesByRule.SequenceEqual(input.BreachesByRule)
                ) && 
                (
                    this.AsAt == input.AsAt ||
                    (this.AsAt != null &&
                    this.AsAt.Equals(input.AsAt))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                {
                    hashCode = (hashCode * 59) + this.Id.GetHashCode();
                }
                if (this.OrderId != null)
                {
                    hashCode = (hashCode * 59) + this.OrderId.GetHashCode();
                }
                if (this.RunId != null)
                {
                    hashCode = (hashCode * 59) + this.RunId.GetHashCode();
                }
                if (this.BreachesByRule != null)
                {
                    hashCode = (hashCode * 59) + this.BreachesByRule.GetHashCode();
                }
                if (this.AsAt != null)
                {
                    hashCode = (hashCode * 59) + this.AsAt.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
