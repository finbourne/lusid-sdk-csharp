/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Lusid.Sdk.Client.OpenAPIDateConverter;

namespace Lusid.Sdk.Model
{
    /// <summary>
    /// FundConfiguration
    /// </summary>
    [DataContract(Name = "FundConfiguration")]
    public partial class FundConfiguration : IEquatable<FundConfiguration>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FundConfiguration" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected FundConfiguration() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="FundConfiguration" /> class.
        /// </summary>
        /// <param name="href">The specific Uniform Resource Identifier (URI) for this resource at the requested effective and asAt datetime..</param>
        /// <param name="id">id (required).</param>
        /// <param name="displayName">The name of the FundConfiguration..</param>
        /// <param name="description">A description for the FundConfiguration..</param>
        /// <param name="dealingFilters">The set of filters used to decide which JE lines are included in the dealing..</param>
        /// <param name="pnlFilters">The set of filters used to decide which JE lines are included in the PnL..</param>
        /// <param name="backOutFilters">The set of filters used to decide which JE lines are included in the back outs..</param>
        /// <param name="externalFeeFilters">The set of filters used to decide which JE lines are used for inputting fees from an external source..</param>
        /// <param name="properties">A set of properties for the Fund Configuration..</param>
        /// <param name="version">version.</param>
        /// <param name="links">links.</param>
        public FundConfiguration(string href = default(string), ResourceId id = default(ResourceId), string displayName = default(string), string description = default(string), List<ComponentFilter> dealingFilters = default(List<ComponentFilter>), List<ComponentFilter> pnlFilters = default(List<ComponentFilter>), List<ComponentFilter> backOutFilters = default(List<ComponentFilter>), List<ExternalFeeComponentFilter> externalFeeFilters = default(List<ExternalFeeComponentFilter>), Dictionary<string, Property> properties = default(Dictionary<string, Property>), ModelVersion version = default(ModelVersion), List<Link> links = default(List<Link>))
        {
            // to ensure "id" is required (not null)
            if (id == null)
            {
                throw new ArgumentNullException("id is a required property for FundConfiguration and cannot be null");
            }
            this.Id = id;
            this.Href = href;
            this.DisplayName = displayName;
            this.Description = description;
            this.DealingFilters = dealingFilters;
            this.PnlFilters = pnlFilters;
            this.BackOutFilters = backOutFilters;
            this.ExternalFeeFilters = externalFeeFilters;
            this.Properties = properties;
            this._Version = version;
            this.Links = links;
        }

        /// <summary>
        /// The specific Uniform Resource Identifier (URI) for this resource at the requested effective and asAt datetime.
        /// </summary>
        /// <value>The specific Uniform Resource Identifier (URI) for this resource at the requested effective and asAt datetime.</value>
        [DataMember(Name = "href", EmitDefaultValue = true)]
        public string Href { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = true)]
        public ResourceId Id { get; set; }

        /// <summary>
        /// The name of the FundConfiguration.
        /// </summary>
        /// <value>The name of the FundConfiguration.</value>
        [DataMember(Name = "displayName", EmitDefaultValue = true)]
        public string DisplayName { get; set; }

        /// <summary>
        /// A description for the FundConfiguration.
        /// </summary>
        /// <value>A description for the FundConfiguration.</value>
        [DataMember(Name = "description", EmitDefaultValue = true)]
        public string Description { get; set; }

        /// <summary>
        /// The set of filters used to decide which JE lines are included in the dealing.
        /// </summary>
        /// <value>The set of filters used to decide which JE lines are included in the dealing.</value>
        [DataMember(Name = "dealingFilters", EmitDefaultValue = true)]
        public List<ComponentFilter> DealingFilters { get; set; }

        /// <summary>
        /// The set of filters used to decide which JE lines are included in the PnL.
        /// </summary>
        /// <value>The set of filters used to decide which JE lines are included in the PnL.</value>
        [DataMember(Name = "pnlFilters", EmitDefaultValue = true)]
        public List<ComponentFilter> PnlFilters { get; set; }

        /// <summary>
        /// The set of filters used to decide which JE lines are included in the back outs.
        /// </summary>
        /// <value>The set of filters used to decide which JE lines are included in the back outs.</value>
        [DataMember(Name = "backOutFilters", EmitDefaultValue = true)]
        public List<ComponentFilter> BackOutFilters { get; set; }

        /// <summary>
        /// The set of filters used to decide which JE lines are used for inputting fees from an external source.
        /// </summary>
        /// <value>The set of filters used to decide which JE lines are used for inputting fees from an external source.</value>
        [DataMember(Name = "externalFeeFilters", EmitDefaultValue = true)]
        public List<ExternalFeeComponentFilter> ExternalFeeFilters { get; set; }

        /// <summary>
        /// A set of properties for the Fund Configuration.
        /// </summary>
        /// <value>A set of properties for the Fund Configuration.</value>
        [DataMember(Name = "properties", EmitDefaultValue = true)]
        public Dictionary<string, Property> Properties { get; set; }

        /// <summary>
        /// Gets or Sets _Version
        /// </summary>
        [DataMember(Name = "version", EmitDefaultValue = false)]
        public ModelVersion _Version { get; set; }

        /// <summary>
        /// Gets or Sets Links
        /// </summary>
        [DataMember(Name = "links", EmitDefaultValue = true)]
        public List<Link> Links { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class FundConfiguration {\n");
            sb.Append("  Href: ").Append(Href).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  DisplayName: ").Append(DisplayName).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  DealingFilters: ").Append(DealingFilters).Append("\n");
            sb.Append("  PnlFilters: ").Append(PnlFilters).Append("\n");
            sb.Append("  BackOutFilters: ").Append(BackOutFilters).Append("\n");
            sb.Append("  ExternalFeeFilters: ").Append(ExternalFeeFilters).Append("\n");
            sb.Append("  Properties: ").Append(Properties).Append("\n");
            sb.Append("  _Version: ").Append(_Version).Append("\n");
            sb.Append("  Links: ").Append(Links).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as FundConfiguration);
        }

        /// <summary>
        /// Returns true if FundConfiguration instances are equal
        /// </summary>
        /// <param name="input">Instance of FundConfiguration to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FundConfiguration input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Href == input.Href ||
                    (this.Href != null &&
                    this.Href.Equals(input.Href))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.DisplayName == input.DisplayName ||
                    (this.DisplayName != null &&
                    this.DisplayName.Equals(input.DisplayName))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.DealingFilters == input.DealingFilters ||
                    this.DealingFilters != null &&
                    input.DealingFilters != null &&
                    this.DealingFilters.SequenceEqual(input.DealingFilters)
                ) && 
                (
                    this.PnlFilters == input.PnlFilters ||
                    this.PnlFilters != null &&
                    input.PnlFilters != null &&
                    this.PnlFilters.SequenceEqual(input.PnlFilters)
                ) && 
                (
                    this.BackOutFilters == input.BackOutFilters ||
                    this.BackOutFilters != null &&
                    input.BackOutFilters != null &&
                    this.BackOutFilters.SequenceEqual(input.BackOutFilters)
                ) && 
                (
                    this.ExternalFeeFilters == input.ExternalFeeFilters ||
                    this.ExternalFeeFilters != null &&
                    input.ExternalFeeFilters != null &&
                    this.ExternalFeeFilters.SequenceEqual(input.ExternalFeeFilters)
                ) && 
                (
                    this.Properties == input.Properties ||
                    this.Properties != null &&
                    input.Properties != null &&
                    this.Properties.SequenceEqual(input.Properties)
                ) && 
                (
                    this._Version == input._Version ||
                    (this._Version != null &&
                    this._Version.Equals(input._Version))
                ) && 
                (
                    this.Links == input.Links ||
                    this.Links != null &&
                    input.Links != null &&
                    this.Links.SequenceEqual(input.Links)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Href != null)
                {
                    hashCode = (hashCode * 59) + this.Href.GetHashCode();
                }
                if (this.Id != null)
                {
                    hashCode = (hashCode * 59) + this.Id.GetHashCode();
                }
                if (this.DisplayName != null)
                {
                    hashCode = (hashCode * 59) + this.DisplayName.GetHashCode();
                }
                if (this.Description != null)
                {
                    hashCode = (hashCode * 59) + this.Description.GetHashCode();
                }
                if (this.DealingFilters != null)
                {
                    hashCode = (hashCode * 59) + this.DealingFilters.GetHashCode();
                }
                if (this.PnlFilters != null)
                {
                    hashCode = (hashCode * 59) + this.PnlFilters.GetHashCode();
                }
                if (this.BackOutFilters != null)
                {
                    hashCode = (hashCode * 59) + this.BackOutFilters.GetHashCode();
                }
                if (this.ExternalFeeFilters != null)
                {
                    hashCode = (hashCode * 59) + this.ExternalFeeFilters.GetHashCode();
                }
                if (this.Properties != null)
                {
                    hashCode = (hashCode * 59) + this.Properties.GetHashCode();
                }
                if (this._Version != null)
                {
                    hashCode = (hashCode * 59) + this._Version.GetHashCode();
                }
                if (this.Links != null)
                {
                    hashCode = (hashCode * 59) + this.Links.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
