/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Lusid.Sdk.Client.OpenAPIDateConverter;

namespace Lusid.Sdk.Model
{
    /// <summary>
    /// GroupReconciliationRunDetails
    /// </summary>
    [DataContract(Name = "GroupReconciliationRunDetails")]
    public partial class GroupReconciliationRunDetails : IEquatable<GroupReconciliationRunDetails>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GroupReconciliationRunDetails" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected GroupReconciliationRunDetails() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="GroupReconciliationRunDetails" /> class.
        /// </summary>
        /// <param name="completionStatus">Provides the reconciliation completion status \&quot;Completed\&quot; | \&quot;FailedToComplete\&quot; (required).</param>
        /// <param name="errorDetail">Error information if the reconciliation failed to complete.</param>
        public GroupReconciliationRunDetails(string completionStatus = default(string), string errorDetail = default(string))
        {
            // to ensure "completionStatus" is required (not null)
            if (completionStatus == null)
            {
                throw new ArgumentNullException("completionStatus is a required property for GroupReconciliationRunDetails and cannot be null");
            }
            this.CompletionStatus = completionStatus;
            this.ErrorDetail = errorDetail;
        }

        /// <summary>
        /// Provides the reconciliation completion status \&quot;Completed\&quot; | \&quot;FailedToComplete\&quot;
        /// </summary>
        /// <value>Provides the reconciliation completion status \&quot;Completed\&quot; | \&quot;FailedToComplete\&quot;</value>
        [DataMember(Name = "completionStatus", IsRequired = true, EmitDefaultValue = true)]
        public string CompletionStatus { get; set; }

        /// <summary>
        /// Error information if the reconciliation failed to complete
        /// </summary>
        /// <value>Error information if the reconciliation failed to complete</value>
        [DataMember(Name = "errorDetail", EmitDefaultValue = true)]
        public string ErrorDetail { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class GroupReconciliationRunDetails {\n");
            sb.Append("  CompletionStatus: ").Append(CompletionStatus).Append("\n");
            sb.Append("  ErrorDetail: ").Append(ErrorDetail).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GroupReconciliationRunDetails);
        }

        /// <summary>
        /// Returns true if GroupReconciliationRunDetails instances are equal
        /// </summary>
        /// <param name="input">Instance of GroupReconciliationRunDetails to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GroupReconciliationRunDetails input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.CompletionStatus == input.CompletionStatus ||
                    (this.CompletionStatus != null &&
                    this.CompletionStatus.Equals(input.CompletionStatus))
                ) && 
                (
                    this.ErrorDetail == input.ErrorDetail ||
                    (this.ErrorDetail != null &&
                    this.ErrorDetail.Equals(input.ErrorDetail))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CompletionStatus != null)
                {
                    hashCode = (hashCode * 59) + this.CompletionStatus.GetHashCode();
                }
                if (this.ErrorDetail != null)
                {
                    hashCode = (hashCode * 59) + this.ErrorDetail.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // CompletionStatus (string) minLength
            if (this.CompletionStatus != null && this.CompletionStatus.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CompletionStatus, length must be greater than 1.", new [] { "CompletionStatus" });
            }

            yield break;
        }
    }
}
