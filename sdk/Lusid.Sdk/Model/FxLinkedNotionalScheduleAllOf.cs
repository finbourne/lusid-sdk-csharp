/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Lusid.Sdk.Client.OpenAPIDateConverter;

namespace Lusid.Sdk.Model
{
    /// <summary>
    /// FxLinkedNotionalScheduleAllOf
    /// </summary>
    [DataContract(Name = "FxLinkedNotionalSchedule_allOf")]
    public partial class FxLinkedNotionalScheduleAllOf : IEquatable<FxLinkedNotionalScheduleAllOf>, IValidatableObject
    {
        /// <summary>
        /// The available values are: FixedSchedule, FloatSchedule, OptionalitySchedule, StepSchedule, Exercise, FxRateSchedule, FxLinkedNotionalSchedule, Invalid
        /// </summary>
        /// <value>The available values are: FixedSchedule, FloatSchedule, OptionalitySchedule, StepSchedule, Exercise, FxRateSchedule, FxLinkedNotionalSchedule, Invalid</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ScheduleTypeEnum
        {
            /// <summary>
            /// Enum FixedSchedule for value: FixedSchedule
            /// </summary>
            [EnumMember(Value = "FixedSchedule")]
            FixedSchedule = 1,

            /// <summary>
            /// Enum FloatSchedule for value: FloatSchedule
            /// </summary>
            [EnumMember(Value = "FloatSchedule")]
            FloatSchedule = 2,

            /// <summary>
            /// Enum OptionalitySchedule for value: OptionalitySchedule
            /// </summary>
            [EnumMember(Value = "OptionalitySchedule")]
            OptionalitySchedule = 3,

            /// <summary>
            /// Enum StepSchedule for value: StepSchedule
            /// </summary>
            [EnumMember(Value = "StepSchedule")]
            StepSchedule = 4,

            /// <summary>
            /// Enum Exercise for value: Exercise
            /// </summary>
            [EnumMember(Value = "Exercise")]
            Exercise = 5,

            /// <summary>
            /// Enum FxRateSchedule for value: FxRateSchedule
            /// </summary>
            [EnumMember(Value = "FxRateSchedule")]
            FxRateSchedule = 6,

            /// <summary>
            /// Enum FxLinkedNotionalSchedule for value: FxLinkedNotionalSchedule
            /// </summary>
            [EnumMember(Value = "FxLinkedNotionalSchedule")]
            FxLinkedNotionalSchedule = 7,

            /// <summary>
            /// Enum Invalid for value: Invalid
            /// </summary>
            [EnumMember(Value = "Invalid")]
            Invalid = 8

        }


        /// <summary>
        /// The available values are: FixedSchedule, FloatSchedule, OptionalitySchedule, StepSchedule, Exercise, FxRateSchedule, FxLinkedNotionalSchedule, Invalid
        /// </summary>
        /// <value>The available values are: FixedSchedule, FloatSchedule, OptionalitySchedule, StepSchedule, Exercise, FxRateSchedule, FxLinkedNotionalSchedule, Invalid</value>
        [DataMember(Name = "scheduleType", IsRequired = true, EmitDefaultValue = true)]
        public ScheduleTypeEnum ScheduleType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="FxLinkedNotionalScheduleAllOf" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected FxLinkedNotionalScheduleAllOf() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="FxLinkedNotionalScheduleAllOf" /> class.
        /// </summary>
        /// <param name="fxConventions">fxConventions (required).</param>
        /// <param name="varyingNotionalCurrency">The currency of the varying notional amount. (required).</param>
        /// <param name="varyingNotionalFixingDates">varyingNotionalFixingDates (required).</param>
        /// <param name="varyingNotionalInterimExchangePaymentDates">varyingNotionalInterimExchangePaymentDates.</param>
        /// <param name="scheduleType">The available values are: FixedSchedule, FloatSchedule, OptionalitySchedule, StepSchedule, Exercise, FxRateSchedule, FxLinkedNotionalSchedule, Invalid (required).</param>
        public FxLinkedNotionalScheduleAllOf(FxConventions fxConventions = default(FxConventions), string varyingNotionalCurrency = default(string), RelativeDateOffset varyingNotionalFixingDates = default(RelativeDateOffset), RelativeDateOffset varyingNotionalInterimExchangePaymentDates = default(RelativeDateOffset), ScheduleTypeEnum scheduleType = default(ScheduleTypeEnum))
        {
            // to ensure "fxConventions" is required (not null)
            if (fxConventions == null)
            {
                throw new ArgumentNullException("fxConventions is a required property for FxLinkedNotionalScheduleAllOf and cannot be null");
            }
            this.FxConventions = fxConventions;
            // to ensure "varyingNotionalCurrency" is required (not null)
            if (varyingNotionalCurrency == null)
            {
                throw new ArgumentNullException("varyingNotionalCurrency is a required property for FxLinkedNotionalScheduleAllOf and cannot be null");
            }
            this.VaryingNotionalCurrency = varyingNotionalCurrency;
            // to ensure "varyingNotionalFixingDates" is required (not null)
            if (varyingNotionalFixingDates == null)
            {
                throw new ArgumentNullException("varyingNotionalFixingDates is a required property for FxLinkedNotionalScheduleAllOf and cannot be null");
            }
            this.VaryingNotionalFixingDates = varyingNotionalFixingDates;
            this.ScheduleType = scheduleType;
            this.VaryingNotionalInterimExchangePaymentDates = varyingNotionalInterimExchangePaymentDates;
        }

        /// <summary>
        /// Gets or Sets FxConventions
        /// </summary>
        [DataMember(Name = "fxConventions", IsRequired = true, EmitDefaultValue = true)]
        public FxConventions FxConventions { get; set; }

        /// <summary>
        /// The currency of the varying notional amount.
        /// </summary>
        /// <value>The currency of the varying notional amount.</value>
        [DataMember(Name = "varyingNotionalCurrency", IsRequired = true, EmitDefaultValue = true)]
        public string VaryingNotionalCurrency { get; set; }

        /// <summary>
        /// Gets or Sets VaryingNotionalFixingDates
        /// </summary>
        [DataMember(Name = "varyingNotionalFixingDates", IsRequired = true, EmitDefaultValue = true)]
        public RelativeDateOffset VaryingNotionalFixingDates { get; set; }

        /// <summary>
        /// Gets or Sets VaryingNotionalInterimExchangePaymentDates
        /// </summary>
        [DataMember(Name = "varyingNotionalInterimExchangePaymentDates", EmitDefaultValue = false)]
        public RelativeDateOffset VaryingNotionalInterimExchangePaymentDates { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class FxLinkedNotionalScheduleAllOf {\n");
            sb.Append("  FxConventions: ").Append(FxConventions).Append("\n");
            sb.Append("  VaryingNotionalCurrency: ").Append(VaryingNotionalCurrency).Append("\n");
            sb.Append("  VaryingNotionalFixingDates: ").Append(VaryingNotionalFixingDates).Append("\n");
            sb.Append("  VaryingNotionalInterimExchangePaymentDates: ").Append(VaryingNotionalInterimExchangePaymentDates).Append("\n");
            sb.Append("  ScheduleType: ").Append(ScheduleType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as FxLinkedNotionalScheduleAllOf);
        }

        /// <summary>
        /// Returns true if FxLinkedNotionalScheduleAllOf instances are equal
        /// </summary>
        /// <param name="input">Instance of FxLinkedNotionalScheduleAllOf to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FxLinkedNotionalScheduleAllOf input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.FxConventions == input.FxConventions ||
                    (this.FxConventions != null &&
                    this.FxConventions.Equals(input.FxConventions))
                ) && 
                (
                    this.VaryingNotionalCurrency == input.VaryingNotionalCurrency ||
                    (this.VaryingNotionalCurrency != null &&
                    this.VaryingNotionalCurrency.Equals(input.VaryingNotionalCurrency))
                ) && 
                (
                    this.VaryingNotionalFixingDates == input.VaryingNotionalFixingDates ||
                    (this.VaryingNotionalFixingDates != null &&
                    this.VaryingNotionalFixingDates.Equals(input.VaryingNotionalFixingDates))
                ) && 
                (
                    this.VaryingNotionalInterimExchangePaymentDates == input.VaryingNotionalInterimExchangePaymentDates ||
                    (this.VaryingNotionalInterimExchangePaymentDates != null &&
                    this.VaryingNotionalInterimExchangePaymentDates.Equals(input.VaryingNotionalInterimExchangePaymentDates))
                ) && 
                (
                    this.ScheduleType == input.ScheduleType ||
                    this.ScheduleType.Equals(input.ScheduleType)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.FxConventions != null)
                {
                    hashCode = (hashCode * 59) + this.FxConventions.GetHashCode();
                }
                if (this.VaryingNotionalCurrency != null)
                {
                    hashCode = (hashCode * 59) + this.VaryingNotionalCurrency.GetHashCode();
                }
                if (this.VaryingNotionalFixingDates != null)
                {
                    hashCode = (hashCode * 59) + this.VaryingNotionalFixingDates.GetHashCode();
                }
                if (this.VaryingNotionalInterimExchangePaymentDates != null)
                {
                    hashCode = (hashCode * 59) + this.VaryingNotionalInterimExchangePaymentDates.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.ScheduleType.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
