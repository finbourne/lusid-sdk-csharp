/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Lusid.Sdk.Client.OpenAPIDateConverter;

namespace Lusid.Sdk.Model
{
    /// <summary>
    /// SettlementInstructionQuery
    /// </summary>
    [DataContract(Name = "SettlementInstructionQuery")]
    public partial class SettlementInstructionQuery : IEquatable<SettlementInstructionQuery>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SettlementInstructionQuery" /> class.
        /// </summary>
        /// <param name="startDate">startDate.</param>
        /// <param name="endDate">endDate.</param>
        /// <param name="limit">limit.</param>
        /// <param name="page">page.</param>
        /// <param name="filter">filter.</param>
        /// <param name="settlementInstructionPropertyKeys">settlementInstructionPropertyKeys.</param>
        /// <param name="transactionPropertyKeys">transactionPropertyKeys.</param>
        public SettlementInstructionQuery(DateTimeOrCutLabel startDate = default(DateTimeOrCutLabel), DateTimeOrCutLabel endDate = default(DateTimeOrCutLabel), int? limit = default(int?), string page = default(string), string filter = default(string), List<string> settlementInstructionPropertyKeys = default(List<string>), List<string> transactionPropertyKeys = default(List<string>))
        {
            this.StartDate = startDate;
            this.EndDate = endDate;
            this.Limit = limit;
            this.Page = page;
            this.Filter = filter;
            this.SettlementInstructionPropertyKeys = settlementInstructionPropertyKeys;
            this.TransactionPropertyKeys = transactionPropertyKeys;
        }

        /// <summary>
        /// Gets or Sets StartDate
        /// </summary>
        [DataMember(Name = "startDate", EmitDefaultValue = true)]
        public DateTimeOrCutLabel StartDate { get; set; }

        /// <summary>
        /// Gets or Sets EndDate
        /// </summary>
        [DataMember(Name = "endDate", EmitDefaultValue = true)]
        public DateTimeOrCutLabel EndDate { get; set; }

        /// <summary>
        /// Gets or Sets Limit
        /// </summary>
        [DataMember(Name = "limit", EmitDefaultValue = true)]
        public int? Limit { get; set; }

        /// <summary>
        /// Gets or Sets Page
        /// </summary>
        [DataMember(Name = "page", EmitDefaultValue = true)]
        public string Page { get; set; }

        /// <summary>
        /// Gets or Sets Filter
        /// </summary>
        [DataMember(Name = "filter", EmitDefaultValue = true)]
        public string Filter { get; set; }

        /// <summary>
        /// Gets or Sets SettlementInstructionPropertyKeys
        /// </summary>
        [DataMember(Name = "settlementInstructionPropertyKeys", EmitDefaultValue = true)]
        public List<string> SettlementInstructionPropertyKeys { get; set; }

        /// <summary>
        /// Gets or Sets TransactionPropertyKeys
        /// </summary>
        [DataMember(Name = "transactionPropertyKeys", EmitDefaultValue = true)]
        public List<string> TransactionPropertyKeys { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SettlementInstructionQuery {\n");
            sb.Append("  StartDate: ").Append(StartDate).Append("\n");
            sb.Append("  EndDate: ").Append(EndDate).Append("\n");
            sb.Append("  Limit: ").Append(Limit).Append("\n");
            sb.Append("  Page: ").Append(Page).Append("\n");
            sb.Append("  Filter: ").Append(Filter).Append("\n");
            sb.Append("  SettlementInstructionPropertyKeys: ").Append(SettlementInstructionPropertyKeys).Append("\n");
            sb.Append("  TransactionPropertyKeys: ").Append(TransactionPropertyKeys).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SettlementInstructionQuery);
        }

        /// <summary>
        /// Returns true if SettlementInstructionQuery instances are equal
        /// </summary>
        /// <param name="input">Instance of SettlementInstructionQuery to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SettlementInstructionQuery input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.StartDate == input.StartDate ||
                    (this.StartDate != null &&
                    this.StartDate.Equals(input.StartDate))
                ) && 
                (
                    this.EndDate == input.EndDate ||
                    (this.EndDate != null &&
                    this.EndDate.Equals(input.EndDate))
                ) && 
                (
                    this.Limit == input.Limit ||
                    (this.Limit != null &&
                    this.Limit.Equals(input.Limit))
                ) && 
                (
                    this.Page == input.Page ||
                    (this.Page != null &&
                    this.Page.Equals(input.Page))
                ) && 
                (
                    this.Filter == input.Filter ||
                    (this.Filter != null &&
                    this.Filter.Equals(input.Filter))
                ) && 
                (
                    this.SettlementInstructionPropertyKeys == input.SettlementInstructionPropertyKeys ||
                    this.SettlementInstructionPropertyKeys != null &&
                    input.SettlementInstructionPropertyKeys != null &&
                    this.SettlementInstructionPropertyKeys.SequenceEqual(input.SettlementInstructionPropertyKeys)
                ) && 
                (
                    this.TransactionPropertyKeys == input.TransactionPropertyKeys ||
                    this.TransactionPropertyKeys != null &&
                    input.TransactionPropertyKeys != null &&
                    this.TransactionPropertyKeys.SequenceEqual(input.TransactionPropertyKeys)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.StartDate != null)
                {
                    hashCode = (hashCode * 59) + this.StartDate.GetHashCode();
                }
                if (this.EndDate != null)
                {
                    hashCode = (hashCode * 59) + this.EndDate.GetHashCode();
                }
                if (this.Limit != null)
                {
                    hashCode = (hashCode * 59) + this.Limit.GetHashCode();
                }
                if (this.Page != null)
                {
                    hashCode = (hashCode * 59) + this.Page.GetHashCode();
                }
                if (this.Filter != null)
                {
                    hashCode = (hashCode * 59) + this.Filter.GetHashCode();
                }
                if (this.SettlementInstructionPropertyKeys != null)
                {
                    hashCode = (hashCode * 59) + this.SettlementInstructionPropertyKeys.GetHashCode();
                }
                if (this.TransactionPropertyKeys != null)
                {
                    hashCode = (hashCode * 59) + this.TransactionPropertyKeys.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Page (string) maxLength
            if (this.Page != null && this.Page.Length > 500)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Page, length must be less than 500.", new [] { "Page" });
            }

            // Page (string) minLength
            if (this.Page != null && this.Page.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Page, length must be greater than 1.", new [] { "Page" });
            }

            // Page (string) pattern
            Regex regexPage = new Regex(@"^[a-zA-Z0-9\+/]*={0,3}$", RegexOptions.CultureInvariant);
            if (false == regexPage.Match(this.Page).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Page, must match a pattern of " + regexPage, new [] { "Page" });
            }

            // Filter (string) maxLength
            if (this.Filter != null && this.Filter.Length > 16384)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Filter, length must be less than 16384.", new [] { "Filter" });
            }

            // Filter (string) minLength
            if (this.Filter != null && this.Filter.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Filter, length must be greater than 0.", new [] { "Filter" });
            }

            // Filter (string) pattern
            Regex regexFilter = new Regex(@"^[\s\S]*$", RegexOptions.CultureInvariant);
            if (false == regexFilter.Match(this.Filter).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Filter, must match a pattern of " + regexFilter, new [] { "Filter" });
            }

            yield break;
        }
    }
}
