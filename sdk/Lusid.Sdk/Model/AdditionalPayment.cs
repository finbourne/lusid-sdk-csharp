/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Lusid.Sdk.Client.OpenAPIDateConverter;

namespace Lusid.Sdk.Model
{
    /// <summary>
    /// Record describing additional payment entity.
    /// </summary>
    [DataContract(Name = "AdditionalPayment")]
    public partial class AdditionalPayment : IEquatable<AdditionalPayment>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AdditionalPayment" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected AdditionalPayment() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="AdditionalPayment" /> class.
        /// </summary>
        /// <param name="amount">The payment amount. (required).</param>
        /// <param name="currency">The payment currency. (required).</param>
        /// <param name="payDate">Date when the payment is made. (required).</param>
        /// <param name="payReceive">Is it pay or receive.  Supported string (enumeration) values are: [Pay, Receive]. (required).</param>
        public AdditionalPayment(decimal amount = default(decimal), string currency = default(string), DateTimeOffset payDate = default(DateTimeOffset), string payReceive = default(string))
        {
            this.Amount = amount;
            // to ensure "currency" is required (not null)
            if (currency == null)
            {
                throw new ArgumentNullException("currency is a required property for AdditionalPayment and cannot be null");
            }
            this.Currency = currency;
            this.PayDate = payDate;
            // to ensure "payReceive" is required (not null)
            if (payReceive == null)
            {
                throw new ArgumentNullException("payReceive is a required property for AdditionalPayment and cannot be null");
            }
            this.PayReceive = payReceive;
        }

        /// <summary>
        /// The payment amount.
        /// </summary>
        /// <value>The payment amount.</value>
        [DataMember(Name = "amount", IsRequired = true, EmitDefaultValue = true)]
        public decimal Amount { get; set; }

        /// <summary>
        /// The payment currency.
        /// </summary>
        /// <value>The payment currency.</value>
        [DataMember(Name = "currency", IsRequired = true, EmitDefaultValue = true)]
        public string Currency { get; set; }

        /// <summary>
        /// Date when the payment is made.
        /// </summary>
        /// <value>Date when the payment is made.</value>
        [DataMember(Name = "payDate", IsRequired = true, EmitDefaultValue = true)]
        public DateTimeOffset PayDate { get; set; }

        /// <summary>
        /// Is it pay or receive.  Supported string (enumeration) values are: [Pay, Receive].
        /// </summary>
        /// <value>Is it pay or receive.  Supported string (enumeration) values are: [Pay, Receive].</value>
        [DataMember(Name = "payReceive", IsRequired = true, EmitDefaultValue = true)]
        public string PayReceive { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AdditionalPayment {\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("  Currency: ").Append(Currency).Append("\n");
            sb.Append("  PayDate: ").Append(PayDate).Append("\n");
            sb.Append("  PayReceive: ").Append(PayReceive).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AdditionalPayment);
        }

        /// <summary>
        /// Returns true if AdditionalPayment instances are equal
        /// </summary>
        /// <param name="input">Instance of AdditionalPayment to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AdditionalPayment input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Amount == input.Amount ||
                    this.Amount.Equals(input.Amount)
                ) && 
                (
                    this.Currency == input.Currency ||
                    (this.Currency != null &&
                    this.Currency.Equals(input.Currency))
                ) && 
                (
                    this.PayDate == input.PayDate ||
                    (this.PayDate != null &&
                    this.PayDate.Equals(input.PayDate))
                ) && 
                (
                    this.PayReceive == input.PayReceive ||
                    (this.PayReceive != null &&
                    this.PayReceive.Equals(input.PayReceive))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Amount.GetHashCode();
                if (this.Currency != null)
                {
                    hashCode = (hashCode * 59) + this.Currency.GetHashCode();
                }
                if (this.PayDate != null)
                {
                    hashCode = (hashCode * 59) + this.PayDate.GetHashCode();
                }
                if (this.PayReceive != null)
                {
                    hashCode = (hashCode * 59) + this.PayReceive.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // PayReceive (string) minLength
            if (this.PayReceive != null && this.PayReceive.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PayReceive, length must be greater than 1.", new [] { "PayReceive" });
            }

            yield break;
        }
    }
}
