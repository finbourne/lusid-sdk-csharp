/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Lusid.Sdk.Client.OpenAPIDateConverter;

namespace Lusid.Sdk.Model
{
    /// <summary>
    /// CreateDerivedPropertyDefinitionRequest
    /// </summary>
    [DataContract(Name = "CreateDerivedPropertyDefinitionRequest")]
    public partial class CreateDerivedPropertyDefinitionRequest : IEquatable<CreateDerivedPropertyDefinitionRequest>, IValidatableObject
    {
        /// <summary>
        /// The domain that the property exists in. Not all available values are currently supported, please check the documentation: https://support.lusid.com/knowledgebase/article/KA-01719/. The available values are: NotDefined, Transaction, Portfolio, Holding, ReferenceHolding, TransactionConfiguration, Instrument, CutLabelDefinition, Analytic, PortfolioGroup, Person, AccessMetadata, Order, UnitResult, MarketData, ConfigurationRecipe, Allocation, Calendar, LegalEntity, InvestorRecord, InvestmentAccount, Placement, Execution, Block, Participation, Package, OrderInstruction, NextBestAction, CustomEntity, InstrumentEvent, Account, ChartOfAccounts, CustodianAccount, CheckDefinition, Abor, AborConfiguration, Fund, FundConfiguration, Fee, Reconciliation, PropertyDefinition, Compliance, DiaryEntry, Leg, DerivedValuation, Timeline, ClosedPeriod, AddressKeyDefinition, AmortisationRuleSet, AnalyticsSetInventory, AtomUnitResult, CleardownModule, ComplexMarketData, ComplianceRunSummary, ComplianceRule, ComplianceRunInfo, CorporateActionSource, CounterpartyAgreement, CustomEntityDefinition, DataType, Dialect, EventHandler, GeneralLedgerProfile, PostingModule, Quote, RecipeComposer, ReconciliationRunBreak, ReferenceList, RelationDefinition, ReturnBlockIndex, SRSDocument, SRSIndex, TransactionTemplate, TransactionTemplateScope, TransactionType, TransactionTypeConfig, TranslationScript, TaskDefinition, TaskInstance, Worker, StagingRuleSet, IdentifierDefinition
        /// </summary>
        /// <value>The domain that the property exists in. Not all available values are currently supported, please check the documentation: https://support.lusid.com/knowledgebase/article/KA-01719/. The available values are: NotDefined, Transaction, Portfolio, Holding, ReferenceHolding, TransactionConfiguration, Instrument, CutLabelDefinition, Analytic, PortfolioGroup, Person, AccessMetadata, Order, UnitResult, MarketData, ConfigurationRecipe, Allocation, Calendar, LegalEntity, InvestorRecord, InvestmentAccount, Placement, Execution, Block, Participation, Package, OrderInstruction, NextBestAction, CustomEntity, InstrumentEvent, Account, ChartOfAccounts, CustodianAccount, CheckDefinition, Abor, AborConfiguration, Fund, FundConfiguration, Fee, Reconciliation, PropertyDefinition, Compliance, DiaryEntry, Leg, DerivedValuation, Timeline, ClosedPeriod, AddressKeyDefinition, AmortisationRuleSet, AnalyticsSetInventory, AtomUnitResult, CleardownModule, ComplexMarketData, ComplianceRunSummary, ComplianceRule, ComplianceRunInfo, CorporateActionSource, CounterpartyAgreement, CustomEntityDefinition, DataType, Dialect, EventHandler, GeneralLedgerProfile, PostingModule, Quote, RecipeComposer, ReconciliationRunBreak, ReferenceList, RelationDefinition, ReturnBlockIndex, SRSDocument, SRSIndex, TransactionTemplate, TransactionTemplateScope, TransactionType, TransactionTypeConfig, TranslationScript, TaskDefinition, TaskInstance, Worker, StagingRuleSet, IdentifierDefinition</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum DomainEnum
        {
            /// <summary>
            /// Enum NotDefined for value: NotDefined
            /// </summary>
            [EnumMember(Value = "NotDefined")]
            NotDefined = 1,

            /// <summary>
            /// Enum Transaction for value: Transaction
            /// </summary>
            [EnumMember(Value = "Transaction")]
            Transaction = 2,

            /// <summary>
            /// Enum Portfolio for value: Portfolio
            /// </summary>
            [EnumMember(Value = "Portfolio")]
            Portfolio = 3,

            /// <summary>
            /// Enum Holding for value: Holding
            /// </summary>
            [EnumMember(Value = "Holding")]
            Holding = 4,

            /// <summary>
            /// Enum ReferenceHolding for value: ReferenceHolding
            /// </summary>
            [EnumMember(Value = "ReferenceHolding")]
            ReferenceHolding = 5,

            /// <summary>
            /// Enum TransactionConfiguration for value: TransactionConfiguration
            /// </summary>
            [EnumMember(Value = "TransactionConfiguration")]
            TransactionConfiguration = 6,

            /// <summary>
            /// Enum Instrument for value: Instrument
            /// </summary>
            [EnumMember(Value = "Instrument")]
            Instrument = 7,

            /// <summary>
            /// Enum CutLabelDefinition for value: CutLabelDefinition
            /// </summary>
            [EnumMember(Value = "CutLabelDefinition")]
            CutLabelDefinition = 8,

            /// <summary>
            /// Enum Analytic for value: Analytic
            /// </summary>
            [EnumMember(Value = "Analytic")]
            Analytic = 9,

            /// <summary>
            /// Enum PortfolioGroup for value: PortfolioGroup
            /// </summary>
            [EnumMember(Value = "PortfolioGroup")]
            PortfolioGroup = 10,

            /// <summary>
            /// Enum Person for value: Person
            /// </summary>
            [EnumMember(Value = "Person")]
            Person = 11,

            /// <summary>
            /// Enum AccessMetadata for value: AccessMetadata
            /// </summary>
            [EnumMember(Value = "AccessMetadata")]
            AccessMetadata = 12,

            /// <summary>
            /// Enum Order for value: Order
            /// </summary>
            [EnumMember(Value = "Order")]
            Order = 13,

            /// <summary>
            /// Enum UnitResult for value: UnitResult
            /// </summary>
            [EnumMember(Value = "UnitResult")]
            UnitResult = 14,

            /// <summary>
            /// Enum MarketData for value: MarketData
            /// </summary>
            [EnumMember(Value = "MarketData")]
            MarketData = 15,

            /// <summary>
            /// Enum ConfigurationRecipe for value: ConfigurationRecipe
            /// </summary>
            [EnumMember(Value = "ConfigurationRecipe")]
            ConfigurationRecipe = 16,

            /// <summary>
            /// Enum Allocation for value: Allocation
            /// </summary>
            [EnumMember(Value = "Allocation")]
            Allocation = 17,

            /// <summary>
            /// Enum Calendar for value: Calendar
            /// </summary>
            [EnumMember(Value = "Calendar")]
            Calendar = 18,

            /// <summary>
            /// Enum LegalEntity for value: LegalEntity
            /// </summary>
            [EnumMember(Value = "LegalEntity")]
            LegalEntity = 19,

            /// <summary>
            /// Enum InvestorRecord for value: InvestorRecord
            /// </summary>
            [EnumMember(Value = "InvestorRecord")]
            InvestorRecord = 20,

            /// <summary>
            /// Enum InvestmentAccount for value: InvestmentAccount
            /// </summary>
            [EnumMember(Value = "InvestmentAccount")]
            InvestmentAccount = 21,

            /// <summary>
            /// Enum Placement for value: Placement
            /// </summary>
            [EnumMember(Value = "Placement")]
            Placement = 22,

            /// <summary>
            /// Enum Execution for value: Execution
            /// </summary>
            [EnumMember(Value = "Execution")]
            Execution = 23,

            /// <summary>
            /// Enum Block for value: Block
            /// </summary>
            [EnumMember(Value = "Block")]
            Block = 24,

            /// <summary>
            /// Enum Participation for value: Participation
            /// </summary>
            [EnumMember(Value = "Participation")]
            Participation = 25,

            /// <summary>
            /// Enum Package for value: Package
            /// </summary>
            [EnumMember(Value = "Package")]
            Package = 26,

            /// <summary>
            /// Enum OrderInstruction for value: OrderInstruction
            /// </summary>
            [EnumMember(Value = "OrderInstruction")]
            OrderInstruction = 27,

            /// <summary>
            /// Enum NextBestAction for value: NextBestAction
            /// </summary>
            [EnumMember(Value = "NextBestAction")]
            NextBestAction = 28,

            /// <summary>
            /// Enum CustomEntity for value: CustomEntity
            /// </summary>
            [EnumMember(Value = "CustomEntity")]
            CustomEntity = 29,

            /// <summary>
            /// Enum InstrumentEvent for value: InstrumentEvent
            /// </summary>
            [EnumMember(Value = "InstrumentEvent")]
            InstrumentEvent = 30,

            /// <summary>
            /// Enum Account for value: Account
            /// </summary>
            [EnumMember(Value = "Account")]
            Account = 31,

            /// <summary>
            /// Enum ChartOfAccounts for value: ChartOfAccounts
            /// </summary>
            [EnumMember(Value = "ChartOfAccounts")]
            ChartOfAccounts = 32,

            /// <summary>
            /// Enum CustodianAccount for value: CustodianAccount
            /// </summary>
            [EnumMember(Value = "CustodianAccount")]
            CustodianAccount = 33,

            /// <summary>
            /// Enum CheckDefinition for value: CheckDefinition
            /// </summary>
            [EnumMember(Value = "CheckDefinition")]
            CheckDefinition = 34,

            /// <summary>
            /// Enum Abor for value: Abor
            /// </summary>
            [EnumMember(Value = "Abor")]
            Abor = 35,

            /// <summary>
            /// Enum AborConfiguration for value: AborConfiguration
            /// </summary>
            [EnumMember(Value = "AborConfiguration")]
            AborConfiguration = 36,

            /// <summary>
            /// Enum Fund for value: Fund
            /// </summary>
            [EnumMember(Value = "Fund")]
            Fund = 37,

            /// <summary>
            /// Enum FundConfiguration for value: FundConfiguration
            /// </summary>
            [EnumMember(Value = "FundConfiguration")]
            FundConfiguration = 38,

            /// <summary>
            /// Enum Fee for value: Fee
            /// </summary>
            [EnumMember(Value = "Fee")]
            Fee = 39,

            /// <summary>
            /// Enum Reconciliation for value: Reconciliation
            /// </summary>
            [EnumMember(Value = "Reconciliation")]
            Reconciliation = 40,

            /// <summary>
            /// Enum PropertyDefinition for value: PropertyDefinition
            /// </summary>
            [EnumMember(Value = "PropertyDefinition")]
            PropertyDefinition = 41,

            /// <summary>
            /// Enum Compliance for value: Compliance
            /// </summary>
            [EnumMember(Value = "Compliance")]
            Compliance = 42,

            /// <summary>
            /// Enum DiaryEntry for value: DiaryEntry
            /// </summary>
            [EnumMember(Value = "DiaryEntry")]
            DiaryEntry = 43,

            /// <summary>
            /// Enum Leg for value: Leg
            /// </summary>
            [EnumMember(Value = "Leg")]
            Leg = 44,

            /// <summary>
            /// Enum DerivedValuation for value: DerivedValuation
            /// </summary>
            [EnumMember(Value = "DerivedValuation")]
            DerivedValuation = 45,

            /// <summary>
            /// Enum Timeline for value: Timeline
            /// </summary>
            [EnumMember(Value = "Timeline")]
            Timeline = 46,

            /// <summary>
            /// Enum ClosedPeriod for value: ClosedPeriod
            /// </summary>
            [EnumMember(Value = "ClosedPeriod")]
            ClosedPeriod = 47,

            /// <summary>
            /// Enum AddressKeyDefinition for value: AddressKeyDefinition
            /// </summary>
            [EnumMember(Value = "AddressKeyDefinition")]
            AddressKeyDefinition = 48,

            /// <summary>
            /// Enum AmortisationRuleSet for value: AmortisationRuleSet
            /// </summary>
            [EnumMember(Value = "AmortisationRuleSet")]
            AmortisationRuleSet = 49,

            /// <summary>
            /// Enum AnalyticsSetInventory for value: AnalyticsSetInventory
            /// </summary>
            [EnumMember(Value = "AnalyticsSetInventory")]
            AnalyticsSetInventory = 50,

            /// <summary>
            /// Enum AtomUnitResult for value: AtomUnitResult
            /// </summary>
            [EnumMember(Value = "AtomUnitResult")]
            AtomUnitResult = 51,

            /// <summary>
            /// Enum CleardownModule for value: CleardownModule
            /// </summary>
            [EnumMember(Value = "CleardownModule")]
            CleardownModule = 52,

            /// <summary>
            /// Enum ComplexMarketData for value: ComplexMarketData
            /// </summary>
            [EnumMember(Value = "ComplexMarketData")]
            ComplexMarketData = 53,

            /// <summary>
            /// Enum ComplianceRunSummary for value: ComplianceRunSummary
            /// </summary>
            [EnumMember(Value = "ComplianceRunSummary")]
            ComplianceRunSummary = 54,

            /// <summary>
            /// Enum ComplianceRule for value: ComplianceRule
            /// </summary>
            [EnumMember(Value = "ComplianceRule")]
            ComplianceRule = 55,

            /// <summary>
            /// Enum ComplianceRunInfo for value: ComplianceRunInfo
            /// </summary>
            [EnumMember(Value = "ComplianceRunInfo")]
            ComplianceRunInfo = 56,

            /// <summary>
            /// Enum CorporateActionSource for value: CorporateActionSource
            /// </summary>
            [EnumMember(Value = "CorporateActionSource")]
            CorporateActionSource = 57,

            /// <summary>
            /// Enum CounterpartyAgreement for value: CounterpartyAgreement
            /// </summary>
            [EnumMember(Value = "CounterpartyAgreement")]
            CounterpartyAgreement = 58,

            /// <summary>
            /// Enum CustomEntityDefinition for value: CustomEntityDefinition
            /// </summary>
            [EnumMember(Value = "CustomEntityDefinition")]
            CustomEntityDefinition = 59,

            /// <summary>
            /// Enum DataType for value: DataType
            /// </summary>
            [EnumMember(Value = "DataType")]
            DataType = 60,

            /// <summary>
            /// Enum Dialect for value: Dialect
            /// </summary>
            [EnumMember(Value = "Dialect")]
            Dialect = 61,

            /// <summary>
            /// Enum EventHandler for value: EventHandler
            /// </summary>
            [EnumMember(Value = "EventHandler")]
            EventHandler = 62,

            /// <summary>
            /// Enum GeneralLedgerProfile for value: GeneralLedgerProfile
            /// </summary>
            [EnumMember(Value = "GeneralLedgerProfile")]
            GeneralLedgerProfile = 63,

            /// <summary>
            /// Enum PostingModule for value: PostingModule
            /// </summary>
            [EnumMember(Value = "PostingModule")]
            PostingModule = 64,

            /// <summary>
            /// Enum Quote for value: Quote
            /// </summary>
            [EnumMember(Value = "Quote")]
            Quote = 65,

            /// <summary>
            /// Enum RecipeComposer for value: RecipeComposer
            /// </summary>
            [EnumMember(Value = "RecipeComposer")]
            RecipeComposer = 66,

            /// <summary>
            /// Enum ReconciliationRunBreak for value: ReconciliationRunBreak
            /// </summary>
            [EnumMember(Value = "ReconciliationRunBreak")]
            ReconciliationRunBreak = 67,

            /// <summary>
            /// Enum ReferenceList for value: ReferenceList
            /// </summary>
            [EnumMember(Value = "ReferenceList")]
            ReferenceList = 68,

            /// <summary>
            /// Enum RelationDefinition for value: RelationDefinition
            /// </summary>
            [EnumMember(Value = "RelationDefinition")]
            RelationDefinition = 69,

            /// <summary>
            /// Enum ReturnBlockIndex for value: ReturnBlockIndex
            /// </summary>
            [EnumMember(Value = "ReturnBlockIndex")]
            ReturnBlockIndex = 70,

            /// <summary>
            /// Enum SRSDocument for value: SRSDocument
            /// </summary>
            [EnumMember(Value = "SRSDocument")]
            SRSDocument = 71,

            /// <summary>
            /// Enum SRSIndex for value: SRSIndex
            /// </summary>
            [EnumMember(Value = "SRSIndex")]
            SRSIndex = 72,

            /// <summary>
            /// Enum TransactionTemplate for value: TransactionTemplate
            /// </summary>
            [EnumMember(Value = "TransactionTemplate")]
            TransactionTemplate = 73,

            /// <summary>
            /// Enum TransactionTemplateScope for value: TransactionTemplateScope
            /// </summary>
            [EnumMember(Value = "TransactionTemplateScope")]
            TransactionTemplateScope = 74,

            /// <summary>
            /// Enum TransactionType for value: TransactionType
            /// </summary>
            [EnumMember(Value = "TransactionType")]
            TransactionType = 75,

            /// <summary>
            /// Enum TransactionTypeConfig for value: TransactionTypeConfig
            /// </summary>
            [EnumMember(Value = "TransactionTypeConfig")]
            TransactionTypeConfig = 76,

            /// <summary>
            /// Enum TranslationScript for value: TranslationScript
            /// </summary>
            [EnumMember(Value = "TranslationScript")]
            TranslationScript = 77,

            /// <summary>
            /// Enum TaskDefinition for value: TaskDefinition
            /// </summary>
            [EnumMember(Value = "TaskDefinition")]
            TaskDefinition = 78,

            /// <summary>
            /// Enum TaskInstance for value: TaskInstance
            /// </summary>
            [EnumMember(Value = "TaskInstance")]
            TaskInstance = 79,

            /// <summary>
            /// Enum Worker for value: Worker
            /// </summary>
            [EnumMember(Value = "Worker")]
            Worker = 80,

            /// <summary>
            /// Enum StagingRuleSet for value: StagingRuleSet
            /// </summary>
            [EnumMember(Value = "StagingRuleSet")]
            StagingRuleSet = 81,

            /// <summary>
            /// Enum IdentifierDefinition for value: IdentifierDefinition
            /// </summary>
            [EnumMember(Value = "IdentifierDefinition")]
            IdentifierDefinition = 82
        }


        /// <summary>
        /// The domain that the property exists in. Not all available values are currently supported, please check the documentation: https://support.lusid.com/knowledgebase/article/KA-01719/. The available values are: NotDefined, Transaction, Portfolio, Holding, ReferenceHolding, TransactionConfiguration, Instrument, CutLabelDefinition, Analytic, PortfolioGroup, Person, AccessMetadata, Order, UnitResult, MarketData, ConfigurationRecipe, Allocation, Calendar, LegalEntity, InvestorRecord, InvestmentAccount, Placement, Execution, Block, Participation, Package, OrderInstruction, NextBestAction, CustomEntity, InstrumentEvent, Account, ChartOfAccounts, CustodianAccount, CheckDefinition, Abor, AborConfiguration, Fund, FundConfiguration, Fee, Reconciliation, PropertyDefinition, Compliance, DiaryEntry, Leg, DerivedValuation, Timeline, ClosedPeriod, AddressKeyDefinition, AmortisationRuleSet, AnalyticsSetInventory, AtomUnitResult, CleardownModule, ComplexMarketData, ComplianceRunSummary, ComplianceRule, ComplianceRunInfo, CorporateActionSource, CounterpartyAgreement, CustomEntityDefinition, DataType, Dialect, EventHandler, GeneralLedgerProfile, PostingModule, Quote, RecipeComposer, ReconciliationRunBreak, ReferenceList, RelationDefinition, ReturnBlockIndex, SRSDocument, SRSIndex, TransactionTemplate, TransactionTemplateScope, TransactionType, TransactionTypeConfig, TranslationScript, TaskDefinition, TaskInstance, Worker, StagingRuleSet, IdentifierDefinition
        /// </summary>
        /// <value>The domain that the property exists in. Not all available values are currently supported, please check the documentation: https://support.lusid.com/knowledgebase/article/KA-01719/. The available values are: NotDefined, Transaction, Portfolio, Holding, ReferenceHolding, TransactionConfiguration, Instrument, CutLabelDefinition, Analytic, PortfolioGroup, Person, AccessMetadata, Order, UnitResult, MarketData, ConfigurationRecipe, Allocation, Calendar, LegalEntity, InvestorRecord, InvestmentAccount, Placement, Execution, Block, Participation, Package, OrderInstruction, NextBestAction, CustomEntity, InstrumentEvent, Account, ChartOfAccounts, CustodianAccount, CheckDefinition, Abor, AborConfiguration, Fund, FundConfiguration, Fee, Reconciliation, PropertyDefinition, Compliance, DiaryEntry, Leg, DerivedValuation, Timeline, ClosedPeriod, AddressKeyDefinition, AmortisationRuleSet, AnalyticsSetInventory, AtomUnitResult, CleardownModule, ComplexMarketData, ComplianceRunSummary, ComplianceRule, ComplianceRunInfo, CorporateActionSource, CounterpartyAgreement, CustomEntityDefinition, DataType, Dialect, EventHandler, GeneralLedgerProfile, PostingModule, Quote, RecipeComposer, ReconciliationRunBreak, ReferenceList, RelationDefinition, ReturnBlockIndex, SRSDocument, SRSIndex, TransactionTemplate, TransactionTemplateScope, TransactionType, TransactionTypeConfig, TranslationScript, TaskDefinition, TaskInstance, Worker, StagingRuleSet, IdentifierDefinition</value>
        [DataMember(Name = "domain", IsRequired = true, EmitDefaultValue = true)]
        public DomainEnum Domain { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateDerivedPropertyDefinitionRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CreateDerivedPropertyDefinitionRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateDerivedPropertyDefinitionRequest" /> class.
        /// </summary>
        /// <param name="domain">The domain that the property exists in. Not all available values are currently supported, please check the documentation: https://support.lusid.com/knowledgebase/article/KA-01719/. The available values are: NotDefined, Transaction, Portfolio, Holding, ReferenceHolding, TransactionConfiguration, Instrument, CutLabelDefinition, Analytic, PortfolioGroup, Person, AccessMetadata, Order, UnitResult, MarketData, ConfigurationRecipe, Allocation, Calendar, LegalEntity, InvestorRecord, InvestmentAccount, Placement, Execution, Block, Participation, Package, OrderInstruction, NextBestAction, CustomEntity, InstrumentEvent, Account, ChartOfAccounts, CustodianAccount, CheckDefinition, Abor, AborConfiguration, Fund, FundConfiguration, Fee, Reconciliation, PropertyDefinition, Compliance, DiaryEntry, Leg, DerivedValuation, Timeline, ClosedPeriod, AddressKeyDefinition, AmortisationRuleSet, AnalyticsSetInventory, AtomUnitResult, CleardownModule, ComplexMarketData, ComplianceRunSummary, ComplianceRule, ComplianceRunInfo, CorporateActionSource, CounterpartyAgreement, CustomEntityDefinition, DataType, Dialect, EventHandler, GeneralLedgerProfile, PostingModule, Quote, RecipeComposer, ReconciliationRunBreak, ReferenceList, RelationDefinition, ReturnBlockIndex, SRSDocument, SRSIndex, TransactionTemplate, TransactionTemplateScope, TransactionType, TransactionTypeConfig, TranslationScript, TaskDefinition, TaskInstance, Worker, StagingRuleSet, IdentifierDefinition (required).</param>
        /// <param name="scope">The scope that the property exists in. (required).</param>
        /// <param name="code">The code of the property. Together with the domain and scope this uniquely identifies the property. (required).</param>
        /// <param name="displayName">The display name of the property. (required).</param>
        /// <param name="dataTypeId">dataTypeId (required).</param>
        /// <param name="propertyDescription">Describes the property.</param>
        /// <param name="derivationFormula">The rule that defines how data is composed for a derived property. (required).</param>
        /// <param name="isFilterable">Bool indicating whether the values of this property are fitlerable, this is true for all non-derived property defintions.  For a derived definition this must be set true to enable filtering. (required).</param>
        public CreateDerivedPropertyDefinitionRequest(DomainEnum domain = default(DomainEnum), string scope = default(string), string code = default(string), string displayName = default(string), ResourceId dataTypeId = default(ResourceId), string propertyDescription = default(string), string derivationFormula = default(string), bool isFilterable = default(bool))
        {
            this.Domain = domain;
            // to ensure "scope" is required (not null)
            if (scope == null)
            {
                throw new ArgumentNullException("scope is a required property for CreateDerivedPropertyDefinitionRequest and cannot be null");
            }
            this.Scope = scope;
            // to ensure "code" is required (not null)
            if (code == null)
            {
                throw new ArgumentNullException("code is a required property for CreateDerivedPropertyDefinitionRequest and cannot be null");
            }
            this.Code = code;
            // to ensure "displayName" is required (not null)
            if (displayName == null)
            {
                throw new ArgumentNullException("displayName is a required property for CreateDerivedPropertyDefinitionRequest and cannot be null");
            }
            this.DisplayName = displayName;
            // to ensure "dataTypeId" is required (not null)
            if (dataTypeId == null)
            {
                throw new ArgumentNullException("dataTypeId is a required property for CreateDerivedPropertyDefinitionRequest and cannot be null");
            }
            this.DataTypeId = dataTypeId;
            // to ensure "derivationFormula" is required (not null)
            if (derivationFormula == null)
            {
                throw new ArgumentNullException("derivationFormula is a required property for CreateDerivedPropertyDefinitionRequest and cannot be null");
            }
            this.DerivationFormula = derivationFormula;
            this.IsFilterable = isFilterable;
            this.PropertyDescription = propertyDescription;
        }

        /// <summary>
        /// The scope that the property exists in.
        /// </summary>
        /// <value>The scope that the property exists in.</value>
        [DataMember(Name = "scope", IsRequired = true, EmitDefaultValue = true)]
        public string Scope { get; set; }

        /// <summary>
        /// The code of the property. Together with the domain and scope this uniquely identifies the property.
        /// </summary>
        /// <value>The code of the property. Together with the domain and scope this uniquely identifies the property.</value>
        [DataMember(Name = "code", IsRequired = true, EmitDefaultValue = true)]
        public string Code { get; set; }

        /// <summary>
        /// The display name of the property.
        /// </summary>
        /// <value>The display name of the property.</value>
        [DataMember(Name = "displayName", IsRequired = true, EmitDefaultValue = true)]
        public string DisplayName { get; set; }

        /// <summary>
        /// Gets or Sets DataTypeId
        /// </summary>
        [DataMember(Name = "dataTypeId", IsRequired = true, EmitDefaultValue = true)]
        public ResourceId DataTypeId { get; set; }

        /// <summary>
        /// Describes the property
        /// </summary>
        /// <value>Describes the property</value>
        [DataMember(Name = "propertyDescription", EmitDefaultValue = true)]
        public string PropertyDescription { get; set; }

        /// <summary>
        /// The rule that defines how data is composed for a derived property.
        /// </summary>
        /// <value>The rule that defines how data is composed for a derived property.</value>
        [DataMember(Name = "derivationFormula", IsRequired = true, EmitDefaultValue = true)]
        public string DerivationFormula { get; set; }

        /// <summary>
        /// Bool indicating whether the values of this property are fitlerable, this is true for all non-derived property defintions.  For a derived definition this must be set true to enable filtering.
        /// </summary>
        /// <value>Bool indicating whether the values of this property are fitlerable, this is true for all non-derived property defintions.  For a derived definition this must be set true to enable filtering.</value>
        [DataMember(Name = "isFilterable", IsRequired = true, EmitDefaultValue = true)]
        public bool IsFilterable { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CreateDerivedPropertyDefinitionRequest {\n");
            sb.Append("  Domain: ").Append(Domain).Append("\n");
            sb.Append("  Scope: ").Append(Scope).Append("\n");
            sb.Append("  Code: ").Append(Code).Append("\n");
            sb.Append("  DisplayName: ").Append(DisplayName).Append("\n");
            sb.Append("  DataTypeId: ").Append(DataTypeId).Append("\n");
            sb.Append("  PropertyDescription: ").Append(PropertyDescription).Append("\n");
            sb.Append("  DerivationFormula: ").Append(DerivationFormula).Append("\n");
            sb.Append("  IsFilterable: ").Append(IsFilterable).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CreateDerivedPropertyDefinitionRequest);
        }

        /// <summary>
        /// Returns true if CreateDerivedPropertyDefinitionRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of CreateDerivedPropertyDefinitionRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CreateDerivedPropertyDefinitionRequest input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Domain == input.Domain ||
                    this.Domain.Equals(input.Domain)
                ) && 
                (
                    this.Scope == input.Scope ||
                    (this.Scope != null &&
                    this.Scope.Equals(input.Scope))
                ) && 
                (
                    this.Code == input.Code ||
                    (this.Code != null &&
                    this.Code.Equals(input.Code))
                ) && 
                (
                    this.DisplayName == input.DisplayName ||
                    (this.DisplayName != null &&
                    this.DisplayName.Equals(input.DisplayName))
                ) && 
                (
                    this.DataTypeId == input.DataTypeId ||
                    (this.DataTypeId != null &&
                    this.DataTypeId.Equals(input.DataTypeId))
                ) && 
                (
                    this.PropertyDescription == input.PropertyDescription ||
                    (this.PropertyDescription != null &&
                    this.PropertyDescription.Equals(input.PropertyDescription))
                ) && 
                (
                    this.DerivationFormula == input.DerivationFormula ||
                    (this.DerivationFormula != null &&
                    this.DerivationFormula.Equals(input.DerivationFormula))
                ) && 
                (
                    this.IsFilterable == input.IsFilterable ||
                    this.IsFilterable.Equals(input.IsFilterable)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Domain.GetHashCode();
                if (this.Scope != null)
                {
                    hashCode = (hashCode * 59) + this.Scope.GetHashCode();
                }
                if (this.Code != null)
                {
                    hashCode = (hashCode * 59) + this.Code.GetHashCode();
                }
                if (this.DisplayName != null)
                {
                    hashCode = (hashCode * 59) + this.DisplayName.GetHashCode();
                }
                if (this.DataTypeId != null)
                {
                    hashCode = (hashCode * 59) + this.DataTypeId.GetHashCode();
                }
                if (this.PropertyDescription != null)
                {
                    hashCode = (hashCode * 59) + this.PropertyDescription.GetHashCode();
                }
                if (this.DerivationFormula != null)
                {
                    hashCode = (hashCode * 59) + this.DerivationFormula.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.IsFilterable.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // DisplayName (string) minLength
            if (this.DisplayName != null && this.DisplayName.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for DisplayName, length must be greater than 1.", new [] { "DisplayName" });
            }

            // PropertyDescription (string) maxLength
            if (this.PropertyDescription != null && this.PropertyDescription.Length > 512)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PropertyDescription, length must be less than 512.", new [] { "PropertyDescription" });
            }

            // DerivationFormula (string) minLength
            if (this.DerivationFormula != null && this.DerivationFormula.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for DerivationFormula, length must be greater than 1.", new [] { "DerivationFormula" });
            }

            yield break;
        }
    }
}
