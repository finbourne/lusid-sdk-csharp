/*
 * LUSID API
 *
 * # Introduction  This page documents the [LUSID APIs](https://www.lusid.com/api/swagger), which allows authorised clients to query and update their data within the LUSID platform.  SDKs to interact with the LUSID APIs are available in the following languages and frameworks:  * [C#](https://github.com/finbourne/lusid-sdk-csharp) * [Java](https://github.com/finbourne/lusid-sdk-java) * [JavaScript](https://github.com/finbourne/lusid-sdk-js) * [Python](https://github.com/finbourne/lusid-sdk-python) * [Angular](https://github.com/finbourne/lusid-sdk-angular)  The LUSID platform is made up of a number of sub-applications. You can find the API / swagger documentation by following the links in the table below.   | Application | Description | API / Swagger Documentation | | - -- -- | - -- -- | - -- - | | LUSID | Open, API-first, developer-friendly investment data platform. | [Swagger](https://www.lusid.com/api/swagger/index.html) | | Web app | User-facing front end for LUSID. | [Swagger](https://www.lusid.com/app/swagger/index.html) | | Scheduler | Automated job scheduler. | [Swagger](https://www.lusid.com/scheduler2/swagger/index.html) | | Insights |Monitoring and troubleshooting service. | [Swagger](https://www.lusid.com/insights/swagger/index.html) | | Identity | Identity management for LUSID (in conjuction with Access) | [Swagger](https://www.lusid.com/identity/swagger/index.html) | | Access | Access control for LUSID (in conjunction with Identity) | [Swagger](https://www.lusid.com/access/swagger/index.html) | | Drive | Secure file repository and manager for collaboration. | [Swagger](https://www.lusid.com/drive/swagger/index.html) | | Luminesce | Data virtualisation service (query data from multiple providers, including LUSID) | [Swagger](https://www.lusid.com/honeycomb/swagger/index.html) | | Notification | Notification service. | [Swagger](https://www.lusid.com/notifications/swagger/index.html) | | Configuration | File store for secrets and other sensitive information. | [Swagger](https://www.lusid.com/configuration/swagger/index.html) | 
 *
 * The version of the OpenAPI document: 0.11.3439
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Lusid.Sdk.Client.OpenAPIDateConverter;

namespace Lusid.Sdk.Model
{
    /// <summary>
    /// UpsertReferencePortfolioConstituentsRequest
    /// </summary>
    [DataContract(Name = "UpsertReferencePortfolioConstituentsRequest")]
    public partial class UpsertReferencePortfolioConstituentsRequest : IEquatable<UpsertReferencePortfolioConstituentsRequest>
    {
        /// <summary>
        /// The available values are: Static, Floating, Periodical
        /// </summary>
        /// <value>The available values are: Static, Floating, Periodical</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum WeightTypeEnum
        {
            /// <summary>
            /// Enum Static for value: Static
            /// </summary>
            [EnumMember(Value = "Static")]
            Static = 1,

            /// <summary>
            /// Enum Floating for value: Floating
            /// </summary>
            [EnumMember(Value = "Floating")]
            Floating = 2,

            /// <summary>
            /// Enum Periodical for value: Periodical
            /// </summary>
            [EnumMember(Value = "Periodical")]
            Periodical = 3

        }


        /// <summary>
        /// The available values are: Static, Floating, Periodical
        /// </summary>
        /// <value>The available values are: Static, Floating, Periodical</value>
        [DataMember(Name = "weightType", IsRequired = true, EmitDefaultValue = false)]
        public WeightTypeEnum WeightType { get; set; }
        /// <summary>
        /// The available values are: Daily, Weekly, Monthly, Quarterly, Annually
        /// </summary>
        /// <value>The available values are: Daily, Weekly, Monthly, Quarterly, Annually</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum PeriodTypeEnum
        {
            /// <summary>
            /// Enum Daily for value: Daily
            /// </summary>
            [EnumMember(Value = "Daily")]
            Daily = 1,

            /// <summary>
            /// Enum Weekly for value: Weekly
            /// </summary>
            [EnumMember(Value = "Weekly")]
            Weekly = 2,

            /// <summary>
            /// Enum Monthly for value: Monthly
            /// </summary>
            [EnumMember(Value = "Monthly")]
            Monthly = 3,

            /// <summary>
            /// Enum Quarterly for value: Quarterly
            /// </summary>
            [EnumMember(Value = "Quarterly")]
            Quarterly = 4,

            /// <summary>
            /// Enum Annually for value: Annually
            /// </summary>
            [EnumMember(Value = "Annually")]
            Annually = 5

        }


        /// <summary>
        /// The available values are: Daily, Weekly, Monthly, Quarterly, Annually
        /// </summary>
        /// <value>The available values are: Daily, Weekly, Monthly, Quarterly, Annually</value>
        [DataMember(Name = "periodType", EmitDefaultValue = true)]
        public PeriodTypeEnum? PeriodType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="UpsertReferencePortfolioConstituentsRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected UpsertReferencePortfolioConstituentsRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="UpsertReferencePortfolioConstituentsRequest" /> class.
        /// </summary>
        /// <param name="effectiveFrom">The first date from which the weights will apply (required).</param>
        /// <param name="weightType">The available values are: Static, Floating, Periodical (required).</param>
        /// <param name="periodType">The available values are: Daily, Weekly, Monthly, Quarterly, Annually.</param>
        /// <param name="periodCount">periodCount.</param>
        /// <param name="constituents">Set of constituents (instrument/weight pairings) (required).</param>
        public UpsertReferencePortfolioConstituentsRequest(DateTimeOrCutLabel effectiveFrom = default(DateTimeOrCutLabel), WeightTypeEnum weightType = default(WeightTypeEnum), PeriodTypeEnum? periodType = default(PeriodTypeEnum?), int? periodCount = default(int?), List<ReferencePortfolioConstituentRequest> constituents = default(List<ReferencePortfolioConstituentRequest>))
        {
            // to ensure "effectiveFrom" is required (not null)
            this.EffectiveFrom = effectiveFrom ?? throw new ArgumentNullException("effectiveFrom is a required property for UpsertReferencePortfolioConstituentsRequest and cannot be null");
            this.WeightType = weightType;
            // to ensure "constituents" is required (not null)
            this.Constituents = constituents ?? throw new ArgumentNullException("constituents is a required property for UpsertReferencePortfolioConstituentsRequest and cannot be null");
            this.PeriodType = periodType;
            this.PeriodCount = periodCount;
        }

        /// <summary>
        /// The first date from which the weights will apply
        /// </summary>
        /// <value>The first date from which the weights will apply</value>
        [DataMember(Name = "effectiveFrom", IsRequired = true, EmitDefaultValue = false)]
        public DateTimeOrCutLabel EffectiveFrom { get; set; }

        /// <summary>
        /// Gets or Sets PeriodCount
        /// </summary>
        [DataMember(Name = "periodCount", EmitDefaultValue = true)]
        public int? PeriodCount { get; set; }

        /// <summary>
        /// Set of constituents (instrument/weight pairings)
        /// </summary>
        /// <value>Set of constituents (instrument/weight pairings)</value>
        [DataMember(Name = "constituents", IsRequired = true, EmitDefaultValue = false)]
        public List<ReferencePortfolioConstituentRequest> Constituents { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class UpsertReferencePortfolioConstituentsRequest {\n");
            sb.Append("  EffectiveFrom: ").Append(EffectiveFrom).Append("\n");
            sb.Append("  WeightType: ").Append(WeightType).Append("\n");
            sb.Append("  PeriodType: ").Append(PeriodType).Append("\n");
            sb.Append("  PeriodCount: ").Append(PeriodCount).Append("\n");
            sb.Append("  Constituents: ").Append(Constituents).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as UpsertReferencePortfolioConstituentsRequest);
        }

        /// <summary>
        /// Returns true if UpsertReferencePortfolioConstituentsRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of UpsertReferencePortfolioConstituentsRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UpsertReferencePortfolioConstituentsRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.EffectiveFrom == input.EffectiveFrom ||
                    (this.EffectiveFrom != null &&
                    this.EffectiveFrom.Equals(input.EffectiveFrom))
                ) && 
                (
                    this.WeightType == input.WeightType ||
                    this.WeightType.Equals(input.WeightType)
                ) && 
                (
                    this.PeriodType == input.PeriodType ||
                    this.PeriodType.Equals(input.PeriodType)
                ) && 
                (
                    this.PeriodCount == input.PeriodCount ||
                    (this.PeriodCount != null &&
                    this.PeriodCount.Equals(input.PeriodCount))
                ) && 
                (
                    this.Constituents == input.Constituents ||
                    this.Constituents != null &&
                    input.Constituents != null &&
                    this.Constituents.SequenceEqual(input.Constituents)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.EffectiveFrom != null)
                    hashCode = hashCode * 59 + this.EffectiveFrom.GetHashCode();
                hashCode = hashCode * 59 + this.WeightType.GetHashCode();
                hashCode = hashCode * 59 + this.PeriodType.GetHashCode();
                if (this.PeriodCount != null)
                    hashCode = hashCode * 59 + this.PeriodCount.GetHashCode();
                if (this.Constituents != null)
                    hashCode = hashCode * 59 + this.Constituents.GetHashCode();
                return hashCode;
            }
        }

    }
}
