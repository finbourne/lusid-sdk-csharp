/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Lusid.Sdk.Client.OpenAPIDateConverter;

namespace Lusid.Sdk.Model
{
    /// <summary>
    /// The ReferenceData relevant to the property. The ReferenceData is taken from the DataType on the PropertyDefinition that defines the Property. Only ReferenceData where the ReferenceData value matches the Property value is included.
    /// </summary>
    [DataContract(Name = "PropertyReferenceDataValue")]
    public partial class PropertyReferenceDataValue : IEquatable<PropertyReferenceDataValue>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PropertyReferenceDataValue" /> class.
        /// </summary>
        /// <param name="stringValue">stringValue.</param>
        /// <param name="numericValue">numericValue.</param>
        public PropertyReferenceDataValue(string stringValue = default(string), decimal? numericValue = default(decimal?))
        {
            this.StringValue = stringValue;
            this.NumericValue = numericValue;
        }

        /// <summary>
        /// Gets or Sets StringValue
        /// </summary>
        [DataMember(Name = "stringValue", EmitDefaultValue = true)]
        public string StringValue { get; set; }

        /// <summary>
        /// Gets or Sets NumericValue
        /// </summary>
        [DataMember(Name = "numericValue", EmitDefaultValue = true)]
        public decimal? NumericValue { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PropertyReferenceDataValue {\n");
            sb.Append("  StringValue: ").Append(StringValue).Append("\n");
            sb.Append("  NumericValue: ").Append(NumericValue).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PropertyReferenceDataValue);
        }

        /// <summary>
        /// Returns true if PropertyReferenceDataValue instances are equal
        /// </summary>
        /// <param name="input">Instance of PropertyReferenceDataValue to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PropertyReferenceDataValue input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.StringValue == input.StringValue ||
                    (this.StringValue != null &&
                    this.StringValue.Equals(input.StringValue))
                ) && 
                (
                    this.NumericValue == input.NumericValue ||
                    (this.NumericValue != null &&
                    this.NumericValue.Equals(input.NumericValue))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.StringValue != null)
                {
                    hashCode = (hashCode * 59) + this.StringValue.GetHashCode();
                }
                if (this.NumericValue != null)
                {
                    hashCode = (hashCode * 59) + this.NumericValue.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // StringValue (string) maxLength
            if (this.StringValue != null && this.StringValue.Length > 512)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for StringValue, length must be less than 512.", new [] { "StringValue" });
            }

            // StringValue (string) minLength
            if (this.StringValue != null && this.StringValue.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for StringValue, length must be greater than 1.", new [] { "StringValue" });
            }

            yield break;
        }
    }
}
