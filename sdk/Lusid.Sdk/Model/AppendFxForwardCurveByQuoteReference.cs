/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using JsonSubTypes;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Lusid.Sdk.Client.OpenAPIDateConverter;

namespace Lusid.Sdk.Model
{
    /// <summary>
    /// Used to append a new point to an FX curve defined using &#x60;FxForwardCurveByQuoteReference&#x60;.
    /// </summary>
    [DataContract(Name = "AppendFxForwardCurveByQuoteReference")]
    [JsonConverter(typeof(JsonSubtypes), "MarketDataType")]
    public partial class AppendFxForwardCurveByQuoteReference : AppendMarketData, IEquatable<AppendFxForwardCurveByQuoteReference>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AppendFxForwardCurveByQuoteReference" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected AppendFxForwardCurveByQuoteReference() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="AppendFxForwardCurveByQuoteReference" /> class.
        /// </summary>
        /// <param name="tenor">Tenor for which the forward rate applies. (required).</param>
        /// <param name="quoteReference">A collection of identifiers for the tenor, which will be used to query the LUSID Quote Store to resolve the actual rates. The keys must be chosen from the following enumeration: [LusidInstrumentId, Isin, Sedol, Cusip, ClientInternal, Figi, RIC, QuotePermId, REDCode, BBGId, ICECode].  For example:  \&quot;quoteReference\&quot;: {\&quot;ClientInternal\&quot;: \&quot;SomeIdentifierForTenor\&quot;} (required).</param>
        /// <param name="marketDataType">The available values are: AppendFxForwardCurveByQuoteReference, AppendFxForwardCurveData, AppendFxForwardPipsCurveData, AppendFxForwardTenorCurveData, AppendFxForwardTenorPipsCurveData (required) (default to &quot;AppendFxForwardCurveByQuoteReference&quot;).</param>
        public AppendFxForwardCurveByQuoteReference(string tenor = default(string), Dictionary<string, string> quoteReference = default(Dictionary<string, string>), MarketDataTypeEnum marketDataType = default(MarketDataTypeEnum)) : base(marketDataType)
        {
            // to ensure "tenor" is required (not null)
            if (tenor == null)
            {
                throw new ArgumentNullException("tenor is a required property for AppendFxForwardCurveByQuoteReference and cannot be null");
            }
            this.Tenor = tenor;
            // to ensure "quoteReference" is required (not null)
            if (quoteReference == null)
            {
                throw new ArgumentNullException("quoteReference is a required property for AppendFxForwardCurveByQuoteReference and cannot be null");
            }
            this.QuoteReference = quoteReference;
        }

        /// <summary>
        /// Tenor for which the forward rate applies.
        /// </summary>
        /// <value>Tenor for which the forward rate applies.</value>
        [DataMember(Name = "tenor", IsRequired = true, EmitDefaultValue = true)]
        public string Tenor { get; set; }

        /// <summary>
        /// A collection of identifiers for the tenor, which will be used to query the LUSID Quote Store to resolve the actual rates. The keys must be chosen from the following enumeration: [LusidInstrumentId, Isin, Sedol, Cusip, ClientInternal, Figi, RIC, QuotePermId, REDCode, BBGId, ICECode].  For example:  \&quot;quoteReference\&quot;: {\&quot;ClientInternal\&quot;: \&quot;SomeIdentifierForTenor\&quot;}
        /// </summary>
        /// <value>A collection of identifiers for the tenor, which will be used to query the LUSID Quote Store to resolve the actual rates. The keys must be chosen from the following enumeration: [LusidInstrumentId, Isin, Sedol, Cusip, ClientInternal, Figi, RIC, QuotePermId, REDCode, BBGId, ICECode].  For example:  \&quot;quoteReference\&quot;: {\&quot;ClientInternal\&quot;: \&quot;SomeIdentifierForTenor\&quot;}</value>
        [DataMember(Name = "quoteReference", IsRequired = true, EmitDefaultValue = true)]
        public Dictionary<string, string> QuoteReference { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AppendFxForwardCurveByQuoteReference {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  Tenor: ").Append(Tenor).Append("\n");
            sb.Append("  QuoteReference: ").Append(QuoteReference).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AppendFxForwardCurveByQuoteReference);
        }

        /// <summary>
        /// Returns true if AppendFxForwardCurveByQuoteReference instances are equal
        /// </summary>
        /// <param name="input">Instance of AppendFxForwardCurveByQuoteReference to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AppendFxForwardCurveByQuoteReference input)
        {
            if (input == null)
            {
                return false;
            }
            return base.Equals(input) && 
                (
                    this.Tenor == input.Tenor ||
                    (this.Tenor != null &&
                    this.Tenor.Equals(input.Tenor))
                ) && base.Equals(input) && 
                (
                    this.QuoteReference == input.QuoteReference ||
                    this.QuoteReference != null &&
                    input.QuoteReference != null &&
                    this.QuoteReference.SequenceEqual(input.QuoteReference)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = base.GetHashCode();
                if (this.Tenor != null)
                {
                    hashCode = (hashCode * 59) + this.Tenor.GetHashCode();
                }
                if (this.QuoteReference != null)
                {
                    hashCode = (hashCode * 59) + this.QuoteReference.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            return this.BaseValidate(validationContext);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        protected IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> BaseValidate(ValidationContext validationContext)
        {
            foreach (var x in base.BaseValidate(validationContext))
            {
                yield return x;
            }
            // Tenor (string) maxLength
            if (this.Tenor != null && this.Tenor.Length > 16)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Tenor, length must be less than 16.", new [] { "Tenor" });
            }

            // Tenor (string) minLength
            if (this.Tenor != null && this.Tenor.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Tenor, length must be greater than 0.", new [] { "Tenor" });
            }

            yield break;
        }
    }
}
