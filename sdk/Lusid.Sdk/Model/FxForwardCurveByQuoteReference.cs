/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using JsonSubTypes;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Lusid.Sdk.Client.OpenAPIDateConverter;

namespace Lusid.Sdk.Model
{
    /// <summary>
    /// Contains data (i.e. tenors and rates + metadata) for building fx forward curves (when combined with a date to build on)
    /// </summary>
    [DataContract(Name = "FxForwardCurveByQuoteReference")]
    [JsonConverter(typeof(JsonSubtypes), "MarketDataType")]
    public partial class FxForwardCurveByQuoteReference : ComplexMarketData, IEquatable<FxForwardCurveByQuoteReference>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FxForwardCurveByQuoteReference" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected FxForwardCurveByQuoteReference() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="FxForwardCurveByQuoteReference" /> class.
        /// </summary>
        /// <param name="domCcy">Domestic currency of the fx forward (required).</param>
        /// <param name="fgnCcy">Foreign currency of the fx forward (required).</param>
        /// <param name="tenors">Tenors for which the forward rates apply.  For more information on tenors, see [knowledge base article KA-02097](https://support.lusid.com/knowledgebase/article/KA-02097) (required).</param>
        /// <param name="quoteReferences">For each tenor, a collection of identifiers. These will be looked up in the LUSID Quote Store to resolve the actual rates.  Accepts an array of Dictionary&lt;string, string&gt;. The keys of each dictionary must be chosen from the following enumeration:  [LusidInstrumentId, Isin, Sedol, Cusip, ClientInternal, Figi, RIC, QuotePermId, REDCode, BBGId, ICECode].  For example:    \&quot;quoteReferences\&quot;: [{\&quot;ClientInternal\&quot;: \&quot;SomeIdentifierForFirstTenor\&quot;},{\&quot;ClientInternal\&quot;: \&quot;SomeIdentifierForSecondTenor\&quot;} (required).</param>
        /// <param name="lineage">Description of the complex market data&#39;s lineage e.g. &#39;FundAccountant_GreenQuality&#39;..</param>
        /// <param name="marketDataOptions">marketDataOptions.</param>
        /// <param name="calendars">The list of conventions that should be used when interpreting tenors as dates..</param>
        /// <param name="spotDaysCalculationType">Configures how to calculate the spot date from the build date using the Calendars provided.  Supported string (enumeration) values are: [ SingleCalendar, UnionCalendars ].</param>
        /// <param name="marketDataType">The available values are: DiscountFactorCurveData, EquityVolSurfaceData, FxVolSurfaceData, IrVolCubeData, OpaqueMarketData, YieldCurveData, FxForwardCurveData, FxForwardPipsCurveData, FxForwardTenorCurveData, FxForwardTenorPipsCurveData, FxForwardCurveByQuoteReference, CreditSpreadCurveData, EquityCurveByPricesData, ConstantVolatilitySurface (required) (default to &quot;FxForwardCurveByQuoteReference&quot;).</param>
        public FxForwardCurveByQuoteReference(string domCcy = default(string), string fgnCcy = default(string), List<string> tenors = default(List<string>), List<Dictionary<string, string>> quoteReferences = default(List<Dictionary<string, string>>), string lineage = default(string), MarketDataOptions marketDataOptions = default(MarketDataOptions), List<FxTenorConvention> calendars = default(List<FxTenorConvention>), string spotDaysCalculationType = default(string), MarketDataTypeEnum marketDataType = default(MarketDataTypeEnum)) : base(marketDataType)
        {
            // to ensure "domCcy" is required (not null)
            if (domCcy == null)
            {
                throw new ArgumentNullException("domCcy is a required property for FxForwardCurveByQuoteReference and cannot be null");
            }
            this.DomCcy = domCcy;
            // to ensure "fgnCcy" is required (not null)
            if (fgnCcy == null)
            {
                throw new ArgumentNullException("fgnCcy is a required property for FxForwardCurveByQuoteReference and cannot be null");
            }
            this.FgnCcy = fgnCcy;
            // to ensure "tenors" is required (not null)
            if (tenors == null)
            {
                throw new ArgumentNullException("tenors is a required property for FxForwardCurveByQuoteReference and cannot be null");
            }
            this.Tenors = tenors;
            // to ensure "quoteReferences" is required (not null)
            if (quoteReferences == null)
            {
                throw new ArgumentNullException("quoteReferences is a required property for FxForwardCurveByQuoteReference and cannot be null");
            }
            this.QuoteReferences = quoteReferences;
            this.Lineage = lineage;
            this.MarketDataOptions = marketDataOptions;
            this.Calendars = calendars;
            this.SpotDaysCalculationType = spotDaysCalculationType;
        }

        /// <summary>
        /// Domestic currency of the fx forward
        /// </summary>
        /// <value>Domestic currency of the fx forward</value>
        [DataMember(Name = "domCcy", IsRequired = true, EmitDefaultValue = true)]
        public string DomCcy { get; set; }

        /// <summary>
        /// Foreign currency of the fx forward
        /// </summary>
        /// <value>Foreign currency of the fx forward</value>
        [DataMember(Name = "fgnCcy", IsRequired = true, EmitDefaultValue = true)]
        public string FgnCcy { get; set; }

        /// <summary>
        /// Tenors for which the forward rates apply.  For more information on tenors, see [knowledge base article KA-02097](https://support.lusid.com/knowledgebase/article/KA-02097)
        /// </summary>
        /// <value>Tenors for which the forward rates apply.  For more information on tenors, see [knowledge base article KA-02097](https://support.lusid.com/knowledgebase/article/KA-02097)</value>
        [DataMember(Name = "tenors", IsRequired = true, EmitDefaultValue = true)]
        public List<string> Tenors { get; set; }

        /// <summary>
        /// For each tenor, a collection of identifiers. These will be looked up in the LUSID Quote Store to resolve the actual rates.  Accepts an array of Dictionary&lt;string, string&gt;. The keys of each dictionary must be chosen from the following enumeration:  [LusidInstrumentId, Isin, Sedol, Cusip, ClientInternal, Figi, RIC, QuotePermId, REDCode, BBGId, ICECode].  For example:    \&quot;quoteReferences\&quot;: [{\&quot;ClientInternal\&quot;: \&quot;SomeIdentifierForFirstTenor\&quot;},{\&quot;ClientInternal\&quot;: \&quot;SomeIdentifierForSecondTenor\&quot;}
        /// </summary>
        /// <value>For each tenor, a collection of identifiers. These will be looked up in the LUSID Quote Store to resolve the actual rates.  Accepts an array of Dictionary&lt;string, string&gt;. The keys of each dictionary must be chosen from the following enumeration:  [LusidInstrumentId, Isin, Sedol, Cusip, ClientInternal, Figi, RIC, QuotePermId, REDCode, BBGId, ICECode].  For example:    \&quot;quoteReferences\&quot;: [{\&quot;ClientInternal\&quot;: \&quot;SomeIdentifierForFirstTenor\&quot;},{\&quot;ClientInternal\&quot;: \&quot;SomeIdentifierForSecondTenor\&quot;}</value>
        [DataMember(Name = "quoteReferences", IsRequired = true, EmitDefaultValue = true)]
        public List<Dictionary<string, string>> QuoteReferences { get; set; }

        /// <summary>
        /// Description of the complex market data&#39;s lineage e.g. &#39;FundAccountant_GreenQuality&#39;.
        /// </summary>
        /// <value>Description of the complex market data&#39;s lineage e.g. &#39;FundAccountant_GreenQuality&#39;.</value>
        [DataMember(Name = "lineage", EmitDefaultValue = true)]
        public string Lineage { get; set; }

        /// <summary>
        /// Gets or Sets MarketDataOptions
        /// </summary>
        [DataMember(Name = "marketDataOptions", EmitDefaultValue = false)]
        public MarketDataOptions MarketDataOptions { get; set; }

        /// <summary>
        /// The list of conventions that should be used when interpreting tenors as dates.
        /// </summary>
        /// <value>The list of conventions that should be used when interpreting tenors as dates.</value>
        [DataMember(Name = "calendars", EmitDefaultValue = true)]
        public List<FxTenorConvention> Calendars { get; set; }

        /// <summary>
        /// Configures how to calculate the spot date from the build date using the Calendars provided.  Supported string (enumeration) values are: [ SingleCalendar, UnionCalendars ]
        /// </summary>
        /// <value>Configures how to calculate the spot date from the build date using the Calendars provided.  Supported string (enumeration) values are: [ SingleCalendar, UnionCalendars ]</value>
        [DataMember(Name = "spotDaysCalculationType", EmitDefaultValue = true)]
        public string SpotDaysCalculationType { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class FxForwardCurveByQuoteReference {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  DomCcy: ").Append(DomCcy).Append("\n");
            sb.Append("  FgnCcy: ").Append(FgnCcy).Append("\n");
            sb.Append("  Tenors: ").Append(Tenors).Append("\n");
            sb.Append("  QuoteReferences: ").Append(QuoteReferences).Append("\n");
            sb.Append("  Lineage: ").Append(Lineage).Append("\n");
            sb.Append("  MarketDataOptions: ").Append(MarketDataOptions).Append("\n");
            sb.Append("  Calendars: ").Append(Calendars).Append("\n");
            sb.Append("  SpotDaysCalculationType: ").Append(SpotDaysCalculationType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as FxForwardCurveByQuoteReference);
        }

        /// <summary>
        /// Returns true if FxForwardCurveByQuoteReference instances are equal
        /// </summary>
        /// <param name="input">Instance of FxForwardCurveByQuoteReference to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FxForwardCurveByQuoteReference input)
        {
            if (input == null)
            {
                return false;
            }
            return base.Equals(input) && 
                (
                    this.DomCcy == input.DomCcy ||
                    (this.DomCcy != null &&
                    this.DomCcy.Equals(input.DomCcy))
                ) && base.Equals(input) && 
                (
                    this.FgnCcy == input.FgnCcy ||
                    (this.FgnCcy != null &&
                    this.FgnCcy.Equals(input.FgnCcy))
                ) && base.Equals(input) && 
                (
                    this.Tenors == input.Tenors ||
                    this.Tenors != null &&
                    input.Tenors != null &&
                    this.Tenors.SequenceEqual(input.Tenors)
                ) && base.Equals(input) && 
                (
                    this.QuoteReferences == input.QuoteReferences ||
                    this.QuoteReferences != null &&
                    input.QuoteReferences != null &&
                    this.QuoteReferences.SequenceEqual(input.QuoteReferences)
                ) && base.Equals(input) && 
                (
                    this.Lineage == input.Lineage ||
                    (this.Lineage != null &&
                    this.Lineage.Equals(input.Lineage))
                ) && base.Equals(input) && 
                (
                    this.MarketDataOptions == input.MarketDataOptions ||
                    (this.MarketDataOptions != null &&
                    this.MarketDataOptions.Equals(input.MarketDataOptions))
                ) && base.Equals(input) && 
                (
                    this.Calendars == input.Calendars ||
                    this.Calendars != null &&
                    input.Calendars != null &&
                    this.Calendars.SequenceEqual(input.Calendars)
                ) && base.Equals(input) && 
                (
                    this.SpotDaysCalculationType == input.SpotDaysCalculationType ||
                    (this.SpotDaysCalculationType != null &&
                    this.SpotDaysCalculationType.Equals(input.SpotDaysCalculationType))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = base.GetHashCode();
                if (this.DomCcy != null)
                {
                    hashCode = (hashCode * 59) + this.DomCcy.GetHashCode();
                }
                if (this.FgnCcy != null)
                {
                    hashCode = (hashCode * 59) + this.FgnCcy.GetHashCode();
                }
                if (this.Tenors != null)
                {
                    hashCode = (hashCode * 59) + this.Tenors.GetHashCode();
                }
                if (this.QuoteReferences != null)
                {
                    hashCode = (hashCode * 59) + this.QuoteReferences.GetHashCode();
                }
                if (this.Lineage != null)
                {
                    hashCode = (hashCode * 59) + this.Lineage.GetHashCode();
                }
                if (this.MarketDataOptions != null)
                {
                    hashCode = (hashCode * 59) + this.MarketDataOptions.GetHashCode();
                }
                if (this.Calendars != null)
                {
                    hashCode = (hashCode * 59) + this.Calendars.GetHashCode();
                }
                if (this.SpotDaysCalculationType != null)
                {
                    hashCode = (hashCode * 59) + this.SpotDaysCalculationType.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            return this.BaseValidate(validationContext);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        protected IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> BaseValidate(ValidationContext validationContext)
        {
            foreach (var x in base.BaseValidate(validationContext))
            {
                yield return x;
            }
            // Lineage (string) maxLength
            if (this.Lineage != null && this.Lineage.Length > 1024)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Lineage, length must be less than 1024.", new [] { "Lineage" });
            }

            // Lineage (string) minLength
            if (this.Lineage != null && this.Lineage.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Lineage, length must be greater than 0.", new [] { "Lineage" });
            }

            yield break;
        }
    }
}
