/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Lusid.Sdk.Client.OpenAPIDateConverter;

namespace Lusid.Sdk.Model
{
    /// <summary>
    /// Extends market data key rules to be able to catch dependencies depending on where the dependency comes from, as opposed to what the dependency is asking for. For example, a market data rule might instruct all rates curves to be retrieved from a particular scope. This class gives the ability to set different behaviour depending on what is requesting the rates curve. Using two specific rules, one could instruct rates curves requested by bonds to be retrieved from a different scope than rates curves requested by swaps.
    /// </summary>
    [DataContract(Name = "MarketDataSpecificRule")]
    public partial class MarketDataSpecificRule : IEquatable<MarketDataSpecificRule>, IValidatableObject
    {
        /// <summary>
        /// The available values are: Price, Spread, Rate, LogNormalVol, NormalVol, ParSpread, IsdaSpread, Upfront, Index, Ratio, Delta, PoolFactor, InflationAssumption, DirtyPrice, PrincipalWriteOff, InterestDeferred, InterestShortfall, ConstituentWeightFactor
        /// </summary>
        /// <value>The available values are: Price, Spread, Rate, LogNormalVol, NormalVol, ParSpread, IsdaSpread, Upfront, Index, Ratio, Delta, PoolFactor, InflationAssumption, DirtyPrice, PrincipalWriteOff, InterestDeferred, InterestShortfall, ConstituentWeightFactor</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum QuoteTypeEnum
        {
            /// <summary>
            /// Enum Price for value: Price
            /// </summary>
            [EnumMember(Value = "Price")]
            Price = 1,

            /// <summary>
            /// Enum Spread for value: Spread
            /// </summary>
            [EnumMember(Value = "Spread")]
            Spread = 2,

            /// <summary>
            /// Enum Rate for value: Rate
            /// </summary>
            [EnumMember(Value = "Rate")]
            Rate = 3,

            /// <summary>
            /// Enum LogNormalVol for value: LogNormalVol
            /// </summary>
            [EnumMember(Value = "LogNormalVol")]
            LogNormalVol = 4,

            /// <summary>
            /// Enum NormalVol for value: NormalVol
            /// </summary>
            [EnumMember(Value = "NormalVol")]
            NormalVol = 5,

            /// <summary>
            /// Enum ParSpread for value: ParSpread
            /// </summary>
            [EnumMember(Value = "ParSpread")]
            ParSpread = 6,

            /// <summary>
            /// Enum IsdaSpread for value: IsdaSpread
            /// </summary>
            [EnumMember(Value = "IsdaSpread")]
            IsdaSpread = 7,

            /// <summary>
            /// Enum Upfront for value: Upfront
            /// </summary>
            [EnumMember(Value = "Upfront")]
            Upfront = 8,

            /// <summary>
            /// Enum Index for value: Index
            /// </summary>
            [EnumMember(Value = "Index")]
            Index = 9,

            /// <summary>
            /// Enum Ratio for value: Ratio
            /// </summary>
            [EnumMember(Value = "Ratio")]
            Ratio = 10,

            /// <summary>
            /// Enum Delta for value: Delta
            /// </summary>
            [EnumMember(Value = "Delta")]
            Delta = 11,

            /// <summary>
            /// Enum PoolFactor for value: PoolFactor
            /// </summary>
            [EnumMember(Value = "PoolFactor")]
            PoolFactor = 12,

            /// <summary>
            /// Enum InflationAssumption for value: InflationAssumption
            /// </summary>
            [EnumMember(Value = "InflationAssumption")]
            InflationAssumption = 13,

            /// <summary>
            /// Enum DirtyPrice for value: DirtyPrice
            /// </summary>
            [EnumMember(Value = "DirtyPrice")]
            DirtyPrice = 14,

            /// <summary>
            /// Enum PrincipalWriteOff for value: PrincipalWriteOff
            /// </summary>
            [EnumMember(Value = "PrincipalWriteOff")]
            PrincipalWriteOff = 15,

            /// <summary>
            /// Enum InterestDeferred for value: InterestDeferred
            /// </summary>
            [EnumMember(Value = "InterestDeferred")]
            InterestDeferred = 16,

            /// <summary>
            /// Enum InterestShortfall for value: InterestShortfall
            /// </summary>
            [EnumMember(Value = "InterestShortfall")]
            InterestShortfall = 17,

            /// <summary>
            /// Enum ConstituentWeightFactor for value: ConstituentWeightFactor
            /// </summary>
            [EnumMember(Value = "ConstituentWeightFactor")]
            ConstituentWeightFactor = 18
        }


        /// <summary>
        /// The available values are: Price, Spread, Rate, LogNormalVol, NormalVol, ParSpread, IsdaSpread, Upfront, Index, Ratio, Delta, PoolFactor, InflationAssumption, DirtyPrice, PrincipalWriteOff, InterestDeferred, InterestShortfall, ConstituentWeightFactor
        /// </summary>
        /// <value>The available values are: Price, Spread, Rate, LogNormalVol, NormalVol, ParSpread, IsdaSpread, Upfront, Index, Ratio, Delta, PoolFactor, InflationAssumption, DirtyPrice, PrincipalWriteOff, InterestDeferred, InterestShortfall, ConstituentWeightFactor</value>
        [DataMember(Name = "quoteType", IsRequired = true, EmitDefaultValue = true)]
        public QuoteTypeEnum QuoteType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="MarketDataSpecificRule" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected MarketDataSpecificRule() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="MarketDataSpecificRule" /> class.
        /// </summary>
        /// <param name="key">The market data key pattern which this is a rule for. A dot separated string (A.B.C.D.*) (required).</param>
        /// <param name="supplier">The market data supplier (where the data comes from) (required).</param>
        /// <param name="dataScope">The scope in which the data should be found when using this rule. (required).</param>
        /// <param name="quoteType">The available values are: Price, Spread, Rate, LogNormalVol, NormalVol, ParSpread, IsdaSpread, Upfront, Index, Ratio, Delta, PoolFactor, InflationAssumption, DirtyPrice, PrincipalWriteOff, InterestDeferred, InterestShortfall, ConstituentWeightFactor (required).</param>
        /// <param name="field">The conceptual qualification for the field, such as bid, mid, or ask. The field must be one of a defined set for the given supplier, in the same way as it is for the Finbourne.WebApi.Interface.Dto.Quotes.QuoteSeriesId (required).</param>
        /// <param name="quoteInterval">Shorthand for the time interval used to select market data. This must be a dot-separated string             nominating a start and end date, for example &#39;5D.0D&#39; to look back 5 days from today (0 days ago). The syntax             is &lt;i&gt;int&lt;/i&gt;&lt;i&gt;char&lt;/i&gt;.&lt;i&gt;int&lt;/i&gt;&lt;i&gt;char&lt;/i&gt;, where &lt;i&gt;char&lt;/i&gt; is one of D(ay), W(eek), M(onth) or Y(ear)..</param>
        /// <param name="asAt">Deprecated field which no longer has any effect on market data resolution..</param>
        /// <param name="priceSource">The source of the quote. For a given provider/supplier of market data there may be an additional qualifier, e.g. the exchange or bank that provided the quote.</param>
        /// <param name="mask">Allows for partial or complete override of the market asset resolved for a dependency Either a named override or a dot separated string (A.B.C.D.*). e.g. for Rates curve &#39;EUR.*&#39; will replace the resolve MarketAsset &#39;GBP/12M&#39;, &#39;GBP/3M&#39; with the EUR equivalent, if there are no wildcards in the mask, the mask is taken as the MarketAsset for any dependency matching the rule..</param>
        /// <param name="dependencySourceFilter">dependencySourceFilter (required).</param>
        /// <param name="sourceSystem">Determines from where LUSID should attempt to find the data. Optional and, if omitted, will default to \&quot;Lusid\&quot;. This means that data will be retrieved from the Quotes store and the ComplexMarketData store. These can be populated using the Quotes and ComplexMarketData endpoints..</param>
        /// <param name="fallThroughOnAccessDenied">When a user attempts to use a rule to access data to which they are not entitled, the rule will fail to resolve any market data. By default, such an access denied failure will stop any further attempts to resolve market data. This is so that differently entitled users always receive the same market data from market data resolution, if they have sufficient entitlements to retrieve the required data. If set to true, then an access denied failure will not stop further market data resolution, and resolution will continue with the next specified MarketDataKeyRule. Optional, and defaults to false..</param>
        public MarketDataSpecificRule(string key = default(string), string supplier = default(string), string dataScope = default(string), QuoteTypeEnum quoteType = default(QuoteTypeEnum), string field = default(string), string quoteInterval = default(string), DateTimeOffset? asAt = default(DateTimeOffset?), string priceSource = default(string), string mask = default(string), DependencySourceFilter dependencySourceFilter = default(DependencySourceFilter), string sourceSystem = default(string), bool fallThroughOnAccessDenied = default(bool))
        {
            // to ensure "key" is required (not null)
            if (key == null)
            {
                throw new ArgumentNullException("key is a required property for MarketDataSpecificRule and cannot be null");
            }
            this.Key = key;
            // to ensure "supplier" is required (not null)
            if (supplier == null)
            {
                throw new ArgumentNullException("supplier is a required property for MarketDataSpecificRule and cannot be null");
            }
            this.Supplier = supplier;
            // to ensure "dataScope" is required (not null)
            if (dataScope == null)
            {
                throw new ArgumentNullException("dataScope is a required property for MarketDataSpecificRule and cannot be null");
            }
            this.DataScope = dataScope;
            this.QuoteType = quoteType;
            // to ensure "field" is required (not null)
            if (field == null)
            {
                throw new ArgumentNullException("field is a required property for MarketDataSpecificRule and cannot be null");
            }
            this.Field = field;
            // to ensure "dependencySourceFilter" is required (not null)
            if (dependencySourceFilter == null)
            {
                throw new ArgumentNullException("dependencySourceFilter is a required property for MarketDataSpecificRule and cannot be null");
            }
            this.DependencySourceFilter = dependencySourceFilter;
            this.QuoteInterval = quoteInterval;
            this.AsAt = asAt;
            this.PriceSource = priceSource;
            this.Mask = mask;
            this.SourceSystem = sourceSystem;
            this.FallThroughOnAccessDenied = fallThroughOnAccessDenied;
        }

        /// <summary>
        /// The market data key pattern which this is a rule for. A dot separated string (A.B.C.D.*)
        /// </summary>
        /// <value>The market data key pattern which this is a rule for. A dot separated string (A.B.C.D.*)</value>
        [DataMember(Name = "key", IsRequired = true, EmitDefaultValue = true)]
        public string Key { get; set; }

        /// <summary>
        /// The market data supplier (where the data comes from)
        /// </summary>
        /// <value>The market data supplier (where the data comes from)</value>
        [DataMember(Name = "supplier", IsRequired = true, EmitDefaultValue = true)]
        public string Supplier { get; set; }

        /// <summary>
        /// The scope in which the data should be found when using this rule.
        /// </summary>
        /// <value>The scope in which the data should be found when using this rule.</value>
        [DataMember(Name = "dataScope", IsRequired = true, EmitDefaultValue = true)]
        public string DataScope { get; set; }

        /// <summary>
        /// The conceptual qualification for the field, such as bid, mid, or ask. The field must be one of a defined set for the given supplier, in the same way as it is for the Finbourne.WebApi.Interface.Dto.Quotes.QuoteSeriesId
        /// </summary>
        /// <value>The conceptual qualification for the field, such as bid, mid, or ask. The field must be one of a defined set for the given supplier, in the same way as it is for the Finbourne.WebApi.Interface.Dto.Quotes.QuoteSeriesId</value>
        [DataMember(Name = "field", IsRequired = true, EmitDefaultValue = true)]
        public string Field { get; set; }

        /// <summary>
        /// Shorthand for the time interval used to select market data. This must be a dot-separated string             nominating a start and end date, for example &#39;5D.0D&#39; to look back 5 days from today (0 days ago). The syntax             is &lt;i&gt;int&lt;/i&gt;&lt;i&gt;char&lt;/i&gt;.&lt;i&gt;int&lt;/i&gt;&lt;i&gt;char&lt;/i&gt;, where &lt;i&gt;char&lt;/i&gt; is one of D(ay), W(eek), M(onth) or Y(ear).
        /// </summary>
        /// <value>Shorthand for the time interval used to select market data. This must be a dot-separated string             nominating a start and end date, for example &#39;5D.0D&#39; to look back 5 days from today (0 days ago). The syntax             is &lt;i&gt;int&lt;/i&gt;&lt;i&gt;char&lt;/i&gt;.&lt;i&gt;int&lt;/i&gt;&lt;i&gt;char&lt;/i&gt;, where &lt;i&gt;char&lt;/i&gt; is one of D(ay), W(eek), M(onth) or Y(ear).</value>
        [DataMember(Name = "quoteInterval", EmitDefaultValue = true)]
        public string QuoteInterval { get; set; }

        /// <summary>
        /// Deprecated field which no longer has any effect on market data resolution.
        /// </summary>
        /// <value>Deprecated field which no longer has any effect on market data resolution.</value>
        [DataMember(Name = "asAt", EmitDefaultValue = true)]
        public DateTimeOffset? AsAt { get; set; }

        /// <summary>
        /// The source of the quote. For a given provider/supplier of market data there may be an additional qualifier, e.g. the exchange or bank that provided the quote
        /// </summary>
        /// <value>The source of the quote. For a given provider/supplier of market data there may be an additional qualifier, e.g. the exchange or bank that provided the quote</value>
        [DataMember(Name = "priceSource", EmitDefaultValue = true)]
        public string PriceSource { get; set; }

        /// <summary>
        /// Allows for partial or complete override of the market asset resolved for a dependency Either a named override or a dot separated string (A.B.C.D.*). e.g. for Rates curve &#39;EUR.*&#39; will replace the resolve MarketAsset &#39;GBP/12M&#39;, &#39;GBP/3M&#39; with the EUR equivalent, if there are no wildcards in the mask, the mask is taken as the MarketAsset for any dependency matching the rule.
        /// </summary>
        /// <value>Allows for partial or complete override of the market asset resolved for a dependency Either a named override or a dot separated string (A.B.C.D.*). e.g. for Rates curve &#39;EUR.*&#39; will replace the resolve MarketAsset &#39;GBP/12M&#39;, &#39;GBP/3M&#39; with the EUR equivalent, if there are no wildcards in the mask, the mask is taken as the MarketAsset for any dependency matching the rule.</value>
        [DataMember(Name = "mask", EmitDefaultValue = true)]
        public string Mask { get; set; }

        /// <summary>
        /// Gets or Sets DependencySourceFilter
        /// </summary>
        [DataMember(Name = "dependencySourceFilter", IsRequired = true, EmitDefaultValue = true)]
        public DependencySourceFilter DependencySourceFilter { get; set; }

        /// <summary>
        /// Determines from where LUSID should attempt to find the data. Optional and, if omitted, will default to \&quot;Lusid\&quot;. This means that data will be retrieved from the Quotes store and the ComplexMarketData store. These can be populated using the Quotes and ComplexMarketData endpoints.
        /// </summary>
        /// <value>Determines from where LUSID should attempt to find the data. Optional and, if omitted, will default to \&quot;Lusid\&quot;. This means that data will be retrieved from the Quotes store and the ComplexMarketData store. These can be populated using the Quotes and ComplexMarketData endpoints.</value>
        [DataMember(Name = "sourceSystem", EmitDefaultValue = true)]
        public string SourceSystem { get; set; }

        /// <summary>
        /// When a user attempts to use a rule to access data to which they are not entitled, the rule will fail to resolve any market data. By default, such an access denied failure will stop any further attempts to resolve market data. This is so that differently entitled users always receive the same market data from market data resolution, if they have sufficient entitlements to retrieve the required data. If set to true, then an access denied failure will not stop further market data resolution, and resolution will continue with the next specified MarketDataKeyRule. Optional, and defaults to false.
        /// </summary>
        /// <value>When a user attempts to use a rule to access data to which they are not entitled, the rule will fail to resolve any market data. By default, such an access denied failure will stop any further attempts to resolve market data. This is so that differently entitled users always receive the same market data from market data resolution, if they have sufficient entitlements to retrieve the required data. If set to true, then an access denied failure will not stop further market data resolution, and resolution will continue with the next specified MarketDataKeyRule. Optional, and defaults to false.</value>
        [DataMember(Name = "fallThroughOnAccessDenied", EmitDefaultValue = true)]
        public bool FallThroughOnAccessDenied { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class MarketDataSpecificRule {\n");
            sb.Append("  Key: ").Append(Key).Append("\n");
            sb.Append("  Supplier: ").Append(Supplier).Append("\n");
            sb.Append("  DataScope: ").Append(DataScope).Append("\n");
            sb.Append("  QuoteType: ").Append(QuoteType).Append("\n");
            sb.Append("  Field: ").Append(Field).Append("\n");
            sb.Append("  QuoteInterval: ").Append(QuoteInterval).Append("\n");
            sb.Append("  AsAt: ").Append(AsAt).Append("\n");
            sb.Append("  PriceSource: ").Append(PriceSource).Append("\n");
            sb.Append("  Mask: ").Append(Mask).Append("\n");
            sb.Append("  DependencySourceFilter: ").Append(DependencySourceFilter).Append("\n");
            sb.Append("  SourceSystem: ").Append(SourceSystem).Append("\n");
            sb.Append("  FallThroughOnAccessDenied: ").Append(FallThroughOnAccessDenied).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as MarketDataSpecificRule);
        }

        /// <summary>
        /// Returns true if MarketDataSpecificRule instances are equal
        /// </summary>
        /// <param name="input">Instance of MarketDataSpecificRule to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MarketDataSpecificRule input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Key == input.Key ||
                    (this.Key != null &&
                    this.Key.Equals(input.Key))
                ) && 
                (
                    this.Supplier == input.Supplier ||
                    (this.Supplier != null &&
                    this.Supplier.Equals(input.Supplier))
                ) && 
                (
                    this.DataScope == input.DataScope ||
                    (this.DataScope != null &&
                    this.DataScope.Equals(input.DataScope))
                ) && 
                (
                    this.QuoteType == input.QuoteType ||
                    this.QuoteType.Equals(input.QuoteType)
                ) && 
                (
                    this.Field == input.Field ||
                    (this.Field != null &&
                    this.Field.Equals(input.Field))
                ) && 
                (
                    this.QuoteInterval == input.QuoteInterval ||
                    (this.QuoteInterval != null &&
                    this.QuoteInterval.Equals(input.QuoteInterval))
                ) && 
                (
                    this.AsAt == input.AsAt ||
                    (this.AsAt != null &&
                    this.AsAt.Equals(input.AsAt))
                ) && 
                (
                    this.PriceSource == input.PriceSource ||
                    (this.PriceSource != null &&
                    this.PriceSource.Equals(input.PriceSource))
                ) && 
                (
                    this.Mask == input.Mask ||
                    (this.Mask != null &&
                    this.Mask.Equals(input.Mask))
                ) && 
                (
                    this.DependencySourceFilter == input.DependencySourceFilter ||
                    (this.DependencySourceFilter != null &&
                    this.DependencySourceFilter.Equals(input.DependencySourceFilter))
                ) && 
                (
                    this.SourceSystem == input.SourceSystem ||
                    (this.SourceSystem != null &&
                    this.SourceSystem.Equals(input.SourceSystem))
                ) && 
                (
                    this.FallThroughOnAccessDenied == input.FallThroughOnAccessDenied ||
                    this.FallThroughOnAccessDenied.Equals(input.FallThroughOnAccessDenied)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Key != null)
                {
                    hashCode = (hashCode * 59) + this.Key.GetHashCode();
                }
                if (this.Supplier != null)
                {
                    hashCode = (hashCode * 59) + this.Supplier.GetHashCode();
                }
                if (this.DataScope != null)
                {
                    hashCode = (hashCode * 59) + this.DataScope.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.QuoteType.GetHashCode();
                if (this.Field != null)
                {
                    hashCode = (hashCode * 59) + this.Field.GetHashCode();
                }
                if (this.QuoteInterval != null)
                {
                    hashCode = (hashCode * 59) + this.QuoteInterval.GetHashCode();
                }
                if (this.AsAt != null)
                {
                    hashCode = (hashCode * 59) + this.AsAt.GetHashCode();
                }
                if (this.PriceSource != null)
                {
                    hashCode = (hashCode * 59) + this.PriceSource.GetHashCode();
                }
                if (this.Mask != null)
                {
                    hashCode = (hashCode * 59) + this.Mask.GetHashCode();
                }
                if (this.DependencySourceFilter != null)
                {
                    hashCode = (hashCode * 59) + this.DependencySourceFilter.GetHashCode();
                }
                if (this.SourceSystem != null)
                {
                    hashCode = (hashCode * 59) + this.SourceSystem.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.FallThroughOnAccessDenied.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Key (string) maxLength
            if (this.Key != null && this.Key.Length > 128)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Key, length must be less than 128.", new [] { "Key" });
            }

            // Key (string) minLength
            if (this.Key != null && this.Key.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Key, length must be greater than 0.", new [] { "Key" });
            }

            // Supplier (string) maxLength
            if (this.Supplier != null && this.Supplier.Length > 32)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Supplier, length must be less than 32.", new [] { "Supplier" });
            }

            // Supplier (string) minLength
            if (this.Supplier != null && this.Supplier.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Supplier, length must be greater than 0.", new [] { "Supplier" });
            }

            // DataScope (string) maxLength
            if (this.DataScope != null && this.DataScope.Length > 256)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for DataScope, length must be less than 256.", new [] { "DataScope" });
            }

            // DataScope (string) minLength
            if (this.DataScope != null && this.DataScope.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for DataScope, length must be greater than 1.", new [] { "DataScope" });
            }

            // DataScope (string) pattern
            Regex regexDataScope = new Regex(@"^[a-zA-Z0-9\-_]+$", RegexOptions.CultureInvariant);
            if (false == regexDataScope.Match(this.DataScope).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for DataScope, must match a pattern of " + regexDataScope, new [] { "DataScope" });
            }

            // Field (string) maxLength
            if (this.Field != null && this.Field.Length > 32)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Field, length must be less than 32.", new [] { "Field" });
            }

            // Field (string) minLength
            if (this.Field != null && this.Field.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Field, length must be greater than 0.", new [] { "Field" });
            }

            // QuoteInterval (string) maxLength
            if (this.QuoteInterval != null && this.QuoteInterval.Length > 16)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for QuoteInterval, length must be less than 16.", new [] { "QuoteInterval" });
            }

            // QuoteInterval (string) minLength
            if (this.QuoteInterval != null && this.QuoteInterval.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for QuoteInterval, length must be greater than 0.", new [] { "QuoteInterval" });
            }

            // PriceSource (string) maxLength
            if (this.PriceSource != null && this.PriceSource.Length > 256)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PriceSource, length must be less than 256.", new [] { "PriceSource" });
            }

            // PriceSource (string) minLength
            if (this.PriceSource != null && this.PriceSource.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PriceSource, length must be greater than 0.", new [] { "PriceSource" });
            }

            // Mask (string) maxLength
            if (this.Mask != null && this.Mask.Length > 256)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Mask, length must be less than 256.", new [] { "Mask" });
            }

            // Mask (string) minLength
            if (this.Mask != null && this.Mask.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Mask, length must be greater than 0.", new [] { "Mask" });
            }

            // SourceSystem (string) maxLength
            if (this.SourceSystem != null && this.SourceSystem.Length > 256)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SourceSystem, length must be less than 256.", new [] { "SourceSystem" });
            }

            // SourceSystem (string) minLength
            if (this.SourceSystem != null && this.SourceSystem.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SourceSystem, length must be greater than 0.", new [] { "SourceSystem" });
            }

            yield break;
        }
    }
}
