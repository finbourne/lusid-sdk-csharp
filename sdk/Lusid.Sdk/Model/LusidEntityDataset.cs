/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Lusid.Sdk.Client.OpenAPIDateConverter;

namespace Lusid.Sdk.Model
{
    /// <summary>
    /// Contains the run-time parameters that are appropriate for check definitions  with datasetSchema.type &#x3D; \&quot;LusidEntity\&quot;
    /// </summary>
    [DataContract(Name = "LusidEntityDataset")]
    public partial class LusidEntityDataset : IEquatable<LusidEntityDataset>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LusidEntityDataset" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected LusidEntityDataset() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="LusidEntityDataset" /> class.
        /// </summary>
        /// <param name="asAt">The asAt date to fetch the data. Nullable. Defaults to latest..</param>
        /// <param name="effectiveAt">The effectiveAt date to fetch the data. Nullable. Defaults to latest..</param>
        /// <param name="scope">The scope of the entities to check. Required. (required).</param>
        /// <param name="asAtModifiedSince">Nullable. Filters the dataset for version.asAtModified greater than or equal to this value..</param>
        /// <param name="selectorAttribute">An attribute (field name, propertyKey or identifierKey) to use to sub-divide the dataset. (required).</param>
        /// <param name="selectorValue">The value of the above attribute used to sub-divide the dataset. (required).</param>
        /// <param name="returnIdentifierKey">The preferred identifier to return for entities with multiple external identifiers..</param>
        public LusidEntityDataset(DateTimeOffset? asAt = default(DateTimeOffset?), DateTimeOffset? effectiveAt = default(DateTimeOffset?), string scope = default(string), DateTimeOffset? asAtModifiedSince = default(DateTimeOffset?), string selectorAttribute = default(string), string selectorValue = default(string), string returnIdentifierKey = default(string))
        {
            // to ensure "scope" is required (not null)
            if (scope == null)
            {
                throw new ArgumentNullException("scope is a required property for LusidEntityDataset and cannot be null");
            }
            this.Scope = scope;
            // to ensure "selectorAttribute" is required (not null)
            if (selectorAttribute == null)
            {
                throw new ArgumentNullException("selectorAttribute is a required property for LusidEntityDataset and cannot be null");
            }
            this.SelectorAttribute = selectorAttribute;
            // to ensure "selectorValue" is required (not null)
            if (selectorValue == null)
            {
                throw new ArgumentNullException("selectorValue is a required property for LusidEntityDataset and cannot be null");
            }
            this.SelectorValue = selectorValue;
            this.AsAt = asAt;
            this.EffectiveAt = effectiveAt;
            this.AsAtModifiedSince = asAtModifiedSince;
            this.ReturnIdentifierKey = returnIdentifierKey;
        }

        /// <summary>
        /// The asAt date to fetch the data. Nullable. Defaults to latest.
        /// </summary>
        /// <value>The asAt date to fetch the data. Nullable. Defaults to latest.</value>
        [DataMember(Name = "asAt", EmitDefaultValue = true)]
        public DateTimeOffset? AsAt { get; set; }

        /// <summary>
        /// The effectiveAt date to fetch the data. Nullable. Defaults to latest.
        /// </summary>
        /// <value>The effectiveAt date to fetch the data. Nullable. Defaults to latest.</value>
        [DataMember(Name = "effectiveAt", EmitDefaultValue = true)]
        public DateTimeOffset? EffectiveAt { get; set; }

        /// <summary>
        /// The scope of the entities to check. Required.
        /// </summary>
        /// <value>The scope of the entities to check. Required.</value>
        [DataMember(Name = "scope", IsRequired = true, EmitDefaultValue = true)]
        public string Scope { get; set; }

        /// <summary>
        /// Nullable. Filters the dataset for version.asAtModified greater than or equal to this value.
        /// </summary>
        /// <value>Nullable. Filters the dataset for version.asAtModified greater than or equal to this value.</value>
        [DataMember(Name = "asAtModifiedSince", EmitDefaultValue = true)]
        public DateTimeOffset? AsAtModifiedSince { get; set; }

        /// <summary>
        /// An attribute (field name, propertyKey or identifierKey) to use to sub-divide the dataset.
        /// </summary>
        /// <value>An attribute (field name, propertyKey or identifierKey) to use to sub-divide the dataset.</value>
        [DataMember(Name = "selectorAttribute", IsRequired = true, EmitDefaultValue = true)]
        public string SelectorAttribute { get; set; }

        /// <summary>
        /// The value of the above attribute used to sub-divide the dataset.
        /// </summary>
        /// <value>The value of the above attribute used to sub-divide the dataset.</value>
        [DataMember(Name = "selectorValue", IsRequired = true, EmitDefaultValue = true)]
        public string SelectorValue { get; set; }

        /// <summary>
        /// The preferred identifier to return for entities with multiple external identifiers.
        /// </summary>
        /// <value>The preferred identifier to return for entities with multiple external identifiers.</value>
        [DataMember(Name = "returnIdentifierKey", EmitDefaultValue = true)]
        public string ReturnIdentifierKey { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class LusidEntityDataset {\n");
            sb.Append("  AsAt: ").Append(AsAt).Append("\n");
            sb.Append("  EffectiveAt: ").Append(EffectiveAt).Append("\n");
            sb.Append("  Scope: ").Append(Scope).Append("\n");
            sb.Append("  AsAtModifiedSince: ").Append(AsAtModifiedSince).Append("\n");
            sb.Append("  SelectorAttribute: ").Append(SelectorAttribute).Append("\n");
            sb.Append("  SelectorValue: ").Append(SelectorValue).Append("\n");
            sb.Append("  ReturnIdentifierKey: ").Append(ReturnIdentifierKey).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as LusidEntityDataset);
        }

        /// <summary>
        /// Returns true if LusidEntityDataset instances are equal
        /// </summary>
        /// <param name="input">Instance of LusidEntityDataset to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LusidEntityDataset input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.AsAt == input.AsAt ||
                    (this.AsAt != null &&
                    this.AsAt.Equals(input.AsAt))
                ) && 
                (
                    this.EffectiveAt == input.EffectiveAt ||
                    (this.EffectiveAt != null &&
                    this.EffectiveAt.Equals(input.EffectiveAt))
                ) && 
                (
                    this.Scope == input.Scope ||
                    (this.Scope != null &&
                    this.Scope.Equals(input.Scope))
                ) && 
                (
                    this.AsAtModifiedSince == input.AsAtModifiedSince ||
                    (this.AsAtModifiedSince != null &&
                    this.AsAtModifiedSince.Equals(input.AsAtModifiedSince))
                ) && 
                (
                    this.SelectorAttribute == input.SelectorAttribute ||
                    (this.SelectorAttribute != null &&
                    this.SelectorAttribute.Equals(input.SelectorAttribute))
                ) && 
                (
                    this.SelectorValue == input.SelectorValue ||
                    (this.SelectorValue != null &&
                    this.SelectorValue.Equals(input.SelectorValue))
                ) && 
                (
                    this.ReturnIdentifierKey == input.ReturnIdentifierKey ||
                    (this.ReturnIdentifierKey != null &&
                    this.ReturnIdentifierKey.Equals(input.ReturnIdentifierKey))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AsAt != null)
                {
                    hashCode = (hashCode * 59) + this.AsAt.GetHashCode();
                }
                if (this.EffectiveAt != null)
                {
                    hashCode = (hashCode * 59) + this.EffectiveAt.GetHashCode();
                }
                if (this.Scope != null)
                {
                    hashCode = (hashCode * 59) + this.Scope.GetHashCode();
                }
                if (this.AsAtModifiedSince != null)
                {
                    hashCode = (hashCode * 59) + this.AsAtModifiedSince.GetHashCode();
                }
                if (this.SelectorAttribute != null)
                {
                    hashCode = (hashCode * 59) + this.SelectorAttribute.GetHashCode();
                }
                if (this.SelectorValue != null)
                {
                    hashCode = (hashCode * 59) + this.SelectorValue.GetHashCode();
                }
                if (this.ReturnIdentifierKey != null)
                {
                    hashCode = (hashCode * 59) + this.ReturnIdentifierKey.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Scope (string) maxLength
            if (this.Scope != null && this.Scope.Length > 64)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Scope, length must be less than 64.", new [] { "Scope" });
            }

            // Scope (string) minLength
            if (this.Scope != null && this.Scope.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Scope, length must be greater than 1.", new [] { "Scope" });
            }

            // Scope (string) pattern
            Regex regexScope = new Regex(@"^[a-zA-Z0-9\-_]+$", RegexOptions.CultureInvariant);
            if (false == regexScope.Match(this.Scope).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Scope, must match a pattern of " + regexScope, new [] { "Scope" });
            }

            // SelectorAttribute (string) maxLength
            if (this.SelectorAttribute != null && this.SelectorAttribute.Length > 1024)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SelectorAttribute, length must be less than 1024.", new [] { "SelectorAttribute" });
            }

            // SelectorAttribute (string) minLength
            if (this.SelectorAttribute != null && this.SelectorAttribute.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SelectorAttribute, length must be greater than 0.", new [] { "SelectorAttribute" });
            }

            // SelectorValue (string) maxLength
            if (this.SelectorValue != null && this.SelectorValue.Length > 1024)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SelectorValue, length must be less than 1024.", new [] { "SelectorValue" });
            }

            // SelectorValue (string) minLength
            if (this.SelectorValue != null && this.SelectorValue.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SelectorValue, length must be greater than 0.", new [] { "SelectorValue" });
            }

            // ReturnIdentifierKey (string) maxLength
            if (this.ReturnIdentifierKey != null && this.ReturnIdentifierKey.Length > 1024)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ReturnIdentifierKey, length must be less than 1024.", new [] { "ReturnIdentifierKey" });
            }

            // ReturnIdentifierKey (string) minLength
            if (this.ReturnIdentifierKey != null && this.ReturnIdentifierKey.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ReturnIdentifierKey, length must be greater than 0.", new [] { "ReturnIdentifierKey" });
            }

            yield break;
        }
    }
}
