/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Lusid.Sdk.Client.OpenAPIDateConverter;

namespace Lusid.Sdk.Model
{
    /// <summary>
    /// ComplianceStepRequest
    /// </summary>
    [DataContract(Name = "ComplianceStepRequest")]
    public partial class ComplianceStepRequest : IEquatable<ComplianceStepRequest>, IValidatableObject
    {
        /// <summary>
        /// . The available values are: FilterStepRequest, GroupByStepRequest, GroupFilterStepRequest, BranchStepRequest, RecombineStepRequest, CheckStepRequest
        /// </summary>
        /// <value>. The available values are: FilterStepRequest, GroupByStepRequest, GroupFilterStepRequest, BranchStepRequest, RecombineStepRequest, CheckStepRequest</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ComplianceStepTypeEnum
        {
            /// <summary>
            /// Enum FilterStepRequest for value: FilterStepRequest
            /// </summary>
            [EnumMember(Value = "FilterStepRequest")]
            FilterStepRequest = 1,

            /// <summary>
            /// Enum GroupByStepRequest for value: GroupByStepRequest
            /// </summary>
            [EnumMember(Value = "GroupByStepRequest")]
            GroupByStepRequest = 2,

            /// <summary>
            /// Enum GroupFilterStepRequest for value: GroupFilterStepRequest
            /// </summary>
            [EnumMember(Value = "GroupFilterStepRequest")]
            GroupFilterStepRequest = 3,

            /// <summary>
            /// Enum BranchStepRequest for value: BranchStepRequest
            /// </summary>
            [EnumMember(Value = "BranchStepRequest")]
            BranchStepRequest = 4,

            /// <summary>
            /// Enum RecombineStepRequest for value: RecombineStepRequest
            /// </summary>
            [EnumMember(Value = "RecombineStepRequest")]
            RecombineStepRequest = 5,

            /// <summary>
            /// Enum CheckStepRequest for value: CheckStepRequest
            /// </summary>
            [EnumMember(Value = "CheckStepRequest")]
            CheckStepRequest = 6

        }


        /// <summary>
        /// . The available values are: FilterStepRequest, GroupByStepRequest, GroupFilterStepRequest, BranchStepRequest, RecombineStepRequest, CheckStepRequest
        /// </summary>
        /// <value>. The available values are: FilterStepRequest, GroupByStepRequest, GroupFilterStepRequest, BranchStepRequest, RecombineStepRequest, CheckStepRequest</value>
        [DataMember(Name = "complianceStepType", IsRequired = true, EmitDefaultValue = true)]
        public ComplianceStepTypeEnum ComplianceStepType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ComplianceStepRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ComplianceStepRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ComplianceStepRequest" /> class.
        /// </summary>
        /// <param name="complianceStepType">. The available values are: FilterStepRequest, GroupByStepRequest, GroupFilterStepRequest, BranchStepRequest, RecombineStepRequest, CheckStepRequest (required).</param>
        public ComplianceStepRequest(ComplianceStepTypeEnum complianceStepType = default(ComplianceStepTypeEnum))
        {
            this.ComplianceStepType = complianceStepType;
        }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ComplianceStepRequest {\n");
            sb.Append("  ComplianceStepType: ").Append(ComplianceStepType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ComplianceStepRequest);
        }

        /// <summary>
        /// Returns true if ComplianceStepRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of ComplianceStepRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ComplianceStepRequest input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.ComplianceStepType == input.ComplianceStepType ||
                    this.ComplianceStepType.Equals(input.ComplianceStepType)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.ComplianceStepType.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
