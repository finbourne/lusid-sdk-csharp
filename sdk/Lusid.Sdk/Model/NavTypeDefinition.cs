/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Lusid.Sdk.Client.OpenAPIDateConverter;

namespace Lusid.Sdk.Model
{
    /// <summary>
    /// NavTypeDefinition
    /// </summary>
    [DataContract(Name = "NavTypeDefinition")]
    public partial class NavTypeDefinition : IEquatable<NavTypeDefinition>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="NavTypeDefinition" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected NavTypeDefinition() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="NavTypeDefinition" /> class.
        /// </summary>
        /// <param name="code">code.</param>
        /// <param name="displayName">displayName.</param>
        /// <param name="description">description.</param>
        /// <param name="chartOfAccountsId">chartOfAccountsId (required).</param>
        /// <param name="postingModuleCodes">postingModuleCodes.</param>
        /// <param name="cleardownModuleCodes">cleardownModuleCodes.</param>
        /// <param name="valuationRecipeId">valuationRecipeId (required).</param>
        /// <param name="holdingRecipeId">holdingRecipeId (required).</param>
        /// <param name="accountingMethod">accountingMethod (required).</param>
        /// <param name="subHoldingKeys">Set of unique holding identifiers, e.g. trader, desk, strategy..</param>
        /// <param name="amortisationMethod">amortisationMethod (required).</param>
        /// <param name="transactionTypeScope">transactionTypeScope (required).</param>
        /// <param name="cashGainLossCalculationDate">cashGainLossCalculationDate (required).</param>
        public NavTypeDefinition(string code = default(string), string displayName = default(string), string description = default(string), ResourceId chartOfAccountsId = default(ResourceId), List<string> postingModuleCodes = default(List<string>), List<string> cleardownModuleCodes = default(List<string>), ResourceId valuationRecipeId = default(ResourceId), ResourceId holdingRecipeId = default(ResourceId), string accountingMethod = default(string), List<string> subHoldingKeys = default(List<string>), string amortisationMethod = default(string), string transactionTypeScope = default(string), string cashGainLossCalculationDate = default(string))
        {
            // to ensure "chartOfAccountsId" is required (not null)
            if (chartOfAccountsId == null)
            {
                throw new ArgumentNullException("chartOfAccountsId is a required property for NavTypeDefinition and cannot be null");
            }
            this.ChartOfAccountsId = chartOfAccountsId;
            // to ensure "valuationRecipeId" is required (not null)
            if (valuationRecipeId == null)
            {
                throw new ArgumentNullException("valuationRecipeId is a required property for NavTypeDefinition and cannot be null");
            }
            this.ValuationRecipeId = valuationRecipeId;
            // to ensure "holdingRecipeId" is required (not null)
            if (holdingRecipeId == null)
            {
                throw new ArgumentNullException("holdingRecipeId is a required property for NavTypeDefinition and cannot be null");
            }
            this.HoldingRecipeId = holdingRecipeId;
            // to ensure "accountingMethod" is required (not null)
            if (accountingMethod == null)
            {
                throw new ArgumentNullException("accountingMethod is a required property for NavTypeDefinition and cannot be null");
            }
            this.AccountingMethod = accountingMethod;
            // to ensure "amortisationMethod" is required (not null)
            if (amortisationMethod == null)
            {
                throw new ArgumentNullException("amortisationMethod is a required property for NavTypeDefinition and cannot be null");
            }
            this.AmortisationMethod = amortisationMethod;
            // to ensure "transactionTypeScope" is required (not null)
            if (transactionTypeScope == null)
            {
                throw new ArgumentNullException("transactionTypeScope is a required property for NavTypeDefinition and cannot be null");
            }
            this.TransactionTypeScope = transactionTypeScope;
            // to ensure "cashGainLossCalculationDate" is required (not null)
            if (cashGainLossCalculationDate == null)
            {
                throw new ArgumentNullException("cashGainLossCalculationDate is a required property for NavTypeDefinition and cannot be null");
            }
            this.CashGainLossCalculationDate = cashGainLossCalculationDate;
            this.Code = code;
            this.DisplayName = displayName;
            this.Description = description;
            this.PostingModuleCodes = postingModuleCodes;
            this.CleardownModuleCodes = cleardownModuleCodes;
            this.SubHoldingKeys = subHoldingKeys;
        }

        /// <summary>
        /// Gets or Sets Code
        /// </summary>
        [DataMember(Name = "code", EmitDefaultValue = true)]
        public string Code { get; set; }

        /// <summary>
        /// Gets or Sets DisplayName
        /// </summary>
        [DataMember(Name = "displayName", EmitDefaultValue = true)]
        public string DisplayName { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name = "description", EmitDefaultValue = true)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets ChartOfAccountsId
        /// </summary>
        [DataMember(Name = "chartOfAccountsId", IsRequired = true, EmitDefaultValue = true)]
        public ResourceId ChartOfAccountsId { get; set; }

        /// <summary>
        /// Gets or Sets PostingModuleCodes
        /// </summary>
        [DataMember(Name = "postingModuleCodes", EmitDefaultValue = true)]
        public List<string> PostingModuleCodes { get; set; }

        /// <summary>
        /// Gets or Sets CleardownModuleCodes
        /// </summary>
        [DataMember(Name = "cleardownModuleCodes", EmitDefaultValue = true)]
        public List<string> CleardownModuleCodes { get; set; }

        /// <summary>
        /// Gets or Sets ValuationRecipeId
        /// </summary>
        [DataMember(Name = "valuationRecipeId", IsRequired = true, EmitDefaultValue = true)]
        public ResourceId ValuationRecipeId { get; set; }

        /// <summary>
        /// Gets or Sets HoldingRecipeId
        /// </summary>
        [DataMember(Name = "holdingRecipeId", IsRequired = true, EmitDefaultValue = true)]
        public ResourceId HoldingRecipeId { get; set; }

        /// <summary>
        /// Gets or Sets AccountingMethod
        /// </summary>
        [DataMember(Name = "accountingMethod", IsRequired = true, EmitDefaultValue = true)]
        public string AccountingMethod { get; set; }

        /// <summary>
        /// Set of unique holding identifiers, e.g. trader, desk, strategy.
        /// </summary>
        /// <value>Set of unique holding identifiers, e.g. trader, desk, strategy.</value>
        [DataMember(Name = "subHoldingKeys", EmitDefaultValue = true)]
        public List<string> SubHoldingKeys { get; set; }

        /// <summary>
        /// Gets or Sets AmortisationMethod
        /// </summary>
        [DataMember(Name = "amortisationMethod", IsRequired = true, EmitDefaultValue = true)]
        public string AmortisationMethod { get; set; }

        /// <summary>
        /// Gets or Sets TransactionTypeScope
        /// </summary>
        [DataMember(Name = "transactionTypeScope", IsRequired = true, EmitDefaultValue = true)]
        public string TransactionTypeScope { get; set; }

        /// <summary>
        /// Gets or Sets CashGainLossCalculationDate
        /// </summary>
        [DataMember(Name = "cashGainLossCalculationDate", IsRequired = true, EmitDefaultValue = true)]
        public string CashGainLossCalculationDate { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class NavTypeDefinition {\n");
            sb.Append("  Code: ").Append(Code).Append("\n");
            sb.Append("  DisplayName: ").Append(DisplayName).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  ChartOfAccountsId: ").Append(ChartOfAccountsId).Append("\n");
            sb.Append("  PostingModuleCodes: ").Append(PostingModuleCodes).Append("\n");
            sb.Append("  CleardownModuleCodes: ").Append(CleardownModuleCodes).Append("\n");
            sb.Append("  ValuationRecipeId: ").Append(ValuationRecipeId).Append("\n");
            sb.Append("  HoldingRecipeId: ").Append(HoldingRecipeId).Append("\n");
            sb.Append("  AccountingMethod: ").Append(AccountingMethod).Append("\n");
            sb.Append("  SubHoldingKeys: ").Append(SubHoldingKeys).Append("\n");
            sb.Append("  AmortisationMethod: ").Append(AmortisationMethod).Append("\n");
            sb.Append("  TransactionTypeScope: ").Append(TransactionTypeScope).Append("\n");
            sb.Append("  CashGainLossCalculationDate: ").Append(CashGainLossCalculationDate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as NavTypeDefinition);
        }

        /// <summary>
        /// Returns true if NavTypeDefinition instances are equal
        /// </summary>
        /// <param name="input">Instance of NavTypeDefinition to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(NavTypeDefinition input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Code == input.Code ||
                    (this.Code != null &&
                    this.Code.Equals(input.Code))
                ) && 
                (
                    this.DisplayName == input.DisplayName ||
                    (this.DisplayName != null &&
                    this.DisplayName.Equals(input.DisplayName))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.ChartOfAccountsId == input.ChartOfAccountsId ||
                    (this.ChartOfAccountsId != null &&
                    this.ChartOfAccountsId.Equals(input.ChartOfAccountsId))
                ) && 
                (
                    this.PostingModuleCodes == input.PostingModuleCodes ||
                    this.PostingModuleCodes != null &&
                    input.PostingModuleCodes != null &&
                    this.PostingModuleCodes.SequenceEqual(input.PostingModuleCodes)
                ) && 
                (
                    this.CleardownModuleCodes == input.CleardownModuleCodes ||
                    this.CleardownModuleCodes != null &&
                    input.CleardownModuleCodes != null &&
                    this.CleardownModuleCodes.SequenceEqual(input.CleardownModuleCodes)
                ) && 
                (
                    this.ValuationRecipeId == input.ValuationRecipeId ||
                    (this.ValuationRecipeId != null &&
                    this.ValuationRecipeId.Equals(input.ValuationRecipeId))
                ) && 
                (
                    this.HoldingRecipeId == input.HoldingRecipeId ||
                    (this.HoldingRecipeId != null &&
                    this.HoldingRecipeId.Equals(input.HoldingRecipeId))
                ) && 
                (
                    this.AccountingMethod == input.AccountingMethod ||
                    (this.AccountingMethod != null &&
                    this.AccountingMethod.Equals(input.AccountingMethod))
                ) && 
                (
                    this.SubHoldingKeys == input.SubHoldingKeys ||
                    this.SubHoldingKeys != null &&
                    input.SubHoldingKeys != null &&
                    this.SubHoldingKeys.SequenceEqual(input.SubHoldingKeys)
                ) && 
                (
                    this.AmortisationMethod == input.AmortisationMethod ||
                    (this.AmortisationMethod != null &&
                    this.AmortisationMethod.Equals(input.AmortisationMethod))
                ) && 
                (
                    this.TransactionTypeScope == input.TransactionTypeScope ||
                    (this.TransactionTypeScope != null &&
                    this.TransactionTypeScope.Equals(input.TransactionTypeScope))
                ) && 
                (
                    this.CashGainLossCalculationDate == input.CashGainLossCalculationDate ||
                    (this.CashGainLossCalculationDate != null &&
                    this.CashGainLossCalculationDate.Equals(input.CashGainLossCalculationDate))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Code != null)
                {
                    hashCode = (hashCode * 59) + this.Code.GetHashCode();
                }
                if (this.DisplayName != null)
                {
                    hashCode = (hashCode * 59) + this.DisplayName.GetHashCode();
                }
                if (this.Description != null)
                {
                    hashCode = (hashCode * 59) + this.Description.GetHashCode();
                }
                if (this.ChartOfAccountsId != null)
                {
                    hashCode = (hashCode * 59) + this.ChartOfAccountsId.GetHashCode();
                }
                if (this.PostingModuleCodes != null)
                {
                    hashCode = (hashCode * 59) + this.PostingModuleCodes.GetHashCode();
                }
                if (this.CleardownModuleCodes != null)
                {
                    hashCode = (hashCode * 59) + this.CleardownModuleCodes.GetHashCode();
                }
                if (this.ValuationRecipeId != null)
                {
                    hashCode = (hashCode * 59) + this.ValuationRecipeId.GetHashCode();
                }
                if (this.HoldingRecipeId != null)
                {
                    hashCode = (hashCode * 59) + this.HoldingRecipeId.GetHashCode();
                }
                if (this.AccountingMethod != null)
                {
                    hashCode = (hashCode * 59) + this.AccountingMethod.GetHashCode();
                }
                if (this.SubHoldingKeys != null)
                {
                    hashCode = (hashCode * 59) + this.SubHoldingKeys.GetHashCode();
                }
                if (this.AmortisationMethod != null)
                {
                    hashCode = (hashCode * 59) + this.AmortisationMethod.GetHashCode();
                }
                if (this.TransactionTypeScope != null)
                {
                    hashCode = (hashCode * 59) + this.TransactionTypeScope.GetHashCode();
                }
                if (this.CashGainLossCalculationDate != null)
                {
                    hashCode = (hashCode * 59) + this.CashGainLossCalculationDate.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Code (string) maxLength
            if (this.Code != null && this.Code.Length > 64)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Code, length must be less than 64.", new [] { "Code" });
            }

            // Code (string) minLength
            if (this.Code != null && this.Code.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Code, length must be greater than 1.", new [] { "Code" });
            }

            // Code (string) pattern
            Regex regexCode = new Regex(@"^[a-zA-Z0-9\-_]+$", RegexOptions.CultureInvariant);
            if (false == regexCode.Match(this.Code).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Code, must match a pattern of " + regexCode, new [] { "Code" });
            }

            // DisplayName (string) maxLength
            if (this.DisplayName != null && this.DisplayName.Length > 256)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for DisplayName, length must be less than 256.", new [] { "DisplayName" });
            }

            // DisplayName (string) minLength
            if (this.DisplayName != null && this.DisplayName.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for DisplayName, length must be greater than 1.", new [] { "DisplayName" });
            }

            // Description (string) maxLength
            if (this.Description != null && this.Description.Length > 1024)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Description, length must be less than 1024.", new [] { "Description" });
            }

            // Description (string) minLength
            if (this.Description != null && this.Description.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Description, length must be greater than 0.", new [] { "Description" });
            }

            // Description (string) pattern
            Regex regexDescription = new Regex(@"^[\s\S]*$", RegexOptions.CultureInvariant);
            if (false == regexDescription.Match(this.Description).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Description, must match a pattern of " + regexDescription, new [] { "Description" });
            }

            // AccountingMethod (string) minLength
            if (this.AccountingMethod != null && this.AccountingMethod.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for AccountingMethod, length must be greater than 1.", new [] { "AccountingMethod" });
            }

            // AmortisationMethod (string) minLength
            if (this.AmortisationMethod != null && this.AmortisationMethod.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for AmortisationMethod, length must be greater than 1.", new [] { "AmortisationMethod" });
            }

            // TransactionTypeScope (string) maxLength
            if (this.TransactionTypeScope != null && this.TransactionTypeScope.Length > 64)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for TransactionTypeScope, length must be less than 64.", new [] { "TransactionTypeScope" });
            }

            // TransactionTypeScope (string) minLength
            if (this.TransactionTypeScope != null && this.TransactionTypeScope.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for TransactionTypeScope, length must be greater than 1.", new [] { "TransactionTypeScope" });
            }

            // TransactionTypeScope (string) pattern
            Regex regexTransactionTypeScope = new Regex(@"^[a-zA-Z0-9\-_]+$", RegexOptions.CultureInvariant);
            if (false == regexTransactionTypeScope.Match(this.TransactionTypeScope).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for TransactionTypeScope, must match a pattern of " + regexTransactionTypeScope, new [] { "TransactionTypeScope" });
            }

            // CashGainLossCalculationDate (string) minLength
            if (this.CashGainLossCalculationDate != null && this.CashGainLossCalculationDate.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CashGainLossCalculationDate, length must be greater than 1.", new [] { "CashGainLossCalculationDate" });
            }

            yield break;
        }
    }
}
