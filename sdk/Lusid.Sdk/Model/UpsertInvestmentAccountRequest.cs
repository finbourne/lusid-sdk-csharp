/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Lusid.Sdk.Client.OpenAPIDateConverter;

namespace Lusid.Sdk.Model
{
    /// <summary>
    /// Request to create or update an investor record
    /// </summary>
    [DataContract(Name = "UpsertInvestmentAccountRequest")]
    public partial class UpsertInvestmentAccountRequest : IEquatable<UpsertInvestmentAccountRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UpsertInvestmentAccountRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected UpsertInvestmentAccountRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="UpsertInvestmentAccountRequest" /> class.
        /// </summary>
        /// <param name="identifiers">Unique client-defined identifiers of the Investment Account. (required).</param>
        /// <param name="properties">A set of properties associated to the Investment Account..</param>
        /// <param name="displayName">The display name of the Investment Account (required).</param>
        /// <param name="description">The description of the Investment Account.</param>
        /// <param name="accountType">The type of the of the Investment Account. (required).</param>
        /// <param name="accountHolders">The identification of the account holders associated with this investment account.</param>
        /// <param name="investmentPortfolios">The identification of the investment portfolios associated with this investment account.</param>
        public UpsertInvestmentAccountRequest(Dictionary<string, Property> identifiers = default(Dictionary<string, Property>), Dictionary<string, Property> properties = default(Dictionary<string, Property>), string displayName = default(string), string description = default(string), string accountType = default(string), List<AccountHolderIdentifier> accountHolders = default(List<AccountHolderIdentifier>), List<InvestmentPortfolioIdentifier> investmentPortfolios = default(List<InvestmentPortfolioIdentifier>))
        {
            // to ensure "identifiers" is required (not null)
            if (identifiers == null)
            {
                throw new ArgumentNullException("identifiers is a required property for UpsertInvestmentAccountRequest and cannot be null");
            }
            this.Identifiers = identifiers;
            // to ensure "displayName" is required (not null)
            if (displayName == null)
            {
                throw new ArgumentNullException("displayName is a required property for UpsertInvestmentAccountRequest and cannot be null");
            }
            this.DisplayName = displayName;
            // to ensure "accountType" is required (not null)
            if (accountType == null)
            {
                throw new ArgumentNullException("accountType is a required property for UpsertInvestmentAccountRequest and cannot be null");
            }
            this.AccountType = accountType;
            this.Properties = properties;
            this.Description = description;
            this.AccountHolders = accountHolders;
            this.InvestmentPortfolios = investmentPortfolios;
        }

        /// <summary>
        /// Unique client-defined identifiers of the Investment Account.
        /// </summary>
        /// <value>Unique client-defined identifiers of the Investment Account.</value>
        [DataMember(Name = "identifiers", IsRequired = true, EmitDefaultValue = true)]
        public Dictionary<string, Property> Identifiers { get; set; }

        /// <summary>
        /// A set of properties associated to the Investment Account.
        /// </summary>
        /// <value>A set of properties associated to the Investment Account.</value>
        [DataMember(Name = "properties", EmitDefaultValue = true)]
        public Dictionary<string, Property> Properties { get; set; }

        /// <summary>
        /// The display name of the Investment Account
        /// </summary>
        /// <value>The display name of the Investment Account</value>
        [DataMember(Name = "displayName", IsRequired = true, EmitDefaultValue = true)]
        public string DisplayName { get; set; }

        /// <summary>
        /// The description of the Investment Account
        /// </summary>
        /// <value>The description of the Investment Account</value>
        [DataMember(Name = "description", EmitDefaultValue = true)]
        public string Description { get; set; }

        /// <summary>
        /// The type of the of the Investment Account.
        /// </summary>
        /// <value>The type of the of the Investment Account.</value>
        [DataMember(Name = "accountType", IsRequired = true, EmitDefaultValue = true)]
        public string AccountType { get; set; }

        /// <summary>
        /// The identification of the account holders associated with this investment account
        /// </summary>
        /// <value>The identification of the account holders associated with this investment account</value>
        [DataMember(Name = "accountHolders", EmitDefaultValue = true)]
        public List<AccountHolderIdentifier> AccountHolders { get; set; }

        /// <summary>
        /// The identification of the investment portfolios associated with this investment account
        /// </summary>
        /// <value>The identification of the investment portfolios associated with this investment account</value>
        [DataMember(Name = "investmentPortfolios", EmitDefaultValue = true)]
        public List<InvestmentPortfolioIdentifier> InvestmentPortfolios { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class UpsertInvestmentAccountRequest {\n");
            sb.Append("  Identifiers: ").Append(Identifiers).Append("\n");
            sb.Append("  Properties: ").Append(Properties).Append("\n");
            sb.Append("  DisplayName: ").Append(DisplayName).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  AccountType: ").Append(AccountType).Append("\n");
            sb.Append("  AccountHolders: ").Append(AccountHolders).Append("\n");
            sb.Append("  InvestmentPortfolios: ").Append(InvestmentPortfolios).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as UpsertInvestmentAccountRequest);
        }

        /// <summary>
        /// Returns true if UpsertInvestmentAccountRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of UpsertInvestmentAccountRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UpsertInvestmentAccountRequest input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Identifiers == input.Identifiers ||
                    this.Identifiers != null &&
                    input.Identifiers != null &&
                    this.Identifiers.SequenceEqual(input.Identifiers)
                ) && 
                (
                    this.Properties == input.Properties ||
                    this.Properties != null &&
                    input.Properties != null &&
                    this.Properties.SequenceEqual(input.Properties)
                ) && 
                (
                    this.DisplayName == input.DisplayName ||
                    (this.DisplayName != null &&
                    this.DisplayName.Equals(input.DisplayName))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.AccountType == input.AccountType ||
                    (this.AccountType != null &&
                    this.AccountType.Equals(input.AccountType))
                ) && 
                (
                    this.AccountHolders == input.AccountHolders ||
                    this.AccountHolders != null &&
                    input.AccountHolders != null &&
                    this.AccountHolders.SequenceEqual(input.AccountHolders)
                ) && 
                (
                    this.InvestmentPortfolios == input.InvestmentPortfolios ||
                    this.InvestmentPortfolios != null &&
                    input.InvestmentPortfolios != null &&
                    this.InvestmentPortfolios.SequenceEqual(input.InvestmentPortfolios)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Identifiers != null)
                {
                    hashCode = (hashCode * 59) + this.Identifiers.GetHashCode();
                }
                if (this.Properties != null)
                {
                    hashCode = (hashCode * 59) + this.Properties.GetHashCode();
                }
                if (this.DisplayName != null)
                {
                    hashCode = (hashCode * 59) + this.DisplayName.GetHashCode();
                }
                if (this.Description != null)
                {
                    hashCode = (hashCode * 59) + this.Description.GetHashCode();
                }
                if (this.AccountType != null)
                {
                    hashCode = (hashCode * 59) + this.AccountType.GetHashCode();
                }
                if (this.AccountHolders != null)
                {
                    hashCode = (hashCode * 59) + this.AccountHolders.GetHashCode();
                }
                if (this.InvestmentPortfolios != null)
                {
                    hashCode = (hashCode * 59) + this.InvestmentPortfolios.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // DisplayName (string) maxLength
            if (this.DisplayName != null && this.DisplayName.Length > 512)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for DisplayName, length must be less than 512.", new [] { "DisplayName" });
            }

            // DisplayName (string) minLength
            if (this.DisplayName != null && this.DisplayName.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for DisplayName, length must be greater than 1.", new [] { "DisplayName" });
            }

            // DisplayName (string) pattern
            Regex regexDisplayName = new Regex(@"^[\s\S]*$", RegexOptions.CultureInvariant);
            if (false == regexDisplayName.Match(this.DisplayName).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for DisplayName, must match a pattern of " + regexDisplayName, new [] { "DisplayName" });
            }

            // Description (string) maxLength
            if (this.Description != null && this.Description.Length > 512)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Description, length must be less than 512.", new [] { "Description" });
            }

            // Description (string) minLength
            if (this.Description != null && this.Description.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Description, length must be greater than 0.", new [] { "Description" });
            }

            // Description (string) pattern
            Regex regexDescription = new Regex(@"^[\s\S]*$", RegexOptions.CultureInvariant);
            if (false == regexDescription.Match(this.Description).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Description, must match a pattern of " + regexDescription, new [] { "Description" });
            }

            // AccountType (string) minLength
            if (this.AccountType != null && this.AccountType.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for AccountType, length must be greater than 1.", new [] { "AccountType" });
            }

            yield break;
        }
    }
}
