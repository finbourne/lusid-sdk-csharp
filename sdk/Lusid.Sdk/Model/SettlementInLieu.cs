/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Lusid.Sdk.Client.OpenAPIDateConverter;

namespace Lusid.Sdk.Model
{
    /// <summary>
    /// SettlementInLieu
    /// </summary>
    [DataContract(Name = "SettlementInLieu")]
    public partial class SettlementInLieu : IEquatable<SettlementInLieu>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SettlementInLieu" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected SettlementInLieu() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="SettlementInLieu" /> class.
        /// </summary>
        /// <param name="originalSettlementCurrency">originalSettlementCurrency (required).</param>
        /// <param name="amount">amount.</param>
        public SettlementInLieu(string originalSettlementCurrency = default(string), decimal? amount = default(decimal?))
        {
            // to ensure "originalSettlementCurrency" is required (not null)
            if (originalSettlementCurrency == null)
            {
                throw new ArgumentNullException("originalSettlementCurrency is a required property for SettlementInLieu and cannot be null");
            }
            this.OriginalSettlementCurrency = originalSettlementCurrency;
            this.Amount = amount;
        }

        /// <summary>
        /// Gets or Sets OriginalSettlementCurrency
        /// </summary>
        [DataMember(Name = "originalSettlementCurrency", IsRequired = true, EmitDefaultValue = true)]
        public string OriginalSettlementCurrency { get; set; }

        /// <summary>
        /// Gets or Sets Amount
        /// </summary>
        [DataMember(Name = "amount", EmitDefaultValue = true)]
        public decimal? Amount { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SettlementInLieu {\n");
            sb.Append("  OriginalSettlementCurrency: ").Append(OriginalSettlementCurrency).Append("\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SettlementInLieu);
        }

        /// <summary>
        /// Returns true if SettlementInLieu instances are equal
        /// </summary>
        /// <param name="input">Instance of SettlementInLieu to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SettlementInLieu input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.OriginalSettlementCurrency == input.OriginalSettlementCurrency ||
                    (this.OriginalSettlementCurrency != null &&
                    this.OriginalSettlementCurrency.Equals(input.OriginalSettlementCurrency))
                ) && 
                (
                    this.Amount == input.Amount ||
                    (this.Amount != null &&
                    this.Amount.Equals(input.Amount))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.OriginalSettlementCurrency != null)
                {
                    hashCode = (hashCode * 59) + this.OriginalSettlementCurrency.GetHashCode();
                }
                if (this.Amount != null)
                {
                    hashCode = (hashCode * 59) + this.Amount.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
