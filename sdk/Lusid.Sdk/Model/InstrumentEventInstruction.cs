/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Lusid.Sdk.Client.OpenAPIDateConverter;

namespace Lusid.Sdk.Model
{
    /// <summary>
    /// An instruction for an instrument event
    /// </summary>
    [DataContract(Name = "InstrumentEventInstruction")]
    public partial class InstrumentEventInstruction : IEquatable<InstrumentEventInstruction>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InstrumentEventInstruction" /> class.
        /// </summary>
        /// <param name="instrumentEventInstructionId">The unique identifier for this instruction.</param>
        /// <param name="portfolioId">portfolioId.</param>
        /// <param name="instrumentEventId">The identifier of the instrument event being instructed.</param>
        /// <param name="instructionType">The type of instruction (Ignore, ElectForPortfolio, ElectForHolding).</param>
        /// <param name="electionKey">For elected instructions, the key to be chosen.</param>
        /// <param name="holdingId">For holding instructions, the id of the holding for which the instruction will apply.</param>
        /// <param name="varVersion">varVersion.</param>
        /// <param name="href">The uri for this version of this instruction.</param>
        /// <param name="entitlementDateInstructed">The instructed entitlement date for the event (where none is set on the event itself).</param>
        /// <param name="links">links.</param>
        public InstrumentEventInstruction(string instrumentEventInstructionId = default(string), ResourceId portfolioId = default(ResourceId), string instrumentEventId = default(string), string instructionType = default(string), string electionKey = default(string), long? holdingId = default(long?), ModelVersion varVersion = default(ModelVersion), string href = default(string), DateTimeOffset? entitlementDateInstructed = default(DateTimeOffset?), List<Link> links = default(List<Link>))
        {
            this.InstrumentEventInstructionId = instrumentEventInstructionId;
            this.PortfolioId = portfolioId;
            this.InstrumentEventId = instrumentEventId;
            this.InstructionType = instructionType;
            this.ElectionKey = electionKey;
            this.HoldingId = holdingId;
            this.VarVersion = varVersion;
            this.Href = href;
            this.EntitlementDateInstructed = entitlementDateInstructed;
            this.Links = links;
        }

        /// <summary>
        /// The unique identifier for this instruction
        /// </summary>
        /// <value>The unique identifier for this instruction</value>
        [DataMember(Name = "instrumentEventInstructionId", EmitDefaultValue = true)]
        public string InstrumentEventInstructionId { get; set; }

        /// <summary>
        /// Gets or Sets PortfolioId
        /// </summary>
        [DataMember(Name = "portfolioId", EmitDefaultValue = false)]
        public ResourceId PortfolioId { get; set; }

        /// <summary>
        /// The identifier of the instrument event being instructed
        /// </summary>
        /// <value>The identifier of the instrument event being instructed</value>
        [DataMember(Name = "instrumentEventId", EmitDefaultValue = true)]
        public string InstrumentEventId { get; set; }

        /// <summary>
        /// The type of instruction (Ignore, ElectForPortfolio, ElectForHolding)
        /// </summary>
        /// <value>The type of instruction (Ignore, ElectForPortfolio, ElectForHolding)</value>
        [DataMember(Name = "instructionType", EmitDefaultValue = true)]
        public string InstructionType { get; set; }

        /// <summary>
        /// For elected instructions, the key to be chosen
        /// </summary>
        /// <value>For elected instructions, the key to be chosen</value>
        [DataMember(Name = "electionKey", EmitDefaultValue = true)]
        public string ElectionKey { get; set; }

        /// <summary>
        /// For holding instructions, the id of the holding for which the instruction will apply
        /// </summary>
        /// <value>For holding instructions, the id of the holding for which the instruction will apply</value>
        [DataMember(Name = "holdingId", EmitDefaultValue = true)]
        public long? HoldingId { get; set; }

        /// <summary>
        /// Gets or Sets VarVersion
        /// </summary>
        [DataMember(Name = "version", EmitDefaultValue = false)]
        public ModelVersion VarVersion { get; set; }

        /// <summary>
        /// The uri for this version of this instruction
        /// </summary>
        /// <value>The uri for this version of this instruction</value>
        [DataMember(Name = "href", EmitDefaultValue = true)]
        public string Href { get; set; }

        /// <summary>
        /// The instructed entitlement date for the event (where none is set on the event itself)
        /// </summary>
        /// <value>The instructed entitlement date for the event (where none is set on the event itself)</value>
        [DataMember(Name = "entitlementDateInstructed", EmitDefaultValue = true)]
        public DateTimeOffset? EntitlementDateInstructed { get; set; }

        /// <summary>
        /// Gets or Sets Links
        /// </summary>
        [DataMember(Name = "links", EmitDefaultValue = true)]
        public List<Link> Links { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class InstrumentEventInstruction {\n");
            sb.Append("  InstrumentEventInstructionId: ").Append(InstrumentEventInstructionId).Append("\n");
            sb.Append("  PortfolioId: ").Append(PortfolioId).Append("\n");
            sb.Append("  InstrumentEventId: ").Append(InstrumentEventId).Append("\n");
            sb.Append("  InstructionType: ").Append(InstructionType).Append("\n");
            sb.Append("  ElectionKey: ").Append(ElectionKey).Append("\n");
            sb.Append("  HoldingId: ").Append(HoldingId).Append("\n");
            sb.Append("  VarVersion: ").Append(VarVersion).Append("\n");
            sb.Append("  Href: ").Append(Href).Append("\n");
            sb.Append("  EntitlementDateInstructed: ").Append(EntitlementDateInstructed).Append("\n");
            sb.Append("  Links: ").Append(Links).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as InstrumentEventInstruction);
        }

        /// <summary>
        /// Returns true if InstrumentEventInstruction instances are equal
        /// </summary>
        /// <param name="input">Instance of InstrumentEventInstruction to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InstrumentEventInstruction input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.InstrumentEventInstructionId == input.InstrumentEventInstructionId ||
                    (this.InstrumentEventInstructionId != null &&
                    this.InstrumentEventInstructionId.Equals(input.InstrumentEventInstructionId))
                ) && 
                (
                    this.PortfolioId == input.PortfolioId ||
                    (this.PortfolioId != null &&
                    this.PortfolioId.Equals(input.PortfolioId))
                ) && 
                (
                    this.InstrumentEventId == input.InstrumentEventId ||
                    (this.InstrumentEventId != null &&
                    this.InstrumentEventId.Equals(input.InstrumentEventId))
                ) && 
                (
                    this.InstructionType == input.InstructionType ||
                    (this.InstructionType != null &&
                    this.InstructionType.Equals(input.InstructionType))
                ) && 
                (
                    this.ElectionKey == input.ElectionKey ||
                    (this.ElectionKey != null &&
                    this.ElectionKey.Equals(input.ElectionKey))
                ) && 
                (
                    this.HoldingId == input.HoldingId ||
                    (this.HoldingId != null &&
                    this.HoldingId.Equals(input.HoldingId))
                ) && 
                (
                    this.VarVersion == input.VarVersion ||
                    (this.VarVersion != null &&
                    this.VarVersion.Equals(input.VarVersion))
                ) && 
                (
                    this.Href == input.Href ||
                    (this.Href != null &&
                    this.Href.Equals(input.Href))
                ) && 
                (
                    this.EntitlementDateInstructed == input.EntitlementDateInstructed ||
                    (this.EntitlementDateInstructed != null &&
                    this.EntitlementDateInstructed.Equals(input.EntitlementDateInstructed))
                ) && 
                (
                    this.Links == input.Links ||
                    this.Links != null &&
                    input.Links != null &&
                    this.Links.SequenceEqual(input.Links)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.InstrumentEventInstructionId != null)
                {
                    hashCode = (hashCode * 59) + this.InstrumentEventInstructionId.GetHashCode();
                }
                if (this.PortfolioId != null)
                {
                    hashCode = (hashCode * 59) + this.PortfolioId.GetHashCode();
                }
                if (this.InstrumentEventId != null)
                {
                    hashCode = (hashCode * 59) + this.InstrumentEventId.GetHashCode();
                }
                if (this.InstructionType != null)
                {
                    hashCode = (hashCode * 59) + this.InstructionType.GetHashCode();
                }
                if (this.ElectionKey != null)
                {
                    hashCode = (hashCode * 59) + this.ElectionKey.GetHashCode();
                }
                if (this.HoldingId != null)
                {
                    hashCode = (hashCode * 59) + this.HoldingId.GetHashCode();
                }
                if (this.VarVersion != null)
                {
                    hashCode = (hashCode * 59) + this.VarVersion.GetHashCode();
                }
                if (this.Href != null)
                {
                    hashCode = (hashCode * 59) + this.Href.GetHashCode();
                }
                if (this.EntitlementDateInstructed != null)
                {
                    hashCode = (hashCode * 59) + this.EntitlementDateInstructed.GetHashCode();
                }
                if (this.Links != null)
                {
                    hashCode = (hashCode * 59) + this.Links.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
