/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Lusid.Sdk.Client.OpenAPIDateConverter;

namespace Lusid.Sdk.Model
{
    /// <summary>
    /// A list of Composite Breakdowns.
    /// </summary>
    [DataContract(Name = "PortfolioReturnBreakdown")]
    public partial class PortfolioReturnBreakdown : IEquatable<PortfolioReturnBreakdown>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PortfolioReturnBreakdown" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected PortfolioReturnBreakdown() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="PortfolioReturnBreakdown" /> class.
        /// </summary>
        /// <param name="portfolioId">portfolioId (required).</param>
        /// <param name="rateOfReturn">The return number..</param>
        /// <param name="openingMarketValue">The opening market value..</param>
        /// <param name="closingMarketValue">The closing market value..</param>
        /// <param name="weight">The weight of the constituent into the composite..</param>
        /// <param name="constituentsInTheComposite">The number of members in the Composite on the given day..</param>
        /// <param name="constituentsMissing">The number of the constituents which have a missing return on that day..</param>
        /// <param name="currency">The currency of the portfolio..</param>
        /// <param name="openFxRate">The opening fxRate which is used in calculation..</param>
        /// <param name="closeFxRate">The closing fxRate which is used in calculation..</param>
        /// <param name="localRateOfReturn">The rate of return in the local currency..</param>
        /// <param name="localOpeningMarketValue">The opening market value in the local currency..</param>
        /// <param name="localClosingMarketValue">The closing market value in the local currency..</param>
        public PortfolioReturnBreakdown(ResourceId portfolioId = default(ResourceId), decimal rateOfReturn = default(decimal), decimal? openingMarketValue = default(decimal?), decimal? closingMarketValue = default(decimal?), decimal weight = default(decimal), int constituentsInTheComposite = default(int), int constituentsMissing = default(int), string currency = default(string), decimal openFxRate = default(decimal), decimal closeFxRate = default(decimal), decimal? localRateOfReturn = default(decimal?), decimal? localOpeningMarketValue = default(decimal?), decimal? localClosingMarketValue = default(decimal?))
        {
            // to ensure "portfolioId" is required (not null)
            if (portfolioId == null)
            {
                throw new ArgumentNullException("portfolioId is a required property for PortfolioReturnBreakdown and cannot be null");
            }
            this.PortfolioId = portfolioId;
            this.RateOfReturn = rateOfReturn;
            this.OpeningMarketValue = openingMarketValue;
            this.ClosingMarketValue = closingMarketValue;
            this.Weight = weight;
            this.ConstituentsInTheComposite = constituentsInTheComposite;
            this.ConstituentsMissing = constituentsMissing;
            this.Currency = currency;
            this.OpenFxRate = openFxRate;
            this.CloseFxRate = closeFxRate;
            this.LocalRateOfReturn = localRateOfReturn;
            this.LocalOpeningMarketValue = localOpeningMarketValue;
            this.LocalClosingMarketValue = localClosingMarketValue;
        }

        /// <summary>
        /// Gets or Sets PortfolioId
        /// </summary>
        [DataMember(Name = "portfolioId", IsRequired = true, EmitDefaultValue = true)]
        public ResourceId PortfolioId { get; set; }

        /// <summary>
        /// The return number.
        /// </summary>
        /// <value>The return number.</value>
        [DataMember(Name = "rateOfReturn", EmitDefaultValue = true)]
        public decimal RateOfReturn { get; set; }

        /// <summary>
        /// The opening market value.
        /// </summary>
        /// <value>The opening market value.</value>
        [DataMember(Name = "openingMarketValue", EmitDefaultValue = true)]
        public decimal? OpeningMarketValue { get; set; }

        /// <summary>
        /// The closing market value.
        /// </summary>
        /// <value>The closing market value.</value>
        [DataMember(Name = "closingMarketValue", EmitDefaultValue = true)]
        public decimal? ClosingMarketValue { get; set; }

        /// <summary>
        /// The weight of the constituent into the composite.
        /// </summary>
        /// <value>The weight of the constituent into the composite.</value>
        [DataMember(Name = "weight", EmitDefaultValue = true)]
        public decimal Weight { get; set; }

        /// <summary>
        /// The number of members in the Composite on the given day.
        /// </summary>
        /// <value>The number of members in the Composite on the given day.</value>
        [DataMember(Name = "constituentsInTheComposite", EmitDefaultValue = true)]
        public int ConstituentsInTheComposite { get; set; }

        /// <summary>
        /// The number of the constituents which have a missing return on that day.
        /// </summary>
        /// <value>The number of the constituents which have a missing return on that day.</value>
        [DataMember(Name = "constituentsMissing", EmitDefaultValue = true)]
        public int ConstituentsMissing { get; set; }

        /// <summary>
        /// The currency of the portfolio.
        /// </summary>
        /// <value>The currency of the portfolio.</value>
        [DataMember(Name = "currency", EmitDefaultValue = true)]
        public string Currency { get; set; }

        /// <summary>
        /// The opening fxRate which is used in calculation.
        /// </summary>
        /// <value>The opening fxRate which is used in calculation.</value>
        [DataMember(Name = "openFxRate", EmitDefaultValue = true)]
        public decimal OpenFxRate { get; set; }

        /// <summary>
        /// The closing fxRate which is used in calculation.
        /// </summary>
        /// <value>The closing fxRate which is used in calculation.</value>
        [DataMember(Name = "closeFxRate", EmitDefaultValue = true)]
        public decimal CloseFxRate { get; set; }

        /// <summary>
        /// The rate of return in the local currency.
        /// </summary>
        /// <value>The rate of return in the local currency.</value>
        [DataMember(Name = "localRateOfReturn", EmitDefaultValue = true)]
        public decimal? LocalRateOfReturn { get; set; }

        /// <summary>
        /// The opening market value in the local currency.
        /// </summary>
        /// <value>The opening market value in the local currency.</value>
        [DataMember(Name = "localOpeningMarketValue", EmitDefaultValue = true)]
        public decimal? LocalOpeningMarketValue { get; set; }

        /// <summary>
        /// The closing market value in the local currency.
        /// </summary>
        /// <value>The closing market value in the local currency.</value>
        [DataMember(Name = "localClosingMarketValue", EmitDefaultValue = true)]
        public decimal? LocalClosingMarketValue { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PortfolioReturnBreakdown {\n");
            sb.Append("  PortfolioId: ").Append(PortfolioId).Append("\n");
            sb.Append("  RateOfReturn: ").Append(RateOfReturn).Append("\n");
            sb.Append("  OpeningMarketValue: ").Append(OpeningMarketValue).Append("\n");
            sb.Append("  ClosingMarketValue: ").Append(ClosingMarketValue).Append("\n");
            sb.Append("  Weight: ").Append(Weight).Append("\n");
            sb.Append("  ConstituentsInTheComposite: ").Append(ConstituentsInTheComposite).Append("\n");
            sb.Append("  ConstituentsMissing: ").Append(ConstituentsMissing).Append("\n");
            sb.Append("  Currency: ").Append(Currency).Append("\n");
            sb.Append("  OpenFxRate: ").Append(OpenFxRate).Append("\n");
            sb.Append("  CloseFxRate: ").Append(CloseFxRate).Append("\n");
            sb.Append("  LocalRateOfReturn: ").Append(LocalRateOfReturn).Append("\n");
            sb.Append("  LocalOpeningMarketValue: ").Append(LocalOpeningMarketValue).Append("\n");
            sb.Append("  LocalClosingMarketValue: ").Append(LocalClosingMarketValue).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PortfolioReturnBreakdown);
        }

        /// <summary>
        /// Returns true if PortfolioReturnBreakdown instances are equal
        /// </summary>
        /// <param name="input">Instance of PortfolioReturnBreakdown to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PortfolioReturnBreakdown input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.PortfolioId == input.PortfolioId ||
                    (this.PortfolioId != null &&
                    this.PortfolioId.Equals(input.PortfolioId))
                ) && 
                (
                    this.RateOfReturn == input.RateOfReturn ||
                    this.RateOfReturn.Equals(input.RateOfReturn)
                ) && 
                (
                    this.OpeningMarketValue == input.OpeningMarketValue ||
                    (this.OpeningMarketValue != null &&
                    this.OpeningMarketValue.Equals(input.OpeningMarketValue))
                ) && 
                (
                    this.ClosingMarketValue == input.ClosingMarketValue ||
                    (this.ClosingMarketValue != null &&
                    this.ClosingMarketValue.Equals(input.ClosingMarketValue))
                ) && 
                (
                    this.Weight == input.Weight ||
                    this.Weight.Equals(input.Weight)
                ) && 
                (
                    this.ConstituentsInTheComposite == input.ConstituentsInTheComposite ||
                    this.ConstituentsInTheComposite.Equals(input.ConstituentsInTheComposite)
                ) && 
                (
                    this.ConstituentsMissing == input.ConstituentsMissing ||
                    this.ConstituentsMissing.Equals(input.ConstituentsMissing)
                ) && 
                (
                    this.Currency == input.Currency ||
                    (this.Currency != null &&
                    this.Currency.Equals(input.Currency))
                ) && 
                (
                    this.OpenFxRate == input.OpenFxRate ||
                    this.OpenFxRate.Equals(input.OpenFxRate)
                ) && 
                (
                    this.CloseFxRate == input.CloseFxRate ||
                    this.CloseFxRate.Equals(input.CloseFxRate)
                ) && 
                (
                    this.LocalRateOfReturn == input.LocalRateOfReturn ||
                    (this.LocalRateOfReturn != null &&
                    this.LocalRateOfReturn.Equals(input.LocalRateOfReturn))
                ) && 
                (
                    this.LocalOpeningMarketValue == input.LocalOpeningMarketValue ||
                    (this.LocalOpeningMarketValue != null &&
                    this.LocalOpeningMarketValue.Equals(input.LocalOpeningMarketValue))
                ) && 
                (
                    this.LocalClosingMarketValue == input.LocalClosingMarketValue ||
                    (this.LocalClosingMarketValue != null &&
                    this.LocalClosingMarketValue.Equals(input.LocalClosingMarketValue))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.PortfolioId != null)
                {
                    hashCode = (hashCode * 59) + this.PortfolioId.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.RateOfReturn.GetHashCode();
                if (this.OpeningMarketValue != null)
                {
                    hashCode = (hashCode * 59) + this.OpeningMarketValue.GetHashCode();
                }
                if (this.ClosingMarketValue != null)
                {
                    hashCode = (hashCode * 59) + this.ClosingMarketValue.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Weight.GetHashCode();
                hashCode = (hashCode * 59) + this.ConstituentsInTheComposite.GetHashCode();
                hashCode = (hashCode * 59) + this.ConstituentsMissing.GetHashCode();
                if (this.Currency != null)
                {
                    hashCode = (hashCode * 59) + this.Currency.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.OpenFxRate.GetHashCode();
                hashCode = (hashCode * 59) + this.CloseFxRate.GetHashCode();
                if (this.LocalRateOfReturn != null)
                {
                    hashCode = (hashCode * 59) + this.LocalRateOfReturn.GetHashCode();
                }
                if (this.LocalOpeningMarketValue != null)
                {
                    hashCode = (hashCode * 59) + this.LocalOpeningMarketValue.GetHashCode();
                }
                if (this.LocalClosingMarketValue != null)
                {
                    hashCode = (hashCode * 59) + this.LocalClosingMarketValue.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
