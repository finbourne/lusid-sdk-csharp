/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Lusid.Sdk.Client.OpenAPIDateConverter;

namespace Lusid.Sdk.Model
{
    /// <summary>
    /// Represents LUSID entity details for a data quality check result
    /// </summary>
    [DataContract(Name = "LusidEntityResult")]
    public partial class LusidEntityResult : IEquatable<LusidEntityResult>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LusidEntityResult" /> class.
        /// </summary>
        /// <param name="asAt">The as-at timestamp for the entity.</param>
        /// <param name="effectiveAt">The effective-at timestamp for the entity.</param>
        /// <param name="entityType">The type of the LUSID entity.</param>
        /// <param name="scope">The scope of the entity.</param>
        /// <param name="identifierKey">The identifier key for the entity.</param>
        /// <param name="identifierValue">The identifier value for the entity.</param>
        /// <param name="entityUniqueId">The unique identifier for the entity.</param>
        /// <param name="displayName">The display name of the entity.</param>
        public LusidEntityResult(DateTimeOffset asAt = default(DateTimeOffset), DateTimeOffset effectiveAt = default(DateTimeOffset), string entityType = default(string), string scope = default(string), string identifierKey = default(string), string identifierValue = default(string), string entityUniqueId = default(string), string displayName = default(string))
        {
            this.AsAt = asAt;
            this.EffectiveAt = effectiveAt;
            this.EntityType = entityType;
            this.Scope = scope;
            this.IdentifierKey = identifierKey;
            this.IdentifierValue = identifierValue;
            this.EntityUniqueId = entityUniqueId;
            this.DisplayName = displayName;
        }

        /// <summary>
        /// The as-at timestamp for the entity
        /// </summary>
        /// <value>The as-at timestamp for the entity</value>
        [DataMember(Name = "asAt", EmitDefaultValue = false)]
        public DateTimeOffset AsAt { get; set; }

        /// <summary>
        /// The effective-at timestamp for the entity
        /// </summary>
        /// <value>The effective-at timestamp for the entity</value>
        [DataMember(Name = "effectiveAt", EmitDefaultValue = false)]
        public DateTimeOffset EffectiveAt { get; set; }

        /// <summary>
        /// The type of the LUSID entity
        /// </summary>
        /// <value>The type of the LUSID entity</value>
        [DataMember(Name = "entityType", EmitDefaultValue = true)]
        public string EntityType { get; set; }

        /// <summary>
        /// The scope of the entity
        /// </summary>
        /// <value>The scope of the entity</value>
        [DataMember(Name = "scope", EmitDefaultValue = true)]
        public string Scope { get; set; }

        /// <summary>
        /// The identifier key for the entity
        /// </summary>
        /// <value>The identifier key for the entity</value>
        [DataMember(Name = "identifierKey", EmitDefaultValue = true)]
        public string IdentifierKey { get; set; }

        /// <summary>
        /// The identifier value for the entity
        /// </summary>
        /// <value>The identifier value for the entity</value>
        [DataMember(Name = "identifierValue", EmitDefaultValue = true)]
        public string IdentifierValue { get; set; }

        /// <summary>
        /// The unique identifier for the entity
        /// </summary>
        /// <value>The unique identifier for the entity</value>
        [DataMember(Name = "entityUniqueId", EmitDefaultValue = true)]
        public string EntityUniqueId { get; set; }

        /// <summary>
        /// The display name of the entity
        /// </summary>
        /// <value>The display name of the entity</value>
        [DataMember(Name = "displayName", EmitDefaultValue = true)]
        public string DisplayName { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class LusidEntityResult {\n");
            sb.Append("  AsAt: ").Append(AsAt).Append("\n");
            sb.Append("  EffectiveAt: ").Append(EffectiveAt).Append("\n");
            sb.Append("  EntityType: ").Append(EntityType).Append("\n");
            sb.Append("  Scope: ").Append(Scope).Append("\n");
            sb.Append("  IdentifierKey: ").Append(IdentifierKey).Append("\n");
            sb.Append("  IdentifierValue: ").Append(IdentifierValue).Append("\n");
            sb.Append("  EntityUniqueId: ").Append(EntityUniqueId).Append("\n");
            sb.Append("  DisplayName: ").Append(DisplayName).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as LusidEntityResult);
        }

        /// <summary>
        /// Returns true if LusidEntityResult instances are equal
        /// </summary>
        /// <param name="input">Instance of LusidEntityResult to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LusidEntityResult input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.AsAt == input.AsAt ||
                    (this.AsAt != null &&
                    this.AsAt.Equals(input.AsAt))
                ) && 
                (
                    this.EffectiveAt == input.EffectiveAt ||
                    (this.EffectiveAt != null &&
                    this.EffectiveAt.Equals(input.EffectiveAt))
                ) && 
                (
                    this.EntityType == input.EntityType ||
                    (this.EntityType != null &&
                    this.EntityType.Equals(input.EntityType))
                ) && 
                (
                    this.Scope == input.Scope ||
                    (this.Scope != null &&
                    this.Scope.Equals(input.Scope))
                ) && 
                (
                    this.IdentifierKey == input.IdentifierKey ||
                    (this.IdentifierKey != null &&
                    this.IdentifierKey.Equals(input.IdentifierKey))
                ) && 
                (
                    this.IdentifierValue == input.IdentifierValue ||
                    (this.IdentifierValue != null &&
                    this.IdentifierValue.Equals(input.IdentifierValue))
                ) && 
                (
                    this.EntityUniqueId == input.EntityUniqueId ||
                    (this.EntityUniqueId != null &&
                    this.EntityUniqueId.Equals(input.EntityUniqueId))
                ) && 
                (
                    this.DisplayName == input.DisplayName ||
                    (this.DisplayName != null &&
                    this.DisplayName.Equals(input.DisplayName))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AsAt != null)
                {
                    hashCode = (hashCode * 59) + this.AsAt.GetHashCode();
                }
                if (this.EffectiveAt != null)
                {
                    hashCode = (hashCode * 59) + this.EffectiveAt.GetHashCode();
                }
                if (this.EntityType != null)
                {
                    hashCode = (hashCode * 59) + this.EntityType.GetHashCode();
                }
                if (this.Scope != null)
                {
                    hashCode = (hashCode * 59) + this.Scope.GetHashCode();
                }
                if (this.IdentifierKey != null)
                {
                    hashCode = (hashCode * 59) + this.IdentifierKey.GetHashCode();
                }
                if (this.IdentifierValue != null)
                {
                    hashCode = (hashCode * 59) + this.IdentifierValue.GetHashCode();
                }
                if (this.EntityUniqueId != null)
                {
                    hashCode = (hashCode * 59) + this.EntityUniqueId.GetHashCode();
                }
                if (this.DisplayName != null)
                {
                    hashCode = (hashCode * 59) + this.DisplayName.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
