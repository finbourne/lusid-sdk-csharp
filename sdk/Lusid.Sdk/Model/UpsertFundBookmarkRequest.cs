/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Lusid.Sdk.Client.OpenAPIDateConverter;

namespace Lusid.Sdk.Model
{
    /// <summary>
    /// A definition for the period you wish to close
    /// </summary>
    [DataContract(Name = "UpsertFundBookmarkRequest")]
    public partial class UpsertFundBookmarkRequest : IEquatable<UpsertFundBookmarkRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UpsertFundBookmarkRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected UpsertFundBookmarkRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="UpsertFundBookmarkRequest" /> class.
        /// </summary>
        /// <param name="bookmarkCode">Unique code for the Bookmark. (required).</param>
        /// <param name="displayName">Identifiable Name assigned to the Bookmark. (required).</param>
        /// <param name="description">Description assigned to the Bookmark..</param>
        /// <param name="effectiveAt">The effective time of the diary entry. (required).</param>
        /// <param name="queryAsAt">The query time of the diary entry. Defaults to latest..</param>
        /// <param name="properties">A set of properties for the diary entry..</param>
        public UpsertFundBookmarkRequest(string bookmarkCode = default(string), string displayName = default(string), string description = default(string), DateTimeOffset effectiveAt = default(DateTimeOffset), DateTimeOffset? queryAsAt = default(DateTimeOffset?), Dictionary<string, Property> properties = default(Dictionary<string, Property>))
        {
            // to ensure "bookmarkCode" is required (not null)
            if (bookmarkCode == null)
            {
                throw new ArgumentNullException("bookmarkCode is a required property for UpsertFundBookmarkRequest and cannot be null");
            }
            this.BookmarkCode = bookmarkCode;
            // to ensure "displayName" is required (not null)
            if (displayName == null)
            {
                throw new ArgumentNullException("displayName is a required property for UpsertFundBookmarkRequest and cannot be null");
            }
            this.DisplayName = displayName;
            this.EffectiveAt = effectiveAt;
            this.Description = description;
            this.QueryAsAt = queryAsAt;
            this.Properties = properties;
        }

        /// <summary>
        /// Unique code for the Bookmark.
        /// </summary>
        /// <value>Unique code for the Bookmark.</value>
        [DataMember(Name = "bookmarkCode", IsRequired = true, EmitDefaultValue = true)]
        public string BookmarkCode { get; set; }

        /// <summary>
        /// Identifiable Name assigned to the Bookmark.
        /// </summary>
        /// <value>Identifiable Name assigned to the Bookmark.</value>
        [DataMember(Name = "displayName", IsRequired = true, EmitDefaultValue = true)]
        public string DisplayName { get; set; }

        /// <summary>
        /// Description assigned to the Bookmark.
        /// </summary>
        /// <value>Description assigned to the Bookmark.</value>
        [DataMember(Name = "description", EmitDefaultValue = true)]
        public string Description { get; set; }

        /// <summary>
        /// The effective time of the diary entry.
        /// </summary>
        /// <value>The effective time of the diary entry.</value>
        [DataMember(Name = "effectiveAt", IsRequired = true, EmitDefaultValue = true)]
        public DateTimeOffset EffectiveAt { get; set; }

        /// <summary>
        /// The query time of the diary entry. Defaults to latest.
        /// </summary>
        /// <value>The query time of the diary entry. Defaults to latest.</value>
        [DataMember(Name = "queryAsAt", EmitDefaultValue = true)]
        public DateTimeOffset? QueryAsAt { get; set; }

        /// <summary>
        /// A set of properties for the diary entry.
        /// </summary>
        /// <value>A set of properties for the diary entry.</value>
        [DataMember(Name = "properties", EmitDefaultValue = true)]
        public Dictionary<string, Property> Properties { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class UpsertFundBookmarkRequest {\n");
            sb.Append("  BookmarkCode: ").Append(BookmarkCode).Append("\n");
            sb.Append("  DisplayName: ").Append(DisplayName).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  EffectiveAt: ").Append(EffectiveAt).Append("\n");
            sb.Append("  QueryAsAt: ").Append(QueryAsAt).Append("\n");
            sb.Append("  Properties: ").Append(Properties).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as UpsertFundBookmarkRequest);
        }

        /// <summary>
        /// Returns true if UpsertFundBookmarkRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of UpsertFundBookmarkRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UpsertFundBookmarkRequest input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.BookmarkCode == input.BookmarkCode ||
                    (this.BookmarkCode != null &&
                    this.BookmarkCode.Equals(input.BookmarkCode))
                ) && 
                (
                    this.DisplayName == input.DisplayName ||
                    (this.DisplayName != null &&
                    this.DisplayName.Equals(input.DisplayName))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.EffectiveAt == input.EffectiveAt ||
                    (this.EffectiveAt != null &&
                    this.EffectiveAt.Equals(input.EffectiveAt))
                ) && 
                (
                    this.QueryAsAt == input.QueryAsAt ||
                    (this.QueryAsAt != null &&
                    this.QueryAsAt.Equals(input.QueryAsAt))
                ) && 
                (
                    this.Properties == input.Properties ||
                    this.Properties != null &&
                    input.Properties != null &&
                    this.Properties.SequenceEqual(input.Properties)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.BookmarkCode != null)
                {
                    hashCode = (hashCode * 59) + this.BookmarkCode.GetHashCode();
                }
                if (this.DisplayName != null)
                {
                    hashCode = (hashCode * 59) + this.DisplayName.GetHashCode();
                }
                if (this.Description != null)
                {
                    hashCode = (hashCode * 59) + this.Description.GetHashCode();
                }
                if (this.EffectiveAt != null)
                {
                    hashCode = (hashCode * 59) + this.EffectiveAt.GetHashCode();
                }
                if (this.QueryAsAt != null)
                {
                    hashCode = (hashCode * 59) + this.QueryAsAt.GetHashCode();
                }
                if (this.Properties != null)
                {
                    hashCode = (hashCode * 59) + this.Properties.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // BookmarkCode (string) maxLength
            if (this.BookmarkCode != null && this.BookmarkCode.Length > 64)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for BookmarkCode, length must be less than 64.", new [] { "BookmarkCode" });
            }

            // BookmarkCode (string) minLength
            if (this.BookmarkCode != null && this.BookmarkCode.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for BookmarkCode, length must be greater than 1.", new [] { "BookmarkCode" });
            }

            // BookmarkCode (string) pattern
            Regex regexBookmarkCode = new Regex(@"^[a-zA-Z0-9\-_]+$", RegexOptions.CultureInvariant);
            if (false == regexBookmarkCode.Match(this.BookmarkCode).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for BookmarkCode, must match a pattern of " + regexBookmarkCode, new [] { "BookmarkCode" });
            }

            // DisplayName (string) maxLength
            if (this.DisplayName != null && this.DisplayName.Length > 512)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for DisplayName, length must be less than 512.", new [] { "DisplayName" });
            }

            // DisplayName (string) minLength
            if (this.DisplayName != null && this.DisplayName.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for DisplayName, length must be greater than 1.", new [] { "DisplayName" });
            }

            // DisplayName (string) pattern
            Regex regexDisplayName = new Regex(@"^[\s\S]*$", RegexOptions.CultureInvariant);
            if (false == regexDisplayName.Match(this.DisplayName).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for DisplayName, must match a pattern of " + regexDisplayName, new [] { "DisplayName" });
            }

            // Description (string) maxLength
            if (this.Description != null && this.Description.Length > 512)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Description, length must be less than 512.", new [] { "Description" });
            }

            // Description (string) minLength
            if (this.Description != null && this.Description.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Description, length must be greater than 1.", new [] { "Description" });
            }

            // Description (string) pattern
            Regex regexDescription = new Regex(@"^[\s\S]*$", RegexOptions.CultureInvariant);
            if (false == regexDescription.Match(this.Description).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Description, must match a pattern of " + regexDescription, new [] { "Description" });
            }

            yield break;
        }
    }
}
