/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using JsonSubTypes;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Lusid.Sdk.Client.OpenAPIDateConverter;

namespace Lusid.Sdk.Model
{
    /// <summary>
    /// ReferenceList
    /// </summary>
    [DataContract(Name = "ReferenceList")]
    [JsonConverter(typeof(JsonSubtypes), "ReferenceListType")]
    [JsonSubtypes.KnownSubType(typeof(AddressKeyList), "AddressKeyList")]
    [JsonSubtypes.KnownSubType(typeof(DecimalList), "DecimalList")]
    [JsonSubtypes.KnownSubType(typeof(FundIdList), "FundIdList")]
    [JsonSubtypes.KnownSubType(typeof(InstrumentList), "InstrumentList")]
    [JsonSubtypes.KnownSubType(typeof(PortfolioGroupIdList), "PortfolioGroupIdList")]
    [JsonSubtypes.KnownSubType(typeof(PortfolioIdList), "PortfolioIdList")]
    [JsonSubtypes.KnownSubType(typeof(PropertyList), "PropertyList")]
    [JsonSubtypes.KnownSubType(typeof(StringList), "StringList")]
    public partial class ReferenceList : IEquatable<ReferenceList>, IValidatableObject
    {
        /// <summary>
        /// The reference list values. The available values are: PortfolioGroupIdList, PortfolioIdList, AddressKeyList, StringList, InstrumentList, DecimalList, PropertyList, FundIdList
        /// </summary>
        /// <value>The reference list values. The available values are: PortfolioGroupIdList, PortfolioIdList, AddressKeyList, StringList, InstrumentList, DecimalList, PropertyList, FundIdList</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ReferenceListTypeEnum
        {
            /// <summary>
            /// Enum PortfolioGroupIdList for value: PortfolioGroupIdList
            /// </summary>
            [EnumMember(Value = "PortfolioGroupIdList")]
            PortfolioGroupIdList = 1,

            /// <summary>
            /// Enum PortfolioIdList for value: PortfolioIdList
            /// </summary>
            [EnumMember(Value = "PortfolioIdList")]
            PortfolioIdList = 2,

            /// <summary>
            /// Enum AddressKeyList for value: AddressKeyList
            /// </summary>
            [EnumMember(Value = "AddressKeyList")]
            AddressKeyList = 3,

            /// <summary>
            /// Enum StringList for value: StringList
            /// </summary>
            [EnumMember(Value = "StringList")]
            StringList = 4,

            /// <summary>
            /// Enum InstrumentList for value: InstrumentList
            /// </summary>
            [EnumMember(Value = "InstrumentList")]
            InstrumentList = 5,

            /// <summary>
            /// Enum DecimalList for value: DecimalList
            /// </summary>
            [EnumMember(Value = "DecimalList")]
            DecimalList = 6,

            /// <summary>
            /// Enum PropertyList for value: PropertyList
            /// </summary>
            [EnumMember(Value = "PropertyList")]
            PropertyList = 7,

            /// <summary>
            /// Enum FundIdList for value: FundIdList
            /// </summary>
            [EnumMember(Value = "FundIdList")]
            FundIdList = 8

        }


        /// <summary>
        /// The reference list values. The available values are: PortfolioGroupIdList, PortfolioIdList, AddressKeyList, StringList, InstrumentList, DecimalList, PropertyList, FundIdList
        /// </summary>
        /// <value>The reference list values. The available values are: PortfolioGroupIdList, PortfolioIdList, AddressKeyList, StringList, InstrumentList, DecimalList, PropertyList, FundIdList</value>
        [DataMember(Name = "referenceListType", IsRequired = true, EmitDefaultValue = true)]
        public ReferenceListTypeEnum ReferenceListType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ReferenceList" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ReferenceList() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ReferenceList" /> class.
        /// </summary>
        /// <param name="referenceListType">The reference list values. The available values are: PortfolioGroupIdList, PortfolioIdList, AddressKeyList, StringList, InstrumentList, DecimalList, PropertyList, FundIdList (required).</param>
        public ReferenceList(ReferenceListTypeEnum referenceListType = default(ReferenceListTypeEnum))
        {
            this.ReferenceListType = referenceListType;
        }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ReferenceList {\n");
            sb.Append("  ReferenceListType: ").Append(ReferenceListType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ReferenceList);
        }

        /// <summary>
        /// Returns true if ReferenceList instances are equal
        /// </summary>
        /// <param name="input">Instance of ReferenceList to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ReferenceList input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.ReferenceListType == input.ReferenceListType ||
                    this.ReferenceListType.Equals(input.ReferenceListType)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.ReferenceListType.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            return this.BaseValidate(validationContext);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        protected IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> BaseValidate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
