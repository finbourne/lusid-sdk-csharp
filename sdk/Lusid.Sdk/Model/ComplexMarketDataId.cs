/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Lusid.Sdk.Client.OpenAPIDateConverter;

namespace Lusid.Sdk.Model
{
    /// <summary>
    /// An identifier that uniquely describes an item of complex market data such as an interest rate curve or volatility surface.
    /// </summary>
    [DataContract(Name = "ComplexMarketDataId")]
    public partial class ComplexMarketDataId : IEquatable<ComplexMarketDataId>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ComplexMarketDataId" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ComplexMarketDataId() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ComplexMarketDataId" /> class.
        /// </summary>
        /// <param name="provider">The platform or vendor that provided the complex market data, e.g. &#39;DataScope&#39;, &#39;LUSID&#39;, etc. (required).</param>
        /// <param name="priceSource">The source or originator of the complex market data, e.g. a bank or financial institution..</param>
        /// <param name="lineage">This is obsolete. It is not used, it will not be stored, and has no effects.  If you wish to attach a Lineage to your ComplexMarketData,  you should provide it in the optional Lineage field in the ComplexMarketData class..</param>
        /// <param name="effectiveAt">The effectiveAt or cut label that this item of complex market data is/was updated/inserted with..</param>
        /// <param name="marketAsset">The name of the market entity that the document represents (required).</param>
        public ComplexMarketDataId(string provider = default(string), string priceSource = default(string), string lineage = default(string), DateTimeOrCutLabel effectiveAt = default(DateTimeOrCutLabel), string marketAsset = default(string))
        {
            // to ensure "provider" is required (not null)
            if (provider == null)
            {
                throw new ArgumentNullException("provider is a required property for ComplexMarketDataId and cannot be null");
            }
            this.Provider = provider;
            // to ensure "marketAsset" is required (not null)
            if (marketAsset == null)
            {
                throw new ArgumentNullException("marketAsset is a required property for ComplexMarketDataId and cannot be null");
            }
            this.MarketAsset = marketAsset;
            this.PriceSource = priceSource;
            this.Lineage = lineage;
            this.EffectiveAt = effectiveAt;
        }

        /// <summary>
        /// The platform or vendor that provided the complex market data, e.g. &#39;DataScope&#39;, &#39;LUSID&#39;, etc.
        /// </summary>
        /// <value>The platform or vendor that provided the complex market data, e.g. &#39;DataScope&#39;, &#39;LUSID&#39;, etc.</value>
        [DataMember(Name = "provider", IsRequired = true, EmitDefaultValue = true)]
        public string Provider { get; set; }

        /// <summary>
        /// The source or originator of the complex market data, e.g. a bank or financial institution.
        /// </summary>
        /// <value>The source or originator of the complex market data, e.g. a bank or financial institution.</value>
        [DataMember(Name = "priceSource", EmitDefaultValue = true)]
        public string PriceSource { get; set; }

        /// <summary>
        /// This is obsolete. It is not used, it will not be stored, and has no effects.  If you wish to attach a Lineage to your ComplexMarketData,  you should provide it in the optional Lineage field in the ComplexMarketData class.
        /// </summary>
        /// <value>This is obsolete. It is not used, it will not be stored, and has no effects.  If you wish to attach a Lineage to your ComplexMarketData,  you should provide it in the optional Lineage field in the ComplexMarketData class.</value>
        [DataMember(Name = "lineage", EmitDefaultValue = true)]
        public string Lineage { get; set; }

        /// <summary>
        /// The effectiveAt or cut label that this item of complex market data is/was updated/inserted with.
        /// </summary>
        /// <value>The effectiveAt or cut label that this item of complex market data is/was updated/inserted with.</value>
        [DataMember(Name = "effectiveAt", EmitDefaultValue = true)]
        public DateTimeOrCutLabel EffectiveAt { get; set; }

        /// <summary>
        /// The name of the market entity that the document represents
        /// </summary>
        /// <value>The name of the market entity that the document represents</value>
        [DataMember(Name = "marketAsset", IsRequired = true, EmitDefaultValue = true)]
        public string MarketAsset { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ComplexMarketDataId {\n");
            sb.Append("  Provider: ").Append(Provider).Append("\n");
            sb.Append("  PriceSource: ").Append(PriceSource).Append("\n");
            sb.Append("  Lineage: ").Append(Lineage).Append("\n");
            sb.Append("  EffectiveAt: ").Append(EffectiveAt).Append("\n");
            sb.Append("  MarketAsset: ").Append(MarketAsset).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ComplexMarketDataId);
        }

        /// <summary>
        /// Returns true if ComplexMarketDataId instances are equal
        /// </summary>
        /// <param name="input">Instance of ComplexMarketDataId to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ComplexMarketDataId input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Provider == input.Provider ||
                    (this.Provider != null &&
                    this.Provider.Equals(input.Provider))
                ) && 
                (
                    this.PriceSource == input.PriceSource ||
                    (this.PriceSource != null &&
                    this.PriceSource.Equals(input.PriceSource))
                ) && 
                (
                    this.Lineage == input.Lineage ||
                    (this.Lineage != null &&
                    this.Lineage.Equals(input.Lineage))
                ) && 
                (
                    this.EffectiveAt == input.EffectiveAt ||
                    (this.EffectiveAt != null &&
                    this.EffectiveAt.Equals(input.EffectiveAt))
                ) && 
                (
                    this.MarketAsset == input.MarketAsset ||
                    (this.MarketAsset != null &&
                    this.MarketAsset.Equals(input.MarketAsset))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Provider != null)
                {
                    hashCode = (hashCode * 59) + this.Provider.GetHashCode();
                }
                if (this.PriceSource != null)
                {
                    hashCode = (hashCode * 59) + this.PriceSource.GetHashCode();
                }
                if (this.Lineage != null)
                {
                    hashCode = (hashCode * 59) + this.Lineage.GetHashCode();
                }
                if (this.EffectiveAt != null)
                {
                    hashCode = (hashCode * 59) + this.EffectiveAt.GetHashCode();
                }
                if (this.MarketAsset != null)
                {
                    hashCode = (hashCode * 59) + this.MarketAsset.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Provider (string) maxLength
            if (this.Provider != null && this.Provider.Length > 32)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Provider, length must be less than 32.", new [] { "Provider" });
            }

            // Provider (string) minLength
            if (this.Provider != null && this.Provider.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Provider, length must be greater than 0.", new [] { "Provider" });
            }

            // PriceSource (string) maxLength
            if (this.PriceSource != null && this.PriceSource.Length > 256)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PriceSource, length must be less than 256.", new [] { "PriceSource" });
            }

            // PriceSource (string) minLength
            if (this.PriceSource != null && this.PriceSource.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PriceSource, length must be greater than 0.", new [] { "PriceSource" });
            }

            // Lineage (string) maxLength
            if (this.Lineage != null && this.Lineage.Length > 1024)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Lineage, length must be less than 1024.", new [] { "Lineage" });
            }

            // Lineage (string) minLength
            if (this.Lineage != null && this.Lineage.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Lineage, length must be greater than 0.", new [] { "Lineage" });
            }

            // MarketAsset (string) maxLength
            if (this.MarketAsset != null && this.MarketAsset.Length > 256)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for MarketAsset, length must be less than 256.", new [] { "MarketAsset" });
            }

            // MarketAsset (string) minLength
            if (this.MarketAsset != null && this.MarketAsset.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for MarketAsset, length must be greater than 0.", new [] { "MarketAsset" });
            }

            yield break;
        }
    }
}
