/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Lusid.Sdk.Client.OpenAPIDateConverter;

namespace Lusid.Sdk.Model
{
    /// <summary>
    /// Certain bonds will follow certain rounding conventions. For example, Thai government bonds will round accrued interest and cashflow values 2dp, whereas for French government bonds, the rounding is to 7dp.
    /// </summary>
    [DataContract(Name = "RoundingConvention")]
    public partial class RoundingConvention : IEquatable<RoundingConvention>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RoundingConvention" /> class.
        /// </summary>
        /// <param name="faceValue">The face value to round against. The number to be rounded is scaled to this face value before being rounded, and then re-scaled to the holding amount. For example if rounding an accrued interest value using a FaceValue of 1,000, but 10,000 units are held, then the initial calculated value would be divided by 10,000, then multiplied by 1,000 and rounded per the convention. The result of this would then be divided by 1,000 and multiplied by 10,000 to get the final value..</param>
        /// <param name="precision">The precision of the rounding.  The decimal places to which the rounding takes place..</param>
        /// <param name="roundingTarget">The target of the rounding convention. Accepted values are &#39;AccruedInterest&#39;, &#39;Cashflows&#39;, or &#39;All&#39;  Supported string (enumeration) values are: [All, AccruedInterest, Cashflows]..</param>
        /// <param name="roundingType">The type of rounding.  e.g. Round Up, Round Down  Supported string (enumeration) values are: [Down, Up, Floor, Ceiling, Nearest]..</param>
        public RoundingConvention(decimal faceValue = default(decimal), int precision = default(int), string roundingTarget = default(string), string roundingType = default(string))
        {
            this.FaceValue = faceValue;
            this.Precision = precision;
            this.RoundingTarget = roundingTarget;
            this.RoundingType = roundingType;
        }

        /// <summary>
        /// The face value to round against. The number to be rounded is scaled to this face value before being rounded, and then re-scaled to the holding amount. For example if rounding an accrued interest value using a FaceValue of 1,000, but 10,000 units are held, then the initial calculated value would be divided by 10,000, then multiplied by 1,000 and rounded per the convention. The result of this would then be divided by 1,000 and multiplied by 10,000 to get the final value.
        /// </summary>
        /// <value>The face value to round against. The number to be rounded is scaled to this face value before being rounded, and then re-scaled to the holding amount. For example if rounding an accrued interest value using a FaceValue of 1,000, but 10,000 units are held, then the initial calculated value would be divided by 10,000, then multiplied by 1,000 and rounded per the convention. The result of this would then be divided by 1,000 and multiplied by 10,000 to get the final value.</value>
        /// <example>100</example>
        [DataMember(Name = "faceValue", EmitDefaultValue = true)]
        public decimal FaceValue { get; set; }

        /// <summary>
        /// The precision of the rounding.  The decimal places to which the rounding takes place.
        /// </summary>
        /// <value>The precision of the rounding.  The decimal places to which the rounding takes place.</value>
        /// <example>6</example>
        [DataMember(Name = "precision", EmitDefaultValue = true)]
        public int Precision { get; set; }

        /// <summary>
        /// The target of the rounding convention. Accepted values are &#39;AccruedInterest&#39;, &#39;Cashflows&#39;, or &#39;All&#39;  Supported string (enumeration) values are: [All, AccruedInterest, Cashflows].
        /// </summary>
        /// <value>The target of the rounding convention. Accepted values are &#39;AccruedInterest&#39;, &#39;Cashflows&#39;, or &#39;All&#39;  Supported string (enumeration) values are: [All, AccruedInterest, Cashflows].</value>
        [DataMember(Name = "roundingTarget", EmitDefaultValue = true)]
        public string RoundingTarget { get; set; }

        /// <summary>
        /// The type of rounding.  e.g. Round Up, Round Down  Supported string (enumeration) values are: [Down, Up, Floor, Ceiling, Nearest].
        /// </summary>
        /// <value>The type of rounding.  e.g. Round Up, Round Down  Supported string (enumeration) values are: [Down, Up, Floor, Ceiling, Nearest].</value>
        [DataMember(Name = "roundingType", EmitDefaultValue = true)]
        public string RoundingType { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class RoundingConvention {\n");
            sb.Append("  FaceValue: ").Append(FaceValue).Append("\n");
            sb.Append("  Precision: ").Append(Precision).Append("\n");
            sb.Append("  RoundingTarget: ").Append(RoundingTarget).Append("\n");
            sb.Append("  RoundingType: ").Append(RoundingType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as RoundingConvention);
        }

        /// <summary>
        /// Returns true if RoundingConvention instances are equal
        /// </summary>
        /// <param name="input">Instance of RoundingConvention to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RoundingConvention input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.FaceValue == input.FaceValue ||
                    this.FaceValue.Equals(input.FaceValue)
                ) && 
                (
                    this.Precision == input.Precision ||
                    this.Precision.Equals(input.Precision)
                ) && 
                (
                    this.RoundingTarget == input.RoundingTarget ||
                    (this.RoundingTarget != null &&
                    this.RoundingTarget.Equals(input.RoundingTarget))
                ) && 
                (
                    this.RoundingType == input.RoundingType ||
                    (this.RoundingType != null &&
                    this.RoundingType.Equals(input.RoundingType))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.FaceValue.GetHashCode();
                hashCode = (hashCode * 59) + this.Precision.GetHashCode();
                if (this.RoundingTarget != null)
                {
                    hashCode = (hashCode * 59) + this.RoundingTarget.GetHashCode();
                }
                if (this.RoundingType != null)
                {
                    hashCode = (hashCode * 59) + this.RoundingType.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
