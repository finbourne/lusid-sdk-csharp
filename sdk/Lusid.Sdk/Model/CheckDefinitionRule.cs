/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Lusid.Sdk.Client.OpenAPIDateConverter;

namespace Lusid.Sdk.Model
{
    /// <summary>
    /// CheckDefinitionRule
    /// </summary>
    [DataContract(Name = "CheckDefinitionRule")]
    public partial class CheckDefinitionRule : IEquatable<CheckDefinitionRule>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CheckDefinitionRule" /> class.
        /// </summary>
        /// <param name="ruleKey">The key of the Rule..</param>
        /// <param name="displayName">The name of the Rule..</param>
        /// <param name="description">A description for the Rule..</param>
        /// <param name="ruleFormula">The formula for the rule..</param>
        /// <param name="severity">Severity of the rule if formaula is not satisfied..</param>
        public CheckDefinitionRule(string ruleKey = default(string), string displayName = default(string), string description = default(string), string ruleFormula = default(string), int severity = default(int))
        {
            this.RuleKey = ruleKey;
            this.DisplayName = displayName;
            this.Description = description;
            this.RuleFormula = ruleFormula;
            this.Severity = severity;
        }

        /// <summary>
        /// The key of the Rule.
        /// </summary>
        /// <value>The key of the Rule.</value>
        [DataMember(Name = "ruleKey", EmitDefaultValue = true)]
        public string RuleKey { get; set; }

        /// <summary>
        /// The name of the Rule.
        /// </summary>
        /// <value>The name of the Rule.</value>
        [DataMember(Name = "displayName", EmitDefaultValue = true)]
        public string DisplayName { get; set; }

        /// <summary>
        /// A description for the Rule.
        /// </summary>
        /// <value>A description for the Rule.</value>
        [DataMember(Name = "description", EmitDefaultValue = true)]
        public string Description { get; set; }

        /// <summary>
        /// The formula for the rule.
        /// </summary>
        /// <value>The formula for the rule.</value>
        [DataMember(Name = "ruleFormula", EmitDefaultValue = true)]
        public string RuleFormula { get; set; }

        /// <summary>
        /// Severity of the rule if formaula is not satisfied.
        /// </summary>
        /// <value>Severity of the rule if formaula is not satisfied.</value>
        [DataMember(Name = "severity", EmitDefaultValue = true)]
        public int Severity { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CheckDefinitionRule {\n");
            sb.Append("  RuleKey: ").Append(RuleKey).Append("\n");
            sb.Append("  DisplayName: ").Append(DisplayName).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  RuleFormula: ").Append(RuleFormula).Append("\n");
            sb.Append("  Severity: ").Append(Severity).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CheckDefinitionRule);
        }

        /// <summary>
        /// Returns true if CheckDefinitionRule instances are equal
        /// </summary>
        /// <param name="input">Instance of CheckDefinitionRule to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CheckDefinitionRule input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.RuleKey == input.RuleKey ||
                    (this.RuleKey != null &&
                    this.RuleKey.Equals(input.RuleKey))
                ) && 
                (
                    this.DisplayName == input.DisplayName ||
                    (this.DisplayName != null &&
                    this.DisplayName.Equals(input.DisplayName))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.RuleFormula == input.RuleFormula ||
                    (this.RuleFormula != null &&
                    this.RuleFormula.Equals(input.RuleFormula))
                ) && 
                (
                    this.Severity == input.Severity ||
                    this.Severity.Equals(input.Severity)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.RuleKey != null)
                {
                    hashCode = (hashCode * 59) + this.RuleKey.GetHashCode();
                }
                if (this.DisplayName != null)
                {
                    hashCode = (hashCode * 59) + this.DisplayName.GetHashCode();
                }
                if (this.Description != null)
                {
                    hashCode = (hashCode * 59) + this.Description.GetHashCode();
                }
                if (this.RuleFormula != null)
                {
                    hashCode = (hashCode * 59) + this.RuleFormula.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Severity.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // RuleKey (string) maxLength
            if (this.RuleKey != null && this.RuleKey.Length > 50)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for RuleKey, length must be less than 50.", new [] { "RuleKey" });
            }

            // RuleKey (string) minLength
            if (this.RuleKey != null && this.RuleKey.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for RuleKey, length must be greater than 0.", new [] { "RuleKey" });
            }

            // DisplayName (string) maxLength
            if (this.DisplayName != null && this.DisplayName.Length > 512)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for DisplayName, length must be less than 512.", new [] { "DisplayName" });
            }

            // DisplayName (string) minLength
            if (this.DisplayName != null && this.DisplayName.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for DisplayName, length must be greater than 0.", new [] { "DisplayName" });
            }

            // DisplayName (string) pattern
            Regex regexDisplayName = new Regex(@"^[\s\S]*$", RegexOptions.CultureInvariant);
            if (false == regexDisplayName.Match(this.DisplayName).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for DisplayName, must match a pattern of " + regexDisplayName, new [] { "DisplayName" });
            }

            // Description (string) maxLength
            if (this.Description != null && this.Description.Length > 512)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Description, length must be less than 512.", new [] { "Description" });
            }

            // Description (string) minLength
            if (this.Description != null && this.Description.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Description, length must be greater than 1.", new [] { "Description" });
            }

            // Description (string) pattern
            Regex regexDescription = new Regex(@"^[\s\S]*$", RegexOptions.CultureInvariant);
            if (false == regexDescription.Match(this.Description).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Description, must match a pattern of " + regexDescription, new [] { "Description" });
            }

            // RuleFormula (string) maxLength
            if (this.RuleFormula != null && this.RuleFormula.Length > 16384)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for RuleFormula, length must be less than 16384.", new [] { "RuleFormula" });
            }

            // RuleFormula (string) minLength
            if (this.RuleFormula != null && this.RuleFormula.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for RuleFormula, length must be greater than 0.", new [] { "RuleFormula" });
            }

            // RuleFormula (string) pattern
            Regex regexRuleFormula = new Regex(@"^[\s\S]*$", RegexOptions.CultureInvariant);
            if (false == regexRuleFormula.Match(this.RuleFormula).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for RuleFormula, must match a pattern of " + regexRuleFormula, new [] { "RuleFormula" });
            }

            yield break;
        }
    }
}
