/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Lusid.Sdk.Client.OpenAPIDateConverter;

namespace Lusid.Sdk.Model
{
    /// <summary>
    /// The underlying instrument representing one side of the TRS and its pay-receive direction.              Note that TRS currently only supports an asset of Bond or ComplexBond, no other instruments are allowed. Support for additional instrument types will be added in the future.
    /// </summary>
    [DataContract(Name = "AssetLeg")]
    public partial class AssetLeg : IEquatable<AssetLeg>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AssetLeg" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected AssetLeg() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="AssetLeg" /> class.
        /// </summary>
        /// <param name="asset">asset (required).</param>
        /// <param name="payReceive">Either Pay or Receive stating direction of the asset in the swap.  Supported string (enumeration) values are: [Pay, Receive]. (required).</param>
        public AssetLeg(LusidInstrument asset = default(LusidInstrument), string payReceive = default(string))
        {
            // to ensure "asset" is required (not null)
            if (asset == null)
            {
                throw new ArgumentNullException("asset is a required property for AssetLeg and cannot be null");
            }
            this.Asset = asset;
            // to ensure "payReceive" is required (not null)
            if (payReceive == null)
            {
                throw new ArgumentNullException("payReceive is a required property for AssetLeg and cannot be null");
            }
            this.PayReceive = payReceive;
        }

        /// <summary>
        /// Gets or Sets Asset
        /// </summary>
        [DataMember(Name = "asset", IsRequired = true, EmitDefaultValue = true)]
        public LusidInstrument Asset { get; set; }

        /// <summary>
        /// Either Pay or Receive stating direction of the asset in the swap.  Supported string (enumeration) values are: [Pay, Receive].
        /// </summary>
        /// <value>Either Pay or Receive stating direction of the asset in the swap.  Supported string (enumeration) values are: [Pay, Receive].</value>
        [DataMember(Name = "payReceive", IsRequired = true, EmitDefaultValue = true)]
        public string PayReceive { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AssetLeg {\n");
            sb.Append("  Asset: ").Append(Asset).Append("\n");
            sb.Append("  PayReceive: ").Append(PayReceive).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AssetLeg);
        }

        /// <summary>
        /// Returns true if AssetLeg instances are equal
        /// </summary>
        /// <param name="input">Instance of AssetLeg to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AssetLeg input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Asset == input.Asset ||
                    (this.Asset != null &&
                    this.Asset.Equals(input.Asset))
                ) && 
                (
                    this.PayReceive == input.PayReceive ||
                    (this.PayReceive != null &&
                    this.PayReceive.Equals(input.PayReceive))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Asset != null)
                {
                    hashCode = (hashCode * 59) + this.Asset.GetHashCode();
                }
                if (this.PayReceive != null)
                {
                    hashCode = (hashCode * 59) + this.PayReceive.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // PayReceive (string) minLength
            if (this.PayReceive != null && this.PayReceive.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PayReceive, length must be greater than 1.", new [] { "PayReceive" });
            }

            yield break;
        }
    }
}
