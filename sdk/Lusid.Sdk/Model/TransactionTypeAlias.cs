/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Lusid.Sdk.Client.OpenAPIDateConverter;

namespace Lusid.Sdk.Model
{
    /// <summary>
    /// TransactionTypeAlias
    /// </summary>
    [DataContract(Name = "TransactionTypeAlias")]
    public partial class TransactionTypeAlias : IEquatable<TransactionTypeAlias>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TransactionTypeAlias" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected TransactionTypeAlias() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="TransactionTypeAlias" /> class.
        /// </summary>
        /// <param name="type">The transaction type (required).</param>
        /// <param name="description">Brief description of the transaction (required).</param>
        /// <param name="transactionClass">Relates types of a similar class. E.g. Buy/Sell, StockIn/StockOut (required).</param>
        /// <param name="transactionRoles">Transactions role within a class. E.g. Increase a long position (required).</param>
        /// <param name="isDefault">IsDefault is a flag that denotes the default alias for a source. There can only be, at most, one per source..</param>
        public TransactionTypeAlias(string type = default(string), string description = default(string), string transactionClass = default(string), string transactionRoles = default(string), bool isDefault = default(bool))
        {
            // to ensure "type" is required (not null)
            if (type == null)
            {
                throw new ArgumentNullException("type is a required property for TransactionTypeAlias and cannot be null");
            }
            this.Type = type;
            // to ensure "description" is required (not null)
            if (description == null)
            {
                throw new ArgumentNullException("description is a required property for TransactionTypeAlias and cannot be null");
            }
            this.Description = description;
            // to ensure "transactionClass" is required (not null)
            if (transactionClass == null)
            {
                throw new ArgumentNullException("transactionClass is a required property for TransactionTypeAlias and cannot be null");
            }
            this.TransactionClass = transactionClass;
            // to ensure "transactionRoles" is required (not null)
            if (transactionRoles == null)
            {
                throw new ArgumentNullException("transactionRoles is a required property for TransactionTypeAlias and cannot be null");
            }
            this.TransactionRoles = transactionRoles;
            this.IsDefault = isDefault;
        }

        /// <summary>
        /// The transaction type
        /// </summary>
        /// <value>The transaction type</value>
        [DataMember(Name = "type", IsRequired = true, EmitDefaultValue = true)]
        public string Type { get; set; }

        /// <summary>
        /// Brief description of the transaction
        /// </summary>
        /// <value>Brief description of the transaction</value>
        [DataMember(Name = "description", IsRequired = true, EmitDefaultValue = true)]
        public string Description { get; set; }

        /// <summary>
        /// Relates types of a similar class. E.g. Buy/Sell, StockIn/StockOut
        /// </summary>
        /// <value>Relates types of a similar class. E.g. Buy/Sell, StockIn/StockOut</value>
        [DataMember(Name = "transactionClass", IsRequired = true, EmitDefaultValue = true)]
        public string TransactionClass { get; set; }

        /// <summary>
        /// Transactions role within a class. E.g. Increase a long position
        /// </summary>
        /// <value>Transactions role within a class. E.g. Increase a long position</value>
        [DataMember(Name = "transactionRoles", IsRequired = true, EmitDefaultValue = true)]
        public string TransactionRoles { get; set; }

        /// <summary>
        /// IsDefault is a flag that denotes the default alias for a source. There can only be, at most, one per source.
        /// </summary>
        /// <value>IsDefault is a flag that denotes the default alias for a source. There can only be, at most, one per source.</value>
        [DataMember(Name = "isDefault", EmitDefaultValue = true)]
        public bool IsDefault { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class TransactionTypeAlias {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  TransactionClass: ").Append(TransactionClass).Append("\n");
            sb.Append("  TransactionRoles: ").Append(TransactionRoles).Append("\n");
            sb.Append("  IsDefault: ").Append(IsDefault).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TransactionTypeAlias);
        }

        /// <summary>
        /// Returns true if TransactionTypeAlias instances are equal
        /// </summary>
        /// <param name="input">Instance of TransactionTypeAlias to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TransactionTypeAlias input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.TransactionClass == input.TransactionClass ||
                    (this.TransactionClass != null &&
                    this.TransactionClass.Equals(input.TransactionClass))
                ) && 
                (
                    this.TransactionRoles == input.TransactionRoles ||
                    (this.TransactionRoles != null &&
                    this.TransactionRoles.Equals(input.TransactionRoles))
                ) && 
                (
                    this.IsDefault == input.IsDefault ||
                    this.IsDefault.Equals(input.IsDefault)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Type != null)
                {
                    hashCode = (hashCode * 59) + this.Type.GetHashCode();
                }
                if (this.Description != null)
                {
                    hashCode = (hashCode * 59) + this.Description.GetHashCode();
                }
                if (this.TransactionClass != null)
                {
                    hashCode = (hashCode * 59) + this.TransactionClass.GetHashCode();
                }
                if (this.TransactionRoles != null)
                {
                    hashCode = (hashCode * 59) + this.TransactionRoles.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.IsDefault.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Type (string) maxLength
            if (this.Type != null && this.Type.Length > 64)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Type, length must be less than 64.", new [] { "Type" });
            }

            // Type (string) minLength
            if (this.Type != null && this.Type.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Type, length must be greater than 1.", new [] { "Type" });
            }

            // Description (string) maxLength
            if (this.Description != null && this.Description.Length > 512)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Description, length must be less than 512.", new [] { "Description" });
            }

            // Description (string) minLength
            if (this.Description != null && this.Description.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Description, length must be greater than 1.", new [] { "Description" });
            }

            // Description (string) pattern
            Regex regexDescription = new Regex(@"^[\s\S]*$", RegexOptions.CultureInvariant);
            if (false == regexDescription.Match(this.Description).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Description, must match a pattern of " + regexDescription, new [] { "Description" });
            }

            // TransactionClass (string) maxLength
            if (this.TransactionClass != null && this.TransactionClass.Length > 512)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for TransactionClass, length must be less than 512.", new [] { "TransactionClass" });
            }

            // TransactionClass (string) minLength
            if (this.TransactionClass != null && this.TransactionClass.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for TransactionClass, length must be greater than 1.", new [] { "TransactionClass" });
            }

            // TransactionClass (string) pattern
            Regex regexTransactionClass = new Regex(@"^[\s\S]*$", RegexOptions.CultureInvariant);
            if (false == regexTransactionClass.Match(this.TransactionClass).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for TransactionClass, must match a pattern of " + regexTransactionClass, new [] { "TransactionClass" });
            }

            // TransactionRoles (string) minLength
            if (this.TransactionRoles != null && this.TransactionRoles.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for TransactionRoles, length must be greater than 1.", new [] { "TransactionRoles" });
            }

            yield break;
        }
    }
}
