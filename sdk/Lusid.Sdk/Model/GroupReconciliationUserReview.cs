/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Lusid.Sdk.Client.OpenAPIDateConverter;

namespace Lusid.Sdk.Model
{
    /// <summary>
    /// GroupReconciliationUserReview
    /// </summary>
    [DataContract(Name = "GroupReconciliationUserReview")]
    public partial class GroupReconciliationUserReview : IEquatable<GroupReconciliationUserReview>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GroupReconciliationUserReview" /> class.
        /// </summary>
        /// <param name="breakCodes">A list of break codes shared between the reconciliation runs of the same run instance and result hash..</param>
        /// <param name="matchKeys">A list of match keys shared between the reconciliation runs of the same run instance and result hash..</param>
        /// <param name="comments">A list of comments shared between the reconciliation runs of the same run instance and result hash..</param>
        public GroupReconciliationUserReview(List<GroupReconciliationUserReviewBreakCode> breakCodes = default(List<GroupReconciliationUserReviewBreakCode>), List<GroupReconciliationUserReviewMatchKey> matchKeys = default(List<GroupReconciliationUserReviewMatchKey>), List<GroupReconciliationUserReviewComment> comments = default(List<GroupReconciliationUserReviewComment>))
        {
            this.BreakCodes = breakCodes;
            this.MatchKeys = matchKeys;
            this.Comments = comments;
        }

        /// <summary>
        /// A list of break codes shared between the reconciliation runs of the same run instance and result hash.
        /// </summary>
        /// <value>A list of break codes shared between the reconciliation runs of the same run instance and result hash.</value>
        [DataMember(Name = "breakCodes", EmitDefaultValue = true)]
        public List<GroupReconciliationUserReviewBreakCode> BreakCodes { get; set; }

        /// <summary>
        /// A list of match keys shared between the reconciliation runs of the same run instance and result hash.
        /// </summary>
        /// <value>A list of match keys shared between the reconciliation runs of the same run instance and result hash.</value>
        [DataMember(Name = "matchKeys", EmitDefaultValue = true)]
        public List<GroupReconciliationUserReviewMatchKey> MatchKeys { get; set; }

        /// <summary>
        /// A list of comments shared between the reconciliation runs of the same run instance and result hash.
        /// </summary>
        /// <value>A list of comments shared between the reconciliation runs of the same run instance and result hash.</value>
        [DataMember(Name = "comments", EmitDefaultValue = true)]
        public List<GroupReconciliationUserReviewComment> Comments { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class GroupReconciliationUserReview {\n");
            sb.Append("  BreakCodes: ").Append(BreakCodes).Append("\n");
            sb.Append("  MatchKeys: ").Append(MatchKeys).Append("\n");
            sb.Append("  Comments: ").Append(Comments).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GroupReconciliationUserReview);
        }

        /// <summary>
        /// Returns true if GroupReconciliationUserReview instances are equal
        /// </summary>
        /// <param name="input">Instance of GroupReconciliationUserReview to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GroupReconciliationUserReview input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.BreakCodes == input.BreakCodes ||
                    this.BreakCodes != null &&
                    input.BreakCodes != null &&
                    this.BreakCodes.SequenceEqual(input.BreakCodes)
                ) && 
                (
                    this.MatchKeys == input.MatchKeys ||
                    this.MatchKeys != null &&
                    input.MatchKeys != null &&
                    this.MatchKeys.SequenceEqual(input.MatchKeys)
                ) && 
                (
                    this.Comments == input.Comments ||
                    this.Comments != null &&
                    input.Comments != null &&
                    this.Comments.SequenceEqual(input.Comments)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.BreakCodes != null)
                {
                    hashCode = (hashCode * 59) + this.BreakCodes.GetHashCode();
                }
                if (this.MatchKeys != null)
                {
                    hashCode = (hashCode * 59) + this.MatchKeys.GetHashCode();
                }
                if (this.Comments != null)
                {
                    hashCode = (hashCode * 59) + this.Comments.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
