/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Lusid.Sdk.Client.OpenAPIDateConverter;

namespace Lusid.Sdk.Model
{
    /// <summary>
    /// An instrument event equipped with additional metadata.
    /// </summary>
    [DataContract(Name = "InstrumentEventHolder")]
    public partial class InstrumentEventHolder : IEquatable<InstrumentEventHolder>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InstrumentEventHolder" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected InstrumentEventHolder() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="InstrumentEventHolder" /> class.
        /// </summary>
        /// <param name="instrumentEventId">The unique identifier of this corporate action. (required).</param>
        /// <param name="corporateActionSourceId">corporateActionSourceId.</param>
        /// <param name="instrumentIdentifiers">The set of identifiers which determine the instrument this event relates to. (required).</param>
        /// <param name="lusidInstrumentId">The LUID for the instrument. (required).</param>
        /// <param name="instrumentScope">The scope of the instrument. (required).</param>
        /// <param name="description">The description of the instrument event. (required).</param>
        /// <param name="eventDateRange">eventDateRange (required).</param>
        /// <param name="instrumentEvent">instrumentEvent (required).</param>
        /// <param name="properties">The properties attached to this instrument event..</param>
        /// <param name="sequenceNumber">The order of the instrument event relative others on the same date (0 being processed first). Must be non negative..</param>
        /// <param name="participationType">Is participation in this event Mandatory, MandatoryWithChoices, or Voluntary. (default to &quot;Mandatory&quot;).</param>
        public InstrumentEventHolder(string instrumentEventId = default(string), ResourceId corporateActionSourceId = default(ResourceId), Dictionary<string, string> instrumentIdentifiers = default(Dictionary<string, string>), string lusidInstrumentId = default(string), string instrumentScope = default(string), string description = default(string), EventDateRange eventDateRange = default(EventDateRange), InstrumentEvent instrumentEvent = default(InstrumentEvent), List<PerpetualProperty> properties = default(List<PerpetualProperty>), int sequenceNumber = default(int), string participationType = @"Mandatory")
        {
            // to ensure "instrumentEventId" is required (not null)
            if (instrumentEventId == null)
            {
                throw new ArgumentNullException("instrumentEventId is a required property for InstrumentEventHolder and cannot be null");
            }
            this.InstrumentEventId = instrumentEventId;
            // to ensure "instrumentIdentifiers" is required (not null)
            if (instrumentIdentifiers == null)
            {
                throw new ArgumentNullException("instrumentIdentifiers is a required property for InstrumentEventHolder and cannot be null");
            }
            this.InstrumentIdentifiers = instrumentIdentifiers;
            // to ensure "lusidInstrumentId" is required (not null)
            if (lusidInstrumentId == null)
            {
                throw new ArgumentNullException("lusidInstrumentId is a required property for InstrumentEventHolder and cannot be null");
            }
            this.LusidInstrumentId = lusidInstrumentId;
            // to ensure "instrumentScope" is required (not null)
            if (instrumentScope == null)
            {
                throw new ArgumentNullException("instrumentScope is a required property for InstrumentEventHolder and cannot be null");
            }
            this.InstrumentScope = instrumentScope;
            // to ensure "description" is required (not null)
            if (description == null)
            {
                throw new ArgumentNullException("description is a required property for InstrumentEventHolder and cannot be null");
            }
            this.Description = description;
            // to ensure "eventDateRange" is required (not null)
            if (eventDateRange == null)
            {
                throw new ArgumentNullException("eventDateRange is a required property for InstrumentEventHolder and cannot be null");
            }
            this.EventDateRange = eventDateRange;
            // to ensure "instrumentEvent" is required (not null)
            if (instrumentEvent == null)
            {
                throw new ArgumentNullException("instrumentEvent is a required property for InstrumentEventHolder and cannot be null");
            }
            this.InstrumentEvent = instrumentEvent;
            this.CorporateActionSourceId = corporateActionSourceId;
            this.Properties = properties;
            this.SequenceNumber = sequenceNumber;
            // use default value if no "participationType" provided
            this.ParticipationType = participationType ?? @"Mandatory";
        }

        /// <summary>
        /// The unique identifier of this corporate action.
        /// </summary>
        /// <value>The unique identifier of this corporate action.</value>
        [DataMember(Name = "instrumentEventId", IsRequired = true, EmitDefaultValue = true)]
        public string InstrumentEventId { get; set; }

        /// <summary>
        /// Gets or Sets CorporateActionSourceId
        /// </summary>
        [DataMember(Name = "corporateActionSourceId", EmitDefaultValue = false)]
        public ResourceId CorporateActionSourceId { get; set; }

        /// <summary>
        /// The set of identifiers which determine the instrument this event relates to.
        /// </summary>
        /// <value>The set of identifiers which determine the instrument this event relates to.</value>
        [DataMember(Name = "instrumentIdentifiers", IsRequired = true, EmitDefaultValue = true)]
        public Dictionary<string, string> InstrumentIdentifiers { get; set; }

        /// <summary>
        /// The LUID for the instrument.
        /// </summary>
        /// <value>The LUID for the instrument.</value>
        [DataMember(Name = "lusidInstrumentId", IsRequired = true, EmitDefaultValue = true)]
        public string LusidInstrumentId { get; set; }

        /// <summary>
        /// The scope of the instrument.
        /// </summary>
        /// <value>The scope of the instrument.</value>
        [DataMember(Name = "instrumentScope", IsRequired = true, EmitDefaultValue = true)]
        public string InstrumentScope { get; set; }

        /// <summary>
        /// The description of the instrument event.
        /// </summary>
        /// <value>The description of the instrument event.</value>
        [DataMember(Name = "description", IsRequired = true, EmitDefaultValue = true)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets EventDateRange
        /// </summary>
        [DataMember(Name = "eventDateRange", IsRequired = true, EmitDefaultValue = true)]
        public EventDateRange EventDateRange { get; set; }

        /// <summary>
        /// Is the event Economically Complete, or is it missing some DataDependent fields (Incomplete).
        /// </summary>
        /// <value>Is the event Economically Complete, or is it missing some DataDependent fields (Incomplete).</value>
        [DataMember(Name = "completeness", EmitDefaultValue = true)]
        public string Completeness { get; private set; }

        /// <summary>
        /// Returns false as Completeness should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeCompleteness()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets InstrumentEvent
        /// </summary>
        [DataMember(Name = "instrumentEvent", IsRequired = true, EmitDefaultValue = true)]
        public InstrumentEvent InstrumentEvent { get; set; }

        /// <summary>
        /// The properties attached to this instrument event.
        /// </summary>
        /// <value>The properties attached to this instrument event.</value>
        [DataMember(Name = "properties", EmitDefaultValue = true)]
        public List<PerpetualProperty> Properties { get; set; }

        /// <summary>
        /// The order of the instrument event relative others on the same date (0 being processed first). Must be non negative.
        /// </summary>
        /// <value>The order of the instrument event relative others on the same date (0 being processed first). Must be non negative.</value>
        [DataMember(Name = "sequenceNumber", EmitDefaultValue = true)]
        public int SequenceNumber { get; set; }

        /// <summary>
        /// Is participation in this event Mandatory, MandatoryWithChoices, or Voluntary.
        /// </summary>
        /// <value>Is participation in this event Mandatory, MandatoryWithChoices, or Voluntary.</value>
        [DataMember(Name = "participationType", EmitDefaultValue = true)]
        public string ParticipationType { get; set; }

        /// <summary>
        /// The AsAt time of the instrument event, if available. This is a readonly field and should not be provided on upsert.
        /// </summary>
        /// <value>The AsAt time of the instrument event, if available. This is a readonly field and should not be provided on upsert.</value>
        [DataMember(Name = "asAt", EmitDefaultValue = true)]
        public DateTimeOffset? AsAt { get; private set; }

        /// <summary>
        /// Returns false as AsAt should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeAsAt()
        {
            return false;
        }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class InstrumentEventHolder {\n");
            sb.Append("  InstrumentEventId: ").Append(InstrumentEventId).Append("\n");
            sb.Append("  CorporateActionSourceId: ").Append(CorporateActionSourceId).Append("\n");
            sb.Append("  InstrumentIdentifiers: ").Append(InstrumentIdentifiers).Append("\n");
            sb.Append("  LusidInstrumentId: ").Append(LusidInstrumentId).Append("\n");
            sb.Append("  InstrumentScope: ").Append(InstrumentScope).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  EventDateRange: ").Append(EventDateRange).Append("\n");
            sb.Append("  Completeness: ").Append(Completeness).Append("\n");
            sb.Append("  InstrumentEvent: ").Append(InstrumentEvent).Append("\n");
            sb.Append("  Properties: ").Append(Properties).Append("\n");
            sb.Append("  SequenceNumber: ").Append(SequenceNumber).Append("\n");
            sb.Append("  ParticipationType: ").Append(ParticipationType).Append("\n");
            sb.Append("  AsAt: ").Append(AsAt).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as InstrumentEventHolder);
        }

        /// <summary>
        /// Returns true if InstrumentEventHolder instances are equal
        /// </summary>
        /// <param name="input">Instance of InstrumentEventHolder to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InstrumentEventHolder input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.InstrumentEventId == input.InstrumentEventId ||
                    (this.InstrumentEventId != null &&
                    this.InstrumentEventId.Equals(input.InstrumentEventId))
                ) && 
                (
                    this.CorporateActionSourceId == input.CorporateActionSourceId ||
                    (this.CorporateActionSourceId != null &&
                    this.CorporateActionSourceId.Equals(input.CorporateActionSourceId))
                ) && 
                (
                    this.InstrumentIdentifiers == input.InstrumentIdentifiers ||
                    this.InstrumentIdentifiers != null &&
                    input.InstrumentIdentifiers != null &&
                    this.InstrumentIdentifiers.SequenceEqual(input.InstrumentIdentifiers)
                ) && 
                (
                    this.LusidInstrumentId == input.LusidInstrumentId ||
                    (this.LusidInstrumentId != null &&
                    this.LusidInstrumentId.Equals(input.LusidInstrumentId))
                ) && 
                (
                    this.InstrumentScope == input.InstrumentScope ||
                    (this.InstrumentScope != null &&
                    this.InstrumentScope.Equals(input.InstrumentScope))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.EventDateRange == input.EventDateRange ||
                    (this.EventDateRange != null &&
                    this.EventDateRange.Equals(input.EventDateRange))
                ) && 
                (
                    this.Completeness == input.Completeness ||
                    (this.Completeness != null &&
                    this.Completeness.Equals(input.Completeness))
                ) && 
                (
                    this.InstrumentEvent == input.InstrumentEvent ||
                    (this.InstrumentEvent != null &&
                    this.InstrumentEvent.Equals(input.InstrumentEvent))
                ) && 
                (
                    this.Properties == input.Properties ||
                    this.Properties != null &&
                    input.Properties != null &&
                    this.Properties.SequenceEqual(input.Properties)
                ) && 
                (
                    this.SequenceNumber == input.SequenceNumber ||
                    this.SequenceNumber.Equals(input.SequenceNumber)
                ) && 
                (
                    this.ParticipationType == input.ParticipationType ||
                    (this.ParticipationType != null &&
                    this.ParticipationType.Equals(input.ParticipationType))
                ) && 
                (
                    this.AsAt == input.AsAt ||
                    (this.AsAt != null &&
                    this.AsAt.Equals(input.AsAt))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.InstrumentEventId != null)
                {
                    hashCode = (hashCode * 59) + this.InstrumentEventId.GetHashCode();
                }
                if (this.CorporateActionSourceId != null)
                {
                    hashCode = (hashCode * 59) + this.CorporateActionSourceId.GetHashCode();
                }
                if (this.InstrumentIdentifiers != null)
                {
                    hashCode = (hashCode * 59) + this.InstrumentIdentifiers.GetHashCode();
                }
                if (this.LusidInstrumentId != null)
                {
                    hashCode = (hashCode * 59) + this.LusidInstrumentId.GetHashCode();
                }
                if (this.InstrumentScope != null)
                {
                    hashCode = (hashCode * 59) + this.InstrumentScope.GetHashCode();
                }
                if (this.Description != null)
                {
                    hashCode = (hashCode * 59) + this.Description.GetHashCode();
                }
                if (this.EventDateRange != null)
                {
                    hashCode = (hashCode * 59) + this.EventDateRange.GetHashCode();
                }
                if (this.Completeness != null)
                {
                    hashCode = (hashCode * 59) + this.Completeness.GetHashCode();
                }
                if (this.InstrumentEvent != null)
                {
                    hashCode = (hashCode * 59) + this.InstrumentEvent.GetHashCode();
                }
                if (this.Properties != null)
                {
                    hashCode = (hashCode * 59) + this.Properties.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.SequenceNumber.GetHashCode();
                if (this.ParticipationType != null)
                {
                    hashCode = (hashCode * 59) + this.ParticipationType.GetHashCode();
                }
                if (this.AsAt != null)
                {
                    hashCode = (hashCode * 59) + this.AsAt.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // InstrumentEventId (string) maxLength
            if (this.InstrumentEventId != null && this.InstrumentEventId.Length > 64)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for InstrumentEventId, length must be less than 64.", new [] { "InstrumentEventId" });
            }

            // InstrumentEventId (string) minLength
            if (this.InstrumentEventId != null && this.InstrumentEventId.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for InstrumentEventId, length must be greater than 1.", new [] { "InstrumentEventId" });
            }

            // InstrumentEventId (string) pattern
            Regex regexInstrumentEventId = new Regex(@"^[a-zA-Z0-9\-_]+$", RegexOptions.CultureInvariant);
            if (false == regexInstrumentEventId.Match(this.InstrumentEventId).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for InstrumentEventId, must match a pattern of " + regexInstrumentEventId, new [] { "InstrumentEventId" });
            }

            // LusidInstrumentId (string) minLength
            if (this.LusidInstrumentId != null && this.LusidInstrumentId.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for LusidInstrumentId, length must be greater than 1.", new [] { "LusidInstrumentId" });
            }

            // InstrumentScope (string) minLength
            if (this.InstrumentScope != null && this.InstrumentScope.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for InstrumentScope, length must be greater than 1.", new [] { "InstrumentScope" });
            }

            // Description (string) maxLength
            if (this.Description != null && this.Description.Length > 1024)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Description, length must be less than 1024.", new [] { "Description" });
            }

            // Description (string) minLength
            if (this.Description != null && this.Description.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Description, length must be greater than 0.", new [] { "Description" });
            }

            // Description (string) pattern
            Regex regexDescription = new Regex(@"^[\s\S]*$", RegexOptions.CultureInvariant);
            if (false == regexDescription.Match(this.Description).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Description, must match a pattern of " + regexDescription, new [] { "Description" });
            }

            yield break;
        }
    }
}
