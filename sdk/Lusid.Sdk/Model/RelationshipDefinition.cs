/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Lusid.Sdk.Client.OpenAPIDateConverter;

namespace Lusid.Sdk.Model
{
    /// <summary>
    /// RelationshipDefinition
    /// </summary>
    [DataContract(Name = "RelationshipDefinition")]
    public partial class RelationshipDefinition : IEquatable<RelationshipDefinition>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RelationshipDefinition" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected RelationshipDefinition() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="RelationshipDefinition" /> class.
        /// </summary>
        /// <param name="varVersion">varVersion.</param>
        /// <param name="relationshipDefinitionId">relationshipDefinitionId (required).</param>
        /// <param name="sourceEntityType">The entity type of the source entity object. (required).</param>
        /// <param name="targetEntityType">The entity type of the target entity object. (required).</param>
        /// <param name="displayName">The display name of the relationship. (required).</param>
        /// <param name="outwardDescription">The description to relate source entity object and target entity object (required).</param>
        /// <param name="inwardDescription">The description to relate target entity object and source entity object (required).</param>
        /// <param name="lifeTime">Describes how the relationships can change over time. (required).</param>
        /// <param name="relationshipCardinality">Describes the cardinality of the relationship between source entity and target entity. (required).</param>
        /// <param name="links">links.</param>
        public RelationshipDefinition(ModelVersion varVersion = default(ModelVersion), ResourceId relationshipDefinitionId = default(ResourceId), string sourceEntityType = default(string), string targetEntityType = default(string), string displayName = default(string), string outwardDescription = default(string), string inwardDescription = default(string), string lifeTime = default(string), string relationshipCardinality = default(string), List<Link> links = default(List<Link>))
        {
            // to ensure "relationshipDefinitionId" is required (not null)
            if (relationshipDefinitionId == null)
            {
                throw new ArgumentNullException("relationshipDefinitionId is a required property for RelationshipDefinition and cannot be null");
            }
            this.RelationshipDefinitionId = relationshipDefinitionId;
            // to ensure "sourceEntityType" is required (not null)
            if (sourceEntityType == null)
            {
                throw new ArgumentNullException("sourceEntityType is a required property for RelationshipDefinition and cannot be null");
            }
            this.SourceEntityType = sourceEntityType;
            // to ensure "targetEntityType" is required (not null)
            if (targetEntityType == null)
            {
                throw new ArgumentNullException("targetEntityType is a required property for RelationshipDefinition and cannot be null");
            }
            this.TargetEntityType = targetEntityType;
            // to ensure "displayName" is required (not null)
            if (displayName == null)
            {
                throw new ArgumentNullException("displayName is a required property for RelationshipDefinition and cannot be null");
            }
            this.DisplayName = displayName;
            // to ensure "outwardDescription" is required (not null)
            if (outwardDescription == null)
            {
                throw new ArgumentNullException("outwardDescription is a required property for RelationshipDefinition and cannot be null");
            }
            this.OutwardDescription = outwardDescription;
            // to ensure "inwardDescription" is required (not null)
            if (inwardDescription == null)
            {
                throw new ArgumentNullException("inwardDescription is a required property for RelationshipDefinition and cannot be null");
            }
            this.InwardDescription = inwardDescription;
            // to ensure "lifeTime" is required (not null)
            if (lifeTime == null)
            {
                throw new ArgumentNullException("lifeTime is a required property for RelationshipDefinition and cannot be null");
            }
            this.LifeTime = lifeTime;
            // to ensure "relationshipCardinality" is required (not null)
            if (relationshipCardinality == null)
            {
                throw new ArgumentNullException("relationshipCardinality is a required property for RelationshipDefinition and cannot be null");
            }
            this.RelationshipCardinality = relationshipCardinality;
            this.VarVersion = varVersion;
            this.Links = links;
        }

        /// <summary>
        /// Gets or Sets VarVersion
        /// </summary>
        [DataMember(Name = "version", EmitDefaultValue = false)]
        public ModelVersion VarVersion { get; set; }

        /// <summary>
        /// Gets or Sets RelationshipDefinitionId
        /// </summary>
        [DataMember(Name = "relationshipDefinitionId", IsRequired = true, EmitDefaultValue = true)]
        public ResourceId RelationshipDefinitionId { get; set; }

        /// <summary>
        /// The entity type of the source entity object.
        /// </summary>
        /// <value>The entity type of the source entity object.</value>
        [DataMember(Name = "sourceEntityType", IsRequired = true, EmitDefaultValue = true)]
        public string SourceEntityType { get; set; }

        /// <summary>
        /// The entity type of the target entity object.
        /// </summary>
        /// <value>The entity type of the target entity object.</value>
        [DataMember(Name = "targetEntityType", IsRequired = true, EmitDefaultValue = true)]
        public string TargetEntityType { get; set; }

        /// <summary>
        /// The display name of the relationship.
        /// </summary>
        /// <value>The display name of the relationship.</value>
        [DataMember(Name = "displayName", IsRequired = true, EmitDefaultValue = true)]
        public string DisplayName { get; set; }

        /// <summary>
        /// The description to relate source entity object and target entity object
        /// </summary>
        /// <value>The description to relate source entity object and target entity object</value>
        [DataMember(Name = "outwardDescription", IsRequired = true, EmitDefaultValue = true)]
        public string OutwardDescription { get; set; }

        /// <summary>
        /// The description to relate target entity object and source entity object
        /// </summary>
        /// <value>The description to relate target entity object and source entity object</value>
        [DataMember(Name = "inwardDescription", IsRequired = true, EmitDefaultValue = true)]
        public string InwardDescription { get; set; }

        /// <summary>
        /// Describes how the relationships can change over time.
        /// </summary>
        /// <value>Describes how the relationships can change over time.</value>
        [DataMember(Name = "lifeTime", IsRequired = true, EmitDefaultValue = true)]
        public string LifeTime { get; set; }

        /// <summary>
        /// Describes the cardinality of the relationship between source entity and target entity.
        /// </summary>
        /// <value>Describes the cardinality of the relationship between source entity and target entity.</value>
        [DataMember(Name = "relationshipCardinality", IsRequired = true, EmitDefaultValue = true)]
        public string RelationshipCardinality { get; set; }

        /// <summary>
        /// Gets or Sets Links
        /// </summary>
        [DataMember(Name = "links", EmitDefaultValue = true)]
        public List<Link> Links { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class RelationshipDefinition {\n");
            sb.Append("  VarVersion: ").Append(VarVersion).Append("\n");
            sb.Append("  RelationshipDefinitionId: ").Append(RelationshipDefinitionId).Append("\n");
            sb.Append("  SourceEntityType: ").Append(SourceEntityType).Append("\n");
            sb.Append("  TargetEntityType: ").Append(TargetEntityType).Append("\n");
            sb.Append("  DisplayName: ").Append(DisplayName).Append("\n");
            sb.Append("  OutwardDescription: ").Append(OutwardDescription).Append("\n");
            sb.Append("  InwardDescription: ").Append(InwardDescription).Append("\n");
            sb.Append("  LifeTime: ").Append(LifeTime).Append("\n");
            sb.Append("  RelationshipCardinality: ").Append(RelationshipCardinality).Append("\n");
            sb.Append("  Links: ").Append(Links).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as RelationshipDefinition);
        }

        /// <summary>
        /// Returns true if RelationshipDefinition instances are equal
        /// </summary>
        /// <param name="input">Instance of RelationshipDefinition to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RelationshipDefinition input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.VarVersion == input.VarVersion ||
                    (this.VarVersion != null &&
                    this.VarVersion.Equals(input.VarVersion))
                ) && 
                (
                    this.RelationshipDefinitionId == input.RelationshipDefinitionId ||
                    (this.RelationshipDefinitionId != null &&
                    this.RelationshipDefinitionId.Equals(input.RelationshipDefinitionId))
                ) && 
                (
                    this.SourceEntityType == input.SourceEntityType ||
                    (this.SourceEntityType != null &&
                    this.SourceEntityType.Equals(input.SourceEntityType))
                ) && 
                (
                    this.TargetEntityType == input.TargetEntityType ||
                    (this.TargetEntityType != null &&
                    this.TargetEntityType.Equals(input.TargetEntityType))
                ) && 
                (
                    this.DisplayName == input.DisplayName ||
                    (this.DisplayName != null &&
                    this.DisplayName.Equals(input.DisplayName))
                ) && 
                (
                    this.OutwardDescription == input.OutwardDescription ||
                    (this.OutwardDescription != null &&
                    this.OutwardDescription.Equals(input.OutwardDescription))
                ) && 
                (
                    this.InwardDescription == input.InwardDescription ||
                    (this.InwardDescription != null &&
                    this.InwardDescription.Equals(input.InwardDescription))
                ) && 
                (
                    this.LifeTime == input.LifeTime ||
                    (this.LifeTime != null &&
                    this.LifeTime.Equals(input.LifeTime))
                ) && 
                (
                    this.RelationshipCardinality == input.RelationshipCardinality ||
                    (this.RelationshipCardinality != null &&
                    this.RelationshipCardinality.Equals(input.RelationshipCardinality))
                ) && 
                (
                    this.Links == input.Links ||
                    this.Links != null &&
                    input.Links != null &&
                    this.Links.SequenceEqual(input.Links)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.VarVersion != null)
                {
                    hashCode = (hashCode * 59) + this.VarVersion.GetHashCode();
                }
                if (this.RelationshipDefinitionId != null)
                {
                    hashCode = (hashCode * 59) + this.RelationshipDefinitionId.GetHashCode();
                }
                if (this.SourceEntityType != null)
                {
                    hashCode = (hashCode * 59) + this.SourceEntityType.GetHashCode();
                }
                if (this.TargetEntityType != null)
                {
                    hashCode = (hashCode * 59) + this.TargetEntityType.GetHashCode();
                }
                if (this.DisplayName != null)
                {
                    hashCode = (hashCode * 59) + this.DisplayName.GetHashCode();
                }
                if (this.OutwardDescription != null)
                {
                    hashCode = (hashCode * 59) + this.OutwardDescription.GetHashCode();
                }
                if (this.InwardDescription != null)
                {
                    hashCode = (hashCode * 59) + this.InwardDescription.GetHashCode();
                }
                if (this.LifeTime != null)
                {
                    hashCode = (hashCode * 59) + this.LifeTime.GetHashCode();
                }
                if (this.RelationshipCardinality != null)
                {
                    hashCode = (hashCode * 59) + this.RelationshipCardinality.GetHashCode();
                }
                if (this.Links != null)
                {
                    hashCode = (hashCode * 59) + this.Links.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // SourceEntityType (string) minLength
            if (this.SourceEntityType != null && this.SourceEntityType.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SourceEntityType, length must be greater than 1.", new [] { "SourceEntityType" });
            }

            // TargetEntityType (string) minLength
            if (this.TargetEntityType != null && this.TargetEntityType.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for TargetEntityType, length must be greater than 1.", new [] { "TargetEntityType" });
            }

            // DisplayName (string) maxLength
            if (this.DisplayName != null && this.DisplayName.Length > 512)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for DisplayName, length must be less than 512.", new [] { "DisplayName" });
            }

            // DisplayName (string) minLength
            if (this.DisplayName != null && this.DisplayName.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for DisplayName, length must be greater than 1.", new [] { "DisplayName" });
            }

            // DisplayName (string) pattern
            Regex regexDisplayName = new Regex(@"^[\s\S]*$", RegexOptions.CultureInvariant);
            if (false == regexDisplayName.Match(this.DisplayName).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for DisplayName, must match a pattern of " + regexDisplayName, new [] { "DisplayName" });
            }

            // OutwardDescription (string) maxLength
            if (this.OutwardDescription != null && this.OutwardDescription.Length > 512)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for OutwardDescription, length must be less than 512.", new [] { "OutwardDescription" });
            }

            // OutwardDescription (string) minLength
            if (this.OutwardDescription != null && this.OutwardDescription.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for OutwardDescription, length must be greater than 1.", new [] { "OutwardDescription" });
            }

            // OutwardDescription (string) pattern
            Regex regexOutwardDescription = new Regex(@"^[\s\S]*$", RegexOptions.CultureInvariant);
            if (false == regexOutwardDescription.Match(this.OutwardDescription).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for OutwardDescription, must match a pattern of " + regexOutwardDescription, new [] { "OutwardDescription" });
            }

            // InwardDescription (string) maxLength
            if (this.InwardDescription != null && this.InwardDescription.Length > 512)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for InwardDescription, length must be less than 512.", new [] { "InwardDescription" });
            }

            // InwardDescription (string) minLength
            if (this.InwardDescription != null && this.InwardDescription.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for InwardDescription, length must be greater than 1.", new [] { "InwardDescription" });
            }

            // InwardDescription (string) pattern
            Regex regexInwardDescription = new Regex(@"^[\s\S]*$", RegexOptions.CultureInvariant);
            if (false == regexInwardDescription.Match(this.InwardDescription).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for InwardDescription, must match a pattern of " + regexInwardDescription, new [] { "InwardDescription" });
            }

            // LifeTime (string) minLength
            if (this.LifeTime != null && this.LifeTime.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for LifeTime, length must be greater than 1.", new [] { "LifeTime" });
            }

            // RelationshipCardinality (string) minLength
            if (this.RelationshipCardinality != null && this.RelationshipCardinality.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for RelationshipCardinality, length must be greater than 1.", new [] { "RelationshipCardinality" });
            }

            yield break;
        }
    }
}
