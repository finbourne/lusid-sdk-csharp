/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Lusid.Sdk.Client.OpenAPIDateConverter;

namespace Lusid.Sdk.Model
{
    /// <summary>
    /// StagingRuleMatchCriteria
    /// </summary>
    [DataContract(Name = "StagingRuleMatchCriteria")]
    public partial class StagingRuleMatchCriteria : IEquatable<StagingRuleMatchCriteria>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="StagingRuleMatchCriteria" /> class.
        /// </summary>
        /// <param name="actionIn">actionIn.</param>
        /// <param name="requestingUser">requestingUser.</param>
        /// <param name="entityAttributes">entityAttributes.</param>
        /// <param name="changedAttributeNameIn">changedAttributeNameIn.</param>
        public StagingRuleMatchCriteria(List<string> actionIn = default(List<string>), string requestingUser = default(string), string entityAttributes = default(string), List<string> changedAttributeNameIn = default(List<string>))
        {
            this.ActionIn = actionIn;
            this.RequestingUser = requestingUser;
            this.EntityAttributes = entityAttributes;
            this.ChangedAttributeNameIn = changedAttributeNameIn;
        }

        /// <summary>
        /// Gets or Sets ActionIn
        /// </summary>
        [DataMember(Name = "actionIn", EmitDefaultValue = true)]
        public List<string> ActionIn { get; set; }

        /// <summary>
        /// Gets or Sets RequestingUser
        /// </summary>
        [DataMember(Name = "requestingUser", EmitDefaultValue = true)]
        public string RequestingUser { get; set; }

        /// <summary>
        /// Gets or Sets EntityAttributes
        /// </summary>
        [DataMember(Name = "entityAttributes", EmitDefaultValue = true)]
        public string EntityAttributes { get; set; }

        /// <summary>
        /// Gets or Sets ChangedAttributeNameIn
        /// </summary>
        [DataMember(Name = "changedAttributeNameIn", EmitDefaultValue = true)]
        public List<string> ChangedAttributeNameIn { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class StagingRuleMatchCriteria {\n");
            sb.Append("  ActionIn: ").Append(ActionIn).Append("\n");
            sb.Append("  RequestingUser: ").Append(RequestingUser).Append("\n");
            sb.Append("  EntityAttributes: ").Append(EntityAttributes).Append("\n");
            sb.Append("  ChangedAttributeNameIn: ").Append(ChangedAttributeNameIn).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as StagingRuleMatchCriteria);
        }

        /// <summary>
        /// Returns true if StagingRuleMatchCriteria instances are equal
        /// </summary>
        /// <param name="input">Instance of StagingRuleMatchCriteria to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(StagingRuleMatchCriteria input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.ActionIn == input.ActionIn ||
                    this.ActionIn != null &&
                    input.ActionIn != null &&
                    this.ActionIn.SequenceEqual(input.ActionIn)
                ) && 
                (
                    this.RequestingUser == input.RequestingUser ||
                    (this.RequestingUser != null &&
                    this.RequestingUser.Equals(input.RequestingUser))
                ) && 
                (
                    this.EntityAttributes == input.EntityAttributes ||
                    (this.EntityAttributes != null &&
                    this.EntityAttributes.Equals(input.EntityAttributes))
                ) && 
                (
                    this.ChangedAttributeNameIn == input.ChangedAttributeNameIn ||
                    this.ChangedAttributeNameIn != null &&
                    input.ChangedAttributeNameIn != null &&
                    this.ChangedAttributeNameIn.SequenceEqual(input.ChangedAttributeNameIn)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ActionIn != null)
                {
                    hashCode = (hashCode * 59) + this.ActionIn.GetHashCode();
                }
                if (this.RequestingUser != null)
                {
                    hashCode = (hashCode * 59) + this.RequestingUser.GetHashCode();
                }
                if (this.EntityAttributes != null)
                {
                    hashCode = (hashCode * 59) + this.EntityAttributes.GetHashCode();
                }
                if (this.ChangedAttributeNameIn != null)
                {
                    hashCode = (hashCode * 59) + this.ChangedAttributeNameIn.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // RequestingUser (string) maxLength
            if (this.RequestingUser != null && this.RequestingUser.Length > 16384)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for RequestingUser, length must be less than 16384.", new [] { "RequestingUser" });
            }

            // RequestingUser (string) minLength
            if (this.RequestingUser != null && this.RequestingUser.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for RequestingUser, length must be greater than 0.", new [] { "RequestingUser" });
            }

            // EntityAttributes (string) maxLength
            if (this.EntityAttributes != null && this.EntityAttributes.Length > 16384)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for EntityAttributes, length must be less than 16384.", new [] { "EntityAttributes" });
            }

            // EntityAttributes (string) minLength
            if (this.EntityAttributes != null && this.EntityAttributes.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for EntityAttributes, length must be greater than 0.", new [] { "EntityAttributes" });
            }

            yield break;
        }
    }
}
