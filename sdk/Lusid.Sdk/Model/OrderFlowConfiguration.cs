/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Lusid.Sdk.Client.OpenAPIDateConverter;

namespace Lusid.Sdk.Model
{
    /// <summary>
    /// OrderFlowConfiguration
    /// </summary>
    [DataContract(Name = "OrderFlowConfiguration")]
    public partial class OrderFlowConfiguration : IEquatable<OrderFlowConfiguration>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="OrderFlowConfiguration" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected OrderFlowConfiguration() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="OrderFlowConfiguration" /> class.
        /// </summary>
        /// <param name="includeEntityTypes">Controls whether Orders and Allocations orders are included in the Portfolio valuation.  Valid values are  None (to account for Transactions only), Allocations (to include Allocations and Transactions) and  OrdersAndAllocations (to include Orders, Allocations and Transactions). (required).</param>
        public OrderFlowConfiguration(string includeEntityTypes = default(string))
        {
            // to ensure "includeEntityTypes" is required (not null)
            if (includeEntityTypes == null)
            {
                throw new ArgumentNullException("includeEntityTypes is a required property for OrderFlowConfiguration and cannot be null");
            }
            this.IncludeEntityTypes = includeEntityTypes;
        }

        /// <summary>
        /// Controls whether Orders and Allocations orders are included in the Portfolio valuation.  Valid values are  None (to account for Transactions only), Allocations (to include Allocations and Transactions) and  OrdersAndAllocations (to include Orders, Allocations and Transactions).
        /// </summary>
        /// <value>Controls whether Orders and Allocations orders are included in the Portfolio valuation.  Valid values are  None (to account for Transactions only), Allocations (to include Allocations and Transactions) and  OrdersAndAllocations (to include Orders, Allocations and Transactions).</value>
        [DataMember(Name = "includeEntityTypes", IsRequired = true, EmitDefaultValue = true)]
        public string IncludeEntityTypes { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class OrderFlowConfiguration {\n");
            sb.Append("  IncludeEntityTypes: ").Append(IncludeEntityTypes).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as OrderFlowConfiguration);
        }

        /// <summary>
        /// Returns true if OrderFlowConfiguration instances are equal
        /// </summary>
        /// <param name="input">Instance of OrderFlowConfiguration to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OrderFlowConfiguration input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.IncludeEntityTypes == input.IncludeEntityTypes ||
                    (this.IncludeEntityTypes != null &&
                    this.IncludeEntityTypes.Equals(input.IncludeEntityTypes))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.IncludeEntityTypes != null)
                {
                    hashCode = (hashCode * 59) + this.IncludeEntityTypes.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // IncludeEntityTypes (string) minLength
            if (this.IncludeEntityTypes != null && this.IncludeEntityTypes.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for IncludeEntityTypes, length must be greater than 1.", new [] { "IncludeEntityTypes" });
            }

            yield break;
        }
    }
}
