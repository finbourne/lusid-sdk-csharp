/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Lusid.Sdk.Client.OpenAPIDateConverter;

namespace Lusid.Sdk.Model
{
    /// <summary>
    /// ShareClassDetails
    /// </summary>
    [DataContract(Name = "ShareClassDetails")]
    public partial class ShareClassDetails : IEquatable<ShareClassDetails>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ShareClassDetails" /> class.
        /// </summary>
        /// <param name="lusidInstrumentId">LUSID&#39;s internal unique instrument identifier, resolved from the share class&#39; instrument identifiers.</param>
        /// <param name="instrumentScope">The scope in which the share class instrument lies..</param>
        /// <param name="domCurrency">The domestic currency of the share class instrument.</param>
        public ShareClassDetails(string lusidInstrumentId = default(string), string instrumentScope = default(string), string domCurrency = default(string))
        {
            this.LusidInstrumentId = lusidInstrumentId;
            this.InstrumentScope = instrumentScope;
            this.DomCurrency = domCurrency;
        }

        /// <summary>
        /// LUSID&#39;s internal unique instrument identifier, resolved from the share class&#39; instrument identifiers
        /// </summary>
        /// <value>LUSID&#39;s internal unique instrument identifier, resolved from the share class&#39; instrument identifiers</value>
        [DataMember(Name = "lusidInstrumentId", EmitDefaultValue = true)]
        public string LusidInstrumentId { get; set; }

        /// <summary>
        /// The scope in which the share class instrument lies.
        /// </summary>
        /// <value>The scope in which the share class instrument lies.</value>
        [DataMember(Name = "instrumentScope", EmitDefaultValue = true)]
        public string InstrumentScope { get; set; }

        /// <summary>
        /// The domestic currency of the share class instrument
        /// </summary>
        /// <value>The domestic currency of the share class instrument</value>
        [DataMember(Name = "domCurrency", EmitDefaultValue = true)]
        public string DomCurrency { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ShareClassDetails {\n");
            sb.Append("  LusidInstrumentId: ").Append(LusidInstrumentId).Append("\n");
            sb.Append("  InstrumentScope: ").Append(InstrumentScope).Append("\n");
            sb.Append("  DomCurrency: ").Append(DomCurrency).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ShareClassDetails);
        }

        /// <summary>
        /// Returns true if ShareClassDetails instances are equal
        /// </summary>
        /// <param name="input">Instance of ShareClassDetails to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ShareClassDetails input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.LusidInstrumentId == input.LusidInstrumentId ||
                    (this.LusidInstrumentId != null &&
                    this.LusidInstrumentId.Equals(input.LusidInstrumentId))
                ) && 
                (
                    this.InstrumentScope == input.InstrumentScope ||
                    (this.InstrumentScope != null &&
                    this.InstrumentScope.Equals(input.InstrumentScope))
                ) && 
                (
                    this.DomCurrency == input.DomCurrency ||
                    (this.DomCurrency != null &&
                    this.DomCurrency.Equals(input.DomCurrency))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.LusidInstrumentId != null)
                {
                    hashCode = (hashCode * 59) + this.LusidInstrumentId.GetHashCode();
                }
                if (this.InstrumentScope != null)
                {
                    hashCode = (hashCode * 59) + this.InstrumentScope.GetHashCode();
                }
                if (this.DomCurrency != null)
                {
                    hashCode = (hashCode * 59) + this.DomCurrency.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // LusidInstrumentId (string) maxLength
            if (this.LusidInstrumentId != null && this.LusidInstrumentId.Length > 64)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for LusidInstrumentId, length must be less than 64.", new [] { "LusidInstrumentId" });
            }

            // LusidInstrumentId (string) minLength
            if (this.LusidInstrumentId != null && this.LusidInstrumentId.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for LusidInstrumentId, length must be greater than 1.", new [] { "LusidInstrumentId" });
            }

            // LusidInstrumentId (string) pattern
            Regex regexLusidInstrumentId = new Regex(@"^[a-zA-Z0-9\-_]+$", RegexOptions.CultureInvariant);
            if (false == regexLusidInstrumentId.Match(this.LusidInstrumentId).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for LusidInstrumentId, must match a pattern of " + regexLusidInstrumentId, new [] { "LusidInstrumentId" });
            }

            // InstrumentScope (string) maxLength
            if (this.InstrumentScope != null && this.InstrumentScope.Length > 64)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for InstrumentScope, length must be less than 64.", new [] { "InstrumentScope" });
            }

            // InstrumentScope (string) minLength
            if (this.InstrumentScope != null && this.InstrumentScope.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for InstrumentScope, length must be greater than 1.", new [] { "InstrumentScope" });
            }

            // InstrumentScope (string) pattern
            Regex regexInstrumentScope = new Regex(@"^[a-zA-Z0-9\-_]+$", RegexOptions.CultureInvariant);
            if (false == regexInstrumentScope.Match(this.InstrumentScope).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for InstrumentScope, must match a pattern of " + regexInstrumentScope, new [] { "InstrumentScope" });
            }

            yield break;
        }
    }
}
