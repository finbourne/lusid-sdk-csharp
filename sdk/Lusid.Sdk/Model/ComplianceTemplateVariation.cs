/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Lusid.Sdk.Client.OpenAPIDateConverter;

namespace Lusid.Sdk.Model
{
    /// <summary>
    /// ComplianceTemplateVariation
    /// </summary>
    [DataContract(Name = "ComplianceTemplateVariation")]
    public partial class ComplianceTemplateVariation : IEquatable<ComplianceTemplateVariation>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ComplianceTemplateVariation" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ComplianceTemplateVariation() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ComplianceTemplateVariation" /> class.
        /// </summary>
        /// <param name="label">Label of a Compliance Template Variation (required).</param>
        /// <param name="description">The description of the Compliance Template Variation (required).</param>
        /// <param name="requiredParameters">A parameter required by a Compliance Template Variation (required).</param>
        /// <param name="properties">Properties associated with the Compliance Template Variation (required).</param>
        /// <param name="acceptedAddressKeys">acceptedAddressKeys (required).</param>
        /// <param name="steps">The steps expressed in this template, with their required parameters (required).</param>
        /// <param name="referencedGroupLabel">The label of a given referenced group in a Compliance Rule Template Variation.</param>
        public ComplianceTemplateVariation(string label = default(string), string description = default(string), List<ComplianceTemplateParameter> requiredParameters = default(List<ComplianceTemplateParameter>), Dictionary<string, PerpetualProperty> properties = default(Dictionary<string, PerpetualProperty>), ResourceId acceptedAddressKeys = default(ResourceId), List<ComplianceStep> steps = default(List<ComplianceStep>), string referencedGroupLabel = default(string))
        {
            // to ensure "label" is required (not null)
            if (label == null)
            {
                throw new ArgumentNullException("label is a required property for ComplianceTemplateVariation and cannot be null");
            }
            this.Label = label;
            // to ensure "description" is required (not null)
            if (description == null)
            {
                throw new ArgumentNullException("description is a required property for ComplianceTemplateVariation and cannot be null");
            }
            this.Description = description;
            // to ensure "requiredParameters" is required (not null)
            if (requiredParameters == null)
            {
                throw new ArgumentNullException("requiredParameters is a required property for ComplianceTemplateVariation and cannot be null");
            }
            this.RequiredParameters = requiredParameters;
            // to ensure "properties" is required (not null)
            if (properties == null)
            {
                throw new ArgumentNullException("properties is a required property for ComplianceTemplateVariation and cannot be null");
            }
            this.Properties = properties;
            // to ensure "acceptedAddressKeys" is required (not null)
            if (acceptedAddressKeys == null)
            {
                throw new ArgumentNullException("acceptedAddressKeys is a required property for ComplianceTemplateVariation and cannot be null");
            }
            this.AcceptedAddressKeys = acceptedAddressKeys;
            // to ensure "steps" is required (not null)
            if (steps == null)
            {
                throw new ArgumentNullException("steps is a required property for ComplianceTemplateVariation and cannot be null");
            }
            this.Steps = steps;
            this.ReferencedGroupLabel = referencedGroupLabel;
        }

        /// <summary>
        /// Label of a Compliance Template Variation
        /// </summary>
        /// <value>Label of a Compliance Template Variation</value>
        [DataMember(Name = "label", IsRequired = true, EmitDefaultValue = true)]
        public string Label { get; set; }

        /// <summary>
        /// The description of the Compliance Template Variation
        /// </summary>
        /// <value>The description of the Compliance Template Variation</value>
        [DataMember(Name = "description", IsRequired = true, EmitDefaultValue = true)]
        public string Description { get; set; }

        /// <summary>
        /// A parameter required by a Compliance Template Variation
        /// </summary>
        /// <value>A parameter required by a Compliance Template Variation</value>
        [DataMember(Name = "requiredParameters", IsRequired = true, EmitDefaultValue = true)]
        public List<ComplianceTemplateParameter> RequiredParameters { get; set; }

        /// <summary>
        /// Properties associated with the Compliance Template Variation
        /// </summary>
        /// <value>Properties associated with the Compliance Template Variation</value>
        [DataMember(Name = "properties", IsRequired = true, EmitDefaultValue = true)]
        public Dictionary<string, PerpetualProperty> Properties { get; set; }

        /// <summary>
        /// Gets or Sets AcceptedAddressKeys
        /// </summary>
        [DataMember(Name = "acceptedAddressKeys", IsRequired = true, EmitDefaultValue = true)]
        public ResourceId AcceptedAddressKeys { get; set; }

        /// <summary>
        /// The steps expressed in this template, with their required parameters
        /// </summary>
        /// <value>The steps expressed in this template, with their required parameters</value>
        [DataMember(Name = "steps", IsRequired = true, EmitDefaultValue = true)]
        public List<ComplianceStep> Steps { get; set; }

        /// <summary>
        /// The label of a given referenced group in a Compliance Rule Template Variation
        /// </summary>
        /// <value>The label of a given referenced group in a Compliance Rule Template Variation</value>
        [DataMember(Name = "referencedGroupLabel", EmitDefaultValue = true)]
        public string ReferencedGroupLabel { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ComplianceTemplateVariation {\n");
            sb.Append("  Label: ").Append(Label).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  RequiredParameters: ").Append(RequiredParameters).Append("\n");
            sb.Append("  Properties: ").Append(Properties).Append("\n");
            sb.Append("  AcceptedAddressKeys: ").Append(AcceptedAddressKeys).Append("\n");
            sb.Append("  Steps: ").Append(Steps).Append("\n");
            sb.Append("  ReferencedGroupLabel: ").Append(ReferencedGroupLabel).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ComplianceTemplateVariation);
        }

        /// <summary>
        /// Returns true if ComplianceTemplateVariation instances are equal
        /// </summary>
        /// <param name="input">Instance of ComplianceTemplateVariation to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ComplianceTemplateVariation input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Label == input.Label ||
                    (this.Label != null &&
                    this.Label.Equals(input.Label))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.RequiredParameters == input.RequiredParameters ||
                    this.RequiredParameters != null &&
                    input.RequiredParameters != null &&
                    this.RequiredParameters.SequenceEqual(input.RequiredParameters)
                ) && 
                (
                    this.Properties == input.Properties ||
                    this.Properties != null &&
                    input.Properties != null &&
                    this.Properties.SequenceEqual(input.Properties)
                ) && 
                (
                    this.AcceptedAddressKeys == input.AcceptedAddressKeys ||
                    (this.AcceptedAddressKeys != null &&
                    this.AcceptedAddressKeys.Equals(input.AcceptedAddressKeys))
                ) && 
                (
                    this.Steps == input.Steps ||
                    this.Steps != null &&
                    input.Steps != null &&
                    this.Steps.SequenceEqual(input.Steps)
                ) && 
                (
                    this.ReferencedGroupLabel == input.ReferencedGroupLabel ||
                    (this.ReferencedGroupLabel != null &&
                    this.ReferencedGroupLabel.Equals(input.ReferencedGroupLabel))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Label != null)
                {
                    hashCode = (hashCode * 59) + this.Label.GetHashCode();
                }
                if (this.Description != null)
                {
                    hashCode = (hashCode * 59) + this.Description.GetHashCode();
                }
                if (this.RequiredParameters != null)
                {
                    hashCode = (hashCode * 59) + this.RequiredParameters.GetHashCode();
                }
                if (this.Properties != null)
                {
                    hashCode = (hashCode * 59) + this.Properties.GetHashCode();
                }
                if (this.AcceptedAddressKeys != null)
                {
                    hashCode = (hashCode * 59) + this.AcceptedAddressKeys.GetHashCode();
                }
                if (this.Steps != null)
                {
                    hashCode = (hashCode * 59) + this.Steps.GetHashCode();
                }
                if (this.ReferencedGroupLabel != null)
                {
                    hashCode = (hashCode * 59) + this.ReferencedGroupLabel.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Label (string) minLength
            if (this.Label != null && this.Label.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Label, length must be greater than 1.", new [] { "Label" });
            }

            // Description (string) minLength
            if (this.Description != null && this.Description.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Description, length must be greater than 1.", new [] { "Description" });
            }

            // ReferencedGroupLabel (string) maxLength
            if (this.ReferencedGroupLabel != null && this.ReferencedGroupLabel.Length > 64)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ReferencedGroupLabel, length must be less than 64.", new [] { "ReferencedGroupLabel" });
            }

            // ReferencedGroupLabel (string) minLength
            if (this.ReferencedGroupLabel != null && this.ReferencedGroupLabel.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ReferencedGroupLabel, length must be greater than 1.", new [] { "ReferencedGroupLabel" });
            }

            yield break;
        }
    }
}
