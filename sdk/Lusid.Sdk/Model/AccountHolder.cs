/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Lusid.Sdk.Client.OpenAPIDateConverter;

namespace Lusid.Sdk.Model
{
    /// <summary>
    /// An Account Holder of an Investment Account.
    /// </summary>
    [DataContract(Name = "AccountHolder")]
    public partial class AccountHolder : IEquatable<AccountHolder>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AccountHolder" /> class.
        /// </summary>
        /// <param name="key">A client-defined key used to identify the Account Holder, unique within the Investment Account.</param>
        /// <param name="scope">The scope in which the Investor Record lies..</param>
        /// <param name="identifiers">Single Account Holder identifier that should target the desired Investor Record..</param>
        /// <param name="entityUniqueId">The unique InvestorRecord entity identifier.</param>
        /// <param name="investorRecord">investorRecord.</param>
        public AccountHolder(string key = default(string), string scope = default(string), Dictionary<string, Property> identifiers = default(Dictionary<string, Property>), string entityUniqueId = default(string), InvestorRecord investorRecord = default(InvestorRecord))
        {
            this.Key = key;
            this.Scope = scope;
            this.Identifiers = identifiers;
            this.EntityUniqueId = entityUniqueId;
            this.InvestorRecord = investorRecord;
        }

        /// <summary>
        /// A client-defined key used to identify the Account Holder, unique within the Investment Account
        /// </summary>
        /// <value>A client-defined key used to identify the Account Holder, unique within the Investment Account</value>
        [DataMember(Name = "key", EmitDefaultValue = true)]
        public string Key { get; set; }

        /// <summary>
        /// The scope in which the Investor Record lies.
        /// </summary>
        /// <value>The scope in which the Investor Record lies.</value>
        [DataMember(Name = "scope", EmitDefaultValue = true)]
        public string Scope { get; set; }

        /// <summary>
        /// Single Account Holder identifier that should target the desired Investor Record.
        /// </summary>
        /// <value>Single Account Holder identifier that should target the desired Investor Record.</value>
        [DataMember(Name = "identifiers", EmitDefaultValue = true)]
        public Dictionary<string, Property> Identifiers { get; set; }

        /// <summary>
        /// The unique InvestorRecord entity identifier
        /// </summary>
        /// <value>The unique InvestorRecord entity identifier</value>
        [DataMember(Name = "entityUniqueId", EmitDefaultValue = true)]
        public string EntityUniqueId { get; set; }

        /// <summary>
        /// Gets or Sets InvestorRecord
        /// </summary>
        [DataMember(Name = "investorRecord", EmitDefaultValue = false)]
        public InvestorRecord InvestorRecord { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AccountHolder {\n");
            sb.Append("  Key: ").Append(Key).Append("\n");
            sb.Append("  Scope: ").Append(Scope).Append("\n");
            sb.Append("  Identifiers: ").Append(Identifiers).Append("\n");
            sb.Append("  EntityUniqueId: ").Append(EntityUniqueId).Append("\n");
            sb.Append("  InvestorRecord: ").Append(InvestorRecord).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AccountHolder);
        }

        /// <summary>
        /// Returns true if AccountHolder instances are equal
        /// </summary>
        /// <param name="input">Instance of AccountHolder to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AccountHolder input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Key == input.Key ||
                    (this.Key != null &&
                    this.Key.Equals(input.Key))
                ) && 
                (
                    this.Scope == input.Scope ||
                    (this.Scope != null &&
                    this.Scope.Equals(input.Scope))
                ) && 
                (
                    this.Identifiers == input.Identifiers ||
                    this.Identifiers != null &&
                    input.Identifiers != null &&
                    this.Identifiers.SequenceEqual(input.Identifiers)
                ) && 
                (
                    this.EntityUniqueId == input.EntityUniqueId ||
                    (this.EntityUniqueId != null &&
                    this.EntityUniqueId.Equals(input.EntityUniqueId))
                ) && 
                (
                    this.InvestorRecord == input.InvestorRecord ||
                    (this.InvestorRecord != null &&
                    this.InvestorRecord.Equals(input.InvestorRecord))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Key != null)
                {
                    hashCode = (hashCode * 59) + this.Key.GetHashCode();
                }
                if (this.Scope != null)
                {
                    hashCode = (hashCode * 59) + this.Scope.GetHashCode();
                }
                if (this.Identifiers != null)
                {
                    hashCode = (hashCode * 59) + this.Identifiers.GetHashCode();
                }
                if (this.EntityUniqueId != null)
                {
                    hashCode = (hashCode * 59) + this.EntityUniqueId.GetHashCode();
                }
                if (this.InvestorRecord != null)
                {
                    hashCode = (hashCode * 59) + this.InvestorRecord.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
