/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Lusid.Sdk.Client.OpenAPIDateConverter;

namespace Lusid.Sdk.Model
{
    /// <summary>
    /// A Posting rule
    /// </summary>
    [DataContract(Name = "PostingModuleRule")]
    public partial class PostingModuleRule : IEquatable<PostingModuleRule>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PostingModuleRule" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected PostingModuleRule() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="PostingModuleRule" /> class.
        /// </summary>
        /// <param name="ruleId">The identifier for the Posting Rule. (required).</param>
        /// <param name="generalLedgerAccountCode">The general ledger account to post the Activity credit or debit to. (required).</param>
        /// <param name="ruleFilter">The filter syntax for the Posting Rule. See https://support.lusid.com/knowledgebase/article/KA-02140 for more information on filter syntax. (required).</param>
        public PostingModuleRule(string ruleId = default(string), string generalLedgerAccountCode = default(string), string ruleFilter = default(string))
        {
            // to ensure "ruleId" is required (not null)
            if (ruleId == null)
            {
                throw new ArgumentNullException("ruleId is a required property for PostingModuleRule and cannot be null");
            }
            this.RuleId = ruleId;
            // to ensure "generalLedgerAccountCode" is required (not null)
            if (generalLedgerAccountCode == null)
            {
                throw new ArgumentNullException("generalLedgerAccountCode is a required property for PostingModuleRule and cannot be null");
            }
            this.GeneralLedgerAccountCode = generalLedgerAccountCode;
            // to ensure "ruleFilter" is required (not null)
            if (ruleFilter == null)
            {
                throw new ArgumentNullException("ruleFilter is a required property for PostingModuleRule and cannot be null");
            }
            this.RuleFilter = ruleFilter;
        }

        /// <summary>
        /// The identifier for the Posting Rule.
        /// </summary>
        /// <value>The identifier for the Posting Rule.</value>
        [DataMember(Name = "ruleId", IsRequired = true, EmitDefaultValue = true)]
        public string RuleId { get; set; }

        /// <summary>
        /// The general ledger account to post the Activity credit or debit to.
        /// </summary>
        /// <value>The general ledger account to post the Activity credit or debit to.</value>
        [DataMember(Name = "generalLedgerAccountCode", IsRequired = true, EmitDefaultValue = true)]
        public string GeneralLedgerAccountCode { get; set; }

        /// <summary>
        /// The filter syntax for the Posting Rule. See https://support.lusid.com/knowledgebase/article/KA-02140 for more information on filter syntax.
        /// </summary>
        /// <value>The filter syntax for the Posting Rule. See https://support.lusid.com/knowledgebase/article/KA-02140 for more information on filter syntax.</value>
        [DataMember(Name = "ruleFilter", IsRequired = true, EmitDefaultValue = true)]
        public string RuleFilter { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PostingModuleRule {\n");
            sb.Append("  RuleId: ").Append(RuleId).Append("\n");
            sb.Append("  GeneralLedgerAccountCode: ").Append(GeneralLedgerAccountCode).Append("\n");
            sb.Append("  RuleFilter: ").Append(RuleFilter).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PostingModuleRule);
        }

        /// <summary>
        /// Returns true if PostingModuleRule instances are equal
        /// </summary>
        /// <param name="input">Instance of PostingModuleRule to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PostingModuleRule input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.RuleId == input.RuleId ||
                    (this.RuleId != null &&
                    this.RuleId.Equals(input.RuleId))
                ) && 
                (
                    this.GeneralLedgerAccountCode == input.GeneralLedgerAccountCode ||
                    (this.GeneralLedgerAccountCode != null &&
                    this.GeneralLedgerAccountCode.Equals(input.GeneralLedgerAccountCode))
                ) && 
                (
                    this.RuleFilter == input.RuleFilter ||
                    (this.RuleFilter != null &&
                    this.RuleFilter.Equals(input.RuleFilter))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.RuleId != null)
                {
                    hashCode = (hashCode * 59) + this.RuleId.GetHashCode();
                }
                if (this.GeneralLedgerAccountCode != null)
                {
                    hashCode = (hashCode * 59) + this.GeneralLedgerAccountCode.GetHashCode();
                }
                if (this.RuleFilter != null)
                {
                    hashCode = (hashCode * 59) + this.RuleFilter.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // RuleId (string) maxLength
            if (this.RuleId != null && this.RuleId.Length > 64)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for RuleId, length must be less than 64.", new [] { "RuleId" });
            }

            // RuleId (string) minLength
            if (this.RuleId != null && this.RuleId.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for RuleId, length must be greater than 1.", new [] { "RuleId" });
            }

            // RuleId (string) pattern
            Regex regexRuleId = new Regex(@"^[a-zA-Z0-9\-_]+$", RegexOptions.CultureInvariant);
            if (false == regexRuleId.Match(this.RuleId).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for RuleId, must match a pattern of " + regexRuleId, new [] { "RuleId" });
            }

            // GeneralLedgerAccountCode (string) maxLength
            if (this.GeneralLedgerAccountCode != null && this.GeneralLedgerAccountCode.Length > 512)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for GeneralLedgerAccountCode, length must be less than 512.", new [] { "GeneralLedgerAccountCode" });
            }

            // GeneralLedgerAccountCode (string) minLength
            if (this.GeneralLedgerAccountCode != null && this.GeneralLedgerAccountCode.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for GeneralLedgerAccountCode, length must be greater than 1.", new [] { "GeneralLedgerAccountCode" });
            }

            // GeneralLedgerAccountCode (string) pattern
            Regex regexGeneralLedgerAccountCode = new Regex(@"^[\s\S]*$", RegexOptions.CultureInvariant);
            if (false == regexGeneralLedgerAccountCode.Match(this.GeneralLedgerAccountCode).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for GeneralLedgerAccountCode, must match a pattern of " + regexGeneralLedgerAccountCode, new [] { "GeneralLedgerAccountCode" });
            }

            // RuleFilter (string) maxLength
            if (this.RuleFilter != null && this.RuleFilter.Length > 16384)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for RuleFilter, length must be less than 16384.", new [] { "RuleFilter" });
            }

            // RuleFilter (string) minLength
            if (this.RuleFilter != null && this.RuleFilter.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for RuleFilter, length must be greater than 1.", new [] { "RuleFilter" });
            }

            // RuleFilter (string) pattern
            Regex regexRuleFilter = new Regex(@"^[\s\S]*$", RegexOptions.CultureInvariant);
            if (false == regexRuleFilter.Match(this.RuleFilter).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for RuleFilter, must match a pattern of " + regexRuleFilter, new [] { "RuleFilter" });
            }

            yield break;
        }
    }
}
