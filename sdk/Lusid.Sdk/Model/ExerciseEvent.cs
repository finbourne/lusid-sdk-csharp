/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using JsonSubTypes;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Lusid.Sdk.Client.OpenAPIDateConverter;

namespace Lusid.Sdk.Model
{
    /// <summary>
    /// Definition of an exercise event.  This is an event that occurs on transformation of an instrument owing to exercise. e.g. an option of  some type into its underlying.
    /// </summary>
    [DataContract(Name = "ExerciseEvent")]
    [JsonConverter(typeof(JsonSubtypes), "InstrumentEventType")]
    public partial class ExerciseEvent : InstrumentEvent, IEquatable<ExerciseEvent>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ExerciseEvent" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ExerciseEvent() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ExerciseEvent" /> class.
        /// </summary>
        /// <param name="instrument">instrument (required).</param>
        /// <param name="anchorDate">The date the exercise window starts, or point it takes effect on. (required).</param>
        /// <param name="instrumentEventType">The Type of Event. The available values are: TransitionEvent, InformationalEvent, OpenEvent, CloseEvent, StockSplitEvent, BondDefaultEvent, CashDividendEvent, AmortisationEvent, CashFlowEvent, ExerciseEvent, ResetEvent, TriggerEvent, RawVendorEvent, InformationalErrorEvent, BondCouponEvent, DividendReinvestmentEvent, AccumulationEvent, BondPrincipalEvent, DividendOptionEvent, MaturityEvent, FxForwardSettlementEvent, ExpiryEvent, ScripDividendEvent, StockDividendEvent, ReverseStockSplitEvent, CapitalDistributionEvent, SpinOffEvent, MergerEvent, FutureExpiryEvent, SwapCashFlowEvent, SwapPrincipalEvent, CreditPremiumCashFlowEvent, CdsCreditEvent, CdxCreditEvent, MbsCouponEvent, MbsPrincipalEvent, BonusIssueEvent, MbsPrincipalWriteOffEvent, MbsInterestDeferralEvent, MbsInterestShortfallEvent, TenderEvent, CallOnIntermediateSecuritiesEvent, IntermediateSecuritiesDistributionEvent, OptionExercisePhysicalEvent, ProtectionPayoutCashFlowEvent (required) (default to &quot;ExerciseEvent&quot;).</param>
        public ExerciseEvent(LusidInstrument instrument = default(LusidInstrument), DateTimeOffset anchorDate = default(DateTimeOffset), InstrumentEventTypeEnum instrumentEventType = default(InstrumentEventTypeEnum)) : base(instrumentEventType)
        {
            // to ensure "instrument" is required (not null)
            if (instrument == null)
            {
                throw new ArgumentNullException("instrument is a required property for ExerciseEvent and cannot be null");
            }
            this.Instrument = instrument;
            this.AnchorDate = anchorDate;
        }

        /// <summary>
        /// Gets or Sets Instrument
        /// </summary>
        [DataMember(Name = "instrument", IsRequired = true, EmitDefaultValue = true)]
        public LusidInstrument Instrument { get; set; }

        /// <summary>
        /// The date the exercise window starts, or point it takes effect on.
        /// </summary>
        /// <value>The date the exercise window starts, or point it takes effect on.</value>
        [DataMember(Name = "anchorDate", IsRequired = true, EmitDefaultValue = true)]
        public DateTimeOffset AnchorDate { get; set; }

        /// <summary>
        /// The date the exercise window ends, or point it takes effect on.
        /// </summary>
        /// <value>The date the exercise window ends, or point it takes effect on.</value>
        [DataMember(Name = "eventWindowEnd", EmitDefaultValue = false)]
        public DateTimeOffset EventWindowEnd { get; private set; }

        /// <summary>
        /// Returns false as EventWindowEnd should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeEventWindowEnd()
        {
            return false;
        }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ExerciseEvent {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  Instrument: ").Append(Instrument).Append("\n");
            sb.Append("  AnchorDate: ").Append(AnchorDate).Append("\n");
            sb.Append("  EventWindowEnd: ").Append(EventWindowEnd).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ExerciseEvent);
        }

        /// <summary>
        /// Returns true if ExerciseEvent instances are equal
        /// </summary>
        /// <param name="input">Instance of ExerciseEvent to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ExerciseEvent input)
        {
            if (input == null)
            {
                return false;
            }
            return base.Equals(input) && 
                (
                    this.Instrument == input.Instrument ||
                    (this.Instrument != null &&
                    this.Instrument.Equals(input.Instrument))
                ) && base.Equals(input) && 
                (
                    this.AnchorDate == input.AnchorDate ||
                    (this.AnchorDate != null &&
                    this.AnchorDate.Equals(input.AnchorDate))
                ) && base.Equals(input) && 
                (
                    this.EventWindowEnd == input.EventWindowEnd ||
                    (this.EventWindowEnd != null &&
                    this.EventWindowEnd.Equals(input.EventWindowEnd))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = base.GetHashCode();
                if (this.Instrument != null)
                {
                    hashCode = (hashCode * 59) + this.Instrument.GetHashCode();
                }
                if (this.AnchorDate != null)
                {
                    hashCode = (hashCode * 59) + this.AnchorDate.GetHashCode();
                }
                if (this.EventWindowEnd != null)
                {
                    hashCode = (hashCode * 59) + this.EventWindowEnd.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            return this.BaseValidate(validationContext);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        protected IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> BaseValidate(ValidationContext validationContext)
        {
            foreach (var x in base.BaseValidate(validationContext))
            {
                yield return x;
            }
            yield break;
        }
    }
}
