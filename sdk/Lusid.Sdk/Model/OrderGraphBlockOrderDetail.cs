/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Lusid.Sdk.Client.OpenAPIDateConverter;

namespace Lusid.Sdk.Model
{
    /// <summary>
    /// OrderGraphBlockOrderDetail
    /// </summary>
    [DataContract(Name = "OrderGraphBlockOrderDetail")]
    public partial class OrderGraphBlockOrderDetail : IEquatable<OrderGraphBlockOrderDetail>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="OrderGraphBlockOrderDetail" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected OrderGraphBlockOrderDetail() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="OrderGraphBlockOrderDetail" /> class.
        /// </summary>
        /// <param name="id">id (required).</param>
        /// <param name="complianceState">The compliance state of this order. Possible values are &#39;Pending&#39;, &#39;Failed&#39;, &#39;Manually approved&#39;, &#39;Passed&#39; and &#39;Warning&#39;. (required).</param>
        /// <param name="approvalState">The approval state of this order. Possible values are &#39;Pending&#39;, &#39;Rejected&#39; and &#39;Approved&#39;. (required).</param>
        /// <param name="portfolioId">portfolioId.</param>
        /// <param name="portfolioName">The name of the order&#39;s referenced Portfolio..</param>
        /// <param name="orderApprovalTaskId">The task id associated with the approval state of the order..</param>
        /// <param name="orderApprovalTaskDefinitionId">orderApprovalTaskDefinitionId.</param>
        public OrderGraphBlockOrderDetail(ResourceId id = default(ResourceId), string complianceState = default(string), string approvalState = default(string), ResourceId portfolioId = default(ResourceId), string portfolioName = default(string), string orderApprovalTaskId = default(string), ResourceId orderApprovalTaskDefinitionId = default(ResourceId))
        {
            // to ensure "id" is required (not null)
            if (id == null)
            {
                throw new ArgumentNullException("id is a required property for OrderGraphBlockOrderDetail and cannot be null");
            }
            this.Id = id;
            // to ensure "complianceState" is required (not null)
            if (complianceState == null)
            {
                throw new ArgumentNullException("complianceState is a required property for OrderGraphBlockOrderDetail and cannot be null");
            }
            this.ComplianceState = complianceState;
            // to ensure "approvalState" is required (not null)
            if (approvalState == null)
            {
                throw new ArgumentNullException("approvalState is a required property for OrderGraphBlockOrderDetail and cannot be null");
            }
            this.ApprovalState = approvalState;
            this.PortfolioId = portfolioId;
            this.PortfolioName = portfolioName;
            this.OrderApprovalTaskId = orderApprovalTaskId;
            this.OrderApprovalTaskDefinitionId = orderApprovalTaskDefinitionId;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = true)]
        public ResourceId Id { get; set; }

        /// <summary>
        /// The compliance state of this order. Possible values are &#39;Pending&#39;, &#39;Failed&#39;, &#39;Manually approved&#39;, &#39;Passed&#39; and &#39;Warning&#39;.
        /// </summary>
        /// <value>The compliance state of this order. Possible values are &#39;Pending&#39;, &#39;Failed&#39;, &#39;Manually approved&#39;, &#39;Passed&#39; and &#39;Warning&#39;.</value>
        [DataMember(Name = "complianceState", IsRequired = true, EmitDefaultValue = true)]
        public string ComplianceState { get; set; }

        /// <summary>
        /// The approval state of this order. Possible values are &#39;Pending&#39;, &#39;Rejected&#39; and &#39;Approved&#39;.
        /// </summary>
        /// <value>The approval state of this order. Possible values are &#39;Pending&#39;, &#39;Rejected&#39; and &#39;Approved&#39;.</value>
        [DataMember(Name = "approvalState", IsRequired = true, EmitDefaultValue = true)]
        public string ApprovalState { get; set; }

        /// <summary>
        /// Gets or Sets PortfolioId
        /// </summary>
        [DataMember(Name = "portfolioId", EmitDefaultValue = false)]
        public ResourceId PortfolioId { get; set; }

        /// <summary>
        /// The name of the order&#39;s referenced Portfolio.
        /// </summary>
        /// <value>The name of the order&#39;s referenced Portfolio.</value>
        [DataMember(Name = "portfolioName", EmitDefaultValue = true)]
        public string PortfolioName { get; set; }

        /// <summary>
        /// The task id associated with the approval state of the order.
        /// </summary>
        /// <value>The task id associated with the approval state of the order.</value>
        [DataMember(Name = "orderApprovalTaskId", EmitDefaultValue = true)]
        public string OrderApprovalTaskId { get; set; }

        /// <summary>
        /// Gets or Sets OrderApprovalTaskDefinitionId
        /// </summary>
        [DataMember(Name = "orderApprovalTaskDefinitionId", EmitDefaultValue = false)]
        public ResourceId OrderApprovalTaskDefinitionId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class OrderGraphBlockOrderDetail {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  ComplianceState: ").Append(ComplianceState).Append("\n");
            sb.Append("  ApprovalState: ").Append(ApprovalState).Append("\n");
            sb.Append("  PortfolioId: ").Append(PortfolioId).Append("\n");
            sb.Append("  PortfolioName: ").Append(PortfolioName).Append("\n");
            sb.Append("  OrderApprovalTaskId: ").Append(OrderApprovalTaskId).Append("\n");
            sb.Append("  OrderApprovalTaskDefinitionId: ").Append(OrderApprovalTaskDefinitionId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as OrderGraphBlockOrderDetail);
        }

        /// <summary>
        /// Returns true if OrderGraphBlockOrderDetail instances are equal
        /// </summary>
        /// <param name="input">Instance of OrderGraphBlockOrderDetail to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OrderGraphBlockOrderDetail input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.ComplianceState == input.ComplianceState ||
                    (this.ComplianceState != null &&
                    this.ComplianceState.Equals(input.ComplianceState))
                ) && 
                (
                    this.ApprovalState == input.ApprovalState ||
                    (this.ApprovalState != null &&
                    this.ApprovalState.Equals(input.ApprovalState))
                ) && 
                (
                    this.PortfolioId == input.PortfolioId ||
                    (this.PortfolioId != null &&
                    this.PortfolioId.Equals(input.PortfolioId))
                ) && 
                (
                    this.PortfolioName == input.PortfolioName ||
                    (this.PortfolioName != null &&
                    this.PortfolioName.Equals(input.PortfolioName))
                ) && 
                (
                    this.OrderApprovalTaskId == input.OrderApprovalTaskId ||
                    (this.OrderApprovalTaskId != null &&
                    this.OrderApprovalTaskId.Equals(input.OrderApprovalTaskId))
                ) && 
                (
                    this.OrderApprovalTaskDefinitionId == input.OrderApprovalTaskDefinitionId ||
                    (this.OrderApprovalTaskDefinitionId != null &&
                    this.OrderApprovalTaskDefinitionId.Equals(input.OrderApprovalTaskDefinitionId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                {
                    hashCode = (hashCode * 59) + this.Id.GetHashCode();
                }
                if (this.ComplianceState != null)
                {
                    hashCode = (hashCode * 59) + this.ComplianceState.GetHashCode();
                }
                if (this.ApprovalState != null)
                {
                    hashCode = (hashCode * 59) + this.ApprovalState.GetHashCode();
                }
                if (this.PortfolioId != null)
                {
                    hashCode = (hashCode * 59) + this.PortfolioId.GetHashCode();
                }
                if (this.PortfolioName != null)
                {
                    hashCode = (hashCode * 59) + this.PortfolioName.GetHashCode();
                }
                if (this.OrderApprovalTaskId != null)
                {
                    hashCode = (hashCode * 59) + this.OrderApprovalTaskId.GetHashCode();
                }
                if (this.OrderApprovalTaskDefinitionId != null)
                {
                    hashCode = (hashCode * 59) + this.OrderApprovalTaskDefinitionId.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // ComplianceState (string) minLength
            if (this.ComplianceState != null && this.ComplianceState.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ComplianceState, length must be greater than 1.", new [] { "ComplianceState" });
            }

            // ApprovalState (string) minLength
            if (this.ApprovalState != null && this.ApprovalState.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ApprovalState, length must be greater than 1.", new [] { "ApprovalState" });
            }

            yield break;
        }
    }
}
