/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Lusid.Sdk.Client.OpenAPIDateConverter;

namespace Lusid.Sdk.Model
{
    /// <summary>
    /// RelationalDataPointResponse
    /// </summary>
    [DataContract(Name = "RelationalDataPointResponse")]
    public partial class RelationalDataPointResponse : IEquatable<RelationalDataPointResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RelationalDataPointResponse" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected RelationalDataPointResponse() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="RelationalDataPointResponse" /> class.
        /// </summary>
        /// <param name="relationalDatasetDefinitionId">relationalDatasetDefinitionId (required).</param>
        /// <param name="dataSeries">dataSeries (required).</param>
        /// <param name="effectiveAt">The effectiveAt or cut-label datetime of the DataPoint. (required).</param>
        /// <param name="valueFields">The values associated with the DataPoint, structured according to the FieldSchema of the parent RelationalDatasetDefinition. (required).</param>
        /// <param name="metaDataFields">The metadata associated with the DataPoint, structured according to the FieldSchema of the parent RelationalDatasetDefinition. (required).</param>
        /// <param name="effectiveAtEntered">The effectiveAt datetime as entered when the DataPoint was created. (required).</param>
        public RelationalDataPointResponse(ResourceId relationalDatasetDefinitionId = default(ResourceId), RelationalDataSeriesResponse dataSeries = default(RelationalDataSeriesResponse), DateTimeOffset effectiveAt = default(DateTimeOffset), Dictionary<string, RelationalDataPointFieldValueResponse> valueFields = default(Dictionary<string, RelationalDataPointFieldValueResponse>), Dictionary<string, RelationalDataPointFieldValueResponse> metaDataFields = default(Dictionary<string, RelationalDataPointFieldValueResponse>), string effectiveAtEntered = default(string))
        {
            // to ensure "relationalDatasetDefinitionId" is required (not null)
            if (relationalDatasetDefinitionId == null)
            {
                throw new ArgumentNullException("relationalDatasetDefinitionId is a required property for RelationalDataPointResponse and cannot be null");
            }
            this.RelationalDatasetDefinitionId = relationalDatasetDefinitionId;
            // to ensure "dataSeries" is required (not null)
            if (dataSeries == null)
            {
                throw new ArgumentNullException("dataSeries is a required property for RelationalDataPointResponse and cannot be null");
            }
            this.DataSeries = dataSeries;
            this.EffectiveAt = effectiveAt;
            // to ensure "valueFields" is required (not null)
            if (valueFields == null)
            {
                throw new ArgumentNullException("valueFields is a required property for RelationalDataPointResponse and cannot be null");
            }
            this.ValueFields = valueFields;
            // to ensure "metaDataFields" is required (not null)
            if (metaDataFields == null)
            {
                throw new ArgumentNullException("metaDataFields is a required property for RelationalDataPointResponse and cannot be null");
            }
            this.MetaDataFields = metaDataFields;
            // to ensure "effectiveAtEntered" is required (not null)
            if (effectiveAtEntered == null)
            {
                throw new ArgumentNullException("effectiveAtEntered is a required property for RelationalDataPointResponse and cannot be null");
            }
            this.EffectiveAtEntered = effectiveAtEntered;
        }

        /// <summary>
        /// Gets or Sets RelationalDatasetDefinitionId
        /// </summary>
        [DataMember(Name = "relationalDatasetDefinitionId", IsRequired = true, EmitDefaultValue = true)]
        public ResourceId RelationalDatasetDefinitionId { get; set; }

        /// <summary>
        /// Gets or Sets DataSeries
        /// </summary>
        [DataMember(Name = "dataSeries", IsRequired = true, EmitDefaultValue = true)]
        public RelationalDataSeriesResponse DataSeries { get; set; }

        /// <summary>
        /// The effectiveAt or cut-label datetime of the DataPoint.
        /// </summary>
        /// <value>The effectiveAt or cut-label datetime of the DataPoint.</value>
        [DataMember(Name = "effectiveAt", IsRequired = true, EmitDefaultValue = true)]
        public DateTimeOffset EffectiveAt { get; set; }

        /// <summary>
        /// The values associated with the DataPoint, structured according to the FieldSchema of the parent RelationalDatasetDefinition.
        /// </summary>
        /// <value>The values associated with the DataPoint, structured according to the FieldSchema of the parent RelationalDatasetDefinition.</value>
        [DataMember(Name = "valueFields", IsRequired = true, EmitDefaultValue = true)]
        public Dictionary<string, RelationalDataPointFieldValueResponse> ValueFields { get; set; }

        /// <summary>
        /// The metadata associated with the DataPoint, structured according to the FieldSchema of the parent RelationalDatasetDefinition.
        /// </summary>
        /// <value>The metadata associated with the DataPoint, structured according to the FieldSchema of the parent RelationalDatasetDefinition.</value>
        [DataMember(Name = "metaDataFields", IsRequired = true, EmitDefaultValue = true)]
        public Dictionary<string, RelationalDataPointFieldValueResponse> MetaDataFields { get; set; }

        /// <summary>
        /// The effectiveAt datetime as entered when the DataPoint was created.
        /// </summary>
        /// <value>The effectiveAt datetime as entered when the DataPoint was created.</value>
        [DataMember(Name = "effectiveAtEntered", IsRequired = true, EmitDefaultValue = true)]
        public string EffectiveAtEntered { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class RelationalDataPointResponse {\n");
            sb.Append("  RelationalDatasetDefinitionId: ").Append(RelationalDatasetDefinitionId).Append("\n");
            sb.Append("  DataSeries: ").Append(DataSeries).Append("\n");
            sb.Append("  EffectiveAt: ").Append(EffectiveAt).Append("\n");
            sb.Append("  ValueFields: ").Append(ValueFields).Append("\n");
            sb.Append("  MetaDataFields: ").Append(MetaDataFields).Append("\n");
            sb.Append("  EffectiveAtEntered: ").Append(EffectiveAtEntered).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as RelationalDataPointResponse);
        }

        /// <summary>
        /// Returns true if RelationalDataPointResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of RelationalDataPointResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RelationalDataPointResponse input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.RelationalDatasetDefinitionId == input.RelationalDatasetDefinitionId ||
                    (this.RelationalDatasetDefinitionId != null &&
                    this.RelationalDatasetDefinitionId.Equals(input.RelationalDatasetDefinitionId))
                ) && 
                (
                    this.DataSeries == input.DataSeries ||
                    (this.DataSeries != null &&
                    this.DataSeries.Equals(input.DataSeries))
                ) && 
                (
                    this.EffectiveAt == input.EffectiveAt ||
                    (this.EffectiveAt != null &&
                    this.EffectiveAt.Equals(input.EffectiveAt))
                ) && 
                (
                    this.ValueFields == input.ValueFields ||
                    this.ValueFields != null &&
                    input.ValueFields != null &&
                    this.ValueFields.SequenceEqual(input.ValueFields)
                ) && 
                (
                    this.MetaDataFields == input.MetaDataFields ||
                    this.MetaDataFields != null &&
                    input.MetaDataFields != null &&
                    this.MetaDataFields.SequenceEqual(input.MetaDataFields)
                ) && 
                (
                    this.EffectiveAtEntered == input.EffectiveAtEntered ||
                    (this.EffectiveAtEntered != null &&
                    this.EffectiveAtEntered.Equals(input.EffectiveAtEntered))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.RelationalDatasetDefinitionId != null)
                {
                    hashCode = (hashCode * 59) + this.RelationalDatasetDefinitionId.GetHashCode();
                }
                if (this.DataSeries != null)
                {
                    hashCode = (hashCode * 59) + this.DataSeries.GetHashCode();
                }
                if (this.EffectiveAt != null)
                {
                    hashCode = (hashCode * 59) + this.EffectiveAt.GetHashCode();
                }
                if (this.ValueFields != null)
                {
                    hashCode = (hashCode * 59) + this.ValueFields.GetHashCode();
                }
                if (this.MetaDataFields != null)
                {
                    hashCode = (hashCode * 59) + this.MetaDataFields.GetHashCode();
                }
                if (this.EffectiveAtEntered != null)
                {
                    hashCode = (hashCode * 59) + this.EffectiveAtEntered.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // EffectiveAtEntered (string) minLength
            if (this.EffectiveAtEntered != null && this.EffectiveAtEntered.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for EffectiveAtEntered, length must be greater than 1.", new [] { "EffectiveAtEntered" });
            }

            yield break;
        }
    }
}
