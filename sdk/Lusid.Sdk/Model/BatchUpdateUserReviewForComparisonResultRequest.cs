/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Lusid.Sdk.Client.OpenAPIDateConverter;

namespace Lusid.Sdk.Model
{
    /// <summary>
    /// BatchUpdateUserReviewForComparisonResultRequest
    /// </summary>
    [DataContract(Name = "BatchUpdateUserReviewForComparisonResultRequest")]
    public partial class BatchUpdateUserReviewForComparisonResultRequest : IEquatable<BatchUpdateUserReviewForComparisonResultRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="BatchUpdateUserReviewForComparisonResultRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected BatchUpdateUserReviewForComparisonResultRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="BatchUpdateUserReviewForComparisonResultRequest" /> class.
        /// </summary>
        /// <param name="comparisonResultId">Comparison result identifier, encoded value for core attribute results, aggregate attribute results, reconciliation type and run instanceId. (required).</param>
        /// <param name="userReviewAdd">userReviewAdd.</param>
        /// <param name="userReviewRemove">userReviewRemove.</param>
        public BatchUpdateUserReviewForComparisonResultRequest(string comparisonResultId = default(string), GroupReconciliationUserReviewAdd userReviewAdd = default(GroupReconciliationUserReviewAdd), GroupReconciliationUserReviewRemove userReviewRemove = default(GroupReconciliationUserReviewRemove))
        {
            // to ensure "comparisonResultId" is required (not null)
            if (comparisonResultId == null)
            {
                throw new ArgumentNullException("comparisonResultId is a required property for BatchUpdateUserReviewForComparisonResultRequest and cannot be null");
            }
            this.ComparisonResultId = comparisonResultId;
            this.UserReviewAdd = userReviewAdd;
            this.UserReviewRemove = userReviewRemove;
        }

        /// <summary>
        /// Comparison result identifier, encoded value for core attribute results, aggregate attribute results, reconciliation type and run instanceId.
        /// </summary>
        /// <value>Comparison result identifier, encoded value for core attribute results, aggregate attribute results, reconciliation type and run instanceId.</value>
        [DataMember(Name = "comparisonResultId", IsRequired = true, EmitDefaultValue = true)]
        public string ComparisonResultId { get; set; }

        /// <summary>
        /// Gets or Sets UserReviewAdd
        /// </summary>
        [DataMember(Name = "userReviewAdd", EmitDefaultValue = false)]
        public GroupReconciliationUserReviewAdd UserReviewAdd { get; set; }

        /// <summary>
        /// Gets or Sets UserReviewRemove
        /// </summary>
        [DataMember(Name = "userReviewRemove", EmitDefaultValue = false)]
        public GroupReconciliationUserReviewRemove UserReviewRemove { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class BatchUpdateUserReviewForComparisonResultRequest {\n");
            sb.Append("  ComparisonResultId: ").Append(ComparisonResultId).Append("\n");
            sb.Append("  UserReviewAdd: ").Append(UserReviewAdd).Append("\n");
            sb.Append("  UserReviewRemove: ").Append(UserReviewRemove).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as BatchUpdateUserReviewForComparisonResultRequest);
        }

        /// <summary>
        /// Returns true if BatchUpdateUserReviewForComparisonResultRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of BatchUpdateUserReviewForComparisonResultRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BatchUpdateUserReviewForComparisonResultRequest input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.ComparisonResultId == input.ComparisonResultId ||
                    (this.ComparisonResultId != null &&
                    this.ComparisonResultId.Equals(input.ComparisonResultId))
                ) && 
                (
                    this.UserReviewAdd == input.UserReviewAdd ||
                    (this.UserReviewAdd != null &&
                    this.UserReviewAdd.Equals(input.UserReviewAdd))
                ) && 
                (
                    this.UserReviewRemove == input.UserReviewRemove ||
                    (this.UserReviewRemove != null &&
                    this.UserReviewRemove.Equals(input.UserReviewRemove))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ComparisonResultId != null)
                {
                    hashCode = (hashCode * 59) + this.ComparisonResultId.GetHashCode();
                }
                if (this.UserReviewAdd != null)
                {
                    hashCode = (hashCode * 59) + this.UserReviewAdd.GetHashCode();
                }
                if (this.UserReviewRemove != null)
                {
                    hashCode = (hashCode * 59) + this.UserReviewRemove.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // ComparisonResultId (string) maxLength
            if (this.ComparisonResultId != null && this.ComparisonResultId.Length > 64)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ComparisonResultId, length must be less than 64.", new [] { "ComparisonResultId" });
            }

            // ComparisonResultId (string) minLength
            if (this.ComparisonResultId != null && this.ComparisonResultId.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ComparisonResultId, length must be greater than 1.", new [] { "ComparisonResultId" });
            }

            yield break;
        }
    }
}
