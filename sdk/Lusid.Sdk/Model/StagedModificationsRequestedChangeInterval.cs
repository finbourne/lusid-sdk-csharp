/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Lusid.Sdk.Client.OpenAPIDateConverter;

namespace Lusid.Sdk.Model
{
    /// <summary>
    /// StagedModificationsRequestedChangeInterval
    /// </summary>
    [DataContract(Name = "StagedModificationsRequestedChangeInterval")]
    public partial class StagedModificationsRequestedChangeInterval : IEquatable<StagedModificationsRequestedChangeInterval>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="StagedModificationsRequestedChangeInterval" /> class.
        /// </summary>
        /// <param name="attributeName">Name of the property the change applies to..</param>
        /// <param name="effectiveRange">effectiveRange.</param>
        /// <param name="previousValue">The previous value of the attribute before the requested change is applied..</param>
        /// <param name="newValue">The value of the attribute once the requested change is applied..</param>
        /// <param name="asAtBasis">Whether the change represents the modification when the request was made or the modification as it would be at the latest time..</param>
        public StagedModificationsRequestedChangeInterval(string attributeName = default(string), StagedModificationEffectiveRange effectiveRange = default(StagedModificationEffectiveRange), Object previousValue = default(Object), Object newValue = default(Object), string asAtBasis = default(string))
        {
            this.AttributeName = attributeName;
            this.EffectiveRange = effectiveRange;
            this.PreviousValue = previousValue;
            this.NewValue = newValue;
            this.AsAtBasis = asAtBasis;
        }

        /// <summary>
        /// Name of the property the change applies to.
        /// </summary>
        /// <value>Name of the property the change applies to.</value>
        [DataMember(Name = "attributeName", EmitDefaultValue = true)]
        public string AttributeName { get; set; }

        /// <summary>
        /// Gets or Sets EffectiveRange
        /// </summary>
        [DataMember(Name = "effectiveRange", EmitDefaultValue = false)]
        public StagedModificationEffectiveRange EffectiveRange { get; set; }

        /// <summary>
        /// The previous value of the attribute before the requested change is applied.
        /// </summary>
        /// <value>The previous value of the attribute before the requested change is applied.</value>
        [DataMember(Name = "previousValue", EmitDefaultValue = true)]
        public Object PreviousValue { get; set; }

        /// <summary>
        /// The value of the attribute once the requested change is applied.
        /// </summary>
        /// <value>The value of the attribute once the requested change is applied.</value>
        [DataMember(Name = "newValue", EmitDefaultValue = true)]
        public Object NewValue { get; set; }

        /// <summary>
        /// Whether the change represents the modification when the request was made or the modification as it would be at the latest time.
        /// </summary>
        /// <value>Whether the change represents the modification when the request was made or the modification as it would be at the latest time.</value>
        [DataMember(Name = "asAtBasis", EmitDefaultValue = true)]
        public string AsAtBasis { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class StagedModificationsRequestedChangeInterval {\n");
            sb.Append("  AttributeName: ").Append(AttributeName).Append("\n");
            sb.Append("  EffectiveRange: ").Append(EffectiveRange).Append("\n");
            sb.Append("  PreviousValue: ").Append(PreviousValue).Append("\n");
            sb.Append("  NewValue: ").Append(NewValue).Append("\n");
            sb.Append("  AsAtBasis: ").Append(AsAtBasis).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as StagedModificationsRequestedChangeInterval);
        }

        /// <summary>
        /// Returns true if StagedModificationsRequestedChangeInterval instances are equal
        /// </summary>
        /// <param name="input">Instance of StagedModificationsRequestedChangeInterval to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(StagedModificationsRequestedChangeInterval input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.AttributeName == input.AttributeName ||
                    (this.AttributeName != null &&
                    this.AttributeName.Equals(input.AttributeName))
                ) && 
                (
                    this.EffectiveRange == input.EffectiveRange ||
                    (this.EffectiveRange != null &&
                    this.EffectiveRange.Equals(input.EffectiveRange))
                ) && 
                (
                    this.PreviousValue == input.PreviousValue ||
                    (this.PreviousValue != null &&
                    this.PreviousValue.Equals(input.PreviousValue))
                ) && 
                (
                    this.NewValue == input.NewValue ||
                    (this.NewValue != null &&
                    this.NewValue.Equals(input.NewValue))
                ) && 
                (
                    this.AsAtBasis == input.AsAtBasis ||
                    (this.AsAtBasis != null &&
                    this.AsAtBasis.Equals(input.AsAtBasis))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AttributeName != null)
                {
                    hashCode = (hashCode * 59) + this.AttributeName.GetHashCode();
                }
                if (this.EffectiveRange != null)
                {
                    hashCode = (hashCode * 59) + this.EffectiveRange.GetHashCode();
                }
                if (this.PreviousValue != null)
                {
                    hashCode = (hashCode * 59) + this.PreviousValue.GetHashCode();
                }
                if (this.NewValue != null)
                {
                    hashCode = (hashCode * 59) + this.NewValue.GetHashCode();
                }
                if (this.AsAtBasis != null)
                {
                    hashCode = (hashCode * 59) + this.AsAtBasis.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
