/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Lusid.Sdk.Client.OpenAPIDateConverter;

namespace Lusid.Sdk.Model
{
    /// <summary>
    /// QueryRelationalDatasetRequest
    /// </summary>
    [DataContract(Name = "QueryRelationalDatasetRequest")]
    public partial class QueryRelationalDatasetRequest : IEquatable<QueryRelationalDatasetRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="QueryRelationalDatasetRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected QueryRelationalDatasetRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="QueryRelationalDatasetRequest" /> class.
        /// </summary>
        /// <param name="queryMethod">The method used to query data points. Can be either &#39;Latest&#39; or &#39;TimeSeries&#39;. (required).</param>
        /// <param name="filter">Expression to filter the result set. For more information about filtering LUSID results, see https://support.lusid.com/knowledgebase/article/KA-01914..</param>
        /// <param name="customSortBy">A list of fields to sort the results by. For example, to sort by a Value field &#39;AValueField&#39; in descending order, specify &#39;AValueField DESC&#39;..</param>
        public QueryRelationalDatasetRequest(string queryMethod = default(string), string filter = default(string), List<string> customSortBy = default(List<string>))
        {
            // to ensure "queryMethod" is required (not null)
            if (queryMethod == null)
            {
                throw new ArgumentNullException("queryMethod is a required property for QueryRelationalDatasetRequest and cannot be null");
            }
            this.QueryMethod = queryMethod;
            this.Filter = filter;
            this.CustomSortBy = customSortBy;
        }

        /// <summary>
        /// The method used to query data points. Can be either &#39;Latest&#39; or &#39;TimeSeries&#39;.
        /// </summary>
        /// <value>The method used to query data points. Can be either &#39;Latest&#39; or &#39;TimeSeries&#39;.</value>
        [DataMember(Name = "queryMethod", IsRequired = true, EmitDefaultValue = true)]
        public string QueryMethod { get; set; }

        /// <summary>
        /// Expression to filter the result set. For more information about filtering LUSID results, see https://support.lusid.com/knowledgebase/article/KA-01914.
        /// </summary>
        /// <value>Expression to filter the result set. For more information about filtering LUSID results, see https://support.lusid.com/knowledgebase/article/KA-01914.</value>
        [DataMember(Name = "filter", EmitDefaultValue = true)]
        public string Filter { get; set; }

        /// <summary>
        /// A list of fields to sort the results by. For example, to sort by a Value field &#39;AValueField&#39; in descending order, specify &#39;AValueField DESC&#39;.
        /// </summary>
        /// <value>A list of fields to sort the results by. For example, to sort by a Value field &#39;AValueField&#39; in descending order, specify &#39;AValueField DESC&#39;.</value>
        [DataMember(Name = "customSortBy", EmitDefaultValue = true)]
        public List<string> CustomSortBy { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class QueryRelationalDatasetRequest {\n");
            sb.Append("  QueryMethod: ").Append(QueryMethod).Append("\n");
            sb.Append("  Filter: ").Append(Filter).Append("\n");
            sb.Append("  CustomSortBy: ").Append(CustomSortBy).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as QueryRelationalDatasetRequest);
        }

        /// <summary>
        /// Returns true if QueryRelationalDatasetRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of QueryRelationalDatasetRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(QueryRelationalDatasetRequest input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.QueryMethod == input.QueryMethod ||
                    (this.QueryMethod != null &&
                    this.QueryMethod.Equals(input.QueryMethod))
                ) && 
                (
                    this.Filter == input.Filter ||
                    (this.Filter != null &&
                    this.Filter.Equals(input.Filter))
                ) && 
                (
                    this.CustomSortBy == input.CustomSortBy ||
                    this.CustomSortBy != null &&
                    input.CustomSortBy != null &&
                    this.CustomSortBy.SequenceEqual(input.CustomSortBy)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.QueryMethod != null)
                {
                    hashCode = (hashCode * 59) + this.QueryMethod.GetHashCode();
                }
                if (this.Filter != null)
                {
                    hashCode = (hashCode * 59) + this.Filter.GetHashCode();
                }
                if (this.CustomSortBy != null)
                {
                    hashCode = (hashCode * 59) + this.CustomSortBy.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // QueryMethod (string) maxLength
            if (this.QueryMethod != null && this.QueryMethod.Length > 512)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for QueryMethod, length must be less than 512.", new [] { "QueryMethod" });
            }

            // QueryMethod (string) minLength
            if (this.QueryMethod != null && this.QueryMethod.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for QueryMethod, length must be greater than 0.", new [] { "QueryMethod" });
            }

            // Filter (string) maxLength
            if (this.Filter != null && this.Filter.Length > 1024)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Filter, length must be less than 1024.", new [] { "Filter" });
            }

            // Filter (string) minLength
            if (this.Filter != null && this.Filter.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Filter, length must be greater than 0.", new [] { "Filter" });
            }

            yield break;
        }
    }
}
