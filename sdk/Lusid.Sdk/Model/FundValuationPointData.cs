/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Lusid.Sdk.Client.OpenAPIDateConverter;

namespace Lusid.Sdk.Model
{
    /// <summary>
    /// The Valuation Point Data for a Fund on a specified date.
    /// </summary>
    [DataContract(Name = "FundValuationPointData")]
    public partial class FundValuationPointData : IEquatable<FundValuationPointData>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FundValuationPointData" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected FundValuationPointData() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="FundValuationPointData" /> class.
        /// </summary>
        /// <param name="backOut">Bucket of detail for the Valuation Point where data points have been &#39;backed out&#39;. (required).</param>
        /// <param name="dealing">Bucket of detail for any &#39;Dealing&#39; that has occured inside the queried period. (required).</param>
        /// <param name="pnL">Bucket of detail for &#39;PnL&#39; that has occured inside the queried period. (required).</param>
        /// <param name="gav">The Gross Asset Value of the Fund or Share Class at the Valuation Point. This is effectively a summation of all Trial balance entries linked to accounts of types &#39;Asset&#39; and &#39;Liabilities&#39;. (required).</param>
        /// <param name="fees">Bucket of detail for any &#39;Fees&#39; that have been charged in the selected period. (required).</param>
        /// <param name="nav">The Net Asset Value of the Fund or Share Class at the Valuation Point. This represents the GAV with any fees applied in the period. (required).</param>
        /// <param name="unitisation">unitisation.</param>
        /// <param name="miscellaneous">Not used directly by the LUSID engines but serves as a holding area for any custom derived data points that may be useful in, for example, fee calculations)..</param>
        /// <param name="previousValuationPointData">previousValuationPointData.</param>
        public FundValuationPointData(Dictionary<string, FundAmount> backOut = default(Dictionary<string, FundAmount>), Dictionary<string, FundAmount> dealing = default(Dictionary<string, FundAmount>), Dictionary<string, FundAmount> pnL = default(Dictionary<string, FundAmount>), decimal gav = default(decimal), Dictionary<string, FeeAccrual> fees = default(Dictionary<string, FeeAccrual>), decimal nav = default(decimal), UnitisationData unitisation = default(UnitisationData), Dictionary<string, FundAmount> miscellaneous = default(Dictionary<string, FundAmount>), PreviousFundValuationPointData previousValuationPointData = default(PreviousFundValuationPointData))
        {
            // to ensure "backOut" is required (not null)
            if (backOut == null)
            {
                throw new ArgumentNullException("backOut is a required property for FundValuationPointData and cannot be null");
            }
            this.BackOut = backOut;
            // to ensure "dealing" is required (not null)
            if (dealing == null)
            {
                throw new ArgumentNullException("dealing is a required property for FundValuationPointData and cannot be null");
            }
            this.Dealing = dealing;
            // to ensure "pnL" is required (not null)
            if (pnL == null)
            {
                throw new ArgumentNullException("pnL is a required property for FundValuationPointData and cannot be null");
            }
            this.PnL = pnL;
            this.Gav = gav;
            // to ensure "fees" is required (not null)
            if (fees == null)
            {
                throw new ArgumentNullException("fees is a required property for FundValuationPointData and cannot be null");
            }
            this.Fees = fees;
            this.Nav = nav;
            this.Unitisation = unitisation;
            this.Miscellaneous = miscellaneous;
            this.PreviousValuationPointData = previousValuationPointData;
        }

        /// <summary>
        /// Bucket of detail for the Valuation Point where data points have been &#39;backed out&#39;.
        /// </summary>
        /// <value>Bucket of detail for the Valuation Point where data points have been &#39;backed out&#39;.</value>
        [DataMember(Name = "backOut", IsRequired = true, EmitDefaultValue = true)]
        public Dictionary<string, FundAmount> BackOut { get; set; }

        /// <summary>
        /// Bucket of detail for any &#39;Dealing&#39; that has occured inside the queried period.
        /// </summary>
        /// <value>Bucket of detail for any &#39;Dealing&#39; that has occured inside the queried period.</value>
        [DataMember(Name = "dealing", IsRequired = true, EmitDefaultValue = true)]
        public Dictionary<string, FundAmount> Dealing { get; set; }

        /// <summary>
        /// Bucket of detail for &#39;PnL&#39; that has occured inside the queried period.
        /// </summary>
        /// <value>Bucket of detail for &#39;PnL&#39; that has occured inside the queried period.</value>
        [DataMember(Name = "pnL", IsRequired = true, EmitDefaultValue = true)]
        public Dictionary<string, FundAmount> PnL { get; set; }

        /// <summary>
        /// The Gross Asset Value of the Fund or Share Class at the Valuation Point. This is effectively a summation of all Trial balance entries linked to accounts of types &#39;Asset&#39; and &#39;Liabilities&#39;.
        /// </summary>
        /// <value>The Gross Asset Value of the Fund or Share Class at the Valuation Point. This is effectively a summation of all Trial balance entries linked to accounts of types &#39;Asset&#39; and &#39;Liabilities&#39;.</value>
        [DataMember(Name = "gav", IsRequired = true, EmitDefaultValue = true)]
        public decimal Gav { get; set; }

        /// <summary>
        /// Bucket of detail for any &#39;Fees&#39; that have been charged in the selected period.
        /// </summary>
        /// <value>Bucket of detail for any &#39;Fees&#39; that have been charged in the selected period.</value>
        [DataMember(Name = "fees", IsRequired = true, EmitDefaultValue = true)]
        public Dictionary<string, FeeAccrual> Fees { get; set; }

        /// <summary>
        /// The Net Asset Value of the Fund or Share Class at the Valuation Point. This represents the GAV with any fees applied in the period.
        /// </summary>
        /// <value>The Net Asset Value of the Fund or Share Class at the Valuation Point. This represents the GAV with any fees applied in the period.</value>
        [DataMember(Name = "nav", IsRequired = true, EmitDefaultValue = true)]
        public decimal Nav { get; set; }

        /// <summary>
        /// Gets or Sets Unitisation
        /// </summary>
        [DataMember(Name = "unitisation", EmitDefaultValue = false)]
        public UnitisationData Unitisation { get; set; }

        /// <summary>
        /// Not used directly by the LUSID engines but serves as a holding area for any custom derived data points that may be useful in, for example, fee calculations).
        /// </summary>
        /// <value>Not used directly by the LUSID engines but serves as a holding area for any custom derived data points that may be useful in, for example, fee calculations).</value>
        [DataMember(Name = "miscellaneous", EmitDefaultValue = true)]
        public Dictionary<string, FundAmount> Miscellaneous { get; set; }

        /// <summary>
        /// Gets or Sets PreviousValuationPointData
        /// </summary>
        [DataMember(Name = "previousValuationPointData", EmitDefaultValue = false)]
        public PreviousFundValuationPointData PreviousValuationPointData { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class FundValuationPointData {\n");
            sb.Append("  BackOut: ").Append(BackOut).Append("\n");
            sb.Append("  Dealing: ").Append(Dealing).Append("\n");
            sb.Append("  PnL: ").Append(PnL).Append("\n");
            sb.Append("  Gav: ").Append(Gav).Append("\n");
            sb.Append("  Fees: ").Append(Fees).Append("\n");
            sb.Append("  Nav: ").Append(Nav).Append("\n");
            sb.Append("  Unitisation: ").Append(Unitisation).Append("\n");
            sb.Append("  Miscellaneous: ").Append(Miscellaneous).Append("\n");
            sb.Append("  PreviousValuationPointData: ").Append(PreviousValuationPointData).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as FundValuationPointData);
        }

        /// <summary>
        /// Returns true if FundValuationPointData instances are equal
        /// </summary>
        /// <param name="input">Instance of FundValuationPointData to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FundValuationPointData input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.BackOut == input.BackOut ||
                    this.BackOut != null &&
                    input.BackOut != null &&
                    this.BackOut.SequenceEqual(input.BackOut)
                ) && 
                (
                    this.Dealing == input.Dealing ||
                    this.Dealing != null &&
                    input.Dealing != null &&
                    this.Dealing.SequenceEqual(input.Dealing)
                ) && 
                (
                    this.PnL == input.PnL ||
                    this.PnL != null &&
                    input.PnL != null &&
                    this.PnL.SequenceEqual(input.PnL)
                ) && 
                (
                    this.Gav == input.Gav ||
                    this.Gav.Equals(input.Gav)
                ) && 
                (
                    this.Fees == input.Fees ||
                    this.Fees != null &&
                    input.Fees != null &&
                    this.Fees.SequenceEqual(input.Fees)
                ) && 
                (
                    this.Nav == input.Nav ||
                    this.Nav.Equals(input.Nav)
                ) && 
                (
                    this.Unitisation == input.Unitisation ||
                    (this.Unitisation != null &&
                    this.Unitisation.Equals(input.Unitisation))
                ) && 
                (
                    this.Miscellaneous == input.Miscellaneous ||
                    this.Miscellaneous != null &&
                    input.Miscellaneous != null &&
                    this.Miscellaneous.SequenceEqual(input.Miscellaneous)
                ) && 
                (
                    this.PreviousValuationPointData == input.PreviousValuationPointData ||
                    (this.PreviousValuationPointData != null &&
                    this.PreviousValuationPointData.Equals(input.PreviousValuationPointData))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.BackOut != null)
                {
                    hashCode = (hashCode * 59) + this.BackOut.GetHashCode();
                }
                if (this.Dealing != null)
                {
                    hashCode = (hashCode * 59) + this.Dealing.GetHashCode();
                }
                if (this.PnL != null)
                {
                    hashCode = (hashCode * 59) + this.PnL.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Gav.GetHashCode();
                if (this.Fees != null)
                {
                    hashCode = (hashCode * 59) + this.Fees.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Nav.GetHashCode();
                if (this.Unitisation != null)
                {
                    hashCode = (hashCode * 59) + this.Unitisation.GetHashCode();
                }
                if (this.Miscellaneous != null)
                {
                    hashCode = (hashCode * 59) + this.Miscellaneous.GetHashCode();
                }
                if (this.PreviousValuationPointData != null)
                {
                    hashCode = (hashCode * 59) + this.PreviousValuationPointData.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
