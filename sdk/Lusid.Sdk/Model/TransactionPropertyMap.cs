/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Lusid.Sdk.Client.OpenAPIDateConverter;

namespace Lusid.Sdk.Model
{
    /// <summary>
    /// TransactionPropertyMap
    /// </summary>
    [DataContract(Name = "TransactionPropertyMap")]
    public partial class TransactionPropertyMap : IEquatable<TransactionPropertyMap>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TransactionPropertyMap" /> class.
        /// </summary>
        /// <param name="propertyKey">The key that uniquely identifies the property. It has the format {domain}/{scope}/{code}..</param>
        /// <param name="propertyValue">propertyValue.</param>
        public TransactionPropertyMap(string propertyKey = default(string), PropertyValue propertyValue = default(PropertyValue))
        {
            this.PropertyKey = propertyKey;
            this.PropertyValue = propertyValue;
        }

        /// <summary>
        /// The key that uniquely identifies the property. It has the format {domain}/{scope}/{code}.
        /// </summary>
        /// <value>The key that uniquely identifies the property. It has the format {domain}/{scope}/{code}.</value>
        [DataMember(Name = "propertyKey", EmitDefaultValue = true)]
        public string PropertyKey { get; set; }

        /// <summary>
        /// Gets or Sets PropertyValue
        /// </summary>
        [DataMember(Name = "propertyValue", EmitDefaultValue = false)]
        public PropertyValue PropertyValue { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class TransactionPropertyMap {\n");
            sb.Append("  PropertyKey: ").Append(PropertyKey).Append("\n");
            sb.Append("  PropertyValue: ").Append(PropertyValue).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TransactionPropertyMap);
        }

        /// <summary>
        /// Returns true if TransactionPropertyMap instances are equal
        /// </summary>
        /// <param name="input">Instance of TransactionPropertyMap to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TransactionPropertyMap input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.PropertyKey == input.PropertyKey ||
                    (this.PropertyKey != null &&
                    this.PropertyKey.Equals(input.PropertyKey))
                ) && 
                (
                    this.PropertyValue == input.PropertyValue ||
                    (this.PropertyValue != null &&
                    this.PropertyValue.Equals(input.PropertyValue))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.PropertyKey != null)
                {
                    hashCode = (hashCode * 59) + this.PropertyKey.GetHashCode();
                }
                if (this.PropertyValue != null)
                {
                    hashCode = (hashCode * 59) + this.PropertyValue.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
