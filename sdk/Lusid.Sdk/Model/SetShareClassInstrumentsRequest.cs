/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Lusid.Sdk.Client.OpenAPIDateConverter;

namespace Lusid.Sdk.Model
{
    /// <summary>
    /// The request used to create a Fund.
    /// </summary>
    [DataContract(Name = "SetShareClassInstrumentsRequest")]
    public partial class SetShareClassInstrumentsRequest : IEquatable<SetShareClassInstrumentsRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SetShareClassInstrumentsRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected SetShareClassInstrumentsRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="SetShareClassInstrumentsRequest" /> class.
        /// </summary>
        /// <param name="shareClassInstrumentScopes">The scopes in which the instruments lie, currently limited to one. (required).</param>
        /// <param name="shareClassInstruments">Details the user-provided instrument identifiers and the instrument resolved from them. (required).</param>
        public SetShareClassInstrumentsRequest(List<string> shareClassInstrumentScopes = default(List<string>), List<InstrumentResolutionDetail> shareClassInstruments = default(List<InstrumentResolutionDetail>))
        {
            // to ensure "shareClassInstrumentScopes" is required (not null)
            if (shareClassInstrumentScopes == null)
            {
                throw new ArgumentNullException("shareClassInstrumentScopes is a required property for SetShareClassInstrumentsRequest and cannot be null");
            }
            this.ShareClassInstrumentScopes = shareClassInstrumentScopes;
            // to ensure "shareClassInstruments" is required (not null)
            if (shareClassInstruments == null)
            {
                throw new ArgumentNullException("shareClassInstruments is a required property for SetShareClassInstrumentsRequest and cannot be null");
            }
            this.ShareClassInstruments = shareClassInstruments;
        }

        /// <summary>
        /// The scopes in which the instruments lie, currently limited to one.
        /// </summary>
        /// <value>The scopes in which the instruments lie, currently limited to one.</value>
        [DataMember(Name = "shareClassInstrumentScopes", IsRequired = true, EmitDefaultValue = true)]
        public List<string> ShareClassInstrumentScopes { get; set; }

        /// <summary>
        /// Details the user-provided instrument identifiers and the instrument resolved from them.
        /// </summary>
        /// <value>Details the user-provided instrument identifiers and the instrument resolved from them.</value>
        [DataMember(Name = "shareClassInstruments", IsRequired = true, EmitDefaultValue = true)]
        public List<InstrumentResolutionDetail> ShareClassInstruments { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SetShareClassInstrumentsRequest {\n");
            sb.Append("  ShareClassInstrumentScopes: ").Append(ShareClassInstrumentScopes).Append("\n");
            sb.Append("  ShareClassInstruments: ").Append(ShareClassInstruments).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SetShareClassInstrumentsRequest);
        }

        /// <summary>
        /// Returns true if SetShareClassInstrumentsRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of SetShareClassInstrumentsRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SetShareClassInstrumentsRequest input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.ShareClassInstrumentScopes == input.ShareClassInstrumentScopes ||
                    this.ShareClassInstrumentScopes != null &&
                    input.ShareClassInstrumentScopes != null &&
                    this.ShareClassInstrumentScopes.SequenceEqual(input.ShareClassInstrumentScopes)
                ) && 
                (
                    this.ShareClassInstruments == input.ShareClassInstruments ||
                    this.ShareClassInstruments != null &&
                    input.ShareClassInstruments != null &&
                    this.ShareClassInstruments.SequenceEqual(input.ShareClassInstruments)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ShareClassInstrumentScopes != null)
                {
                    hashCode = (hashCode * 59) + this.ShareClassInstrumentScopes.GetHashCode();
                }
                if (this.ShareClassInstruments != null)
                {
                    hashCode = (hashCode * 59) + this.ShareClassInstruments.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
