/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Lusid.Sdk.Client.OpenAPIDateConverter;

namespace Lusid.Sdk.Model
{
    /// <summary>
    /// StagedModificationDecisionRequest
    /// </summary>
    [DataContract(Name = "StagedModificationDecisionRequest")]
    public partial class StagedModificationDecisionRequest : IEquatable<StagedModificationDecisionRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="StagedModificationDecisionRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected StagedModificationDecisionRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="StagedModificationDecisionRequest" /> class.
        /// </summary>
        /// <param name="decision">The decision on the requested staged modification, can be &#39;Approve&#39; or &#39;Reject&#39;. (required).</param>
        /// <param name="comment">Comment on decision. (required).</param>
        public StagedModificationDecisionRequest(string decision = default(string), string comment = default(string))
        {
            // to ensure "decision" is required (not null)
            if (decision == null)
            {
                throw new ArgumentNullException("decision is a required property for StagedModificationDecisionRequest and cannot be null");
            }
            this.Decision = decision;
            // to ensure "comment" is required (not null)
            if (comment == null)
            {
                throw new ArgumentNullException("comment is a required property for StagedModificationDecisionRequest and cannot be null");
            }
            this.Comment = comment;
        }

        /// <summary>
        /// The decision on the requested staged modification, can be &#39;Approve&#39; or &#39;Reject&#39;.
        /// </summary>
        /// <value>The decision on the requested staged modification, can be &#39;Approve&#39; or &#39;Reject&#39;.</value>
        [DataMember(Name = "decision", IsRequired = true, EmitDefaultValue = true)]
        public string Decision { get; set; }

        /// <summary>
        /// Comment on decision.
        /// </summary>
        /// <value>Comment on decision.</value>
        [DataMember(Name = "comment", IsRequired = true, EmitDefaultValue = true)]
        public string Comment { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class StagedModificationDecisionRequest {\n");
            sb.Append("  Decision: ").Append(Decision).Append("\n");
            sb.Append("  Comment: ").Append(Comment).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as StagedModificationDecisionRequest);
        }

        /// <summary>
        /// Returns true if StagedModificationDecisionRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of StagedModificationDecisionRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(StagedModificationDecisionRequest input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Decision == input.Decision ||
                    (this.Decision != null &&
                    this.Decision.Equals(input.Decision))
                ) && 
                (
                    this.Comment == input.Comment ||
                    (this.Comment != null &&
                    this.Comment.Equals(input.Comment))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Decision != null)
                {
                    hashCode = (hashCode * 59) + this.Decision.GetHashCode();
                }
                if (this.Comment != null)
                {
                    hashCode = (hashCode * 59) + this.Comment.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Decision (string) minLength
            if (this.Decision != null && this.Decision.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Decision, length must be greater than 1.", new [] { "Decision" });
            }

            // Comment (string) maxLength
            if (this.Comment != null && this.Comment.Length > 256)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Comment, length must be less than 256.", new [] { "Comment" });
            }

            // Comment (string) minLength
            if (this.Comment != null && this.Comment.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Comment, length must be greater than 1.", new [] { "Comment" });
            }

            yield break;
        }
    }
}
