/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Lusid.Sdk.Client.OpenAPIDateConverter;

namespace Lusid.Sdk.Model
{
    /// <summary>
    /// A group of changes made by the same person at the same time.
    /// </summary>
    [DataContract(Name = "ChangeHistory")]
    public partial class ChangeHistory : IEquatable<ChangeHistory>, IValidatableObject
    {
        /// <summary>
        /// The action performed on the transaction, either created, updated, or deleted. The available values are: Create, Update, Delete
        /// </summary>
        /// <value>The action performed on the transaction, either created, updated, or deleted. The available values are: Create, Update, Delete</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ActionEnum
        {
            /// <summary>
            /// Enum Create for value: Create
            /// </summary>
            [EnumMember(Value = "Create")]
            Create = 1,

            /// <summary>
            /// Enum Update for value: Update
            /// </summary>
            [EnumMember(Value = "Update")]
            Update = 2,

            /// <summary>
            /// Enum Delete for value: Delete
            /// </summary>
            [EnumMember(Value = "Delete")]
            Delete = 3
        }


        /// <summary>
        /// The action performed on the transaction, either created, updated, or deleted. The available values are: Create, Update, Delete
        /// </summary>
        /// <value>The action performed on the transaction, either created, updated, or deleted. The available values are: Create, Update, Delete</value>
        [DataMember(Name = "action", IsRequired = true, EmitDefaultValue = true)]
        public ActionEnum Action { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ChangeHistory" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ChangeHistory() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ChangeHistory" /> class.
        /// </summary>
        /// <param name="userId">The unique identifier of the user that made the change. (required).</param>
        /// <param name="modifiedAsAt">The date/time of the change. (required).</param>
        /// <param name="requestId">The unique identifier of the request that the changes were part of. (required).</param>
        /// <param name="action">The action performed on the transaction, either created, updated, or deleted. The available values are: Create, Update, Delete (required).</param>
        /// <param name="changes">The collection of changes that were made. (required).</param>
        /// <param name="links">links.</param>
        public ChangeHistory(string userId = default(string), DateTimeOffset modifiedAsAt = default(DateTimeOffset), string requestId = default(string), ActionEnum action = default(ActionEnum), List<ChangeItem> changes = default(List<ChangeItem>), List<Link> links = default(List<Link>))
        {
            // to ensure "userId" is required (not null)
            if (userId == null)
            {
                throw new ArgumentNullException("userId is a required property for ChangeHistory and cannot be null");
            }
            this.UserId = userId;
            this.ModifiedAsAt = modifiedAsAt;
            // to ensure "requestId" is required (not null)
            if (requestId == null)
            {
                throw new ArgumentNullException("requestId is a required property for ChangeHistory and cannot be null");
            }
            this.RequestId = requestId;
            this.Action = action;
            // to ensure "changes" is required (not null)
            if (changes == null)
            {
                throw new ArgumentNullException("changes is a required property for ChangeHistory and cannot be null");
            }
            this.Changes = changes;
            this.Links = links;
        }

        /// <summary>
        /// The unique identifier of the user that made the change.
        /// </summary>
        /// <value>The unique identifier of the user that made the change.</value>
        [DataMember(Name = "userId", IsRequired = true, EmitDefaultValue = true)]
        public string UserId { get; set; }

        /// <summary>
        /// The date/time of the change.
        /// </summary>
        /// <value>The date/time of the change.</value>
        [DataMember(Name = "modifiedAsAt", IsRequired = true, EmitDefaultValue = true)]
        public DateTimeOffset ModifiedAsAt { get; set; }

        /// <summary>
        /// The unique identifier of the request that the changes were part of.
        /// </summary>
        /// <value>The unique identifier of the request that the changes were part of.</value>
        [DataMember(Name = "requestId", IsRequired = true, EmitDefaultValue = true)]
        public string RequestId { get; set; }

        /// <summary>
        /// The collection of changes that were made.
        /// </summary>
        /// <value>The collection of changes that were made.</value>
        [DataMember(Name = "changes", IsRequired = true, EmitDefaultValue = true)]
        public List<ChangeItem> Changes { get; set; }

        /// <summary>
        /// Gets or Sets Links
        /// </summary>
        [DataMember(Name = "links", EmitDefaultValue = true)]
        public List<Link> Links { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ChangeHistory {\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("  ModifiedAsAt: ").Append(ModifiedAsAt).Append("\n");
            sb.Append("  RequestId: ").Append(RequestId).Append("\n");
            sb.Append("  Action: ").Append(Action).Append("\n");
            sb.Append("  Changes: ").Append(Changes).Append("\n");
            sb.Append("  Links: ").Append(Links).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ChangeHistory);
        }

        /// <summary>
        /// Returns true if ChangeHistory instances are equal
        /// </summary>
        /// <param name="input">Instance of ChangeHistory to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ChangeHistory input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.UserId == input.UserId ||
                    (this.UserId != null &&
                    this.UserId.Equals(input.UserId))
                ) && 
                (
                    this.ModifiedAsAt == input.ModifiedAsAt ||
                    (this.ModifiedAsAt != null &&
                    this.ModifiedAsAt.Equals(input.ModifiedAsAt))
                ) && 
                (
                    this.RequestId == input.RequestId ||
                    (this.RequestId != null &&
                    this.RequestId.Equals(input.RequestId))
                ) && 
                (
                    this.Action == input.Action ||
                    this.Action.Equals(input.Action)
                ) && 
                (
                    this.Changes == input.Changes ||
                    this.Changes != null &&
                    input.Changes != null &&
                    this.Changes.SequenceEqual(input.Changes)
                ) && 
                (
                    this.Links == input.Links ||
                    this.Links != null &&
                    input.Links != null &&
                    this.Links.SequenceEqual(input.Links)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.UserId != null)
                {
                    hashCode = (hashCode * 59) + this.UserId.GetHashCode();
                }
                if (this.ModifiedAsAt != null)
                {
                    hashCode = (hashCode * 59) + this.ModifiedAsAt.GetHashCode();
                }
                if (this.RequestId != null)
                {
                    hashCode = (hashCode * 59) + this.RequestId.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Action.GetHashCode();
                if (this.Changes != null)
                {
                    hashCode = (hashCode * 59) + this.Changes.GetHashCode();
                }
                if (this.Links != null)
                {
                    hashCode = (hashCode * 59) + this.Links.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // UserId (string) minLength
            if (this.UserId != null && this.UserId.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for UserId, length must be greater than 1.", new [] { "UserId" });
            }

            // RequestId (string) minLength
            if (this.RequestId != null && this.RequestId.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for RequestId, length must be greater than 1.", new [] { "RequestId" });
            }

            yield break;
        }
    }
}
