/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Lusid.Sdk.Client.OpenAPIDateConverter;

namespace Lusid.Sdk.Model
{
    /// <summary>
    /// ClosedPeriod
    /// </summary>
    [DataContract(Name = "ClosedPeriod")]
    public partial class ClosedPeriod : IEquatable<ClosedPeriod>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ClosedPeriod" /> class.
        /// </summary>
        /// <param name="closedPeriodId">The unique Id of the Closed Period. The ClosedPeriodId, together with the Timeline Scope and Code, uniquely identifies a Closed Period.</param>
        /// <param name="displayName">The name of the Closed Period..</param>
        /// <param name="description">A description for the Closed Period..</param>
        /// <param name="effectiveStart">The effective start of the Closed Period.</param>
        /// <param name="effectiveEnd">The effective end of the Closed Period.</param>
        /// <param name="asAtClosed">The asAt closed datetime for the Closed Period.</param>
        /// <param name="properties">The Closed Periods properties. These will be from the &#39;ClosedPeriod&#39; domain..</param>
        /// <param name="varVersion">varVersion.</param>
        /// <param name="postCloseActivities">All the post close activities for the closed period..</param>
        /// <param name="holdingsAsAtClosedOverride">The optional AsAtClosed Override to use for building holdings in the Closed Period.If not specified, the AsAtClosed on the Closed Period will be used..</param>
        /// <param name="href">The specific Uniform Resource Identifier (URI) for this resource at the requested asAt datetime..</param>
        /// <param name="links">links.</param>
        public ClosedPeriod(string closedPeriodId = default(string), string displayName = default(string), string description = default(string), DateTimeOffset effectiveStart = default(DateTimeOffset), DateTimeOffset effectiveEnd = default(DateTimeOffset), DateTimeOffset asAtClosed = default(DateTimeOffset), Dictionary<string, Property> properties = default(Dictionary<string, Property>), ModelVersion varVersion = default(ModelVersion), List<PostCloseActivity> postCloseActivities = default(List<PostCloseActivity>), DateTimeOffset? holdingsAsAtClosedOverride = default(DateTimeOffset?), string href = default(string), List<Link> links = default(List<Link>))
        {
            this.ClosedPeriodId = closedPeriodId;
            this.DisplayName = displayName;
            this.Description = description;
            this.EffectiveStart = effectiveStart;
            this.EffectiveEnd = effectiveEnd;
            this.AsAtClosed = asAtClosed;
            this.Properties = properties;
            this.VarVersion = varVersion;
            this.PostCloseActivities = postCloseActivities;
            this.HoldingsAsAtClosedOverride = holdingsAsAtClosedOverride;
            this.Href = href;
            this.Links = links;
        }

        /// <summary>
        /// The unique Id of the Closed Period. The ClosedPeriodId, together with the Timeline Scope and Code, uniquely identifies a Closed Period
        /// </summary>
        /// <value>The unique Id of the Closed Period. The ClosedPeriodId, together with the Timeline Scope and Code, uniquely identifies a Closed Period</value>
        [DataMember(Name = "closedPeriodId", EmitDefaultValue = true)]
        public string ClosedPeriodId { get; set; }

        /// <summary>
        /// The name of the Closed Period.
        /// </summary>
        /// <value>The name of the Closed Period.</value>
        [DataMember(Name = "displayName", EmitDefaultValue = true)]
        public string DisplayName { get; set; }

        /// <summary>
        /// A description for the Closed Period.
        /// </summary>
        /// <value>A description for the Closed Period.</value>
        [DataMember(Name = "description", EmitDefaultValue = true)]
        public string Description { get; set; }

        /// <summary>
        /// The effective start of the Closed Period
        /// </summary>
        /// <value>The effective start of the Closed Period</value>
        [DataMember(Name = "effectiveStart", EmitDefaultValue = false)]
        public DateTimeOffset EffectiveStart { get; set; }

        /// <summary>
        /// The effective end of the Closed Period
        /// </summary>
        /// <value>The effective end of the Closed Period</value>
        [DataMember(Name = "effectiveEnd", EmitDefaultValue = false)]
        public DateTimeOffset EffectiveEnd { get; set; }

        /// <summary>
        /// The asAt closed datetime for the Closed Period
        /// </summary>
        /// <value>The asAt closed datetime for the Closed Period</value>
        [DataMember(Name = "asAtClosed", EmitDefaultValue = false)]
        public DateTimeOffset AsAtClosed { get; set; }

        /// <summary>
        /// The Closed Periods properties. These will be from the &#39;ClosedPeriod&#39; domain.
        /// </summary>
        /// <value>The Closed Periods properties. These will be from the &#39;ClosedPeriod&#39; domain.</value>
        [DataMember(Name = "properties", EmitDefaultValue = true)]
        public Dictionary<string, Property> Properties { get; set; }

        /// <summary>
        /// Gets or Sets VarVersion
        /// </summary>
        [DataMember(Name = "version", EmitDefaultValue = false)]
        public ModelVersion VarVersion { get; set; }

        /// <summary>
        /// All the post close activities for the closed period.
        /// </summary>
        /// <value>All the post close activities for the closed period.</value>
        [DataMember(Name = "postCloseActivities", EmitDefaultValue = true)]
        public List<PostCloseActivity> PostCloseActivities { get; set; }

        /// <summary>
        /// The optional AsAtClosed Override to use for building holdings in the Closed Period.If not specified, the AsAtClosed on the Closed Period will be used.
        /// </summary>
        /// <value>The optional AsAtClosed Override to use for building holdings in the Closed Period.If not specified, the AsAtClosed on the Closed Period will be used.</value>
        [DataMember(Name = "holdingsAsAtClosedOverride", EmitDefaultValue = true)]
        public DateTimeOffset? HoldingsAsAtClosedOverride { get; set; }

        /// <summary>
        /// The specific Uniform Resource Identifier (URI) for this resource at the requested asAt datetime.
        /// </summary>
        /// <value>The specific Uniform Resource Identifier (URI) for this resource at the requested asAt datetime.</value>
        [DataMember(Name = "href", EmitDefaultValue = true)]
        public string Href { get; set; }

        /// <summary>
        /// Gets or Sets Links
        /// </summary>
        [DataMember(Name = "links", EmitDefaultValue = true)]
        public List<Link> Links { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ClosedPeriod {\n");
            sb.Append("  ClosedPeriodId: ").Append(ClosedPeriodId).Append("\n");
            sb.Append("  DisplayName: ").Append(DisplayName).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  EffectiveStart: ").Append(EffectiveStart).Append("\n");
            sb.Append("  EffectiveEnd: ").Append(EffectiveEnd).Append("\n");
            sb.Append("  AsAtClosed: ").Append(AsAtClosed).Append("\n");
            sb.Append("  Properties: ").Append(Properties).Append("\n");
            sb.Append("  VarVersion: ").Append(VarVersion).Append("\n");
            sb.Append("  PostCloseActivities: ").Append(PostCloseActivities).Append("\n");
            sb.Append("  HoldingsAsAtClosedOverride: ").Append(HoldingsAsAtClosedOverride).Append("\n");
            sb.Append("  Href: ").Append(Href).Append("\n");
            sb.Append("  Links: ").Append(Links).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ClosedPeriod);
        }

        /// <summary>
        /// Returns true if ClosedPeriod instances are equal
        /// </summary>
        /// <param name="input">Instance of ClosedPeriod to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ClosedPeriod input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.ClosedPeriodId == input.ClosedPeriodId ||
                    (this.ClosedPeriodId != null &&
                    this.ClosedPeriodId.Equals(input.ClosedPeriodId))
                ) && 
                (
                    this.DisplayName == input.DisplayName ||
                    (this.DisplayName != null &&
                    this.DisplayName.Equals(input.DisplayName))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.EffectiveStart == input.EffectiveStart ||
                    (this.EffectiveStart != null &&
                    this.EffectiveStart.Equals(input.EffectiveStart))
                ) && 
                (
                    this.EffectiveEnd == input.EffectiveEnd ||
                    (this.EffectiveEnd != null &&
                    this.EffectiveEnd.Equals(input.EffectiveEnd))
                ) && 
                (
                    this.AsAtClosed == input.AsAtClosed ||
                    (this.AsAtClosed != null &&
                    this.AsAtClosed.Equals(input.AsAtClosed))
                ) && 
                (
                    this.Properties == input.Properties ||
                    this.Properties != null &&
                    input.Properties != null &&
                    this.Properties.SequenceEqual(input.Properties)
                ) && 
                (
                    this.VarVersion == input.VarVersion ||
                    (this.VarVersion != null &&
                    this.VarVersion.Equals(input.VarVersion))
                ) && 
                (
                    this.PostCloseActivities == input.PostCloseActivities ||
                    this.PostCloseActivities != null &&
                    input.PostCloseActivities != null &&
                    this.PostCloseActivities.SequenceEqual(input.PostCloseActivities)
                ) && 
                (
                    this.HoldingsAsAtClosedOverride == input.HoldingsAsAtClosedOverride ||
                    (this.HoldingsAsAtClosedOverride != null &&
                    this.HoldingsAsAtClosedOverride.Equals(input.HoldingsAsAtClosedOverride))
                ) && 
                (
                    this.Href == input.Href ||
                    (this.Href != null &&
                    this.Href.Equals(input.Href))
                ) && 
                (
                    this.Links == input.Links ||
                    this.Links != null &&
                    input.Links != null &&
                    this.Links.SequenceEqual(input.Links)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ClosedPeriodId != null)
                {
                    hashCode = (hashCode * 59) + this.ClosedPeriodId.GetHashCode();
                }
                if (this.DisplayName != null)
                {
                    hashCode = (hashCode * 59) + this.DisplayName.GetHashCode();
                }
                if (this.Description != null)
                {
                    hashCode = (hashCode * 59) + this.Description.GetHashCode();
                }
                if (this.EffectiveStart != null)
                {
                    hashCode = (hashCode * 59) + this.EffectiveStart.GetHashCode();
                }
                if (this.EffectiveEnd != null)
                {
                    hashCode = (hashCode * 59) + this.EffectiveEnd.GetHashCode();
                }
                if (this.AsAtClosed != null)
                {
                    hashCode = (hashCode * 59) + this.AsAtClosed.GetHashCode();
                }
                if (this.Properties != null)
                {
                    hashCode = (hashCode * 59) + this.Properties.GetHashCode();
                }
                if (this.VarVersion != null)
                {
                    hashCode = (hashCode * 59) + this.VarVersion.GetHashCode();
                }
                if (this.PostCloseActivities != null)
                {
                    hashCode = (hashCode * 59) + this.PostCloseActivities.GetHashCode();
                }
                if (this.HoldingsAsAtClosedOverride != null)
                {
                    hashCode = (hashCode * 59) + this.HoldingsAsAtClosedOverride.GetHashCode();
                }
                if (this.Href != null)
                {
                    hashCode = (hashCode * 59) + this.Href.GetHashCode();
                }
                if (this.Links != null)
                {
                    hashCode = (hashCode * 59) + this.Links.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
