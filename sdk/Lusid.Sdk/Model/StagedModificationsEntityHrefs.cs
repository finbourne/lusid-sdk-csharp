/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Lusid.Sdk.Client.OpenAPIDateConverter;

namespace Lusid.Sdk.Model
{
    /// <summary>
    /// StagedModificationsEntityHrefs
    /// </summary>
    [DataContract(Name = "StagedModificationsEntityHrefs")]
    public partial class StagedModificationsEntityHrefs : IEquatable<StagedModificationsEntityHrefs>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="StagedModificationsEntityHrefs" /> class.
        /// </summary>
        /// <param name="whenStaged">The specific Uniform Resource Identifier (URI) for the staged modification change at the time when the change was requested..</param>
        /// <param name="preview">The specific Uniform Resource Identifier (URI) for the preview of staged modification change once applied..</param>
        /// <param name="latest">The specific Uniform Resource Identifier (URI) for the staged modification at latest time..</param>
        public StagedModificationsEntityHrefs(string whenStaged = default(string), string preview = default(string), string latest = default(string))
        {
            this.WhenStaged = whenStaged;
            this.Preview = preview;
            this.Latest = latest;
        }

        /// <summary>
        /// The specific Uniform Resource Identifier (URI) for the staged modification change at the time when the change was requested.
        /// </summary>
        /// <value>The specific Uniform Resource Identifier (URI) for the staged modification change at the time when the change was requested.</value>
        [DataMember(Name = "whenStaged", EmitDefaultValue = true)]
        public string WhenStaged { get; set; }

        /// <summary>
        /// The specific Uniform Resource Identifier (URI) for the preview of staged modification change once applied.
        /// </summary>
        /// <value>The specific Uniform Resource Identifier (URI) for the preview of staged modification change once applied.</value>
        [DataMember(Name = "preview", EmitDefaultValue = true)]
        public string Preview { get; set; }

        /// <summary>
        /// The specific Uniform Resource Identifier (URI) for the staged modification at latest time.
        /// </summary>
        /// <value>The specific Uniform Resource Identifier (URI) for the staged modification at latest time.</value>
        [DataMember(Name = "latest", EmitDefaultValue = true)]
        public string Latest { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class StagedModificationsEntityHrefs {\n");
            sb.Append("  WhenStaged: ").Append(WhenStaged).Append("\n");
            sb.Append("  Preview: ").Append(Preview).Append("\n");
            sb.Append("  Latest: ").Append(Latest).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as StagedModificationsEntityHrefs);
        }

        /// <summary>
        /// Returns true if StagedModificationsEntityHrefs instances are equal
        /// </summary>
        /// <param name="input">Instance of StagedModificationsEntityHrefs to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(StagedModificationsEntityHrefs input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.WhenStaged == input.WhenStaged ||
                    (this.WhenStaged != null &&
                    this.WhenStaged.Equals(input.WhenStaged))
                ) && 
                (
                    this.Preview == input.Preview ||
                    (this.Preview != null &&
                    this.Preview.Equals(input.Preview))
                ) && 
                (
                    this.Latest == input.Latest ||
                    (this.Latest != null &&
                    this.Latest.Equals(input.Latest))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.WhenStaged != null)
                {
                    hashCode = (hashCode * 59) + this.WhenStaged.GetHashCode();
                }
                if (this.Preview != null)
                {
                    hashCode = (hashCode * 59) + this.Preview.GetHashCode();
                }
                if (this.Latest != null)
                {
                    hashCode = (hashCode * 59) + this.Latest.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
