/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Lusid.Sdk.Client.OpenAPIDateConverter;

namespace Lusid.Sdk.Model
{
    /// <summary>
    /// Common Trading details for exchange traded instruments like Futures and Bonds
    /// </summary>
    [DataContract(Name = "TradingConventions")]
    public partial class TradingConventions : IEquatable<TradingConventions>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TradingConventions" /> class.
        /// </summary>
        /// <param name="priceScaleFactor">The factor used to scale prices for the instrument. Currently used by LUSID when calculating cost  and notional amounts on transactions. Note this factor does not yet impact Valuation, PV, exposure,  all of which use the scale factor attached to the price quotes in the QuoteStore.  Must be positive and defaults to 1 if not set..</param>
        /// <param name="minimumOrderSize">The Minimum Order Size  Must be non-negative and defaults to 0 if not set..</param>
        /// <param name="minimumOrderIncrement">The Minimum Order Increment  Must be non-negative and defaults to 0 if not set..</param>
        public TradingConventions(decimal priceScaleFactor = default(decimal), decimal minimumOrderSize = default(decimal), decimal minimumOrderIncrement = default(decimal))
        {
            this.PriceScaleFactor = priceScaleFactor;
            this.MinimumOrderSize = minimumOrderSize;
            this.MinimumOrderIncrement = minimumOrderIncrement;
        }

        /// <summary>
        /// The factor used to scale prices for the instrument. Currently used by LUSID when calculating cost  and notional amounts on transactions. Note this factor does not yet impact Valuation, PV, exposure,  all of which use the scale factor attached to the price quotes in the QuoteStore.  Must be positive and defaults to 1 if not set.
        /// </summary>
        /// <value>The factor used to scale prices for the instrument. Currently used by LUSID when calculating cost  and notional amounts on transactions. Note this factor does not yet impact Valuation, PV, exposure,  all of which use the scale factor attached to the price quotes in the QuoteStore.  Must be positive and defaults to 1 if not set.</value>
        [DataMember(Name = "priceScaleFactor", EmitDefaultValue = true)]
        public decimal PriceScaleFactor { get; set; }

        /// <summary>
        /// The Minimum Order Size  Must be non-negative and defaults to 0 if not set.
        /// </summary>
        /// <value>The Minimum Order Size  Must be non-negative and defaults to 0 if not set.</value>
        [DataMember(Name = "minimumOrderSize", EmitDefaultValue = true)]
        public decimal MinimumOrderSize { get; set; }

        /// <summary>
        /// The Minimum Order Increment  Must be non-negative and defaults to 0 if not set.
        /// </summary>
        /// <value>The Minimum Order Increment  Must be non-negative and defaults to 0 if not set.</value>
        [DataMember(Name = "minimumOrderIncrement", EmitDefaultValue = true)]
        public decimal MinimumOrderIncrement { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class TradingConventions {\n");
            sb.Append("  PriceScaleFactor: ").Append(PriceScaleFactor).Append("\n");
            sb.Append("  MinimumOrderSize: ").Append(MinimumOrderSize).Append("\n");
            sb.Append("  MinimumOrderIncrement: ").Append(MinimumOrderIncrement).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TradingConventions);
        }

        /// <summary>
        /// Returns true if TradingConventions instances are equal
        /// </summary>
        /// <param name="input">Instance of TradingConventions to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TradingConventions input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.PriceScaleFactor == input.PriceScaleFactor ||
                    this.PriceScaleFactor.Equals(input.PriceScaleFactor)
                ) && 
                (
                    this.MinimumOrderSize == input.MinimumOrderSize ||
                    this.MinimumOrderSize.Equals(input.MinimumOrderSize)
                ) && 
                (
                    this.MinimumOrderIncrement == input.MinimumOrderIncrement ||
                    this.MinimumOrderIncrement.Equals(input.MinimumOrderIncrement)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.PriceScaleFactor.GetHashCode();
                hashCode = (hashCode * 59) + this.MinimumOrderSize.GetHashCode();
                hashCode = (hashCode * 59) + this.MinimumOrderIncrement.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
