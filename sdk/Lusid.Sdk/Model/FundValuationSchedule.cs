/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Lusid.Sdk.Client.OpenAPIDateConverter;

namespace Lusid.Sdk.Model
{
    /// <summary>
    /// Specification object for the valuation schedule, how do we determine which days we wish to perform a valuation upon.
    /// </summary>
    [DataContract(Name = "FundValuationSchedule")]
    public partial class FundValuationSchedule : IEquatable<FundValuationSchedule>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FundValuationSchedule" /> class.
        /// </summary>
        /// <param name="effectiveFrom">If present, the EffectiveFrom and EffectiveAt dates are interpreted as a range of dates for which to perform a valuation. In this case, valuation is calculated for the portfolio(s) for each business day in the given range..</param>
        /// <param name="effectiveAt">The market data time, i.e. the time to run the valuation request effective of..</param>
        /// <param name="diaryEntry">The diary entry to use for the valuation schedule. This is used to determine the date on which the valuation should be performed..</param>
        /// <param name="tenor">Tenor, e.g \&quot;1D\&quot;, \&quot;1M\&quot; to be used in generating the date schedule when effectiveFrom and effectiveAt are both given and are not the same..</param>
        /// <param name="rollConvention">When Tenor is given and is \&quot;1M\&quot; or longer, this specifies the rule which should be used to generate the date schedule. For example, \&quot;EndOfMonth\&quot; to generate end of month dates, or \&quot;1\&quot; to specify the first day of the applicable month..</param>
        /// <param name="holidayCalendars">The holiday calendar(s) that should be used in determining the date schedule. Holiday calendar(s) are supplied by their names, for example, \&quot;CoppClark\&quot;. Note that when the calendars are not available (e.g. when the user has insufficient permissions), a recipe setting will be used to determine whether the whole batch should then fail or whether the calendar not being available should simply be ignored..</param>
        /// <param name="valuationDateTimes">If given, this is the exact set of dates on which to perform a valuation. This will replace/override all other specified values if given..</param>
        /// <param name="businessDayConvention">When Tenor is given and is not equal to \&quot;1D\&quot;, there may be cases where \&quot;date + tenor\&quot; land on non-business days around month end. In that case, the BusinessDayConvention, e.g. modified following \&quot;MF\&quot; would be applied to determine the next GBD..</param>
        public FundValuationSchedule(DateTimeOrCutLabel effectiveFrom = default(DateTimeOrCutLabel), DateTimeOrCutLabel effectiveAt = default(DateTimeOrCutLabel), string diaryEntry = default(string), string tenor = default(string), string rollConvention = default(string), List<string> holidayCalendars = default(List<string>), List<string> valuationDateTimes = default(List<string>), string businessDayConvention = default(string))
        {
            this.EffectiveFrom = effectiveFrom;
            this.EffectiveAt = effectiveAt;
            this.DiaryEntry = diaryEntry;
            this.Tenor = tenor;
            this.RollConvention = rollConvention;
            this.HolidayCalendars = holidayCalendars;
            this.ValuationDateTimes = valuationDateTimes;
            this.BusinessDayConvention = businessDayConvention;
        }

        /// <summary>
        /// If present, the EffectiveFrom and EffectiveAt dates are interpreted as a range of dates for which to perform a valuation. In this case, valuation is calculated for the portfolio(s) for each business day in the given range.
        /// </summary>
        /// <value>If present, the EffectiveFrom and EffectiveAt dates are interpreted as a range of dates for which to perform a valuation. In this case, valuation is calculated for the portfolio(s) for each business day in the given range.</value>
        [DataMember(Name = "effectiveFrom", EmitDefaultValue = true)]
        public DateTimeOrCutLabel EffectiveFrom { get; set; }

        /// <summary>
        /// The market data time, i.e. the time to run the valuation request effective of.
        /// </summary>
        /// <value>The market data time, i.e. the time to run the valuation request effective of.</value>
        [DataMember(Name = "effectiveAt", EmitDefaultValue = true)]
        public DateTimeOrCutLabel EffectiveAt { get; set; }

        /// <summary>
        /// The diary entry to use for the valuation schedule. This is used to determine the date on which the valuation should be performed.
        /// </summary>
        /// <value>The diary entry to use for the valuation schedule. This is used to determine the date on which the valuation should be performed.</value>
        [DataMember(Name = "diaryEntry", EmitDefaultValue = true)]
        public string DiaryEntry { get; set; }

        /// <summary>
        /// Tenor, e.g \&quot;1D\&quot;, \&quot;1M\&quot; to be used in generating the date schedule when effectiveFrom and effectiveAt are both given and are not the same.
        /// </summary>
        /// <value>Tenor, e.g \&quot;1D\&quot;, \&quot;1M\&quot; to be used in generating the date schedule when effectiveFrom and effectiveAt are both given and are not the same.</value>
        [DataMember(Name = "tenor", EmitDefaultValue = true)]
        public string Tenor { get; set; }

        /// <summary>
        /// When Tenor is given and is \&quot;1M\&quot; or longer, this specifies the rule which should be used to generate the date schedule. For example, \&quot;EndOfMonth\&quot; to generate end of month dates, or \&quot;1\&quot; to specify the first day of the applicable month.
        /// </summary>
        /// <value>When Tenor is given and is \&quot;1M\&quot; or longer, this specifies the rule which should be used to generate the date schedule. For example, \&quot;EndOfMonth\&quot; to generate end of month dates, or \&quot;1\&quot; to specify the first day of the applicable month.</value>
        [DataMember(Name = "rollConvention", EmitDefaultValue = true)]
        public string RollConvention { get; set; }

        /// <summary>
        /// The holiday calendar(s) that should be used in determining the date schedule. Holiday calendar(s) are supplied by their names, for example, \&quot;CoppClark\&quot;. Note that when the calendars are not available (e.g. when the user has insufficient permissions), a recipe setting will be used to determine whether the whole batch should then fail or whether the calendar not being available should simply be ignored.
        /// </summary>
        /// <value>The holiday calendar(s) that should be used in determining the date schedule. Holiday calendar(s) are supplied by their names, for example, \&quot;CoppClark\&quot;. Note that when the calendars are not available (e.g. when the user has insufficient permissions), a recipe setting will be used to determine whether the whole batch should then fail or whether the calendar not being available should simply be ignored.</value>
        [DataMember(Name = "holidayCalendars", EmitDefaultValue = true)]
        public List<string> HolidayCalendars { get; set; }

        /// <summary>
        /// If given, this is the exact set of dates on which to perform a valuation. This will replace/override all other specified values if given.
        /// </summary>
        /// <value>If given, this is the exact set of dates on which to perform a valuation. This will replace/override all other specified values if given.</value>
        [DataMember(Name = "valuationDateTimes", EmitDefaultValue = true)]
        public List<string> ValuationDateTimes { get; set; }

        /// <summary>
        /// When Tenor is given and is not equal to \&quot;1D\&quot;, there may be cases where \&quot;date + tenor\&quot; land on non-business days around month end. In that case, the BusinessDayConvention, e.g. modified following \&quot;MF\&quot; would be applied to determine the next GBD.
        /// </summary>
        /// <value>When Tenor is given and is not equal to \&quot;1D\&quot;, there may be cases where \&quot;date + tenor\&quot; land on non-business days around month end. In that case, the BusinessDayConvention, e.g. modified following \&quot;MF\&quot; would be applied to determine the next GBD.</value>
        [DataMember(Name = "businessDayConvention", EmitDefaultValue = true)]
        public string BusinessDayConvention { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class FundValuationSchedule {\n");
            sb.Append("  EffectiveFrom: ").Append(EffectiveFrom).Append("\n");
            sb.Append("  EffectiveAt: ").Append(EffectiveAt).Append("\n");
            sb.Append("  DiaryEntry: ").Append(DiaryEntry).Append("\n");
            sb.Append("  Tenor: ").Append(Tenor).Append("\n");
            sb.Append("  RollConvention: ").Append(RollConvention).Append("\n");
            sb.Append("  HolidayCalendars: ").Append(HolidayCalendars).Append("\n");
            sb.Append("  ValuationDateTimes: ").Append(ValuationDateTimes).Append("\n");
            sb.Append("  BusinessDayConvention: ").Append(BusinessDayConvention).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as FundValuationSchedule);
        }

        /// <summary>
        /// Returns true if FundValuationSchedule instances are equal
        /// </summary>
        /// <param name="input">Instance of FundValuationSchedule to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FundValuationSchedule input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.EffectiveFrom == input.EffectiveFrom ||
                    (this.EffectiveFrom != null &&
                    this.EffectiveFrom.Equals(input.EffectiveFrom))
                ) && 
                (
                    this.EffectiveAt == input.EffectiveAt ||
                    (this.EffectiveAt != null &&
                    this.EffectiveAt.Equals(input.EffectiveAt))
                ) && 
                (
                    this.DiaryEntry == input.DiaryEntry ||
                    (this.DiaryEntry != null &&
                    this.DiaryEntry.Equals(input.DiaryEntry))
                ) && 
                (
                    this.Tenor == input.Tenor ||
                    (this.Tenor != null &&
                    this.Tenor.Equals(input.Tenor))
                ) && 
                (
                    this.RollConvention == input.RollConvention ||
                    (this.RollConvention != null &&
                    this.RollConvention.Equals(input.RollConvention))
                ) && 
                (
                    this.HolidayCalendars == input.HolidayCalendars ||
                    this.HolidayCalendars != null &&
                    input.HolidayCalendars != null &&
                    this.HolidayCalendars.SequenceEqual(input.HolidayCalendars)
                ) && 
                (
                    this.ValuationDateTimes == input.ValuationDateTimes ||
                    this.ValuationDateTimes != null &&
                    input.ValuationDateTimes != null &&
                    this.ValuationDateTimes.SequenceEqual(input.ValuationDateTimes)
                ) && 
                (
                    this.BusinessDayConvention == input.BusinessDayConvention ||
                    (this.BusinessDayConvention != null &&
                    this.BusinessDayConvention.Equals(input.BusinessDayConvention))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.EffectiveFrom != null)
                {
                    hashCode = (hashCode * 59) + this.EffectiveFrom.GetHashCode();
                }
                if (this.EffectiveAt != null)
                {
                    hashCode = (hashCode * 59) + this.EffectiveAt.GetHashCode();
                }
                if (this.DiaryEntry != null)
                {
                    hashCode = (hashCode * 59) + this.DiaryEntry.GetHashCode();
                }
                if (this.Tenor != null)
                {
                    hashCode = (hashCode * 59) + this.Tenor.GetHashCode();
                }
                if (this.RollConvention != null)
                {
                    hashCode = (hashCode * 59) + this.RollConvention.GetHashCode();
                }
                if (this.HolidayCalendars != null)
                {
                    hashCode = (hashCode * 59) + this.HolidayCalendars.GetHashCode();
                }
                if (this.ValuationDateTimes != null)
                {
                    hashCode = (hashCode * 59) + this.ValuationDateTimes.GetHashCode();
                }
                if (this.BusinessDayConvention != null)
                {
                    hashCode = (hashCode * 59) + this.BusinessDayConvention.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // DiaryEntry (string) maxLength
            if (this.DiaryEntry != null && this.DiaryEntry.Length > 64)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for DiaryEntry, length must be less than 64.", new [] { "DiaryEntry" });
            }

            // DiaryEntry (string) minLength
            if (this.DiaryEntry != null && this.DiaryEntry.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for DiaryEntry, length must be greater than 1.", new [] { "DiaryEntry" });
            }

            // DiaryEntry (string) pattern
            Regex regexDiaryEntry = new Regex(@"^[a-zA-Z0-9\-_]+$", RegexOptions.CultureInvariant);
            if (false == regexDiaryEntry.Match(this.DiaryEntry).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for DiaryEntry, must match a pattern of " + regexDiaryEntry, new [] { "DiaryEntry" });
            }

            // Tenor (string) maxLength
            if (this.Tenor != null && this.Tenor.Length > 16)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Tenor, length must be less than 16.", new [] { "Tenor" });
            }

            // Tenor (string) minLength
            if (this.Tenor != null && this.Tenor.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Tenor, length must be greater than 0.", new [] { "Tenor" });
            }

            // RollConvention (string) maxLength
            if (this.RollConvention != null && this.RollConvention.Length > 50)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for RollConvention, length must be less than 50.", new [] { "RollConvention" });
            }

            // RollConvention (string) minLength
            if (this.RollConvention != null && this.RollConvention.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for RollConvention, length must be greater than 0.", new [] { "RollConvention" });
            }

            // BusinessDayConvention (string) maxLength
            if (this.BusinessDayConvention != null && this.BusinessDayConvention.Length > 50)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for BusinessDayConvention, length must be less than 50.", new [] { "BusinessDayConvention" });
            }

            // BusinessDayConvention (string) minLength
            if (this.BusinessDayConvention != null && this.BusinessDayConvention.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for BusinessDayConvention, length must be greater than 0.", new [] { "BusinessDayConvention" });
            }

            yield break;
        }
    }
}
