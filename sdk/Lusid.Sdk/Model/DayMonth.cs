/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Lusid.Sdk.Client.OpenAPIDateConverter;

namespace Lusid.Sdk.Model
{
    /// <summary>
    /// DayMonth
    /// </summary>
    [DataContract(Name = "DayMonth")]
    public partial class DayMonth : IEquatable<DayMonth>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DayMonth" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected DayMonth() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="DayMonth" /> class.
        /// </summary>
        /// <param name="day">Day part of Day, Month for Year End date specification. (required).</param>
        /// <param name="month">Month part of Day, Month for Year End date specification. (required).</param>
        public DayMonth(int day = default(int), int month = default(int))
        {
            this.Day = day;
            this.Month = month;
        }

        /// <summary>
        /// Day part of Day, Month for Year End date specification.
        /// </summary>
        /// <value>Day part of Day, Month for Year End date specification.</value>
        [DataMember(Name = "day", IsRequired = true, EmitDefaultValue = true)]
        public int Day { get; set; }

        /// <summary>
        /// Month part of Day, Month for Year End date specification.
        /// </summary>
        /// <value>Month part of Day, Month for Year End date specification.</value>
        [DataMember(Name = "month", IsRequired = true, EmitDefaultValue = true)]
        public int Month { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DayMonth {\n");
            sb.Append("  Day: ").Append(Day).Append("\n");
            sb.Append("  Month: ").Append(Month).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DayMonth);
        }

        /// <summary>
        /// Returns true if DayMonth instances are equal
        /// </summary>
        /// <param name="input">Instance of DayMonth to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DayMonth input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Day == input.Day ||
                    this.Day.Equals(input.Day)
                ) && 
                (
                    this.Month == input.Month ||
                    this.Month.Equals(input.Month)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Day.GetHashCode();
                hashCode = (hashCode * 59) + this.Month.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Day (int) maximum
            if (this.Day > (int)31)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Day, must be a value less than or equal to 31.", new [] { "Day" });
            }

            // Day (int) minimum
            if (this.Day < (int)1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Day, must be a value greater than or equal to 1.", new [] { "Day" });
            }

            // Month (int) maximum
            if (this.Month > (int)12)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Month, must be a value less than or equal to 12.", new [] { "Month" });
            }

            // Month (int) minimum
            if (this.Month < (int)1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Month, must be a value greater than or equal to 1.", new [] { "Month" });
            }

            yield break;
        }
    }
}
