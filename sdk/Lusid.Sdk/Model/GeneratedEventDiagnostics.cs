/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Lusid.Sdk.Client.OpenAPIDateConverter;

namespace Lusid.Sdk.Model
{
    /// <summary>
    /// Represents a set of diagnostics per generatedEvent, where applicable.
    /// </summary>
    [DataContract(Name = "GeneratedEventDiagnostics")]
    public partial class GeneratedEventDiagnostics : IEquatable<GeneratedEventDiagnostics>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GeneratedEventDiagnostics" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected GeneratedEventDiagnostics() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="GeneratedEventDiagnostics" /> class.
        /// </summary>
        /// <param name="instrumentEventId">instrumentEventId (required).</param>
        /// <param name="type">type (required).</param>
        /// <param name="detail">detail (required).</param>
        /// <param name="errorDetails">errorDetails (required).</param>
        public GeneratedEventDiagnostics(string instrumentEventId = default(string), string type = default(string), string detail = default(string), List<string> errorDetails = default(List<string>))
        {
            // to ensure "instrumentEventId" is required (not null)
            if (instrumentEventId == null)
            {
                throw new ArgumentNullException("instrumentEventId is a required property for GeneratedEventDiagnostics and cannot be null");
            }
            this.InstrumentEventId = instrumentEventId;
            // to ensure "type" is required (not null)
            if (type == null)
            {
                throw new ArgumentNullException("type is a required property for GeneratedEventDiagnostics and cannot be null");
            }
            this.Type = type;
            // to ensure "detail" is required (not null)
            if (detail == null)
            {
                throw new ArgumentNullException("detail is a required property for GeneratedEventDiagnostics and cannot be null");
            }
            this.Detail = detail;
            // to ensure "errorDetails" is required (not null)
            if (errorDetails == null)
            {
                throw new ArgumentNullException("errorDetails is a required property for GeneratedEventDiagnostics and cannot be null");
            }
            this.ErrorDetails = errorDetails;
        }

        /// <summary>
        /// Gets or Sets InstrumentEventId
        /// </summary>
        [DataMember(Name = "instrumentEventId", IsRequired = true, EmitDefaultValue = true)]
        public string InstrumentEventId { get; set; }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name = "type", IsRequired = true, EmitDefaultValue = true)]
        public string Type { get; set; }

        /// <summary>
        /// Gets or Sets Detail
        /// </summary>
        [DataMember(Name = "detail", IsRequired = true, EmitDefaultValue = true)]
        public string Detail { get; set; }

        /// <summary>
        /// Gets or Sets ErrorDetails
        /// </summary>
        [DataMember(Name = "errorDetails", IsRequired = true, EmitDefaultValue = true)]
        public List<string> ErrorDetails { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class GeneratedEventDiagnostics {\n");
            sb.Append("  InstrumentEventId: ").Append(InstrumentEventId).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Detail: ").Append(Detail).Append("\n");
            sb.Append("  ErrorDetails: ").Append(ErrorDetails).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GeneratedEventDiagnostics);
        }

        /// <summary>
        /// Returns true if GeneratedEventDiagnostics instances are equal
        /// </summary>
        /// <param name="input">Instance of GeneratedEventDiagnostics to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GeneratedEventDiagnostics input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.InstrumentEventId == input.InstrumentEventId ||
                    (this.InstrumentEventId != null &&
                    this.InstrumentEventId.Equals(input.InstrumentEventId))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.Detail == input.Detail ||
                    (this.Detail != null &&
                    this.Detail.Equals(input.Detail))
                ) && 
                (
                    this.ErrorDetails == input.ErrorDetails ||
                    this.ErrorDetails != null &&
                    input.ErrorDetails != null &&
                    this.ErrorDetails.SequenceEqual(input.ErrorDetails)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.InstrumentEventId != null)
                {
                    hashCode = (hashCode * 59) + this.InstrumentEventId.GetHashCode();
                }
                if (this.Type != null)
                {
                    hashCode = (hashCode * 59) + this.Type.GetHashCode();
                }
                if (this.Detail != null)
                {
                    hashCode = (hashCode * 59) + this.Detail.GetHashCode();
                }
                if (this.ErrorDetails != null)
                {
                    hashCode = (hashCode * 59) + this.ErrorDetails.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // InstrumentEventId (string) minLength
            if (this.InstrumentEventId != null && this.InstrumentEventId.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for InstrumentEventId, length must be greater than 1.", new [] { "InstrumentEventId" });
            }

            // Type (string) minLength
            if (this.Type != null && this.Type.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Type, length must be greater than 1.", new [] { "Type" });
            }

            // Detail (string) minLength
            if (this.Detail != null && this.Detail.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Detail, length must be greater than 1.", new [] { "Detail" });
            }

            yield break;
        }
    }
}
