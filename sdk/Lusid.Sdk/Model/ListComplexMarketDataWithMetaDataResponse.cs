/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Lusid.Sdk.Client.OpenAPIDateConverter;

namespace Lusid.Sdk.Model
{
    /// <summary>
    /// Wraps a Finbourne.WebApi.Interface.Dto.ComplexMarketData.ComplexMarketData object with information that was retrieved from storage with it.  In particular,  the scope that the data was stored in,  and a &lt;seealso cref&#x3D;\&quot;T:Finbourne.WebApi.Interface.Dto.ComplexMarketData.ComplexMarketDataId\&quot; /&gt; object identifying the market data in that scope.
    /// </summary>
    [DataContract(Name = "ListComplexMarketDataWithMetaDataResponse")]
    public partial class ListComplexMarketDataWithMetaDataResponse : IEquatable<ListComplexMarketDataWithMetaDataResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ListComplexMarketDataWithMetaDataResponse" /> class.
        /// </summary>
        /// <param name="scope">The scope that the listed ComplexMarketData entity is stored in..</param>
        /// <param name="marketDataId">marketDataId.</param>
        /// <param name="marketData">marketData.</param>
        public ListComplexMarketDataWithMetaDataResponse(string scope = default(string), ComplexMarketDataId marketDataId = default(ComplexMarketDataId), ComplexMarketData marketData = default(ComplexMarketData))
        {
            this.Scope = scope;
            this.MarketDataId = marketDataId;
            this.MarketData = marketData;
        }

        /// <summary>
        /// The scope that the listed ComplexMarketData entity is stored in.
        /// </summary>
        /// <value>The scope that the listed ComplexMarketData entity is stored in.</value>
        [DataMember(Name = "scope", EmitDefaultValue = true)]
        public string Scope { get; set; }

        /// <summary>
        /// Gets or Sets MarketDataId
        /// </summary>
        [DataMember(Name = "marketDataId", EmitDefaultValue = false)]
        public ComplexMarketDataId MarketDataId { get; set; }

        /// <summary>
        /// Gets or Sets MarketData
        /// </summary>
        [DataMember(Name = "marketData", EmitDefaultValue = false)]
        public ComplexMarketData MarketData { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ListComplexMarketDataWithMetaDataResponse {\n");
            sb.Append("  Scope: ").Append(Scope).Append("\n");
            sb.Append("  MarketDataId: ").Append(MarketDataId).Append("\n");
            sb.Append("  MarketData: ").Append(MarketData).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ListComplexMarketDataWithMetaDataResponse);
        }

        /// <summary>
        /// Returns true if ListComplexMarketDataWithMetaDataResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of ListComplexMarketDataWithMetaDataResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ListComplexMarketDataWithMetaDataResponse input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Scope == input.Scope ||
                    (this.Scope != null &&
                    this.Scope.Equals(input.Scope))
                ) && 
                (
                    this.MarketDataId == input.MarketDataId ||
                    (this.MarketDataId != null &&
                    this.MarketDataId.Equals(input.MarketDataId))
                ) && 
                (
                    this.MarketData == input.MarketData ||
                    (this.MarketData != null &&
                    this.MarketData.Equals(input.MarketData))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Scope != null)
                {
                    hashCode = (hashCode * 59) + this.Scope.GetHashCode();
                }
                if (this.MarketDataId != null)
                {
                    hashCode = (hashCode * 59) + this.MarketDataId.GetHashCode();
                }
                if (this.MarketData != null)
                {
                    hashCode = (hashCode * 59) + this.MarketData.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
