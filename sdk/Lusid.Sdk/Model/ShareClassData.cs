/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Lusid.Sdk.Client.OpenAPIDateConverter;

namespace Lusid.Sdk.Model
{
    /// <summary>
    /// The data for a Share Class. Includes Valuation Point Data and instrument information.
    /// </summary>
    [DataContract(Name = "ShareClassData")]
    public partial class ShareClassData : IEquatable<ShareClassData>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ShareClassData" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ShareClassData() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ShareClassData" /> class.
        /// </summary>
        /// <param name="shareClassBreakdown">shareClassBreakdown (required).</param>
        /// <param name="shareClassDetails">shareClassDetails.</param>
        public ShareClassData(ShareClassBreakdown shareClassBreakdown = default(ShareClassBreakdown), ShareClassDetails shareClassDetails = default(ShareClassDetails))
        {
            // to ensure "shareClassBreakdown" is required (not null)
            if (shareClassBreakdown == null)
            {
                throw new ArgumentNullException("shareClassBreakdown is a required property for ShareClassData and cannot be null");
            }
            this.ShareClassBreakdown = shareClassBreakdown;
            this.ShareClassDetails = shareClassDetails;
        }

        /// <summary>
        /// Gets or Sets ShareClassBreakdown
        /// </summary>
        [DataMember(Name = "shareClassBreakdown", IsRequired = true, EmitDefaultValue = true)]
        public ShareClassBreakdown ShareClassBreakdown { get; set; }

        /// <summary>
        /// Gets or Sets ShareClassDetails
        /// </summary>
        [DataMember(Name = "shareClassDetails", EmitDefaultValue = false)]
        public ShareClassDetails ShareClassDetails { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ShareClassData {\n");
            sb.Append("  ShareClassBreakdown: ").Append(ShareClassBreakdown).Append("\n");
            sb.Append("  ShareClassDetails: ").Append(ShareClassDetails).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ShareClassData);
        }

        /// <summary>
        /// Returns true if ShareClassData instances are equal
        /// </summary>
        /// <param name="input">Instance of ShareClassData to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ShareClassData input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.ShareClassBreakdown == input.ShareClassBreakdown ||
                    (this.ShareClassBreakdown != null &&
                    this.ShareClassBreakdown.Equals(input.ShareClassBreakdown))
                ) && 
                (
                    this.ShareClassDetails == input.ShareClassDetails ||
                    (this.ShareClassDetails != null &&
                    this.ShareClassDetails.Equals(input.ShareClassDetails))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ShareClassBreakdown != null)
                {
                    hashCode = (hashCode * 59) + this.ShareClassBreakdown.GetHashCode();
                }
                if (this.ShareClassDetails != null)
                {
                    hashCode = (hashCode * 59) + this.ShareClassDetails.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
