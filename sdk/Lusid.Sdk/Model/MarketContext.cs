/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Lusid.Sdk.Client.OpenAPIDateConverter;

namespace Lusid.Sdk.Model
{
    /// <summary>
    /// Market context node. This defines how LUSID processes parts of a request that require resolution of market data such as instrument prices or  Fx rates. It controls where the data is loaded from and which sources take precedence.
    /// </summary>
    [DataContract(Name = "MarketContext")]
    public partial class MarketContext : IEquatable<MarketContext>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="MarketContext" /> class.
        /// </summary>
        /// <param name="marketRules">The set of rules that define how to resolve particular use cases. These can be relatively general or specific in nature.  Nominally any number are possible and will be processed in order where applicable. However, there is evidently a potential  for increased computational cost where many rules must be applied to resolve data. Ensuring that portfolios are structured in  such a way as to reduce the number of rules required is therefore sensible..</param>
        /// <param name="suppliers">suppliers.</param>
        /// <param name="options">options.</param>
        /// <param name="specificRules">Extends market data key rules to be able to catch dependencies depending on where the dependency comes from, as opposed to what the dependency is asking for.  Using two specific rules, one could instruct rates curves requested by bonds to be retrieved from a different scope than rates curves requested by swaps.  WARNING: The use of specific rules impacts performance. Where possible, one should use MarketDataKeyRules only..</param>
        /// <param name="groupedMarketRules">The list of groups of rules that will be used in market data resolution.  Rules given within a group will, if the group is being used to resolve data,  all be applied with the results of those individual resolution attempts combined into a single result.  The method for combining results is determined by the operation detailed in the GroupOfMarketDataKeyRules.                Notes:  - When resolving MarketData, MarketRules will be applied first followed by GroupedMarketRules  if data could not be found using only the MarketRules provided.  - GroupedMarketRules can only be used for resolving data from the QuoteStore.                Caution: As every rule in a given group will be applied in resolution if the group is applied,  groups are computationally expensive for market data resolution.  Therefore, heuristically, rule groups should be kept as small as possible..</param>
        public MarketContext(List<MarketDataKeyRule> marketRules = default(List<MarketDataKeyRule>), MarketContextSuppliers suppliers = default(MarketContextSuppliers), MarketOptions options = default(MarketOptions), List<MarketDataSpecificRule> specificRules = default(List<MarketDataSpecificRule>), List<GroupOfMarketDataKeyRules> groupedMarketRules = default(List<GroupOfMarketDataKeyRules>))
        {
            this.MarketRules = marketRules;
            this.Suppliers = suppliers;
            this.Options = options;
            this.SpecificRules = specificRules;
            this.GroupedMarketRules = groupedMarketRules;
        }

        /// <summary>
        /// The set of rules that define how to resolve particular use cases. These can be relatively general or specific in nature.  Nominally any number are possible and will be processed in order where applicable. However, there is evidently a potential  for increased computational cost where many rules must be applied to resolve data. Ensuring that portfolios are structured in  such a way as to reduce the number of rules required is therefore sensible.
        /// </summary>
        /// <value>The set of rules that define how to resolve particular use cases. These can be relatively general or specific in nature.  Nominally any number are possible and will be processed in order where applicable. However, there is evidently a potential  for increased computational cost where many rules must be applied to resolve data. Ensuring that portfolios are structured in  such a way as to reduce the number of rules required is therefore sensible.</value>
        [DataMember(Name = "marketRules", EmitDefaultValue = true)]
        public List<MarketDataKeyRule> MarketRules { get; set; }

        /// <summary>
        /// Gets or Sets Suppliers
        /// </summary>
        [DataMember(Name = "suppliers", EmitDefaultValue = true)]
        public MarketContextSuppliers Suppliers { get; set; }

        /// <summary>
        /// Gets or Sets Options
        /// </summary>
        [DataMember(Name = "options", EmitDefaultValue = false)]
        public MarketOptions Options { get; set; }

        /// <summary>
        /// Extends market data key rules to be able to catch dependencies depending on where the dependency comes from, as opposed to what the dependency is asking for.  Using two specific rules, one could instruct rates curves requested by bonds to be retrieved from a different scope than rates curves requested by swaps.  WARNING: The use of specific rules impacts performance. Where possible, one should use MarketDataKeyRules only.
        /// </summary>
        /// <value>Extends market data key rules to be able to catch dependencies depending on where the dependency comes from, as opposed to what the dependency is asking for.  Using two specific rules, one could instruct rates curves requested by bonds to be retrieved from a different scope than rates curves requested by swaps.  WARNING: The use of specific rules impacts performance. Where possible, one should use MarketDataKeyRules only.</value>
        [DataMember(Name = "specificRules", EmitDefaultValue = true)]
        public List<MarketDataSpecificRule> SpecificRules { get; set; }

        /// <summary>
        /// The list of groups of rules that will be used in market data resolution.  Rules given within a group will, if the group is being used to resolve data,  all be applied with the results of those individual resolution attempts combined into a single result.  The method for combining results is determined by the operation detailed in the GroupOfMarketDataKeyRules.                Notes:  - When resolving MarketData, MarketRules will be applied first followed by GroupedMarketRules  if data could not be found using only the MarketRules provided.  - GroupedMarketRules can only be used for resolving data from the QuoteStore.                Caution: As every rule in a given group will be applied in resolution if the group is applied,  groups are computationally expensive for market data resolution.  Therefore, heuristically, rule groups should be kept as small as possible.
        /// </summary>
        /// <value>The list of groups of rules that will be used in market data resolution.  Rules given within a group will, if the group is being used to resolve data,  all be applied with the results of those individual resolution attempts combined into a single result.  The method for combining results is determined by the operation detailed in the GroupOfMarketDataKeyRules.                Notes:  - When resolving MarketData, MarketRules will be applied first followed by GroupedMarketRules  if data could not be found using only the MarketRules provided.  - GroupedMarketRules can only be used for resolving data from the QuoteStore.                Caution: As every rule in a given group will be applied in resolution if the group is applied,  groups are computationally expensive for market data resolution.  Therefore, heuristically, rule groups should be kept as small as possible.</value>
        [DataMember(Name = "groupedMarketRules", EmitDefaultValue = true)]
        public List<GroupOfMarketDataKeyRules> GroupedMarketRules { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class MarketContext {\n");
            sb.Append("  MarketRules: ").Append(MarketRules).Append("\n");
            sb.Append("  Suppliers: ").Append(Suppliers).Append("\n");
            sb.Append("  Options: ").Append(Options).Append("\n");
            sb.Append("  SpecificRules: ").Append(SpecificRules).Append("\n");
            sb.Append("  GroupedMarketRules: ").Append(GroupedMarketRules).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as MarketContext);
        }

        /// <summary>
        /// Returns true if MarketContext instances are equal
        /// </summary>
        /// <param name="input">Instance of MarketContext to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MarketContext input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.MarketRules == input.MarketRules ||
                    this.MarketRules != null &&
                    input.MarketRules != null &&
                    this.MarketRules.SequenceEqual(input.MarketRules)
                ) && 
                (
                    this.Suppliers == input.Suppliers ||
                    (this.Suppliers != null &&
                    this.Suppliers.Equals(input.Suppliers))
                ) && 
                (
                    this.Options == input.Options ||
                    (this.Options != null &&
                    this.Options.Equals(input.Options))
                ) && 
                (
                    this.SpecificRules == input.SpecificRules ||
                    this.SpecificRules != null &&
                    input.SpecificRules != null &&
                    this.SpecificRules.SequenceEqual(input.SpecificRules)
                ) && 
                (
                    this.GroupedMarketRules == input.GroupedMarketRules ||
                    this.GroupedMarketRules != null &&
                    input.GroupedMarketRules != null &&
                    this.GroupedMarketRules.SequenceEqual(input.GroupedMarketRules)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.MarketRules != null)
                {
                    hashCode = (hashCode * 59) + this.MarketRules.GetHashCode();
                }
                if (this.Suppliers != null)
                {
                    hashCode = (hashCode * 59) + this.Suppliers.GetHashCode();
                }
                if (this.Options != null)
                {
                    hashCode = (hashCode * 59) + this.Options.GetHashCode();
                }
                if (this.SpecificRules != null)
                {
                    hashCode = (hashCode * 59) + this.SpecificRules.GetHashCode();
                }
                if (this.GroupedMarketRules != null)
                {
                    hashCode = (hashCode * 59) + this.GroupedMarketRules.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
