/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Lusid.Sdk.Client.OpenAPIDateConverter;

namespace Lusid.Sdk.Model
{
    /// <summary>
    /// ListAggregationResponse
    /// </summary>
    [DataContract(Name = "ListAggregationResponse")]
    public partial class ListAggregationResponse : IEquatable<ListAggregationResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ListAggregationResponse" /> class.
        /// </summary>
        /// <param name="aggregationEffectiveAt">aggregationEffectiveAt.</param>
        /// <param name="aggregationAsAt">aggregationAsAt.</param>
        /// <param name="href">href.</param>
        /// <param name="data">data.</param>
        /// <param name="aggregationCurrency">aggregationCurrency.</param>
        /// <param name="dataSchema">dataSchema.</param>
        /// <param name="aggregationFailures">aggregationFailures.</param>
        /// <param name="recipeId">recipeId.</param>
        /// <param name="links">links.</param>
        public ListAggregationResponse(DateTimeOffset aggregationEffectiveAt = default(DateTimeOffset), DateTimeOffset aggregationAsAt = default(DateTimeOffset), string href = default(string), List<Dictionary<string, Object>> data = default(List<Dictionary<string, Object>>), string aggregationCurrency = default(string), ResultDataSchema dataSchema = default(ResultDataSchema), List<AggregationMeasureFailureDetail> aggregationFailures = default(List<AggregationMeasureFailureDetail>), ResourceId recipeId = default(ResourceId), List<Link> links = default(List<Link>))
        {
            this.AggregationEffectiveAt = aggregationEffectiveAt;
            this.AggregationAsAt = aggregationAsAt;
            this.Href = href;
            this.Data = data;
            this.AggregationCurrency = aggregationCurrency;
            this.DataSchema = dataSchema;
            this.AggregationFailures = aggregationFailures;
            this.RecipeId = recipeId;
            this.Links = links;
        }

        /// <summary>
        /// Gets or Sets AggregationEffectiveAt
        /// </summary>
        [DataMember(Name = "aggregationEffectiveAt", EmitDefaultValue = false)]
        public DateTimeOffset AggregationEffectiveAt { get; set; }

        /// <summary>
        /// Gets or Sets AggregationAsAt
        /// </summary>
        [DataMember(Name = "aggregationAsAt", EmitDefaultValue = false)]
        public DateTimeOffset AggregationAsAt { get; set; }

        /// <summary>
        /// Gets or Sets Href
        /// </summary>
        [DataMember(Name = "href", EmitDefaultValue = true)]
        public string Href { get; set; }

        /// <summary>
        /// Gets or Sets Data
        /// </summary>
        [DataMember(Name = "data", EmitDefaultValue = true)]
        public List<Dictionary<string, Object>> Data { get; set; }

        /// <summary>
        /// Gets or Sets AggregationCurrency
        /// </summary>
        [DataMember(Name = "aggregationCurrency", EmitDefaultValue = true)]
        public string AggregationCurrency { get; set; }

        /// <summary>
        /// Gets or Sets DataSchema
        /// </summary>
        [DataMember(Name = "dataSchema", EmitDefaultValue = false)]
        public ResultDataSchema DataSchema { get; set; }

        /// <summary>
        /// Gets or Sets AggregationFailures
        /// </summary>
        [DataMember(Name = "aggregationFailures", EmitDefaultValue = true)]
        public List<AggregationMeasureFailureDetail> AggregationFailures { get; set; }

        /// <summary>
        /// Gets or Sets RecipeId
        /// </summary>
        [DataMember(Name = "recipeId", EmitDefaultValue = false)]
        public ResourceId RecipeId { get; set; }

        /// <summary>
        /// Gets or Sets Links
        /// </summary>
        [DataMember(Name = "links", EmitDefaultValue = true)]
        public List<Link> Links { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ListAggregationResponse {\n");
            sb.Append("  AggregationEffectiveAt: ").Append(AggregationEffectiveAt).Append("\n");
            sb.Append("  AggregationAsAt: ").Append(AggregationAsAt).Append("\n");
            sb.Append("  Href: ").Append(Href).Append("\n");
            sb.Append("  Data: ").Append(Data).Append("\n");
            sb.Append("  AggregationCurrency: ").Append(AggregationCurrency).Append("\n");
            sb.Append("  DataSchema: ").Append(DataSchema).Append("\n");
            sb.Append("  AggregationFailures: ").Append(AggregationFailures).Append("\n");
            sb.Append("  RecipeId: ").Append(RecipeId).Append("\n");
            sb.Append("  Links: ").Append(Links).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ListAggregationResponse);
        }

        /// <summary>
        /// Returns true if ListAggregationResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of ListAggregationResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ListAggregationResponse input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.AggregationEffectiveAt == input.AggregationEffectiveAt ||
                    (this.AggregationEffectiveAt != null &&
                    this.AggregationEffectiveAt.Equals(input.AggregationEffectiveAt))
                ) && 
                (
                    this.AggregationAsAt == input.AggregationAsAt ||
                    (this.AggregationAsAt != null &&
                    this.AggregationAsAt.Equals(input.AggregationAsAt))
                ) && 
                (
                    this.Href == input.Href ||
                    (this.Href != null &&
                    this.Href.Equals(input.Href))
                ) && 
                (
                    this.Data == input.Data ||
                    this.Data != null &&
                    input.Data != null &&
                    this.Data.SequenceEqual(input.Data)
                ) && 
                (
                    this.AggregationCurrency == input.AggregationCurrency ||
                    (this.AggregationCurrency != null &&
                    this.AggregationCurrency.Equals(input.AggregationCurrency))
                ) && 
                (
                    this.DataSchema == input.DataSchema ||
                    (this.DataSchema != null &&
                    this.DataSchema.Equals(input.DataSchema))
                ) && 
                (
                    this.AggregationFailures == input.AggregationFailures ||
                    this.AggregationFailures != null &&
                    input.AggregationFailures != null &&
                    this.AggregationFailures.SequenceEqual(input.AggregationFailures)
                ) && 
                (
                    this.RecipeId == input.RecipeId ||
                    (this.RecipeId != null &&
                    this.RecipeId.Equals(input.RecipeId))
                ) && 
                (
                    this.Links == input.Links ||
                    this.Links != null &&
                    input.Links != null &&
                    this.Links.SequenceEqual(input.Links)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AggregationEffectiveAt != null)
                {
                    hashCode = (hashCode * 59) + this.AggregationEffectiveAt.GetHashCode();
                }
                if (this.AggregationAsAt != null)
                {
                    hashCode = (hashCode * 59) + this.AggregationAsAt.GetHashCode();
                }
                if (this.Href != null)
                {
                    hashCode = (hashCode * 59) + this.Href.GetHashCode();
                }
                if (this.Data != null)
                {
                    hashCode = (hashCode * 59) + this.Data.GetHashCode();
                }
                if (this.AggregationCurrency != null)
                {
                    hashCode = (hashCode * 59) + this.AggregationCurrency.GetHashCode();
                }
                if (this.DataSchema != null)
                {
                    hashCode = (hashCode * 59) + this.DataSchema.GetHashCode();
                }
                if (this.AggregationFailures != null)
                {
                    hashCode = (hashCode * 59) + this.AggregationFailures.GetHashCode();
                }
                if (this.RecipeId != null)
                {
                    hashCode = (hashCode * 59) + this.RecipeId.GetHashCode();
                }
                if (this.Links != null)
                {
                    hashCode = (hashCode * 59) + this.Links.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
