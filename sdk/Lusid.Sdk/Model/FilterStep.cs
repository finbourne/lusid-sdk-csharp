/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Lusid.Sdk.Client.OpenAPIDateConverter;

namespace Lusid.Sdk.Model
{
    /// <summary>
    /// FilterStep
    /// </summary>
    [DataContract(Name = "FilterStep")]
    public partial class FilterStep : IEquatable<FilterStep>, IValidatableObject
    {
        /// <summary>
        /// . The available values are: FilterStep, GroupByStep, GroupFilterStep, BranchStep, RecombineStep
        /// </summary>
        /// <value>. The available values are: FilterStep, GroupByStep, GroupFilterStep, BranchStep, RecombineStep</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ComplianceStepTypeEnum
        {
            /// <summary>
            /// Enum FilterStep for value: FilterStep
            /// </summary>
            [EnumMember(Value = "FilterStep")]
            FilterStep = 1,

            /// <summary>
            /// Enum GroupByStep for value: GroupByStep
            /// </summary>
            [EnumMember(Value = "GroupByStep")]
            GroupByStep = 2,

            /// <summary>
            /// Enum GroupFilterStep for value: GroupFilterStep
            /// </summary>
            [EnumMember(Value = "GroupFilterStep")]
            GroupFilterStep = 3,

            /// <summary>
            /// Enum BranchStep for value: BranchStep
            /// </summary>
            [EnumMember(Value = "BranchStep")]
            BranchStep = 4,

            /// <summary>
            /// Enum RecombineStep for value: RecombineStep
            /// </summary>
            [EnumMember(Value = "RecombineStep")]
            RecombineStep = 5

        }


        /// <summary>
        /// . The available values are: FilterStep, GroupByStep, GroupFilterStep, BranchStep, RecombineStep
        /// </summary>
        /// <value>. The available values are: FilterStep, GroupByStep, GroupFilterStep, BranchStep, RecombineStep</value>
        [DataMember(Name = "complianceStepType", IsRequired = true, EmitDefaultValue = true)]
        public ComplianceStepTypeEnum ComplianceStepType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="FilterStep" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected FilterStep() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="FilterStep" /> class.
        /// </summary>
        /// <param name="label">The label of the compliance step (required).</param>
        /// <param name="groupedParameters">Parameters required for the step. Some step types group parameters to differentiate between, for example, hard limit and warning threshold parameters (required).</param>
        /// <param name="complianceStepType">. The available values are: FilterStep, GroupByStep, GroupFilterStep, BranchStep, RecombineStep (required).</param>
        public FilterStep(string label = default(string), Dictionary<string, List<ComplianceTemplateParameter>> groupedParameters = default(Dictionary<string, List<ComplianceTemplateParameter>>), ComplianceStepTypeEnum complianceStepType = default(ComplianceStepTypeEnum))
        {
            // to ensure "label" is required (not null)
            if (label == null)
            {
                throw new ArgumentNullException("label is a required property for FilterStep and cannot be null");
            }
            this.Label = label;
            // to ensure "groupedParameters" is required (not null)
            if (groupedParameters == null)
            {
                throw new ArgumentNullException("groupedParameters is a required property for FilterStep and cannot be null");
            }
            this.GroupedParameters = groupedParameters;
            this.ComplianceStepType = complianceStepType;
        }

        /// <summary>
        /// The label of the compliance step
        /// </summary>
        /// <value>The label of the compliance step</value>
        [DataMember(Name = "label", IsRequired = true, EmitDefaultValue = true)]
        public string Label { get; set; }

        /// <summary>
        /// Parameters required for the step. Some step types group parameters to differentiate between, for example, hard limit and warning threshold parameters
        /// </summary>
        /// <value>Parameters required for the step. Some step types group parameters to differentiate between, for example, hard limit and warning threshold parameters</value>
        [DataMember(Name = "groupedParameters", IsRequired = true, EmitDefaultValue = true)]
        public Dictionary<string, List<ComplianceTemplateParameter>> GroupedParameters { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class FilterStep {\n");
            sb.Append("  Label: ").Append(Label).Append("\n");
            sb.Append("  GroupedParameters: ").Append(GroupedParameters).Append("\n");
            sb.Append("  ComplianceStepType: ").Append(ComplianceStepType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as FilterStep);
        }

        /// <summary>
        /// Returns true if FilterStep instances are equal
        /// </summary>
        /// <param name="input">Instance of FilterStep to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FilterStep input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Label == input.Label ||
                    (this.Label != null &&
                    this.Label.Equals(input.Label))
                ) && 
                (
                    this.GroupedParameters == input.GroupedParameters ||
                    this.GroupedParameters != null &&
                    input.GroupedParameters != null &&
                    this.GroupedParameters.SequenceEqual(input.GroupedParameters)
                ) && 
                (
                    this.ComplianceStepType == input.ComplianceStepType ||
                    this.ComplianceStepType.Equals(input.ComplianceStepType)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Label != null)
                {
                    hashCode = (hashCode * 59) + this.Label.GetHashCode();
                }
                if (this.GroupedParameters != null)
                {
                    hashCode = (hashCode * 59) + this.GroupedParameters.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.ComplianceStepType.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Label (string) minLength
            if (this.Label != null && this.Label.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Label, length must be greater than 1.", new [] { "Label" });
            }

            yield break;
        }
    }
}
