/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Lusid.Sdk.Client.OpenAPIDateConverter;

namespace Lusid.Sdk.Model
{
    /// <summary>
    /// FundingLegOptionsAllOf
    /// </summary>
    [DataContract(Name = "FundingLegOptions_allOf")]
    public partial class FundingLegOptionsAllOf : IEquatable<FundingLegOptionsAllOf>, IValidatableObject
    {
        /// <summary>
        /// The available values are: Invalid, OpaqueModelOptions, EmptyModelOptions, IndexModelOptions, FxForwardModelOptions, FundingLegModelOptions, EquityModelOptions
        /// </summary>
        /// <value>The available values are: Invalid, OpaqueModelOptions, EmptyModelOptions, IndexModelOptions, FxForwardModelOptions, FundingLegModelOptions, EquityModelOptions</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ModelOptionsTypeEnum
        {
            /// <summary>
            /// Enum Invalid for value: Invalid
            /// </summary>
            [EnumMember(Value = "Invalid")]
            Invalid = 1,

            /// <summary>
            /// Enum OpaqueModelOptions for value: OpaqueModelOptions
            /// </summary>
            [EnumMember(Value = "OpaqueModelOptions")]
            OpaqueModelOptions = 2,

            /// <summary>
            /// Enum EmptyModelOptions for value: EmptyModelOptions
            /// </summary>
            [EnumMember(Value = "EmptyModelOptions")]
            EmptyModelOptions = 3,

            /// <summary>
            /// Enum IndexModelOptions for value: IndexModelOptions
            /// </summary>
            [EnumMember(Value = "IndexModelOptions")]
            IndexModelOptions = 4,

            /// <summary>
            /// Enum FxForwardModelOptions for value: FxForwardModelOptions
            /// </summary>
            [EnumMember(Value = "FxForwardModelOptions")]
            FxForwardModelOptions = 5,

            /// <summary>
            /// Enum FundingLegModelOptions for value: FundingLegModelOptions
            /// </summary>
            [EnumMember(Value = "FundingLegModelOptions")]
            FundingLegModelOptions = 6,

            /// <summary>
            /// Enum EquityModelOptions for value: EquityModelOptions
            /// </summary>
            [EnumMember(Value = "EquityModelOptions")]
            EquityModelOptions = 7

        }


        /// <summary>
        /// The available values are: Invalid, OpaqueModelOptions, EmptyModelOptions, IndexModelOptions, FxForwardModelOptions, FundingLegModelOptions, EquityModelOptions
        /// </summary>
        /// <value>The available values are: Invalid, OpaqueModelOptions, EmptyModelOptions, IndexModelOptions, FxForwardModelOptions, FundingLegModelOptions, EquityModelOptions</value>
        [DataMember(Name = "modelOptionsType", IsRequired = true, EmitDefaultValue = true)]
        public ModelOptionsTypeEnum ModelOptionsType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="FundingLegOptionsAllOf" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected FundingLegOptionsAllOf() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="FundingLegOptionsAllOf" /> class.
        /// </summary>
        /// <param name="expectedFundingLegNotional">Assumption made on future expected notional of the funding leg. (required).</param>
        /// <param name="modelOptionsType">The available values are: Invalid, OpaqueModelOptions, EmptyModelOptions, IndexModelOptions, FxForwardModelOptions, FundingLegModelOptions, EquityModelOptions (required).</param>
        public FundingLegOptionsAllOf(string expectedFundingLegNotional = default(string), ModelOptionsTypeEnum modelOptionsType = default(ModelOptionsTypeEnum))
        {
            // to ensure "expectedFundingLegNotional" is required (not null)
            if (expectedFundingLegNotional == null)
            {
                throw new ArgumentNullException("expectedFundingLegNotional is a required property for FundingLegOptionsAllOf and cannot be null");
            }
            this.ExpectedFundingLegNotional = expectedFundingLegNotional;
            this.ModelOptionsType = modelOptionsType;
        }

        /// <summary>
        /// Assumption made on future expected notional of the funding leg.
        /// </summary>
        /// <value>Assumption made on future expected notional of the funding leg.</value>
        [DataMember(Name = "expectedFundingLegNotional", IsRequired = true, EmitDefaultValue = true)]
        public string ExpectedFundingLegNotional { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class FundingLegOptionsAllOf {\n");
            sb.Append("  ExpectedFundingLegNotional: ").Append(ExpectedFundingLegNotional).Append("\n");
            sb.Append("  ModelOptionsType: ").Append(ModelOptionsType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as FundingLegOptionsAllOf);
        }

        /// <summary>
        /// Returns true if FundingLegOptionsAllOf instances are equal
        /// </summary>
        /// <param name="input">Instance of FundingLegOptionsAllOf to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FundingLegOptionsAllOf input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.ExpectedFundingLegNotional == input.ExpectedFundingLegNotional ||
                    (this.ExpectedFundingLegNotional != null &&
                    this.ExpectedFundingLegNotional.Equals(input.ExpectedFundingLegNotional))
                ) && 
                (
                    this.ModelOptionsType == input.ModelOptionsType ||
                    this.ModelOptionsType.Equals(input.ModelOptionsType)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ExpectedFundingLegNotional != null)
                {
                    hashCode = (hashCode * 59) + this.ExpectedFundingLegNotional.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.ModelOptionsType.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // ExpectedFundingLegNotional (string) minLength
            if (this.ExpectedFundingLegNotional != null && this.ExpectedFundingLegNotional.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ExpectedFundingLegNotional, length must be greater than 1.", new [] { "ExpectedFundingLegNotional" });
            }

            yield break;
        }
    }
}
