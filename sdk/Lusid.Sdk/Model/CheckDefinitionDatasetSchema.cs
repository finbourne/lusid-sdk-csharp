/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Lusid.Sdk.Client.OpenAPIDateConverter;

namespace Lusid.Sdk.Model
{
    /// <summary>
    /// CheckDefinitionDatasetSchema
    /// </summary>
    [DataContract(Name = "CheckDefinitionDatasetSchema")]
    public partial class CheckDefinitionDatasetSchema : IEquatable<CheckDefinitionDatasetSchema>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CheckDefinitionDatasetSchema" /> class.
        /// </summary>
        /// <param name="type">The type of dataset schema that the Check Definition applies to.</param>
        /// <param name="entityType">The type of entity that the dataset schema applies to, e.g. Instrument, Transaction, etc..</param>
        public CheckDefinitionDatasetSchema(string type = default(string), string entityType = default(string))
        {
            this.Type = type;
            this.EntityType = entityType;
        }

        /// <summary>
        /// The type of dataset schema that the Check Definition applies to
        /// </summary>
        /// <value>The type of dataset schema that the Check Definition applies to</value>
        [DataMember(Name = "type", EmitDefaultValue = true)]
        public string Type { get; set; }

        /// <summary>
        /// The type of entity that the dataset schema applies to, e.g. Instrument, Transaction, etc.
        /// </summary>
        /// <value>The type of entity that the dataset schema applies to, e.g. Instrument, Transaction, etc.</value>
        [DataMember(Name = "entityType", EmitDefaultValue = true)]
        public string EntityType { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CheckDefinitionDatasetSchema {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  EntityType: ").Append(EntityType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CheckDefinitionDatasetSchema);
        }

        /// <summary>
        /// Returns true if CheckDefinitionDatasetSchema instances are equal
        /// </summary>
        /// <param name="input">Instance of CheckDefinitionDatasetSchema to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CheckDefinitionDatasetSchema input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.EntityType == input.EntityType ||
                    (this.EntityType != null &&
                    this.EntityType.Equals(input.EntityType))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Type != null)
                {
                    hashCode = (hashCode * 59) + this.Type.GetHashCode();
                }
                if (this.EntityType != null)
                {
                    hashCode = (hashCode * 59) + this.EntityType.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Type (string) maxLength
            if (this.Type != null && this.Type.Length > 1024)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Type, length must be less than 1024.", new [] { "Type" });
            }

            // Type (string) minLength
            if (this.Type != null && this.Type.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Type, length must be greater than 0.", new [] { "Type" });
            }

            // EntityType (string) maxLength
            if (this.EntityType != null && this.EntityType.Length > 1024)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for EntityType, length must be less than 1024.", new [] { "EntityType" });
            }

            // EntityType (string) minLength
            if (this.EntityType != null && this.EntityType.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for EntityType, length must be greater than 0.", new [] { "EntityType" });
            }

            yield break;
        }
    }
}
