/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Lusid.Sdk.Client.OpenAPIDateConverter;

namespace Lusid.Sdk.Model
{
    /// <summary>
    /// CreateTransactionPortfolioRequest
    /// </summary>
    [DataContract(Name = "CreateTransactionPortfolioRequest")]
    public partial class CreateTransactionPortfolioRequest : IEquatable<CreateTransactionPortfolioRequest>, IValidatableObject
    {
        /// <summary>
        /// . The available values are: Default, AverageCost, FirstInFirstOut, LastInFirstOut, HighestCostFirst, LowestCostFirst, ProRateByUnits, ProRateByCost, ProRateByCostPortfolioCurrency, IntraDayThenFirstInFirstOut, LongTermHighestCostFirst, LongTermHighestCostFirstPortfolioCurrency, HighestCostFirstPortfolioCurrency, LowestCostFirstPortfolioCurrency, MaximumLossMinimumGain, MaximumLossMinimumGainPortfolioCurrency
        /// </summary>
        /// <value>. The available values are: Default, AverageCost, FirstInFirstOut, LastInFirstOut, HighestCostFirst, LowestCostFirst, ProRateByUnits, ProRateByCost, ProRateByCostPortfolioCurrency, IntraDayThenFirstInFirstOut, LongTermHighestCostFirst, LongTermHighestCostFirstPortfolioCurrency, HighestCostFirstPortfolioCurrency, LowestCostFirstPortfolioCurrency, MaximumLossMinimumGain, MaximumLossMinimumGainPortfolioCurrency</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum AccountingMethodEnum
        {
            /// <summary>
            /// Enum Default for value: Default
            /// </summary>
            [EnumMember(Value = "Default")]
            Default = 1,

            /// <summary>
            /// Enum AverageCost for value: AverageCost
            /// </summary>
            [EnumMember(Value = "AverageCost")]
            AverageCost = 2,

            /// <summary>
            /// Enum FirstInFirstOut for value: FirstInFirstOut
            /// </summary>
            [EnumMember(Value = "FirstInFirstOut")]
            FirstInFirstOut = 3,

            /// <summary>
            /// Enum LastInFirstOut for value: LastInFirstOut
            /// </summary>
            [EnumMember(Value = "LastInFirstOut")]
            LastInFirstOut = 4,

            /// <summary>
            /// Enum HighestCostFirst for value: HighestCostFirst
            /// </summary>
            [EnumMember(Value = "HighestCostFirst")]
            HighestCostFirst = 5,

            /// <summary>
            /// Enum LowestCostFirst for value: LowestCostFirst
            /// </summary>
            [EnumMember(Value = "LowestCostFirst")]
            LowestCostFirst = 6,

            /// <summary>
            /// Enum ProRateByUnits for value: ProRateByUnits
            /// </summary>
            [EnumMember(Value = "ProRateByUnits")]
            ProRateByUnits = 7,

            /// <summary>
            /// Enum ProRateByCost for value: ProRateByCost
            /// </summary>
            [EnumMember(Value = "ProRateByCost")]
            ProRateByCost = 8,

            /// <summary>
            /// Enum ProRateByCostPortfolioCurrency for value: ProRateByCostPortfolioCurrency
            /// </summary>
            [EnumMember(Value = "ProRateByCostPortfolioCurrency")]
            ProRateByCostPortfolioCurrency = 9,

            /// <summary>
            /// Enum IntraDayThenFirstInFirstOut for value: IntraDayThenFirstInFirstOut
            /// </summary>
            [EnumMember(Value = "IntraDayThenFirstInFirstOut")]
            IntraDayThenFirstInFirstOut = 10,

            /// <summary>
            /// Enum LongTermHighestCostFirst for value: LongTermHighestCostFirst
            /// </summary>
            [EnumMember(Value = "LongTermHighestCostFirst")]
            LongTermHighestCostFirst = 11,

            /// <summary>
            /// Enum LongTermHighestCostFirstPortfolioCurrency for value: LongTermHighestCostFirstPortfolioCurrency
            /// </summary>
            [EnumMember(Value = "LongTermHighestCostFirstPortfolioCurrency")]
            LongTermHighestCostFirstPortfolioCurrency = 12,

            /// <summary>
            /// Enum HighestCostFirstPortfolioCurrency for value: HighestCostFirstPortfolioCurrency
            /// </summary>
            [EnumMember(Value = "HighestCostFirstPortfolioCurrency")]
            HighestCostFirstPortfolioCurrency = 13,

            /// <summary>
            /// Enum LowestCostFirstPortfolioCurrency for value: LowestCostFirstPortfolioCurrency
            /// </summary>
            [EnumMember(Value = "LowestCostFirstPortfolioCurrency")]
            LowestCostFirstPortfolioCurrency = 14,

            /// <summary>
            /// Enum MaximumLossMinimumGain for value: MaximumLossMinimumGain
            /// </summary>
            [EnumMember(Value = "MaximumLossMinimumGain")]
            MaximumLossMinimumGain = 15,

            /// <summary>
            /// Enum MaximumLossMinimumGainPortfolioCurrency for value: MaximumLossMinimumGainPortfolioCurrency
            /// </summary>
            [EnumMember(Value = "MaximumLossMinimumGainPortfolioCurrency")]
            MaximumLossMinimumGainPortfolioCurrency = 16
        }


        /// <summary>
        /// . The available values are: Default, AverageCost, FirstInFirstOut, LastInFirstOut, HighestCostFirst, LowestCostFirst, ProRateByUnits, ProRateByCost, ProRateByCostPortfolioCurrency, IntraDayThenFirstInFirstOut, LongTermHighestCostFirst, LongTermHighestCostFirstPortfolioCurrency, HighestCostFirstPortfolioCurrency, LowestCostFirstPortfolioCurrency, MaximumLossMinimumGain, MaximumLossMinimumGainPortfolioCurrency
        /// </summary>
        /// <value>. The available values are: Default, AverageCost, FirstInFirstOut, LastInFirstOut, HighestCostFirst, LowestCostFirst, ProRateByUnits, ProRateByCost, ProRateByCostPortfolioCurrency, IntraDayThenFirstInFirstOut, LongTermHighestCostFirst, LongTermHighestCostFirstPortfolioCurrency, HighestCostFirstPortfolioCurrency, LowestCostFirstPortfolioCurrency, MaximumLossMinimumGain, MaximumLossMinimumGainPortfolioCurrency</value>
        [DataMember(Name = "accountingMethod", EmitDefaultValue = false)]
        public AccountingMethodEnum? AccountingMethod { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateTransactionPortfolioRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CreateTransactionPortfolioRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateTransactionPortfolioRequest" /> class.
        /// </summary>
        /// <param name="displayName">The name of the transaction portfolio. (required).</param>
        /// <param name="description">A description for the transaction portfolio..</param>
        /// <param name="code">The code of the transaction portfolio. Together with the scope this uniquely identifies the transaction portfolio. (required).</param>
        /// <param name="created">The effective datetime at which to create the transaction portfolio. No transactions can be added to the transaction portfolio before this date. Defaults to the current LUSID system datetime if not specified..</param>
        /// <param name="baseCurrency">The base currency of the transaction portfolio in ISO 4217 currency code format. (required).</param>
        /// <param name="corporateActionSourceId">corporateActionSourceId.</param>
        /// <param name="accountingMethod">. The available values are: Default, AverageCost, FirstInFirstOut, LastInFirstOut, HighestCostFirst, LowestCostFirst, ProRateByUnits, ProRateByCost, ProRateByCostPortfolioCurrency, IntraDayThenFirstInFirstOut, LongTermHighestCostFirst, LongTermHighestCostFirstPortfolioCurrency, HighestCostFirstPortfolioCurrency, LowestCostFirstPortfolioCurrency, MaximumLossMinimumGain, MaximumLossMinimumGainPortfolioCurrency.</param>
        /// <param name="subHoldingKeys">A set of unique transaction properties to group the transaction portfolio&#39;s holdings by, perhaps for strategy tagging. Each property must be from the &#39;Transaction&#39; domain and identified by a key in the format {domain}/{scope}/{code}, for example &#39;Transaction/strategies/quantsignal&#39;. See https://support.lusid.com/knowledgebase/article/KA-01879/en-us for more information..</param>
        /// <param name="properties">A set of unique portfolio properties to add custom data to the transaction portfolio. Each property must be from the &#39;Portfolio&#39; domain and identified by a key in the format {domain}/{scope}/{code}, for example &#39;Portfolio/Manager/Id&#39;. Note these properties must be pre-defined..</param>
        /// <param name="instrumentScopes">The resolution strategy used to resolve instruments of transactions/holdings upserted to this portfolio..</param>
        /// <param name="amortisationMethod">The amortisation method used by the portfolio for the calculation. The available values are: NoAmortisation, StraightLine, EffectiveYield, StraightLineSettlementDate, EffectiveYieldSettlementDate.</param>
        /// <param name="transactionTypeScope">The scope of the transaction types..</param>
        /// <param name="cashGainLossCalculationDate">The option when the Cash Gain Loss to be calulated, TransactionDate/SettlementDate. Defaults to SettlementDate..</param>
        /// <param name="instrumentEventConfiguration">instrumentEventConfiguration.</param>
        /// <param name="amortisationRuleSetId">amortisationRuleSetId.</param>
        /// <param name="taxRuleSetScope">The scope of the tax rule sets for this portfolio..</param>
        public CreateTransactionPortfolioRequest(string displayName = default(string), string description = default(string), string code = default(string), DateTimeOffset? created = default(DateTimeOffset?), string baseCurrency = default(string), ResourceId corporateActionSourceId = default(ResourceId), AccountingMethodEnum ?accountingMethod = default(AccountingMethodEnum?), List<string> subHoldingKeys = default(List<string>), Dictionary<string, Property> properties = default(Dictionary<string, Property>), List<string> instrumentScopes = default(List<string>), string amortisationMethod = default(string), string transactionTypeScope = default(string), string cashGainLossCalculationDate = default(string), InstrumentEventConfiguration instrumentEventConfiguration = default(InstrumentEventConfiguration), ResourceId amortisationRuleSetId = default(ResourceId), string taxRuleSetScope = default(string))
        {
            // to ensure "displayName" is required (not null)
            if (displayName == null)
            {
                throw new ArgumentNullException("displayName is a required property for CreateTransactionPortfolioRequest and cannot be null");
            }
            this.DisplayName = displayName;
            // to ensure "code" is required (not null)
            if (code == null)
            {
                throw new ArgumentNullException("code is a required property for CreateTransactionPortfolioRequest and cannot be null");
            }
            this.Code = code;
            // to ensure "baseCurrency" is required (not null)
            if (baseCurrency == null)
            {
                throw new ArgumentNullException("baseCurrency is a required property for CreateTransactionPortfolioRequest and cannot be null");
            }
            this.BaseCurrency = baseCurrency;
            this.Description = description;
            this.Created = created;
            this.CorporateActionSourceId = corporateActionSourceId;
            this.AccountingMethod = accountingMethod;
            this.SubHoldingKeys = subHoldingKeys;
            this.Properties = properties;
            this.InstrumentScopes = instrumentScopes;
            this.AmortisationMethod = amortisationMethod;
            this.TransactionTypeScope = transactionTypeScope;
            this.CashGainLossCalculationDate = cashGainLossCalculationDate;
            this.InstrumentEventConfiguration = instrumentEventConfiguration;
            this.AmortisationRuleSetId = amortisationRuleSetId;
            this.TaxRuleSetScope = taxRuleSetScope;
        }

        /// <summary>
        /// The name of the transaction portfolio.
        /// </summary>
        /// <value>The name of the transaction portfolio.</value>
        [DataMember(Name = "displayName", IsRequired = true, EmitDefaultValue = true)]
        public string DisplayName { get; set; }

        /// <summary>
        /// A description for the transaction portfolio.
        /// </summary>
        /// <value>A description for the transaction portfolio.</value>
        [DataMember(Name = "description", EmitDefaultValue = true)]
        public string Description { get; set; }

        /// <summary>
        /// The code of the transaction portfolio. Together with the scope this uniquely identifies the transaction portfolio.
        /// </summary>
        /// <value>The code of the transaction portfolio. Together with the scope this uniquely identifies the transaction portfolio.</value>
        [DataMember(Name = "code", IsRequired = true, EmitDefaultValue = true)]
        public string Code { get; set; }

        /// <summary>
        /// The effective datetime at which to create the transaction portfolio. No transactions can be added to the transaction portfolio before this date. Defaults to the current LUSID system datetime if not specified.
        /// </summary>
        /// <value>The effective datetime at which to create the transaction portfolio. No transactions can be added to the transaction portfolio before this date. Defaults to the current LUSID system datetime if not specified.</value>
        [DataMember(Name = "created", EmitDefaultValue = true)]
        public DateTimeOffset? Created { get; set; }

        /// <summary>
        /// The base currency of the transaction portfolio in ISO 4217 currency code format.
        /// </summary>
        /// <value>The base currency of the transaction portfolio in ISO 4217 currency code format.</value>
        [DataMember(Name = "baseCurrency", IsRequired = true, EmitDefaultValue = true)]
        public string BaseCurrency { get; set; }

        /// <summary>
        /// Gets or Sets CorporateActionSourceId
        /// </summary>
        [DataMember(Name = "corporateActionSourceId", EmitDefaultValue = false)]
        public ResourceId CorporateActionSourceId { get; set; }

        /// <summary>
        /// A set of unique transaction properties to group the transaction portfolio&#39;s holdings by, perhaps for strategy tagging. Each property must be from the &#39;Transaction&#39; domain and identified by a key in the format {domain}/{scope}/{code}, for example &#39;Transaction/strategies/quantsignal&#39;. See https://support.lusid.com/knowledgebase/article/KA-01879/en-us for more information.
        /// </summary>
        /// <value>A set of unique transaction properties to group the transaction portfolio&#39;s holdings by, perhaps for strategy tagging. Each property must be from the &#39;Transaction&#39; domain and identified by a key in the format {domain}/{scope}/{code}, for example &#39;Transaction/strategies/quantsignal&#39;. See https://support.lusid.com/knowledgebase/article/KA-01879/en-us for more information.</value>
        [DataMember(Name = "subHoldingKeys", EmitDefaultValue = true)]
        public List<string> SubHoldingKeys { get; set; }

        /// <summary>
        /// A set of unique portfolio properties to add custom data to the transaction portfolio. Each property must be from the &#39;Portfolio&#39; domain and identified by a key in the format {domain}/{scope}/{code}, for example &#39;Portfolio/Manager/Id&#39;. Note these properties must be pre-defined.
        /// </summary>
        /// <value>A set of unique portfolio properties to add custom data to the transaction portfolio. Each property must be from the &#39;Portfolio&#39; domain and identified by a key in the format {domain}/{scope}/{code}, for example &#39;Portfolio/Manager/Id&#39;. Note these properties must be pre-defined.</value>
        [DataMember(Name = "properties", EmitDefaultValue = true)]
        public Dictionary<string, Property> Properties { get; set; }

        /// <summary>
        /// The resolution strategy used to resolve instruments of transactions/holdings upserted to this portfolio.
        /// </summary>
        /// <value>The resolution strategy used to resolve instruments of transactions/holdings upserted to this portfolio.</value>
        [DataMember(Name = "instrumentScopes", EmitDefaultValue = true)]
        public List<string> InstrumentScopes { get; set; }

        /// <summary>
        /// The amortisation method used by the portfolio for the calculation. The available values are: NoAmortisation, StraightLine, EffectiveYield, StraightLineSettlementDate, EffectiveYieldSettlementDate
        /// </summary>
        /// <value>The amortisation method used by the portfolio for the calculation. The available values are: NoAmortisation, StraightLine, EffectiveYield, StraightLineSettlementDate, EffectiveYieldSettlementDate</value>
        [DataMember(Name = "amortisationMethod", EmitDefaultValue = true)]
        public string AmortisationMethod { get; set; }

        /// <summary>
        /// The scope of the transaction types.
        /// </summary>
        /// <value>The scope of the transaction types.</value>
        [DataMember(Name = "transactionTypeScope", EmitDefaultValue = true)]
        public string TransactionTypeScope { get; set; }

        /// <summary>
        /// The option when the Cash Gain Loss to be calulated, TransactionDate/SettlementDate. Defaults to SettlementDate.
        /// </summary>
        /// <value>The option when the Cash Gain Loss to be calulated, TransactionDate/SettlementDate. Defaults to SettlementDate.</value>
        [DataMember(Name = "cashGainLossCalculationDate", EmitDefaultValue = true)]
        public string CashGainLossCalculationDate { get; set; }

        /// <summary>
        /// Gets or Sets InstrumentEventConfiguration
        /// </summary>
        [DataMember(Name = "instrumentEventConfiguration", EmitDefaultValue = false)]
        public InstrumentEventConfiguration InstrumentEventConfiguration { get; set; }

        /// <summary>
        /// Gets or Sets AmortisationRuleSetId
        /// </summary>
        [DataMember(Name = "amortisationRuleSetId", EmitDefaultValue = false)]
        public ResourceId AmortisationRuleSetId { get; set; }

        /// <summary>
        /// The scope of the tax rule sets for this portfolio.
        /// </summary>
        /// <value>The scope of the tax rule sets for this portfolio.</value>
        [DataMember(Name = "taxRuleSetScope", EmitDefaultValue = true)]
        public string TaxRuleSetScope { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CreateTransactionPortfolioRequest {\n");
            sb.Append("  DisplayName: ").Append(DisplayName).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Code: ").Append(Code).Append("\n");
            sb.Append("  Created: ").Append(Created).Append("\n");
            sb.Append("  BaseCurrency: ").Append(BaseCurrency).Append("\n");
            sb.Append("  CorporateActionSourceId: ").Append(CorporateActionSourceId).Append("\n");
            sb.Append("  AccountingMethod: ").Append(AccountingMethod).Append("\n");
            sb.Append("  SubHoldingKeys: ").Append(SubHoldingKeys).Append("\n");
            sb.Append("  Properties: ").Append(Properties).Append("\n");
            sb.Append("  InstrumentScopes: ").Append(InstrumentScopes).Append("\n");
            sb.Append("  AmortisationMethod: ").Append(AmortisationMethod).Append("\n");
            sb.Append("  TransactionTypeScope: ").Append(TransactionTypeScope).Append("\n");
            sb.Append("  CashGainLossCalculationDate: ").Append(CashGainLossCalculationDate).Append("\n");
            sb.Append("  InstrumentEventConfiguration: ").Append(InstrumentEventConfiguration).Append("\n");
            sb.Append("  AmortisationRuleSetId: ").Append(AmortisationRuleSetId).Append("\n");
            sb.Append("  TaxRuleSetScope: ").Append(TaxRuleSetScope).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CreateTransactionPortfolioRequest);
        }

        /// <summary>
        /// Returns true if CreateTransactionPortfolioRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of CreateTransactionPortfolioRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CreateTransactionPortfolioRequest input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.DisplayName == input.DisplayName ||
                    (this.DisplayName != null &&
                    this.DisplayName.Equals(input.DisplayName))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.Code == input.Code ||
                    (this.Code != null &&
                    this.Code.Equals(input.Code))
                ) && 
                (
                    this.Created == input.Created ||
                    (this.Created != null &&
                    this.Created.Equals(input.Created))
                ) && 
                (
                    this.BaseCurrency == input.BaseCurrency ||
                    (this.BaseCurrency != null &&
                    this.BaseCurrency.Equals(input.BaseCurrency))
                ) && 
                (
                    this.CorporateActionSourceId == input.CorporateActionSourceId ||
                    (this.CorporateActionSourceId != null &&
                    this.CorporateActionSourceId.Equals(input.CorporateActionSourceId))
                ) && 
                (
                    this.AccountingMethod == input.AccountingMethod ||
                    this.AccountingMethod.Equals(input.AccountingMethod)
                ) && 
                (
                    this.SubHoldingKeys == input.SubHoldingKeys ||
                    this.SubHoldingKeys != null &&
                    input.SubHoldingKeys != null &&
                    this.SubHoldingKeys.SequenceEqual(input.SubHoldingKeys)
                ) && 
                (
                    this.Properties == input.Properties ||
                    this.Properties != null &&
                    input.Properties != null &&
                    this.Properties.SequenceEqual(input.Properties)
                ) && 
                (
                    this.InstrumentScopes == input.InstrumentScopes ||
                    this.InstrumentScopes != null &&
                    input.InstrumentScopes != null &&
                    this.InstrumentScopes.SequenceEqual(input.InstrumentScopes)
                ) && 
                (
                    this.AmortisationMethod == input.AmortisationMethod ||
                    (this.AmortisationMethod != null &&
                    this.AmortisationMethod.Equals(input.AmortisationMethod))
                ) && 
                (
                    this.TransactionTypeScope == input.TransactionTypeScope ||
                    (this.TransactionTypeScope != null &&
                    this.TransactionTypeScope.Equals(input.TransactionTypeScope))
                ) && 
                (
                    this.CashGainLossCalculationDate == input.CashGainLossCalculationDate ||
                    (this.CashGainLossCalculationDate != null &&
                    this.CashGainLossCalculationDate.Equals(input.CashGainLossCalculationDate))
                ) && 
                (
                    this.InstrumentEventConfiguration == input.InstrumentEventConfiguration ||
                    (this.InstrumentEventConfiguration != null &&
                    this.InstrumentEventConfiguration.Equals(input.InstrumentEventConfiguration))
                ) && 
                (
                    this.AmortisationRuleSetId == input.AmortisationRuleSetId ||
                    (this.AmortisationRuleSetId != null &&
                    this.AmortisationRuleSetId.Equals(input.AmortisationRuleSetId))
                ) && 
                (
                    this.TaxRuleSetScope == input.TaxRuleSetScope ||
                    (this.TaxRuleSetScope != null &&
                    this.TaxRuleSetScope.Equals(input.TaxRuleSetScope))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.DisplayName != null)
                {
                    hashCode = (hashCode * 59) + this.DisplayName.GetHashCode();
                }
                if (this.Description != null)
                {
                    hashCode = (hashCode * 59) + this.Description.GetHashCode();
                }
                if (this.Code != null)
                {
                    hashCode = (hashCode * 59) + this.Code.GetHashCode();
                }
                if (this.Created != null)
                {
                    hashCode = (hashCode * 59) + this.Created.GetHashCode();
                }
                if (this.BaseCurrency != null)
                {
                    hashCode = (hashCode * 59) + this.BaseCurrency.GetHashCode();
                }
                if (this.CorporateActionSourceId != null)
                {
                    hashCode = (hashCode * 59) + this.CorporateActionSourceId.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.AccountingMethod.GetHashCode();
                if (this.SubHoldingKeys != null)
                {
                    hashCode = (hashCode * 59) + this.SubHoldingKeys.GetHashCode();
                }
                if (this.Properties != null)
                {
                    hashCode = (hashCode * 59) + this.Properties.GetHashCode();
                }
                if (this.InstrumentScopes != null)
                {
                    hashCode = (hashCode * 59) + this.InstrumentScopes.GetHashCode();
                }
                if (this.AmortisationMethod != null)
                {
                    hashCode = (hashCode * 59) + this.AmortisationMethod.GetHashCode();
                }
                if (this.TransactionTypeScope != null)
                {
                    hashCode = (hashCode * 59) + this.TransactionTypeScope.GetHashCode();
                }
                if (this.CashGainLossCalculationDate != null)
                {
                    hashCode = (hashCode * 59) + this.CashGainLossCalculationDate.GetHashCode();
                }
                if (this.InstrumentEventConfiguration != null)
                {
                    hashCode = (hashCode * 59) + this.InstrumentEventConfiguration.GetHashCode();
                }
                if (this.AmortisationRuleSetId != null)
                {
                    hashCode = (hashCode * 59) + this.AmortisationRuleSetId.GetHashCode();
                }
                if (this.TaxRuleSetScope != null)
                {
                    hashCode = (hashCode * 59) + this.TaxRuleSetScope.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // DisplayName (string) minLength
            if (this.DisplayName != null && this.DisplayName.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for DisplayName, length must be greater than 1.", new [] { "DisplayName" });
            }

            // TransactionTypeScope (string) maxLength
            if (this.TransactionTypeScope != null && this.TransactionTypeScope.Length > 64)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for TransactionTypeScope, length must be less than 64.", new [] { "TransactionTypeScope" });
            }

            // TransactionTypeScope (string) minLength
            if (this.TransactionTypeScope != null && this.TransactionTypeScope.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for TransactionTypeScope, length must be greater than 1.", new [] { "TransactionTypeScope" });
            }

            // TransactionTypeScope (string) pattern
            Regex regexTransactionTypeScope = new Regex(@"^[a-zA-Z0-9\-_]+$", RegexOptions.CultureInvariant);
            if (false == regexTransactionTypeScope.Match(this.TransactionTypeScope).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for TransactionTypeScope, must match a pattern of " + regexTransactionTypeScope, new [] { "TransactionTypeScope" });
            }

            // TaxRuleSetScope (string) maxLength
            if (this.TaxRuleSetScope != null && this.TaxRuleSetScope.Length > 64)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for TaxRuleSetScope, length must be less than 64.", new [] { "TaxRuleSetScope" });
            }

            // TaxRuleSetScope (string) minLength
            if (this.TaxRuleSetScope != null && this.TaxRuleSetScope.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for TaxRuleSetScope, length must be greater than 1.", new [] { "TaxRuleSetScope" });
            }

            // TaxRuleSetScope (string) pattern
            Regex regexTaxRuleSetScope = new Regex(@"^[a-zA-Z0-9\-_]+$", RegexOptions.CultureInvariant);
            if (false == regexTaxRuleSetScope.Match(this.TaxRuleSetScope).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for TaxRuleSetScope, must match a pattern of " + regexTaxRuleSetScope, new [] { "TaxRuleSetScope" });
            }

            yield break;
        }
    }
}
