/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Lusid.Sdk.Client.OpenAPIDateConverter;

namespace Lusid.Sdk.Model
{
    /// <summary>
    /// Specification for a holding or quantity of (weight for) an instrument on a given date.
    /// </summary>
    [DataContract(Name = "WeightedInstrument")]
    public partial class WeightedInstrument : IEquatable<WeightedInstrument>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="WeightedInstrument" /> class.
        /// </summary>
        /// <param name="quantity">The quantity of the instrument that is owned..</param>
        /// <param name="holdingIdentifier">Identifier for the instrument.  For a single, unique trade or transaction this can be thought of as equivalent to the transaction identifier, or  a composite of the sub-holding keys for a regular sub-holding. When there are multiple transactions sharing the same underlying instrument  such as purchase of shares on multiple dates where tax implications are different this would not be the case.    In an inlined aggregation request if this is wanted to identify a line item, it can be specified in the set of aggregation keys given on the aggregation  request that accompanies the set of weighted instruments..</param>
        /// <param name="instrument">instrument.</param>
        /// <param name="inLineLookupIdentifiers">inLineLookupIdentifiers.</param>
        public WeightedInstrument(decimal quantity = default(decimal), string holdingIdentifier = default(string), LusidInstrument instrument = default(LusidInstrument), WeightedInstrumentInLineLookupIdentifiers inLineLookupIdentifiers = default(WeightedInstrumentInLineLookupIdentifiers))
        {
            this.Quantity = quantity;
            this.HoldingIdentifier = holdingIdentifier;
            this.Instrument = instrument;
            this.InLineLookupIdentifiers = inLineLookupIdentifiers;
        }

        /// <summary>
        /// The quantity of the instrument that is owned.
        /// </summary>
        /// <value>The quantity of the instrument that is owned.</value>
        [DataMember(Name = "quantity", EmitDefaultValue = true)]
        public decimal Quantity { get; set; }

        /// <summary>
        /// Identifier for the instrument.  For a single, unique trade or transaction this can be thought of as equivalent to the transaction identifier, or  a composite of the sub-holding keys for a regular sub-holding. When there are multiple transactions sharing the same underlying instrument  such as purchase of shares on multiple dates where tax implications are different this would not be the case.    In an inlined aggregation request if this is wanted to identify a line item, it can be specified in the set of aggregation keys given on the aggregation  request that accompanies the set of weighted instruments.
        /// </summary>
        /// <value>Identifier for the instrument.  For a single, unique trade or transaction this can be thought of as equivalent to the transaction identifier, or  a composite of the sub-holding keys for a regular sub-holding. When there are multiple transactions sharing the same underlying instrument  such as purchase of shares on multiple dates where tax implications are different this would not be the case.    In an inlined aggregation request if this is wanted to identify a line item, it can be specified in the set of aggregation keys given on the aggregation  request that accompanies the set of weighted instruments.</value>
        [DataMember(Name = "holdingIdentifier", EmitDefaultValue = true)]
        public string HoldingIdentifier { get; set; }

        /// <summary>
        /// Gets or Sets Instrument
        /// </summary>
        [DataMember(Name = "instrument", EmitDefaultValue = false)]
        public LusidInstrument Instrument { get; set; }

        /// <summary>
        /// Gets or Sets InLineLookupIdentifiers
        /// </summary>
        [DataMember(Name = "inLineLookupIdentifiers", EmitDefaultValue = true)]
        public WeightedInstrumentInLineLookupIdentifiers InLineLookupIdentifiers { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class WeightedInstrument {\n");
            sb.Append("  Quantity: ").Append(Quantity).Append("\n");
            sb.Append("  HoldingIdentifier: ").Append(HoldingIdentifier).Append("\n");
            sb.Append("  Instrument: ").Append(Instrument).Append("\n");
            sb.Append("  InLineLookupIdentifiers: ").Append(InLineLookupIdentifiers).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as WeightedInstrument);
        }

        /// <summary>
        /// Returns true if WeightedInstrument instances are equal
        /// </summary>
        /// <param name="input">Instance of WeightedInstrument to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(WeightedInstrument input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Quantity == input.Quantity ||
                    this.Quantity.Equals(input.Quantity)
                ) && 
                (
                    this.HoldingIdentifier == input.HoldingIdentifier ||
                    (this.HoldingIdentifier != null &&
                    this.HoldingIdentifier.Equals(input.HoldingIdentifier))
                ) && 
                (
                    this.Instrument == input.Instrument ||
                    (this.Instrument != null &&
                    this.Instrument.Equals(input.Instrument))
                ) && 
                (
                    this.InLineLookupIdentifiers == input.InLineLookupIdentifiers ||
                    (this.InLineLookupIdentifiers != null &&
                    this.InLineLookupIdentifiers.Equals(input.InLineLookupIdentifiers))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Quantity.GetHashCode();
                if (this.HoldingIdentifier != null)
                {
                    hashCode = (hashCode * 59) + this.HoldingIdentifier.GetHashCode();
                }
                if (this.Instrument != null)
                {
                    hashCode = (hashCode * 59) + this.Instrument.GetHashCode();
                }
                if (this.InLineLookupIdentifiers != null)
                {
                    hashCode = (hashCode * 59) + this.InLineLookupIdentifiers.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // HoldingIdentifier (string) maxLength
            if (this.HoldingIdentifier != null && this.HoldingIdentifier.Length > 256)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for HoldingIdentifier, length must be less than 256.", new [] { "HoldingIdentifier" });
            }

            // HoldingIdentifier (string) minLength
            if (this.HoldingIdentifier != null && this.HoldingIdentifier.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for HoldingIdentifier, length must be greater than 0.", new [] { "HoldingIdentifier" });
            }

            yield break;
        }
    }
}
