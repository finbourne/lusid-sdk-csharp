/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Lusid.Sdk.Client.OpenAPIDateConverter;

namespace Lusid.Sdk.Model
{
    /// <summary>
    /// PortfolioSettlementConfiguration
    /// </summary>
    [DataContract(Name = "PortfolioSettlementConfiguration")]
    public partial class PortfolioSettlementConfiguration : IEquatable<PortfolioSettlementConfiguration>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PortfolioSettlementConfiguration" /> class.
        /// </summary>
        /// <param name="stockSettlement">stockSettlement.</param>
        /// <param name="cashSettlement">cashSettlement.</param>
        /// <param name="deferredCashReceipt">deferredCashReceipt.</param>
        /// <param name="transactionMatchingAlternativeId">transactionMatchingAlternativeId.</param>
        public PortfolioSettlementConfiguration(SettlementConfigurationCategory stockSettlement = default(SettlementConfigurationCategory), SettlementConfigurationCategory cashSettlement = default(SettlementConfigurationCategory), SettlementConfigurationCategory deferredCashReceipt = default(SettlementConfigurationCategory), TransactionMatchingAlternativeId transactionMatchingAlternativeId = default(TransactionMatchingAlternativeId))
        {
            this.StockSettlement = stockSettlement;
            this.CashSettlement = cashSettlement;
            this.DeferredCashReceipt = deferredCashReceipt;
            this.TransactionMatchingAlternativeId = transactionMatchingAlternativeId;
        }

        /// <summary>
        /// Gets or Sets StockSettlement
        /// </summary>
        [DataMember(Name = "stockSettlement", EmitDefaultValue = false)]
        public SettlementConfigurationCategory StockSettlement { get; set; }

        /// <summary>
        /// Gets or Sets CashSettlement
        /// </summary>
        [DataMember(Name = "cashSettlement", EmitDefaultValue = false)]
        public SettlementConfigurationCategory CashSettlement { get; set; }

        /// <summary>
        /// Gets or Sets DeferredCashReceipt
        /// </summary>
        [DataMember(Name = "deferredCashReceipt", EmitDefaultValue = false)]
        public SettlementConfigurationCategory DeferredCashReceipt { get; set; }

        /// <summary>
        /// Gets or Sets TransactionMatchingAlternativeId
        /// </summary>
        [DataMember(Name = "transactionMatchingAlternativeId", EmitDefaultValue = false)]
        public TransactionMatchingAlternativeId TransactionMatchingAlternativeId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PortfolioSettlementConfiguration {\n");
            sb.Append("  StockSettlement: ").Append(StockSettlement).Append("\n");
            sb.Append("  CashSettlement: ").Append(CashSettlement).Append("\n");
            sb.Append("  DeferredCashReceipt: ").Append(DeferredCashReceipt).Append("\n");
            sb.Append("  TransactionMatchingAlternativeId: ").Append(TransactionMatchingAlternativeId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PortfolioSettlementConfiguration);
        }

        /// <summary>
        /// Returns true if PortfolioSettlementConfiguration instances are equal
        /// </summary>
        /// <param name="input">Instance of PortfolioSettlementConfiguration to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PortfolioSettlementConfiguration input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.StockSettlement == input.StockSettlement ||
                    (this.StockSettlement != null &&
                    this.StockSettlement.Equals(input.StockSettlement))
                ) && 
                (
                    this.CashSettlement == input.CashSettlement ||
                    (this.CashSettlement != null &&
                    this.CashSettlement.Equals(input.CashSettlement))
                ) && 
                (
                    this.DeferredCashReceipt == input.DeferredCashReceipt ||
                    (this.DeferredCashReceipt != null &&
                    this.DeferredCashReceipt.Equals(input.DeferredCashReceipt))
                ) && 
                (
                    this.TransactionMatchingAlternativeId == input.TransactionMatchingAlternativeId ||
                    (this.TransactionMatchingAlternativeId != null &&
                    this.TransactionMatchingAlternativeId.Equals(input.TransactionMatchingAlternativeId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.StockSettlement != null)
                {
                    hashCode = (hashCode * 59) + this.StockSettlement.GetHashCode();
                }
                if (this.CashSettlement != null)
                {
                    hashCode = (hashCode * 59) + this.CashSettlement.GetHashCode();
                }
                if (this.DeferredCashReceipt != null)
                {
                    hashCode = (hashCode * 59) + this.DeferredCashReceipt.GetHashCode();
                }
                if (this.TransactionMatchingAlternativeId != null)
                {
                    hashCode = (hashCode * 59) + this.TransactionMatchingAlternativeId.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
