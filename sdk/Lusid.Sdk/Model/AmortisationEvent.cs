/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using JsonSubTypes;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Lusid.Sdk.Client.OpenAPIDateConverter;

namespace Lusid.Sdk.Model
{
    /// <summary>
    /// Definition of an Amortisation event.  This is an event that describes the occurence of amortisation.
    /// </summary>
    [DataContract(Name = "AmortisationEvent")]
    [JsonConverter(typeof(JsonSubtypes), "InstrumentEventType")]
    public partial class AmortisationEvent : InstrumentEvent, IEquatable<AmortisationEvent>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AmortisationEvent" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected AmortisationEvent() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="AmortisationEvent" /> class.
        /// </summary>
        /// <param name="amountReduced">The amount reduced in this amortisation event.  That is, the difference between the previous notional amount and the current notional amount as set in this event. (required).</param>
        /// <param name="domCcy">Domestic currency of the originating instrument (required).</param>
        /// <param name="payReceive">Is this event in relation to the Pay or Receive leg (required).</param>
        /// <param name="paymentDate">The date the principal payment is to be made. (required).</param>
        /// <param name="instrumentEventType">The Type of Event. The available values are: TransitionEvent, InformationalEvent, OpenEvent, CloseEvent, StockSplitEvent, BondDefaultEvent, CashDividendEvent, AmortisationEvent, CashFlowEvent, ExerciseEvent, ResetEvent, TriggerEvent, RawVendorEvent, InformationalErrorEvent, BondCouponEvent, DividendReinvestmentEvent, AccumulationEvent, BondPrincipalEvent, DividendOptionEvent, MaturityEvent, FxForwardSettlementEvent, ExpiryEvent, ScripDividendEvent, StockDividendEvent, ReverseStockSplitEvent, CapitalDistributionEvent, SpinOffEvent, MergerEvent, FutureExpiryEvent (required) (default to &quot;AmortisationEvent&quot;).</param>
        public AmortisationEvent(decimal amountReduced = default(decimal), string domCcy = default(string), string payReceive = default(string), DateTimeOffset paymentDate = default(DateTimeOffset), InstrumentEventTypeEnum instrumentEventType = default(InstrumentEventTypeEnum)) : base(instrumentEventType)
        {
            this.AmountReduced = amountReduced;
            // to ensure "domCcy" is required (not null)
            if (domCcy == null)
            {
                throw new ArgumentNullException("domCcy is a required property for AmortisationEvent and cannot be null");
            }
            this.DomCcy = domCcy;
            // to ensure "payReceive" is required (not null)
            if (payReceive == null)
            {
                throw new ArgumentNullException("payReceive is a required property for AmortisationEvent and cannot be null");
            }
            this.PayReceive = payReceive;
            this.PaymentDate = paymentDate;
        }

        /// <summary>
        /// The amount reduced in this amortisation event.  That is, the difference between the previous notional amount and the current notional amount as set in this event.
        /// </summary>
        /// <value>The amount reduced in this amortisation event.  That is, the difference between the previous notional amount and the current notional amount as set in this event.</value>
        [DataMember(Name = "amountReduced", IsRequired = true, EmitDefaultValue = true)]
        public decimal AmountReduced { get; set; }

        /// <summary>
        /// Domestic currency of the originating instrument
        /// </summary>
        /// <value>Domestic currency of the originating instrument</value>
        [DataMember(Name = "domCcy", IsRequired = true, EmitDefaultValue = true)]
        public string DomCcy { get; set; }

        /// <summary>
        /// Is this event in relation to the Pay or Receive leg
        /// </summary>
        /// <value>Is this event in relation to the Pay or Receive leg</value>
        [DataMember(Name = "payReceive", IsRequired = true, EmitDefaultValue = true)]
        public string PayReceive { get; set; }

        /// <summary>
        /// The date the principal payment is to be made.
        /// </summary>
        /// <value>The date the principal payment is to be made.</value>
        [DataMember(Name = "paymentDate", IsRequired = true, EmitDefaultValue = true)]
        public DateTimeOffset PaymentDate { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AmortisationEvent {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  AmountReduced: ").Append(AmountReduced).Append("\n");
            sb.Append("  DomCcy: ").Append(DomCcy).Append("\n");
            sb.Append("  PayReceive: ").Append(PayReceive).Append("\n");
            sb.Append("  PaymentDate: ").Append(PaymentDate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AmortisationEvent);
        }

        /// <summary>
        /// Returns true if AmortisationEvent instances are equal
        /// </summary>
        /// <param name="input">Instance of AmortisationEvent to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AmortisationEvent input)
        {
            if (input == null)
            {
                return false;
            }
            return base.Equals(input) && 
                (
                    this.AmountReduced == input.AmountReduced ||
                    this.AmountReduced.Equals(input.AmountReduced)
                ) && base.Equals(input) && 
                (
                    this.DomCcy == input.DomCcy ||
                    (this.DomCcy != null &&
                    this.DomCcy.Equals(input.DomCcy))
                ) && base.Equals(input) && 
                (
                    this.PayReceive == input.PayReceive ||
                    (this.PayReceive != null &&
                    this.PayReceive.Equals(input.PayReceive))
                ) && base.Equals(input) && 
                (
                    this.PaymentDate == input.PaymentDate ||
                    (this.PaymentDate != null &&
                    this.PaymentDate.Equals(input.PaymentDate))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = base.GetHashCode();
                hashCode = (hashCode * 59) + this.AmountReduced.GetHashCode();
                if (this.DomCcy != null)
                {
                    hashCode = (hashCode * 59) + this.DomCcy.GetHashCode();
                }
                if (this.PayReceive != null)
                {
                    hashCode = (hashCode * 59) + this.PayReceive.GetHashCode();
                }
                if (this.PaymentDate != null)
                {
                    hashCode = (hashCode * 59) + this.PaymentDate.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            return this.BaseValidate(validationContext);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        protected IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> BaseValidate(ValidationContext validationContext)
        {
            foreach (var x in base.BaseValidate(validationContext))
            {
                yield return x;
            }
            // PayReceive (string) minLength
            if (this.PayReceive != null && this.PayReceive.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PayReceive, length must be greater than 1.", new [] { "PayReceive" });
            }

            yield break;
        }
    }
}
