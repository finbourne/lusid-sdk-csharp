/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Lusid.Sdk.Client.OpenAPIDateConverter;

namespace Lusid.Sdk.Model
{
    /// <summary>
    /// CreateDateRequest
    /// </summary>
    [DataContract(Name = "CreateDateRequest")]
    public partial class CreateDateRequest : IEquatable<CreateDateRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateDateRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CreateDateRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateDateRequest" /> class.
        /// </summary>
        /// <param name="dateId">dateId (required).</param>
        /// <param name="fromUtc">fromUtc (required).</param>
        /// <param name="toUtc">toUtc (required).</param>
        /// <param name="varTimeZone">varTimeZone (required).</param>
        /// <param name="description">description (required).</param>
        /// <param name="type">type.</param>
        /// <param name="attributes">attributes.</param>
        /// <param name="sourceData">sourceData.</param>
        public CreateDateRequest(string dateId = default(string), DateTimeOffset fromUtc = default(DateTimeOffset), DateTimeOffset toUtc = default(DateTimeOffset), string varTimeZone = default(string), string description = default(string), string type = default(string), DateAttributes attributes = default(DateAttributes), Dictionary<string, string> sourceData = default(Dictionary<string, string>))
        {
            // to ensure "dateId" is required (not null)
            if (dateId == null)
            {
                throw new ArgumentNullException("dateId is a required property for CreateDateRequest and cannot be null");
            }
            this.DateId = dateId;
            this.FromUtc = fromUtc;
            this.ToUtc = toUtc;
            // to ensure "varTimeZone" is required (not null)
            if (varTimeZone == null)
            {
                throw new ArgumentNullException("varTimeZone is a required property for CreateDateRequest and cannot be null");
            }
            this.VarTimeZone = varTimeZone;
            // to ensure "description" is required (not null)
            if (description == null)
            {
                throw new ArgumentNullException("description is a required property for CreateDateRequest and cannot be null");
            }
            this.Description = description;
            this.Type = type;
            this.Attributes = attributes;
            this.SourceData = sourceData;
        }

        /// <summary>
        /// Gets or Sets DateId
        /// </summary>
        [DataMember(Name = "dateId", IsRequired = true, EmitDefaultValue = true)]
        public string DateId { get; set; }

        /// <summary>
        /// Gets or Sets FromUtc
        /// </summary>
        [DataMember(Name = "fromUtc", IsRequired = true, EmitDefaultValue = true)]
        public DateTimeOffset FromUtc { get; set; }

        /// <summary>
        /// Gets or Sets ToUtc
        /// </summary>
        [DataMember(Name = "toUtc", IsRequired = true, EmitDefaultValue = true)]
        public DateTimeOffset ToUtc { get; set; }

        /// <summary>
        /// Gets or Sets VarTimeZone
        /// </summary>
        [DataMember(Name = "timeZone", IsRequired = true, EmitDefaultValue = true)]
        public string VarTimeZone { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name = "description", IsRequired = true, EmitDefaultValue = true)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name = "type", EmitDefaultValue = true)]
        public string Type { get; set; }

        /// <summary>
        /// Gets or Sets Attributes
        /// </summary>
        [DataMember(Name = "attributes", EmitDefaultValue = false)]
        public DateAttributes Attributes { get; set; }

        /// <summary>
        /// Gets or Sets SourceData
        /// </summary>
        [DataMember(Name = "sourceData", EmitDefaultValue = true)]
        public Dictionary<string, string> SourceData { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CreateDateRequest {\n");
            sb.Append("  DateId: ").Append(DateId).Append("\n");
            sb.Append("  FromUtc: ").Append(FromUtc).Append("\n");
            sb.Append("  ToUtc: ").Append(ToUtc).Append("\n");
            sb.Append("  VarTimeZone: ").Append(VarTimeZone).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Attributes: ").Append(Attributes).Append("\n");
            sb.Append("  SourceData: ").Append(SourceData).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CreateDateRequest);
        }

        /// <summary>
        /// Returns true if CreateDateRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of CreateDateRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CreateDateRequest input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.DateId == input.DateId ||
                    (this.DateId != null &&
                    this.DateId.Equals(input.DateId))
                ) && 
                (
                    this.FromUtc == input.FromUtc ||
                    (this.FromUtc != null &&
                    this.FromUtc.Equals(input.FromUtc))
                ) && 
                (
                    this.ToUtc == input.ToUtc ||
                    (this.ToUtc != null &&
                    this.ToUtc.Equals(input.ToUtc))
                ) && 
                (
                    this.VarTimeZone == input.VarTimeZone ||
                    (this.VarTimeZone != null &&
                    this.VarTimeZone.Equals(input.VarTimeZone))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.Attributes == input.Attributes ||
                    (this.Attributes != null &&
                    this.Attributes.Equals(input.Attributes))
                ) && 
                (
                    this.SourceData == input.SourceData ||
                    this.SourceData != null &&
                    input.SourceData != null &&
                    this.SourceData.SequenceEqual(input.SourceData)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.DateId != null)
                {
                    hashCode = (hashCode * 59) + this.DateId.GetHashCode();
                }
                if (this.FromUtc != null)
                {
                    hashCode = (hashCode * 59) + this.FromUtc.GetHashCode();
                }
                if (this.ToUtc != null)
                {
                    hashCode = (hashCode * 59) + this.ToUtc.GetHashCode();
                }
                if (this.VarTimeZone != null)
                {
                    hashCode = (hashCode * 59) + this.VarTimeZone.GetHashCode();
                }
                if (this.Description != null)
                {
                    hashCode = (hashCode * 59) + this.Description.GetHashCode();
                }
                if (this.Type != null)
                {
                    hashCode = (hashCode * 59) + this.Type.GetHashCode();
                }
                if (this.Attributes != null)
                {
                    hashCode = (hashCode * 59) + this.Attributes.GetHashCode();
                }
                if (this.SourceData != null)
                {
                    hashCode = (hashCode * 59) + this.SourceData.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // DateId (string) maxLength
            if (this.DateId != null && this.DateId.Length > 256)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for DateId, length must be less than 256.", new [] { "DateId" });
            }

            // DateId (string) minLength
            if (this.DateId != null && this.DateId.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for DateId, length must be greater than 1.", new [] { "DateId" });
            }

            // DateId (string) pattern
            Regex regexDateId = new Regex(@"^[a-zA-Z0-9\-_]+$", RegexOptions.CultureInvariant);
            if (false == regexDateId.Match(this.DateId).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for DateId, must match a pattern of " + regexDateId, new [] { "DateId" });
            }

            // VarTimeZone (string) maxLength
            if (this.VarTimeZone != null && this.VarTimeZone.Length > 5)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for VarTimeZone, length must be less than 5.", new [] { "VarTimeZone" });
            }

            // VarTimeZone (string) minLength
            if (this.VarTimeZone != null && this.VarTimeZone.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for VarTimeZone, length must be greater than 0.", new [] { "VarTimeZone" });
            }

            // VarTimeZone (string) pattern
            Regex regexVarTimeZone = new Regex(@"^[a-zA-Z0-9\-_]+$", RegexOptions.CultureInvariant);
            if (false == regexVarTimeZone.Match(this.VarTimeZone).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for VarTimeZone, must match a pattern of " + regexVarTimeZone, new [] { "VarTimeZone" });
            }

            // Description (string) maxLength
            if (this.Description != null && this.Description.Length > 100)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Description, length must be less than 100.", new [] { "Description" });
            }

            // Description (string) minLength
            if (this.Description != null && this.Description.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Description, length must be greater than 0.", new [] { "Description" });
            }

            // Description (string) pattern
            Regex regexDescription = new Regex(@"^[\s\S]*$", RegexOptions.CultureInvariant);
            if (false == regexDescription.Match(this.Description).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Description, must match a pattern of " + regexDescription, new [] { "Description" });
            }

            // Type (string) maxLength
            if (this.Type != null && this.Type.Length > 10)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Type, length must be less than 10.", new [] { "Type" });
            }

            // Type (string) minLength
            if (this.Type != null && this.Type.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Type, length must be greater than 0.", new [] { "Type" });
            }

            // Type (string) pattern
            Regex regexType = new Regex(@"^[a-zA-Z0-9\-_]+$", RegexOptions.CultureInvariant);
            if (false == regexType.Match(this.Type).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Type, must match a pattern of " + regexType, new [] { "Type" });
            }

            yield break;
        }
    }
}
