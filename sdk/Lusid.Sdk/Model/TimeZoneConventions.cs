/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Lusid.Sdk.Client.OpenAPIDateConverter;

namespace Lusid.Sdk.Model
{
    /// <summary>
    /// Provides information on the primary time zone of an instrument and optional cut labels  for defining times to be used by instrument events.
    /// </summary>
    [DataContract(Name = "TimeZoneConventions")]
    public partial class TimeZoneConventions : IEquatable<TimeZoneConventions>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TimeZoneConventions" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected TimeZoneConventions() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="TimeZoneConventions" /> class.
        /// </summary>
        /// <param name="primaryTimeZone">The IANA time zone code for the instrument. (required).</param>
        /// <param name="startOfDay">A LUSID Cut Label code used for generating instrument events at a time other than local midnight..</param>
        /// <param name="primaryMarketOpen">A LUSID Cut Label code used for delaying the transaction time of certain instrument events until market open..</param>
        public TimeZoneConventions(string primaryTimeZone = default(string), string startOfDay = default(string), string primaryMarketOpen = default(string))
        {
            // to ensure "primaryTimeZone" is required (not null)
            if (primaryTimeZone == null)
            {
                throw new ArgumentNullException("primaryTimeZone is a required property for TimeZoneConventions and cannot be null");
            }
            this.PrimaryTimeZone = primaryTimeZone;
            this.StartOfDay = startOfDay;
            this.PrimaryMarketOpen = primaryMarketOpen;
        }

        /// <summary>
        /// The IANA time zone code for the instrument.
        /// </summary>
        /// <value>The IANA time zone code for the instrument.</value>
        [DataMember(Name = "primaryTimeZone", IsRequired = true, EmitDefaultValue = true)]
        public string PrimaryTimeZone { get; set; }

        /// <summary>
        /// A LUSID Cut Label code used for generating instrument events at a time other than local midnight.
        /// </summary>
        /// <value>A LUSID Cut Label code used for generating instrument events at a time other than local midnight.</value>
        [DataMember(Name = "startOfDay", EmitDefaultValue = true)]
        public string StartOfDay { get; set; }

        /// <summary>
        /// A LUSID Cut Label code used for delaying the transaction time of certain instrument events until market open.
        /// </summary>
        /// <value>A LUSID Cut Label code used for delaying the transaction time of certain instrument events until market open.</value>
        [DataMember(Name = "primaryMarketOpen", EmitDefaultValue = true)]
        public string PrimaryMarketOpen { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class TimeZoneConventions {\n");
            sb.Append("  PrimaryTimeZone: ").Append(PrimaryTimeZone).Append("\n");
            sb.Append("  StartOfDay: ").Append(StartOfDay).Append("\n");
            sb.Append("  PrimaryMarketOpen: ").Append(PrimaryMarketOpen).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TimeZoneConventions);
        }

        /// <summary>
        /// Returns true if TimeZoneConventions instances are equal
        /// </summary>
        /// <param name="input">Instance of TimeZoneConventions to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TimeZoneConventions input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.PrimaryTimeZone == input.PrimaryTimeZone ||
                    (this.PrimaryTimeZone != null &&
                    this.PrimaryTimeZone.Equals(input.PrimaryTimeZone))
                ) && 
                (
                    this.StartOfDay == input.StartOfDay ||
                    (this.StartOfDay != null &&
                    this.StartOfDay.Equals(input.StartOfDay))
                ) && 
                (
                    this.PrimaryMarketOpen == input.PrimaryMarketOpen ||
                    (this.PrimaryMarketOpen != null &&
                    this.PrimaryMarketOpen.Equals(input.PrimaryMarketOpen))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.PrimaryTimeZone != null)
                {
                    hashCode = (hashCode * 59) + this.PrimaryTimeZone.GetHashCode();
                }
                if (this.StartOfDay != null)
                {
                    hashCode = (hashCode * 59) + this.StartOfDay.GetHashCode();
                }
                if (this.PrimaryMarketOpen != null)
                {
                    hashCode = (hashCode * 59) + this.PrimaryMarketOpen.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // PrimaryTimeZone (string) maxLength
            if (this.PrimaryTimeZone != null && this.PrimaryTimeZone.Length > 64)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PrimaryTimeZone, length must be less than 64.", new [] { "PrimaryTimeZone" });
            }

            // PrimaryTimeZone (string) minLength
            if (this.PrimaryTimeZone != null && this.PrimaryTimeZone.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PrimaryTimeZone, length must be greater than 0.", new [] { "PrimaryTimeZone" });
            }

            // StartOfDay (string) pattern
            Regex regexStartOfDay = new Regex(@"^[a-zA-Z0-9\-_]+$", RegexOptions.CultureInvariant);
            if (false == regexStartOfDay.Match(this.StartOfDay).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for StartOfDay, must match a pattern of " + regexStartOfDay, new [] { "StartOfDay" });
            }

            // PrimaryMarketOpen (string) pattern
            Regex regexPrimaryMarketOpen = new Regex(@"^[a-zA-Z0-9\-_]+$", RegexOptions.CultureInvariant);
            if (false == regexPrimaryMarketOpen.Match(this.PrimaryMarketOpen).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PrimaryMarketOpen, must match a pattern of " + regexPrimaryMarketOpen, new [] { "PrimaryMarketOpen" });
            }

            yield break;
        }
    }
}
