/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Lusid.Sdk.Client.OpenAPIDateConverter;

namespace Lusid.Sdk.Model
{
    /// <summary>
    /// CustomDataModel
    /// </summary>
    [DataContract(Name = "CustomDataModel")]
    public partial class CustomDataModel : IEquatable<CustomDataModel>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CustomDataModel" /> class.
        /// </summary>
        /// <param name="dataModelSummary">dataModelSummary.</param>
        /// <param name="inherited">inherited.</param>
        /// <param name="incremental">incremental.</param>
        /// <param name="applied">applied.</param>
        public CustomDataModel(DataModelSummary dataModelSummary = default(DataModelSummary), CustomDataModelCriteria inherited = default(CustomDataModelCriteria), CustomDataModelCriteria incremental = default(CustomDataModelCriteria), CustomDataModelCriteria applied = default(CustomDataModelCriteria))
        {
            this.DataModelSummary = dataModelSummary;
            this.Inherited = inherited;
            this.Incremental = incremental;
            this.Applied = applied;
        }

        /// <summary>
        /// Gets or Sets DataModelSummary
        /// </summary>
        [DataMember(Name = "dataModelSummary", EmitDefaultValue = false)]
        public DataModelSummary DataModelSummary { get; set; }

        /// <summary>
        /// Gets or Sets Inherited
        /// </summary>
        [DataMember(Name = "inherited", EmitDefaultValue = false)]
        public CustomDataModelCriteria Inherited { get; set; }

        /// <summary>
        /// Gets or Sets Incremental
        /// </summary>
        [DataMember(Name = "incremental", EmitDefaultValue = false)]
        public CustomDataModelCriteria Incremental { get; set; }

        /// <summary>
        /// Gets or Sets Applied
        /// </summary>
        [DataMember(Name = "applied", EmitDefaultValue = false)]
        public CustomDataModelCriteria Applied { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CustomDataModel {\n");
            sb.Append("  DataModelSummary: ").Append(DataModelSummary).Append("\n");
            sb.Append("  Inherited: ").Append(Inherited).Append("\n");
            sb.Append("  Incremental: ").Append(Incremental).Append("\n");
            sb.Append("  Applied: ").Append(Applied).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CustomDataModel);
        }

        /// <summary>
        /// Returns true if CustomDataModel instances are equal
        /// </summary>
        /// <param name="input">Instance of CustomDataModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CustomDataModel input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.DataModelSummary == input.DataModelSummary ||
                    (this.DataModelSummary != null &&
                    this.DataModelSummary.Equals(input.DataModelSummary))
                ) && 
                (
                    this.Inherited == input.Inherited ||
                    (this.Inherited != null &&
                    this.Inherited.Equals(input.Inherited))
                ) && 
                (
                    this.Incremental == input.Incremental ||
                    (this.Incremental != null &&
                    this.Incremental.Equals(input.Incremental))
                ) && 
                (
                    this.Applied == input.Applied ||
                    (this.Applied != null &&
                    this.Applied.Equals(input.Applied))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.DataModelSummary != null)
                {
                    hashCode = (hashCode * 59) + this.DataModelSummary.GetHashCode();
                }
                if (this.Inherited != null)
                {
                    hashCode = (hashCode * 59) + this.Inherited.GetHashCode();
                }
                if (this.Incremental != null)
                {
                    hashCode = (hashCode * 59) + this.Incremental.GetHashCode();
                }
                if (this.Applied != null)
                {
                    hashCode = (hashCode * 59) + this.Applied.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
