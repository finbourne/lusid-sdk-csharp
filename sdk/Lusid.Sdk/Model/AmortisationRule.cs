/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Lusid.Sdk.Client.OpenAPIDateConverter;

namespace Lusid.Sdk.Model
{
    /// <summary>
    /// AmortisationRule
    /// </summary>
    [DataContract(Name = "AmortisationRule")]
    public partial class AmortisationRule : IEquatable<AmortisationRule>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AmortisationRule" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected AmortisationRule() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="AmortisationRule" /> class.
        /// </summary>
        /// <param name="name">The name of the rule. (required).</param>
        /// <param name="description">A description of the rule..</param>
        /// <param name="filter">The filter for this rule. (required).</param>
        /// <param name="amortisationMethod">The filter for this rule. (required).</param>
        public AmortisationRule(string name = default(string), string description = default(string), string filter = default(string), string amortisationMethod = default(string))
        {
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for AmortisationRule and cannot be null");
            }
            this.Name = name;
            // to ensure "filter" is required (not null)
            if (filter == null)
            {
                throw new ArgumentNullException("filter is a required property for AmortisationRule and cannot be null");
            }
            this.Filter = filter;
            // to ensure "amortisationMethod" is required (not null)
            if (amortisationMethod == null)
            {
                throw new ArgumentNullException("amortisationMethod is a required property for AmortisationRule and cannot be null");
            }
            this.AmortisationMethod = amortisationMethod;
            this.Description = description;
        }

        /// <summary>
        /// The name of the rule.
        /// </summary>
        /// <value>The name of the rule.</value>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// A description of the rule.
        /// </summary>
        /// <value>A description of the rule.</value>
        [DataMember(Name = "description", EmitDefaultValue = true)]
        public string Description { get; set; }

        /// <summary>
        /// The filter for this rule.
        /// </summary>
        /// <value>The filter for this rule.</value>
        [DataMember(Name = "filter", IsRequired = true, EmitDefaultValue = true)]
        public string Filter { get; set; }

        /// <summary>
        /// The filter for this rule.
        /// </summary>
        /// <value>The filter for this rule.</value>
        [DataMember(Name = "amortisationMethod", IsRequired = true, EmitDefaultValue = true)]
        public string AmortisationMethod { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AmortisationRule {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Filter: ").Append(Filter).Append("\n");
            sb.Append("  AmortisationMethod: ").Append(AmortisationMethod).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AmortisationRule);
        }

        /// <summary>
        /// Returns true if AmortisationRule instances are equal
        /// </summary>
        /// <param name="input">Instance of AmortisationRule to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AmortisationRule input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.Filter == input.Filter ||
                    (this.Filter != null &&
                    this.Filter.Equals(input.Filter))
                ) && 
                (
                    this.AmortisationMethod == input.AmortisationMethod ||
                    (this.AmortisationMethod != null &&
                    this.AmortisationMethod.Equals(input.AmortisationMethod))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.Description != null)
                {
                    hashCode = (hashCode * 59) + this.Description.GetHashCode();
                }
                if (this.Filter != null)
                {
                    hashCode = (hashCode * 59) + this.Filter.GetHashCode();
                }
                if (this.AmortisationMethod != null)
                {
                    hashCode = (hashCode * 59) + this.AmortisationMethod.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Name (string) maxLength
            if (this.Name != null && this.Name.Length > 256)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Name, length must be less than 256.", new [] { "Name" });
            }

            // Name (string) minLength
            if (this.Name != null && this.Name.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Name, length must be greater than 1.", new [] { "Name" });
            }

            // Name (string) pattern
            Regex regexName = new Regex(@"^[^\\<>&\""]+$", RegexOptions.CultureInvariant);
            if (false == regexName.Match(this.Name).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Name, must match a pattern of " + regexName, new [] { "Name" });
            }

            // Description (string) maxLength
            if (this.Description != null && this.Description.Length > 1024)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Description, length must be less than 1024.", new [] { "Description" });
            }

            // Description (string) minLength
            if (this.Description != null && this.Description.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Description, length must be greater than 0.", new [] { "Description" });
            }

            // Description (string) pattern
            Regex regexDescription = new Regex(@"^[\s\S]*$", RegexOptions.CultureInvariant);
            if (false == regexDescription.Match(this.Description).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Description, must match a pattern of " + regexDescription, new [] { "Description" });
            }

            // Filter (string) maxLength
            if (this.Filter != null && this.Filter.Length > 16384)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Filter, length must be less than 16384.", new [] { "Filter" });
            }

            // Filter (string) minLength
            if (this.Filter != null && this.Filter.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Filter, length must be greater than 0.", new [] { "Filter" });
            }

            // Filter (string) pattern
            Regex regexFilter = new Regex(@"^[\s\S]*$", RegexOptions.CultureInvariant);
            if (false == regexFilter.Match(this.Filter).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Filter, must match a pattern of " + regexFilter, new [] { "Filter" });
            }

            // AmortisationMethod (string) minLength
            if (this.AmortisationMethod != null && this.AmortisationMethod.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for AmortisationMethod, length must be greater than 1.", new [] { "AmortisationMethod" });
            }

            yield break;
        }
    }
}
