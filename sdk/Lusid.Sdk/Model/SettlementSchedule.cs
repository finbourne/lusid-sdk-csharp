/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Lusid.Sdk.Client.OpenAPIDateConverter;

namespace Lusid.Sdk.Model
{
    /// <summary>
    /// SettlementSchedule
    /// </summary>
    [DataContract(Name = "SettlementSchedule")]
    public partial class SettlementSchedule : IEquatable<SettlementSchedule>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SettlementSchedule" /> class.
        /// </summary>
        /// <param name="tradeId">tradeId.</param>
        /// <param name="settlementDate">settlementDate.</param>
        /// <param name="units">units.</param>
        /// <param name="bondInterest">bondInterest.</param>
        public SettlementSchedule(string tradeId = default(string), DateTimeOffset settlementDate = default(DateTimeOffset), decimal units = default(decimal), decimal bondInterest = default(decimal))
        {
            this.TradeId = tradeId;
            this.SettlementDate = settlementDate;
            this.Units = units;
            this.BondInterest = bondInterest;
        }

        /// <summary>
        /// Gets or Sets TradeId
        /// </summary>
        [DataMember(Name = "tradeId", EmitDefaultValue = true)]
        public string TradeId { get; set; }

        /// <summary>
        /// Gets or Sets SettlementDate
        /// </summary>
        [DataMember(Name = "settlementDate", EmitDefaultValue = false)]
        public DateTimeOffset SettlementDate { get; set; }

        /// <summary>
        /// Gets or Sets Units
        /// </summary>
        [DataMember(Name = "units", EmitDefaultValue = true)]
        public decimal Units { get; set; }

        /// <summary>
        /// Gets or Sets BondInterest
        /// </summary>
        [DataMember(Name = "bondInterest", EmitDefaultValue = true)]
        public decimal BondInterest { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SettlementSchedule {\n");
            sb.Append("  TradeId: ").Append(TradeId).Append("\n");
            sb.Append("  SettlementDate: ").Append(SettlementDate).Append("\n");
            sb.Append("  Units: ").Append(Units).Append("\n");
            sb.Append("  BondInterest: ").Append(BondInterest).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SettlementSchedule);
        }

        /// <summary>
        /// Returns true if SettlementSchedule instances are equal
        /// </summary>
        /// <param name="input">Instance of SettlementSchedule to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SettlementSchedule input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.TradeId == input.TradeId ||
                    (this.TradeId != null &&
                    this.TradeId.Equals(input.TradeId))
                ) && 
                (
                    this.SettlementDate == input.SettlementDate ||
                    (this.SettlementDate != null &&
                    this.SettlementDate.Equals(input.SettlementDate))
                ) && 
                (
                    this.Units == input.Units ||
                    this.Units.Equals(input.Units)
                ) && 
                (
                    this.BondInterest == input.BondInterest ||
                    this.BondInterest.Equals(input.BondInterest)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.TradeId != null)
                {
                    hashCode = (hashCode * 59) + this.TradeId.GetHashCode();
                }
                if (this.SettlementDate != null)
                {
                    hashCode = (hashCode * 59) + this.SettlementDate.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Units.GetHashCode();
                hashCode = (hashCode * 59) + this.BondInterest.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
