/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Lusid.Sdk.Client.OpenAPIDateConverter;

namespace Lusid.Sdk.Model
{
    /// <summary>
    /// GroupReconciliationResultTypes
    /// </summary>
    [DataContract(Name = "GroupReconciliationResultTypes")]
    public partial class GroupReconciliationResultTypes : IEquatable<GroupReconciliationResultTypes>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GroupReconciliationResultTypes" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected GroupReconciliationResultTypes() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="GroupReconciliationResultTypes" /> class.
        /// </summary>
        /// <param name="countMatch">The number of comparison results of resultType \&quot;Match\&quot; with this instanceId and reconciliationType (required).</param>
        /// <param name="linkMatches">linkMatches (required).</param>
        /// <param name="countPartialMatch">The number of comparison results of resultType \&quot;PartialMatch\&quot; with this instanceId and reconciliationType (required).</param>
        /// <param name="linkPartialMatches">linkPartialMatches (required).</param>
        /// <param name="countBreak">The number of comparison results of resultType \&quot;Break\&quot; with this instanceId and reconciliationType (required).</param>
        /// <param name="linkBreaks">linkBreaks (required).</param>
        /// <param name="countNotFound">The number of comparison results of resultType \&quot;NotFound\&quot; with this instanceId and reconciliationType (required).</param>
        /// <param name="linkNotFound">linkNotFound (required).</param>
        public GroupReconciliationResultTypes(int countMatch = default(int), Link linkMatches = default(Link), int countPartialMatch = default(int), Link linkPartialMatches = default(Link), int countBreak = default(int), Link linkBreaks = default(Link), int countNotFound = default(int), Link linkNotFound = default(Link))
        {
            this.CountMatch = countMatch;
            // to ensure "linkMatches" is required (not null)
            if (linkMatches == null)
            {
                throw new ArgumentNullException("linkMatches is a required property for GroupReconciliationResultTypes and cannot be null");
            }
            this.LinkMatches = linkMatches;
            this.CountPartialMatch = countPartialMatch;
            // to ensure "linkPartialMatches" is required (not null)
            if (linkPartialMatches == null)
            {
                throw new ArgumentNullException("linkPartialMatches is a required property for GroupReconciliationResultTypes and cannot be null");
            }
            this.LinkPartialMatches = linkPartialMatches;
            this.CountBreak = countBreak;
            // to ensure "linkBreaks" is required (not null)
            if (linkBreaks == null)
            {
                throw new ArgumentNullException("linkBreaks is a required property for GroupReconciliationResultTypes and cannot be null");
            }
            this.LinkBreaks = linkBreaks;
            this.CountNotFound = countNotFound;
            // to ensure "linkNotFound" is required (not null)
            if (linkNotFound == null)
            {
                throw new ArgumentNullException("linkNotFound is a required property for GroupReconciliationResultTypes and cannot be null");
            }
            this.LinkNotFound = linkNotFound;
        }

        /// <summary>
        /// The number of comparison results of resultType \&quot;Match\&quot; with this instanceId and reconciliationType
        /// </summary>
        /// <value>The number of comparison results of resultType \&quot;Match\&quot; with this instanceId and reconciliationType</value>
        [DataMember(Name = "countMatch", IsRequired = true, EmitDefaultValue = true)]
        public int CountMatch { get; set; }

        /// <summary>
        /// Gets or Sets LinkMatches
        /// </summary>
        [DataMember(Name = "linkMatches", IsRequired = true, EmitDefaultValue = true)]
        public Link LinkMatches { get; set; }

        /// <summary>
        /// The number of comparison results of resultType \&quot;PartialMatch\&quot; with this instanceId and reconciliationType
        /// </summary>
        /// <value>The number of comparison results of resultType \&quot;PartialMatch\&quot; with this instanceId and reconciliationType</value>
        [DataMember(Name = "countPartialMatch", IsRequired = true, EmitDefaultValue = true)]
        public int CountPartialMatch { get; set; }

        /// <summary>
        /// Gets or Sets LinkPartialMatches
        /// </summary>
        [DataMember(Name = "linkPartialMatches", IsRequired = true, EmitDefaultValue = true)]
        public Link LinkPartialMatches { get; set; }

        /// <summary>
        /// The number of comparison results of resultType \&quot;Break\&quot; with this instanceId and reconciliationType
        /// </summary>
        /// <value>The number of comparison results of resultType \&quot;Break\&quot; with this instanceId and reconciliationType</value>
        [DataMember(Name = "countBreak", IsRequired = true, EmitDefaultValue = true)]
        public int CountBreak { get; set; }

        /// <summary>
        /// Gets or Sets LinkBreaks
        /// </summary>
        [DataMember(Name = "linkBreaks", IsRequired = true, EmitDefaultValue = true)]
        public Link LinkBreaks { get; set; }

        /// <summary>
        /// The number of comparison results of resultType \&quot;NotFound\&quot; with this instanceId and reconciliationType
        /// </summary>
        /// <value>The number of comparison results of resultType \&quot;NotFound\&quot; with this instanceId and reconciliationType</value>
        [DataMember(Name = "countNotFound", IsRequired = true, EmitDefaultValue = true)]
        public int CountNotFound { get; set; }

        /// <summary>
        /// Gets or Sets LinkNotFound
        /// </summary>
        [DataMember(Name = "linkNotFound", IsRequired = true, EmitDefaultValue = true)]
        public Link LinkNotFound { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class GroupReconciliationResultTypes {\n");
            sb.Append("  CountMatch: ").Append(CountMatch).Append("\n");
            sb.Append("  LinkMatches: ").Append(LinkMatches).Append("\n");
            sb.Append("  CountPartialMatch: ").Append(CountPartialMatch).Append("\n");
            sb.Append("  LinkPartialMatches: ").Append(LinkPartialMatches).Append("\n");
            sb.Append("  CountBreak: ").Append(CountBreak).Append("\n");
            sb.Append("  LinkBreaks: ").Append(LinkBreaks).Append("\n");
            sb.Append("  CountNotFound: ").Append(CountNotFound).Append("\n");
            sb.Append("  LinkNotFound: ").Append(LinkNotFound).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GroupReconciliationResultTypes);
        }

        /// <summary>
        /// Returns true if GroupReconciliationResultTypes instances are equal
        /// </summary>
        /// <param name="input">Instance of GroupReconciliationResultTypes to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GroupReconciliationResultTypes input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.CountMatch == input.CountMatch ||
                    this.CountMatch.Equals(input.CountMatch)
                ) && 
                (
                    this.LinkMatches == input.LinkMatches ||
                    (this.LinkMatches != null &&
                    this.LinkMatches.Equals(input.LinkMatches))
                ) && 
                (
                    this.CountPartialMatch == input.CountPartialMatch ||
                    this.CountPartialMatch.Equals(input.CountPartialMatch)
                ) && 
                (
                    this.LinkPartialMatches == input.LinkPartialMatches ||
                    (this.LinkPartialMatches != null &&
                    this.LinkPartialMatches.Equals(input.LinkPartialMatches))
                ) && 
                (
                    this.CountBreak == input.CountBreak ||
                    this.CountBreak.Equals(input.CountBreak)
                ) && 
                (
                    this.LinkBreaks == input.LinkBreaks ||
                    (this.LinkBreaks != null &&
                    this.LinkBreaks.Equals(input.LinkBreaks))
                ) && 
                (
                    this.CountNotFound == input.CountNotFound ||
                    this.CountNotFound.Equals(input.CountNotFound)
                ) && 
                (
                    this.LinkNotFound == input.LinkNotFound ||
                    (this.LinkNotFound != null &&
                    this.LinkNotFound.Equals(input.LinkNotFound))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.CountMatch.GetHashCode();
                if (this.LinkMatches != null)
                {
                    hashCode = (hashCode * 59) + this.LinkMatches.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.CountPartialMatch.GetHashCode();
                if (this.LinkPartialMatches != null)
                {
                    hashCode = (hashCode * 59) + this.LinkPartialMatches.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.CountBreak.GetHashCode();
                if (this.LinkBreaks != null)
                {
                    hashCode = (hashCode * 59) + this.LinkBreaks.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.CountNotFound.GetHashCode();
                if (this.LinkNotFound != null)
                {
                    hashCode = (hashCode * 59) + this.LinkNotFound.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
