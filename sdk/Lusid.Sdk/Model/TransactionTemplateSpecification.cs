/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Lusid.Sdk.Client.OpenAPIDateConverter;

namespace Lusid.Sdk.Model
{
    /// <summary>
    /// TransactionTemplateSpecification
    /// </summary>
    [DataContract(Name = "TransactionTemplateSpecification")]
    public partial class TransactionTemplateSpecification : IEquatable<TransactionTemplateSpecification>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TransactionTemplateSpecification" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected TransactionTemplateSpecification() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="TransactionTemplateSpecification" /> class.
        /// </summary>
        /// <param name="instrumentEventType">instrumentEventType (required).</param>
        /// <param name="supportedParticipationTypes">supportedParticipationTypes (required).</param>
        /// <param name="supportedElectionTypes">supportedElectionTypes (required).</param>
        /// <param name="supportedTemplateFields">supportedTemplateFields (required).</param>
        public TransactionTemplateSpecification(string instrumentEventType = default(string), List<string> supportedParticipationTypes = default(List<string>), List<ElectionSpecification> supportedElectionTypes = default(List<ElectionSpecification>), List<TemplateField> supportedTemplateFields = default(List<TemplateField>))
        {
            // to ensure "instrumentEventType" is required (not null)
            if (instrumentEventType == null)
            {
                throw new ArgumentNullException("instrumentEventType is a required property for TransactionTemplateSpecification and cannot be null");
            }
            this.InstrumentEventType = instrumentEventType;
            // to ensure "supportedParticipationTypes" is required (not null)
            if (supportedParticipationTypes == null)
            {
                throw new ArgumentNullException("supportedParticipationTypes is a required property for TransactionTemplateSpecification and cannot be null");
            }
            this.SupportedParticipationTypes = supportedParticipationTypes;
            // to ensure "supportedElectionTypes" is required (not null)
            if (supportedElectionTypes == null)
            {
                throw new ArgumentNullException("supportedElectionTypes is a required property for TransactionTemplateSpecification and cannot be null");
            }
            this.SupportedElectionTypes = supportedElectionTypes;
            // to ensure "supportedTemplateFields" is required (not null)
            if (supportedTemplateFields == null)
            {
                throw new ArgumentNullException("supportedTemplateFields is a required property for TransactionTemplateSpecification and cannot be null");
            }
            this.SupportedTemplateFields = supportedTemplateFields;
        }

        /// <summary>
        /// Gets or Sets InstrumentEventType
        /// </summary>
        [DataMember(Name = "instrumentEventType", IsRequired = true, EmitDefaultValue = true)]
        public string InstrumentEventType { get; set; }

        /// <summary>
        /// Gets or Sets SupportedParticipationTypes
        /// </summary>
        [DataMember(Name = "supportedParticipationTypes", IsRequired = true, EmitDefaultValue = true)]
        public List<string> SupportedParticipationTypes { get; set; }

        /// <summary>
        /// Gets or Sets SupportedElectionTypes
        /// </summary>
        [DataMember(Name = "supportedElectionTypes", IsRequired = true, EmitDefaultValue = true)]
        public List<ElectionSpecification> SupportedElectionTypes { get; set; }

        /// <summary>
        /// Gets or Sets SupportedTemplateFields
        /// </summary>
        [DataMember(Name = "supportedTemplateFields", IsRequired = true, EmitDefaultValue = true)]
        public List<TemplateField> SupportedTemplateFields { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class TransactionTemplateSpecification {\n");
            sb.Append("  InstrumentEventType: ").Append(InstrumentEventType).Append("\n");
            sb.Append("  SupportedParticipationTypes: ").Append(SupportedParticipationTypes).Append("\n");
            sb.Append("  SupportedElectionTypes: ").Append(SupportedElectionTypes).Append("\n");
            sb.Append("  SupportedTemplateFields: ").Append(SupportedTemplateFields).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TransactionTemplateSpecification);
        }

        /// <summary>
        /// Returns true if TransactionTemplateSpecification instances are equal
        /// </summary>
        /// <param name="input">Instance of TransactionTemplateSpecification to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TransactionTemplateSpecification input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.InstrumentEventType == input.InstrumentEventType ||
                    (this.InstrumentEventType != null &&
                    this.InstrumentEventType.Equals(input.InstrumentEventType))
                ) && 
                (
                    this.SupportedParticipationTypes == input.SupportedParticipationTypes ||
                    this.SupportedParticipationTypes != null &&
                    input.SupportedParticipationTypes != null &&
                    this.SupportedParticipationTypes.SequenceEqual(input.SupportedParticipationTypes)
                ) && 
                (
                    this.SupportedElectionTypes == input.SupportedElectionTypes ||
                    this.SupportedElectionTypes != null &&
                    input.SupportedElectionTypes != null &&
                    this.SupportedElectionTypes.SequenceEqual(input.SupportedElectionTypes)
                ) && 
                (
                    this.SupportedTemplateFields == input.SupportedTemplateFields ||
                    this.SupportedTemplateFields != null &&
                    input.SupportedTemplateFields != null &&
                    this.SupportedTemplateFields.SequenceEqual(input.SupportedTemplateFields)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.InstrumentEventType != null)
                {
                    hashCode = (hashCode * 59) + this.InstrumentEventType.GetHashCode();
                }
                if (this.SupportedParticipationTypes != null)
                {
                    hashCode = (hashCode * 59) + this.SupportedParticipationTypes.GetHashCode();
                }
                if (this.SupportedElectionTypes != null)
                {
                    hashCode = (hashCode * 59) + this.SupportedElectionTypes.GetHashCode();
                }
                if (this.SupportedTemplateFields != null)
                {
                    hashCode = (hashCode * 59) + this.SupportedTemplateFields.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // InstrumentEventType (string) minLength
            if (this.InstrumentEventType != null && this.InstrumentEventType.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for InstrumentEventType, length must be greater than 1.", new [] { "InstrumentEventType" });
            }

            yield break;
        }
    }
}
