/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Lusid.Sdk.Client.OpenAPIDateConverter;

namespace Lusid.Sdk.Model
{
    /// <summary>
    /// ExternalFeeComponentFilter
    /// </summary>
    [DataContract(Name = "ExternalFeeComponentFilter")]
    public partial class ExternalFeeComponentFilter : IEquatable<ExternalFeeComponentFilter>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ExternalFeeComponentFilter" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ExternalFeeComponentFilter() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ExternalFeeComponentFilter" /> class.
        /// </summary>
        /// <param name="filterId">filterId (required).</param>
        /// <param name="filter">filter (required).</param>
        /// <param name="appliesTo">appliesTo (required).</param>
        public ExternalFeeComponentFilter(string filterId = default(string), string filter = default(string), string appliesTo = default(string))
        {
            // to ensure "filterId" is required (not null)
            if (filterId == null)
            {
                throw new ArgumentNullException("filterId is a required property for ExternalFeeComponentFilter and cannot be null");
            }
            this.FilterId = filterId;
            // to ensure "filter" is required (not null)
            if (filter == null)
            {
                throw new ArgumentNullException("filter is a required property for ExternalFeeComponentFilter and cannot be null");
            }
            this.Filter = filter;
            // to ensure "appliesTo" is required (not null)
            if (appliesTo == null)
            {
                throw new ArgumentNullException("appliesTo is a required property for ExternalFeeComponentFilter and cannot be null");
            }
            this.AppliesTo = appliesTo;
        }

        /// <summary>
        /// Gets or Sets FilterId
        /// </summary>
        [DataMember(Name = "filterId", IsRequired = true, EmitDefaultValue = true)]
        public string FilterId { get; set; }

        /// <summary>
        /// Gets or Sets Filter
        /// </summary>
        [DataMember(Name = "filter", IsRequired = true, EmitDefaultValue = true)]
        public string Filter { get; set; }

        /// <summary>
        /// Gets or Sets AppliesTo
        /// </summary>
        [DataMember(Name = "appliesTo", IsRequired = true, EmitDefaultValue = true)]
        public string AppliesTo { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ExternalFeeComponentFilter {\n");
            sb.Append("  FilterId: ").Append(FilterId).Append("\n");
            sb.Append("  Filter: ").Append(Filter).Append("\n");
            sb.Append("  AppliesTo: ").Append(AppliesTo).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ExternalFeeComponentFilter);
        }

        /// <summary>
        /// Returns true if ExternalFeeComponentFilter instances are equal
        /// </summary>
        /// <param name="input">Instance of ExternalFeeComponentFilter to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ExternalFeeComponentFilter input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.FilterId == input.FilterId ||
                    (this.FilterId != null &&
                    this.FilterId.Equals(input.FilterId))
                ) && 
                (
                    this.Filter == input.Filter ||
                    (this.Filter != null &&
                    this.Filter.Equals(input.Filter))
                ) && 
                (
                    this.AppliesTo == input.AppliesTo ||
                    (this.AppliesTo != null &&
                    this.AppliesTo.Equals(input.AppliesTo))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.FilterId != null)
                {
                    hashCode = (hashCode * 59) + this.FilterId.GetHashCode();
                }
                if (this.Filter != null)
                {
                    hashCode = (hashCode * 59) + this.Filter.GetHashCode();
                }
                if (this.AppliesTo != null)
                {
                    hashCode = (hashCode * 59) + this.AppliesTo.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // FilterId (string) maxLength
            if (this.FilterId != null && this.FilterId.Length > 16384)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for FilterId, length must be less than 16384.", new [] { "FilterId" });
            }

            // FilterId (string) minLength
            if (this.FilterId != null && this.FilterId.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for FilterId, length must be greater than 1.", new [] { "FilterId" });
            }

            // FilterId (string) pattern
            Regex regexFilterId = new Regex(@"^[\s\S]*$", RegexOptions.CultureInvariant);
            if (false == regexFilterId.Match(this.FilterId).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for FilterId, must match a pattern of " + regexFilterId, new [] { "FilterId" });
            }

            // Filter (string) maxLength
            if (this.Filter != null && this.Filter.Length > 16384)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Filter, length must be less than 16384.", new [] { "Filter" });
            }

            // Filter (string) minLength
            if (this.Filter != null && this.Filter.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Filter, length must be greater than 1.", new [] { "Filter" });
            }

            // Filter (string) pattern
            Regex regexFilter = new Regex(@"^[\s\S]*$", RegexOptions.CultureInvariant);
            if (false == regexFilter.Match(this.Filter).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Filter, must match a pattern of " + regexFilter, new [] { "Filter" });
            }

            // AppliesTo (string) maxLength
            if (this.AppliesTo != null && this.AppliesTo.Length > 16384)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for AppliesTo, length must be less than 16384.", new [] { "AppliesTo" });
            }

            // AppliesTo (string) minLength
            if (this.AppliesTo != null && this.AppliesTo.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for AppliesTo, length must be greater than 1.", new [] { "AppliesTo" });
            }

            // AppliesTo (string) pattern
            Regex regexAppliesTo = new Regex(@"^[\s\S]*$", RegexOptions.CultureInvariant);
            if (false == regexAppliesTo.Match(this.AppliesTo).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for AppliesTo, must match a pattern of " + regexAppliesTo, new [] { "AppliesTo" });
            }

            yield break;
        }
    }
}
