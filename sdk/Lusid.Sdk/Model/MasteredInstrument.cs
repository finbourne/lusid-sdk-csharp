/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using JsonSubTypes;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Lusid.Sdk.Client.OpenAPIDateConverter;

namespace Lusid.Sdk.Model
{
    /// <summary>
    /// LUSID representation of a reference to another instrument that has already been upserted (Mastered)
    /// </summary>
    [DataContract(Name = "MasteredInstrument")]
    [JsonConverter(typeof(JsonSubtypes), "InstrumentType")]
    public partial class MasteredInstrument : LusidInstrument, IEquatable<MasteredInstrument>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="MasteredInstrument" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected MasteredInstrument() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="MasteredInstrument" /> class.
        /// </summary>
        /// <param name="identifiers">Dictionary of identifiers of the mastered instrument (required).</param>
        /// <param name="instrumentType">The available values are: QuotedSecurity, InterestRateSwap, FxForward, Future, ExoticInstrument, FxOption, CreditDefaultSwap, InterestRateSwaption, Bond, EquityOption, FixedLeg, FloatingLeg, BespokeCashFlowsLeg, Unknown, TermDeposit, ContractForDifference, EquitySwap, CashPerpetual, CapFloor, CashSettled, CdsIndex, Basket, FundingLeg, FxSwap, ForwardRateAgreement, SimpleInstrument, Repo, Equity, ExchangeTradedOption, ReferenceInstrument, ComplexBond, InflationLinkedBond, InflationSwap, SimpleCashFlowLoan, TotalReturnSwap, InflationLeg, FundShareClass, FlexibleLoan, UnsettledCash, Cash, MasteredInstrument, LoanFacility, FlexibleDeposit (required) (default to &quot;MasteredInstrument&quot;).</param>
        public MasteredInstrument(Dictionary<string, string> identifiers = default(Dictionary<string, string>), InstrumentTypeEnum instrumentType = default(InstrumentTypeEnum)) : base(instrumentType)
        {
            // to ensure "identifiers" is required (not null)
            if (identifiers == null)
            {
                throw new ArgumentNullException("identifiers is a required property for MasteredInstrument and cannot be null");
            }
            this.Identifiers = identifiers;
        }

        /// <summary>
        /// Dictionary of identifiers of the mastered instrument
        /// </summary>
        /// <value>Dictionary of identifiers of the mastered instrument</value>
        [DataMember(Name = "identifiers", IsRequired = true, EmitDefaultValue = true)]
        public Dictionary<string, string> Identifiers { get; set; }

        /// <summary>
        /// DomCcy of the Instrument that Mastered Instrument points to - read only field
        /// </summary>
        /// <value>DomCcy of the Instrument that Mastered Instrument points to - read only field</value>
        [DataMember(Name = "masteredDomCcy", EmitDefaultValue = true)]
        public string MasteredDomCcy { get; private set; }

        /// <summary>
        /// Returns false as MasteredDomCcy should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeMasteredDomCcy()
        {
            return false;
        }
        /// <summary>
        /// Type of the Instrument that Mastered Instrument points to - read only field
        /// </summary>
        /// <value>Type of the Instrument that Mastered Instrument points to - read only field</value>
        [DataMember(Name = "masteredInstrumentType", EmitDefaultValue = true)]
        public string MasteredInstrumentType { get; private set; }

        /// <summary>
        /// Returns false as MasteredInstrumentType should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeMasteredInstrumentType()
        {
            return false;
        }
        /// <summary>
        /// Luid of the Instrument that Mastered Instrument points to - read only field
        /// </summary>
        /// <value>Luid of the Instrument that Mastered Instrument points to - read only field</value>
        [DataMember(Name = "masteredLusidInstrumentId", EmitDefaultValue = true)]
        public string MasteredLusidInstrumentId { get; private set; }

        /// <summary>
        /// Returns false as MasteredLusidInstrumentId should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeMasteredLusidInstrumentId()
        {
            return false;
        }
        /// <summary>
        /// Name of the Instrument that Mastered Instrument points to - read only field
        /// </summary>
        /// <value>Name of the Instrument that Mastered Instrument points to - read only field</value>
        [DataMember(Name = "masteredName", EmitDefaultValue = true)]
        public string MasteredName { get; private set; }

        /// <summary>
        /// Returns false as MasteredName should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeMasteredName()
        {
            return false;
        }
        /// <summary>
        /// Scope of the Instrument that Mastered Instrument points to - read only field
        /// </summary>
        /// <value>Scope of the Instrument that Mastered Instrument points to - read only field</value>
        [DataMember(Name = "masteredScope", EmitDefaultValue = true)]
        public string MasteredScope { get; private set; }

        /// <summary>
        /// Returns false as MasteredScope should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeMasteredScope()
        {
            return false;
        }
        /// <summary>
        /// Asset class of the underlying mastered instrument - read only field    Supported string (enumeration) values are: [InterestRates, FX, Inflation, Equities, Credit, Commodities, Money].
        /// </summary>
        /// <value>Asset class of the underlying mastered instrument - read only field    Supported string (enumeration) values are: [InterestRates, FX, Inflation, Equities, Credit, Commodities, Money].</value>
        [DataMember(Name = "masteredAssetClass", EmitDefaultValue = true)]
        public string MasteredAssetClass { get; private set; }

        /// <summary>
        /// Returns false as MasteredAssetClass should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeMasteredAssetClass()
        {
            return false;
        }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class MasteredInstrument {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  Identifiers: ").Append(Identifiers).Append("\n");
            sb.Append("  MasteredDomCcy: ").Append(MasteredDomCcy).Append("\n");
            sb.Append("  MasteredInstrumentType: ").Append(MasteredInstrumentType).Append("\n");
            sb.Append("  MasteredLusidInstrumentId: ").Append(MasteredLusidInstrumentId).Append("\n");
            sb.Append("  MasteredName: ").Append(MasteredName).Append("\n");
            sb.Append("  MasteredScope: ").Append(MasteredScope).Append("\n");
            sb.Append("  MasteredAssetClass: ").Append(MasteredAssetClass).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as MasteredInstrument);
        }

        /// <summary>
        /// Returns true if MasteredInstrument instances are equal
        /// </summary>
        /// <param name="input">Instance of MasteredInstrument to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MasteredInstrument input)
        {
            if (input == null)
            {
                return false;
            }
            return base.Equals(input) && 
                (
                    this.Identifiers == input.Identifiers ||
                    this.Identifiers != null &&
                    input.Identifiers != null &&
                    this.Identifiers.SequenceEqual(input.Identifiers)
                ) && base.Equals(input) && 
                (
                    this.MasteredDomCcy == input.MasteredDomCcy ||
                    (this.MasteredDomCcy != null &&
                    this.MasteredDomCcy.Equals(input.MasteredDomCcy))
                ) && base.Equals(input) && 
                (
                    this.MasteredInstrumentType == input.MasteredInstrumentType ||
                    (this.MasteredInstrumentType != null &&
                    this.MasteredInstrumentType.Equals(input.MasteredInstrumentType))
                ) && base.Equals(input) && 
                (
                    this.MasteredLusidInstrumentId == input.MasteredLusidInstrumentId ||
                    (this.MasteredLusidInstrumentId != null &&
                    this.MasteredLusidInstrumentId.Equals(input.MasteredLusidInstrumentId))
                ) && base.Equals(input) && 
                (
                    this.MasteredName == input.MasteredName ||
                    (this.MasteredName != null &&
                    this.MasteredName.Equals(input.MasteredName))
                ) && base.Equals(input) && 
                (
                    this.MasteredScope == input.MasteredScope ||
                    (this.MasteredScope != null &&
                    this.MasteredScope.Equals(input.MasteredScope))
                ) && base.Equals(input) && 
                (
                    this.MasteredAssetClass == input.MasteredAssetClass ||
                    (this.MasteredAssetClass != null &&
                    this.MasteredAssetClass.Equals(input.MasteredAssetClass))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = base.GetHashCode();
                if (this.Identifiers != null)
                {
                    hashCode = (hashCode * 59) + this.Identifiers.GetHashCode();
                }
                if (this.MasteredDomCcy != null)
                {
                    hashCode = (hashCode * 59) + this.MasteredDomCcy.GetHashCode();
                }
                if (this.MasteredInstrumentType != null)
                {
                    hashCode = (hashCode * 59) + this.MasteredInstrumentType.GetHashCode();
                }
                if (this.MasteredLusidInstrumentId != null)
                {
                    hashCode = (hashCode * 59) + this.MasteredLusidInstrumentId.GetHashCode();
                }
                if (this.MasteredName != null)
                {
                    hashCode = (hashCode * 59) + this.MasteredName.GetHashCode();
                }
                if (this.MasteredScope != null)
                {
                    hashCode = (hashCode * 59) + this.MasteredScope.GetHashCode();
                }
                if (this.MasteredAssetClass != null)
                {
                    hashCode = (hashCode * 59) + this.MasteredAssetClass.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            return this.BaseValidate(validationContext);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        protected IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> BaseValidate(ValidationContext validationContext)
        {
            foreach (var x in base.BaseValidate(validationContext))
            {
                yield return x;
            }
            yield break;
        }
    }
}
