/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Lusid.Sdk.Client.OpenAPIDateConverter;

namespace Lusid.Sdk.Model
{
    /// <summary>
    /// RecommendedSortBy
    /// </summary>
    [DataContract(Name = "RecommendedSortBy")]
    public partial class RecommendedSortBy : IEquatable<RecommendedSortBy>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RecommendedSortBy" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected RecommendedSortBy() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="RecommendedSortBy" /> class.
        /// </summary>
        /// <param name="attributeName">The property key, identifier type, or field to be sorted by. (required).</param>
        /// <param name="sortOrder">The sorting direction. Either ascending (ASC) or descending (DESC)..</param>
        public RecommendedSortBy(string attributeName = default(string), string sortOrder = default(string))
        {
            // to ensure "attributeName" is required (not null)
            if (attributeName == null)
            {
                throw new ArgumentNullException("attributeName is a required property for RecommendedSortBy and cannot be null");
            }
            this.AttributeName = attributeName;
            this.SortOrder = sortOrder;
        }

        /// <summary>
        /// The property key, identifier type, or field to be sorted by.
        /// </summary>
        /// <value>The property key, identifier type, or field to be sorted by.</value>
        [DataMember(Name = "attributeName", IsRequired = true, EmitDefaultValue = true)]
        public string AttributeName { get; set; }

        /// <summary>
        /// The sorting direction. Either ascending (ASC) or descending (DESC).
        /// </summary>
        /// <value>The sorting direction. Either ascending (ASC) or descending (DESC).</value>
        [DataMember(Name = "sortOrder", EmitDefaultValue = true)]
        public string SortOrder { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class RecommendedSortBy {\n");
            sb.Append("  AttributeName: ").Append(AttributeName).Append("\n");
            sb.Append("  SortOrder: ").Append(SortOrder).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as RecommendedSortBy);
        }

        /// <summary>
        /// Returns true if RecommendedSortBy instances are equal
        /// </summary>
        /// <param name="input">Instance of RecommendedSortBy to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RecommendedSortBy input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.AttributeName == input.AttributeName ||
                    (this.AttributeName != null &&
                    this.AttributeName.Equals(input.AttributeName))
                ) && 
                (
                    this.SortOrder == input.SortOrder ||
                    (this.SortOrder != null &&
                    this.SortOrder.Equals(input.SortOrder))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AttributeName != null)
                {
                    hashCode = (hashCode * 59) + this.AttributeName.GetHashCode();
                }
                if (this.SortOrder != null)
                {
                    hashCode = (hashCode * 59) + this.SortOrder.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // AttributeName (string) maxLength
            if (this.AttributeName != null && this.AttributeName.Length > 16384)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for AttributeName, length must be less than 16384.", new [] { "AttributeName" });
            }

            // AttributeName (string) minLength
            if (this.AttributeName != null && this.AttributeName.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for AttributeName, length must be greater than 1.", new [] { "AttributeName" });
            }

            // SortOrder (string) maxLength
            if (this.SortOrder != null && this.SortOrder.Length > 4)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SortOrder, length must be less than 4.", new [] { "SortOrder" });
            }

            // SortOrder (string) minLength
            if (this.SortOrder != null && this.SortOrder.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SortOrder, length must be greater than 0.", new [] { "SortOrder" });
            }

            yield break;
        }
    }
}
