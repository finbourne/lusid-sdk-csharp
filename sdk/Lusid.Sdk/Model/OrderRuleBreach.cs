/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Lusid.Sdk.Client.OpenAPIDateConverter;

namespace Lusid.Sdk.Model
{
    /// <summary>
    /// OrderRuleBreach
    /// </summary>
    [DataContract(Name = "OrderRuleBreach")]
    public partial class OrderRuleBreach : IEquatable<OrderRuleBreach>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="OrderRuleBreach" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected OrderRuleBreach() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="OrderRuleBreach" /> class.
        /// </summary>
        /// <param name="breachTaskId">Uniquely identifies this historical order breach workflow task. (required).</param>
        /// <param name="complianceState">The compliance state of this order breach. Possible values are &#39;Pending&#39;, &#39;Failed&#39;, &#39;Manually approved&#39;, &#39;Passed&#39; and &#39;Warning&#39;. (required).</param>
        public OrderRuleBreach(string breachTaskId = default(string), string complianceState = default(string))
        {
            // to ensure "breachTaskId" is required (not null)
            if (breachTaskId == null)
            {
                throw new ArgumentNullException("breachTaskId is a required property for OrderRuleBreach and cannot be null");
            }
            this.BreachTaskId = breachTaskId;
            // to ensure "complianceState" is required (not null)
            if (complianceState == null)
            {
                throw new ArgumentNullException("complianceState is a required property for OrderRuleBreach and cannot be null");
            }
            this.ComplianceState = complianceState;
        }

        /// <summary>
        /// Uniquely identifies this historical order breach workflow task.
        /// </summary>
        /// <value>Uniquely identifies this historical order breach workflow task.</value>
        [DataMember(Name = "breachTaskId", IsRequired = true, EmitDefaultValue = true)]
        public string BreachTaskId { get; set; }

        /// <summary>
        /// The compliance state of this order breach. Possible values are &#39;Pending&#39;, &#39;Failed&#39;, &#39;Manually approved&#39;, &#39;Passed&#39; and &#39;Warning&#39;.
        /// </summary>
        /// <value>The compliance state of this order breach. Possible values are &#39;Pending&#39;, &#39;Failed&#39;, &#39;Manually approved&#39;, &#39;Passed&#39; and &#39;Warning&#39;.</value>
        [DataMember(Name = "complianceState", IsRequired = true, EmitDefaultValue = true)]
        public string ComplianceState { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class OrderRuleBreach {\n");
            sb.Append("  BreachTaskId: ").Append(BreachTaskId).Append("\n");
            sb.Append("  ComplianceState: ").Append(ComplianceState).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as OrderRuleBreach);
        }

        /// <summary>
        /// Returns true if OrderRuleBreach instances are equal
        /// </summary>
        /// <param name="input">Instance of OrderRuleBreach to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OrderRuleBreach input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.BreachTaskId == input.BreachTaskId ||
                    (this.BreachTaskId != null &&
                    this.BreachTaskId.Equals(input.BreachTaskId))
                ) && 
                (
                    this.ComplianceState == input.ComplianceState ||
                    (this.ComplianceState != null &&
                    this.ComplianceState.Equals(input.ComplianceState))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.BreachTaskId != null)
                {
                    hashCode = (hashCode * 59) + this.BreachTaskId.GetHashCode();
                }
                if (this.ComplianceState != null)
                {
                    hashCode = (hashCode * 59) + this.ComplianceState.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // BreachTaskId (string) maxLength
            if (this.BreachTaskId != null && this.BreachTaskId.Length > 36)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for BreachTaskId, length must be less than 36.", new [] { "BreachTaskId" });
            }

            // BreachTaskId (string) minLength
            if (this.BreachTaskId != null && this.BreachTaskId.Length < 36)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for BreachTaskId, length must be greater than 36.", new [] { "BreachTaskId" });
            }

            // BreachTaskId (string) pattern
            Regex regexBreachTaskId = new Regex(@"^[a-zA-Z0-9\-]+$", RegexOptions.CultureInvariant);
            if (false == regexBreachTaskId.Match(this.BreachTaskId).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for BreachTaskId, must match a pattern of " + regexBreachTaskId, new [] { "BreachTaskId" });
            }

            // ComplianceState (string) minLength
            if (this.ComplianceState != null && this.ComplianceState.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ComplianceState, length must be greater than 1.", new [] { "ComplianceState" });
            }

            yield break;
        }
    }
}
