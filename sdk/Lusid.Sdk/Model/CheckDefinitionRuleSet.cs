/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Lusid.Sdk.Client.OpenAPIDateConverter;

namespace Lusid.Sdk.Model
{
    /// <summary>
    /// CheckDefinitionRuleSet
    /// </summary>
    [DataContract(Name = "CheckDefinitionRuleSet")]
    public partial class CheckDefinitionRuleSet : IEquatable<CheckDefinitionRuleSet>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CheckDefinitionRuleSet" /> class.
        /// </summary>
        /// <param name="ruleSetKey">The Key of the Rule Set..</param>
        /// <param name="displayName">The name of the Rule Set..</param>
        /// <param name="description">A description for the Rule Set..</param>
        /// <param name="ruleSetFilter">A filter for the Rule Set to filter entity instances the rule set applies to..</param>
        /// <param name="rules">A collection of rules for the Rule Set..</param>
        public CheckDefinitionRuleSet(string ruleSetKey = default(string), string displayName = default(string), string description = default(string), string ruleSetFilter = default(string), List<CheckDefinitionRule> rules = default(List<CheckDefinitionRule>))
        {
            this.RuleSetKey = ruleSetKey;
            this.DisplayName = displayName;
            this.Description = description;
            this.RuleSetFilter = ruleSetFilter;
            this.Rules = rules;
        }

        /// <summary>
        /// The Key of the Rule Set.
        /// </summary>
        /// <value>The Key of the Rule Set.</value>
        [DataMember(Name = "ruleSetKey", EmitDefaultValue = true)]
        public string RuleSetKey { get; set; }

        /// <summary>
        /// The name of the Rule Set.
        /// </summary>
        /// <value>The name of the Rule Set.</value>
        [DataMember(Name = "displayName", EmitDefaultValue = true)]
        public string DisplayName { get; set; }

        /// <summary>
        /// A description for the Rule Set.
        /// </summary>
        /// <value>A description for the Rule Set.</value>
        [DataMember(Name = "description", EmitDefaultValue = true)]
        public string Description { get; set; }

        /// <summary>
        /// A filter for the Rule Set to filter entity instances the rule set applies to.
        /// </summary>
        /// <value>A filter for the Rule Set to filter entity instances the rule set applies to.</value>
        [DataMember(Name = "ruleSetFilter", EmitDefaultValue = true)]
        public string RuleSetFilter { get; set; }

        /// <summary>
        /// A collection of rules for the Rule Set.
        /// </summary>
        /// <value>A collection of rules for the Rule Set.</value>
        [DataMember(Name = "rules", EmitDefaultValue = true)]
        public List<CheckDefinitionRule> Rules { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CheckDefinitionRuleSet {\n");
            sb.Append("  RuleSetKey: ").Append(RuleSetKey).Append("\n");
            sb.Append("  DisplayName: ").Append(DisplayName).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  RuleSetFilter: ").Append(RuleSetFilter).Append("\n");
            sb.Append("  Rules: ").Append(Rules).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CheckDefinitionRuleSet);
        }

        /// <summary>
        /// Returns true if CheckDefinitionRuleSet instances are equal
        /// </summary>
        /// <param name="input">Instance of CheckDefinitionRuleSet to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CheckDefinitionRuleSet input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.RuleSetKey == input.RuleSetKey ||
                    (this.RuleSetKey != null &&
                    this.RuleSetKey.Equals(input.RuleSetKey))
                ) && 
                (
                    this.DisplayName == input.DisplayName ||
                    (this.DisplayName != null &&
                    this.DisplayName.Equals(input.DisplayName))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.RuleSetFilter == input.RuleSetFilter ||
                    (this.RuleSetFilter != null &&
                    this.RuleSetFilter.Equals(input.RuleSetFilter))
                ) && 
                (
                    this.Rules == input.Rules ||
                    this.Rules != null &&
                    input.Rules != null &&
                    this.Rules.SequenceEqual(input.Rules)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.RuleSetKey != null)
                {
                    hashCode = (hashCode * 59) + this.RuleSetKey.GetHashCode();
                }
                if (this.DisplayName != null)
                {
                    hashCode = (hashCode * 59) + this.DisplayName.GetHashCode();
                }
                if (this.Description != null)
                {
                    hashCode = (hashCode * 59) + this.Description.GetHashCode();
                }
                if (this.RuleSetFilter != null)
                {
                    hashCode = (hashCode * 59) + this.RuleSetFilter.GetHashCode();
                }
                if (this.Rules != null)
                {
                    hashCode = (hashCode * 59) + this.Rules.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // RuleSetKey (string) maxLength
            if (this.RuleSetKey != null && this.RuleSetKey.Length > 50)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for RuleSetKey, length must be less than 50.", new [] { "RuleSetKey" });
            }

            // RuleSetKey (string) minLength
            if (this.RuleSetKey != null && this.RuleSetKey.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for RuleSetKey, length must be greater than 0.", new [] { "RuleSetKey" });
            }

            // DisplayName (string) maxLength
            if (this.DisplayName != null && this.DisplayName.Length > 512)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for DisplayName, length must be less than 512.", new [] { "DisplayName" });
            }

            // DisplayName (string) minLength
            if (this.DisplayName != null && this.DisplayName.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for DisplayName, length must be greater than 0.", new [] { "DisplayName" });
            }

            // DisplayName (string) pattern
            Regex regexDisplayName = new Regex(@"^[\s\S]*$", RegexOptions.CultureInvariant);
            if (false == regexDisplayName.Match(this.DisplayName).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for DisplayName, must match a pattern of " + regexDisplayName, new [] { "DisplayName" });
            }

            // Description (string) maxLength
            if (this.Description != null && this.Description.Length > 512)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Description, length must be less than 512.", new [] { "Description" });
            }

            // Description (string) minLength
            if (this.Description != null && this.Description.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Description, length must be greater than 1.", new [] { "Description" });
            }

            // Description (string) pattern
            Regex regexDescription = new Regex(@"^[\s\S]*$", RegexOptions.CultureInvariant);
            if (false == regexDescription.Match(this.Description).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Description, must match a pattern of " + regexDescription, new [] { "Description" });
            }

            // RuleSetFilter (string) maxLength
            if (this.RuleSetFilter != null && this.RuleSetFilter.Length > 16384)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for RuleSetFilter, length must be less than 16384.", new [] { "RuleSetFilter" });
            }

            // RuleSetFilter (string) minLength
            if (this.RuleSetFilter != null && this.RuleSetFilter.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for RuleSetFilter, length must be greater than 0.", new [] { "RuleSetFilter" });
            }

            // RuleSetFilter (string) pattern
            Regex regexRuleSetFilter = new Regex(@"^[\s\S]*$", RegexOptions.CultureInvariant);
            if (false == regexRuleSetFilter.Match(this.RuleSetFilter).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for RuleSetFilter, must match a pattern of " + regexRuleSetFilter, new [] { "RuleSetFilter" });
            }

            yield break;
        }
    }
}
