/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Lusid.Sdk.Client.OpenAPIDateConverter;

namespace Lusid.Sdk.Model
{
    /// <summary>
    /// GroupReconciliationDefinition
    /// </summary>
    [DataContract(Name = "GroupReconciliationDefinition")]
    public partial class GroupReconciliationDefinition : IEquatable<GroupReconciliationDefinition>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GroupReconciliationDefinition" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="displayName">The name of the Group Reconciliation Definition.</param>
        /// <param name="description">The description of the Group Reconciliation Definition.</param>
        /// <param name="portfolioEntityIds">portfolioEntityIds.</param>
        /// <param name="recipeIds">recipeIds.</param>
        /// <param name="currencies">currencies.</param>
        /// <param name="transactionDateWindows">transactionDateWindows.</param>
        /// <param name="comparisonRulesetIds">comparisonRulesetIds.</param>
        /// <param name="breakCodeSource">breakCodeSource.</param>
        /// <param name="primarySchedule">primarySchedule.</param>
        /// <param name="href">The specific Uniform Resource Identifier (URI) for this resource at the requested effective and asAt datetime..</param>
        /// <param name="varVersion">varVersion.</param>
        public GroupReconciliationDefinition(ResourceId id = default(ResourceId), string displayName = default(string), string description = default(string), GroupReconciliationDefinitionPortfolioEntityIds portfolioEntityIds = default(GroupReconciliationDefinitionPortfolioEntityIds), GroupReconciliationDefinitionRecipeIds recipeIds = default(GroupReconciliationDefinitionRecipeIds), GroupReconciliationDefinitionCurrencies currencies = default(GroupReconciliationDefinitionCurrencies), TransactionDateWindows transactionDateWindows = default(TransactionDateWindows), GroupReconciliationDefinitionComparisonRulesetIds comparisonRulesetIds = default(GroupReconciliationDefinitionComparisonRulesetIds), BreakCodeSource breakCodeSource = default(BreakCodeSource), PrimarySchedule primarySchedule = default(PrimarySchedule), string href = default(string), ModelVersion varVersion = default(ModelVersion))
        {
            this.Id = id;
            this.DisplayName = displayName;
            this.Description = description;
            this.PortfolioEntityIds = portfolioEntityIds;
            this.RecipeIds = recipeIds;
            this.Currencies = currencies;
            this.TransactionDateWindows = transactionDateWindows;
            this.ComparisonRulesetIds = comparisonRulesetIds;
            this.BreakCodeSource = breakCodeSource;
            this.PrimarySchedule = primarySchedule;
            this.Href = href;
            this.VarVersion = varVersion;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public ResourceId Id { get; set; }

        /// <summary>
        /// The name of the Group Reconciliation Definition
        /// </summary>
        /// <value>The name of the Group Reconciliation Definition</value>
        [DataMember(Name = "displayName", EmitDefaultValue = true)]
        public string DisplayName { get; set; }

        /// <summary>
        /// The description of the Group Reconciliation Definition
        /// </summary>
        /// <value>The description of the Group Reconciliation Definition</value>
        [DataMember(Name = "description", EmitDefaultValue = true)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets PortfolioEntityIds
        /// </summary>
        [DataMember(Name = "portfolioEntityIds", EmitDefaultValue = false)]
        public GroupReconciliationDefinitionPortfolioEntityIds PortfolioEntityIds { get; set; }

        /// <summary>
        /// Gets or Sets RecipeIds
        /// </summary>
        [DataMember(Name = "recipeIds", EmitDefaultValue = false)]
        public GroupReconciliationDefinitionRecipeIds RecipeIds { get; set; }

        /// <summary>
        /// Gets or Sets Currencies
        /// </summary>
        [DataMember(Name = "currencies", EmitDefaultValue = false)]
        public GroupReconciliationDefinitionCurrencies Currencies { get; set; }

        /// <summary>
        /// Gets or Sets TransactionDateWindows
        /// </summary>
        [DataMember(Name = "transactionDateWindows", EmitDefaultValue = false)]
        public TransactionDateWindows TransactionDateWindows { get; set; }

        /// <summary>
        /// Gets or Sets ComparisonRulesetIds
        /// </summary>
        [DataMember(Name = "comparisonRulesetIds", EmitDefaultValue = false)]
        public GroupReconciliationDefinitionComparisonRulesetIds ComparisonRulesetIds { get; set; }

        /// <summary>
        /// Gets or Sets BreakCodeSource
        /// </summary>
        [DataMember(Name = "breakCodeSource", EmitDefaultValue = false)]
        public BreakCodeSource BreakCodeSource { get; set; }

        /// <summary>
        /// Gets or Sets PrimarySchedule
        /// </summary>
        [DataMember(Name = "primarySchedule", EmitDefaultValue = false)]
        public PrimarySchedule PrimarySchedule { get; set; }

        /// <summary>
        /// The specific Uniform Resource Identifier (URI) for this resource at the requested effective and asAt datetime.
        /// </summary>
        /// <value>The specific Uniform Resource Identifier (URI) for this resource at the requested effective and asAt datetime.</value>
        [DataMember(Name = "href", EmitDefaultValue = true)]
        public string Href { get; set; }

        /// <summary>
        /// Gets or Sets VarVersion
        /// </summary>
        [DataMember(Name = "version", EmitDefaultValue = false)]
        public ModelVersion VarVersion { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class GroupReconciliationDefinition {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  DisplayName: ").Append(DisplayName).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  PortfolioEntityIds: ").Append(PortfolioEntityIds).Append("\n");
            sb.Append("  RecipeIds: ").Append(RecipeIds).Append("\n");
            sb.Append("  Currencies: ").Append(Currencies).Append("\n");
            sb.Append("  TransactionDateWindows: ").Append(TransactionDateWindows).Append("\n");
            sb.Append("  ComparisonRulesetIds: ").Append(ComparisonRulesetIds).Append("\n");
            sb.Append("  BreakCodeSource: ").Append(BreakCodeSource).Append("\n");
            sb.Append("  PrimarySchedule: ").Append(PrimarySchedule).Append("\n");
            sb.Append("  Href: ").Append(Href).Append("\n");
            sb.Append("  VarVersion: ").Append(VarVersion).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GroupReconciliationDefinition);
        }

        /// <summary>
        /// Returns true if GroupReconciliationDefinition instances are equal
        /// </summary>
        /// <param name="input">Instance of GroupReconciliationDefinition to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GroupReconciliationDefinition input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.DisplayName == input.DisplayName ||
                    (this.DisplayName != null &&
                    this.DisplayName.Equals(input.DisplayName))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.PortfolioEntityIds == input.PortfolioEntityIds ||
                    (this.PortfolioEntityIds != null &&
                    this.PortfolioEntityIds.Equals(input.PortfolioEntityIds))
                ) && 
                (
                    this.RecipeIds == input.RecipeIds ||
                    (this.RecipeIds != null &&
                    this.RecipeIds.Equals(input.RecipeIds))
                ) && 
                (
                    this.Currencies == input.Currencies ||
                    (this.Currencies != null &&
                    this.Currencies.Equals(input.Currencies))
                ) && 
                (
                    this.TransactionDateWindows == input.TransactionDateWindows ||
                    (this.TransactionDateWindows != null &&
                    this.TransactionDateWindows.Equals(input.TransactionDateWindows))
                ) && 
                (
                    this.ComparisonRulesetIds == input.ComparisonRulesetIds ||
                    (this.ComparisonRulesetIds != null &&
                    this.ComparisonRulesetIds.Equals(input.ComparisonRulesetIds))
                ) && 
                (
                    this.BreakCodeSource == input.BreakCodeSource ||
                    (this.BreakCodeSource != null &&
                    this.BreakCodeSource.Equals(input.BreakCodeSource))
                ) && 
                (
                    this.PrimarySchedule == input.PrimarySchedule ||
                    (this.PrimarySchedule != null &&
                    this.PrimarySchedule.Equals(input.PrimarySchedule))
                ) && 
                (
                    this.Href == input.Href ||
                    (this.Href != null &&
                    this.Href.Equals(input.Href))
                ) && 
                (
                    this.VarVersion == input.VarVersion ||
                    (this.VarVersion != null &&
                    this.VarVersion.Equals(input.VarVersion))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                {
                    hashCode = (hashCode * 59) + this.Id.GetHashCode();
                }
                if (this.DisplayName != null)
                {
                    hashCode = (hashCode * 59) + this.DisplayName.GetHashCode();
                }
                if (this.Description != null)
                {
                    hashCode = (hashCode * 59) + this.Description.GetHashCode();
                }
                if (this.PortfolioEntityIds != null)
                {
                    hashCode = (hashCode * 59) + this.PortfolioEntityIds.GetHashCode();
                }
                if (this.RecipeIds != null)
                {
                    hashCode = (hashCode * 59) + this.RecipeIds.GetHashCode();
                }
                if (this.Currencies != null)
                {
                    hashCode = (hashCode * 59) + this.Currencies.GetHashCode();
                }
                if (this.TransactionDateWindows != null)
                {
                    hashCode = (hashCode * 59) + this.TransactionDateWindows.GetHashCode();
                }
                if (this.ComparisonRulesetIds != null)
                {
                    hashCode = (hashCode * 59) + this.ComparisonRulesetIds.GetHashCode();
                }
                if (this.BreakCodeSource != null)
                {
                    hashCode = (hashCode * 59) + this.BreakCodeSource.GetHashCode();
                }
                if (this.PrimarySchedule != null)
                {
                    hashCode = (hashCode * 59) + this.PrimarySchedule.GetHashCode();
                }
                if (this.Href != null)
                {
                    hashCode = (hashCode * 59) + this.Href.GetHashCode();
                }
                if (this.VarVersion != null)
                {
                    hashCode = (hashCode * 59) + this.VarVersion.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
