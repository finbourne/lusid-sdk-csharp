/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Lusid.Sdk.Client.OpenAPIDateConverter;

namespace Lusid.Sdk.Model
{
    /// <summary>
    /// Representation of an Investment Account on the LUSID API
    /// </summary>
    [DataContract(Name = "InvestmentAccount")]
    public partial class InvestmentAccount : IEquatable<InvestmentAccount>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InvestmentAccount" /> class.
        /// </summary>
        /// <param name="scope">The scope in which the Investment Account lies..</param>
        /// <param name="identifiers">Unique client-defined identifiers of the Investment Account..</param>
        /// <param name="displayName">The display name of the Investment Account.</param>
        /// <param name="description">The description of the Investment Account.</param>
        /// <param name="accountType">The type of the of the Investment Account..</param>
        /// <param name="accountHolders">The Account Holders of the Investment Account..</param>
        /// <param name="investmentPortfolios">The Investment Portfolios of the Investment Account..</param>
        /// <param name="lusidInvestmentAccountId">The unique LUSID Investment Account Identifier of the Investment Account..</param>
        /// <param name="properties">A set of properties associated to the Investment Account..</param>
        /// <param name="relationships">A set of relationships associated to the Investment Account..</param>
        /// <param name="href">The specific Uniform Resource Identifier (URI) for this resource at the requested effective and asAt datetime..</param>
        /// <param name="varVersion">varVersion.</param>
        /// <param name="links">links.</param>
        public InvestmentAccount(string scope = default(string), Dictionary<string, Property> identifiers = default(Dictionary<string, Property>), string displayName = default(string), string description = default(string), string accountType = default(string), List<AccountHolder> accountHolders = default(List<AccountHolder>), List<InvestmentPortfolio> investmentPortfolios = default(List<InvestmentPortfolio>), string lusidInvestmentAccountId = default(string), Dictionary<string, Property> properties = default(Dictionary<string, Property>), List<Relationship> relationships = default(List<Relationship>), string href = default(string), ModelVersion varVersion = default(ModelVersion), List<Link> links = default(List<Link>))
        {
            this.Scope = scope;
            this.Identifiers = identifiers;
            this.DisplayName = displayName;
            this.Description = description;
            this.AccountType = accountType;
            this.AccountHolders = accountHolders;
            this.InvestmentPortfolios = investmentPortfolios;
            this.LusidInvestmentAccountId = lusidInvestmentAccountId;
            this.Properties = properties;
            this.Relationships = relationships;
            this.Href = href;
            this.VarVersion = varVersion;
            this.Links = links;
        }

        /// <summary>
        /// The scope in which the Investment Account lies.
        /// </summary>
        /// <value>The scope in which the Investment Account lies.</value>
        [DataMember(Name = "scope", EmitDefaultValue = true)]
        public string Scope { get; set; }

        /// <summary>
        /// Unique client-defined identifiers of the Investment Account.
        /// </summary>
        /// <value>Unique client-defined identifiers of the Investment Account.</value>
        [DataMember(Name = "identifiers", EmitDefaultValue = true)]
        public Dictionary<string, Property> Identifiers { get; set; }

        /// <summary>
        /// The display name of the Investment Account
        /// </summary>
        /// <value>The display name of the Investment Account</value>
        [DataMember(Name = "displayName", EmitDefaultValue = true)]
        public string DisplayName { get; set; }

        /// <summary>
        /// The description of the Investment Account
        /// </summary>
        /// <value>The description of the Investment Account</value>
        [DataMember(Name = "description", EmitDefaultValue = true)]
        public string Description { get; set; }

        /// <summary>
        /// The type of the of the Investment Account.
        /// </summary>
        /// <value>The type of the of the Investment Account.</value>
        [DataMember(Name = "accountType", EmitDefaultValue = true)]
        public string AccountType { get; set; }

        /// <summary>
        /// The Account Holders of the Investment Account.
        /// </summary>
        /// <value>The Account Holders of the Investment Account.</value>
        [DataMember(Name = "accountHolders", EmitDefaultValue = true)]
        public List<AccountHolder> AccountHolders { get; set; }

        /// <summary>
        /// The Investment Portfolios of the Investment Account.
        /// </summary>
        /// <value>The Investment Portfolios of the Investment Account.</value>
        [DataMember(Name = "investmentPortfolios", EmitDefaultValue = true)]
        public List<InvestmentPortfolio> InvestmentPortfolios { get; set; }

        /// <summary>
        /// The unique LUSID Investment Account Identifier of the Investment Account.
        /// </summary>
        /// <value>The unique LUSID Investment Account Identifier of the Investment Account.</value>
        [DataMember(Name = "lusidInvestmentAccountId", EmitDefaultValue = true)]
        public string LusidInvestmentAccountId { get; set; }

        /// <summary>
        /// A set of properties associated to the Investment Account.
        /// </summary>
        /// <value>A set of properties associated to the Investment Account.</value>
        [DataMember(Name = "properties", EmitDefaultValue = true)]
        public Dictionary<string, Property> Properties { get; set; }

        /// <summary>
        /// A set of relationships associated to the Investment Account.
        /// </summary>
        /// <value>A set of relationships associated to the Investment Account.</value>
        [DataMember(Name = "relationships", EmitDefaultValue = true)]
        public List<Relationship> Relationships { get; set; }

        /// <summary>
        /// The specific Uniform Resource Identifier (URI) for this resource at the requested effective and asAt datetime.
        /// </summary>
        /// <value>The specific Uniform Resource Identifier (URI) for this resource at the requested effective and asAt datetime.</value>
        [DataMember(Name = "href", EmitDefaultValue = true)]
        public string Href { get; set; }

        /// <summary>
        /// Gets or Sets VarVersion
        /// </summary>
        [DataMember(Name = "version", EmitDefaultValue = false)]
        public ModelVersion VarVersion { get; set; }

        /// <summary>
        /// Gets or Sets Links
        /// </summary>
        [DataMember(Name = "links", EmitDefaultValue = true)]
        public List<Link> Links { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class InvestmentAccount {\n");
            sb.Append("  Scope: ").Append(Scope).Append("\n");
            sb.Append("  Identifiers: ").Append(Identifiers).Append("\n");
            sb.Append("  DisplayName: ").Append(DisplayName).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  AccountType: ").Append(AccountType).Append("\n");
            sb.Append("  AccountHolders: ").Append(AccountHolders).Append("\n");
            sb.Append("  InvestmentPortfolios: ").Append(InvestmentPortfolios).Append("\n");
            sb.Append("  LusidInvestmentAccountId: ").Append(LusidInvestmentAccountId).Append("\n");
            sb.Append("  Properties: ").Append(Properties).Append("\n");
            sb.Append("  Relationships: ").Append(Relationships).Append("\n");
            sb.Append("  Href: ").Append(Href).Append("\n");
            sb.Append("  VarVersion: ").Append(VarVersion).Append("\n");
            sb.Append("  Links: ").Append(Links).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as InvestmentAccount);
        }

        /// <summary>
        /// Returns true if InvestmentAccount instances are equal
        /// </summary>
        /// <param name="input">Instance of InvestmentAccount to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InvestmentAccount input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Scope == input.Scope ||
                    (this.Scope != null &&
                    this.Scope.Equals(input.Scope))
                ) && 
                (
                    this.Identifiers == input.Identifiers ||
                    this.Identifiers != null &&
                    input.Identifiers != null &&
                    this.Identifiers.SequenceEqual(input.Identifiers)
                ) && 
                (
                    this.DisplayName == input.DisplayName ||
                    (this.DisplayName != null &&
                    this.DisplayName.Equals(input.DisplayName))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.AccountType == input.AccountType ||
                    (this.AccountType != null &&
                    this.AccountType.Equals(input.AccountType))
                ) && 
                (
                    this.AccountHolders == input.AccountHolders ||
                    this.AccountHolders != null &&
                    input.AccountHolders != null &&
                    this.AccountHolders.SequenceEqual(input.AccountHolders)
                ) && 
                (
                    this.InvestmentPortfolios == input.InvestmentPortfolios ||
                    this.InvestmentPortfolios != null &&
                    input.InvestmentPortfolios != null &&
                    this.InvestmentPortfolios.SequenceEqual(input.InvestmentPortfolios)
                ) && 
                (
                    this.LusidInvestmentAccountId == input.LusidInvestmentAccountId ||
                    (this.LusidInvestmentAccountId != null &&
                    this.LusidInvestmentAccountId.Equals(input.LusidInvestmentAccountId))
                ) && 
                (
                    this.Properties == input.Properties ||
                    this.Properties != null &&
                    input.Properties != null &&
                    this.Properties.SequenceEqual(input.Properties)
                ) && 
                (
                    this.Relationships == input.Relationships ||
                    this.Relationships != null &&
                    input.Relationships != null &&
                    this.Relationships.SequenceEqual(input.Relationships)
                ) && 
                (
                    this.Href == input.Href ||
                    (this.Href != null &&
                    this.Href.Equals(input.Href))
                ) && 
                (
                    this.VarVersion == input.VarVersion ||
                    (this.VarVersion != null &&
                    this.VarVersion.Equals(input.VarVersion))
                ) && 
                (
                    this.Links == input.Links ||
                    this.Links != null &&
                    input.Links != null &&
                    this.Links.SequenceEqual(input.Links)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Scope != null)
                {
                    hashCode = (hashCode * 59) + this.Scope.GetHashCode();
                }
                if (this.Identifiers != null)
                {
                    hashCode = (hashCode * 59) + this.Identifiers.GetHashCode();
                }
                if (this.DisplayName != null)
                {
                    hashCode = (hashCode * 59) + this.DisplayName.GetHashCode();
                }
                if (this.Description != null)
                {
                    hashCode = (hashCode * 59) + this.Description.GetHashCode();
                }
                if (this.AccountType != null)
                {
                    hashCode = (hashCode * 59) + this.AccountType.GetHashCode();
                }
                if (this.AccountHolders != null)
                {
                    hashCode = (hashCode * 59) + this.AccountHolders.GetHashCode();
                }
                if (this.InvestmentPortfolios != null)
                {
                    hashCode = (hashCode * 59) + this.InvestmentPortfolios.GetHashCode();
                }
                if (this.LusidInvestmentAccountId != null)
                {
                    hashCode = (hashCode * 59) + this.LusidInvestmentAccountId.GetHashCode();
                }
                if (this.Properties != null)
                {
                    hashCode = (hashCode * 59) + this.Properties.GetHashCode();
                }
                if (this.Relationships != null)
                {
                    hashCode = (hashCode * 59) + this.Relationships.GetHashCode();
                }
                if (this.Href != null)
                {
                    hashCode = (hashCode * 59) + this.Href.GetHashCode();
                }
                if (this.VarVersion != null)
                {
                    hashCode = (hashCode * 59) + this.VarVersion.GetHashCode();
                }
                if (this.Links != null)
                {
                    hashCode = (hashCode * 59) + this.Links.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
