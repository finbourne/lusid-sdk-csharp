/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Lusid.Sdk.Client.OpenAPIDateConverter;

namespace Lusid.Sdk.Model
{
    /// <summary>
    /// Representation of Reconciliation in LUSID Api
    /// </summary>
    [DataContract(Name = "Reconciliation")]
    public partial class Reconciliation : IEquatable<Reconciliation>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Reconciliation" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="href">The specific Uniform Resource Identifier (URI) for this resource at the requested effective and asAt datetime..</param>
        /// <param name="name">The name of the scheduled reconciliation.</param>
        /// <param name="description">A description of the scheduled reconciliation.</param>
        /// <param name="isPortfolioGroup">Specifies whether reconciliation is between portfolios or portfolio groups.</param>
        /// <param name="left">left.</param>
        /// <param name="right">right.</param>
        /// <param name="transactions">transactions.</param>
        /// <param name="positions">positions.</param>
        /// <param name="valuations">valuations.</param>
        /// <param name="properties">Reconciliation properties.</param>
        /// <param name="varVersion">varVersion.</param>
        /// <param name="links">links.</param>
        public Reconciliation(ReconciliationId id = default(ReconciliationId), string href = default(string), string name = default(string), string description = default(string), bool isPortfolioGroup = default(bool), ResourceId left = default(ResourceId), ResourceId right = default(ResourceId), ReconciliationTransactions transactions = default(ReconciliationTransactions), ReconciliationConfiguration positions = default(ReconciliationConfiguration), ReconciliationConfiguration valuations = default(ReconciliationConfiguration), Dictionary<string, Property> properties = default(Dictionary<string, Property>), ModelVersion varVersion = default(ModelVersion), List<Link> links = default(List<Link>))
        {
            this.Id = id;
            this.Href = href;
            this.Name = name;
            this.Description = description;
            this.IsPortfolioGroup = isPortfolioGroup;
            this.Left = left;
            this.Right = right;
            this.Transactions = transactions;
            this.Positions = positions;
            this.Valuations = valuations;
            this.Properties = properties;
            this.VarVersion = varVersion;
            this.Links = links;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public ReconciliationId Id { get; set; }

        /// <summary>
        /// The specific Uniform Resource Identifier (URI) for this resource at the requested effective and asAt datetime.
        /// </summary>
        /// <value>The specific Uniform Resource Identifier (URI) for this resource at the requested effective and asAt datetime.</value>
        [DataMember(Name = "href", EmitDefaultValue = true)]
        public string Href { get; set; }

        /// <summary>
        /// The name of the scheduled reconciliation
        /// </summary>
        /// <value>The name of the scheduled reconciliation</value>
        [DataMember(Name = "name", EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// A description of the scheduled reconciliation
        /// </summary>
        /// <value>A description of the scheduled reconciliation</value>
        [DataMember(Name = "description", EmitDefaultValue = true)]
        public string Description { get; set; }

        /// <summary>
        /// Specifies whether reconciliation is between portfolios or portfolio groups
        /// </summary>
        /// <value>Specifies whether reconciliation is between portfolios or portfolio groups</value>
        [DataMember(Name = "isPortfolioGroup", EmitDefaultValue = true)]
        public bool IsPortfolioGroup { get; set; }

        /// <summary>
        /// Gets or Sets Left
        /// </summary>
        [DataMember(Name = "left", EmitDefaultValue = false)]
        public ResourceId Left { get; set; }

        /// <summary>
        /// Gets or Sets Right
        /// </summary>
        [DataMember(Name = "right", EmitDefaultValue = false)]
        public ResourceId Right { get; set; }

        /// <summary>
        /// Gets or Sets Transactions
        /// </summary>
        [DataMember(Name = "transactions", EmitDefaultValue = false)]
        public ReconciliationTransactions Transactions { get; set; }

        /// <summary>
        /// Gets or Sets Positions
        /// </summary>
        [DataMember(Name = "positions", EmitDefaultValue = false)]
        public ReconciliationConfiguration Positions { get; set; }

        /// <summary>
        /// Gets or Sets Valuations
        /// </summary>
        [DataMember(Name = "valuations", EmitDefaultValue = false)]
        public ReconciliationConfiguration Valuations { get; set; }

        /// <summary>
        /// Reconciliation properties
        /// </summary>
        /// <value>Reconciliation properties</value>
        [DataMember(Name = "properties", EmitDefaultValue = true)]
        public Dictionary<string, Property> Properties { get; set; }

        /// <summary>
        /// Gets or Sets VarVersion
        /// </summary>
        [DataMember(Name = "version", EmitDefaultValue = false)]
        public ModelVersion VarVersion { get; set; }

        /// <summary>
        /// Gets or Sets Links
        /// </summary>
        [DataMember(Name = "links", EmitDefaultValue = true)]
        public List<Link> Links { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Reconciliation {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Href: ").Append(Href).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  IsPortfolioGroup: ").Append(IsPortfolioGroup).Append("\n");
            sb.Append("  Left: ").Append(Left).Append("\n");
            sb.Append("  Right: ").Append(Right).Append("\n");
            sb.Append("  Transactions: ").Append(Transactions).Append("\n");
            sb.Append("  Positions: ").Append(Positions).Append("\n");
            sb.Append("  Valuations: ").Append(Valuations).Append("\n");
            sb.Append("  Properties: ").Append(Properties).Append("\n");
            sb.Append("  VarVersion: ").Append(VarVersion).Append("\n");
            sb.Append("  Links: ").Append(Links).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Reconciliation);
        }

        /// <summary>
        /// Returns true if Reconciliation instances are equal
        /// </summary>
        /// <param name="input">Instance of Reconciliation to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Reconciliation input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Href == input.Href ||
                    (this.Href != null &&
                    this.Href.Equals(input.Href))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.IsPortfolioGroup == input.IsPortfolioGroup ||
                    this.IsPortfolioGroup.Equals(input.IsPortfolioGroup)
                ) && 
                (
                    this.Left == input.Left ||
                    (this.Left != null &&
                    this.Left.Equals(input.Left))
                ) && 
                (
                    this.Right == input.Right ||
                    (this.Right != null &&
                    this.Right.Equals(input.Right))
                ) && 
                (
                    this.Transactions == input.Transactions ||
                    (this.Transactions != null &&
                    this.Transactions.Equals(input.Transactions))
                ) && 
                (
                    this.Positions == input.Positions ||
                    (this.Positions != null &&
                    this.Positions.Equals(input.Positions))
                ) && 
                (
                    this.Valuations == input.Valuations ||
                    (this.Valuations != null &&
                    this.Valuations.Equals(input.Valuations))
                ) && 
                (
                    this.Properties == input.Properties ||
                    this.Properties != null &&
                    input.Properties != null &&
                    this.Properties.SequenceEqual(input.Properties)
                ) && 
                (
                    this.VarVersion == input.VarVersion ||
                    (this.VarVersion != null &&
                    this.VarVersion.Equals(input.VarVersion))
                ) && 
                (
                    this.Links == input.Links ||
                    this.Links != null &&
                    input.Links != null &&
                    this.Links.SequenceEqual(input.Links)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                {
                    hashCode = (hashCode * 59) + this.Id.GetHashCode();
                }
                if (this.Href != null)
                {
                    hashCode = (hashCode * 59) + this.Href.GetHashCode();
                }
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.Description != null)
                {
                    hashCode = (hashCode * 59) + this.Description.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.IsPortfolioGroup.GetHashCode();
                if (this.Left != null)
                {
                    hashCode = (hashCode * 59) + this.Left.GetHashCode();
                }
                if (this.Right != null)
                {
                    hashCode = (hashCode * 59) + this.Right.GetHashCode();
                }
                if (this.Transactions != null)
                {
                    hashCode = (hashCode * 59) + this.Transactions.GetHashCode();
                }
                if (this.Positions != null)
                {
                    hashCode = (hashCode * 59) + this.Positions.GetHashCode();
                }
                if (this.Valuations != null)
                {
                    hashCode = (hashCode * 59) + this.Valuations.GetHashCode();
                }
                if (this.Properties != null)
                {
                    hashCode = (hashCode * 59) + this.Properties.GetHashCode();
                }
                if (this.VarVersion != null)
                {
                    hashCode = (hashCode * 59) + this.VarVersion.GetHashCode();
                }
                if (this.Links != null)
                {
                    hashCode = (hashCode * 59) + this.Links.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
