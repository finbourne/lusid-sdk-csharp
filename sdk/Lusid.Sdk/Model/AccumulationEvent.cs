/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using JsonSubTypes;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Lusid.Sdk.Client.OpenAPIDateConverter;

namespace Lusid.Sdk.Model
{
    /// <summary>
    /// Accumulation dividend
    /// </summary>
    [DataContract(Name = "AccumulationEvent")]
    [JsonConverter(typeof(JsonSubtypes), "InstrumentEventType")]
    public partial class AccumulationEvent : InstrumentEvent, IEquatable<AccumulationEvent>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AccumulationEvent" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected AccumulationEvent() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="AccumulationEvent" /> class.
        /// </summary>
        /// <param name="announcementDate">Date on which the dividend was announced / declared..</param>
        /// <param name="dividendCurrency">Payment currency (required).</param>
        /// <param name="dividendRate">Dividend rate or payment rate as a percentage.  i.e. 5% is written as 0.05 (required).</param>
        /// <param name="exDate">The first business day on which the dividend is not owed to the buying party.  Typically this is T-1 from the RecordDate. (required).</param>
        /// <param name="paymentDate">The date the company pays out dividends to shareholders. (required).</param>
        /// <param name="instrumentEventType">The Type of Event. The available values are: TransitionEvent, InformationalEvent, OpenEvent, CloseEvent, StockSplitEvent, BondDefaultEvent, CashDividendEvent, AmortisationEvent, CashFlowEvent, ExerciseEvent, ResetEvent, TriggerEvent, RawVendorEvent, InformationalErrorEvent, BondCouponEvent, DividendReinvestmentEvent, AccumulationEvent, BondPrincipalEvent, DividendOptionEvent, MaturityEvent, FxForwardSettlementEvent, ExpiryEvent, ScripDividendEvent, StockDividendEvent, ReverseStockSplitEvent, CapitalDistributionEvent, SpinOffEvent, MergerEvent, FutureExpiryEvent, SwapCashFlowEvent, SwapPrincipalEvent, CreditPremiumCashFlowEvent, CdsCreditEvent, CdxCreditEvent (required) (default to &quot;AccumulationEvent&quot;).</param>
        public AccumulationEvent(DateTimeOffset? announcementDate = default(DateTimeOffset?), string dividendCurrency = default(string), decimal dividendRate = default(decimal), DateTimeOffset exDate = default(DateTimeOffset), DateTimeOffset paymentDate = default(DateTimeOffset), InstrumentEventTypeEnum instrumentEventType = default(InstrumentEventTypeEnum)) : base(instrumentEventType)
        {
            // to ensure "dividendCurrency" is required (not null)
            if (dividendCurrency == null)
            {
                throw new ArgumentNullException("dividendCurrency is a required property for AccumulationEvent and cannot be null");
            }
            this.DividendCurrency = dividendCurrency;
            this.DividendRate = dividendRate;
            this.ExDate = exDate;
            this.PaymentDate = paymentDate;
            this.AnnouncementDate = announcementDate;
        }

        /// <summary>
        /// Date on which the dividend was announced / declared.
        /// </summary>
        /// <value>Date on which the dividend was announced / declared.</value>
        [DataMember(Name = "announcementDate", EmitDefaultValue = true)]
        public DateTimeOffset? AnnouncementDate { get; set; }

        /// <summary>
        /// Payment currency
        /// </summary>
        /// <value>Payment currency</value>
        [DataMember(Name = "dividendCurrency", IsRequired = true, EmitDefaultValue = true)]
        public string DividendCurrency { get; set; }

        /// <summary>
        /// Dividend rate or payment rate as a percentage.  i.e. 5% is written as 0.05
        /// </summary>
        /// <value>Dividend rate or payment rate as a percentage.  i.e. 5% is written as 0.05</value>
        [DataMember(Name = "dividendRate", IsRequired = true, EmitDefaultValue = true)]
        public decimal DividendRate { get; set; }

        /// <summary>
        /// The first business day on which the dividend is not owed to the buying party.  Typically this is T-1 from the RecordDate.
        /// </summary>
        /// <value>The first business day on which the dividend is not owed to the buying party.  Typically this is T-1 from the RecordDate.</value>
        [DataMember(Name = "exDate", IsRequired = true, EmitDefaultValue = true)]
        public DateTimeOffset ExDate { get; set; }

        /// <summary>
        /// The date the company pays out dividends to shareholders.
        /// </summary>
        /// <value>The date the company pays out dividends to shareholders.</value>
        [DataMember(Name = "paymentDate", IsRequired = true, EmitDefaultValue = true)]
        public DateTimeOffset PaymentDate { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AccumulationEvent {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  AnnouncementDate: ").Append(AnnouncementDate).Append("\n");
            sb.Append("  DividendCurrency: ").Append(DividendCurrency).Append("\n");
            sb.Append("  DividendRate: ").Append(DividendRate).Append("\n");
            sb.Append("  ExDate: ").Append(ExDate).Append("\n");
            sb.Append("  PaymentDate: ").Append(PaymentDate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AccumulationEvent);
        }

        /// <summary>
        /// Returns true if AccumulationEvent instances are equal
        /// </summary>
        /// <param name="input">Instance of AccumulationEvent to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AccumulationEvent input)
        {
            if (input == null)
            {
                return false;
            }
            return base.Equals(input) && 
                (
                    this.AnnouncementDate == input.AnnouncementDate ||
                    (this.AnnouncementDate != null &&
                    this.AnnouncementDate.Equals(input.AnnouncementDate))
                ) && base.Equals(input) && 
                (
                    this.DividendCurrency == input.DividendCurrency ||
                    (this.DividendCurrency != null &&
                    this.DividendCurrency.Equals(input.DividendCurrency))
                ) && base.Equals(input) && 
                (
                    this.DividendRate == input.DividendRate ||
                    this.DividendRate.Equals(input.DividendRate)
                ) && base.Equals(input) && 
                (
                    this.ExDate == input.ExDate ||
                    (this.ExDate != null &&
                    this.ExDate.Equals(input.ExDate))
                ) && base.Equals(input) && 
                (
                    this.PaymentDate == input.PaymentDate ||
                    (this.PaymentDate != null &&
                    this.PaymentDate.Equals(input.PaymentDate))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = base.GetHashCode();
                if (this.AnnouncementDate != null)
                {
                    hashCode = (hashCode * 59) + this.AnnouncementDate.GetHashCode();
                }
                if (this.DividendCurrency != null)
                {
                    hashCode = (hashCode * 59) + this.DividendCurrency.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.DividendRate.GetHashCode();
                if (this.ExDate != null)
                {
                    hashCode = (hashCode * 59) + this.ExDate.GetHashCode();
                }
                if (this.PaymentDate != null)
                {
                    hashCode = (hashCode * 59) + this.PaymentDate.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            return this.BaseValidate(validationContext);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        protected IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> BaseValidate(ValidationContext validationContext)
        {
            foreach (var x in base.BaseValidate(validationContext))
            {
                yield return x;
            }
            yield break;
        }
    }
}
