/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Lusid.Sdk.Client.OpenAPIDateConverter;

namespace Lusid.Sdk.Model
{
    /// <summary>
    /// The base class for representing a Trade Ticket in LUSID.
    /// </summary>
    [DataContract(Name = "TradeTicket")]
    public partial class TradeTicket : IEquatable<TradeTicket>, IValidatableObject
    {
        /// <summary>
        /// The available values are: LusidTradeTicket, ExternalTradeTicket
        /// </summary>
        /// <value>The available values are: LusidTradeTicket, ExternalTradeTicket</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TradeTicketTypeEnum
        {
            /// <summary>
            /// Enum LusidTradeTicket for value: LusidTradeTicket
            /// </summary>
            [EnumMember(Value = "LusidTradeTicket")]
            LusidTradeTicket = 1,

            /// <summary>
            /// Enum ExternalTradeTicket for value: ExternalTradeTicket
            /// </summary>
            [EnumMember(Value = "ExternalTradeTicket")]
            ExternalTradeTicket = 2
        }


        /// <summary>
        /// The available values are: LusidTradeTicket, ExternalTradeTicket
        /// </summary>
        /// <value>The available values are: LusidTradeTicket, ExternalTradeTicket</value>
        [DataMember(Name = "tradeTicketType", IsRequired = true, EmitDefaultValue = true)]
        public TradeTicketTypeEnum TradeTicketType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="TradeTicket" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected TradeTicket() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="TradeTicket" /> class.
        /// </summary>
        /// <param name="tradeTicketType">The available values are: LusidTradeTicket, ExternalTradeTicket (required).</param>
        public TradeTicket(TradeTicketTypeEnum tradeTicketType = default(TradeTicketTypeEnum))
        {
            this.TradeTicketType = tradeTicketType;
        }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class TradeTicket {\n");
            sb.Append("  TradeTicketType: ").Append(TradeTicketType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TradeTicket);
        }

        /// <summary>
        /// Returns true if TradeTicket instances are equal
        /// </summary>
        /// <param name="input">Instance of TradeTicket to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TradeTicket input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.TradeTicketType == input.TradeTicketType ||
                    this.TradeTicketType.Equals(input.TradeTicketType)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.TradeTicketType.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
