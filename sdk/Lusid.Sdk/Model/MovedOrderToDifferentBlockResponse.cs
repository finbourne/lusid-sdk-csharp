/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Lusid.Sdk.Client.OpenAPIDateConverter;

namespace Lusid.Sdk.Model
{
    /// <summary>
    /// MovedOrderToDifferentBlockResponse
    /// </summary>
    [DataContract(Name = "MovedOrderToDifferentBlockResponse")]
    public partial class MovedOrderToDifferentBlockResponse : IEquatable<MovedOrderToDifferentBlockResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="MovedOrderToDifferentBlockResponse" /> class.
        /// </summary>
        /// <param name="destinationBlock">destinationBlock.</param>
        /// <param name="order">order.</param>
        /// <param name="sourceBlockId">sourceBlockId.</param>
        public MovedOrderToDifferentBlockResponse(Block destinationBlock = default(Block), Order order = default(Order), ResourceId sourceBlockId = default(ResourceId))
        {
            this.DestinationBlock = destinationBlock;
            this.Order = order;
            this.SourceBlockId = sourceBlockId;
        }

        /// <summary>
        /// Gets or Sets DestinationBlock
        /// </summary>
        [DataMember(Name = "destinationBlock", EmitDefaultValue = false)]
        public Block DestinationBlock { get; set; }

        /// <summary>
        /// Gets or Sets Order
        /// </summary>
        [DataMember(Name = "order", EmitDefaultValue = false)]
        public Order Order { get; set; }

        /// <summary>
        /// Gets or Sets SourceBlockId
        /// </summary>
        [DataMember(Name = "sourceBlockId", EmitDefaultValue = false)]
        public ResourceId SourceBlockId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class MovedOrderToDifferentBlockResponse {\n");
            sb.Append("  DestinationBlock: ").Append(DestinationBlock).Append("\n");
            sb.Append("  Order: ").Append(Order).Append("\n");
            sb.Append("  SourceBlockId: ").Append(SourceBlockId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as MovedOrderToDifferentBlockResponse);
        }

        /// <summary>
        /// Returns true if MovedOrderToDifferentBlockResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of MovedOrderToDifferentBlockResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MovedOrderToDifferentBlockResponse input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.DestinationBlock == input.DestinationBlock ||
                    (this.DestinationBlock != null &&
                    this.DestinationBlock.Equals(input.DestinationBlock))
                ) && 
                (
                    this.Order == input.Order ||
                    (this.Order != null &&
                    this.Order.Equals(input.Order))
                ) && 
                (
                    this.SourceBlockId == input.SourceBlockId ||
                    (this.SourceBlockId != null &&
                    this.SourceBlockId.Equals(input.SourceBlockId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.DestinationBlock != null)
                {
                    hashCode = (hashCode * 59) + this.DestinationBlock.GetHashCode();
                }
                if (this.Order != null)
                {
                    hashCode = (hashCode * 59) + this.Order.GetHashCode();
                }
                if (this.SourceBlockId != null)
                {
                    hashCode = (hashCode * 59) + this.SourceBlockId.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
