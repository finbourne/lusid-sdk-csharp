/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Lusid.Sdk.Client.OpenAPIDateConverter;

namespace Lusid.Sdk.Model
{
    /// <summary>
    /// EquitySwapAllOf
    /// </summary>
    [DataContract(Name = "EquitySwap_allOf")]
    public partial class EquitySwapAllOf : IEquatable<EquitySwapAllOf>, IValidatableObject
    {
        /// <summary>
        /// The available values are: QuotedSecurity, InterestRateSwap, FxForward, Future, ExoticInstrument, FxOption, CreditDefaultSwap, InterestRateSwaption, Bond, EquityOption, FixedLeg, FloatingLeg, BespokeCashFlowsLeg, Unknown, TermDeposit, ContractForDifference, EquitySwap, CashPerpetual, CapFloor, CashSettled, CdsIndex, Basket, FundingLeg, FxSwap, ForwardRateAgreement, SimpleInstrument, Repo, Equity, ExchangeTradedOption, ReferenceInstrument, ComplexBond, InflationLinkedBond, InflationSwap, SimpleCashFlowLoan, TotalReturnSwap, InflationLeg, FundShareClass, FlexibleLoan, UnsettledCash, Cash, MasteredInstrument, LoanFacility
        /// </summary>
        /// <value>The available values are: QuotedSecurity, InterestRateSwap, FxForward, Future, ExoticInstrument, FxOption, CreditDefaultSwap, InterestRateSwaption, Bond, EquityOption, FixedLeg, FloatingLeg, BespokeCashFlowsLeg, Unknown, TermDeposit, ContractForDifference, EquitySwap, CashPerpetual, CapFloor, CashSettled, CdsIndex, Basket, FundingLeg, FxSwap, ForwardRateAgreement, SimpleInstrument, Repo, Equity, ExchangeTradedOption, ReferenceInstrument, ComplexBond, InflationLinkedBond, InflationSwap, SimpleCashFlowLoan, TotalReturnSwap, InflationLeg, FundShareClass, FlexibleLoan, UnsettledCash, Cash, MasteredInstrument, LoanFacility</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum InstrumentTypeEnum
        {
            /// <summary>
            /// Enum QuotedSecurity for value: QuotedSecurity
            /// </summary>
            [EnumMember(Value = "QuotedSecurity")]
            QuotedSecurity = 1,

            /// <summary>
            /// Enum InterestRateSwap for value: InterestRateSwap
            /// </summary>
            [EnumMember(Value = "InterestRateSwap")]
            InterestRateSwap = 2,

            /// <summary>
            /// Enum FxForward for value: FxForward
            /// </summary>
            [EnumMember(Value = "FxForward")]
            FxForward = 3,

            /// <summary>
            /// Enum Future for value: Future
            /// </summary>
            [EnumMember(Value = "Future")]
            Future = 4,

            /// <summary>
            /// Enum ExoticInstrument for value: ExoticInstrument
            /// </summary>
            [EnumMember(Value = "ExoticInstrument")]
            ExoticInstrument = 5,

            /// <summary>
            /// Enum FxOption for value: FxOption
            /// </summary>
            [EnumMember(Value = "FxOption")]
            FxOption = 6,

            /// <summary>
            /// Enum CreditDefaultSwap for value: CreditDefaultSwap
            /// </summary>
            [EnumMember(Value = "CreditDefaultSwap")]
            CreditDefaultSwap = 7,

            /// <summary>
            /// Enum InterestRateSwaption for value: InterestRateSwaption
            /// </summary>
            [EnumMember(Value = "InterestRateSwaption")]
            InterestRateSwaption = 8,

            /// <summary>
            /// Enum Bond for value: Bond
            /// </summary>
            [EnumMember(Value = "Bond")]
            Bond = 9,

            /// <summary>
            /// Enum EquityOption for value: EquityOption
            /// </summary>
            [EnumMember(Value = "EquityOption")]
            EquityOption = 10,

            /// <summary>
            /// Enum FixedLeg for value: FixedLeg
            /// </summary>
            [EnumMember(Value = "FixedLeg")]
            FixedLeg = 11,

            /// <summary>
            /// Enum FloatingLeg for value: FloatingLeg
            /// </summary>
            [EnumMember(Value = "FloatingLeg")]
            FloatingLeg = 12,

            /// <summary>
            /// Enum BespokeCashFlowsLeg for value: BespokeCashFlowsLeg
            /// </summary>
            [EnumMember(Value = "BespokeCashFlowsLeg")]
            BespokeCashFlowsLeg = 13,

            /// <summary>
            /// Enum Unknown for value: Unknown
            /// </summary>
            [EnumMember(Value = "Unknown")]
            Unknown = 14,

            /// <summary>
            /// Enum TermDeposit for value: TermDeposit
            /// </summary>
            [EnumMember(Value = "TermDeposit")]
            TermDeposit = 15,

            /// <summary>
            /// Enum ContractForDifference for value: ContractForDifference
            /// </summary>
            [EnumMember(Value = "ContractForDifference")]
            ContractForDifference = 16,

            /// <summary>
            /// Enum EquitySwap for value: EquitySwap
            /// </summary>
            [EnumMember(Value = "EquitySwap")]
            EquitySwap = 17,

            /// <summary>
            /// Enum CashPerpetual for value: CashPerpetual
            /// </summary>
            [EnumMember(Value = "CashPerpetual")]
            CashPerpetual = 18,

            /// <summary>
            /// Enum CapFloor for value: CapFloor
            /// </summary>
            [EnumMember(Value = "CapFloor")]
            CapFloor = 19,

            /// <summary>
            /// Enum CashSettled for value: CashSettled
            /// </summary>
            [EnumMember(Value = "CashSettled")]
            CashSettled = 20,

            /// <summary>
            /// Enum CdsIndex for value: CdsIndex
            /// </summary>
            [EnumMember(Value = "CdsIndex")]
            CdsIndex = 21,

            /// <summary>
            /// Enum Basket for value: Basket
            /// </summary>
            [EnumMember(Value = "Basket")]
            Basket = 22,

            /// <summary>
            /// Enum FundingLeg for value: FundingLeg
            /// </summary>
            [EnumMember(Value = "FundingLeg")]
            FundingLeg = 23,

            /// <summary>
            /// Enum FxSwap for value: FxSwap
            /// </summary>
            [EnumMember(Value = "FxSwap")]
            FxSwap = 24,

            /// <summary>
            /// Enum ForwardRateAgreement for value: ForwardRateAgreement
            /// </summary>
            [EnumMember(Value = "ForwardRateAgreement")]
            ForwardRateAgreement = 25,

            /// <summary>
            /// Enum SimpleInstrument for value: SimpleInstrument
            /// </summary>
            [EnumMember(Value = "SimpleInstrument")]
            SimpleInstrument = 26,

            /// <summary>
            /// Enum Repo for value: Repo
            /// </summary>
            [EnumMember(Value = "Repo")]
            Repo = 27,

            /// <summary>
            /// Enum Equity for value: Equity
            /// </summary>
            [EnumMember(Value = "Equity")]
            Equity = 28,

            /// <summary>
            /// Enum ExchangeTradedOption for value: ExchangeTradedOption
            /// </summary>
            [EnumMember(Value = "ExchangeTradedOption")]
            ExchangeTradedOption = 29,

            /// <summary>
            /// Enum ReferenceInstrument for value: ReferenceInstrument
            /// </summary>
            [EnumMember(Value = "ReferenceInstrument")]
            ReferenceInstrument = 30,

            /// <summary>
            /// Enum ComplexBond for value: ComplexBond
            /// </summary>
            [EnumMember(Value = "ComplexBond")]
            ComplexBond = 31,

            /// <summary>
            /// Enum InflationLinkedBond for value: InflationLinkedBond
            /// </summary>
            [EnumMember(Value = "InflationLinkedBond")]
            InflationLinkedBond = 32,

            /// <summary>
            /// Enum InflationSwap for value: InflationSwap
            /// </summary>
            [EnumMember(Value = "InflationSwap")]
            InflationSwap = 33,

            /// <summary>
            /// Enum SimpleCashFlowLoan for value: SimpleCashFlowLoan
            /// </summary>
            [EnumMember(Value = "SimpleCashFlowLoan")]
            SimpleCashFlowLoan = 34,

            /// <summary>
            /// Enum TotalReturnSwap for value: TotalReturnSwap
            /// </summary>
            [EnumMember(Value = "TotalReturnSwap")]
            TotalReturnSwap = 35,

            /// <summary>
            /// Enum InflationLeg for value: InflationLeg
            /// </summary>
            [EnumMember(Value = "InflationLeg")]
            InflationLeg = 36,

            /// <summary>
            /// Enum FundShareClass for value: FundShareClass
            /// </summary>
            [EnumMember(Value = "FundShareClass")]
            FundShareClass = 37,

            /// <summary>
            /// Enum FlexibleLoan for value: FlexibleLoan
            /// </summary>
            [EnumMember(Value = "FlexibleLoan")]
            FlexibleLoan = 38,

            /// <summary>
            /// Enum UnsettledCash for value: UnsettledCash
            /// </summary>
            [EnumMember(Value = "UnsettledCash")]
            UnsettledCash = 39,

            /// <summary>
            /// Enum Cash for value: Cash
            /// </summary>
            [EnumMember(Value = "Cash")]
            Cash = 40,

            /// <summary>
            /// Enum MasteredInstrument for value: MasteredInstrument
            /// </summary>
            [EnumMember(Value = "MasteredInstrument")]
            MasteredInstrument = 41,

            /// <summary>
            /// Enum LoanFacility for value: LoanFacility
            /// </summary>
            [EnumMember(Value = "LoanFacility")]
            LoanFacility = 42

        }


        /// <summary>
        /// The available values are: QuotedSecurity, InterestRateSwap, FxForward, Future, ExoticInstrument, FxOption, CreditDefaultSwap, InterestRateSwaption, Bond, EquityOption, FixedLeg, FloatingLeg, BespokeCashFlowsLeg, Unknown, TermDeposit, ContractForDifference, EquitySwap, CashPerpetual, CapFloor, CashSettled, CdsIndex, Basket, FundingLeg, FxSwap, ForwardRateAgreement, SimpleInstrument, Repo, Equity, ExchangeTradedOption, ReferenceInstrument, ComplexBond, InflationLinkedBond, InflationSwap, SimpleCashFlowLoan, TotalReturnSwap, InflationLeg, FundShareClass, FlexibleLoan, UnsettledCash, Cash, MasteredInstrument, LoanFacility
        /// </summary>
        /// <value>The available values are: QuotedSecurity, InterestRateSwap, FxForward, Future, ExoticInstrument, FxOption, CreditDefaultSwap, InterestRateSwaption, Bond, EquityOption, FixedLeg, FloatingLeg, BespokeCashFlowsLeg, Unknown, TermDeposit, ContractForDifference, EquitySwap, CashPerpetual, CapFloor, CashSettled, CdsIndex, Basket, FundingLeg, FxSwap, ForwardRateAgreement, SimpleInstrument, Repo, Equity, ExchangeTradedOption, ReferenceInstrument, ComplexBond, InflationLinkedBond, InflationSwap, SimpleCashFlowLoan, TotalReturnSwap, InflationLeg, FundShareClass, FlexibleLoan, UnsettledCash, Cash, MasteredInstrument, LoanFacility</value>
        [DataMember(Name = "instrumentType", IsRequired = true, EmitDefaultValue = true)]
        public InstrumentTypeEnum InstrumentType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="EquitySwapAllOf" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected EquitySwapAllOf() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="EquitySwapAllOf" /> class.
        /// </summary>
        /// <param name="startDate">The start date of the EquitySwap. (required).</param>
        /// <param name="maturityDate">The final maturity date of the instrument. This means the last date on which the instruments makes a payment of any amount.  For the avoidance of doubt, that is not necessarily prior to its last sensitivity date for the purposes of risk; e.g. instruments such as  Constant Maturity Swaps (CMS) often have sensitivities to rates that may well be observed or set prior to the maturity date, but refer to a termination date beyond it. (required).</param>
        /// <param name="code">The code of the underlying. (required).</param>
        /// <param name="equityFlowConventions">equityFlowConventions (required).</param>
        /// <param name="fundingLeg">fundingLeg (required).</param>
        /// <param name="includeDividends">Dividend inclusion flag, if true dividends are included in the equity leg (total return). (required).</param>
        /// <param name="initialPrice">The initial equity price of the Equity Swap. (required).</param>
        /// <param name="notionalReset">Notional reset flag, if true the notional of the funding leg is reset at the start of every  coupon to match the value of the equity leg (equity price at start of coupon times quantity). (required).</param>
        /// <param name="quantity">The quantity or number of shares in the Equity Swap. (required).</param>
        /// <param name="underlyingIdentifier">External market codes and identifiers for the EquitySwap, e.g. RIC.    Supported string (enumeration) values are: [LusidInstrumentId, Isin, Sedol, Cusip, ClientInternal, Figi, RIC, QuotePermId, REDCode, BBGId, ICECode]. (required).</param>
        /// <param name="equitySwapDividendPaymentTiming">Determines how the payment of dividends is handled for the equity swap.  Defaults to paying at the next Equity coupon date.                Supported string (enumeration) values are: [PayAtNextEquityCouponDate, PayAtMaturityOfSwap, PayAtNextFundingLegCouponDate, PayAtPaymentDateOfDividendEvent]..</param>
        /// <param name="additionalPayments">Optional additional payments at a given date e.g. to level off an uneven equity swap.  The dates must be distinct and either all payments are Pay or all payments are Receive..</param>
        /// <param name="instrumentType">The available values are: QuotedSecurity, InterestRateSwap, FxForward, Future, ExoticInstrument, FxOption, CreditDefaultSwap, InterestRateSwaption, Bond, EquityOption, FixedLeg, FloatingLeg, BespokeCashFlowsLeg, Unknown, TermDeposit, ContractForDifference, EquitySwap, CashPerpetual, CapFloor, CashSettled, CdsIndex, Basket, FundingLeg, FxSwap, ForwardRateAgreement, SimpleInstrument, Repo, Equity, ExchangeTradedOption, ReferenceInstrument, ComplexBond, InflationLinkedBond, InflationSwap, SimpleCashFlowLoan, TotalReturnSwap, InflationLeg, FundShareClass, FlexibleLoan, UnsettledCash, Cash, MasteredInstrument, LoanFacility (required).</param>
        public EquitySwapAllOf(DateTimeOffset startDate = default(DateTimeOffset), DateTimeOffset maturityDate = default(DateTimeOffset), string code = default(string), FlowConventions equityFlowConventions = default(FlowConventions), InstrumentLeg fundingLeg = default(InstrumentLeg), bool includeDividends = default(bool), decimal initialPrice = default(decimal), bool notionalReset = default(bool), decimal quantity = default(decimal), string underlyingIdentifier = default(string), string equitySwapDividendPaymentTiming = default(string), List<AdditionalPayment> additionalPayments = default(List<AdditionalPayment>), InstrumentTypeEnum instrumentType = default(InstrumentTypeEnum))
        {
            this.StartDate = startDate;
            this.MaturityDate = maturityDate;
            // to ensure "code" is required (not null)
            if (code == null)
            {
                throw new ArgumentNullException("code is a required property for EquitySwapAllOf and cannot be null");
            }
            this.Code = code;
            // to ensure "equityFlowConventions" is required (not null)
            if (equityFlowConventions == null)
            {
                throw new ArgumentNullException("equityFlowConventions is a required property for EquitySwapAllOf and cannot be null");
            }
            this.EquityFlowConventions = equityFlowConventions;
            // to ensure "fundingLeg" is required (not null)
            if (fundingLeg == null)
            {
                throw new ArgumentNullException("fundingLeg is a required property for EquitySwapAllOf and cannot be null");
            }
            this.FundingLeg = fundingLeg;
            this.IncludeDividends = includeDividends;
            this.InitialPrice = initialPrice;
            this.NotionalReset = notionalReset;
            this.Quantity = quantity;
            // to ensure "underlyingIdentifier" is required (not null)
            if (underlyingIdentifier == null)
            {
                throw new ArgumentNullException("underlyingIdentifier is a required property for EquitySwapAllOf and cannot be null");
            }
            this.UnderlyingIdentifier = underlyingIdentifier;
            this.InstrumentType = instrumentType;
            this.EquitySwapDividendPaymentTiming = equitySwapDividendPaymentTiming;
            this.AdditionalPayments = additionalPayments;
        }

        /// <summary>
        /// The start date of the EquitySwap.
        /// </summary>
        /// <value>The start date of the EquitySwap.</value>
        [DataMember(Name = "startDate", IsRequired = true, EmitDefaultValue = true)]
        public DateTimeOffset StartDate { get; set; }

        /// <summary>
        /// The final maturity date of the instrument. This means the last date on which the instruments makes a payment of any amount.  For the avoidance of doubt, that is not necessarily prior to its last sensitivity date for the purposes of risk; e.g. instruments such as  Constant Maturity Swaps (CMS) often have sensitivities to rates that may well be observed or set prior to the maturity date, but refer to a termination date beyond it.
        /// </summary>
        /// <value>The final maturity date of the instrument. This means the last date on which the instruments makes a payment of any amount.  For the avoidance of doubt, that is not necessarily prior to its last sensitivity date for the purposes of risk; e.g. instruments such as  Constant Maturity Swaps (CMS) often have sensitivities to rates that may well be observed or set prior to the maturity date, but refer to a termination date beyond it.</value>
        [DataMember(Name = "maturityDate", IsRequired = true, EmitDefaultValue = true)]
        public DateTimeOffset MaturityDate { get; set; }

        /// <summary>
        /// The code of the underlying.
        /// </summary>
        /// <value>The code of the underlying.</value>
        [DataMember(Name = "code", IsRequired = true, EmitDefaultValue = true)]
        public string Code { get; set; }

        /// <summary>
        /// Gets or Sets EquityFlowConventions
        /// </summary>
        [DataMember(Name = "equityFlowConventions", IsRequired = true, EmitDefaultValue = true)]
        public FlowConventions EquityFlowConventions { get; set; }

        /// <summary>
        /// Gets or Sets FundingLeg
        /// </summary>
        [DataMember(Name = "fundingLeg", IsRequired = true, EmitDefaultValue = true)]
        public InstrumentLeg FundingLeg { get; set; }

        /// <summary>
        /// Dividend inclusion flag, if true dividends are included in the equity leg (total return).
        /// </summary>
        /// <value>Dividend inclusion flag, if true dividends are included in the equity leg (total return).</value>
        [DataMember(Name = "includeDividends", IsRequired = true, EmitDefaultValue = true)]
        public bool IncludeDividends { get; set; }

        /// <summary>
        /// The initial equity price of the Equity Swap.
        /// </summary>
        /// <value>The initial equity price of the Equity Swap.</value>
        [DataMember(Name = "initialPrice", IsRequired = true, EmitDefaultValue = true)]
        public decimal InitialPrice { get; set; }

        /// <summary>
        /// Notional reset flag, if true the notional of the funding leg is reset at the start of every  coupon to match the value of the equity leg (equity price at start of coupon times quantity).
        /// </summary>
        /// <value>Notional reset flag, if true the notional of the funding leg is reset at the start of every  coupon to match the value of the equity leg (equity price at start of coupon times quantity).</value>
        [DataMember(Name = "notionalReset", IsRequired = true, EmitDefaultValue = true)]
        public bool NotionalReset { get; set; }

        /// <summary>
        /// The quantity or number of shares in the Equity Swap.
        /// </summary>
        /// <value>The quantity or number of shares in the Equity Swap.</value>
        [DataMember(Name = "quantity", IsRequired = true, EmitDefaultValue = true)]
        public decimal Quantity { get; set; }

        /// <summary>
        /// External market codes and identifiers for the EquitySwap, e.g. RIC.    Supported string (enumeration) values are: [LusidInstrumentId, Isin, Sedol, Cusip, ClientInternal, Figi, RIC, QuotePermId, REDCode, BBGId, ICECode].
        /// </summary>
        /// <value>External market codes and identifiers for the EquitySwap, e.g. RIC.    Supported string (enumeration) values are: [LusidInstrumentId, Isin, Sedol, Cusip, ClientInternal, Figi, RIC, QuotePermId, REDCode, BBGId, ICECode].</value>
        [DataMember(Name = "underlyingIdentifier", IsRequired = true, EmitDefaultValue = true)]
        public string UnderlyingIdentifier { get; set; }

        /// <summary>
        /// Determines how the payment of dividends is handled for the equity swap.  Defaults to paying at the next Equity coupon date.                Supported string (enumeration) values are: [PayAtNextEquityCouponDate, PayAtMaturityOfSwap, PayAtNextFundingLegCouponDate, PayAtPaymentDateOfDividendEvent].
        /// </summary>
        /// <value>Determines how the payment of dividends is handled for the equity swap.  Defaults to paying at the next Equity coupon date.                Supported string (enumeration) values are: [PayAtNextEquityCouponDate, PayAtMaturityOfSwap, PayAtNextFundingLegCouponDate, PayAtPaymentDateOfDividendEvent].</value>
        [DataMember(Name = "equitySwapDividendPaymentTiming", EmitDefaultValue = true)]
        public string EquitySwapDividendPaymentTiming { get; set; }

        /// <summary>
        /// Optional additional payments at a given date e.g. to level off an uneven equity swap.  The dates must be distinct and either all payments are Pay or all payments are Receive.
        /// </summary>
        /// <value>Optional additional payments at a given date e.g. to level off an uneven equity swap.  The dates must be distinct and either all payments are Pay or all payments are Receive.</value>
        [DataMember(Name = "additionalPayments", EmitDefaultValue = true)]
        public List<AdditionalPayment> AdditionalPayments { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EquitySwapAllOf {\n");
            sb.Append("  StartDate: ").Append(StartDate).Append("\n");
            sb.Append("  MaturityDate: ").Append(MaturityDate).Append("\n");
            sb.Append("  Code: ").Append(Code).Append("\n");
            sb.Append("  EquityFlowConventions: ").Append(EquityFlowConventions).Append("\n");
            sb.Append("  FundingLeg: ").Append(FundingLeg).Append("\n");
            sb.Append("  IncludeDividends: ").Append(IncludeDividends).Append("\n");
            sb.Append("  InitialPrice: ").Append(InitialPrice).Append("\n");
            sb.Append("  NotionalReset: ").Append(NotionalReset).Append("\n");
            sb.Append("  Quantity: ").Append(Quantity).Append("\n");
            sb.Append("  UnderlyingIdentifier: ").Append(UnderlyingIdentifier).Append("\n");
            sb.Append("  EquitySwapDividendPaymentTiming: ").Append(EquitySwapDividendPaymentTiming).Append("\n");
            sb.Append("  AdditionalPayments: ").Append(AdditionalPayments).Append("\n");
            sb.Append("  InstrumentType: ").Append(InstrumentType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as EquitySwapAllOf);
        }

        /// <summary>
        /// Returns true if EquitySwapAllOf instances are equal
        /// </summary>
        /// <param name="input">Instance of EquitySwapAllOf to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EquitySwapAllOf input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.StartDate == input.StartDate ||
                    (this.StartDate != null &&
                    this.StartDate.Equals(input.StartDate))
                ) && 
                (
                    this.MaturityDate == input.MaturityDate ||
                    (this.MaturityDate != null &&
                    this.MaturityDate.Equals(input.MaturityDate))
                ) && 
                (
                    this.Code == input.Code ||
                    (this.Code != null &&
                    this.Code.Equals(input.Code))
                ) && 
                (
                    this.EquityFlowConventions == input.EquityFlowConventions ||
                    (this.EquityFlowConventions != null &&
                    this.EquityFlowConventions.Equals(input.EquityFlowConventions))
                ) && 
                (
                    this.FundingLeg == input.FundingLeg ||
                    (this.FundingLeg != null &&
                    this.FundingLeg.Equals(input.FundingLeg))
                ) && 
                (
                    this.IncludeDividends == input.IncludeDividends ||
                    this.IncludeDividends.Equals(input.IncludeDividends)
                ) && 
                (
                    this.InitialPrice == input.InitialPrice ||
                    this.InitialPrice.Equals(input.InitialPrice)
                ) && 
                (
                    this.NotionalReset == input.NotionalReset ||
                    this.NotionalReset.Equals(input.NotionalReset)
                ) && 
                (
                    this.Quantity == input.Quantity ||
                    this.Quantity.Equals(input.Quantity)
                ) && 
                (
                    this.UnderlyingIdentifier == input.UnderlyingIdentifier ||
                    (this.UnderlyingIdentifier != null &&
                    this.UnderlyingIdentifier.Equals(input.UnderlyingIdentifier))
                ) && 
                (
                    this.EquitySwapDividendPaymentTiming == input.EquitySwapDividendPaymentTiming ||
                    (this.EquitySwapDividendPaymentTiming != null &&
                    this.EquitySwapDividendPaymentTiming.Equals(input.EquitySwapDividendPaymentTiming))
                ) && 
                (
                    this.AdditionalPayments == input.AdditionalPayments ||
                    this.AdditionalPayments != null &&
                    input.AdditionalPayments != null &&
                    this.AdditionalPayments.SequenceEqual(input.AdditionalPayments)
                ) && 
                (
                    this.InstrumentType == input.InstrumentType ||
                    this.InstrumentType.Equals(input.InstrumentType)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.StartDate != null)
                {
                    hashCode = (hashCode * 59) + this.StartDate.GetHashCode();
                }
                if (this.MaturityDate != null)
                {
                    hashCode = (hashCode * 59) + this.MaturityDate.GetHashCode();
                }
                if (this.Code != null)
                {
                    hashCode = (hashCode * 59) + this.Code.GetHashCode();
                }
                if (this.EquityFlowConventions != null)
                {
                    hashCode = (hashCode * 59) + this.EquityFlowConventions.GetHashCode();
                }
                if (this.FundingLeg != null)
                {
                    hashCode = (hashCode * 59) + this.FundingLeg.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.IncludeDividends.GetHashCode();
                hashCode = (hashCode * 59) + this.InitialPrice.GetHashCode();
                hashCode = (hashCode * 59) + this.NotionalReset.GetHashCode();
                hashCode = (hashCode * 59) + this.Quantity.GetHashCode();
                if (this.UnderlyingIdentifier != null)
                {
                    hashCode = (hashCode * 59) + this.UnderlyingIdentifier.GetHashCode();
                }
                if (this.EquitySwapDividendPaymentTiming != null)
                {
                    hashCode = (hashCode * 59) + this.EquitySwapDividendPaymentTiming.GetHashCode();
                }
                if (this.AdditionalPayments != null)
                {
                    hashCode = (hashCode * 59) + this.AdditionalPayments.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.InstrumentType.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Code (string) minLength
            if (this.Code != null && this.Code.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Code, length must be greater than 1.", new [] { "Code" });
            }

            // UnderlyingIdentifier (string) minLength
            if (this.UnderlyingIdentifier != null && this.UnderlyingIdentifier.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for UnderlyingIdentifier, length must be greater than 1.", new [] { "UnderlyingIdentifier" });
            }

            yield break;
        }
    }
}
