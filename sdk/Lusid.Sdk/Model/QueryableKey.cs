/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Lusid.Sdk.Client.OpenAPIDateConverter;

namespace Lusid.Sdk.Model
{
    /// <summary>
    /// QueryableKey
    /// </summary>
    [DataContract(Name = "QueryableKey")]
    public partial class QueryableKey : IEquatable<QueryableKey>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="QueryableKey" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected QueryableKey() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="QueryableKey" /> class.
        /// </summary>
        /// <param name="addressKey">The address that is the query to be made into the system. e.g. a Valuation/PV or Instrument/MaturityDate (required).</param>
        /// <param name="description">What does the information that is being queried by the address mean. What is the address for..</param>
        /// <param name="displayName">The suggested name that the user would wish to put on to the returned information for visualisation in preference to the address. (required).</param>
        /// <param name="type">Financially meaningful results can be presented as either simple flat types or more complex expanded types. This field gives the type of the more complex representation.  For example, the present value (PV) of a holding could be represented either as a simple decimal (with currency implied) or as a decimal-currency pair. In this example, the type returned in this field would be \&quot;Result0D\&quot;, the decimal-currency pair. (required).</param>
        /// <param name="flattenedType">Financially meaningful results can be presented as either simple flat types or more complex expanded types. This field gives the type of the simpler representation.  For example, the present value (PV) of a holding could be represented either as a simple decimal (with currency implied) or as a decimal-currency pair. In this example, the type returned in this field would be \&quot;Decimal\&quot;. (required).</param>
        /// <param name="holdingQuantityScaling">Is the data scaled when it is for, e.g. a holding in an instrument. A key example would be the difference between price and PV. The present value of an instrument would scale with the quantity held. The price would be that for a hypothetical unit of that instrument, typically associated with the contract size. (required).</param>
        /// <param name="supportedUsages">The types of queries that support this key. (required).</param>
        /// <param name="supportedOperations">When performing an aggregation operation, what column type operations can be performed on the data. For example, it makes sense to sum decimals but not strings. Either can be counted. With more complex types, e.g. ResultValues, operations may be linked to a semantic meaning such as the currency of the result. In such cases the operations may be supported but context specific. For example, it makes sense to sum PVs in a single currency but not when the currency is different. In such cases, an error would result (it being assumed that no fx rates for currency conversion were implicit in the context). (required).</param>
        /// <param name="lifeCycleStatus">Within an API where an item can be accessed through an address or property, there is an associated status that determines whether the item is stable or likely to change. This status is one of [Experimental, Beta, EAP, Prod,  Deprecated]. If the item is deprecated it will be removed on or after the associated DateTime RemovalDate field. That field will not otherwise be set. (required).</param>
        /// <param name="removalDate">If the life cycle status is set to deprecated then this will be populated with the date on or after which removal of the address query will happen.</param>
        /// <param name="applicableOptions">A mapping from option names to the definition that the corresponding option value must match..</param>
        /// <param name="derivationFormula">Derivation formula for when the for when the query key represents a DerivedValuation property..</param>
        public QueryableKey(string addressKey = default(string), string description = default(string), string displayName = default(string), string type = default(string), string flattenedType = default(string), string holdingQuantityScaling = default(string), List<string> supportedUsages = default(List<string>), List<string> supportedOperations = default(List<string>), string lifeCycleStatus = default(string), DateTimeOffset? removalDate = default(DateTimeOffset?), Dictionary<string, AddressKeyOptionDefinition> applicableOptions = default(Dictionary<string, AddressKeyOptionDefinition>), string derivationFormula = default(string))
        {
            // to ensure "addressKey" is required (not null)
            if (addressKey == null)
            {
                throw new ArgumentNullException("addressKey is a required property for QueryableKey and cannot be null");
            }
            this.AddressKey = addressKey;
            // to ensure "displayName" is required (not null)
            if (displayName == null)
            {
                throw new ArgumentNullException("displayName is a required property for QueryableKey and cannot be null");
            }
            this.DisplayName = displayName;
            // to ensure "type" is required (not null)
            if (type == null)
            {
                throw new ArgumentNullException("type is a required property for QueryableKey and cannot be null");
            }
            this.Type = type;
            // to ensure "flattenedType" is required (not null)
            if (flattenedType == null)
            {
                throw new ArgumentNullException("flattenedType is a required property for QueryableKey and cannot be null");
            }
            this.FlattenedType = flattenedType;
            // to ensure "holdingQuantityScaling" is required (not null)
            if (holdingQuantityScaling == null)
            {
                throw new ArgumentNullException("holdingQuantityScaling is a required property for QueryableKey and cannot be null");
            }
            this.HoldingQuantityScaling = holdingQuantityScaling;
            // to ensure "supportedUsages" is required (not null)
            if (supportedUsages == null)
            {
                throw new ArgumentNullException("supportedUsages is a required property for QueryableKey and cannot be null");
            }
            this.SupportedUsages = supportedUsages;
            // to ensure "supportedOperations" is required (not null)
            if (supportedOperations == null)
            {
                throw new ArgumentNullException("supportedOperations is a required property for QueryableKey and cannot be null");
            }
            this.SupportedOperations = supportedOperations;
            // to ensure "lifeCycleStatus" is required (not null)
            if (lifeCycleStatus == null)
            {
                throw new ArgumentNullException("lifeCycleStatus is a required property for QueryableKey and cannot be null");
            }
            this.LifeCycleStatus = lifeCycleStatus;
            this.Description = description;
            this.RemovalDate = removalDate;
            this.ApplicableOptions = applicableOptions;
            this.DerivationFormula = derivationFormula;
        }

        /// <summary>
        /// The address that is the query to be made into the system. e.g. a Valuation/PV or Instrument/MaturityDate
        /// </summary>
        /// <value>The address that is the query to be made into the system. e.g. a Valuation/PV or Instrument/MaturityDate</value>
        [DataMember(Name = "addressKey", IsRequired = true, EmitDefaultValue = true)]
        public string AddressKey { get; set; }

        /// <summary>
        /// What does the information that is being queried by the address mean. What is the address for.
        /// </summary>
        /// <value>What does the information that is being queried by the address mean. What is the address for.</value>
        [DataMember(Name = "description", EmitDefaultValue = true)]
        public string Description { get; set; }

        /// <summary>
        /// The suggested name that the user would wish to put on to the returned information for visualisation in preference to the address.
        /// </summary>
        /// <value>The suggested name that the user would wish to put on to the returned information for visualisation in preference to the address.</value>
        [DataMember(Name = "displayName", IsRequired = true, EmitDefaultValue = true)]
        public string DisplayName { get; set; }

        /// <summary>
        /// Financially meaningful results can be presented as either simple flat types or more complex expanded types. This field gives the type of the more complex representation.  For example, the present value (PV) of a holding could be represented either as a simple decimal (with currency implied) or as a decimal-currency pair. In this example, the type returned in this field would be \&quot;Result0D\&quot;, the decimal-currency pair.
        /// </summary>
        /// <value>Financially meaningful results can be presented as either simple flat types or more complex expanded types. This field gives the type of the more complex representation.  For example, the present value (PV) of a holding could be represented either as a simple decimal (with currency implied) or as a decimal-currency pair. In this example, the type returned in this field would be \&quot;Result0D\&quot;, the decimal-currency pair.</value>
        [DataMember(Name = "type", IsRequired = true, EmitDefaultValue = true)]
        public string Type { get; set; }

        /// <summary>
        /// Financially meaningful results can be presented as either simple flat types or more complex expanded types. This field gives the type of the simpler representation.  For example, the present value (PV) of a holding could be represented either as a simple decimal (with currency implied) or as a decimal-currency pair. In this example, the type returned in this field would be \&quot;Decimal\&quot;.
        /// </summary>
        /// <value>Financially meaningful results can be presented as either simple flat types or more complex expanded types. This field gives the type of the simpler representation.  For example, the present value (PV) of a holding could be represented either as a simple decimal (with currency implied) or as a decimal-currency pair. In this example, the type returned in this field would be \&quot;Decimal\&quot;.</value>
        [DataMember(Name = "flattenedType", IsRequired = true, EmitDefaultValue = true)]
        public string FlattenedType { get; set; }

        /// <summary>
        /// Is the data scaled when it is for, e.g. a holding in an instrument. A key example would be the difference between price and PV. The present value of an instrument would scale with the quantity held. The price would be that for a hypothetical unit of that instrument, typically associated with the contract size.
        /// </summary>
        /// <value>Is the data scaled when it is for, e.g. a holding in an instrument. A key example would be the difference between price and PV. The present value of an instrument would scale with the quantity held. The price would be that for a hypothetical unit of that instrument, typically associated with the contract size.</value>
        [DataMember(Name = "holdingQuantityScaling", IsRequired = true, EmitDefaultValue = true)]
        public string HoldingQuantityScaling { get; set; }

        /// <summary>
        /// The types of queries that support this key.
        /// </summary>
        /// <value>The types of queries that support this key.</value>
        [DataMember(Name = "supportedUsages", IsRequired = true, EmitDefaultValue = true)]
        public List<string> SupportedUsages { get; set; }

        /// <summary>
        /// When performing an aggregation operation, what column type operations can be performed on the data. For example, it makes sense to sum decimals but not strings. Either can be counted. With more complex types, e.g. ResultValues, operations may be linked to a semantic meaning such as the currency of the result. In such cases the operations may be supported but context specific. For example, it makes sense to sum PVs in a single currency but not when the currency is different. In such cases, an error would result (it being assumed that no fx rates for currency conversion were implicit in the context).
        /// </summary>
        /// <value>When performing an aggregation operation, what column type operations can be performed on the data. For example, it makes sense to sum decimals but not strings. Either can be counted. With more complex types, e.g. ResultValues, operations may be linked to a semantic meaning such as the currency of the result. In such cases the operations may be supported but context specific. For example, it makes sense to sum PVs in a single currency but not when the currency is different. In such cases, an error would result (it being assumed that no fx rates for currency conversion were implicit in the context).</value>
        [DataMember(Name = "supportedOperations", IsRequired = true, EmitDefaultValue = true)]
        public List<string> SupportedOperations { get; set; }

        /// <summary>
        /// Within an API where an item can be accessed through an address or property, there is an associated status that determines whether the item is stable or likely to change. This status is one of [Experimental, Beta, EAP, Prod,  Deprecated]. If the item is deprecated it will be removed on or after the associated DateTime RemovalDate field. That field will not otherwise be set.
        /// </summary>
        /// <value>Within an API where an item can be accessed through an address or property, there is an associated status that determines whether the item is stable or likely to change. This status is one of [Experimental, Beta, EAP, Prod,  Deprecated]. If the item is deprecated it will be removed on or after the associated DateTime RemovalDate field. That field will not otherwise be set.</value>
        [DataMember(Name = "lifeCycleStatus", IsRequired = true, EmitDefaultValue = true)]
        public string LifeCycleStatus { get; set; }

        /// <summary>
        /// If the life cycle status is set to deprecated then this will be populated with the date on or after which removal of the address query will happen
        /// </summary>
        /// <value>If the life cycle status is set to deprecated then this will be populated with the date on or after which removal of the address query will happen</value>
        [DataMember(Name = "removalDate", EmitDefaultValue = true)]
        public DateTimeOffset? RemovalDate { get; set; }

        /// <summary>
        /// A mapping from option names to the definition that the corresponding option value must match.
        /// </summary>
        /// <value>A mapping from option names to the definition that the corresponding option value must match.</value>
        [DataMember(Name = "applicableOptions", EmitDefaultValue = true)]
        public Dictionary<string, AddressKeyOptionDefinition> ApplicableOptions { get; set; }

        /// <summary>
        /// Derivation formula for when the for when the query key represents a DerivedValuation property.
        /// </summary>
        /// <value>Derivation formula for when the for when the query key represents a DerivedValuation property.</value>
        [DataMember(Name = "derivationFormula", EmitDefaultValue = true)]
        public string DerivationFormula { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class QueryableKey {\n");
            sb.Append("  AddressKey: ").Append(AddressKey).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  DisplayName: ").Append(DisplayName).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  FlattenedType: ").Append(FlattenedType).Append("\n");
            sb.Append("  HoldingQuantityScaling: ").Append(HoldingQuantityScaling).Append("\n");
            sb.Append("  SupportedUsages: ").Append(SupportedUsages).Append("\n");
            sb.Append("  SupportedOperations: ").Append(SupportedOperations).Append("\n");
            sb.Append("  LifeCycleStatus: ").Append(LifeCycleStatus).Append("\n");
            sb.Append("  RemovalDate: ").Append(RemovalDate).Append("\n");
            sb.Append("  ApplicableOptions: ").Append(ApplicableOptions).Append("\n");
            sb.Append("  DerivationFormula: ").Append(DerivationFormula).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as QueryableKey);
        }

        /// <summary>
        /// Returns true if QueryableKey instances are equal
        /// </summary>
        /// <param name="input">Instance of QueryableKey to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(QueryableKey input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.AddressKey == input.AddressKey ||
                    (this.AddressKey != null &&
                    this.AddressKey.Equals(input.AddressKey))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.DisplayName == input.DisplayName ||
                    (this.DisplayName != null &&
                    this.DisplayName.Equals(input.DisplayName))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.FlattenedType == input.FlattenedType ||
                    (this.FlattenedType != null &&
                    this.FlattenedType.Equals(input.FlattenedType))
                ) && 
                (
                    this.HoldingQuantityScaling == input.HoldingQuantityScaling ||
                    (this.HoldingQuantityScaling != null &&
                    this.HoldingQuantityScaling.Equals(input.HoldingQuantityScaling))
                ) && 
                (
                    this.SupportedUsages == input.SupportedUsages ||
                    this.SupportedUsages != null &&
                    input.SupportedUsages != null &&
                    this.SupportedUsages.SequenceEqual(input.SupportedUsages)
                ) && 
                (
                    this.SupportedOperations == input.SupportedOperations ||
                    this.SupportedOperations != null &&
                    input.SupportedOperations != null &&
                    this.SupportedOperations.SequenceEqual(input.SupportedOperations)
                ) && 
                (
                    this.LifeCycleStatus == input.LifeCycleStatus ||
                    (this.LifeCycleStatus != null &&
                    this.LifeCycleStatus.Equals(input.LifeCycleStatus))
                ) && 
                (
                    this.RemovalDate == input.RemovalDate ||
                    (this.RemovalDate != null &&
                    this.RemovalDate.Equals(input.RemovalDate))
                ) && 
                (
                    this.ApplicableOptions == input.ApplicableOptions ||
                    this.ApplicableOptions != null &&
                    input.ApplicableOptions != null &&
                    this.ApplicableOptions.SequenceEqual(input.ApplicableOptions)
                ) && 
                (
                    this.DerivationFormula == input.DerivationFormula ||
                    (this.DerivationFormula != null &&
                    this.DerivationFormula.Equals(input.DerivationFormula))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AddressKey != null)
                {
                    hashCode = (hashCode * 59) + this.AddressKey.GetHashCode();
                }
                if (this.Description != null)
                {
                    hashCode = (hashCode * 59) + this.Description.GetHashCode();
                }
                if (this.DisplayName != null)
                {
                    hashCode = (hashCode * 59) + this.DisplayName.GetHashCode();
                }
                if (this.Type != null)
                {
                    hashCode = (hashCode * 59) + this.Type.GetHashCode();
                }
                if (this.FlattenedType != null)
                {
                    hashCode = (hashCode * 59) + this.FlattenedType.GetHashCode();
                }
                if (this.HoldingQuantityScaling != null)
                {
                    hashCode = (hashCode * 59) + this.HoldingQuantityScaling.GetHashCode();
                }
                if (this.SupportedUsages != null)
                {
                    hashCode = (hashCode * 59) + this.SupportedUsages.GetHashCode();
                }
                if (this.SupportedOperations != null)
                {
                    hashCode = (hashCode * 59) + this.SupportedOperations.GetHashCode();
                }
                if (this.LifeCycleStatus != null)
                {
                    hashCode = (hashCode * 59) + this.LifeCycleStatus.GetHashCode();
                }
                if (this.RemovalDate != null)
                {
                    hashCode = (hashCode * 59) + this.RemovalDate.GetHashCode();
                }
                if (this.ApplicableOptions != null)
                {
                    hashCode = (hashCode * 59) + this.ApplicableOptions.GetHashCode();
                }
                if (this.DerivationFormula != null)
                {
                    hashCode = (hashCode * 59) + this.DerivationFormula.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // AddressKey (string) minLength
            if (this.AddressKey != null && this.AddressKey.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for AddressKey, length must be greater than 1.", new [] { "AddressKey" });
            }

            // DisplayName (string) minLength
            if (this.DisplayName != null && this.DisplayName.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for DisplayName, length must be greater than 1.", new [] { "DisplayName" });
            }

            // Type (string) minLength
            if (this.Type != null && this.Type.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Type, length must be greater than 1.", new [] { "Type" });
            }

            // FlattenedType (string) minLength
            if (this.FlattenedType != null && this.FlattenedType.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for FlattenedType, length must be greater than 1.", new [] { "FlattenedType" });
            }

            // HoldingQuantityScaling (string) minLength
            if (this.HoldingQuantityScaling != null && this.HoldingQuantityScaling.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for HoldingQuantityScaling, length must be greater than 1.", new [] { "HoldingQuantityScaling" });
            }

            // LifeCycleStatus (string) minLength
            if (this.LifeCycleStatus != null && this.LifeCycleStatus.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for LifeCycleStatus, length must be greater than 1.", new [] { "LifeCycleStatus" });
            }

            yield break;
        }
    }
}
