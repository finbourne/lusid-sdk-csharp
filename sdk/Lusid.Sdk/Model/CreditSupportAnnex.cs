/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Lusid.Sdk.Client.OpenAPIDateConverter;

namespace Lusid.Sdk.Model
{
    /// <summary>
    /// Entity to capture the calculable and queryable methods and practices of determining and transferring collateral  to a counterparty as part of margining of transactions. These typically come from a particular ISDA agreement  that is in place between the two counterparties.
    /// </summary>
    [DataContract(Name = "CreditSupportAnnex")]
    public partial class CreditSupportAnnex : IEquatable<CreditSupportAnnex>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CreditSupportAnnex" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CreditSupportAnnex() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CreditSupportAnnex" /> class.
        /// </summary>
        /// <param name="referenceCurrency">The base, or reference, currency against which MtM value and exposure should be calculated  and in which the CSA parameters are defined if the currency is not otherwise explicitly stated. (required).</param>
        /// <param name="collateralCurrencies">The set of currencies within which it is acceptable to post cash collateral. (required).</param>
        /// <param name="isdaAgreementVersion">The transactions will take place with reference to a particular ISDA master agreement. This  will likely be either the ISDA 1992 or ISDA 2002 agremeents or ISDA close-out 2009. (required).</param>
        /// <param name="marginCallFrequency">The tenor, e.g. daily (1D) or biweekly (2W), at which frequency a margin call will be made, calculations  made and money transferred to readjust. The calculation might also require a specific time for valuation and notification. (required).</param>
        /// <param name="valuationAgent">Are the calculations performed by the institutions&#39;s counterparty or the institution trading with them. (required).</param>
        /// <param name="thresholdAmount">At what level of exposure does collateral need to be posted. Will typically be zero for banks.  Should be stated in reference currency (required).</param>
        /// <param name="roundingDecimalPlaces">Where a calculation needs to be rounded to a specific number of decimal places,  this states the number that that requires. (required).</param>
        /// <param name="initialMarginAmount">The initial margin that is required. In the reference currency (required).</param>
        /// <param name="minimumTransferAmount">The minimum amount, in the reference currency, that must be transferred when required. (required).</param>
        /// <param name="id">id (required).</param>
        public CreditSupportAnnex(string referenceCurrency = default(string), List<string> collateralCurrencies = default(List<string>), string isdaAgreementVersion = default(string), string marginCallFrequency = default(string), string valuationAgent = default(string), decimal thresholdAmount = default(decimal), int roundingDecimalPlaces = default(int), decimal initialMarginAmount = default(decimal), decimal minimumTransferAmount = default(decimal), ResourceId id = default(ResourceId))
        {
            // to ensure "referenceCurrency" is required (not null)
            if (referenceCurrency == null)
            {
                throw new ArgumentNullException("referenceCurrency is a required property for CreditSupportAnnex and cannot be null");
            }
            this.ReferenceCurrency = referenceCurrency;
            // to ensure "collateralCurrencies" is required (not null)
            if (collateralCurrencies == null)
            {
                throw new ArgumentNullException("collateralCurrencies is a required property for CreditSupportAnnex and cannot be null");
            }
            this.CollateralCurrencies = collateralCurrencies;
            // to ensure "isdaAgreementVersion" is required (not null)
            if (isdaAgreementVersion == null)
            {
                throw new ArgumentNullException("isdaAgreementVersion is a required property for CreditSupportAnnex and cannot be null");
            }
            this.IsdaAgreementVersion = isdaAgreementVersion;
            // to ensure "marginCallFrequency" is required (not null)
            if (marginCallFrequency == null)
            {
                throw new ArgumentNullException("marginCallFrequency is a required property for CreditSupportAnnex and cannot be null");
            }
            this.MarginCallFrequency = marginCallFrequency;
            // to ensure "valuationAgent" is required (not null)
            if (valuationAgent == null)
            {
                throw new ArgumentNullException("valuationAgent is a required property for CreditSupportAnnex and cannot be null");
            }
            this.ValuationAgent = valuationAgent;
            this.ThresholdAmount = thresholdAmount;
            this.RoundingDecimalPlaces = roundingDecimalPlaces;
            this.InitialMarginAmount = initialMarginAmount;
            this.MinimumTransferAmount = minimumTransferAmount;
            // to ensure "id" is required (not null)
            if (id == null)
            {
                throw new ArgumentNullException("id is a required property for CreditSupportAnnex and cannot be null");
            }
            this.Id = id;
        }

        /// <summary>
        /// The base, or reference, currency against which MtM value and exposure should be calculated  and in which the CSA parameters are defined if the currency is not otherwise explicitly stated.
        /// </summary>
        /// <value>The base, or reference, currency against which MtM value and exposure should be calculated  and in which the CSA parameters are defined if the currency is not otherwise explicitly stated.</value>
        [DataMember(Name = "referenceCurrency", IsRequired = true, EmitDefaultValue = true)]
        public string ReferenceCurrency { get; set; }

        /// <summary>
        /// The set of currencies within which it is acceptable to post cash collateral.
        /// </summary>
        /// <value>The set of currencies within which it is acceptable to post cash collateral.</value>
        [DataMember(Name = "collateralCurrencies", IsRequired = true, EmitDefaultValue = true)]
        public List<string> CollateralCurrencies { get; set; }

        /// <summary>
        /// The transactions will take place with reference to a particular ISDA master agreement. This  will likely be either the ISDA 1992 or ISDA 2002 agremeents or ISDA close-out 2009.
        /// </summary>
        /// <value>The transactions will take place with reference to a particular ISDA master agreement. This  will likely be either the ISDA 1992 or ISDA 2002 agremeents or ISDA close-out 2009.</value>
        [DataMember(Name = "isdaAgreementVersion", IsRequired = true, EmitDefaultValue = true)]
        public string IsdaAgreementVersion { get; set; }

        /// <summary>
        /// The tenor, e.g. daily (1D) or biweekly (2W), at which frequency a margin call will be made, calculations  made and money transferred to readjust. The calculation might also require a specific time for valuation and notification.
        /// </summary>
        /// <value>The tenor, e.g. daily (1D) or biweekly (2W), at which frequency a margin call will be made, calculations  made and money transferred to readjust. The calculation might also require a specific time for valuation and notification.</value>
        [DataMember(Name = "marginCallFrequency", IsRequired = true, EmitDefaultValue = true)]
        public string MarginCallFrequency { get; set; }

        /// <summary>
        /// Are the calculations performed by the institutions&#39;s counterparty or the institution trading with them.
        /// </summary>
        /// <value>Are the calculations performed by the institutions&#39;s counterparty or the institution trading with them.</value>
        [DataMember(Name = "valuationAgent", IsRequired = true, EmitDefaultValue = true)]
        public string ValuationAgent { get; set; }

        /// <summary>
        /// At what level of exposure does collateral need to be posted. Will typically be zero for banks.  Should be stated in reference currency
        /// </summary>
        /// <value>At what level of exposure does collateral need to be posted. Will typically be zero for banks.  Should be stated in reference currency</value>
        [DataMember(Name = "thresholdAmount", IsRequired = true, EmitDefaultValue = true)]
        public decimal ThresholdAmount { get; set; }

        /// <summary>
        /// Where a calculation needs to be rounded to a specific number of decimal places,  this states the number that that requires.
        /// </summary>
        /// <value>Where a calculation needs to be rounded to a specific number of decimal places,  this states the number that that requires.</value>
        [DataMember(Name = "roundingDecimalPlaces", IsRequired = true, EmitDefaultValue = true)]
        public int RoundingDecimalPlaces { get; set; }

        /// <summary>
        /// The initial margin that is required. In the reference currency
        /// </summary>
        /// <value>The initial margin that is required. In the reference currency</value>
        [DataMember(Name = "initialMarginAmount", IsRequired = true, EmitDefaultValue = true)]
        public decimal InitialMarginAmount { get; set; }

        /// <summary>
        /// The minimum amount, in the reference currency, that must be transferred when required.
        /// </summary>
        /// <value>The minimum amount, in the reference currency, that must be transferred when required.</value>
        [DataMember(Name = "minimumTransferAmount", IsRequired = true, EmitDefaultValue = true)]
        public decimal MinimumTransferAmount { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = true)]
        public ResourceId Id { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CreditSupportAnnex {\n");
            sb.Append("  ReferenceCurrency: ").Append(ReferenceCurrency).Append("\n");
            sb.Append("  CollateralCurrencies: ").Append(CollateralCurrencies).Append("\n");
            sb.Append("  IsdaAgreementVersion: ").Append(IsdaAgreementVersion).Append("\n");
            sb.Append("  MarginCallFrequency: ").Append(MarginCallFrequency).Append("\n");
            sb.Append("  ValuationAgent: ").Append(ValuationAgent).Append("\n");
            sb.Append("  ThresholdAmount: ").Append(ThresholdAmount).Append("\n");
            sb.Append("  RoundingDecimalPlaces: ").Append(RoundingDecimalPlaces).Append("\n");
            sb.Append("  InitialMarginAmount: ").Append(InitialMarginAmount).Append("\n");
            sb.Append("  MinimumTransferAmount: ").Append(MinimumTransferAmount).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CreditSupportAnnex);
        }

        /// <summary>
        /// Returns true if CreditSupportAnnex instances are equal
        /// </summary>
        /// <param name="input">Instance of CreditSupportAnnex to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CreditSupportAnnex input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.ReferenceCurrency == input.ReferenceCurrency ||
                    (this.ReferenceCurrency != null &&
                    this.ReferenceCurrency.Equals(input.ReferenceCurrency))
                ) && 
                (
                    this.CollateralCurrencies == input.CollateralCurrencies ||
                    this.CollateralCurrencies != null &&
                    input.CollateralCurrencies != null &&
                    this.CollateralCurrencies.SequenceEqual(input.CollateralCurrencies)
                ) && 
                (
                    this.IsdaAgreementVersion == input.IsdaAgreementVersion ||
                    (this.IsdaAgreementVersion != null &&
                    this.IsdaAgreementVersion.Equals(input.IsdaAgreementVersion))
                ) && 
                (
                    this.MarginCallFrequency == input.MarginCallFrequency ||
                    (this.MarginCallFrequency != null &&
                    this.MarginCallFrequency.Equals(input.MarginCallFrequency))
                ) && 
                (
                    this.ValuationAgent == input.ValuationAgent ||
                    (this.ValuationAgent != null &&
                    this.ValuationAgent.Equals(input.ValuationAgent))
                ) && 
                (
                    this.ThresholdAmount == input.ThresholdAmount ||
                    this.ThresholdAmount.Equals(input.ThresholdAmount)
                ) && 
                (
                    this.RoundingDecimalPlaces == input.RoundingDecimalPlaces ||
                    this.RoundingDecimalPlaces.Equals(input.RoundingDecimalPlaces)
                ) && 
                (
                    this.InitialMarginAmount == input.InitialMarginAmount ||
                    this.InitialMarginAmount.Equals(input.InitialMarginAmount)
                ) && 
                (
                    this.MinimumTransferAmount == input.MinimumTransferAmount ||
                    this.MinimumTransferAmount.Equals(input.MinimumTransferAmount)
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ReferenceCurrency != null)
                {
                    hashCode = (hashCode * 59) + this.ReferenceCurrency.GetHashCode();
                }
                if (this.CollateralCurrencies != null)
                {
                    hashCode = (hashCode * 59) + this.CollateralCurrencies.GetHashCode();
                }
                if (this.IsdaAgreementVersion != null)
                {
                    hashCode = (hashCode * 59) + this.IsdaAgreementVersion.GetHashCode();
                }
                if (this.MarginCallFrequency != null)
                {
                    hashCode = (hashCode * 59) + this.MarginCallFrequency.GetHashCode();
                }
                if (this.ValuationAgent != null)
                {
                    hashCode = (hashCode * 59) + this.ValuationAgent.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.ThresholdAmount.GetHashCode();
                hashCode = (hashCode * 59) + this.RoundingDecimalPlaces.GetHashCode();
                hashCode = (hashCode * 59) + this.InitialMarginAmount.GetHashCode();
                hashCode = (hashCode * 59) + this.MinimumTransferAmount.GetHashCode();
                if (this.Id != null)
                {
                    hashCode = (hashCode * 59) + this.Id.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // IsdaAgreementVersion (string) maxLength
            if (this.IsdaAgreementVersion != null && this.IsdaAgreementVersion.Length > 128)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for IsdaAgreementVersion, length must be less than 128.", new [] { "IsdaAgreementVersion" });
            }

            // IsdaAgreementVersion (string) minLength
            if (this.IsdaAgreementVersion != null && this.IsdaAgreementVersion.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for IsdaAgreementVersion, length must be greater than 0.", new [] { "IsdaAgreementVersion" });
            }

            // MarginCallFrequency (string) maxLength
            if (this.MarginCallFrequency != null && this.MarginCallFrequency.Length > 32)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for MarginCallFrequency, length must be less than 32.", new [] { "MarginCallFrequency" });
            }

            // MarginCallFrequency (string) minLength
            if (this.MarginCallFrequency != null && this.MarginCallFrequency.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for MarginCallFrequency, length must be greater than 0.", new [] { "MarginCallFrequency" });
            }

            // ValuationAgent (string) maxLength
            if (this.ValuationAgent != null && this.ValuationAgent.Length > 256)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ValuationAgent, length must be less than 256.", new [] { "ValuationAgent" });
            }

            // ValuationAgent (string) minLength
            if (this.ValuationAgent != null && this.ValuationAgent.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ValuationAgent, length must be greater than 0.", new [] { "ValuationAgent" });
            }

            yield break;
        }
    }
}
