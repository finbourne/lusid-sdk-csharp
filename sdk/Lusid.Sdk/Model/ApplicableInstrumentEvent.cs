/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Lusid.Sdk.Client.OpenAPIDateConverter;

namespace Lusid.Sdk.Model
{
    /// <summary>
    /// Represents applicable instrument event.
    /// </summary>
    [DataContract(Name = "ApplicableInstrumentEvent")]
    public partial class ApplicableInstrumentEvent : IEquatable<ApplicableInstrumentEvent>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ApplicableInstrumentEvent" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ApplicableInstrumentEvent() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ApplicableInstrumentEvent" /> class.
        /// </summary>
        /// <param name="portfolioId">portfolioId (required).</param>
        /// <param name="holdingId">holdingId (required).</param>
        /// <param name="lusidInstrumentId">lusidInstrumentId (required).</param>
        /// <param name="instrumentScope">instrumentScope (required).</param>
        /// <param name="instrumentType">instrumentType (required).</param>
        /// <param name="instrumentEventType">instrumentEventType (required).</param>
        /// <param name="instrumentEventId">instrumentEventId (required).</param>
        /// <param name="generatedEvent">generatedEvent (required).</param>
        /// <param name="loadedEvent">loadedEvent (required).</param>
        /// <param name="appliedInstrumentEventInstructionId">appliedInstrumentEventInstructionId (required).</param>
        /// <param name="transactions">transactions (required).</param>
        public ApplicableInstrumentEvent(ResourceId portfolioId = default(ResourceId), long holdingId = default(long), string lusidInstrumentId = default(string), string instrumentScope = default(string), string instrumentType = default(string), string instrumentEventType = default(string), string instrumentEventId = default(string), InstrumentEventHolder generatedEvent = default(InstrumentEventHolder), InstrumentEventHolder loadedEvent = default(InstrumentEventHolder), string appliedInstrumentEventInstructionId = default(string), List<Transaction> transactions = default(List<Transaction>))
        {
            // to ensure "portfolioId" is required (not null)
            if (portfolioId == null)
            {
                throw new ArgumentNullException("portfolioId is a required property for ApplicableInstrumentEvent and cannot be null");
            }
            this.PortfolioId = portfolioId;
            this.HoldingId = holdingId;
            // to ensure "lusidInstrumentId" is required (not null)
            if (lusidInstrumentId == null)
            {
                throw new ArgumentNullException("lusidInstrumentId is a required property for ApplicableInstrumentEvent and cannot be null");
            }
            this.LusidInstrumentId = lusidInstrumentId;
            // to ensure "instrumentScope" is required (not null)
            if (instrumentScope == null)
            {
                throw new ArgumentNullException("instrumentScope is a required property for ApplicableInstrumentEvent and cannot be null");
            }
            this.InstrumentScope = instrumentScope;
            // to ensure "instrumentType" is required (not null)
            if (instrumentType == null)
            {
                throw new ArgumentNullException("instrumentType is a required property for ApplicableInstrumentEvent and cannot be null");
            }
            this.InstrumentType = instrumentType;
            // to ensure "instrumentEventType" is required (not null)
            if (instrumentEventType == null)
            {
                throw new ArgumentNullException("instrumentEventType is a required property for ApplicableInstrumentEvent and cannot be null");
            }
            this.InstrumentEventType = instrumentEventType;
            // to ensure "instrumentEventId" is required (not null)
            if (instrumentEventId == null)
            {
                throw new ArgumentNullException("instrumentEventId is a required property for ApplicableInstrumentEvent and cannot be null");
            }
            this.InstrumentEventId = instrumentEventId;
            // to ensure "generatedEvent" is required (not null)
            if (generatedEvent == null)
            {
                throw new ArgumentNullException("generatedEvent is a required property for ApplicableInstrumentEvent and cannot be null");
            }
            this.GeneratedEvent = generatedEvent;
            // to ensure "loadedEvent" is required (not null)
            if (loadedEvent == null)
            {
                throw new ArgumentNullException("loadedEvent is a required property for ApplicableInstrumentEvent and cannot be null");
            }
            this.LoadedEvent = loadedEvent;
            // to ensure "appliedInstrumentEventInstructionId" is required (not null)
            if (appliedInstrumentEventInstructionId == null)
            {
                throw new ArgumentNullException("appliedInstrumentEventInstructionId is a required property for ApplicableInstrumentEvent and cannot be null");
            }
            this.AppliedInstrumentEventInstructionId = appliedInstrumentEventInstructionId;
            // to ensure "transactions" is required (not null)
            if (transactions == null)
            {
                throw new ArgumentNullException("transactions is a required property for ApplicableInstrumentEvent and cannot be null");
            }
            this.Transactions = transactions;
        }

        /// <summary>
        /// Gets or Sets PortfolioId
        /// </summary>
        [DataMember(Name = "portfolioId", IsRequired = true, EmitDefaultValue = true)]
        public ResourceId PortfolioId { get; set; }

        /// <summary>
        /// Gets or Sets HoldingId
        /// </summary>
        [DataMember(Name = "holdingId", IsRequired = true, EmitDefaultValue = true)]
        public long HoldingId { get; set; }

        /// <summary>
        /// Gets or Sets LusidInstrumentId
        /// </summary>
        [DataMember(Name = "lusidInstrumentId", IsRequired = true, EmitDefaultValue = true)]
        public string LusidInstrumentId { get; set; }

        /// <summary>
        /// Gets or Sets InstrumentScope
        /// </summary>
        [DataMember(Name = "instrumentScope", IsRequired = true, EmitDefaultValue = true)]
        public string InstrumentScope { get; set; }

        /// <summary>
        /// Gets or Sets InstrumentType
        /// </summary>
        [DataMember(Name = "instrumentType", IsRequired = true, EmitDefaultValue = true)]
        public string InstrumentType { get; set; }

        /// <summary>
        /// Gets or Sets InstrumentEventType
        /// </summary>
        [DataMember(Name = "instrumentEventType", IsRequired = true, EmitDefaultValue = true)]
        public string InstrumentEventType { get; set; }

        /// <summary>
        /// Gets or Sets InstrumentEventId
        /// </summary>
        [DataMember(Name = "instrumentEventId", IsRequired = true, EmitDefaultValue = true)]
        public string InstrumentEventId { get; set; }

        /// <summary>
        /// Gets or Sets GeneratedEvent
        /// </summary>
        [DataMember(Name = "generatedEvent", IsRequired = true, EmitDefaultValue = true)]
        public InstrumentEventHolder GeneratedEvent { get; set; }

        /// <summary>
        /// Gets or Sets LoadedEvent
        /// </summary>
        [DataMember(Name = "loadedEvent", IsRequired = true, EmitDefaultValue = true)]
        public InstrumentEventHolder LoadedEvent { get; set; }

        /// <summary>
        /// Gets or Sets AppliedInstrumentEventInstructionId
        /// </summary>
        [DataMember(Name = "appliedInstrumentEventInstructionId", IsRequired = true, EmitDefaultValue = true)]
        public string AppliedInstrumentEventInstructionId { get; set; }

        /// <summary>
        /// Gets or Sets Transactions
        /// </summary>
        [DataMember(Name = "transactions", IsRequired = true, EmitDefaultValue = true)]
        public List<Transaction> Transactions { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ApplicableInstrumentEvent {\n");
            sb.Append("  PortfolioId: ").Append(PortfolioId).Append("\n");
            sb.Append("  HoldingId: ").Append(HoldingId).Append("\n");
            sb.Append("  LusidInstrumentId: ").Append(LusidInstrumentId).Append("\n");
            sb.Append("  InstrumentScope: ").Append(InstrumentScope).Append("\n");
            sb.Append("  InstrumentType: ").Append(InstrumentType).Append("\n");
            sb.Append("  InstrumentEventType: ").Append(InstrumentEventType).Append("\n");
            sb.Append("  InstrumentEventId: ").Append(InstrumentEventId).Append("\n");
            sb.Append("  GeneratedEvent: ").Append(GeneratedEvent).Append("\n");
            sb.Append("  LoadedEvent: ").Append(LoadedEvent).Append("\n");
            sb.Append("  AppliedInstrumentEventInstructionId: ").Append(AppliedInstrumentEventInstructionId).Append("\n");
            sb.Append("  Transactions: ").Append(Transactions).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ApplicableInstrumentEvent);
        }

        /// <summary>
        /// Returns true if ApplicableInstrumentEvent instances are equal
        /// </summary>
        /// <param name="input">Instance of ApplicableInstrumentEvent to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ApplicableInstrumentEvent input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.PortfolioId == input.PortfolioId ||
                    (this.PortfolioId != null &&
                    this.PortfolioId.Equals(input.PortfolioId))
                ) && 
                (
                    this.HoldingId == input.HoldingId ||
                    this.HoldingId.Equals(input.HoldingId)
                ) && 
                (
                    this.LusidInstrumentId == input.LusidInstrumentId ||
                    (this.LusidInstrumentId != null &&
                    this.LusidInstrumentId.Equals(input.LusidInstrumentId))
                ) && 
                (
                    this.InstrumentScope == input.InstrumentScope ||
                    (this.InstrumentScope != null &&
                    this.InstrumentScope.Equals(input.InstrumentScope))
                ) && 
                (
                    this.InstrumentType == input.InstrumentType ||
                    (this.InstrumentType != null &&
                    this.InstrumentType.Equals(input.InstrumentType))
                ) && 
                (
                    this.InstrumentEventType == input.InstrumentEventType ||
                    (this.InstrumentEventType != null &&
                    this.InstrumentEventType.Equals(input.InstrumentEventType))
                ) && 
                (
                    this.InstrumentEventId == input.InstrumentEventId ||
                    (this.InstrumentEventId != null &&
                    this.InstrumentEventId.Equals(input.InstrumentEventId))
                ) && 
                (
                    this.GeneratedEvent == input.GeneratedEvent ||
                    (this.GeneratedEvent != null &&
                    this.GeneratedEvent.Equals(input.GeneratedEvent))
                ) && 
                (
                    this.LoadedEvent == input.LoadedEvent ||
                    (this.LoadedEvent != null &&
                    this.LoadedEvent.Equals(input.LoadedEvent))
                ) && 
                (
                    this.AppliedInstrumentEventInstructionId == input.AppliedInstrumentEventInstructionId ||
                    (this.AppliedInstrumentEventInstructionId != null &&
                    this.AppliedInstrumentEventInstructionId.Equals(input.AppliedInstrumentEventInstructionId))
                ) && 
                (
                    this.Transactions == input.Transactions ||
                    this.Transactions != null &&
                    input.Transactions != null &&
                    this.Transactions.SequenceEqual(input.Transactions)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.PortfolioId != null)
                {
                    hashCode = (hashCode * 59) + this.PortfolioId.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.HoldingId.GetHashCode();
                if (this.LusidInstrumentId != null)
                {
                    hashCode = (hashCode * 59) + this.LusidInstrumentId.GetHashCode();
                }
                if (this.InstrumentScope != null)
                {
                    hashCode = (hashCode * 59) + this.InstrumentScope.GetHashCode();
                }
                if (this.InstrumentType != null)
                {
                    hashCode = (hashCode * 59) + this.InstrumentType.GetHashCode();
                }
                if (this.InstrumentEventType != null)
                {
                    hashCode = (hashCode * 59) + this.InstrumentEventType.GetHashCode();
                }
                if (this.InstrumentEventId != null)
                {
                    hashCode = (hashCode * 59) + this.InstrumentEventId.GetHashCode();
                }
                if (this.GeneratedEvent != null)
                {
                    hashCode = (hashCode * 59) + this.GeneratedEvent.GetHashCode();
                }
                if (this.LoadedEvent != null)
                {
                    hashCode = (hashCode * 59) + this.LoadedEvent.GetHashCode();
                }
                if (this.AppliedInstrumentEventInstructionId != null)
                {
                    hashCode = (hashCode * 59) + this.AppliedInstrumentEventInstructionId.GetHashCode();
                }
                if (this.Transactions != null)
                {
                    hashCode = (hashCode * 59) + this.Transactions.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // LusidInstrumentId (string) minLength
            if (this.LusidInstrumentId != null && this.LusidInstrumentId.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for LusidInstrumentId, length must be greater than 1.", new [] { "LusidInstrumentId" });
            }

            // InstrumentScope (string) minLength
            if (this.InstrumentScope != null && this.InstrumentScope.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for InstrumentScope, length must be greater than 1.", new [] { "InstrumentScope" });
            }

            // InstrumentType (string) minLength
            if (this.InstrumentType != null && this.InstrumentType.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for InstrumentType, length must be greater than 1.", new [] { "InstrumentType" });
            }

            // InstrumentEventType (string) minLength
            if (this.InstrumentEventType != null && this.InstrumentEventType.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for InstrumentEventType, length must be greater than 1.", new [] { "InstrumentEventType" });
            }

            // InstrumentEventId (string) minLength
            if (this.InstrumentEventId != null && this.InstrumentEventId.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for InstrumentEventId, length must be greater than 1.", new [] { "InstrumentEventId" });
            }

            // AppliedInstrumentEventInstructionId (string) minLength
            if (this.AppliedInstrumentEventInstructionId != null && this.AppliedInstrumentEventInstructionId.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for AppliedInstrumentEventInstructionId, length must be greater than 1.", new [] { "AppliedInstrumentEventInstructionId" });
            }

            yield break;
        }
    }
}
