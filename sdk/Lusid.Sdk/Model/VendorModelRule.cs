/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Lusid.Sdk.Client.OpenAPIDateConverter;

namespace Lusid.Sdk.Model
{
    /// <summary>
    /// A rule that identifies the set of preferences to be used for a given library, model and instrument type.  There can be many such rules, though only the first found for a given combination would be used.
    /// </summary>
    [DataContract(Name = "VendorModelRule")]
    public partial class VendorModelRule : IEquatable<VendorModelRule>, IValidatableObject
    {
        /// <summary>
        /// The available values are: Lusid, RefinitivQps, RefinitivTracsWeb, VolMaster, IsdaCds, YieldBook, LusidCalc
        /// </summary>
        /// <value>The available values are: Lusid, RefinitivQps, RefinitivTracsWeb, VolMaster, IsdaCds, YieldBook, LusidCalc</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum SupplierEnum
        {
            /// <summary>
            /// Enum Lusid for value: Lusid
            /// </summary>
            [EnumMember(Value = "Lusid")]
            Lusid = 1,

            /// <summary>
            /// Enum RefinitivQps for value: RefinitivQps
            /// </summary>
            [EnumMember(Value = "RefinitivQps")]
            RefinitivQps = 2,

            /// <summary>
            /// Enum RefinitivTracsWeb for value: RefinitivTracsWeb
            /// </summary>
            [EnumMember(Value = "RefinitivTracsWeb")]
            RefinitivTracsWeb = 3,

            /// <summary>
            /// Enum VolMaster for value: VolMaster
            /// </summary>
            [EnumMember(Value = "VolMaster")]
            VolMaster = 4,

            /// <summary>
            /// Enum IsdaCds for value: IsdaCds
            /// </summary>
            [EnumMember(Value = "IsdaCds")]
            IsdaCds = 5,

            /// <summary>
            /// Enum YieldBook for value: YieldBook
            /// </summary>
            [EnumMember(Value = "YieldBook")]
            YieldBook = 6,

            /// <summary>
            /// Enum LusidCalc for value: LusidCalc
            /// </summary>
            [EnumMember(Value = "LusidCalc")]
            LusidCalc = 7
        }


        /// <summary>
        /// The available values are: Lusid, RefinitivQps, RefinitivTracsWeb, VolMaster, IsdaCds, YieldBook, LusidCalc
        /// </summary>
        /// <value>The available values are: Lusid, RefinitivQps, RefinitivTracsWeb, VolMaster, IsdaCds, YieldBook, LusidCalc</value>
        [DataMember(Name = "supplier", IsRequired = true, EmitDefaultValue = true)]
        public SupplierEnum Supplier { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="VendorModelRule" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected VendorModelRule() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="VendorModelRule" /> class.
        /// </summary>
        /// <param name="supplier">The available values are: Lusid, RefinitivQps, RefinitivTracsWeb, VolMaster, IsdaCds, YieldBook, LusidCalc (required).</param>
        /// <param name="modelName">The vendor library model name (required).</param>
        /// <param name="instrumentType">The vendor library instrument type (required).</param>
        /// <param name="parameters">THIS FIELD IS DEPRECATED - use ModelOptions  The set of opaque model parameters, provided as a Json object, that is a string object which will internally be converted to a dictionary of string to object.  Note that this is not intended as the final form of this object. It will be replaced with a more structured object as the set of parameters that are possible is  better understood..</param>
        /// <param name="modelOptions">modelOptions.</param>
        /// <param name="instrumentId">This field should generally not be required. It indicates a specific case where there is a particular need to make a rule apply to only a single instrument  specified by an identifier on that instrument such as its LUID. One particular example would be to control the behaviour of a look-through portfolio scaling  methodology, such as where there is a mixture of indices and credit-debit portfolios where scaling on the sum of valuation would be deemed incorrectly for one  set but desired in general..</param>
        /// <param name="addressKeyFilters">Condition for model selection. If a condition is satisfied the default model for valuation is overridden (for that instrument)..</param>
        public VendorModelRule(SupplierEnum supplier = default(SupplierEnum), string modelName = default(string), string instrumentType = default(string), string parameters = default(string), ModelOptions modelOptions = default(ModelOptions), string instrumentId = default(string), List<AddressKeyFilter> addressKeyFilters = default(List<AddressKeyFilter>))
        {
            this.Supplier = supplier;
            // to ensure "modelName" is required (not null)
            if (modelName == null)
            {
                throw new ArgumentNullException("modelName is a required property for VendorModelRule and cannot be null");
            }
            this.ModelName = modelName;
            // to ensure "instrumentType" is required (not null)
            if (instrumentType == null)
            {
                throw new ArgumentNullException("instrumentType is a required property for VendorModelRule and cannot be null");
            }
            this.InstrumentType = instrumentType;
            this.Parameters = parameters;
            this.ModelOptions = modelOptions;
            this.InstrumentId = instrumentId;
            this.AddressKeyFilters = addressKeyFilters;
        }

        /// <summary>
        /// The vendor library model name
        /// </summary>
        /// <value>The vendor library model name</value>
        [DataMember(Name = "modelName", IsRequired = true, EmitDefaultValue = true)]
        public string ModelName { get; set; }

        /// <summary>
        /// The vendor library instrument type
        /// </summary>
        /// <value>The vendor library instrument type</value>
        [DataMember(Name = "instrumentType", IsRequired = true, EmitDefaultValue = true)]
        public string InstrumentType { get; set; }

        /// <summary>
        /// THIS FIELD IS DEPRECATED - use ModelOptions  The set of opaque model parameters, provided as a Json object, that is a string object which will internally be converted to a dictionary of string to object.  Note that this is not intended as the final form of this object. It will be replaced with a more structured object as the set of parameters that are possible is  better understood.
        /// </summary>
        /// <value>THIS FIELD IS DEPRECATED - use ModelOptions  The set of opaque model parameters, provided as a Json object, that is a string object which will internally be converted to a dictionary of string to object.  Note that this is not intended as the final form of this object. It will be replaced with a more structured object as the set of parameters that are possible is  better understood.</value>
        [DataMember(Name = "parameters", EmitDefaultValue = true)]
        public string Parameters { get; set; }

        /// <summary>
        /// Gets or Sets ModelOptions
        /// </summary>
        [DataMember(Name = "modelOptions", EmitDefaultValue = false)]
        public ModelOptions ModelOptions { get; set; }

        /// <summary>
        /// This field should generally not be required. It indicates a specific case where there is a particular need to make a rule apply to only a single instrument  specified by an identifier on that instrument such as its LUID. One particular example would be to control the behaviour of a look-through portfolio scaling  methodology, such as where there is a mixture of indices and credit-debit portfolios where scaling on the sum of valuation would be deemed incorrectly for one  set but desired in general.
        /// </summary>
        /// <value>This field should generally not be required. It indicates a specific case where there is a particular need to make a rule apply to only a single instrument  specified by an identifier on that instrument such as its LUID. One particular example would be to control the behaviour of a look-through portfolio scaling  methodology, such as where there is a mixture of indices and credit-debit portfolios where scaling on the sum of valuation would be deemed incorrectly for one  set but desired in general.</value>
        [DataMember(Name = "instrumentId", EmitDefaultValue = true)]
        public string InstrumentId { get; set; }

        /// <summary>
        /// Condition for model selection. If a condition is satisfied the default model for valuation is overridden (for that instrument).
        /// </summary>
        /// <value>Condition for model selection. If a condition is satisfied the default model for valuation is overridden (for that instrument).</value>
        [DataMember(Name = "addressKeyFilters", EmitDefaultValue = true)]
        public List<AddressKeyFilter> AddressKeyFilters { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class VendorModelRule {\n");
            sb.Append("  Supplier: ").Append(Supplier).Append("\n");
            sb.Append("  ModelName: ").Append(ModelName).Append("\n");
            sb.Append("  InstrumentType: ").Append(InstrumentType).Append("\n");
            sb.Append("  Parameters: ").Append(Parameters).Append("\n");
            sb.Append("  ModelOptions: ").Append(ModelOptions).Append("\n");
            sb.Append("  InstrumentId: ").Append(InstrumentId).Append("\n");
            sb.Append("  AddressKeyFilters: ").Append(AddressKeyFilters).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as VendorModelRule);
        }

        /// <summary>
        /// Returns true if VendorModelRule instances are equal
        /// </summary>
        /// <param name="input">Instance of VendorModelRule to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(VendorModelRule input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Supplier == input.Supplier ||
                    this.Supplier.Equals(input.Supplier)
                ) && 
                (
                    this.ModelName == input.ModelName ||
                    (this.ModelName != null &&
                    this.ModelName.Equals(input.ModelName))
                ) && 
                (
                    this.InstrumentType == input.InstrumentType ||
                    (this.InstrumentType != null &&
                    this.InstrumentType.Equals(input.InstrumentType))
                ) && 
                (
                    this.Parameters == input.Parameters ||
                    (this.Parameters != null &&
                    this.Parameters.Equals(input.Parameters))
                ) && 
                (
                    this.ModelOptions == input.ModelOptions ||
                    (this.ModelOptions != null &&
                    this.ModelOptions.Equals(input.ModelOptions))
                ) && 
                (
                    this.InstrumentId == input.InstrumentId ||
                    (this.InstrumentId != null &&
                    this.InstrumentId.Equals(input.InstrumentId))
                ) && 
                (
                    this.AddressKeyFilters == input.AddressKeyFilters ||
                    this.AddressKeyFilters != null &&
                    input.AddressKeyFilters != null &&
                    this.AddressKeyFilters.SequenceEqual(input.AddressKeyFilters)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Supplier.GetHashCode();
                if (this.ModelName != null)
                {
                    hashCode = (hashCode * 59) + this.ModelName.GetHashCode();
                }
                if (this.InstrumentType != null)
                {
                    hashCode = (hashCode * 59) + this.InstrumentType.GetHashCode();
                }
                if (this.Parameters != null)
                {
                    hashCode = (hashCode * 59) + this.Parameters.GetHashCode();
                }
                if (this.ModelOptions != null)
                {
                    hashCode = (hashCode * 59) + this.ModelOptions.GetHashCode();
                }
                if (this.InstrumentId != null)
                {
                    hashCode = (hashCode * 59) + this.InstrumentId.GetHashCode();
                }
                if (this.AddressKeyFilters != null)
                {
                    hashCode = (hashCode * 59) + this.AddressKeyFilters.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // ModelName (string) maxLength
            if (this.ModelName != null && this.ModelName.Length > 128)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ModelName, length must be less than 128.", new [] { "ModelName" });
            }

            // ModelName (string) minLength
            if (this.ModelName != null && this.ModelName.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ModelName, length must be greater than 0.", new [] { "ModelName" });
            }

            // InstrumentType (string) maxLength
            if (this.InstrumentType != null && this.InstrumentType.Length > 32)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for InstrumentType, length must be less than 32.", new [] { "InstrumentType" });
            }

            // InstrumentType (string) minLength
            if (this.InstrumentType != null && this.InstrumentType.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for InstrumentType, length must be greater than 0.", new [] { "InstrumentType" });
            }

            // Parameters (string) maxLength
            if (this.Parameters != null && this.Parameters.Length > 64)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Parameters, length must be less than 64.", new [] { "Parameters" });
            }

            // Parameters (string) minLength
            if (this.Parameters != null && this.Parameters.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Parameters, length must be greater than 0.", new [] { "Parameters" });
            }

            yield break;
        }
    }
}
