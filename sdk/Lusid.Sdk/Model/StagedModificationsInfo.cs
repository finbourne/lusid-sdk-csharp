/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Lusid.Sdk.Client.OpenAPIDateConverter;

namespace Lusid.Sdk.Model
{
    /// <summary>
    /// The staged modifications metadata.
    /// </summary>
    [DataContract(Name = "StagedModificationsInfo")]
    public partial class StagedModificationsInfo : IEquatable<StagedModificationsInfo>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="StagedModificationsInfo" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected StagedModificationsInfo() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="StagedModificationsInfo" /> class.
        /// </summary>
        /// <param name="countPending">The number of staged modifications for the entity with a status of Pending for the requested asAt. (required).</param>
        /// <param name="hrefPending">Link to the list staged modifications endpoint, filtered by entityType, entityUniqueId and status (&#x3D; Pending). (required).</param>
        /// <param name="idsPreviewed">An array of the ids of any StagedModifications being previewed..</param>
        public StagedModificationsInfo(int countPending = default(int), string hrefPending = default(string), List<string> idsPreviewed = default(List<string>))
        {
            this.CountPending = countPending;
            // to ensure "hrefPending" is required (not null)
            if (hrefPending == null)
            {
                throw new ArgumentNullException("hrefPending is a required property for StagedModificationsInfo and cannot be null");
            }
            this.HrefPending = hrefPending;
            this.IdsPreviewed = idsPreviewed;
        }

        /// <summary>
        /// The number of staged modifications for the entity with a status of Pending for the requested asAt.
        /// </summary>
        /// <value>The number of staged modifications for the entity with a status of Pending for the requested asAt.</value>
        [DataMember(Name = "countPending", IsRequired = true, EmitDefaultValue = true)]
        public int CountPending { get; set; }

        /// <summary>
        /// Link to the list staged modifications endpoint, filtered by entityType, entityUniqueId and status (&#x3D; Pending).
        /// </summary>
        /// <value>Link to the list staged modifications endpoint, filtered by entityType, entityUniqueId and status (&#x3D; Pending).</value>
        [DataMember(Name = "hrefPending", IsRequired = true, EmitDefaultValue = true)]
        public string HrefPending { get; set; }

        /// <summary>
        /// An array of the ids of any StagedModifications being previewed.
        /// </summary>
        /// <value>An array of the ids of any StagedModifications being previewed.</value>
        [DataMember(Name = "idsPreviewed", EmitDefaultValue = true)]
        public List<string> IdsPreviewed { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class StagedModificationsInfo {\n");
            sb.Append("  CountPending: ").Append(CountPending).Append("\n");
            sb.Append("  HrefPending: ").Append(HrefPending).Append("\n");
            sb.Append("  IdsPreviewed: ").Append(IdsPreviewed).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as StagedModificationsInfo);
        }

        /// <summary>
        /// Returns true if StagedModificationsInfo instances are equal
        /// </summary>
        /// <param name="input">Instance of StagedModificationsInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(StagedModificationsInfo input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.CountPending == input.CountPending ||
                    this.CountPending.Equals(input.CountPending)
                ) && 
                (
                    this.HrefPending == input.HrefPending ||
                    (this.HrefPending != null &&
                    this.HrefPending.Equals(input.HrefPending))
                ) && 
                (
                    this.IdsPreviewed == input.IdsPreviewed ||
                    this.IdsPreviewed != null &&
                    input.IdsPreviewed != null &&
                    this.IdsPreviewed.SequenceEqual(input.IdsPreviewed)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.CountPending.GetHashCode();
                if (this.HrefPending != null)
                {
                    hashCode = (hashCode * 59) + this.HrefPending.GetHashCode();
                }
                if (this.IdsPreviewed != null)
                {
                    hashCode = (hashCode * 59) + this.IdsPreviewed.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
