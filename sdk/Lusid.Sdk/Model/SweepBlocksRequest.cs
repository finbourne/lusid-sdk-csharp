/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Lusid.Sdk.Client.OpenAPIDateConverter;

namespace Lusid.Sdk.Model
{
    /// <summary>
    /// A request to sweep specified blocks.
    /// </summary>
    [DataContract(Name = "SweepBlocksRequest")]
    public partial class SweepBlocksRequest : IEquatable<SweepBlocksRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SweepBlocksRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected SweepBlocksRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="SweepBlocksRequest" /> class.
        /// </summary>
        /// <param name="blockIds">A dictionary mapping ephemeral identifiers, which live as long as the request, to specific blocks to sweep. (required).</param>
        /// <param name="latestAllowableModificationTime">Timestamp or cut label which the  block or related entities must not have been updated after. (required).</param>
        public SweepBlocksRequest(Dictionary<string, ResourceId> blockIds = default(Dictionary<string, ResourceId>), string latestAllowableModificationTime = default(string))
        {
            // to ensure "blockIds" is required (not null)
            if (blockIds == null)
            {
                throw new ArgumentNullException("blockIds is a required property for SweepBlocksRequest and cannot be null");
            }
            this.BlockIds = blockIds;
            // to ensure "latestAllowableModificationTime" is required (not null)
            if (latestAllowableModificationTime == null)
            {
                throw new ArgumentNullException("latestAllowableModificationTime is a required property for SweepBlocksRequest and cannot be null");
            }
            this.LatestAllowableModificationTime = latestAllowableModificationTime;
        }

        /// <summary>
        /// A dictionary mapping ephemeral identifiers, which live as long as the request, to specific blocks to sweep.
        /// </summary>
        /// <value>A dictionary mapping ephemeral identifiers, which live as long as the request, to specific blocks to sweep.</value>
        [DataMember(Name = "blockIds", IsRequired = true, EmitDefaultValue = true)]
        public Dictionary<string, ResourceId> BlockIds { get; set; }

        /// <summary>
        /// Timestamp or cut label which the  block or related entities must not have been updated after.
        /// </summary>
        /// <value>Timestamp or cut label which the  block or related entities must not have been updated after.</value>
        [DataMember(Name = "latestAllowableModificationTime", IsRequired = true, EmitDefaultValue = true)]
        public string LatestAllowableModificationTime { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SweepBlocksRequest {\n");
            sb.Append("  BlockIds: ").Append(BlockIds).Append("\n");
            sb.Append("  LatestAllowableModificationTime: ").Append(LatestAllowableModificationTime).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SweepBlocksRequest);
        }

        /// <summary>
        /// Returns true if SweepBlocksRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of SweepBlocksRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SweepBlocksRequest input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.BlockIds == input.BlockIds ||
                    this.BlockIds != null &&
                    input.BlockIds != null &&
                    this.BlockIds.SequenceEqual(input.BlockIds)
                ) && 
                (
                    this.LatestAllowableModificationTime == input.LatestAllowableModificationTime ||
                    (this.LatestAllowableModificationTime != null &&
                    this.LatestAllowableModificationTime.Equals(input.LatestAllowableModificationTime))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.BlockIds != null)
                {
                    hashCode = (hashCode * 59) + this.BlockIds.GetHashCode();
                }
                if (this.LatestAllowableModificationTime != null)
                {
                    hashCode = (hashCode * 59) + this.LatestAllowableModificationTime.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // LatestAllowableModificationTime (string) minLength
            if (this.LatestAllowableModificationTime != null && this.LatestAllowableModificationTime.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for LatestAllowableModificationTime, length must be greater than 1.", new [] { "LatestAllowableModificationTime" });
            }

            yield break;
        }
    }
}
