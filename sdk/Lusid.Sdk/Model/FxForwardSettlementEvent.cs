/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using JsonSubTypes;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Lusid.Sdk.Client.OpenAPIDateConverter;

namespace Lusid.Sdk.Model
{
    /// <summary>
    /// Settlement for FX Forward, including NDF and deliverable.
    /// </summary>
    [DataContract(Name = "FxForwardSettlementEvent")]
    [JsonConverter(typeof(JsonSubtypes), "InstrumentEventType")]
    public partial class FxForwardSettlementEvent : InstrumentEvent, IEquatable<FxForwardSettlementEvent>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FxForwardSettlementEvent" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected FxForwardSettlementEvent() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="FxForwardSettlementEvent" /> class.
        /// </summary>
        /// <param name="maturityDate">Maturity date of the forward (required).</param>
        /// <param name="domAmountPerUnit">Amount per unit in the DomCcy (domestic currency) (required).</param>
        /// <param name="domCcy">The domestic currency of the forward (required).</param>
        /// <param name="fgnAmountPerUnit">Amount per unit in the FgnCcy (foreign currency) (required).</param>
        /// <param name="fgnCcy">The foreign currency of the forward. (required).</param>
        /// <param name="isNdf">Is this settlement corresponding to a deliverable forward, or an NDF (required).</param>
        /// <param name="fixingDate">Optional.  Required if the event is an NDF (i.e. if IsNdf &#x3D; true).  Date of the FxRate fixings..</param>
        /// <param name="settlementCcy">Optional.  Required if the event is an NDF (i.e. if IsNdf &#x3D; true).  May be set to either DomCcy or FgnCcy, or a third currency..</param>
        /// <param name="cashFlowPerUnit">Optional.  Required if the event is an NDF (i.e. if IsNdf &#x3D; true).  CashFlow per unit.  Paid in the SettlementCcy..</param>
        /// <param name="domesticToForeignRate">Domestic currency to foreign currency FX rate.  Not required, only used to override quotes..</param>
        /// <param name="domesticToSettlementRate">Domestic currency to settlement currency FX rate  Not required, only used to override quotes..</param>
        /// <param name="instrumentEventType">The Type of Event. The available values are: TransitionEvent, InformationalEvent, OpenEvent, CloseEvent, StockSplitEvent, BondDefaultEvent, CashDividendEvent, AmortisationEvent, CashFlowEvent, ExerciseEvent, ResetEvent, TriggerEvent, RawVendorEvent, InformationalErrorEvent, BondCouponEvent, DividendReinvestmentEvent, AccumulationEvent, BondPrincipalEvent, DividendOptionEvent, MaturityEvent, FxForwardSettlementEvent, ExpiryEvent, ScripDividendEvent, StockDividendEvent, ReverseStockSplitEvent, CapitalDistributionEvent, SpinOffEvent, MergerEvent, FutureExpiryEvent, SwapCashFlowEvent, SwapPrincipalEvent, CreditPremiumCashFlowEvent, CdsCreditEvent, CdxCreditEvent, MbsCouponEvent, MbsPrincipalEvent, BonusIssueEvent, MbsPrincipalWriteOffEvent, MbsInterestDeferralEvent, MbsInterestShortfallEvent, TenderEvent, CallOnIntermediateSecuritiesEvent, IntermediateSecuritiesDistributionEvent, OptionExercisePhysicalEvent, ProtectionPayoutCashFlowEvent (required) (default to &quot;FxForwardSettlementEvent&quot;).</param>
        public FxForwardSettlementEvent(DateTimeOffset maturityDate = default(DateTimeOffset), decimal domAmountPerUnit = default(decimal), string domCcy = default(string), decimal fgnAmountPerUnit = default(decimal), string fgnCcy = default(string), bool isNdf = default(bool), DateTimeOffset? fixingDate = default(DateTimeOffset?), string settlementCcy = default(string), decimal? cashFlowPerUnit = default(decimal?), decimal? domesticToForeignRate = default(decimal?), decimal? domesticToSettlementRate = default(decimal?), InstrumentEventTypeEnum instrumentEventType = default(InstrumentEventTypeEnum)) : base(instrumentEventType)
        {
            this.MaturityDate = maturityDate;
            this.DomAmountPerUnit = domAmountPerUnit;
            // to ensure "domCcy" is required (not null)
            if (domCcy == null)
            {
                throw new ArgumentNullException("domCcy is a required property for FxForwardSettlementEvent and cannot be null");
            }
            this.DomCcy = domCcy;
            this.FgnAmountPerUnit = fgnAmountPerUnit;
            // to ensure "fgnCcy" is required (not null)
            if (fgnCcy == null)
            {
                throw new ArgumentNullException("fgnCcy is a required property for FxForwardSettlementEvent and cannot be null");
            }
            this.FgnCcy = fgnCcy;
            this.IsNdf = isNdf;
            this.FixingDate = fixingDate;
            this.SettlementCcy = settlementCcy;
            this.CashFlowPerUnit = cashFlowPerUnit;
            this.DomesticToForeignRate = domesticToForeignRate;
            this.DomesticToSettlementRate = domesticToSettlementRate;
        }

        /// <summary>
        /// Maturity date of the forward
        /// </summary>
        /// <value>Maturity date of the forward</value>
        [DataMember(Name = "maturityDate", IsRequired = true, EmitDefaultValue = true)]
        public DateTimeOffset MaturityDate { get; set; }

        /// <summary>
        /// Amount per unit in the DomCcy (domestic currency)
        /// </summary>
        /// <value>Amount per unit in the DomCcy (domestic currency)</value>
        [DataMember(Name = "domAmountPerUnit", IsRequired = true, EmitDefaultValue = true)]
        public decimal DomAmountPerUnit { get; set; }

        /// <summary>
        /// The domestic currency of the forward
        /// </summary>
        /// <value>The domestic currency of the forward</value>
        [DataMember(Name = "domCcy", IsRequired = true, EmitDefaultValue = true)]
        public string DomCcy { get; set; }

        /// <summary>
        /// Amount per unit in the FgnCcy (foreign currency)
        /// </summary>
        /// <value>Amount per unit in the FgnCcy (foreign currency)</value>
        [DataMember(Name = "fgnAmountPerUnit", IsRequired = true, EmitDefaultValue = true)]
        public decimal FgnAmountPerUnit { get; set; }

        /// <summary>
        /// The foreign currency of the forward.
        /// </summary>
        /// <value>The foreign currency of the forward.</value>
        [DataMember(Name = "fgnCcy", IsRequired = true, EmitDefaultValue = true)]
        public string FgnCcy { get; set; }

        /// <summary>
        /// Is this settlement corresponding to a deliverable forward, or an NDF
        /// </summary>
        /// <value>Is this settlement corresponding to a deliverable forward, or an NDF</value>
        [DataMember(Name = "isNdf", IsRequired = true, EmitDefaultValue = true)]
        public bool IsNdf { get; set; }

        /// <summary>
        /// Optional.  Required if the event is an NDF (i.e. if IsNdf &#x3D; true).  Date of the FxRate fixings.
        /// </summary>
        /// <value>Optional.  Required if the event is an NDF (i.e. if IsNdf &#x3D; true).  Date of the FxRate fixings.</value>
        [DataMember(Name = "fixingDate", EmitDefaultValue = true)]
        public DateTimeOffset? FixingDate { get; set; }

        /// <summary>
        /// Optional.  Required if the event is an NDF (i.e. if IsNdf &#x3D; true).  May be set to either DomCcy or FgnCcy, or a third currency.
        /// </summary>
        /// <value>Optional.  Required if the event is an NDF (i.e. if IsNdf &#x3D; true).  May be set to either DomCcy or FgnCcy, or a third currency.</value>
        [DataMember(Name = "settlementCcy", EmitDefaultValue = true)]
        public string SettlementCcy { get; set; }

        /// <summary>
        /// Optional.  Required if the event is an NDF (i.e. if IsNdf &#x3D; true).  CashFlow per unit.  Paid in the SettlementCcy.
        /// </summary>
        /// <value>Optional.  Required if the event is an NDF (i.e. if IsNdf &#x3D; true).  CashFlow per unit.  Paid in the SettlementCcy.</value>
        [DataMember(Name = "cashFlowPerUnit", EmitDefaultValue = true)]
        public decimal? CashFlowPerUnit { get; set; }

        /// <summary>
        /// Domestic currency to foreign currency FX rate.  Not required, only used to override quotes.
        /// </summary>
        /// <value>Domestic currency to foreign currency FX rate.  Not required, only used to override quotes.</value>
        [DataMember(Name = "domesticToForeignRate", EmitDefaultValue = true)]
        public decimal? DomesticToForeignRate { get; set; }

        /// <summary>
        /// Domestic currency to settlement currency FX rate  Not required, only used to override quotes.
        /// </summary>
        /// <value>Domestic currency to settlement currency FX rate  Not required, only used to override quotes.</value>
        [DataMember(Name = "domesticToSettlementRate", EmitDefaultValue = true)]
        public decimal? DomesticToSettlementRate { get; set; }

        /// <summary>
        /// Foreign currency to settlement currency FX rate  Not required, only used to override quotes.
        /// </summary>
        /// <value>Foreign currency to settlement currency FX rate  Not required, only used to override quotes.</value>
        [DataMember(Name = "foreignToSettlementRate", EmitDefaultValue = true)]
        public decimal? ForeignToSettlementRate { get; private set; }

        /// <summary>
        /// Returns false as ForeignToSettlementRate should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeForeignToSettlementRate()
        {
            return false;
        }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class FxForwardSettlementEvent {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  MaturityDate: ").Append(MaturityDate).Append("\n");
            sb.Append("  DomAmountPerUnit: ").Append(DomAmountPerUnit).Append("\n");
            sb.Append("  DomCcy: ").Append(DomCcy).Append("\n");
            sb.Append("  FgnAmountPerUnit: ").Append(FgnAmountPerUnit).Append("\n");
            sb.Append("  FgnCcy: ").Append(FgnCcy).Append("\n");
            sb.Append("  IsNdf: ").Append(IsNdf).Append("\n");
            sb.Append("  FixingDate: ").Append(FixingDate).Append("\n");
            sb.Append("  SettlementCcy: ").Append(SettlementCcy).Append("\n");
            sb.Append("  CashFlowPerUnit: ").Append(CashFlowPerUnit).Append("\n");
            sb.Append("  DomesticToForeignRate: ").Append(DomesticToForeignRate).Append("\n");
            sb.Append("  DomesticToSettlementRate: ").Append(DomesticToSettlementRate).Append("\n");
            sb.Append("  ForeignToSettlementRate: ").Append(ForeignToSettlementRate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as FxForwardSettlementEvent);
        }

        /// <summary>
        /// Returns true if FxForwardSettlementEvent instances are equal
        /// </summary>
        /// <param name="input">Instance of FxForwardSettlementEvent to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FxForwardSettlementEvent input)
        {
            if (input == null)
            {
                return false;
            }
            return base.Equals(input) && 
                (
                    this.MaturityDate == input.MaturityDate ||
                    (this.MaturityDate != null &&
                    this.MaturityDate.Equals(input.MaturityDate))
                ) && base.Equals(input) && 
                (
                    this.DomAmountPerUnit == input.DomAmountPerUnit ||
                    this.DomAmountPerUnit.Equals(input.DomAmountPerUnit)
                ) && base.Equals(input) && 
                (
                    this.DomCcy == input.DomCcy ||
                    (this.DomCcy != null &&
                    this.DomCcy.Equals(input.DomCcy))
                ) && base.Equals(input) && 
                (
                    this.FgnAmountPerUnit == input.FgnAmountPerUnit ||
                    this.FgnAmountPerUnit.Equals(input.FgnAmountPerUnit)
                ) && base.Equals(input) && 
                (
                    this.FgnCcy == input.FgnCcy ||
                    (this.FgnCcy != null &&
                    this.FgnCcy.Equals(input.FgnCcy))
                ) && base.Equals(input) && 
                (
                    this.IsNdf == input.IsNdf ||
                    this.IsNdf.Equals(input.IsNdf)
                ) && base.Equals(input) && 
                (
                    this.FixingDate == input.FixingDate ||
                    (this.FixingDate != null &&
                    this.FixingDate.Equals(input.FixingDate))
                ) && base.Equals(input) && 
                (
                    this.SettlementCcy == input.SettlementCcy ||
                    (this.SettlementCcy != null &&
                    this.SettlementCcy.Equals(input.SettlementCcy))
                ) && base.Equals(input) && 
                (
                    this.CashFlowPerUnit == input.CashFlowPerUnit ||
                    (this.CashFlowPerUnit != null &&
                    this.CashFlowPerUnit.Equals(input.CashFlowPerUnit))
                ) && base.Equals(input) && 
                (
                    this.DomesticToForeignRate == input.DomesticToForeignRate ||
                    (this.DomesticToForeignRate != null &&
                    this.DomesticToForeignRate.Equals(input.DomesticToForeignRate))
                ) && base.Equals(input) && 
                (
                    this.DomesticToSettlementRate == input.DomesticToSettlementRate ||
                    (this.DomesticToSettlementRate != null &&
                    this.DomesticToSettlementRate.Equals(input.DomesticToSettlementRate))
                ) && base.Equals(input) && 
                (
                    this.ForeignToSettlementRate == input.ForeignToSettlementRate ||
                    (this.ForeignToSettlementRate != null &&
                    this.ForeignToSettlementRate.Equals(input.ForeignToSettlementRate))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = base.GetHashCode();
                if (this.MaturityDate != null)
                {
                    hashCode = (hashCode * 59) + this.MaturityDate.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.DomAmountPerUnit.GetHashCode();
                if (this.DomCcy != null)
                {
                    hashCode = (hashCode * 59) + this.DomCcy.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.FgnAmountPerUnit.GetHashCode();
                if (this.FgnCcy != null)
                {
                    hashCode = (hashCode * 59) + this.FgnCcy.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.IsNdf.GetHashCode();
                if (this.FixingDate != null)
                {
                    hashCode = (hashCode * 59) + this.FixingDate.GetHashCode();
                }
                if (this.SettlementCcy != null)
                {
                    hashCode = (hashCode * 59) + this.SettlementCcy.GetHashCode();
                }
                if (this.CashFlowPerUnit != null)
                {
                    hashCode = (hashCode * 59) + this.CashFlowPerUnit.GetHashCode();
                }
                if (this.DomesticToForeignRate != null)
                {
                    hashCode = (hashCode * 59) + this.DomesticToForeignRate.GetHashCode();
                }
                if (this.DomesticToSettlementRate != null)
                {
                    hashCode = (hashCode * 59) + this.DomesticToSettlementRate.GetHashCode();
                }
                if (this.ForeignToSettlementRate != null)
                {
                    hashCode = (hashCode * 59) + this.ForeignToSettlementRate.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            return this.BaseValidate(validationContext);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        protected IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> BaseValidate(ValidationContext validationContext)
        {
            foreach (var x in base.BaseValidate(validationContext))
            {
                yield return x;
            }
            yield break;
        }
    }
}
