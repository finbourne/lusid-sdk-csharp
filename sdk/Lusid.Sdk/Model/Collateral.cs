/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Lusid.Sdk.Client.OpenAPIDateConverter;

namespace Lusid.Sdk.Model
{
    /// <summary>
    /// Representation of the collateral of a repurchase agreement, along with related details of the agreement.
    /// </summary>
    [DataContract(Name = "Collateral")]
    public partial class Collateral : IEquatable<Collateral>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Collateral" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Collateral() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Collateral" /> class.
        /// </summary>
        /// <param name="buyerReceivesCashflows">Does the buyer of the FlexibleRepo receive the cashflows from any collateral instruments, or do they get paid to the seller. (required).</param>
        /// <param name="buyerReceivesCorporateActionPayments">Does the buyer of the FlexibleRepo receive any dividend or cash payments as the result of a corporate action on any of the collateral instruments, or are these amounts paid to the seller. Referred to as \&quot;manufactured payments\&quot; in the UK, and valid only under a repo with GMRA in Europe (required).</param>
        /// <param name="collateralInstruments">List of any collateral instruments..</param>
        /// <param name="collateralValue">Total value of the collateral before any margin or haircut applied. Can be provided instead of PurchasePrice, so that PurchasePrice can be inferred from the CollateralValue and one of Haircut or Margin..</param>
        public Collateral(bool buyerReceivesCashflows = default(bool), bool buyerReceivesCorporateActionPayments = default(bool), List<CollateralInstrument> collateralInstruments = default(List<CollateralInstrument>), decimal? collateralValue = default(decimal?))
        {
            this.BuyerReceivesCashflows = buyerReceivesCashflows;
            this.BuyerReceivesCorporateActionPayments = buyerReceivesCorporateActionPayments;
            this.CollateralInstruments = collateralInstruments;
            this.CollateralValue = collateralValue;
        }

        /// <summary>
        /// Does the buyer of the FlexibleRepo receive the cashflows from any collateral instruments, or do they get paid to the seller.
        /// </summary>
        /// <value>Does the buyer of the FlexibleRepo receive the cashflows from any collateral instruments, or do they get paid to the seller.</value>
        [DataMember(Name = "buyerReceivesCashflows", IsRequired = true, EmitDefaultValue = true)]
        public bool BuyerReceivesCashflows { get; set; }

        /// <summary>
        /// Does the buyer of the FlexibleRepo receive any dividend or cash payments as the result of a corporate action on any of the collateral instruments, or are these amounts paid to the seller. Referred to as \&quot;manufactured payments\&quot; in the UK, and valid only under a repo with GMRA in Europe
        /// </summary>
        /// <value>Does the buyer of the FlexibleRepo receive any dividend or cash payments as the result of a corporate action on any of the collateral instruments, or are these amounts paid to the seller. Referred to as \&quot;manufactured payments\&quot; in the UK, and valid only under a repo with GMRA in Europe</value>
        [DataMember(Name = "buyerReceivesCorporateActionPayments", IsRequired = true, EmitDefaultValue = true)]
        public bool BuyerReceivesCorporateActionPayments { get; set; }

        /// <summary>
        /// List of any collateral instruments.
        /// </summary>
        /// <value>List of any collateral instruments.</value>
        [DataMember(Name = "collateralInstruments", EmitDefaultValue = true)]
        public List<CollateralInstrument> CollateralInstruments { get; set; }

        /// <summary>
        /// Total value of the collateral before any margin or haircut applied. Can be provided instead of PurchasePrice, so that PurchasePrice can be inferred from the CollateralValue and one of Haircut or Margin.
        /// </summary>
        /// <value>Total value of the collateral before any margin or haircut applied. Can be provided instead of PurchasePrice, so that PurchasePrice can be inferred from the CollateralValue and one of Haircut or Margin.</value>
        [DataMember(Name = "collateralValue", EmitDefaultValue = true)]
        public decimal? CollateralValue { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Collateral {\n");
            sb.Append("  BuyerReceivesCashflows: ").Append(BuyerReceivesCashflows).Append("\n");
            sb.Append("  BuyerReceivesCorporateActionPayments: ").Append(BuyerReceivesCorporateActionPayments).Append("\n");
            sb.Append("  CollateralInstruments: ").Append(CollateralInstruments).Append("\n");
            sb.Append("  CollateralValue: ").Append(CollateralValue).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Collateral);
        }

        /// <summary>
        /// Returns true if Collateral instances are equal
        /// </summary>
        /// <param name="input">Instance of Collateral to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Collateral input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.BuyerReceivesCashflows == input.BuyerReceivesCashflows ||
                    this.BuyerReceivesCashflows.Equals(input.BuyerReceivesCashflows)
                ) && 
                (
                    this.BuyerReceivesCorporateActionPayments == input.BuyerReceivesCorporateActionPayments ||
                    this.BuyerReceivesCorporateActionPayments.Equals(input.BuyerReceivesCorporateActionPayments)
                ) && 
                (
                    this.CollateralInstruments == input.CollateralInstruments ||
                    this.CollateralInstruments != null &&
                    input.CollateralInstruments != null &&
                    this.CollateralInstruments.SequenceEqual(input.CollateralInstruments)
                ) && 
                (
                    this.CollateralValue == input.CollateralValue ||
                    (this.CollateralValue != null &&
                    this.CollateralValue.Equals(input.CollateralValue))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.BuyerReceivesCashflows.GetHashCode();
                hashCode = (hashCode * 59) + this.BuyerReceivesCorporateActionPayments.GetHashCode();
                if (this.CollateralInstruments != null)
                {
                    hashCode = (hashCode * 59) + this.CollateralInstruments.GetHashCode();
                }
                if (this.CollateralValue != null)
                {
                    hashCode = (hashCode * 59) + this.CollateralValue.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
