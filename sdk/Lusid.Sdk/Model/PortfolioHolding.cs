/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Lusid.Sdk.Client.OpenAPIDateConverter;

namespace Lusid.Sdk.Model
{
    /// <summary>
    /// A list of holdings.
    /// </summary>
    [DataContract(Name = "PortfolioHolding")]
    public partial class PortfolioHolding : IEquatable<PortfolioHolding>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PortfolioHolding" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected PortfolioHolding() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="PortfolioHolding" /> class.
        /// </summary>
        /// <param name="instrumentScope">The scope in which the holding&#39;s instrument is in..</param>
        /// <param name="instrumentUid">The unique Lusid Instrument Id (LUID) of the instrument that the holding is in. (required).</param>
        /// <param name="subHoldingKeys">The sub-holding properties which identify the holding. Each property will be from the &#39;Transaction&#39; domain. These are configured on a transaction portfolio..</param>
        /// <param name="properties">The properties which have been requested to be decorated onto the holding. These will be from the &#39;Instrument&#39; or &#39;Holding&#39; domain..</param>
        /// <param name="holdingType">The code for the type of the holding e.g. P, B, C, R, F etc. (required).</param>
        /// <param name="units">The total number of units of the holding. (required).</param>
        /// <param name="settledUnits">The total number of settled units of the holding. (required).</param>
        /// <param name="cost">cost (required).</param>
        /// <param name="costPortfolioCcy">costPortfolioCcy (required).</param>
        /// <param name="transaction">transaction.</param>
        /// <param name="currency">The holding currency..</param>
        /// <param name="holdingTypeName">The decoded type of the holding e.g. Position, Balance, CashCommitment, Receivable, ForwardFX etc..</param>
        /// <param name="holdingId">A single identifier for the holding within the portfolio. The holdingId is constructed from the LusidInstrumentId, sub-holding keys and currrency and is unique within the portfolio..</param>
        /// <param name="notionalCost">notionalCost.</param>
        /// <param name="amortisedCost">amortisedCost.</param>
        /// <param name="amortisedCostPortfolioCcy">amortisedCostPortfolioCcy.</param>
        /// <param name="variationMargin">variationMargin.</param>
        /// <param name="variationMarginPortfolioCcy">variationMarginPortfolioCcy.</param>
        /// <param name="settlementSchedule">Where no. of days ahead has been specified, future dated settlements will be captured here..</param>
        public PortfolioHolding(string instrumentScope = default(string), string instrumentUid = default(string), Dictionary<string, PerpetualProperty> subHoldingKeys = default(Dictionary<string, PerpetualProperty>), Dictionary<string, Property> properties = default(Dictionary<string, Property>), string holdingType = default(string), decimal units = default(decimal), decimal settledUnits = default(decimal), CurrencyAndAmount cost = default(CurrencyAndAmount), CurrencyAndAmount costPortfolioCcy = default(CurrencyAndAmount), Transaction transaction = default(Transaction), string currency = default(string), string holdingTypeName = default(string), long? holdingId = default(long?), CurrencyAndAmount notionalCost = default(CurrencyAndAmount), CurrencyAndAmount amortisedCost = default(CurrencyAndAmount), CurrencyAndAmount amortisedCostPortfolioCcy = default(CurrencyAndAmount), CurrencyAndAmount variationMargin = default(CurrencyAndAmount), CurrencyAndAmount variationMarginPortfolioCcy = default(CurrencyAndAmount), List<SettlementSchedule> settlementSchedule = default(List<SettlementSchedule>))
        {
            // to ensure "instrumentUid" is required (not null)
            if (instrumentUid == null)
            {
                throw new ArgumentNullException("instrumentUid is a required property for PortfolioHolding and cannot be null");
            }
            this.InstrumentUid = instrumentUid;
            // to ensure "holdingType" is required (not null)
            if (holdingType == null)
            {
                throw new ArgumentNullException("holdingType is a required property for PortfolioHolding and cannot be null");
            }
            this.HoldingType = holdingType;
            this.Units = units;
            this.SettledUnits = settledUnits;
            // to ensure "cost" is required (not null)
            if (cost == null)
            {
                throw new ArgumentNullException("cost is a required property for PortfolioHolding and cannot be null");
            }
            this.Cost = cost;
            // to ensure "costPortfolioCcy" is required (not null)
            if (costPortfolioCcy == null)
            {
                throw new ArgumentNullException("costPortfolioCcy is a required property for PortfolioHolding and cannot be null");
            }
            this.CostPortfolioCcy = costPortfolioCcy;
            this.InstrumentScope = instrumentScope;
            this.SubHoldingKeys = subHoldingKeys;
            this.Properties = properties;
            this.Transaction = transaction;
            this.Currency = currency;
            this.HoldingTypeName = holdingTypeName;
            this.HoldingId = holdingId;
            this.NotionalCost = notionalCost;
            this.AmortisedCost = amortisedCost;
            this.AmortisedCostPortfolioCcy = amortisedCostPortfolioCcy;
            this.VariationMargin = variationMargin;
            this.VariationMarginPortfolioCcy = variationMarginPortfolioCcy;
            this.SettlementSchedule = settlementSchedule;
        }

        /// <summary>
        /// The scope in which the holding&#39;s instrument is in.
        /// </summary>
        /// <value>The scope in which the holding&#39;s instrument is in.</value>
        [DataMember(Name = "instrumentScope", EmitDefaultValue = true)]
        public string InstrumentScope { get; set; }

        /// <summary>
        /// The unique Lusid Instrument Id (LUID) of the instrument that the holding is in.
        /// </summary>
        /// <value>The unique Lusid Instrument Id (LUID) of the instrument that the holding is in.</value>
        [DataMember(Name = "instrumentUid", IsRequired = true, EmitDefaultValue = true)]
        public string InstrumentUid { get; set; }

        /// <summary>
        /// The sub-holding properties which identify the holding. Each property will be from the &#39;Transaction&#39; domain. These are configured on a transaction portfolio.
        /// </summary>
        /// <value>The sub-holding properties which identify the holding. Each property will be from the &#39;Transaction&#39; domain. These are configured on a transaction portfolio.</value>
        [DataMember(Name = "subHoldingKeys", EmitDefaultValue = true)]
        public Dictionary<string, PerpetualProperty> SubHoldingKeys { get; set; }

        /// <summary>
        /// The properties which have been requested to be decorated onto the holding. These will be from the &#39;Instrument&#39; or &#39;Holding&#39; domain.
        /// </summary>
        /// <value>The properties which have been requested to be decorated onto the holding. These will be from the &#39;Instrument&#39; or &#39;Holding&#39; domain.</value>
        [DataMember(Name = "properties", EmitDefaultValue = true)]
        public Dictionary<string, Property> Properties { get; set; }

        /// <summary>
        /// The code for the type of the holding e.g. P, B, C, R, F etc.
        /// </summary>
        /// <value>The code for the type of the holding e.g. P, B, C, R, F etc.</value>
        [DataMember(Name = "holdingType", IsRequired = true, EmitDefaultValue = true)]
        public string HoldingType { get; set; }

        /// <summary>
        /// The total number of units of the holding.
        /// </summary>
        /// <value>The total number of units of the holding.</value>
        [DataMember(Name = "units", IsRequired = true, EmitDefaultValue = true)]
        public decimal Units { get; set; }

        /// <summary>
        /// The total number of settled units of the holding.
        /// </summary>
        /// <value>The total number of settled units of the holding.</value>
        [DataMember(Name = "settledUnits", IsRequired = true, EmitDefaultValue = true)]
        public decimal SettledUnits { get; set; }

        /// <summary>
        /// Gets or Sets Cost
        /// </summary>
        [DataMember(Name = "cost", IsRequired = true, EmitDefaultValue = true)]
        public CurrencyAndAmount Cost { get; set; }

        /// <summary>
        /// Gets or Sets CostPortfolioCcy
        /// </summary>
        [DataMember(Name = "costPortfolioCcy", IsRequired = true, EmitDefaultValue = true)]
        public CurrencyAndAmount CostPortfolioCcy { get; set; }

        /// <summary>
        /// Gets or Sets Transaction
        /// </summary>
        [DataMember(Name = "transaction", EmitDefaultValue = false)]
        public Transaction Transaction { get; set; }

        /// <summary>
        /// The holding currency.
        /// </summary>
        /// <value>The holding currency.</value>
        [DataMember(Name = "currency", EmitDefaultValue = true)]
        public string Currency { get; set; }

        /// <summary>
        /// The decoded type of the holding e.g. Position, Balance, CashCommitment, Receivable, ForwardFX etc.
        /// </summary>
        /// <value>The decoded type of the holding e.g. Position, Balance, CashCommitment, Receivable, ForwardFX etc.</value>
        [DataMember(Name = "holdingTypeName", EmitDefaultValue = true)]
        public string HoldingTypeName { get; set; }

        /// <summary>
        /// A single identifier for the holding within the portfolio. The holdingId is constructed from the LusidInstrumentId, sub-holding keys and currrency and is unique within the portfolio.
        /// </summary>
        /// <value>A single identifier for the holding within the portfolio. The holdingId is constructed from the LusidInstrumentId, sub-holding keys and currrency and is unique within the portfolio.</value>
        [DataMember(Name = "holdingId", EmitDefaultValue = true)]
        public long? HoldingId { get; set; }

        /// <summary>
        /// Gets or Sets NotionalCost
        /// </summary>
        [DataMember(Name = "notionalCost", EmitDefaultValue = false)]
        public CurrencyAndAmount NotionalCost { get; set; }

        /// <summary>
        /// Gets or Sets AmortisedCost
        /// </summary>
        [DataMember(Name = "amortisedCost", EmitDefaultValue = false)]
        public CurrencyAndAmount AmortisedCost { get; set; }

        /// <summary>
        /// Gets or Sets AmortisedCostPortfolioCcy
        /// </summary>
        [DataMember(Name = "amortisedCostPortfolioCcy", EmitDefaultValue = false)]
        public CurrencyAndAmount AmortisedCostPortfolioCcy { get; set; }

        /// <summary>
        /// Gets or Sets VariationMargin
        /// </summary>
        [DataMember(Name = "variationMargin", EmitDefaultValue = false)]
        public CurrencyAndAmount VariationMargin { get; set; }

        /// <summary>
        /// Gets or Sets VariationMarginPortfolioCcy
        /// </summary>
        [DataMember(Name = "variationMarginPortfolioCcy", EmitDefaultValue = false)]
        public CurrencyAndAmount VariationMarginPortfolioCcy { get; set; }

        /// <summary>
        /// Where no. of days ahead has been specified, future dated settlements will be captured here.
        /// </summary>
        /// <value>Where no. of days ahead has been specified, future dated settlements will be captured here.</value>
        [DataMember(Name = "settlementSchedule", EmitDefaultValue = true)]
        public List<SettlementSchedule> SettlementSchedule { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PortfolioHolding {\n");
            sb.Append("  InstrumentScope: ").Append(InstrumentScope).Append("\n");
            sb.Append("  InstrumentUid: ").Append(InstrumentUid).Append("\n");
            sb.Append("  SubHoldingKeys: ").Append(SubHoldingKeys).Append("\n");
            sb.Append("  Properties: ").Append(Properties).Append("\n");
            sb.Append("  HoldingType: ").Append(HoldingType).Append("\n");
            sb.Append("  Units: ").Append(Units).Append("\n");
            sb.Append("  SettledUnits: ").Append(SettledUnits).Append("\n");
            sb.Append("  Cost: ").Append(Cost).Append("\n");
            sb.Append("  CostPortfolioCcy: ").Append(CostPortfolioCcy).Append("\n");
            sb.Append("  Transaction: ").Append(Transaction).Append("\n");
            sb.Append("  Currency: ").Append(Currency).Append("\n");
            sb.Append("  HoldingTypeName: ").Append(HoldingTypeName).Append("\n");
            sb.Append("  HoldingId: ").Append(HoldingId).Append("\n");
            sb.Append("  NotionalCost: ").Append(NotionalCost).Append("\n");
            sb.Append("  AmortisedCost: ").Append(AmortisedCost).Append("\n");
            sb.Append("  AmortisedCostPortfolioCcy: ").Append(AmortisedCostPortfolioCcy).Append("\n");
            sb.Append("  VariationMargin: ").Append(VariationMargin).Append("\n");
            sb.Append("  VariationMarginPortfolioCcy: ").Append(VariationMarginPortfolioCcy).Append("\n");
            sb.Append("  SettlementSchedule: ").Append(SettlementSchedule).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PortfolioHolding);
        }

        /// <summary>
        /// Returns true if PortfolioHolding instances are equal
        /// </summary>
        /// <param name="input">Instance of PortfolioHolding to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PortfolioHolding input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.InstrumentScope == input.InstrumentScope ||
                    (this.InstrumentScope != null &&
                    this.InstrumentScope.Equals(input.InstrumentScope))
                ) && 
                (
                    this.InstrumentUid == input.InstrumentUid ||
                    (this.InstrumentUid != null &&
                    this.InstrumentUid.Equals(input.InstrumentUid))
                ) && 
                (
                    this.SubHoldingKeys == input.SubHoldingKeys ||
                    this.SubHoldingKeys != null &&
                    input.SubHoldingKeys != null &&
                    this.SubHoldingKeys.SequenceEqual(input.SubHoldingKeys)
                ) && 
                (
                    this.Properties == input.Properties ||
                    this.Properties != null &&
                    input.Properties != null &&
                    this.Properties.SequenceEqual(input.Properties)
                ) && 
                (
                    this.HoldingType == input.HoldingType ||
                    (this.HoldingType != null &&
                    this.HoldingType.Equals(input.HoldingType))
                ) && 
                (
                    this.Units == input.Units ||
                    this.Units.Equals(input.Units)
                ) && 
                (
                    this.SettledUnits == input.SettledUnits ||
                    this.SettledUnits.Equals(input.SettledUnits)
                ) && 
                (
                    this.Cost == input.Cost ||
                    (this.Cost != null &&
                    this.Cost.Equals(input.Cost))
                ) && 
                (
                    this.CostPortfolioCcy == input.CostPortfolioCcy ||
                    (this.CostPortfolioCcy != null &&
                    this.CostPortfolioCcy.Equals(input.CostPortfolioCcy))
                ) && 
                (
                    this.Transaction == input.Transaction ||
                    (this.Transaction != null &&
                    this.Transaction.Equals(input.Transaction))
                ) && 
                (
                    this.Currency == input.Currency ||
                    (this.Currency != null &&
                    this.Currency.Equals(input.Currency))
                ) && 
                (
                    this.HoldingTypeName == input.HoldingTypeName ||
                    (this.HoldingTypeName != null &&
                    this.HoldingTypeName.Equals(input.HoldingTypeName))
                ) && 
                (
                    this.HoldingId == input.HoldingId ||
                    (this.HoldingId != null &&
                    this.HoldingId.Equals(input.HoldingId))
                ) && 
                (
                    this.NotionalCost == input.NotionalCost ||
                    (this.NotionalCost != null &&
                    this.NotionalCost.Equals(input.NotionalCost))
                ) && 
                (
                    this.AmortisedCost == input.AmortisedCost ||
                    (this.AmortisedCost != null &&
                    this.AmortisedCost.Equals(input.AmortisedCost))
                ) && 
                (
                    this.AmortisedCostPortfolioCcy == input.AmortisedCostPortfolioCcy ||
                    (this.AmortisedCostPortfolioCcy != null &&
                    this.AmortisedCostPortfolioCcy.Equals(input.AmortisedCostPortfolioCcy))
                ) && 
                (
                    this.VariationMargin == input.VariationMargin ||
                    (this.VariationMargin != null &&
                    this.VariationMargin.Equals(input.VariationMargin))
                ) && 
                (
                    this.VariationMarginPortfolioCcy == input.VariationMarginPortfolioCcy ||
                    (this.VariationMarginPortfolioCcy != null &&
                    this.VariationMarginPortfolioCcy.Equals(input.VariationMarginPortfolioCcy))
                ) && 
                (
                    this.SettlementSchedule == input.SettlementSchedule ||
                    this.SettlementSchedule != null &&
                    input.SettlementSchedule != null &&
                    this.SettlementSchedule.SequenceEqual(input.SettlementSchedule)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.InstrumentScope != null)
                {
                    hashCode = (hashCode * 59) + this.InstrumentScope.GetHashCode();
                }
                if (this.InstrumentUid != null)
                {
                    hashCode = (hashCode * 59) + this.InstrumentUid.GetHashCode();
                }
                if (this.SubHoldingKeys != null)
                {
                    hashCode = (hashCode * 59) + this.SubHoldingKeys.GetHashCode();
                }
                if (this.Properties != null)
                {
                    hashCode = (hashCode * 59) + this.Properties.GetHashCode();
                }
                if (this.HoldingType != null)
                {
                    hashCode = (hashCode * 59) + this.HoldingType.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Units.GetHashCode();
                hashCode = (hashCode * 59) + this.SettledUnits.GetHashCode();
                if (this.Cost != null)
                {
                    hashCode = (hashCode * 59) + this.Cost.GetHashCode();
                }
                if (this.CostPortfolioCcy != null)
                {
                    hashCode = (hashCode * 59) + this.CostPortfolioCcy.GetHashCode();
                }
                if (this.Transaction != null)
                {
                    hashCode = (hashCode * 59) + this.Transaction.GetHashCode();
                }
                if (this.Currency != null)
                {
                    hashCode = (hashCode * 59) + this.Currency.GetHashCode();
                }
                if (this.HoldingTypeName != null)
                {
                    hashCode = (hashCode * 59) + this.HoldingTypeName.GetHashCode();
                }
                if (this.HoldingId != null)
                {
                    hashCode = (hashCode * 59) + this.HoldingId.GetHashCode();
                }
                if (this.NotionalCost != null)
                {
                    hashCode = (hashCode * 59) + this.NotionalCost.GetHashCode();
                }
                if (this.AmortisedCost != null)
                {
                    hashCode = (hashCode * 59) + this.AmortisedCost.GetHashCode();
                }
                if (this.AmortisedCostPortfolioCcy != null)
                {
                    hashCode = (hashCode * 59) + this.AmortisedCostPortfolioCcy.GetHashCode();
                }
                if (this.VariationMargin != null)
                {
                    hashCode = (hashCode * 59) + this.VariationMargin.GetHashCode();
                }
                if (this.VariationMarginPortfolioCcy != null)
                {
                    hashCode = (hashCode * 59) + this.VariationMarginPortfolioCcy.GetHashCode();
                }
                if (this.SettlementSchedule != null)
                {
                    hashCode = (hashCode * 59) + this.SettlementSchedule.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // InstrumentUid (string) minLength
            if (this.InstrumentUid != null && this.InstrumentUid.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for InstrumentUid, length must be greater than 1.", new [] { "InstrumentUid" });
            }

            // HoldingType (string) minLength
            if (this.HoldingType != null && this.HoldingType.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for HoldingType, length must be greater than 1.", new [] { "HoldingType" });
            }

            yield break;
        }
    }
}
