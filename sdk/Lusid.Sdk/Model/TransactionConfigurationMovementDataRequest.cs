/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Lusid.Sdk.Client.OpenAPIDateConverter;

namespace Lusid.Sdk.Model
{
    /// <summary>
    /// TransactionConfigurationMovementDataRequest
    /// </summary>
    [DataContract(Name = "TransactionConfigurationMovementDataRequest")]
    public partial class TransactionConfigurationMovementDataRequest : IEquatable<TransactionConfigurationMovementDataRequest>, IValidatableObject
    {
        /// <summary>
        /// . The available values are: Settlement, Traded, StockMovement, FutureCash, Commitment, Receivable, CashSettlement, CashForward, CashCommitment, CashReceivable, Accrual, CashAccrual, ForwardFx, CashFxForward, Carry, CarryAsPnl, VariationMargin, Capital, Fee, LimitAdjustment, BalanceAdjustment, Deferred, CashDeferred
        /// </summary>
        /// <value>. The available values are: Settlement, Traded, StockMovement, FutureCash, Commitment, Receivable, CashSettlement, CashForward, CashCommitment, CashReceivable, Accrual, CashAccrual, ForwardFx, CashFxForward, Carry, CarryAsPnl, VariationMargin, Capital, Fee, LimitAdjustment, BalanceAdjustment, Deferred, CashDeferred</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum MovementTypesEnum
        {
            /// <summary>
            /// Enum Settlement for value: Settlement
            /// </summary>
            [EnumMember(Value = "Settlement")]
            Settlement = 1,

            /// <summary>
            /// Enum Traded for value: Traded
            /// </summary>
            [EnumMember(Value = "Traded")]
            Traded = 2,

            /// <summary>
            /// Enum StockMovement for value: StockMovement
            /// </summary>
            [EnumMember(Value = "StockMovement")]
            StockMovement = 3,

            /// <summary>
            /// Enum FutureCash for value: FutureCash
            /// </summary>
            [EnumMember(Value = "FutureCash")]
            FutureCash = 4,

            /// <summary>
            /// Enum Commitment for value: Commitment
            /// </summary>
            [EnumMember(Value = "Commitment")]
            Commitment = 5,

            /// <summary>
            /// Enum Receivable for value: Receivable
            /// </summary>
            [EnumMember(Value = "Receivable")]
            Receivable = 6,

            /// <summary>
            /// Enum CashSettlement for value: CashSettlement
            /// </summary>
            [EnumMember(Value = "CashSettlement")]
            CashSettlement = 7,

            /// <summary>
            /// Enum CashForward for value: CashForward
            /// </summary>
            [EnumMember(Value = "CashForward")]
            CashForward = 8,

            /// <summary>
            /// Enum CashCommitment for value: CashCommitment
            /// </summary>
            [EnumMember(Value = "CashCommitment")]
            CashCommitment = 9,

            /// <summary>
            /// Enum CashReceivable for value: CashReceivable
            /// </summary>
            [EnumMember(Value = "CashReceivable")]
            CashReceivable = 10,

            /// <summary>
            /// Enum Accrual for value: Accrual
            /// </summary>
            [EnumMember(Value = "Accrual")]
            Accrual = 11,

            /// <summary>
            /// Enum CashAccrual for value: CashAccrual
            /// </summary>
            [EnumMember(Value = "CashAccrual")]
            CashAccrual = 12,

            /// <summary>
            /// Enum ForwardFx for value: ForwardFx
            /// </summary>
            [EnumMember(Value = "ForwardFx")]
            ForwardFx = 13,

            /// <summary>
            /// Enum CashFxForward for value: CashFxForward
            /// </summary>
            [EnumMember(Value = "CashFxForward")]
            CashFxForward = 14,

            /// <summary>
            /// Enum Carry for value: Carry
            /// </summary>
            [EnumMember(Value = "Carry")]
            Carry = 15,

            /// <summary>
            /// Enum CarryAsPnl for value: CarryAsPnl
            /// </summary>
            [EnumMember(Value = "CarryAsPnl")]
            CarryAsPnl = 16,

            /// <summary>
            /// Enum VariationMargin for value: VariationMargin
            /// </summary>
            [EnumMember(Value = "VariationMargin")]
            VariationMargin = 17,

            /// <summary>
            /// Enum Capital for value: Capital
            /// </summary>
            [EnumMember(Value = "Capital")]
            Capital = 18,

            /// <summary>
            /// Enum Fee for value: Fee
            /// </summary>
            [EnumMember(Value = "Fee")]
            Fee = 19,

            /// <summary>
            /// Enum LimitAdjustment for value: LimitAdjustment
            /// </summary>
            [EnumMember(Value = "LimitAdjustment")]
            LimitAdjustment = 20,

            /// <summary>
            /// Enum BalanceAdjustment for value: BalanceAdjustment
            /// </summary>
            [EnumMember(Value = "BalanceAdjustment")]
            BalanceAdjustment = 21,

            /// <summary>
            /// Enum Deferred for value: Deferred
            /// </summary>
            [EnumMember(Value = "Deferred")]
            Deferred = 22,

            /// <summary>
            /// Enum CashDeferred for value: CashDeferred
            /// </summary>
            [EnumMember(Value = "CashDeferred")]
            CashDeferred = 23
        }


        /// <summary>
        /// . The available values are: Settlement, Traded, StockMovement, FutureCash, Commitment, Receivable, CashSettlement, CashForward, CashCommitment, CashReceivable, Accrual, CashAccrual, ForwardFx, CashFxForward, Carry, CarryAsPnl, VariationMargin, Capital, Fee, LimitAdjustment, BalanceAdjustment, Deferred, CashDeferred
        /// </summary>
        /// <value>. The available values are: Settlement, Traded, StockMovement, FutureCash, Commitment, Receivable, CashSettlement, CashForward, CashCommitment, CashReceivable, Accrual, CashAccrual, ForwardFx, CashFxForward, Carry, CarryAsPnl, VariationMargin, Capital, Fee, LimitAdjustment, BalanceAdjustment, Deferred, CashDeferred</value>
        [DataMember(Name = "movementTypes", IsRequired = true, EmitDefaultValue = true)]
        public MovementTypesEnum MovementTypes { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="TransactionConfigurationMovementDataRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected TransactionConfigurationMovementDataRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="TransactionConfigurationMovementDataRequest" /> class.
        /// </summary>
        /// <param name="movementTypes">. The available values are: Settlement, Traded, StockMovement, FutureCash, Commitment, Receivable, CashSettlement, CashForward, CashCommitment, CashReceivable, Accrual, CashAccrual, ForwardFx, CashFxForward, Carry, CarryAsPnl, VariationMargin, Capital, Fee, LimitAdjustment, BalanceAdjustment, Deferred, CashDeferred (required).</param>
        /// <param name="side">The movement side (required).</param>
        /// <param name="direction">The movement direction (required).</param>
        /// <param name="properties">The properties associated with the underlying Movement..</param>
        /// <param name="mappings">This allows you to map a transaction property to a property on the underlying holding..</param>
        /// <param name="name">The movement name (optional).</param>
        /// <param name="movementOptions">Allows extra specifications for the movement. The options currently available are &#39;DirectAdjustment&#39;, &#39;IncludesTradedInterest&#39;, &#39;Virtual&#39; and &#39;Income&#39; (works only with the movement type &#39;StockMovement&#39;). A movement type of &#39;StockMovement&#39; with an option of &#39;DirectAdjusment&#39; will allow you to adjust the units of a holding without affecting its cost base. You will, therefore, be able to reflect the impact of a stock split by loading a Transaction..</param>
        public TransactionConfigurationMovementDataRequest(MovementTypesEnum movementTypes = default(MovementTypesEnum), string side = default(string), int direction = default(int), Dictionary<string, PerpetualProperty> properties = default(Dictionary<string, PerpetualProperty>), List<TransactionPropertyMappingRequest> mappings = default(List<TransactionPropertyMappingRequest>), string name = default(string), List<string> movementOptions = default(List<string>))
        {
            this.MovementTypes = movementTypes;
            // to ensure "side" is required (not null)
            if (side == null)
            {
                throw new ArgumentNullException("side is a required property for TransactionConfigurationMovementDataRequest and cannot be null");
            }
            this.Side = side;
            this.Direction = direction;
            this.Properties = properties;
            this.Mappings = mappings;
            this.Name = name;
            this.MovementOptions = movementOptions;
        }

        /// <summary>
        /// The movement side
        /// </summary>
        /// <value>The movement side</value>
        [DataMember(Name = "side", IsRequired = true, EmitDefaultValue = true)]
        public string Side { get; set; }

        /// <summary>
        /// The movement direction
        /// </summary>
        /// <value>The movement direction</value>
        [DataMember(Name = "direction", IsRequired = true, EmitDefaultValue = true)]
        public int Direction { get; set; }

        /// <summary>
        /// The properties associated with the underlying Movement.
        /// </summary>
        /// <value>The properties associated with the underlying Movement.</value>
        [DataMember(Name = "properties", EmitDefaultValue = true)]
        public Dictionary<string, PerpetualProperty> Properties { get; set; }

        /// <summary>
        /// This allows you to map a transaction property to a property on the underlying holding.
        /// </summary>
        /// <value>This allows you to map a transaction property to a property on the underlying holding.</value>
        [DataMember(Name = "mappings", EmitDefaultValue = true)]
        public List<TransactionPropertyMappingRequest> Mappings { get; set; }

        /// <summary>
        /// The movement name (optional)
        /// </summary>
        /// <value>The movement name (optional)</value>
        [DataMember(Name = "name", EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// Allows extra specifications for the movement. The options currently available are &#39;DirectAdjustment&#39;, &#39;IncludesTradedInterest&#39;, &#39;Virtual&#39; and &#39;Income&#39; (works only with the movement type &#39;StockMovement&#39;). A movement type of &#39;StockMovement&#39; with an option of &#39;DirectAdjusment&#39; will allow you to adjust the units of a holding without affecting its cost base. You will, therefore, be able to reflect the impact of a stock split by loading a Transaction.
        /// </summary>
        /// <value>Allows extra specifications for the movement. The options currently available are &#39;DirectAdjustment&#39;, &#39;IncludesTradedInterest&#39;, &#39;Virtual&#39; and &#39;Income&#39; (works only with the movement type &#39;StockMovement&#39;). A movement type of &#39;StockMovement&#39; with an option of &#39;DirectAdjusment&#39; will allow you to adjust the units of a holding without affecting its cost base. You will, therefore, be able to reflect the impact of a stock split by loading a Transaction.</value>
        [DataMember(Name = "movementOptions", EmitDefaultValue = true)]
        public List<string> MovementOptions { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class TransactionConfigurationMovementDataRequest {\n");
            sb.Append("  MovementTypes: ").Append(MovementTypes).Append("\n");
            sb.Append("  Side: ").Append(Side).Append("\n");
            sb.Append("  Direction: ").Append(Direction).Append("\n");
            sb.Append("  Properties: ").Append(Properties).Append("\n");
            sb.Append("  Mappings: ").Append(Mappings).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  MovementOptions: ").Append(MovementOptions).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TransactionConfigurationMovementDataRequest);
        }

        /// <summary>
        /// Returns true if TransactionConfigurationMovementDataRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of TransactionConfigurationMovementDataRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TransactionConfigurationMovementDataRequest input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.MovementTypes == input.MovementTypes ||
                    this.MovementTypes.Equals(input.MovementTypes)
                ) && 
                (
                    this.Side == input.Side ||
                    (this.Side != null &&
                    this.Side.Equals(input.Side))
                ) && 
                (
                    this.Direction == input.Direction ||
                    this.Direction.Equals(input.Direction)
                ) && 
                (
                    this.Properties == input.Properties ||
                    this.Properties != null &&
                    input.Properties != null &&
                    this.Properties.SequenceEqual(input.Properties)
                ) && 
                (
                    this.Mappings == input.Mappings ||
                    this.Mappings != null &&
                    input.Mappings != null &&
                    this.Mappings.SequenceEqual(input.Mappings)
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.MovementOptions == input.MovementOptions ||
                    this.MovementOptions != null &&
                    input.MovementOptions != null &&
                    this.MovementOptions.SequenceEqual(input.MovementOptions)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.MovementTypes.GetHashCode();
                if (this.Side != null)
                {
                    hashCode = (hashCode * 59) + this.Side.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Direction.GetHashCode();
                if (this.Properties != null)
                {
                    hashCode = (hashCode * 59) + this.Properties.GetHashCode();
                }
                if (this.Mappings != null)
                {
                    hashCode = (hashCode * 59) + this.Mappings.GetHashCode();
                }
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.MovementOptions != null)
                {
                    hashCode = (hashCode * 59) + this.MovementOptions.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Side (string) minLength
            if (this.Side != null && this.Side.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Side, length must be greater than 1.", new [] { "Side" });
            }

            yield break;
        }
    }
}
