/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Lusid.Sdk.Client.OpenAPIDateConverter;

namespace Lusid.Sdk.Model
{
    /// <summary>
    /// Touch class for exotic FxOption
    /// </summary>
    [DataContract(Name = "Touch")]
    public partial class Touch : IEquatable<Touch>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Touch" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Touch() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Touch" /> class.
        /// </summary>
        /// <param name="direction">Supported string (enumeration) values are: [Down, Up]. (required).</param>
        /// <param name="level">Trigger level, which the underlying should (or should not) cross/touch. (required).</param>
        /// <param name="monitoring">Supported string (enumeration) values are: [European, Bermudan, American].  Defaults to \&quot;European\&quot; if not set..</param>
        /// <param name="type">Supported string (enumeration) values are: [Touch, Notouch]. (required).</param>
        public Touch(string direction = default(string), decimal level = default(decimal), string monitoring = default(string), string type = default(string))
        {
            // to ensure "direction" is required (not null)
            if (direction == null)
            {
                throw new ArgumentNullException("direction is a required property for Touch and cannot be null");
            }
            this.Direction = direction;
            this.Level = level;
            // to ensure "type" is required (not null)
            if (type == null)
            {
                throw new ArgumentNullException("type is a required property for Touch and cannot be null");
            }
            this.Type = type;
            this.Monitoring = monitoring;
        }

        /// <summary>
        /// Supported string (enumeration) values are: [Down, Up].
        /// </summary>
        /// <value>Supported string (enumeration) values are: [Down, Up].</value>
        [DataMember(Name = "direction", IsRequired = true, EmitDefaultValue = true)]
        public string Direction { get; set; }

        /// <summary>
        /// Trigger level, which the underlying should (or should not) cross/touch.
        /// </summary>
        /// <value>Trigger level, which the underlying should (or should not) cross/touch.</value>
        [DataMember(Name = "level", IsRequired = true, EmitDefaultValue = true)]
        public decimal Level { get; set; }

        /// <summary>
        /// Supported string (enumeration) values are: [European, Bermudan, American].  Defaults to \&quot;European\&quot; if not set.
        /// </summary>
        /// <value>Supported string (enumeration) values are: [European, Bermudan, American].  Defaults to \&quot;European\&quot; if not set.</value>
        [DataMember(Name = "monitoring", EmitDefaultValue = true)]
        public string Monitoring { get; set; }

        /// <summary>
        /// Supported string (enumeration) values are: [Touch, Notouch].
        /// </summary>
        /// <value>Supported string (enumeration) values are: [Touch, Notouch].</value>
        [DataMember(Name = "type", IsRequired = true, EmitDefaultValue = true)]
        public string Type { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Touch {\n");
            sb.Append("  Direction: ").Append(Direction).Append("\n");
            sb.Append("  Level: ").Append(Level).Append("\n");
            sb.Append("  Monitoring: ").Append(Monitoring).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Touch);
        }

        /// <summary>
        /// Returns true if Touch instances are equal
        /// </summary>
        /// <param name="input">Instance of Touch to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Touch input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Direction == input.Direction ||
                    (this.Direction != null &&
                    this.Direction.Equals(input.Direction))
                ) && 
                (
                    this.Level == input.Level ||
                    this.Level.Equals(input.Level)
                ) && 
                (
                    this.Monitoring == input.Monitoring ||
                    (this.Monitoring != null &&
                    this.Monitoring.Equals(input.Monitoring))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Direction != null)
                {
                    hashCode = (hashCode * 59) + this.Direction.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Level.GetHashCode();
                if (this.Monitoring != null)
                {
                    hashCode = (hashCode * 59) + this.Monitoring.GetHashCode();
                }
                if (this.Type != null)
                {
                    hashCode = (hashCode * 59) + this.Type.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Direction (string) minLength
            if (this.Direction != null && this.Direction.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Direction, length must be greater than 1.", new [] { "Direction" });
            }

            // Type (string) minLength
            if (this.Type != null && this.Type.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Type, length must be greater than 1.", new [] { "Type" });
            }

            yield break;
        }
    }
}
