/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Lusid.Sdk.Client.OpenAPIDateConverter;

namespace Lusid.Sdk.Model
{
    /// <summary>
    /// BlockAndOrderRequest
    /// </summary>
    [DataContract(Name = "BlockAndOrderRequest")]
    public partial class BlockAndOrderRequest : IEquatable<BlockAndOrderRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="BlockAndOrderRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected BlockAndOrderRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="BlockAndOrderRequest" /> class.
        /// </summary>
        /// <param name="blockId">blockId (required).</param>
        /// <param name="orderId">orderId (required).</param>
        /// <param name="orderProperties">Client-defined properties associated with this order..</param>
        /// <param name="blockProperties">Client-defined properties associated with this block..</param>
        /// <param name="instrumentIdentifiers">The instrument ordered. (required).</param>
        /// <param name="quantity">The quantity of given instrument ordered. (required).</param>
        /// <param name="side">The client&#39;s representation of the order&#39;s side (buy, sell, short, etc) (required).</param>
        /// <param name="orderBookId">orderBookId.</param>
        /// <param name="portfolioId">portfolioId.</param>
        /// <param name="state">The order&#39;s state (examples: New, PartiallyFilled, ...).</param>
        /// <param name="type">The order&#39;s type (examples: Limit, Market, ...).</param>
        /// <param name="timeInForce">The order&#39;s time in force (examples: Day, GoodTilCancel, ...).</param>
        /// <param name="date">The date on which the order was made.</param>
        /// <param name="price">price.</param>
        /// <param name="limitPrice">limitPrice.</param>
        /// <param name="stopPrice">stopPrice.</param>
        /// <param name="orderInstruction">orderInstruction.</param>
        /// <param name="package">package.</param>
        public BlockAndOrderRequest(ResourceId blockId = default(ResourceId), ResourceId orderId = default(ResourceId), Dictionary<string, PerpetualProperty> orderProperties = default(Dictionary<string, PerpetualProperty>), Dictionary<string, PerpetualProperty> blockProperties = default(Dictionary<string, PerpetualProperty>), Dictionary<string, string> instrumentIdentifiers = default(Dictionary<string, string>), decimal quantity = default(decimal), string side = default(string), ResourceId orderBookId = default(ResourceId), ResourceId portfolioId = default(ResourceId), string state = default(string), string type = default(string), string timeInForce = default(string), DateTimeOffset date = default(DateTimeOffset), CurrencyAndAmount price = default(CurrencyAndAmount), CurrencyAndAmount limitPrice = default(CurrencyAndAmount), CurrencyAndAmount stopPrice = default(CurrencyAndAmount), ResourceId orderInstruction = default(ResourceId), ResourceId package = default(ResourceId))
        {
            // to ensure "blockId" is required (not null)
            if (blockId == null)
            {
                throw new ArgumentNullException("blockId is a required property for BlockAndOrderRequest and cannot be null");
            }
            this.BlockId = blockId;
            // to ensure "orderId" is required (not null)
            if (orderId == null)
            {
                throw new ArgumentNullException("orderId is a required property for BlockAndOrderRequest and cannot be null");
            }
            this.OrderId = orderId;
            // to ensure "instrumentIdentifiers" is required (not null)
            if (instrumentIdentifiers == null)
            {
                throw new ArgumentNullException("instrumentIdentifiers is a required property for BlockAndOrderRequest and cannot be null");
            }
            this.InstrumentIdentifiers = instrumentIdentifiers;
            this.Quantity = quantity;
            // to ensure "side" is required (not null)
            if (side == null)
            {
                throw new ArgumentNullException("side is a required property for BlockAndOrderRequest and cannot be null");
            }
            this.Side = side;
            this.OrderProperties = orderProperties;
            this.BlockProperties = blockProperties;
            this.OrderBookId = orderBookId;
            this.PortfolioId = portfolioId;
            this.State = state;
            this.Type = type;
            this.TimeInForce = timeInForce;
            this.Date = date;
            this.Price = price;
            this.LimitPrice = limitPrice;
            this.StopPrice = stopPrice;
            this.OrderInstruction = orderInstruction;
            this.Package = package;
        }

        /// <summary>
        /// Gets or Sets BlockId
        /// </summary>
        [DataMember(Name = "blockId", IsRequired = true, EmitDefaultValue = true)]
        public ResourceId BlockId { get; set; }

        /// <summary>
        /// Gets or Sets OrderId
        /// </summary>
        [DataMember(Name = "orderId", IsRequired = true, EmitDefaultValue = true)]
        public ResourceId OrderId { get; set; }

        /// <summary>
        /// Client-defined properties associated with this order.
        /// </summary>
        /// <value>Client-defined properties associated with this order.</value>
        [DataMember(Name = "orderProperties", EmitDefaultValue = true)]
        public Dictionary<string, PerpetualProperty> OrderProperties { get; set; }

        /// <summary>
        /// Client-defined properties associated with this block.
        /// </summary>
        /// <value>Client-defined properties associated with this block.</value>
        [DataMember(Name = "blockProperties", EmitDefaultValue = true)]
        public Dictionary<string, PerpetualProperty> BlockProperties { get; set; }

        /// <summary>
        /// The instrument ordered.
        /// </summary>
        /// <value>The instrument ordered.</value>
        [DataMember(Name = "instrumentIdentifiers", IsRequired = true, EmitDefaultValue = true)]
        public Dictionary<string, string> InstrumentIdentifiers { get; set; }

        /// <summary>
        /// The quantity of given instrument ordered.
        /// </summary>
        /// <value>The quantity of given instrument ordered.</value>
        [DataMember(Name = "quantity", IsRequired = true, EmitDefaultValue = true)]
        public decimal Quantity { get; set; }

        /// <summary>
        /// The client&#39;s representation of the order&#39;s side (buy, sell, short, etc)
        /// </summary>
        /// <value>The client&#39;s representation of the order&#39;s side (buy, sell, short, etc)</value>
        [DataMember(Name = "side", IsRequired = true, EmitDefaultValue = true)]
        public string Side { get; set; }

        /// <summary>
        /// Gets or Sets OrderBookId
        /// </summary>
        [DataMember(Name = "orderBookId", EmitDefaultValue = false)]
        public ResourceId OrderBookId { get; set; }

        /// <summary>
        /// Gets or Sets PortfolioId
        /// </summary>
        [DataMember(Name = "portfolioId", EmitDefaultValue = false)]
        public ResourceId PortfolioId { get; set; }

        /// <summary>
        /// The order&#39;s state (examples: New, PartiallyFilled, ...)
        /// </summary>
        /// <value>The order&#39;s state (examples: New, PartiallyFilled, ...)</value>
        [DataMember(Name = "state", EmitDefaultValue = true)]
        public string State { get; set; }

        /// <summary>
        /// The order&#39;s type (examples: Limit, Market, ...)
        /// </summary>
        /// <value>The order&#39;s type (examples: Limit, Market, ...)</value>
        [DataMember(Name = "type", EmitDefaultValue = true)]
        public string Type { get; set; }

        /// <summary>
        /// The order&#39;s time in force (examples: Day, GoodTilCancel, ...)
        /// </summary>
        /// <value>The order&#39;s time in force (examples: Day, GoodTilCancel, ...)</value>
        [DataMember(Name = "timeInForce", EmitDefaultValue = true)]
        public string TimeInForce { get; set; }

        /// <summary>
        /// The date on which the order was made
        /// </summary>
        /// <value>The date on which the order was made</value>
        [DataMember(Name = "date", EmitDefaultValue = false)]
        public DateTimeOffset Date { get; set; }

        /// <summary>
        /// Gets or Sets Price
        /// </summary>
        [DataMember(Name = "price", EmitDefaultValue = false)]
        public CurrencyAndAmount Price { get; set; }

        /// <summary>
        /// Gets or Sets LimitPrice
        /// </summary>
        [DataMember(Name = "limitPrice", EmitDefaultValue = false)]
        public CurrencyAndAmount LimitPrice { get; set; }

        /// <summary>
        /// Gets or Sets StopPrice
        /// </summary>
        [DataMember(Name = "stopPrice", EmitDefaultValue = false)]
        public CurrencyAndAmount StopPrice { get; set; }

        /// <summary>
        /// Gets or Sets OrderInstruction
        /// </summary>
        [DataMember(Name = "orderInstruction", EmitDefaultValue = false)]
        public ResourceId OrderInstruction { get; set; }

        /// <summary>
        /// Gets or Sets Package
        /// </summary>
        [DataMember(Name = "package", EmitDefaultValue = false)]
        public ResourceId Package { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class BlockAndOrderRequest {\n");
            sb.Append("  BlockId: ").Append(BlockId).Append("\n");
            sb.Append("  OrderId: ").Append(OrderId).Append("\n");
            sb.Append("  OrderProperties: ").Append(OrderProperties).Append("\n");
            sb.Append("  BlockProperties: ").Append(BlockProperties).Append("\n");
            sb.Append("  InstrumentIdentifiers: ").Append(InstrumentIdentifiers).Append("\n");
            sb.Append("  Quantity: ").Append(Quantity).Append("\n");
            sb.Append("  Side: ").Append(Side).Append("\n");
            sb.Append("  OrderBookId: ").Append(OrderBookId).Append("\n");
            sb.Append("  PortfolioId: ").Append(PortfolioId).Append("\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  TimeInForce: ").Append(TimeInForce).Append("\n");
            sb.Append("  Date: ").Append(Date).Append("\n");
            sb.Append("  Price: ").Append(Price).Append("\n");
            sb.Append("  LimitPrice: ").Append(LimitPrice).Append("\n");
            sb.Append("  StopPrice: ").Append(StopPrice).Append("\n");
            sb.Append("  OrderInstruction: ").Append(OrderInstruction).Append("\n");
            sb.Append("  Package: ").Append(Package).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as BlockAndOrderRequest);
        }

        /// <summary>
        /// Returns true if BlockAndOrderRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of BlockAndOrderRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BlockAndOrderRequest input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.BlockId == input.BlockId ||
                    (this.BlockId != null &&
                    this.BlockId.Equals(input.BlockId))
                ) && 
                (
                    this.OrderId == input.OrderId ||
                    (this.OrderId != null &&
                    this.OrderId.Equals(input.OrderId))
                ) && 
                (
                    this.OrderProperties == input.OrderProperties ||
                    this.OrderProperties != null &&
                    input.OrderProperties != null &&
                    this.OrderProperties.SequenceEqual(input.OrderProperties)
                ) && 
                (
                    this.BlockProperties == input.BlockProperties ||
                    this.BlockProperties != null &&
                    input.BlockProperties != null &&
                    this.BlockProperties.SequenceEqual(input.BlockProperties)
                ) && 
                (
                    this.InstrumentIdentifiers == input.InstrumentIdentifiers ||
                    this.InstrumentIdentifiers != null &&
                    input.InstrumentIdentifiers != null &&
                    this.InstrumentIdentifiers.SequenceEqual(input.InstrumentIdentifiers)
                ) && 
                (
                    this.Quantity == input.Quantity ||
                    this.Quantity.Equals(input.Quantity)
                ) && 
                (
                    this.Side == input.Side ||
                    (this.Side != null &&
                    this.Side.Equals(input.Side))
                ) && 
                (
                    this.OrderBookId == input.OrderBookId ||
                    (this.OrderBookId != null &&
                    this.OrderBookId.Equals(input.OrderBookId))
                ) && 
                (
                    this.PortfolioId == input.PortfolioId ||
                    (this.PortfolioId != null &&
                    this.PortfolioId.Equals(input.PortfolioId))
                ) && 
                (
                    this.State == input.State ||
                    (this.State != null &&
                    this.State.Equals(input.State))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.TimeInForce == input.TimeInForce ||
                    (this.TimeInForce != null &&
                    this.TimeInForce.Equals(input.TimeInForce))
                ) && 
                (
                    this.Date == input.Date ||
                    (this.Date != null &&
                    this.Date.Equals(input.Date))
                ) && 
                (
                    this.Price == input.Price ||
                    (this.Price != null &&
                    this.Price.Equals(input.Price))
                ) && 
                (
                    this.LimitPrice == input.LimitPrice ||
                    (this.LimitPrice != null &&
                    this.LimitPrice.Equals(input.LimitPrice))
                ) && 
                (
                    this.StopPrice == input.StopPrice ||
                    (this.StopPrice != null &&
                    this.StopPrice.Equals(input.StopPrice))
                ) && 
                (
                    this.OrderInstruction == input.OrderInstruction ||
                    (this.OrderInstruction != null &&
                    this.OrderInstruction.Equals(input.OrderInstruction))
                ) && 
                (
                    this.Package == input.Package ||
                    (this.Package != null &&
                    this.Package.Equals(input.Package))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.BlockId != null)
                {
                    hashCode = (hashCode * 59) + this.BlockId.GetHashCode();
                }
                if (this.OrderId != null)
                {
                    hashCode = (hashCode * 59) + this.OrderId.GetHashCode();
                }
                if (this.OrderProperties != null)
                {
                    hashCode = (hashCode * 59) + this.OrderProperties.GetHashCode();
                }
                if (this.BlockProperties != null)
                {
                    hashCode = (hashCode * 59) + this.BlockProperties.GetHashCode();
                }
                if (this.InstrumentIdentifiers != null)
                {
                    hashCode = (hashCode * 59) + this.InstrumentIdentifiers.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Quantity.GetHashCode();
                if (this.Side != null)
                {
                    hashCode = (hashCode * 59) + this.Side.GetHashCode();
                }
                if (this.OrderBookId != null)
                {
                    hashCode = (hashCode * 59) + this.OrderBookId.GetHashCode();
                }
                if (this.PortfolioId != null)
                {
                    hashCode = (hashCode * 59) + this.PortfolioId.GetHashCode();
                }
                if (this.State != null)
                {
                    hashCode = (hashCode * 59) + this.State.GetHashCode();
                }
                if (this.Type != null)
                {
                    hashCode = (hashCode * 59) + this.Type.GetHashCode();
                }
                if (this.TimeInForce != null)
                {
                    hashCode = (hashCode * 59) + this.TimeInForce.GetHashCode();
                }
                if (this.Date != null)
                {
                    hashCode = (hashCode * 59) + this.Date.GetHashCode();
                }
                if (this.Price != null)
                {
                    hashCode = (hashCode * 59) + this.Price.GetHashCode();
                }
                if (this.LimitPrice != null)
                {
                    hashCode = (hashCode * 59) + this.LimitPrice.GetHashCode();
                }
                if (this.StopPrice != null)
                {
                    hashCode = (hashCode * 59) + this.StopPrice.GetHashCode();
                }
                if (this.OrderInstruction != null)
                {
                    hashCode = (hashCode * 59) + this.OrderInstruction.GetHashCode();
                }
                if (this.Package != null)
                {
                    hashCode = (hashCode * 59) + this.Package.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Side (string) minLength
            if (this.Side != null && this.Side.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Side, length must be greater than 1.", new [] { "Side" });
            }

            yield break;
        }
    }
}
