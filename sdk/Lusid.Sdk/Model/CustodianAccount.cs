/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Lusid.Sdk.Client.OpenAPIDateConverter;

namespace Lusid.Sdk.Model
{
    /// <summary>
    /// CustodianAccount
    /// </summary>
    [DataContract(Name = "CustodianAccount")]
    public partial class CustodianAccount : IEquatable<CustodianAccount>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CustodianAccount" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CustodianAccount() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CustodianAccount" /> class.
        /// </summary>
        /// <param name="custodianAccountId">custodianAccountId (required).</param>
        /// <param name="status">The Account status. Can be Active, Inactive or Deleted. (required).</param>
        /// <param name="accountNumber">The Custodian Account Number (required).</param>
        /// <param name="accountName">The identifiable name given to the Custodian Account (required).</param>
        /// <param name="accountingMethod">The Accounting method to be used (required).</param>
        /// <param name="currency">The Currency for the Account (required).</param>
        /// <param name="properties">Set of unique Custodian Account properties and associated values to store with the Custodian Account. Each property must be from the &#39;CustodianAccount&#39; domain..</param>
        /// <param name="custodian">custodian (required).</param>
        /// <param name="accountType">The Type of the Custodian Account. Can be Margin, Cash or Swap. Defaults to Margin. (required).</param>
        public CustodianAccount(ResourceId custodianAccountId = default(ResourceId), string status = default(string), string accountNumber = default(string), string accountName = default(string), string accountingMethod = default(string), string currency = default(string), Dictionary<string, Property> properties = default(Dictionary<string, Property>), LegalEntity custodian = default(LegalEntity), string accountType = default(string))
        {
            // to ensure "custodianAccountId" is required (not null)
            if (custodianAccountId == null)
            {
                throw new ArgumentNullException("custodianAccountId is a required property for CustodianAccount and cannot be null");
            }
            this.CustodianAccountId = custodianAccountId;
            // to ensure "status" is required (not null)
            if (status == null)
            {
                throw new ArgumentNullException("status is a required property for CustodianAccount and cannot be null");
            }
            this.Status = status;
            // to ensure "accountNumber" is required (not null)
            if (accountNumber == null)
            {
                throw new ArgumentNullException("accountNumber is a required property for CustodianAccount and cannot be null");
            }
            this.AccountNumber = accountNumber;
            // to ensure "accountName" is required (not null)
            if (accountName == null)
            {
                throw new ArgumentNullException("accountName is a required property for CustodianAccount and cannot be null");
            }
            this.AccountName = accountName;
            // to ensure "accountingMethod" is required (not null)
            if (accountingMethod == null)
            {
                throw new ArgumentNullException("accountingMethod is a required property for CustodianAccount and cannot be null");
            }
            this.AccountingMethod = accountingMethod;
            // to ensure "currency" is required (not null)
            if (currency == null)
            {
                throw new ArgumentNullException("currency is a required property for CustodianAccount and cannot be null");
            }
            this.Currency = currency;
            // to ensure "custodian" is required (not null)
            if (custodian == null)
            {
                throw new ArgumentNullException("custodian is a required property for CustodianAccount and cannot be null");
            }
            this.Custodian = custodian;
            // to ensure "accountType" is required (not null)
            if (accountType == null)
            {
                throw new ArgumentNullException("accountType is a required property for CustodianAccount and cannot be null");
            }
            this.AccountType = accountType;
            this.Properties = properties;
        }

        /// <summary>
        /// Gets or Sets CustodianAccountId
        /// </summary>
        [DataMember(Name = "custodianAccountId", IsRequired = true, EmitDefaultValue = true)]
        public ResourceId CustodianAccountId { get; set; }

        /// <summary>
        /// The Account status. Can be Active, Inactive or Deleted.
        /// </summary>
        /// <value>The Account status. Can be Active, Inactive or Deleted.</value>
        [DataMember(Name = "status", IsRequired = true, EmitDefaultValue = true)]
        public string Status { get; set; }

        /// <summary>
        /// The Custodian Account Number
        /// </summary>
        /// <value>The Custodian Account Number</value>
        [DataMember(Name = "accountNumber", IsRequired = true, EmitDefaultValue = true)]
        public string AccountNumber { get; set; }

        /// <summary>
        /// The identifiable name given to the Custodian Account
        /// </summary>
        /// <value>The identifiable name given to the Custodian Account</value>
        [DataMember(Name = "accountName", IsRequired = true, EmitDefaultValue = true)]
        public string AccountName { get; set; }

        /// <summary>
        /// The Accounting method to be used
        /// </summary>
        /// <value>The Accounting method to be used</value>
        [DataMember(Name = "accountingMethod", IsRequired = true, EmitDefaultValue = true)]
        public string AccountingMethod { get; set; }

        /// <summary>
        /// The Currency for the Account
        /// </summary>
        /// <value>The Currency for the Account</value>
        [DataMember(Name = "currency", IsRequired = true, EmitDefaultValue = true)]
        public string Currency { get; set; }

        /// <summary>
        /// Set of unique Custodian Account properties and associated values to store with the Custodian Account. Each property must be from the &#39;CustodianAccount&#39; domain.
        /// </summary>
        /// <value>Set of unique Custodian Account properties and associated values to store with the Custodian Account. Each property must be from the &#39;CustodianAccount&#39; domain.</value>
        [DataMember(Name = "properties", EmitDefaultValue = true)]
        public Dictionary<string, Property> Properties { get; set; }

        /// <summary>
        /// Gets or Sets Custodian
        /// </summary>
        [DataMember(Name = "custodian", IsRequired = true, EmitDefaultValue = true)]
        public LegalEntity Custodian { get; set; }

        /// <summary>
        /// The Type of the Custodian Account. Can be Margin, Cash or Swap. Defaults to Margin.
        /// </summary>
        /// <value>The Type of the Custodian Account. Can be Margin, Cash or Swap. Defaults to Margin.</value>
        [DataMember(Name = "accountType", IsRequired = true, EmitDefaultValue = true)]
        public string AccountType { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CustodianAccount {\n");
            sb.Append("  CustodianAccountId: ").Append(CustodianAccountId).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  AccountNumber: ").Append(AccountNumber).Append("\n");
            sb.Append("  AccountName: ").Append(AccountName).Append("\n");
            sb.Append("  AccountingMethod: ").Append(AccountingMethod).Append("\n");
            sb.Append("  Currency: ").Append(Currency).Append("\n");
            sb.Append("  Properties: ").Append(Properties).Append("\n");
            sb.Append("  Custodian: ").Append(Custodian).Append("\n");
            sb.Append("  AccountType: ").Append(AccountType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CustodianAccount);
        }

        /// <summary>
        /// Returns true if CustodianAccount instances are equal
        /// </summary>
        /// <param name="input">Instance of CustodianAccount to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CustodianAccount input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.CustodianAccountId == input.CustodianAccountId ||
                    (this.CustodianAccountId != null &&
                    this.CustodianAccountId.Equals(input.CustodianAccountId))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.AccountNumber == input.AccountNumber ||
                    (this.AccountNumber != null &&
                    this.AccountNumber.Equals(input.AccountNumber))
                ) && 
                (
                    this.AccountName == input.AccountName ||
                    (this.AccountName != null &&
                    this.AccountName.Equals(input.AccountName))
                ) && 
                (
                    this.AccountingMethod == input.AccountingMethod ||
                    (this.AccountingMethod != null &&
                    this.AccountingMethod.Equals(input.AccountingMethod))
                ) && 
                (
                    this.Currency == input.Currency ||
                    (this.Currency != null &&
                    this.Currency.Equals(input.Currency))
                ) && 
                (
                    this.Properties == input.Properties ||
                    this.Properties != null &&
                    input.Properties != null &&
                    this.Properties.SequenceEqual(input.Properties)
                ) && 
                (
                    this.Custodian == input.Custodian ||
                    (this.Custodian != null &&
                    this.Custodian.Equals(input.Custodian))
                ) && 
                (
                    this.AccountType == input.AccountType ||
                    (this.AccountType != null &&
                    this.AccountType.Equals(input.AccountType))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CustodianAccountId != null)
                {
                    hashCode = (hashCode * 59) + this.CustodianAccountId.GetHashCode();
                }
                if (this.Status != null)
                {
                    hashCode = (hashCode * 59) + this.Status.GetHashCode();
                }
                if (this.AccountNumber != null)
                {
                    hashCode = (hashCode * 59) + this.AccountNumber.GetHashCode();
                }
                if (this.AccountName != null)
                {
                    hashCode = (hashCode * 59) + this.AccountName.GetHashCode();
                }
                if (this.AccountingMethod != null)
                {
                    hashCode = (hashCode * 59) + this.AccountingMethod.GetHashCode();
                }
                if (this.Currency != null)
                {
                    hashCode = (hashCode * 59) + this.Currency.GetHashCode();
                }
                if (this.Properties != null)
                {
                    hashCode = (hashCode * 59) + this.Properties.GetHashCode();
                }
                if (this.Custodian != null)
                {
                    hashCode = (hashCode * 59) + this.Custodian.GetHashCode();
                }
                if (this.AccountType != null)
                {
                    hashCode = (hashCode * 59) + this.AccountType.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Status (string) minLength
            if (this.Status != null && this.Status.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Status, length must be greater than 1.", new [] { "Status" });
            }

            // AccountNumber (string) maxLength
            if (this.AccountNumber != null && this.AccountNumber.Length > 64)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for AccountNumber, length must be less than 64.", new [] { "AccountNumber" });
            }

            // AccountNumber (string) minLength
            if (this.AccountNumber != null && this.AccountNumber.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for AccountNumber, length must be greater than 1.", new [] { "AccountNumber" });
            }

            // AccountName (string) minLength
            if (this.AccountName != null && this.AccountName.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for AccountName, length must be greater than 1.", new [] { "AccountName" });
            }

            // AccountingMethod (string) minLength
            if (this.AccountingMethod != null && this.AccountingMethod.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for AccountingMethod, length must be greater than 1.", new [] { "AccountingMethod" });
            }

            // AccountType (string) minLength
            if (this.AccountType != null && this.AccountType.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for AccountType, length must be greater than 1.", new [] { "AccountType" });
            }

            yield break;
        }
    }
}
