/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Lusid.Sdk.Client.OpenAPIDateConverter;

namespace Lusid.Sdk.Model
{
    /// <summary>
    /// Represents the result of a data quality check operation
    /// </summary>
    [DataContract(Name = "DataQualityCheckResult")]
    public partial class DataQualityCheckResult : IEquatable<DataQualityCheckResult>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DataQualityCheckResult" /> class.
        /// </summary>
        /// <param name="checkDefinitionScope">The scope of the check definition.</param>
        /// <param name="checkDefinitionCode">The code of the check definition.</param>
        /// <param name="checkDefinitionDisplayName">The display name of the check definition.</param>
        /// <param name="checkRunAsAt">The timestamp when the check was run.</param>
        /// <param name="resultType">The type of result from the check.</param>
        /// <param name="ruleSetKey">The key identifying the ruleset.</param>
        /// <param name="ruleSetDisplayName">The display name of the ruleset.</param>
        /// <param name="ruleKey">The key identifying the rule (for RuleInvalid, RuleBreached, RuleBreachesOverLimit).</param>
        /// <param name="ruleDisplayName">The display name of the rule (for RuleInvalid, RuleBreached, RuleBreachesOverLimit).</param>
        /// <param name="ruleDescription">The description of the rule (for RuleInvalid, RuleBreached, RuleBreachesOverLimit).</param>
        /// <param name="ruleFormula">The formula of the rule (for RuleInvalid, RuleBreached, RuleBreachesOverLimit).</param>
        /// <param name="severity">The severity level.</param>
        /// <param name="lusidEntity">lusidEntity.</param>
        /// <param name="countRuleBreaches">The count of rule breaches (1 for RuleBreached, multiple for RuleBreachesOverLimit).</param>
        /// <param name="errorDetail">Error details (for RulesetInvalid, RuleInvalid).</param>
        /// <param name="resultId">Unique identifier for the result in format: {{GUID of Check Definition}}-{{resultType}}-{{rulesetKey}}-{{ruleKey}}-{{entity GUID}}.</param>
        public DataQualityCheckResult(string checkDefinitionScope = default(string), string checkDefinitionCode = default(string), string checkDefinitionDisplayName = default(string), DateTimeOffset checkRunAsAt = default(DateTimeOffset), string resultType = default(string), string ruleSetKey = default(string), string ruleSetDisplayName = default(string), string ruleKey = default(string), string ruleDisplayName = default(string), string ruleDescription = default(string), string ruleFormula = default(string), int? severity = default(int?), LusidEntityResult lusidEntity = default(LusidEntityResult), int? countRuleBreaches = default(int?), string errorDetail = default(string), string resultId = default(string))
        {
            this.CheckDefinitionScope = checkDefinitionScope;
            this.CheckDefinitionCode = checkDefinitionCode;
            this.CheckDefinitionDisplayName = checkDefinitionDisplayName;
            this.CheckRunAsAt = checkRunAsAt;
            this.ResultType = resultType;
            this.RuleSetKey = ruleSetKey;
            this.RuleSetDisplayName = ruleSetDisplayName;
            this.RuleKey = ruleKey;
            this.RuleDisplayName = ruleDisplayName;
            this.RuleDescription = ruleDescription;
            this.RuleFormula = ruleFormula;
            this.Severity = severity;
            this.LusidEntity = lusidEntity;
            this.CountRuleBreaches = countRuleBreaches;
            this.ErrorDetail = errorDetail;
            this.ResultId = resultId;
        }

        /// <summary>
        /// The scope of the check definition
        /// </summary>
        /// <value>The scope of the check definition</value>
        [DataMember(Name = "checkDefinitionScope", EmitDefaultValue = true)]
        public string CheckDefinitionScope { get; set; }

        /// <summary>
        /// The code of the check definition
        /// </summary>
        /// <value>The code of the check definition</value>
        [DataMember(Name = "checkDefinitionCode", EmitDefaultValue = true)]
        public string CheckDefinitionCode { get; set; }

        /// <summary>
        /// The display name of the check definition
        /// </summary>
        /// <value>The display name of the check definition</value>
        [DataMember(Name = "checkDefinitionDisplayName", EmitDefaultValue = true)]
        public string CheckDefinitionDisplayName { get; set; }

        /// <summary>
        /// The timestamp when the check was run
        /// </summary>
        /// <value>The timestamp when the check was run</value>
        [DataMember(Name = "checkRunAsAt", EmitDefaultValue = false)]
        public DateTimeOffset CheckRunAsAt { get; set; }

        /// <summary>
        /// The type of result from the check
        /// </summary>
        /// <value>The type of result from the check</value>
        [DataMember(Name = "resultType", EmitDefaultValue = true)]
        public string ResultType { get; set; }

        /// <summary>
        /// The key identifying the ruleset
        /// </summary>
        /// <value>The key identifying the ruleset</value>
        [DataMember(Name = "ruleSetKey", EmitDefaultValue = true)]
        public string RuleSetKey { get; set; }

        /// <summary>
        /// The display name of the ruleset
        /// </summary>
        /// <value>The display name of the ruleset</value>
        [DataMember(Name = "ruleSetDisplayName", EmitDefaultValue = true)]
        public string RuleSetDisplayName { get; set; }

        /// <summary>
        /// The key identifying the rule (for RuleInvalid, RuleBreached, RuleBreachesOverLimit)
        /// </summary>
        /// <value>The key identifying the rule (for RuleInvalid, RuleBreached, RuleBreachesOverLimit)</value>
        [DataMember(Name = "ruleKey", EmitDefaultValue = true)]
        public string RuleKey { get; set; }

        /// <summary>
        /// The display name of the rule (for RuleInvalid, RuleBreached, RuleBreachesOverLimit)
        /// </summary>
        /// <value>The display name of the rule (for RuleInvalid, RuleBreached, RuleBreachesOverLimit)</value>
        [DataMember(Name = "ruleDisplayName", EmitDefaultValue = true)]
        public string RuleDisplayName { get; set; }

        /// <summary>
        /// The description of the rule (for RuleInvalid, RuleBreached, RuleBreachesOverLimit)
        /// </summary>
        /// <value>The description of the rule (for RuleInvalid, RuleBreached, RuleBreachesOverLimit)</value>
        [DataMember(Name = "ruleDescription", EmitDefaultValue = true)]
        public string RuleDescription { get; set; }

        /// <summary>
        /// The formula of the rule (for RuleInvalid, RuleBreached, RuleBreachesOverLimit)
        /// </summary>
        /// <value>The formula of the rule (for RuleInvalid, RuleBreached, RuleBreachesOverLimit)</value>
        [DataMember(Name = "ruleFormula", EmitDefaultValue = true)]
        public string RuleFormula { get; set; }

        /// <summary>
        /// The severity level
        /// </summary>
        /// <value>The severity level</value>
        [DataMember(Name = "severity", EmitDefaultValue = true)]
        public int? Severity { get; set; }

        /// <summary>
        /// Gets or Sets LusidEntity
        /// </summary>
        [DataMember(Name = "lusidEntity", EmitDefaultValue = false)]
        public LusidEntityResult LusidEntity { get; set; }

        /// <summary>
        /// The count of rule breaches (1 for RuleBreached, multiple for RuleBreachesOverLimit)
        /// </summary>
        /// <value>The count of rule breaches (1 for RuleBreached, multiple for RuleBreachesOverLimit)</value>
        [DataMember(Name = "countRuleBreaches", EmitDefaultValue = true)]
        public int? CountRuleBreaches { get; set; }

        /// <summary>
        /// Error details (for RulesetInvalid, RuleInvalid)
        /// </summary>
        /// <value>Error details (for RulesetInvalid, RuleInvalid)</value>
        [DataMember(Name = "errorDetail", EmitDefaultValue = true)]
        public string ErrorDetail { get; set; }

        /// <summary>
        /// Unique identifier for the result in format: {{GUID of Check Definition}}-{{resultType}}-{{rulesetKey}}-{{ruleKey}}-{{entity GUID}}
        /// </summary>
        /// <value>Unique identifier for the result in format: {{GUID of Check Definition}}-{{resultType}}-{{rulesetKey}}-{{ruleKey}}-{{entity GUID}}</value>
        [DataMember(Name = "resultId", EmitDefaultValue = true)]
        public string ResultId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DataQualityCheckResult {\n");
            sb.Append("  CheckDefinitionScope: ").Append(CheckDefinitionScope).Append("\n");
            sb.Append("  CheckDefinitionCode: ").Append(CheckDefinitionCode).Append("\n");
            sb.Append("  CheckDefinitionDisplayName: ").Append(CheckDefinitionDisplayName).Append("\n");
            sb.Append("  CheckRunAsAt: ").Append(CheckRunAsAt).Append("\n");
            sb.Append("  ResultType: ").Append(ResultType).Append("\n");
            sb.Append("  RuleSetKey: ").Append(RuleSetKey).Append("\n");
            sb.Append("  RuleSetDisplayName: ").Append(RuleSetDisplayName).Append("\n");
            sb.Append("  RuleKey: ").Append(RuleKey).Append("\n");
            sb.Append("  RuleDisplayName: ").Append(RuleDisplayName).Append("\n");
            sb.Append("  RuleDescription: ").Append(RuleDescription).Append("\n");
            sb.Append("  RuleFormula: ").Append(RuleFormula).Append("\n");
            sb.Append("  Severity: ").Append(Severity).Append("\n");
            sb.Append("  LusidEntity: ").Append(LusidEntity).Append("\n");
            sb.Append("  CountRuleBreaches: ").Append(CountRuleBreaches).Append("\n");
            sb.Append("  ErrorDetail: ").Append(ErrorDetail).Append("\n");
            sb.Append("  ResultId: ").Append(ResultId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DataQualityCheckResult);
        }

        /// <summary>
        /// Returns true if DataQualityCheckResult instances are equal
        /// </summary>
        /// <param name="input">Instance of DataQualityCheckResult to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DataQualityCheckResult input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.CheckDefinitionScope == input.CheckDefinitionScope ||
                    (this.CheckDefinitionScope != null &&
                    this.CheckDefinitionScope.Equals(input.CheckDefinitionScope))
                ) && 
                (
                    this.CheckDefinitionCode == input.CheckDefinitionCode ||
                    (this.CheckDefinitionCode != null &&
                    this.CheckDefinitionCode.Equals(input.CheckDefinitionCode))
                ) && 
                (
                    this.CheckDefinitionDisplayName == input.CheckDefinitionDisplayName ||
                    (this.CheckDefinitionDisplayName != null &&
                    this.CheckDefinitionDisplayName.Equals(input.CheckDefinitionDisplayName))
                ) && 
                (
                    this.CheckRunAsAt == input.CheckRunAsAt ||
                    (this.CheckRunAsAt != null &&
                    this.CheckRunAsAt.Equals(input.CheckRunAsAt))
                ) && 
                (
                    this.ResultType == input.ResultType ||
                    (this.ResultType != null &&
                    this.ResultType.Equals(input.ResultType))
                ) && 
                (
                    this.RuleSetKey == input.RuleSetKey ||
                    (this.RuleSetKey != null &&
                    this.RuleSetKey.Equals(input.RuleSetKey))
                ) && 
                (
                    this.RuleSetDisplayName == input.RuleSetDisplayName ||
                    (this.RuleSetDisplayName != null &&
                    this.RuleSetDisplayName.Equals(input.RuleSetDisplayName))
                ) && 
                (
                    this.RuleKey == input.RuleKey ||
                    (this.RuleKey != null &&
                    this.RuleKey.Equals(input.RuleKey))
                ) && 
                (
                    this.RuleDisplayName == input.RuleDisplayName ||
                    (this.RuleDisplayName != null &&
                    this.RuleDisplayName.Equals(input.RuleDisplayName))
                ) && 
                (
                    this.RuleDescription == input.RuleDescription ||
                    (this.RuleDescription != null &&
                    this.RuleDescription.Equals(input.RuleDescription))
                ) && 
                (
                    this.RuleFormula == input.RuleFormula ||
                    (this.RuleFormula != null &&
                    this.RuleFormula.Equals(input.RuleFormula))
                ) && 
                (
                    this.Severity == input.Severity ||
                    (this.Severity != null &&
                    this.Severity.Equals(input.Severity))
                ) && 
                (
                    this.LusidEntity == input.LusidEntity ||
                    (this.LusidEntity != null &&
                    this.LusidEntity.Equals(input.LusidEntity))
                ) && 
                (
                    this.CountRuleBreaches == input.CountRuleBreaches ||
                    (this.CountRuleBreaches != null &&
                    this.CountRuleBreaches.Equals(input.CountRuleBreaches))
                ) && 
                (
                    this.ErrorDetail == input.ErrorDetail ||
                    (this.ErrorDetail != null &&
                    this.ErrorDetail.Equals(input.ErrorDetail))
                ) && 
                (
                    this.ResultId == input.ResultId ||
                    (this.ResultId != null &&
                    this.ResultId.Equals(input.ResultId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CheckDefinitionScope != null)
                {
                    hashCode = (hashCode * 59) + this.CheckDefinitionScope.GetHashCode();
                }
                if (this.CheckDefinitionCode != null)
                {
                    hashCode = (hashCode * 59) + this.CheckDefinitionCode.GetHashCode();
                }
                if (this.CheckDefinitionDisplayName != null)
                {
                    hashCode = (hashCode * 59) + this.CheckDefinitionDisplayName.GetHashCode();
                }
                if (this.CheckRunAsAt != null)
                {
                    hashCode = (hashCode * 59) + this.CheckRunAsAt.GetHashCode();
                }
                if (this.ResultType != null)
                {
                    hashCode = (hashCode * 59) + this.ResultType.GetHashCode();
                }
                if (this.RuleSetKey != null)
                {
                    hashCode = (hashCode * 59) + this.RuleSetKey.GetHashCode();
                }
                if (this.RuleSetDisplayName != null)
                {
                    hashCode = (hashCode * 59) + this.RuleSetDisplayName.GetHashCode();
                }
                if (this.RuleKey != null)
                {
                    hashCode = (hashCode * 59) + this.RuleKey.GetHashCode();
                }
                if (this.RuleDisplayName != null)
                {
                    hashCode = (hashCode * 59) + this.RuleDisplayName.GetHashCode();
                }
                if (this.RuleDescription != null)
                {
                    hashCode = (hashCode * 59) + this.RuleDescription.GetHashCode();
                }
                if (this.RuleFormula != null)
                {
                    hashCode = (hashCode * 59) + this.RuleFormula.GetHashCode();
                }
                if (this.Severity != null)
                {
                    hashCode = (hashCode * 59) + this.Severity.GetHashCode();
                }
                if (this.LusidEntity != null)
                {
                    hashCode = (hashCode * 59) + this.LusidEntity.GetHashCode();
                }
                if (this.CountRuleBreaches != null)
                {
                    hashCode = (hashCode * 59) + this.CountRuleBreaches.GetHashCode();
                }
                if (this.ErrorDetail != null)
                {
                    hashCode = (hashCode * 59) + this.ErrorDetail.GetHashCode();
                }
                if (this.ResultId != null)
                {
                    hashCode = (hashCode * 59) + this.ResultId.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
