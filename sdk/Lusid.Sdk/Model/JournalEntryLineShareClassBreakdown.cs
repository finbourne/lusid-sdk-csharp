/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Lusid.Sdk.Client.OpenAPIDateConverter;

namespace Lusid.Sdk.Model
{
    /// <summary>
    /// The apportionment from overall fund level journal entry Line to the share class.
    /// </summary>
    [DataContract(Name = "JournalEntryLineShareClassBreakdown")]
    public partial class JournalEntryLineShareClassBreakdown : IEquatable<JournalEntryLineShareClassBreakdown>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="JournalEntryLineShareClassBreakdown" /> class.
        /// </summary>
        /// <param name="shortCode">The share class identifier..</param>
        /// <param name="apportionmentFactor">The share class apportionment factor (capital ratio)..</param>
        /// <param name="localValue">This journal entry line&#39;s local value amount after apportionment is applied..</param>
        /// <param name="baseValue">This journal entry line&#39;s base value amount after apportionment is applied.</param>
        public JournalEntryLineShareClassBreakdown(string shortCode = default(string), decimal apportionmentFactor = default(decimal), decimal localValue = default(decimal), decimal baseValue = default(decimal))
        {
            this.ShortCode = shortCode;
            this.ApportionmentFactor = apportionmentFactor;
            this.LocalValue = localValue;
            this.BaseValue = baseValue;
        }

        /// <summary>
        /// The share class identifier.
        /// </summary>
        /// <value>The share class identifier.</value>
        [DataMember(Name = "shortCode", EmitDefaultValue = true)]
        public string ShortCode { get; set; }

        /// <summary>
        /// The share class apportionment factor (capital ratio).
        /// </summary>
        /// <value>The share class apportionment factor (capital ratio).</value>
        [DataMember(Name = "apportionmentFactor", EmitDefaultValue = true)]
        public decimal ApportionmentFactor { get; set; }

        /// <summary>
        /// This journal entry line&#39;s local value amount after apportionment is applied.
        /// </summary>
        /// <value>This journal entry line&#39;s local value amount after apportionment is applied.</value>
        [DataMember(Name = "localValue", EmitDefaultValue = true)]
        public decimal LocalValue { get; set; }

        /// <summary>
        /// This journal entry line&#39;s base value amount after apportionment is applied
        /// </summary>
        /// <value>This journal entry line&#39;s base value amount after apportionment is applied</value>
        [DataMember(Name = "baseValue", EmitDefaultValue = true)]
        public decimal BaseValue { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class JournalEntryLineShareClassBreakdown {\n");
            sb.Append("  ShortCode: ").Append(ShortCode).Append("\n");
            sb.Append("  ApportionmentFactor: ").Append(ApportionmentFactor).Append("\n");
            sb.Append("  LocalValue: ").Append(LocalValue).Append("\n");
            sb.Append("  BaseValue: ").Append(BaseValue).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as JournalEntryLineShareClassBreakdown);
        }

        /// <summary>
        /// Returns true if JournalEntryLineShareClassBreakdown instances are equal
        /// </summary>
        /// <param name="input">Instance of JournalEntryLineShareClassBreakdown to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(JournalEntryLineShareClassBreakdown input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.ShortCode == input.ShortCode ||
                    (this.ShortCode != null &&
                    this.ShortCode.Equals(input.ShortCode))
                ) && 
                (
                    this.ApportionmentFactor == input.ApportionmentFactor ||
                    this.ApportionmentFactor.Equals(input.ApportionmentFactor)
                ) && 
                (
                    this.LocalValue == input.LocalValue ||
                    this.LocalValue.Equals(input.LocalValue)
                ) && 
                (
                    this.BaseValue == input.BaseValue ||
                    this.BaseValue.Equals(input.BaseValue)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ShortCode != null)
                {
                    hashCode = (hashCode * 59) + this.ShortCode.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.ApportionmentFactor.GetHashCode();
                hashCode = (hashCode * 59) + this.LocalValue.GetHashCode();
                hashCode = (hashCode * 59) + this.BaseValue.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
