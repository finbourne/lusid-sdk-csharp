/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Lusid.Sdk.Client.OpenAPIDateConverter;

namespace Lusid.Sdk.Model
{
    /// <summary>
    /// BlockAndOrdersRequest
    /// </summary>
    [DataContract(Name = "BlockAndOrdersRequest")]
    public partial class BlockAndOrdersRequest : IEquatable<BlockAndOrdersRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="BlockAndOrdersRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected BlockAndOrdersRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="BlockAndOrdersRequest" /> class.
        /// </summary>
        /// <param name="blockId">blockId (required).</param>
        /// <param name="orders">An order which belongs to a block. Fields common to both entities (such as instrument) should be derived from the block. (required).</param>
        /// <param name="blockProperties">Client-defined properties associated with this block..</param>
        /// <param name="instrumentIdentifiers">The instrument ordered. (required).</param>
        /// <param name="side">The client&#39;s representation of the block&#39;s side (buy, sell, short, etc) (required).</param>
        /// <param name="type">The block order&#39;s type (examples: Limit, Market, ...).</param>
        /// <param name="timeInForce">The block orders&#39; time in force (examples: Day, GoodTilCancel, ...).</param>
        /// <param name="date">The date on which the block was made.</param>
        /// <param name="limitPrice">limitPrice.</param>
        /// <param name="stopPrice">stopPrice.</param>
        public BlockAndOrdersRequest(ResourceId blockId = default(ResourceId), List<BlockedOrderRequest> orders = default(List<BlockedOrderRequest>), Dictionary<string, PerpetualProperty> blockProperties = default(Dictionary<string, PerpetualProperty>), Dictionary<string, string> instrumentIdentifiers = default(Dictionary<string, string>), string side = default(string), string type = default(string), string timeInForce = default(string), DateTimeOffset date = default(DateTimeOffset), CurrencyAndAmount limitPrice = default(CurrencyAndAmount), CurrencyAndAmount stopPrice = default(CurrencyAndAmount))
        {
            // to ensure "blockId" is required (not null)
            if (blockId == null)
            {
                throw new ArgumentNullException("blockId is a required property for BlockAndOrdersRequest and cannot be null");
            }
            this.BlockId = blockId;
            // to ensure "orders" is required (not null)
            if (orders == null)
            {
                throw new ArgumentNullException("orders is a required property for BlockAndOrdersRequest and cannot be null");
            }
            this.Orders = orders;
            // to ensure "instrumentIdentifiers" is required (not null)
            if (instrumentIdentifiers == null)
            {
                throw new ArgumentNullException("instrumentIdentifiers is a required property for BlockAndOrdersRequest and cannot be null");
            }
            this.InstrumentIdentifiers = instrumentIdentifiers;
            // to ensure "side" is required (not null)
            if (side == null)
            {
                throw new ArgumentNullException("side is a required property for BlockAndOrdersRequest and cannot be null");
            }
            this.Side = side;
            this.BlockProperties = blockProperties;
            this.Type = type;
            this.TimeInForce = timeInForce;
            this.Date = date;
            this.LimitPrice = limitPrice;
            this.StopPrice = stopPrice;
        }

        /// <summary>
        /// Gets or Sets BlockId
        /// </summary>
        [DataMember(Name = "blockId", IsRequired = true, EmitDefaultValue = true)]
        public ResourceId BlockId { get; set; }

        /// <summary>
        /// An order which belongs to a block. Fields common to both entities (such as instrument) should be derived from the block.
        /// </summary>
        /// <value>An order which belongs to a block. Fields common to both entities (such as instrument) should be derived from the block.</value>
        [DataMember(Name = "orders", IsRequired = true, EmitDefaultValue = true)]
        public List<BlockedOrderRequest> Orders { get; set; }

        /// <summary>
        /// Client-defined properties associated with this block.
        /// </summary>
        /// <value>Client-defined properties associated with this block.</value>
        [DataMember(Name = "blockProperties", EmitDefaultValue = true)]
        public Dictionary<string, PerpetualProperty> BlockProperties { get; set; }

        /// <summary>
        /// The instrument ordered.
        /// </summary>
        /// <value>The instrument ordered.</value>
        [DataMember(Name = "instrumentIdentifiers", IsRequired = true, EmitDefaultValue = true)]
        public Dictionary<string, string> InstrumentIdentifiers { get; set; }

        /// <summary>
        /// The client&#39;s representation of the block&#39;s side (buy, sell, short, etc)
        /// </summary>
        /// <value>The client&#39;s representation of the block&#39;s side (buy, sell, short, etc)</value>
        [DataMember(Name = "side", IsRequired = true, EmitDefaultValue = true)]
        public string Side { get; set; }

        /// <summary>
        /// The block order&#39;s type (examples: Limit, Market, ...)
        /// </summary>
        /// <value>The block order&#39;s type (examples: Limit, Market, ...)</value>
        [DataMember(Name = "type", EmitDefaultValue = true)]
        public string Type { get; set; }

        /// <summary>
        /// The block orders&#39; time in force (examples: Day, GoodTilCancel, ...)
        /// </summary>
        /// <value>The block orders&#39; time in force (examples: Day, GoodTilCancel, ...)</value>
        [DataMember(Name = "timeInForce", EmitDefaultValue = true)]
        public string TimeInForce { get; set; }

        /// <summary>
        /// The date on which the block was made
        /// </summary>
        /// <value>The date on which the block was made</value>
        [DataMember(Name = "date", EmitDefaultValue = false)]
        public DateTimeOffset Date { get; set; }

        /// <summary>
        /// Gets or Sets LimitPrice
        /// </summary>
        [DataMember(Name = "limitPrice", EmitDefaultValue = false)]
        public CurrencyAndAmount LimitPrice { get; set; }

        /// <summary>
        /// Gets or Sets StopPrice
        /// </summary>
        [DataMember(Name = "stopPrice", EmitDefaultValue = false)]
        public CurrencyAndAmount StopPrice { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class BlockAndOrdersRequest {\n");
            sb.Append("  BlockId: ").Append(BlockId).Append("\n");
            sb.Append("  Orders: ").Append(Orders).Append("\n");
            sb.Append("  BlockProperties: ").Append(BlockProperties).Append("\n");
            sb.Append("  InstrumentIdentifiers: ").Append(InstrumentIdentifiers).Append("\n");
            sb.Append("  Side: ").Append(Side).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  TimeInForce: ").Append(TimeInForce).Append("\n");
            sb.Append("  Date: ").Append(Date).Append("\n");
            sb.Append("  LimitPrice: ").Append(LimitPrice).Append("\n");
            sb.Append("  StopPrice: ").Append(StopPrice).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as BlockAndOrdersRequest);
        }

        /// <summary>
        /// Returns true if BlockAndOrdersRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of BlockAndOrdersRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BlockAndOrdersRequest input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.BlockId == input.BlockId ||
                    (this.BlockId != null &&
                    this.BlockId.Equals(input.BlockId))
                ) && 
                (
                    this.Orders == input.Orders ||
                    this.Orders != null &&
                    input.Orders != null &&
                    this.Orders.SequenceEqual(input.Orders)
                ) && 
                (
                    this.BlockProperties == input.BlockProperties ||
                    this.BlockProperties != null &&
                    input.BlockProperties != null &&
                    this.BlockProperties.SequenceEqual(input.BlockProperties)
                ) && 
                (
                    this.InstrumentIdentifiers == input.InstrumentIdentifiers ||
                    this.InstrumentIdentifiers != null &&
                    input.InstrumentIdentifiers != null &&
                    this.InstrumentIdentifiers.SequenceEqual(input.InstrumentIdentifiers)
                ) && 
                (
                    this.Side == input.Side ||
                    (this.Side != null &&
                    this.Side.Equals(input.Side))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.TimeInForce == input.TimeInForce ||
                    (this.TimeInForce != null &&
                    this.TimeInForce.Equals(input.TimeInForce))
                ) && 
                (
                    this.Date == input.Date ||
                    (this.Date != null &&
                    this.Date.Equals(input.Date))
                ) && 
                (
                    this.LimitPrice == input.LimitPrice ||
                    (this.LimitPrice != null &&
                    this.LimitPrice.Equals(input.LimitPrice))
                ) && 
                (
                    this.StopPrice == input.StopPrice ||
                    (this.StopPrice != null &&
                    this.StopPrice.Equals(input.StopPrice))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.BlockId != null)
                {
                    hashCode = (hashCode * 59) + this.BlockId.GetHashCode();
                }
                if (this.Orders != null)
                {
                    hashCode = (hashCode * 59) + this.Orders.GetHashCode();
                }
                if (this.BlockProperties != null)
                {
                    hashCode = (hashCode * 59) + this.BlockProperties.GetHashCode();
                }
                if (this.InstrumentIdentifiers != null)
                {
                    hashCode = (hashCode * 59) + this.InstrumentIdentifiers.GetHashCode();
                }
                if (this.Side != null)
                {
                    hashCode = (hashCode * 59) + this.Side.GetHashCode();
                }
                if (this.Type != null)
                {
                    hashCode = (hashCode * 59) + this.Type.GetHashCode();
                }
                if (this.TimeInForce != null)
                {
                    hashCode = (hashCode * 59) + this.TimeInForce.GetHashCode();
                }
                if (this.Date != null)
                {
                    hashCode = (hashCode * 59) + this.Date.GetHashCode();
                }
                if (this.LimitPrice != null)
                {
                    hashCode = (hashCode * 59) + this.LimitPrice.GetHashCode();
                }
                if (this.StopPrice != null)
                {
                    hashCode = (hashCode * 59) + this.StopPrice.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Side (string) minLength
            if (this.Side != null && this.Side.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Side, length must be greater than 1.", new [] { "Side" });
            }

            yield break;
        }
    }
}
