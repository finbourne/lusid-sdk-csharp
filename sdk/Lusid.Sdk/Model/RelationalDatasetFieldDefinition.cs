/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Lusid.Sdk.Client.OpenAPIDateConverter;

namespace Lusid.Sdk.Model
{
    /// <summary>
    /// RelationalDatasetFieldDefinition
    /// </summary>
    [DataContract(Name = "RelationalDatasetFieldDefinition")]
    public partial class RelationalDatasetFieldDefinition : IEquatable<RelationalDatasetFieldDefinition>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RelationalDatasetFieldDefinition" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected RelationalDatasetFieldDefinition() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="RelationalDatasetFieldDefinition" /> class.
        /// </summary>
        /// <param name="fieldName">The unique identifier for the field within the dataset. (required).</param>
        /// <param name="displayName">A user-friendly display name for the field..</param>
        /// <param name="description">A detailed description of the field and its purpose..</param>
        /// <param name="dataTypeId">dataTypeId (required).</param>
        /// <param name="required">Whether this field is mandatory in the dataset..</param>
        /// <param name="usage">The intended usage of the field (SeriesIdentifier, Value, or Metadata). (required).</param>
        public RelationalDatasetFieldDefinition(string fieldName = default(string), string displayName = default(string), string description = default(string), ResourceId dataTypeId = default(ResourceId), bool required = default(bool), string usage = default(string))
        {
            // to ensure "fieldName" is required (not null)
            if (fieldName == null)
            {
                throw new ArgumentNullException("fieldName is a required property for RelationalDatasetFieldDefinition and cannot be null");
            }
            this.FieldName = fieldName;
            // to ensure "dataTypeId" is required (not null)
            if (dataTypeId == null)
            {
                throw new ArgumentNullException("dataTypeId is a required property for RelationalDatasetFieldDefinition and cannot be null");
            }
            this.DataTypeId = dataTypeId;
            // to ensure "usage" is required (not null)
            if (usage == null)
            {
                throw new ArgumentNullException("usage is a required property for RelationalDatasetFieldDefinition and cannot be null");
            }
            this.Usage = usage;
            this.DisplayName = displayName;
            this.Description = description;
            this.Required = required;
        }

        /// <summary>
        /// The unique identifier for the field within the dataset.
        /// </summary>
        /// <value>The unique identifier for the field within the dataset.</value>
        [DataMember(Name = "fieldName", IsRequired = true, EmitDefaultValue = true)]
        public string FieldName { get; set; }

        /// <summary>
        /// A user-friendly display name for the field.
        /// </summary>
        /// <value>A user-friendly display name for the field.</value>
        [DataMember(Name = "displayName", EmitDefaultValue = true)]
        public string DisplayName { get; set; }

        /// <summary>
        /// A detailed description of the field and its purpose.
        /// </summary>
        /// <value>A detailed description of the field and its purpose.</value>
        [DataMember(Name = "description", EmitDefaultValue = true)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets DataTypeId
        /// </summary>
        [DataMember(Name = "dataTypeId", IsRequired = true, EmitDefaultValue = true)]
        public ResourceId DataTypeId { get; set; }

        /// <summary>
        /// Whether this field is mandatory in the dataset.
        /// </summary>
        /// <value>Whether this field is mandatory in the dataset.</value>
        [DataMember(Name = "required", EmitDefaultValue = true)]
        public bool Required { get; set; }

        /// <summary>
        /// The intended usage of the field (SeriesIdentifier, Value, or Metadata).
        /// </summary>
        /// <value>The intended usage of the field (SeriesIdentifier, Value, or Metadata).</value>
        [DataMember(Name = "usage", IsRequired = true, EmitDefaultValue = true)]
        public string Usage { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class RelationalDatasetFieldDefinition {\n");
            sb.Append("  FieldName: ").Append(FieldName).Append("\n");
            sb.Append("  DisplayName: ").Append(DisplayName).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  DataTypeId: ").Append(DataTypeId).Append("\n");
            sb.Append("  Required: ").Append(Required).Append("\n");
            sb.Append("  Usage: ").Append(Usage).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as RelationalDatasetFieldDefinition);
        }

        /// <summary>
        /// Returns true if RelationalDatasetFieldDefinition instances are equal
        /// </summary>
        /// <param name="input">Instance of RelationalDatasetFieldDefinition to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RelationalDatasetFieldDefinition input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.FieldName == input.FieldName ||
                    (this.FieldName != null &&
                    this.FieldName.Equals(input.FieldName))
                ) && 
                (
                    this.DisplayName == input.DisplayName ||
                    (this.DisplayName != null &&
                    this.DisplayName.Equals(input.DisplayName))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.DataTypeId == input.DataTypeId ||
                    (this.DataTypeId != null &&
                    this.DataTypeId.Equals(input.DataTypeId))
                ) && 
                (
                    this.Required == input.Required ||
                    this.Required.Equals(input.Required)
                ) && 
                (
                    this.Usage == input.Usage ||
                    (this.Usage != null &&
                    this.Usage.Equals(input.Usage))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.FieldName != null)
                {
                    hashCode = (hashCode * 59) + this.FieldName.GetHashCode();
                }
                if (this.DisplayName != null)
                {
                    hashCode = (hashCode * 59) + this.DisplayName.GetHashCode();
                }
                if (this.Description != null)
                {
                    hashCode = (hashCode * 59) + this.Description.GetHashCode();
                }
                if (this.DataTypeId != null)
                {
                    hashCode = (hashCode * 59) + this.DataTypeId.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Required.GetHashCode();
                if (this.Usage != null)
                {
                    hashCode = (hashCode * 59) + this.Usage.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // FieldName (string) maxLength
            if (this.FieldName != null && this.FieldName.Length > 512)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for FieldName, length must be less than 512.", new [] { "FieldName" });
            }

            // FieldName (string) minLength
            if (this.FieldName != null && this.FieldName.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for FieldName, length must be greater than 1.", new [] { "FieldName" });
            }

            // DisplayName (string) maxLength
            if (this.DisplayName != null && this.DisplayName.Length > 512)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for DisplayName, length must be less than 512.", new [] { "DisplayName" });
            }

            // DisplayName (string) minLength
            if (this.DisplayName != null && this.DisplayName.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for DisplayName, length must be greater than 1.", new [] { "DisplayName" });
            }

            // Description (string) maxLength
            if (this.Description != null && this.Description.Length > 512)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Description, length must be less than 512.", new [] { "Description" });
            }

            // Description (string) minLength
            if (this.Description != null && this.Description.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Description, length must be greater than 1.", new [] { "Description" });
            }

            // Usage (string) minLength
            if (this.Usage != null && this.Usage.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Usage, length must be greater than 1.", new [] { "Usage" });
            }

            yield break;
        }
    }
}
