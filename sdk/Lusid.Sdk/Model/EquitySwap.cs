/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using JsonSubTypes;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Lusid.Sdk.Client.OpenAPIDateConverter;

namespace Lusid.Sdk.Model
{
    /// <summary>
    /// LUSID representation of an Equity Swap.                This instrument has multiple legs, to see how legs are used in LUSID see [knowledge base article KA-02252](https://support.lusid.com/knowledgebase/article/KA-02252).                | Leg Index | Leg Identifier | Description |  | - -- -- -- -- | - -- -- -- -- -- -- - | - -- -- -- -- -- |  | 1 | EquityLeg | Cash flows relating to the performance of the underlying equity. |  | 2 | FundingLeg | The funding leg of the swap. |  | 3 | EquityDividendLeg | Cash flows relating to dividend payments on the underlying equity (optional). |
    /// </summary>
    [DataContract(Name = "EquitySwap")]
    [JsonConverter(typeof(JsonSubtypes), "InstrumentType")]
    public partial class EquitySwap : LusidInstrument, IEquatable<EquitySwap>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EquitySwap" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected EquitySwap() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="EquitySwap" /> class.
        /// </summary>
        /// <param name="startDate">The start date of the EquitySwap. (required).</param>
        /// <param name="maturityDate">The final maturity date of the instrument. This means the last date on which the instruments makes a payment of any amount.  For the avoidance of doubt, that is not necessarily prior to its last sensitivity date for the purposes of risk; e.g. instruments such as  Constant Maturity Swaps (CMS) often have sensitivities to rates that may well be observed or set prior to the maturity date, but refer to a termination date beyond it. (required).</param>
        /// <param name="code">The code of the underlying. (required).</param>
        /// <param name="equityFlowConventions">equityFlowConventions (required).</param>
        /// <param name="fundingLeg">fundingLeg (required).</param>
        /// <param name="includeDividends">Dividend inclusion flag, if true dividends are included in the equity leg (total return). (required).</param>
        /// <param name="initialPrice">The initial equity price of the Equity Swap. (required).</param>
        /// <param name="notionalReset">Notional reset flag, if true the notional of the funding leg is reset at the start of every  coupon to match the value of the equity leg (equity price at start of coupon times quantity). (required).</param>
        /// <param name="quantity">The quantity or number of shares in the Equity Swap. (required).</param>
        /// <param name="underlyingIdentifier">External market codes and identifiers for the EquitySwap, e.g. RIC.    Supported string (enumeration) values are: [LusidInstrumentId, Isin, Sedol, Cusip, ClientInternal, Figi, RIC, QuotePermId, REDCode, BBGId, ICECode]. (required).</param>
        /// <param name="equitySwapDividendPaymentTiming">Determines how the payment of dividends is handled for the equity swap.  Defaults to paying at the next Equity coupon date.                Supported string (enumeration) values are: [PayAtNextEquityCouponDate, PayAtMaturityOfSwap, PayAtNextFundingLegCouponDate, PayAtPaymentDateOfDividendEvent]..</param>
        /// <param name="instrumentType">The available values are: QuotedSecurity, InterestRateSwap, FxForward, Future, ExoticInstrument, FxOption, CreditDefaultSwap, InterestRateSwaption, Bond, EquityOption, FixedLeg, FloatingLeg, BespokeCashFlowsLeg, Unknown, TermDeposit, ContractForDifference, EquitySwap, CashPerpetual, CapFloor, CashSettled, CdsIndex, Basket, FundingLeg, FxSwap, ForwardRateAgreement, SimpleInstrument, Repo, Equity, ExchangeTradedOption, ReferenceInstrument, ComplexBond, InflationLinkedBond, InflationSwap, SimpleCashFlowLoan, TotalReturnSwap, InflationLeg, FundShareClass, FlexibleLoan, UnsettledCash, Cash, MasteredInstrument, LoanFacility (required) (default to &quot;EquitySwap&quot;).</param>
        public EquitySwap(DateTimeOffset startDate = default(DateTimeOffset), DateTimeOffset maturityDate = default(DateTimeOffset), string code = default(string), FlowConventions equityFlowConventions = default(FlowConventions), InstrumentLeg fundingLeg = default(InstrumentLeg), bool includeDividends = default(bool), decimal initialPrice = default(decimal), bool notionalReset = default(bool), decimal quantity = default(decimal), string underlyingIdentifier = default(string), string equitySwapDividendPaymentTiming = default(string), InstrumentTypeEnum instrumentType = default(InstrumentTypeEnum)) : base(instrumentType)
        {
            this.StartDate = startDate;
            this.MaturityDate = maturityDate;
            // to ensure "code" is required (not null)
            if (code == null)
            {
                throw new ArgumentNullException("code is a required property for EquitySwap and cannot be null");
            }
            this.Code = code;
            // to ensure "equityFlowConventions" is required (not null)
            if (equityFlowConventions == null)
            {
                throw new ArgumentNullException("equityFlowConventions is a required property for EquitySwap and cannot be null");
            }
            this.EquityFlowConventions = equityFlowConventions;
            // to ensure "fundingLeg" is required (not null)
            if (fundingLeg == null)
            {
                throw new ArgumentNullException("fundingLeg is a required property for EquitySwap and cannot be null");
            }
            this.FundingLeg = fundingLeg;
            this.IncludeDividends = includeDividends;
            this.InitialPrice = initialPrice;
            this.NotionalReset = notionalReset;
            this.Quantity = quantity;
            // to ensure "underlyingIdentifier" is required (not null)
            if (underlyingIdentifier == null)
            {
                throw new ArgumentNullException("underlyingIdentifier is a required property for EquitySwap and cannot be null");
            }
            this.UnderlyingIdentifier = underlyingIdentifier;
            this.EquitySwapDividendPaymentTiming = equitySwapDividendPaymentTiming;
        }

        /// <summary>
        /// The start date of the EquitySwap.
        /// </summary>
        /// <value>The start date of the EquitySwap.</value>
        [DataMember(Name = "startDate", IsRequired = true, EmitDefaultValue = true)]
        public DateTimeOffset StartDate { get; set; }

        /// <summary>
        /// The final maturity date of the instrument. This means the last date on which the instruments makes a payment of any amount.  For the avoidance of doubt, that is not necessarily prior to its last sensitivity date for the purposes of risk; e.g. instruments such as  Constant Maturity Swaps (CMS) often have sensitivities to rates that may well be observed or set prior to the maturity date, but refer to a termination date beyond it.
        /// </summary>
        /// <value>The final maturity date of the instrument. This means the last date on which the instruments makes a payment of any amount.  For the avoidance of doubt, that is not necessarily prior to its last sensitivity date for the purposes of risk; e.g. instruments such as  Constant Maturity Swaps (CMS) often have sensitivities to rates that may well be observed or set prior to the maturity date, but refer to a termination date beyond it.</value>
        [DataMember(Name = "maturityDate", IsRequired = true, EmitDefaultValue = true)]
        public DateTimeOffset MaturityDate { get; set; }

        /// <summary>
        /// The code of the underlying.
        /// </summary>
        /// <value>The code of the underlying.</value>
        [DataMember(Name = "code", IsRequired = true, EmitDefaultValue = true)]
        public string Code { get; set; }

        /// <summary>
        /// Gets or Sets EquityFlowConventions
        /// </summary>
        [DataMember(Name = "equityFlowConventions", IsRequired = true, EmitDefaultValue = true)]
        public FlowConventions EquityFlowConventions { get; set; }

        /// <summary>
        /// Gets or Sets FundingLeg
        /// </summary>
        [DataMember(Name = "fundingLeg", IsRequired = true, EmitDefaultValue = true)]
        public InstrumentLeg FundingLeg { get; set; }

        /// <summary>
        /// Dividend inclusion flag, if true dividends are included in the equity leg (total return).
        /// </summary>
        /// <value>Dividend inclusion flag, if true dividends are included in the equity leg (total return).</value>
        [DataMember(Name = "includeDividends", IsRequired = true, EmitDefaultValue = true)]
        public bool IncludeDividends { get; set; }

        /// <summary>
        /// The initial equity price of the Equity Swap.
        /// </summary>
        /// <value>The initial equity price of the Equity Swap.</value>
        [DataMember(Name = "initialPrice", IsRequired = true, EmitDefaultValue = true)]
        public decimal InitialPrice { get; set; }

        /// <summary>
        /// Notional reset flag, if true the notional of the funding leg is reset at the start of every  coupon to match the value of the equity leg (equity price at start of coupon times quantity).
        /// </summary>
        /// <value>Notional reset flag, if true the notional of the funding leg is reset at the start of every  coupon to match the value of the equity leg (equity price at start of coupon times quantity).</value>
        [DataMember(Name = "notionalReset", IsRequired = true, EmitDefaultValue = true)]
        public bool NotionalReset { get; set; }

        /// <summary>
        /// The quantity or number of shares in the Equity Swap.
        /// </summary>
        /// <value>The quantity or number of shares in the Equity Swap.</value>
        [DataMember(Name = "quantity", IsRequired = true, EmitDefaultValue = true)]
        public decimal Quantity { get; set; }

        /// <summary>
        /// External market codes and identifiers for the EquitySwap, e.g. RIC.    Supported string (enumeration) values are: [LusidInstrumentId, Isin, Sedol, Cusip, ClientInternal, Figi, RIC, QuotePermId, REDCode, BBGId, ICECode].
        /// </summary>
        /// <value>External market codes and identifiers for the EquitySwap, e.g. RIC.    Supported string (enumeration) values are: [LusidInstrumentId, Isin, Sedol, Cusip, ClientInternal, Figi, RIC, QuotePermId, REDCode, BBGId, ICECode].</value>
        [DataMember(Name = "underlyingIdentifier", IsRequired = true, EmitDefaultValue = true)]
        public string UnderlyingIdentifier { get; set; }

        /// <summary>
        /// Determines how the payment of dividends is handled for the equity swap.  Defaults to paying at the next Equity coupon date.                Supported string (enumeration) values are: [PayAtNextEquityCouponDate, PayAtMaturityOfSwap, PayAtNextFundingLegCouponDate, PayAtPaymentDateOfDividendEvent].
        /// </summary>
        /// <value>Determines how the payment of dividends is handled for the equity swap.  Defaults to paying at the next Equity coupon date.                Supported string (enumeration) values are: [PayAtNextEquityCouponDate, PayAtMaturityOfSwap, PayAtNextFundingLegCouponDate, PayAtPaymentDateOfDividendEvent].</value>
        [DataMember(Name = "equitySwapDividendPaymentTiming", EmitDefaultValue = true)]
        public string EquitySwapDividendPaymentTiming { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EquitySwap {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  StartDate: ").Append(StartDate).Append("\n");
            sb.Append("  MaturityDate: ").Append(MaturityDate).Append("\n");
            sb.Append("  Code: ").Append(Code).Append("\n");
            sb.Append("  EquityFlowConventions: ").Append(EquityFlowConventions).Append("\n");
            sb.Append("  FundingLeg: ").Append(FundingLeg).Append("\n");
            sb.Append("  IncludeDividends: ").Append(IncludeDividends).Append("\n");
            sb.Append("  InitialPrice: ").Append(InitialPrice).Append("\n");
            sb.Append("  NotionalReset: ").Append(NotionalReset).Append("\n");
            sb.Append("  Quantity: ").Append(Quantity).Append("\n");
            sb.Append("  UnderlyingIdentifier: ").Append(UnderlyingIdentifier).Append("\n");
            sb.Append("  EquitySwapDividendPaymentTiming: ").Append(EquitySwapDividendPaymentTiming).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as EquitySwap);
        }

        /// <summary>
        /// Returns true if EquitySwap instances are equal
        /// </summary>
        /// <param name="input">Instance of EquitySwap to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EquitySwap input)
        {
            if (input == null)
            {
                return false;
            }
            return base.Equals(input) && 
                (
                    this.StartDate == input.StartDate ||
                    (this.StartDate != null &&
                    this.StartDate.Equals(input.StartDate))
                ) && base.Equals(input) && 
                (
                    this.MaturityDate == input.MaturityDate ||
                    (this.MaturityDate != null &&
                    this.MaturityDate.Equals(input.MaturityDate))
                ) && base.Equals(input) && 
                (
                    this.Code == input.Code ||
                    (this.Code != null &&
                    this.Code.Equals(input.Code))
                ) && base.Equals(input) && 
                (
                    this.EquityFlowConventions == input.EquityFlowConventions ||
                    (this.EquityFlowConventions != null &&
                    this.EquityFlowConventions.Equals(input.EquityFlowConventions))
                ) && base.Equals(input) && 
                (
                    this.FundingLeg == input.FundingLeg ||
                    (this.FundingLeg != null &&
                    this.FundingLeg.Equals(input.FundingLeg))
                ) && base.Equals(input) && 
                (
                    this.IncludeDividends == input.IncludeDividends ||
                    this.IncludeDividends.Equals(input.IncludeDividends)
                ) && base.Equals(input) && 
                (
                    this.InitialPrice == input.InitialPrice ||
                    this.InitialPrice.Equals(input.InitialPrice)
                ) && base.Equals(input) && 
                (
                    this.NotionalReset == input.NotionalReset ||
                    this.NotionalReset.Equals(input.NotionalReset)
                ) && base.Equals(input) && 
                (
                    this.Quantity == input.Quantity ||
                    this.Quantity.Equals(input.Quantity)
                ) && base.Equals(input) && 
                (
                    this.UnderlyingIdentifier == input.UnderlyingIdentifier ||
                    (this.UnderlyingIdentifier != null &&
                    this.UnderlyingIdentifier.Equals(input.UnderlyingIdentifier))
                ) && base.Equals(input) && 
                (
                    this.EquitySwapDividendPaymentTiming == input.EquitySwapDividendPaymentTiming ||
                    (this.EquitySwapDividendPaymentTiming != null &&
                    this.EquitySwapDividendPaymentTiming.Equals(input.EquitySwapDividendPaymentTiming))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = base.GetHashCode();
                if (this.StartDate != null)
                {
                    hashCode = (hashCode * 59) + this.StartDate.GetHashCode();
                }
                if (this.MaturityDate != null)
                {
                    hashCode = (hashCode * 59) + this.MaturityDate.GetHashCode();
                }
                if (this.Code != null)
                {
                    hashCode = (hashCode * 59) + this.Code.GetHashCode();
                }
                if (this.EquityFlowConventions != null)
                {
                    hashCode = (hashCode * 59) + this.EquityFlowConventions.GetHashCode();
                }
                if (this.FundingLeg != null)
                {
                    hashCode = (hashCode * 59) + this.FundingLeg.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.IncludeDividends.GetHashCode();
                hashCode = (hashCode * 59) + this.InitialPrice.GetHashCode();
                hashCode = (hashCode * 59) + this.NotionalReset.GetHashCode();
                hashCode = (hashCode * 59) + this.Quantity.GetHashCode();
                if (this.UnderlyingIdentifier != null)
                {
                    hashCode = (hashCode * 59) + this.UnderlyingIdentifier.GetHashCode();
                }
                if (this.EquitySwapDividendPaymentTiming != null)
                {
                    hashCode = (hashCode * 59) + this.EquitySwapDividendPaymentTiming.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            return this.BaseValidate(validationContext);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        protected IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> BaseValidate(ValidationContext validationContext)
        {
            foreach (var x in base.BaseValidate(validationContext))
            {
                yield return x;
            }
            // Code (string) minLength
            if (this.Code != null && this.Code.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Code, length must be greater than 1.", new [] { "Code" });
            }

            // UnderlyingIdentifier (string) minLength
            if (this.UnderlyingIdentifier != null && this.UnderlyingIdentifier.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for UnderlyingIdentifier, length must be greater than 1.", new [] { "UnderlyingIdentifier" });
            }

            yield break;
        }
    }
}
