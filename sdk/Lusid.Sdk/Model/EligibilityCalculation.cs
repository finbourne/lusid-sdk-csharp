/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Lusid.Sdk.Client.OpenAPIDateConverter;

namespace Lusid.Sdk.Model
{
    /// <summary>
    /// EligibilityCalculation
    /// </summary>
    [DataContract(Name = "EligibilityCalculation")]
    public partial class EligibilityCalculation : IEquatable<EligibilityCalculation>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EligibilityCalculation" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected EligibilityCalculation() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="EligibilityCalculation" /> class.
        /// </summary>
        /// <param name="entitlementDate">entitlementDate (required).</param>
        /// <param name="eligibleUnits">eligibleUnits (required).</param>
        public EligibilityCalculation(string entitlementDate = default(string), string eligibleUnits = default(string))
        {
            // to ensure "entitlementDate" is required (not null)
            if (entitlementDate == null)
            {
                throw new ArgumentNullException("entitlementDate is a required property for EligibilityCalculation and cannot be null");
            }
            this.EntitlementDate = entitlementDate;
            // to ensure "eligibleUnits" is required (not null)
            if (eligibleUnits == null)
            {
                throw new ArgumentNullException("eligibleUnits is a required property for EligibilityCalculation and cannot be null");
            }
            this.EligibleUnits = eligibleUnits;
        }

        /// <summary>
        /// Gets or Sets EntitlementDate
        /// </summary>
        [DataMember(Name = "entitlementDate", IsRequired = true, EmitDefaultValue = true)]
        public string EntitlementDate { get; set; }

        /// <summary>
        /// Gets or Sets EligibleUnits
        /// </summary>
        [DataMember(Name = "eligibleUnits", IsRequired = true, EmitDefaultValue = true)]
        public string EligibleUnits { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EligibilityCalculation {\n");
            sb.Append("  EntitlementDate: ").Append(EntitlementDate).Append("\n");
            sb.Append("  EligibleUnits: ").Append(EligibleUnits).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as EligibilityCalculation);
        }

        /// <summary>
        /// Returns true if EligibilityCalculation instances are equal
        /// </summary>
        /// <param name="input">Instance of EligibilityCalculation to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EligibilityCalculation input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.EntitlementDate == input.EntitlementDate ||
                    (this.EntitlementDate != null &&
                    this.EntitlementDate.Equals(input.EntitlementDate))
                ) && 
                (
                    this.EligibleUnits == input.EligibleUnits ||
                    (this.EligibleUnits != null &&
                    this.EligibleUnits.Equals(input.EligibleUnits))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.EntitlementDate != null)
                {
                    hashCode = (hashCode * 59) + this.EntitlementDate.GetHashCode();
                }
                if (this.EligibleUnits != null)
                {
                    hashCode = (hashCode * 59) + this.EligibleUnits.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // EntitlementDate (string) minLength
            if (this.EntitlementDate != null && this.EntitlementDate.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for EntitlementDate, length must be greater than 1.", new [] { "EntitlementDate" });
            }

            // EligibleUnits (string) minLength
            if (this.EligibleUnits != null && this.EligibleUnits.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for EligibleUnits, length must be greater than 1.", new [] { "EligibleUnits" });
            }

            yield break;
        }
    }
}
