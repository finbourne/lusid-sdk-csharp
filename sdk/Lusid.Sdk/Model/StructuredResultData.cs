/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Lusid.Sdk.Client.OpenAPIDateConverter;

namespace Lusid.Sdk.Model
{
    /// <summary>
    /// An item of structured result data that is to be inserted into Lusid. This will typically be a Json or Xml document that  contains a set of result data appropriate to a specific entity such as an instrument or potentially an index.
    /// </summary>
    [DataContract(Name = "StructuredResultData")]
    public partial class StructuredResultData : IEquatable<StructuredResultData>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="StructuredResultData" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected StructuredResultData() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="StructuredResultData" /> class.
        /// </summary>
        /// <param name="documentFormat">The format of the accompanying document. (required).</param>
        /// <param name="varVersion">The semantic version of the document format; MAJOR.MINOR.PATCH.</param>
        /// <param name="name">The name or description for the document.</param>
        /// <param name="document">The document that will be stored (or retrieved) and which describes a unit result data entity such as a set of prices or yields (required).</param>
        /// <param name="dataMapKey">dataMapKey.</param>
        public StructuredResultData(string documentFormat = default(string), string varVersion = default(string), string name = default(string), string document = default(string), DataMapKey dataMapKey = default(DataMapKey))
        {
            // to ensure "documentFormat" is required (not null)
            if (documentFormat == null)
            {
                throw new ArgumentNullException("documentFormat is a required property for StructuredResultData and cannot be null");
            }
            this.DocumentFormat = documentFormat;
            // to ensure "document" is required (not null)
            if (document == null)
            {
                throw new ArgumentNullException("document is a required property for StructuredResultData and cannot be null");
            }
            this.Document = document;
            this.VarVersion = varVersion;
            this.Name = name;
            this.DataMapKey = dataMapKey;
        }

        /// <summary>
        /// The format of the accompanying document.
        /// </summary>
        /// <value>The format of the accompanying document.</value>
        [DataMember(Name = "documentFormat", IsRequired = true, EmitDefaultValue = true)]
        public string DocumentFormat { get; set; }

        /// <summary>
        /// The semantic version of the document format; MAJOR.MINOR.PATCH
        /// </summary>
        /// <value>The semantic version of the document format; MAJOR.MINOR.PATCH</value>
        [DataMember(Name = "version", EmitDefaultValue = true)]
        public string VarVersion { get; set; }

        /// <summary>
        /// The name or description for the document
        /// </summary>
        /// <value>The name or description for the document</value>
        [DataMember(Name = "name", EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// The document that will be stored (or retrieved) and which describes a unit result data entity such as a set of prices or yields
        /// </summary>
        /// <value>The document that will be stored (or retrieved) and which describes a unit result data entity such as a set of prices or yields</value>
        [DataMember(Name = "document", IsRequired = true, EmitDefaultValue = true)]
        public string Document { get; set; }

        /// <summary>
        /// Gets or Sets DataMapKey
        /// </summary>
        [DataMember(Name = "dataMapKey", EmitDefaultValue = false)]
        public DataMapKey DataMapKey { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class StructuredResultData {\n");
            sb.Append("  DocumentFormat: ").Append(DocumentFormat).Append("\n");
            sb.Append("  VarVersion: ").Append(VarVersion).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Document: ").Append(Document).Append("\n");
            sb.Append("  DataMapKey: ").Append(DataMapKey).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as StructuredResultData);
        }

        /// <summary>
        /// Returns true if StructuredResultData instances are equal
        /// </summary>
        /// <param name="input">Instance of StructuredResultData to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(StructuredResultData input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.DocumentFormat == input.DocumentFormat ||
                    (this.DocumentFormat != null &&
                    this.DocumentFormat.Equals(input.DocumentFormat))
                ) && 
                (
                    this.VarVersion == input.VarVersion ||
                    (this.VarVersion != null &&
                    this.VarVersion.Equals(input.VarVersion))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Document == input.Document ||
                    (this.Document != null &&
                    this.Document.Equals(input.Document))
                ) && 
                (
                    this.DataMapKey == input.DataMapKey ||
                    (this.DataMapKey != null &&
                    this.DataMapKey.Equals(input.DataMapKey))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.DocumentFormat != null)
                {
                    hashCode = (hashCode * 59) + this.DocumentFormat.GetHashCode();
                }
                if (this.VarVersion != null)
                {
                    hashCode = (hashCode * 59) + this.VarVersion.GetHashCode();
                }
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.Document != null)
                {
                    hashCode = (hashCode * 59) + this.Document.GetHashCode();
                }
                if (this.DataMapKey != null)
                {
                    hashCode = (hashCode * 59) + this.DataMapKey.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // DocumentFormat (string) maxLength
            if (this.DocumentFormat != null && this.DocumentFormat.Length > 128)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for DocumentFormat, length must be less than 128.", new [] { "DocumentFormat" });
            }

            // DocumentFormat (string) minLength
            if (this.DocumentFormat != null && this.DocumentFormat.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for DocumentFormat, length must be greater than 0.", new [] { "DocumentFormat" });
            }

            // Name (string) maxLength
            if (this.Name != null && this.Name.Length > 256)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Name, length must be less than 256.", new [] { "Name" });
            }

            // Name (string) minLength
            if (this.Name != null && this.Name.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Name, length must be greater than 1.", new [] { "Name" });
            }

            // Document (string) maxLength
            if (this.Document != null && this.Document.Length > 1000000)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Document, length must be less than 1000000.", new [] { "Document" });
            }

            // Document (string) minLength
            if (this.Document != null && this.Document.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Document, length must be greater than 0.", new [] { "Document" });
            }

            yield break;
        }
    }
}
