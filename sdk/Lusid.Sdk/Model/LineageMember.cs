/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Lusid.Sdk.Client.OpenAPIDateConverter;

namespace Lusid.Sdk.Model
{
    /// <summary>
    /// LineageMember
    /// </summary>
    [DataContract(Name = "LineageMember")]
    public partial class LineageMember : IEquatable<LineageMember>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LineageMember" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected LineageMember() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="LineageMember" /> class.
        /// </summary>
        /// <param name="index">Index to demonstrate position of lineage member in overall lineage (required).</param>
        /// <param name="label">Label of the step corresponding to this lineage member (required).</param>
        /// <param name="subLabel">SubLabel of the step corresponding to this lineage member (required).</param>
        public LineageMember(int index = default(int), string label = default(string), string subLabel = default(string))
        {
            this.Index = index;
            // to ensure "label" is required (not null)
            if (label == null)
            {
                throw new ArgumentNullException("label is a required property for LineageMember and cannot be null");
            }
            this.Label = label;
            // to ensure "subLabel" is required (not null)
            if (subLabel == null)
            {
                throw new ArgumentNullException("subLabel is a required property for LineageMember and cannot be null");
            }
            this.SubLabel = subLabel;
        }

        /// <summary>
        /// Index to demonstrate position of lineage member in overall lineage
        /// </summary>
        /// <value>Index to demonstrate position of lineage member in overall lineage</value>
        [DataMember(Name = "index", IsRequired = true, EmitDefaultValue = true)]
        public int Index { get; set; }

        /// <summary>
        /// Label of the step corresponding to this lineage member
        /// </summary>
        /// <value>Label of the step corresponding to this lineage member</value>
        [DataMember(Name = "label", IsRequired = true, EmitDefaultValue = true)]
        public string Label { get; set; }

        /// <summary>
        /// SubLabel of the step corresponding to this lineage member
        /// </summary>
        /// <value>SubLabel of the step corresponding to this lineage member</value>
        [DataMember(Name = "subLabel", IsRequired = true, EmitDefaultValue = true)]
        public string SubLabel { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class LineageMember {\n");
            sb.Append("  Index: ").Append(Index).Append("\n");
            sb.Append("  Label: ").Append(Label).Append("\n");
            sb.Append("  SubLabel: ").Append(SubLabel).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as LineageMember);
        }

        /// <summary>
        /// Returns true if LineageMember instances are equal
        /// </summary>
        /// <param name="input">Instance of LineageMember to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LineageMember input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Index == input.Index ||
                    this.Index.Equals(input.Index)
                ) && 
                (
                    this.Label == input.Label ||
                    (this.Label != null &&
                    this.Label.Equals(input.Label))
                ) && 
                (
                    this.SubLabel == input.SubLabel ||
                    (this.SubLabel != null &&
                    this.SubLabel.Equals(input.SubLabel))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Index.GetHashCode();
                if (this.Label != null)
                {
                    hashCode = (hashCode * 59) + this.Label.GetHashCode();
                }
                if (this.SubLabel != null)
                {
                    hashCode = (hashCode * 59) + this.SubLabel.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Label (string) maxLength
            if (this.Label != null && this.Label.Length > 6000)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Label, length must be less than 6000.", new [] { "Label" });
            }

            // Label (string) minLength
            if (this.Label != null && this.Label.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Label, length must be greater than 0.", new [] { "Label" });
            }

            // SubLabel (string) maxLength
            if (this.SubLabel != null && this.SubLabel.Length > 6000)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SubLabel, length must be less than 6000.", new [] { "SubLabel" });
            }

            // SubLabel (string) minLength
            if (this.SubLabel != null && this.SubLabel.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SubLabel, length must be greater than 0.", new [] { "SubLabel" });
            }

            yield break;
        }
    }
}
