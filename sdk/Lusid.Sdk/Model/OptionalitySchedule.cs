/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using JsonSubTypes;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Lusid.Sdk.Client.OpenAPIDateConverter;

namespace Lusid.Sdk.Model
{
    /// <summary>
    /// Optionality Schedule represents a class for creation of schedules for optionality (call, put)
    /// </summary>
    [DataContract(Name = "OptionalitySchedule")]
    [JsonConverter(typeof(JsonSubtypes), "ScheduleType")]
    public partial class OptionalitySchedule : Schedule, IEquatable<OptionalitySchedule>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="OptionalitySchedule" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected OptionalitySchedule() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="OptionalitySchedule" /> class.
        /// </summary>
        /// <param name="exerciseType">The exercise type of the optionality schedule (American or European).  For American type, the bond is perpetually callable from a given exercise date until it matures, or the next date in the schedule.  For European type, the bond is only callable on a given exercise date.    Supported string (enumeration) values are: [European, American]..</param>
        /// <param name="optionEntries">The dates at which the bond call/put may be actioned, and associated strikes..</param>
        /// <param name="optionType">Type of optionality for the schedule.    Supported string (enumeration) values are: [Call, Put]..</param>
        /// <param name="scheduleType">The available values are: FixedSchedule, FloatSchedule, OptionalitySchedule, StepSchedule, Exercise, FxRateSchedule, FxLinkedNotionalSchedule, BondConversionSchedule, Invalid (required) (default to &quot;OptionalitySchedule&quot;).</param>
        public OptionalitySchedule(string exerciseType = default(string), List<OptionEntry> optionEntries = default(List<OptionEntry>), string optionType = default(string), ScheduleTypeEnum scheduleType = default(ScheduleTypeEnum)) : base(scheduleType)
        {
            this.ExerciseType = exerciseType;
            this.OptionEntries = optionEntries;
            this.OptionType = optionType;
        }

        /// <summary>
        /// The exercise type of the optionality schedule (American or European).  For American type, the bond is perpetually callable from a given exercise date until it matures, or the next date in the schedule.  For European type, the bond is only callable on a given exercise date.    Supported string (enumeration) values are: [European, American].
        /// </summary>
        /// <value>The exercise type of the optionality schedule (American or European).  For American type, the bond is perpetually callable from a given exercise date until it matures, or the next date in the schedule.  For European type, the bond is only callable on a given exercise date.    Supported string (enumeration) values are: [European, American].</value>
        [DataMember(Name = "exerciseType", EmitDefaultValue = true)]
        public string ExerciseType { get; set; }

        /// <summary>
        /// The dates at which the bond call/put may be actioned, and associated strikes.
        /// </summary>
        /// <value>The dates at which the bond call/put may be actioned, and associated strikes.</value>
        [DataMember(Name = "optionEntries", EmitDefaultValue = true)]
        public List<OptionEntry> OptionEntries { get; set; }

        /// <summary>
        /// Type of optionality for the schedule.    Supported string (enumeration) values are: [Call, Put].
        /// </summary>
        /// <value>Type of optionality for the schedule.    Supported string (enumeration) values are: [Call, Put].</value>
        [DataMember(Name = "optionType", EmitDefaultValue = true)]
        public string OptionType { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class OptionalitySchedule {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  ExerciseType: ").Append(ExerciseType).Append("\n");
            sb.Append("  OptionEntries: ").Append(OptionEntries).Append("\n");
            sb.Append("  OptionType: ").Append(OptionType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as OptionalitySchedule);
        }

        /// <summary>
        /// Returns true if OptionalitySchedule instances are equal
        /// </summary>
        /// <param name="input">Instance of OptionalitySchedule to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OptionalitySchedule input)
        {
            if (input == null)
            {
                return false;
            }
            return base.Equals(input) && 
                (
                    this.ExerciseType == input.ExerciseType ||
                    (this.ExerciseType != null &&
                    this.ExerciseType.Equals(input.ExerciseType))
                ) && base.Equals(input) && 
                (
                    this.OptionEntries == input.OptionEntries ||
                    this.OptionEntries != null &&
                    input.OptionEntries != null &&
                    this.OptionEntries.SequenceEqual(input.OptionEntries)
                ) && base.Equals(input) && 
                (
                    this.OptionType == input.OptionType ||
                    (this.OptionType != null &&
                    this.OptionType.Equals(input.OptionType))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = base.GetHashCode();
                if (this.ExerciseType != null)
                {
                    hashCode = (hashCode * 59) + this.ExerciseType.GetHashCode();
                }
                if (this.OptionEntries != null)
                {
                    hashCode = (hashCode * 59) + this.OptionEntries.GetHashCode();
                }
                if (this.OptionType != null)
                {
                    hashCode = (hashCode * 59) + this.OptionType.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            return this.BaseValidate(validationContext);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        protected IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> BaseValidate(ValidationContext validationContext)
        {
            foreach (var x in base.BaseValidate(validationContext))
            {
                yield return x;
            }
            yield break;
        }
    }
}
