/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Lusid.Sdk.Client.OpenAPIDateConverter;

namespace Lusid.Sdk.Model
{
    /// <summary>
    /// Defines a date offset which is relative to some anchor date.
    /// </summary>
    [DataContract(Name = "RelativeDateOffset")]
    public partial class RelativeDateOffset : IEquatable<RelativeDateOffset>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RelativeDateOffset" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected RelativeDateOffset() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="RelativeDateOffset" /> class.
        /// </summary>
        /// <param name="days">The number of business days to add to the anchor date. (required).</param>
        /// <param name="businessDayConvention">The adjustment type to apply to dates that fall upon a non-business day, e.g. modified following or following.    Supported string (enumeration) values are: [NoAdjustment, Previous, P, Following, F, ModifiedPrevious, MP, ModifiedFollowing, MF, HalfMonthModifiedFollowing, Nearest]. (required).</param>
        public RelativeDateOffset(int days = default(int), string businessDayConvention = default(string))
        {
            this.Days = days;
            // to ensure "businessDayConvention" is required (not null)
            if (businessDayConvention == null)
            {
                throw new ArgumentNullException("businessDayConvention is a required property for RelativeDateOffset and cannot be null");
            }
            this.BusinessDayConvention = businessDayConvention;
        }

        /// <summary>
        /// The number of business days to add to the anchor date.
        /// </summary>
        /// <value>The number of business days to add to the anchor date.</value>
        [DataMember(Name = "days", IsRequired = true, EmitDefaultValue = true)]
        public int Days { get; set; }

        /// <summary>
        /// The adjustment type to apply to dates that fall upon a non-business day, e.g. modified following or following.    Supported string (enumeration) values are: [NoAdjustment, Previous, P, Following, F, ModifiedPrevious, MP, ModifiedFollowing, MF, HalfMonthModifiedFollowing, Nearest].
        /// </summary>
        /// <value>The adjustment type to apply to dates that fall upon a non-business day, e.g. modified following or following.    Supported string (enumeration) values are: [NoAdjustment, Previous, P, Following, F, ModifiedPrevious, MP, ModifiedFollowing, MF, HalfMonthModifiedFollowing, Nearest].</value>
        [DataMember(Name = "businessDayConvention", IsRequired = true, EmitDefaultValue = true)]
        public string BusinessDayConvention { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class RelativeDateOffset {\n");
            sb.Append("  Days: ").Append(Days).Append("\n");
            sb.Append("  BusinessDayConvention: ").Append(BusinessDayConvention).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as RelativeDateOffset);
        }

        /// <summary>
        /// Returns true if RelativeDateOffset instances are equal
        /// </summary>
        /// <param name="input">Instance of RelativeDateOffset to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RelativeDateOffset input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Days == input.Days ||
                    this.Days.Equals(input.Days)
                ) && 
                (
                    this.BusinessDayConvention == input.BusinessDayConvention ||
                    (this.BusinessDayConvention != null &&
                    this.BusinessDayConvention.Equals(input.BusinessDayConvention))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Days.GetHashCode();
                if (this.BusinessDayConvention != null)
                {
                    hashCode = (hashCode * 59) + this.BusinessDayConvention.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // BusinessDayConvention (string) minLength
            if (this.BusinessDayConvention != null && this.BusinessDayConvention.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for BusinessDayConvention, length must be greater than 1.", new [] { "BusinessDayConvention" });
            }

            yield break;
        }
    }
}
