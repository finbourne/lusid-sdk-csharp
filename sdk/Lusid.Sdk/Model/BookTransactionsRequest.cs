/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Lusid.Sdk.Client.OpenAPIDateConverter;

namespace Lusid.Sdk.Model
{
    /// <summary>
    /// BookTransactionsRequest
    /// </summary>
    [DataContract(Name = "BookTransactionsRequest")]
    public partial class BookTransactionsRequest : IEquatable<BookTransactionsRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="BookTransactionsRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected BookTransactionsRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="BookTransactionsRequest" /> class.
        /// </summary>
        /// <param name="allocationIds">A collection of Allocation IDs (required).</param>
        /// <param name="transactionProperties">A collection of properties.</param>
        public BookTransactionsRequest(List<ResourceId> allocationIds = default(List<ResourceId>), Dictionary<string, PerpetualProperty> transactionProperties = default(Dictionary<string, PerpetualProperty>))
        {
            // to ensure "allocationIds" is required (not null)
            if (allocationIds == null)
            {
                throw new ArgumentNullException("allocationIds is a required property for BookTransactionsRequest and cannot be null");
            }
            this.AllocationIds = allocationIds;
            this.TransactionProperties = transactionProperties;
        }

        /// <summary>
        /// A collection of Allocation IDs
        /// </summary>
        /// <value>A collection of Allocation IDs</value>
        [DataMember(Name = "allocationIds", IsRequired = true, EmitDefaultValue = true)]
        public List<ResourceId> AllocationIds { get; set; }

        /// <summary>
        /// A collection of properties
        /// </summary>
        /// <value>A collection of properties</value>
        [DataMember(Name = "transactionProperties", EmitDefaultValue = true)]
        public Dictionary<string, PerpetualProperty> TransactionProperties { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class BookTransactionsRequest {\n");
            sb.Append("  AllocationIds: ").Append(AllocationIds).Append("\n");
            sb.Append("  TransactionProperties: ").Append(TransactionProperties).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as BookTransactionsRequest);
        }

        /// <summary>
        /// Returns true if BookTransactionsRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of BookTransactionsRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BookTransactionsRequest input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.AllocationIds == input.AllocationIds ||
                    this.AllocationIds != null &&
                    input.AllocationIds != null &&
                    this.AllocationIds.SequenceEqual(input.AllocationIds)
                ) && 
                (
                    this.TransactionProperties == input.TransactionProperties ||
                    this.TransactionProperties != null &&
                    input.TransactionProperties != null &&
                    this.TransactionProperties.SequenceEqual(input.TransactionProperties)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AllocationIds != null)
                {
                    hashCode = (hashCode * 59) + this.AllocationIds.GetHashCode();
                }
                if (this.TransactionProperties != null)
                {
                    hashCode = (hashCode * 59) + this.TransactionProperties.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
