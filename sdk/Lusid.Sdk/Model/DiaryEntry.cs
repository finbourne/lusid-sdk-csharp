/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Lusid.Sdk.Client.OpenAPIDateConverter;

namespace Lusid.Sdk.Model
{
    /// <summary>
    /// DiaryEntry
    /// </summary>
    [DataContract(Name = "DiaryEntry")]
    public partial class DiaryEntry : IEquatable<DiaryEntry>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DiaryEntry" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected DiaryEntry() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="DiaryEntry" /> class.
        /// </summary>
        /// <param name="href">The specific Uniform Resource Identifier (URI) for this resource at the requested effective and asAt datetime..</param>
        /// <param name="aborId">aborId.</param>
        /// <param name="diaryEntryCode">The code of the diary entry..</param>
        /// <param name="type">The type of the diary entry. (required).</param>
        /// <param name="name">The name of the diary entry..</param>
        /// <param name="status">The status of the diary entry. Statuses are constrained and defaulted by &#39;Type&#39; specified.   Type &#39;Other&#39; defaults to &#39;Undefined&#39; and supports &#39;Undefined&#39;, &#39;Estimate&#39;, &#39;Candidate&#39;, and &#39;Final&#39;.  Type &#39;PeriodBoundary&#39; defaults to &#39;Estimate&#39; when closing a period, and supports &#39;Estimate&#39; and &#39;Final&#39; for closing periods and &#39;Final&#39; for locking periods.  Type &#39;ValuationPoint&#39; defaults to &#39;Estimate&#39; when upserting a diary entry, moves to &#39;Candidate&#39; or &#39;Final&#39; when a ValuationPoint is accepted, and &#39;Final&#39; when it is finalised. (required).</param>
        /// <param name="effectiveAt">The effective time of the diary entry. (required).</param>
        /// <param name="queryAsAt">The query time of the diary entry. Defaults to latest..</param>
        /// <param name="previousEntryTime">The entry time of the previous diary entry..</param>
        /// <param name="properties">A set of properties for the diary entry..</param>
        /// <param name="varVersion">varVersion.</param>
        /// <param name="links">links.</param>
        public DiaryEntry(string href = default(string), ResourceId aborId = default(ResourceId), string diaryEntryCode = default(string), string type = default(string), string name = default(string), string status = default(string), DateTimeOffset effectiveAt = default(DateTimeOffset), DateTimeOffset queryAsAt = default(DateTimeOffset), DateTimeOffset previousEntryTime = default(DateTimeOffset), Dictionary<string, Property> properties = default(Dictionary<string, Property>), ModelVersion varVersion = default(ModelVersion), List<Link> links = default(List<Link>))
        {
            // to ensure "type" is required (not null)
            if (type == null)
            {
                throw new ArgumentNullException("type is a required property for DiaryEntry and cannot be null");
            }
            this.Type = type;
            // to ensure "status" is required (not null)
            if (status == null)
            {
                throw new ArgumentNullException("status is a required property for DiaryEntry and cannot be null");
            }
            this.Status = status;
            this.EffectiveAt = effectiveAt;
            this.Href = href;
            this.AborId = aborId;
            this.DiaryEntryCode = diaryEntryCode;
            this.Name = name;
            this.QueryAsAt = queryAsAt;
            this.PreviousEntryTime = previousEntryTime;
            this.Properties = properties;
            this.VarVersion = varVersion;
            this.Links = links;
        }

        /// <summary>
        /// The specific Uniform Resource Identifier (URI) for this resource at the requested effective and asAt datetime.
        /// </summary>
        /// <value>The specific Uniform Resource Identifier (URI) for this resource at the requested effective and asAt datetime.</value>
        [DataMember(Name = "href", EmitDefaultValue = true)]
        public string Href { get; set; }

        /// <summary>
        /// Gets or Sets AborId
        /// </summary>
        [DataMember(Name = "aborId", EmitDefaultValue = false)]
        public ResourceId AborId { get; set; }

        /// <summary>
        /// The code of the diary entry.
        /// </summary>
        /// <value>The code of the diary entry.</value>
        [DataMember(Name = "diaryEntryCode", EmitDefaultValue = true)]
        public string DiaryEntryCode { get; set; }

        /// <summary>
        /// The type of the diary entry.
        /// </summary>
        /// <value>The type of the diary entry.</value>
        [DataMember(Name = "type", IsRequired = true, EmitDefaultValue = true)]
        public string Type { get; set; }

        /// <summary>
        /// The name of the diary entry.
        /// </summary>
        /// <value>The name of the diary entry.</value>
        [DataMember(Name = "name", EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// The status of the diary entry. Statuses are constrained and defaulted by &#39;Type&#39; specified.   Type &#39;Other&#39; defaults to &#39;Undefined&#39; and supports &#39;Undefined&#39;, &#39;Estimate&#39;, &#39;Candidate&#39;, and &#39;Final&#39;.  Type &#39;PeriodBoundary&#39; defaults to &#39;Estimate&#39; when closing a period, and supports &#39;Estimate&#39; and &#39;Final&#39; for closing periods and &#39;Final&#39; for locking periods.  Type &#39;ValuationPoint&#39; defaults to &#39;Estimate&#39; when upserting a diary entry, moves to &#39;Candidate&#39; or &#39;Final&#39; when a ValuationPoint is accepted, and &#39;Final&#39; when it is finalised.
        /// </summary>
        /// <value>The status of the diary entry. Statuses are constrained and defaulted by &#39;Type&#39; specified.   Type &#39;Other&#39; defaults to &#39;Undefined&#39; and supports &#39;Undefined&#39;, &#39;Estimate&#39;, &#39;Candidate&#39;, and &#39;Final&#39;.  Type &#39;PeriodBoundary&#39; defaults to &#39;Estimate&#39; when closing a period, and supports &#39;Estimate&#39; and &#39;Final&#39; for closing periods and &#39;Final&#39; for locking periods.  Type &#39;ValuationPoint&#39; defaults to &#39;Estimate&#39; when upserting a diary entry, moves to &#39;Candidate&#39; or &#39;Final&#39; when a ValuationPoint is accepted, and &#39;Final&#39; when it is finalised.</value>
        [DataMember(Name = "status", IsRequired = true, EmitDefaultValue = true)]
        public string Status { get; set; }

        /// <summary>
        /// The effective time of the diary entry.
        /// </summary>
        /// <value>The effective time of the diary entry.</value>
        [DataMember(Name = "effectiveAt", IsRequired = true, EmitDefaultValue = true)]
        public DateTimeOffset EffectiveAt { get; set; }

        /// <summary>
        /// The query time of the diary entry. Defaults to latest.
        /// </summary>
        /// <value>The query time of the diary entry. Defaults to latest.</value>
        [DataMember(Name = "queryAsAt", EmitDefaultValue = false)]
        public DateTimeOffset QueryAsAt { get; set; }

        /// <summary>
        /// The entry time of the previous diary entry.
        /// </summary>
        /// <value>The entry time of the previous diary entry.</value>
        [DataMember(Name = "previousEntryTime", EmitDefaultValue = false)]
        public DateTimeOffset PreviousEntryTime { get; set; }

        /// <summary>
        /// A set of properties for the diary entry.
        /// </summary>
        /// <value>A set of properties for the diary entry.</value>
        [DataMember(Name = "properties", EmitDefaultValue = true)]
        public Dictionary<string, Property> Properties { get; set; }

        /// <summary>
        /// Gets or Sets VarVersion
        /// </summary>
        [DataMember(Name = "version", EmitDefaultValue = false)]
        public ModelVersion VarVersion { get; set; }

        /// <summary>
        /// Gets or Sets Links
        /// </summary>
        [DataMember(Name = "links", EmitDefaultValue = true)]
        public List<Link> Links { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DiaryEntry {\n");
            sb.Append("  Href: ").Append(Href).Append("\n");
            sb.Append("  AborId: ").Append(AborId).Append("\n");
            sb.Append("  DiaryEntryCode: ").Append(DiaryEntryCode).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  EffectiveAt: ").Append(EffectiveAt).Append("\n");
            sb.Append("  QueryAsAt: ").Append(QueryAsAt).Append("\n");
            sb.Append("  PreviousEntryTime: ").Append(PreviousEntryTime).Append("\n");
            sb.Append("  Properties: ").Append(Properties).Append("\n");
            sb.Append("  VarVersion: ").Append(VarVersion).Append("\n");
            sb.Append("  Links: ").Append(Links).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DiaryEntry);
        }

        /// <summary>
        /// Returns true if DiaryEntry instances are equal
        /// </summary>
        /// <param name="input">Instance of DiaryEntry to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DiaryEntry input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Href == input.Href ||
                    (this.Href != null &&
                    this.Href.Equals(input.Href))
                ) && 
                (
                    this.AborId == input.AborId ||
                    (this.AborId != null &&
                    this.AborId.Equals(input.AborId))
                ) && 
                (
                    this.DiaryEntryCode == input.DiaryEntryCode ||
                    (this.DiaryEntryCode != null &&
                    this.DiaryEntryCode.Equals(input.DiaryEntryCode))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.EffectiveAt == input.EffectiveAt ||
                    (this.EffectiveAt != null &&
                    this.EffectiveAt.Equals(input.EffectiveAt))
                ) && 
                (
                    this.QueryAsAt == input.QueryAsAt ||
                    (this.QueryAsAt != null &&
                    this.QueryAsAt.Equals(input.QueryAsAt))
                ) && 
                (
                    this.PreviousEntryTime == input.PreviousEntryTime ||
                    (this.PreviousEntryTime != null &&
                    this.PreviousEntryTime.Equals(input.PreviousEntryTime))
                ) && 
                (
                    this.Properties == input.Properties ||
                    this.Properties != null &&
                    input.Properties != null &&
                    this.Properties.SequenceEqual(input.Properties)
                ) && 
                (
                    this.VarVersion == input.VarVersion ||
                    (this.VarVersion != null &&
                    this.VarVersion.Equals(input.VarVersion))
                ) && 
                (
                    this.Links == input.Links ||
                    this.Links != null &&
                    input.Links != null &&
                    this.Links.SequenceEqual(input.Links)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Href != null)
                {
                    hashCode = (hashCode * 59) + this.Href.GetHashCode();
                }
                if (this.AborId != null)
                {
                    hashCode = (hashCode * 59) + this.AborId.GetHashCode();
                }
                if (this.DiaryEntryCode != null)
                {
                    hashCode = (hashCode * 59) + this.DiaryEntryCode.GetHashCode();
                }
                if (this.Type != null)
                {
                    hashCode = (hashCode * 59) + this.Type.GetHashCode();
                }
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.Status != null)
                {
                    hashCode = (hashCode * 59) + this.Status.GetHashCode();
                }
                if (this.EffectiveAt != null)
                {
                    hashCode = (hashCode * 59) + this.EffectiveAt.GetHashCode();
                }
                if (this.QueryAsAt != null)
                {
                    hashCode = (hashCode * 59) + this.QueryAsAt.GetHashCode();
                }
                if (this.PreviousEntryTime != null)
                {
                    hashCode = (hashCode * 59) + this.PreviousEntryTime.GetHashCode();
                }
                if (this.Properties != null)
                {
                    hashCode = (hashCode * 59) + this.Properties.GetHashCode();
                }
                if (this.VarVersion != null)
                {
                    hashCode = (hashCode * 59) + this.VarVersion.GetHashCode();
                }
                if (this.Links != null)
                {
                    hashCode = (hashCode * 59) + this.Links.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Type (string) minLength
            if (this.Type != null && this.Type.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Type, length must be greater than 1.", new [] { "Type" });
            }

            // Name (string) maxLength
            if (this.Name != null && this.Name.Length > 256)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Name, length must be less than 256.", new [] { "Name" });
            }

            // Name (string) minLength
            if (this.Name != null && this.Name.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Name, length must be greater than 1.", new [] { "Name" });
            }

            // Name (string) pattern
            Regex regexName = new Regex(@"^[^\\<>&\""]+$", RegexOptions.CultureInvariant);
            if (false == regexName.Match(this.Name).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Name, must match a pattern of " + regexName, new [] { "Name" });
            }

            // Status (string) minLength
            if (this.Status != null && this.Status.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Status, length must be greater than 1.", new [] { "Status" });
            }

            yield break;
        }
    }
}
