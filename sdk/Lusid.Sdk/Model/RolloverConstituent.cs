/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Lusid.Sdk.Client.OpenAPIDateConverter;

namespace Lusid.Sdk.Model
{
    /// <summary>
    /// RolloverConstituent
    /// </summary>
    [DataContract(Name = "RolloverConstituent")]
    public partial class RolloverConstituent : IEquatable<RolloverConstituent>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RolloverConstituent" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected RolloverConstituent() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="RolloverConstituent" /> class.
        /// </summary>
        /// <param name="contractDetails">contractDetails (required).</param>
        /// <param name="balanceChange">Balance of the new contract holding. (required).</param>
        public RolloverConstituent(ContractDetails contractDetails = default(ContractDetails), decimal balanceChange = default(decimal))
        {
            // to ensure "contractDetails" is required (not null)
            if (contractDetails == null)
            {
                throw new ArgumentNullException("contractDetails is a required property for RolloverConstituent and cannot be null");
            }
            this.ContractDetails = contractDetails;
            this.BalanceChange = balanceChange;
        }

        /// <summary>
        /// Gets or Sets ContractDetails
        /// </summary>
        [DataMember(Name = "contractDetails", IsRequired = true, EmitDefaultValue = true)]
        public ContractDetails ContractDetails { get; set; }

        /// <summary>
        /// Balance of the new contract holding.
        /// </summary>
        /// <value>Balance of the new contract holding.</value>
        [DataMember(Name = "balanceChange", IsRequired = true, EmitDefaultValue = true)]
        public decimal BalanceChange { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class RolloverConstituent {\n");
            sb.Append("  ContractDetails: ").Append(ContractDetails).Append("\n");
            sb.Append("  BalanceChange: ").Append(BalanceChange).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as RolloverConstituent);
        }

        /// <summary>
        /// Returns true if RolloverConstituent instances are equal
        /// </summary>
        /// <param name="input">Instance of RolloverConstituent to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RolloverConstituent input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.ContractDetails == input.ContractDetails ||
                    (this.ContractDetails != null &&
                    this.ContractDetails.Equals(input.ContractDetails))
                ) && 
                (
                    this.BalanceChange == input.BalanceChange ||
                    this.BalanceChange.Equals(input.BalanceChange)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ContractDetails != null)
                {
                    hashCode = (hashCode * 59) + this.ContractDetails.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.BalanceChange.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
