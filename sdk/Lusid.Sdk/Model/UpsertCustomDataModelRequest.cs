/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Lusid.Sdk.Client.OpenAPIDateConverter;

namespace Lusid.Sdk.Model
{
    /// <summary>
    /// UpsertCustomDataModelRequest
    /// </summary>
    [DataContract(Name = "UpsertCustomDataModelRequest")]
    public partial class UpsertCustomDataModelRequest : IEquatable<UpsertCustomDataModelRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UpsertCustomDataModelRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected UpsertCustomDataModelRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="UpsertCustomDataModelRequest" /> class.
        /// </summary>
        /// <param name="displayName">The name of the Custom Data Model. (required).</param>
        /// <param name="description">A description for the Custom Data Model. (required).</param>
        /// <param name="parentDataModel">parentDataModel.</param>
        /// <param name="conditions">The conditions that the bound entity must meet to be valid..</param>
        /// <param name="properties">The properties that are required or allowed on the bound entity..</param>
        /// <param name="identifierTypes">The identifier types that are required or allowed on the bound entity..</param>
        /// <param name="attributeAliases">The aliases for property keys, identifier types, and fields on the bound entity..</param>
        /// <param name="recommendedSortBy">The preferred default sorting instructions..</param>
        public UpsertCustomDataModelRequest(string displayName = default(string), string description = default(string), ResourceId parentDataModel = default(ResourceId), string conditions = default(string), List<CustomDataModelPropertySpecification> properties = default(List<CustomDataModelPropertySpecification>), List<CustomDataModelIdentifierTypeSpecification> identifierTypes = default(List<CustomDataModelIdentifierTypeSpecification>), List<Alias> attributeAliases = default(List<Alias>), List<RecommendedSortBy> recommendedSortBy = default(List<RecommendedSortBy>))
        {
            // to ensure "displayName" is required (not null)
            if (displayName == null)
            {
                throw new ArgumentNullException("displayName is a required property for UpsertCustomDataModelRequest and cannot be null");
            }
            this.DisplayName = displayName;
            // to ensure "description" is required (not null)
            if (description == null)
            {
                throw new ArgumentNullException("description is a required property for UpsertCustomDataModelRequest and cannot be null");
            }
            this.Description = description;
            this.ParentDataModel = parentDataModel;
            this.Conditions = conditions;
            this.Properties = properties;
            this.IdentifierTypes = identifierTypes;
            this.AttributeAliases = attributeAliases;
            this.RecommendedSortBy = recommendedSortBy;
        }

        /// <summary>
        /// The name of the Custom Data Model.
        /// </summary>
        /// <value>The name of the Custom Data Model.</value>
        [DataMember(Name = "displayName", IsRequired = true, EmitDefaultValue = true)]
        public string DisplayName { get; set; }

        /// <summary>
        /// A description for the Custom Data Model.
        /// </summary>
        /// <value>A description for the Custom Data Model.</value>
        [DataMember(Name = "description", IsRequired = true, EmitDefaultValue = true)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets ParentDataModel
        /// </summary>
        [DataMember(Name = "parentDataModel", EmitDefaultValue = false)]
        public ResourceId ParentDataModel { get; set; }

        /// <summary>
        /// The conditions that the bound entity must meet to be valid.
        /// </summary>
        /// <value>The conditions that the bound entity must meet to be valid.</value>
        [DataMember(Name = "conditions", EmitDefaultValue = true)]
        public string Conditions { get; set; }

        /// <summary>
        /// The properties that are required or allowed on the bound entity.
        /// </summary>
        /// <value>The properties that are required or allowed on the bound entity.</value>
        [DataMember(Name = "properties", EmitDefaultValue = true)]
        public List<CustomDataModelPropertySpecification> Properties { get; set; }

        /// <summary>
        /// The identifier types that are required or allowed on the bound entity.
        /// </summary>
        /// <value>The identifier types that are required or allowed on the bound entity.</value>
        [DataMember(Name = "identifierTypes", EmitDefaultValue = true)]
        public List<CustomDataModelIdentifierTypeSpecification> IdentifierTypes { get; set; }

        /// <summary>
        /// The aliases for property keys, identifier types, and fields on the bound entity.
        /// </summary>
        /// <value>The aliases for property keys, identifier types, and fields on the bound entity.</value>
        [DataMember(Name = "attributeAliases", EmitDefaultValue = true)]
        public List<Alias> AttributeAliases { get; set; }

        /// <summary>
        /// The preferred default sorting instructions.
        /// </summary>
        /// <value>The preferred default sorting instructions.</value>
        [DataMember(Name = "recommendedSortBy", EmitDefaultValue = true)]
        public List<RecommendedSortBy> RecommendedSortBy { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class UpsertCustomDataModelRequest {\n");
            sb.Append("  DisplayName: ").Append(DisplayName).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  ParentDataModel: ").Append(ParentDataModel).Append("\n");
            sb.Append("  Conditions: ").Append(Conditions).Append("\n");
            sb.Append("  Properties: ").Append(Properties).Append("\n");
            sb.Append("  IdentifierTypes: ").Append(IdentifierTypes).Append("\n");
            sb.Append("  AttributeAliases: ").Append(AttributeAliases).Append("\n");
            sb.Append("  RecommendedSortBy: ").Append(RecommendedSortBy).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as UpsertCustomDataModelRequest);
        }

        /// <summary>
        /// Returns true if UpsertCustomDataModelRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of UpsertCustomDataModelRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UpsertCustomDataModelRequest input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.DisplayName == input.DisplayName ||
                    (this.DisplayName != null &&
                    this.DisplayName.Equals(input.DisplayName))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.ParentDataModel == input.ParentDataModel ||
                    (this.ParentDataModel != null &&
                    this.ParentDataModel.Equals(input.ParentDataModel))
                ) && 
                (
                    this.Conditions == input.Conditions ||
                    (this.Conditions != null &&
                    this.Conditions.Equals(input.Conditions))
                ) && 
                (
                    this.Properties == input.Properties ||
                    this.Properties != null &&
                    input.Properties != null &&
                    this.Properties.SequenceEqual(input.Properties)
                ) && 
                (
                    this.IdentifierTypes == input.IdentifierTypes ||
                    this.IdentifierTypes != null &&
                    input.IdentifierTypes != null &&
                    this.IdentifierTypes.SequenceEqual(input.IdentifierTypes)
                ) && 
                (
                    this.AttributeAliases == input.AttributeAliases ||
                    this.AttributeAliases != null &&
                    input.AttributeAliases != null &&
                    this.AttributeAliases.SequenceEqual(input.AttributeAliases)
                ) && 
                (
                    this.RecommendedSortBy == input.RecommendedSortBy ||
                    this.RecommendedSortBy != null &&
                    input.RecommendedSortBy != null &&
                    this.RecommendedSortBy.SequenceEqual(input.RecommendedSortBy)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.DisplayName != null)
                {
                    hashCode = (hashCode * 59) + this.DisplayName.GetHashCode();
                }
                if (this.Description != null)
                {
                    hashCode = (hashCode * 59) + this.Description.GetHashCode();
                }
                if (this.ParentDataModel != null)
                {
                    hashCode = (hashCode * 59) + this.ParentDataModel.GetHashCode();
                }
                if (this.Conditions != null)
                {
                    hashCode = (hashCode * 59) + this.Conditions.GetHashCode();
                }
                if (this.Properties != null)
                {
                    hashCode = (hashCode * 59) + this.Properties.GetHashCode();
                }
                if (this.IdentifierTypes != null)
                {
                    hashCode = (hashCode * 59) + this.IdentifierTypes.GetHashCode();
                }
                if (this.AttributeAliases != null)
                {
                    hashCode = (hashCode * 59) + this.AttributeAliases.GetHashCode();
                }
                if (this.RecommendedSortBy != null)
                {
                    hashCode = (hashCode * 59) + this.RecommendedSortBy.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // DisplayName (string) maxLength
            if (this.DisplayName != null && this.DisplayName.Length > 512)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for DisplayName, length must be less than 512.", new [] { "DisplayName" });
            }

            // DisplayName (string) minLength
            if (this.DisplayName != null && this.DisplayName.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for DisplayName, length must be greater than 0.", new [] { "DisplayName" });
            }

            // DisplayName (string) pattern
            Regex regexDisplayName = new Regex(@"^[\s\S]*$", RegexOptions.CultureInvariant);
            if (false == regexDisplayName.Match(this.DisplayName).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for DisplayName, must match a pattern of " + regexDisplayName, new [] { "DisplayName" });
            }

            // Description (string) maxLength
            if (this.Description != null && this.Description.Length > 512)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Description, length must be less than 512.", new [] { "Description" });
            }

            // Description (string) minLength
            if (this.Description != null && this.Description.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Description, length must be greater than 0.", new [] { "Description" });
            }

            // Description (string) pattern
            Regex regexDescription = new Regex(@"^[\s\S]*$", RegexOptions.CultureInvariant);
            if (false == regexDescription.Match(this.Description).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Description, must match a pattern of " + regexDescription, new [] { "Description" });
            }

            // Conditions (string) maxLength
            if (this.Conditions != null && this.Conditions.Length > 16384)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Conditions, length must be less than 16384.", new [] { "Conditions" });
            }

            // Conditions (string) minLength
            if (this.Conditions != null && this.Conditions.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Conditions, length must be greater than 0.", new [] { "Conditions" });
            }

            // Conditions (string) pattern
            Regex regexConditions = new Regex(@"^[\s\S]*$", RegexOptions.CultureInvariant);
            if (false == regexConditions.Match(this.Conditions).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Conditions, must match a pattern of " + regexConditions, new [] { "Conditions" });
            }

            yield break;
        }
    }
}
