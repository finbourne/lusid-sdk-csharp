/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Lusid.Sdk.Client.OpenAPIDateConverter;

namespace Lusid.Sdk.Model
{
    /// <summary>
    /// CustomDataModelIdentifierTypeSpecificationWithDisplayName
    /// </summary>
    [DataContract(Name = "CustomDataModelIdentifierTypeSpecificationWithDisplayName")]
    public partial class CustomDataModelIdentifierTypeSpecificationWithDisplayName : IEquatable<CustomDataModelIdentifierTypeSpecificationWithDisplayName>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CustomDataModelIdentifierTypeSpecificationWithDisplayName" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CustomDataModelIdentifierTypeSpecificationWithDisplayName() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CustomDataModelIdentifierTypeSpecificationWithDisplayName" /> class.
        /// </summary>
        /// <param name="displayName">The display name of the property definition..</param>
        /// <param name="identifierKey">The identifier type that is required/allowed on the bound entity. (required).</param>
        /// <param name="required">Whether dentifier type is required or allowed..</param>
        public CustomDataModelIdentifierTypeSpecificationWithDisplayName(string displayName = default(string), string identifierKey = default(string), bool required = default(bool))
        {
            // to ensure "identifierKey" is required (not null)
            if (identifierKey == null)
            {
                throw new ArgumentNullException("identifierKey is a required property for CustomDataModelIdentifierTypeSpecificationWithDisplayName and cannot be null");
            }
            this.IdentifierKey = identifierKey;
            this.DisplayName = displayName;
            this.Required = required;
        }

        /// <summary>
        /// The display name of the property definition.
        /// </summary>
        /// <value>The display name of the property definition.</value>
        [DataMember(Name = "displayName", EmitDefaultValue = true)]
        public string DisplayName { get; set; }

        /// <summary>
        /// The identifier type that is required/allowed on the bound entity.
        /// </summary>
        /// <value>The identifier type that is required/allowed on the bound entity.</value>
        [DataMember(Name = "identifierKey", IsRequired = true, EmitDefaultValue = true)]
        public string IdentifierKey { get; set; }

        /// <summary>
        /// Whether dentifier type is required or allowed.
        /// </summary>
        /// <value>Whether dentifier type is required or allowed.</value>
        [DataMember(Name = "required", EmitDefaultValue = true)]
        public bool Required { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CustomDataModelIdentifierTypeSpecificationWithDisplayName {\n");
            sb.Append("  DisplayName: ").Append(DisplayName).Append("\n");
            sb.Append("  IdentifierKey: ").Append(IdentifierKey).Append("\n");
            sb.Append("  Required: ").Append(Required).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CustomDataModelIdentifierTypeSpecificationWithDisplayName);
        }

        /// <summary>
        /// Returns true if CustomDataModelIdentifierTypeSpecificationWithDisplayName instances are equal
        /// </summary>
        /// <param name="input">Instance of CustomDataModelIdentifierTypeSpecificationWithDisplayName to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CustomDataModelIdentifierTypeSpecificationWithDisplayName input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.DisplayName == input.DisplayName ||
                    (this.DisplayName != null &&
                    this.DisplayName.Equals(input.DisplayName))
                ) && 
                (
                    this.IdentifierKey == input.IdentifierKey ||
                    (this.IdentifierKey != null &&
                    this.IdentifierKey.Equals(input.IdentifierKey))
                ) && 
                (
                    this.Required == input.Required ||
                    this.Required.Equals(input.Required)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.DisplayName != null)
                {
                    hashCode = (hashCode * 59) + this.DisplayName.GetHashCode();
                }
                if (this.IdentifierKey != null)
                {
                    hashCode = (hashCode * 59) + this.IdentifierKey.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Required.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
