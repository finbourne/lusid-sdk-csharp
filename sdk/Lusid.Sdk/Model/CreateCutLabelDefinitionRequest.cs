/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Lusid.Sdk.Client.OpenAPIDateConverter;

namespace Lusid.Sdk.Model
{
    /// <summary>
    /// This request specifies a new Cut Label Definition
    /// </summary>
    [DataContract(Name = "CreateCutLabelDefinitionRequest")]
    public partial class CreateCutLabelDefinitionRequest : IEquatable<CreateCutLabelDefinitionRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateCutLabelDefinitionRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CreateCutLabelDefinitionRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateCutLabelDefinitionRequest" /> class.
        /// </summary>
        /// <param name="code">code (required).</param>
        /// <param name="displayName">displayName (required).</param>
        /// <param name="description">description.</param>
        /// <param name="cutLocalTime">cutLocalTime (required).</param>
        /// <param name="varTimeZone">varTimeZone (required).</param>
        public CreateCutLabelDefinitionRequest(string code = default(string), string displayName = default(string), string description = default(string), CutLocalTime cutLocalTime = default(CutLocalTime), string varTimeZone = default(string))
        {
            // to ensure "code" is required (not null)
            if (code == null)
            {
                throw new ArgumentNullException("code is a required property for CreateCutLabelDefinitionRequest and cannot be null");
            }
            this.Code = code;
            // to ensure "displayName" is required (not null)
            if (displayName == null)
            {
                throw new ArgumentNullException("displayName is a required property for CreateCutLabelDefinitionRequest and cannot be null");
            }
            this.DisplayName = displayName;
            // to ensure "cutLocalTime" is required (not null)
            if (cutLocalTime == null)
            {
                throw new ArgumentNullException("cutLocalTime is a required property for CreateCutLabelDefinitionRequest and cannot be null");
            }
            this.CutLocalTime = cutLocalTime;
            // to ensure "varTimeZone" is required (not null)
            if (varTimeZone == null)
            {
                throw new ArgumentNullException("varTimeZone is a required property for CreateCutLabelDefinitionRequest and cannot be null");
            }
            this.VarTimeZone = varTimeZone;
            this.Description = description;
        }

        /// <summary>
        /// Gets or Sets Code
        /// </summary>
        [DataMember(Name = "code", IsRequired = true, EmitDefaultValue = true)]
        public string Code { get; set; }

        /// <summary>
        /// Gets or Sets DisplayName
        /// </summary>
        [DataMember(Name = "displayName", IsRequired = true, EmitDefaultValue = true)]
        public string DisplayName { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name = "description", EmitDefaultValue = true)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets CutLocalTime
        /// </summary>
        [DataMember(Name = "cutLocalTime", IsRequired = true, EmitDefaultValue = true)]
        public CutLocalTime CutLocalTime { get; set; }

        /// <summary>
        /// Gets or Sets VarTimeZone
        /// </summary>
        [DataMember(Name = "timeZone", IsRequired = true, EmitDefaultValue = true)]
        public string VarTimeZone { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CreateCutLabelDefinitionRequest {\n");
            sb.Append("  Code: ").Append(Code).Append("\n");
            sb.Append("  DisplayName: ").Append(DisplayName).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  CutLocalTime: ").Append(CutLocalTime).Append("\n");
            sb.Append("  VarTimeZone: ").Append(VarTimeZone).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CreateCutLabelDefinitionRequest);
        }

        /// <summary>
        /// Returns true if CreateCutLabelDefinitionRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of CreateCutLabelDefinitionRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CreateCutLabelDefinitionRequest input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Code == input.Code ||
                    (this.Code != null &&
                    this.Code.Equals(input.Code))
                ) && 
                (
                    this.DisplayName == input.DisplayName ||
                    (this.DisplayName != null &&
                    this.DisplayName.Equals(input.DisplayName))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.CutLocalTime == input.CutLocalTime ||
                    (this.CutLocalTime != null &&
                    this.CutLocalTime.Equals(input.CutLocalTime))
                ) && 
                (
                    this.VarTimeZone == input.VarTimeZone ||
                    (this.VarTimeZone != null &&
                    this.VarTimeZone.Equals(input.VarTimeZone))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Code != null)
                {
                    hashCode = (hashCode * 59) + this.Code.GetHashCode();
                }
                if (this.DisplayName != null)
                {
                    hashCode = (hashCode * 59) + this.DisplayName.GetHashCode();
                }
                if (this.Description != null)
                {
                    hashCode = (hashCode * 59) + this.Description.GetHashCode();
                }
                if (this.CutLocalTime != null)
                {
                    hashCode = (hashCode * 59) + this.CutLocalTime.GetHashCode();
                }
                if (this.VarTimeZone != null)
                {
                    hashCode = (hashCode * 59) + this.VarTimeZone.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // DisplayName (string) minLength
            if (this.DisplayName != null && this.DisplayName.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for DisplayName, length must be greater than 1.", new [] { "DisplayName" });
            }

            // DisplayName (string) pattern
            Regex regexDisplayName = new Regex(@"^[\s\S]*$", RegexOptions.CultureInvariant);
            if (false == regexDisplayName.Match(this.DisplayName).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for DisplayName, must match a pattern of " + regexDisplayName, new [] { "DisplayName" });
            }

            // Description (string) pattern
            Regex regexDescription = new Regex(@"^[\s\S]*$", RegexOptions.CultureInvariant);
            if (false == regexDescription.Match(this.Description).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Description, must match a pattern of " + regexDescription, new [] { "Description" });
            }

            // VarTimeZone (string) minLength
            if (this.VarTimeZone != null && this.VarTimeZone.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for VarTimeZone, length must be greater than 1.", new [] { "VarTimeZone" });
            }

            yield break;
        }
    }
}
