/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using JsonSubTypes;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Lusid.Sdk.Client.OpenAPIDateConverter;

namespace Lusid.Sdk.Model
{
    /// <summary>
    /// LUSID representation of an Exchange Traded Option.  Including, but not limited to, Equity Options, Bond Options, Index Options, Future Options, and Interest Rate Options.
    /// </summary>
    [DataContract(Name = "ExchangeTradedOption")]
    [JsonConverter(typeof(JsonSubtypes), "InstrumentType")]
    public partial class ExchangeTradedOption : LusidInstrument, IEquatable<ExchangeTradedOption>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ExchangeTradedOption" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ExchangeTradedOption() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ExchangeTradedOption" /> class.
        /// </summary>
        /// <param name="startDate">The start date of the instrument. This is normally synonymous with the trade-date. (required).</param>
        /// <param name="contractDetails">contractDetails (required).</param>
        /// <param name="contracts">The number of contracts held. (required).</param>
        /// <param name="refSpotPrice">The reference spot price for the option at which the contract was entered into. (required).</param>
        /// <param name="tradingConventions">tradingConventions.</param>
        /// <param name="timeZoneConventions">timeZoneConventions.</param>
        /// <param name="instrumentType">The available values are: QuotedSecurity, InterestRateSwap, FxForward, Future, ExoticInstrument, FxOption, CreditDefaultSwap, InterestRateSwaption, Bond, EquityOption, FixedLeg, FloatingLeg, BespokeCashFlowsLeg, Unknown, TermDeposit, ContractForDifference, EquitySwap, CashPerpetual, CapFloor, CashSettled, CdsIndex, Basket, FundingLeg, FxSwap, ForwardRateAgreement, SimpleInstrument, Repo, Equity, ExchangeTradedOption, ReferenceInstrument, ComplexBond, InflationLinkedBond, InflationSwap, SimpleCashFlowLoan, TotalReturnSwap, InflationLeg, FundShareClass, FlexibleLoan, UnsettledCash, Cash, MasteredInstrument, LoanFacility, FlexibleDeposit, FlexibleRepo (required) (default to &quot;ExchangeTradedOption&quot;).</param>
        public ExchangeTradedOption(DateTimeOffset startDate = default(DateTimeOffset), ExchangeTradedOptionContractDetails contractDetails = default(ExchangeTradedOptionContractDetails), decimal contracts = default(decimal), decimal refSpotPrice = default(decimal), TradingConventions tradingConventions = default(TradingConventions), TimeZoneConventions timeZoneConventions = default(TimeZoneConventions), InstrumentTypeEnum instrumentType = default(InstrumentTypeEnum)) : base(instrumentType)
        {
            this.StartDate = startDate;
            // to ensure "contractDetails" is required (not null)
            if (contractDetails == null)
            {
                throw new ArgumentNullException("contractDetails is a required property for ExchangeTradedOption and cannot be null");
            }
            this.ContractDetails = contractDetails;
            this.Contracts = contracts;
            this.RefSpotPrice = refSpotPrice;
            this.TradingConventions = tradingConventions;
            this.TimeZoneConventions = timeZoneConventions;
        }

        /// <summary>
        /// The start date of the instrument. This is normally synonymous with the trade-date.
        /// </summary>
        /// <value>The start date of the instrument. This is normally synonymous with the trade-date.</value>
        [DataMember(Name = "startDate", IsRequired = true, EmitDefaultValue = true)]
        public DateTimeOffset StartDate { get; set; }

        /// <summary>
        /// Gets or Sets ContractDetails
        /// </summary>
        [DataMember(Name = "contractDetails", IsRequired = true, EmitDefaultValue = true)]
        public ExchangeTradedOptionContractDetails ContractDetails { get; set; }

        /// <summary>
        /// The number of contracts held.
        /// </summary>
        /// <value>The number of contracts held.</value>
        [DataMember(Name = "contracts", IsRequired = true, EmitDefaultValue = true)]
        public decimal Contracts { get; set; }

        /// <summary>
        /// The reference spot price for the option at which the contract was entered into.
        /// </summary>
        /// <value>The reference spot price for the option at which the contract was entered into.</value>
        [DataMember(Name = "refSpotPrice", IsRequired = true, EmitDefaultValue = true)]
        public decimal RefSpotPrice { get; set; }

        /// <summary>
        /// Gets or Sets TradingConventions
        /// </summary>
        [DataMember(Name = "tradingConventions", EmitDefaultValue = false)]
        public TradingConventions TradingConventions { get; set; }

        /// <summary>
        /// Gets or Sets TimeZoneConventions
        /// </summary>
        [DataMember(Name = "timeZoneConventions", EmitDefaultValue = false)]
        public TimeZoneConventions TimeZoneConventions { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ExchangeTradedOption {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  StartDate: ").Append(StartDate).Append("\n");
            sb.Append("  ContractDetails: ").Append(ContractDetails).Append("\n");
            sb.Append("  Contracts: ").Append(Contracts).Append("\n");
            sb.Append("  RefSpotPrice: ").Append(RefSpotPrice).Append("\n");
            sb.Append("  TradingConventions: ").Append(TradingConventions).Append("\n");
            sb.Append("  TimeZoneConventions: ").Append(TimeZoneConventions).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ExchangeTradedOption);
        }

        /// <summary>
        /// Returns true if ExchangeTradedOption instances are equal
        /// </summary>
        /// <param name="input">Instance of ExchangeTradedOption to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ExchangeTradedOption input)
        {
            if (input == null)
            {
                return false;
            }
            return base.Equals(input) && 
                (
                    this.StartDate == input.StartDate ||
                    (this.StartDate != null &&
                    this.StartDate.Equals(input.StartDate))
                ) && base.Equals(input) && 
                (
                    this.ContractDetails == input.ContractDetails ||
                    (this.ContractDetails != null &&
                    this.ContractDetails.Equals(input.ContractDetails))
                ) && base.Equals(input) && 
                (
                    this.Contracts == input.Contracts ||
                    this.Contracts.Equals(input.Contracts)
                ) && base.Equals(input) && 
                (
                    this.RefSpotPrice == input.RefSpotPrice ||
                    this.RefSpotPrice.Equals(input.RefSpotPrice)
                ) && base.Equals(input) && 
                (
                    this.TradingConventions == input.TradingConventions ||
                    (this.TradingConventions != null &&
                    this.TradingConventions.Equals(input.TradingConventions))
                ) && base.Equals(input) && 
                (
                    this.TimeZoneConventions == input.TimeZoneConventions ||
                    (this.TimeZoneConventions != null &&
                    this.TimeZoneConventions.Equals(input.TimeZoneConventions))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = base.GetHashCode();
                if (this.StartDate != null)
                {
                    hashCode = (hashCode * 59) + this.StartDate.GetHashCode();
                }
                if (this.ContractDetails != null)
                {
                    hashCode = (hashCode * 59) + this.ContractDetails.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Contracts.GetHashCode();
                hashCode = (hashCode * 59) + this.RefSpotPrice.GetHashCode();
                if (this.TradingConventions != null)
                {
                    hashCode = (hashCode * 59) + this.TradingConventions.GetHashCode();
                }
                if (this.TimeZoneConventions != null)
                {
                    hashCode = (hashCode * 59) + this.TimeZoneConventions.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            return this.BaseValidate(validationContext);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        protected IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> BaseValidate(ValidationContext validationContext)
        {
            foreach (var x in base.BaseValidate(validationContext))
            {
                yield return x;
            }
            yield break;
        }
    }
}
