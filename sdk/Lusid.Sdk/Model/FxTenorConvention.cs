/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Lusid.Sdk.Client.OpenAPIDateConverter;

namespace Lusid.Sdk.Model
{
    /// <summary>
    /// A wrapper of conventions that should be used when interpreting tenors in the context of FX.  For instance, can be used to control how tenors are interpreted on an FxForwardTenorCurveData instance.
    /// </summary>
    [DataContract(Name = "FxTenorConvention")]
    public partial class FxTenorConvention : IEquatable<FxTenorConvention>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FxTenorConvention" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected FxTenorConvention() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="FxTenorConvention" /> class.
        /// </summary>
        /// <param name="calendarCode">The code of the holiday calendar that should be used when interpreting FX tenors. (required).</param>
        /// <param name="spotDays">The minimum number of business days that must pass within this calendar when calculating the spot date. (required).</param>
        public FxTenorConvention(string calendarCode = default(string), int spotDays = default(int))
        {
            // to ensure "calendarCode" is required (not null)
            if (calendarCode == null)
            {
                throw new ArgumentNullException("calendarCode is a required property for FxTenorConvention and cannot be null");
            }
            this.CalendarCode = calendarCode;
            this.SpotDays = spotDays;
        }

        /// <summary>
        /// The code of the holiday calendar that should be used when interpreting FX tenors.
        /// </summary>
        /// <value>The code of the holiday calendar that should be used when interpreting FX tenors.</value>
        [DataMember(Name = "calendarCode", IsRequired = true, EmitDefaultValue = true)]
        public string CalendarCode { get; set; }

        /// <summary>
        /// The minimum number of business days that must pass within this calendar when calculating the spot date.
        /// </summary>
        /// <value>The minimum number of business days that must pass within this calendar when calculating the spot date.</value>
        [DataMember(Name = "spotDays", IsRequired = true, EmitDefaultValue = true)]
        public int SpotDays { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class FxTenorConvention {\n");
            sb.Append("  CalendarCode: ").Append(CalendarCode).Append("\n");
            sb.Append("  SpotDays: ").Append(SpotDays).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as FxTenorConvention);
        }

        /// <summary>
        /// Returns true if FxTenorConvention instances are equal
        /// </summary>
        /// <param name="input">Instance of FxTenorConvention to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FxTenorConvention input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.CalendarCode == input.CalendarCode ||
                    (this.CalendarCode != null &&
                    this.CalendarCode.Equals(input.CalendarCode))
                ) && 
                (
                    this.SpotDays == input.SpotDays ||
                    this.SpotDays.Equals(input.SpotDays)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CalendarCode != null)
                {
                    hashCode = (hashCode * 59) + this.CalendarCode.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.SpotDays.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // CalendarCode (string) maxLength
            if (this.CalendarCode != null && this.CalendarCode.Length > 64)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CalendarCode, length must be less than 64.", new [] { "CalendarCode" });
            }

            // CalendarCode (string) minLength
            if (this.CalendarCode != null && this.CalendarCode.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CalendarCode, length must be greater than 0.", new [] { "CalendarCode" });
            }

            yield break;
        }
    }
}
