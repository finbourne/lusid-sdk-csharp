/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Lusid.Sdk.Client.OpenAPIDateConverter;

namespace Lusid.Sdk.Model
{
    /// <summary>
    /// PortfolioDetails
    /// </summary>
    [DataContract(Name = "PortfolioDetails")]
    public partial class PortfolioDetails : IEquatable<PortfolioDetails>, IValidatableObject
    {
        /// <summary>
        /// . The available values are: Default, AverageCost, FirstInFirstOut, LastInFirstOut, HighestCostFirst, LowestCostFirst, ProRateByUnits, ProRateByCost, ProRateByCostPortfolioCurrency, IntraDayThenFirstInFirstOut, LongTermHighestCostFirst, LongTermHighestCostFirstPortfolioCurrency, HighestCostFirstPortfolioCurrency, LowestCostFirstPortfolioCurrency, MaximumLossMinimumGain, MaximumLossMinimumGainPortfolioCurrency
        /// </summary>
        /// <value>. The available values are: Default, AverageCost, FirstInFirstOut, LastInFirstOut, HighestCostFirst, LowestCostFirst, ProRateByUnits, ProRateByCost, ProRateByCostPortfolioCurrency, IntraDayThenFirstInFirstOut, LongTermHighestCostFirst, LongTermHighestCostFirstPortfolioCurrency, HighestCostFirstPortfolioCurrency, LowestCostFirstPortfolioCurrency, MaximumLossMinimumGain, MaximumLossMinimumGainPortfolioCurrency</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum AccountingMethodEnum
        {
            /// <summary>
            /// Enum Default for value: Default
            /// </summary>
            [EnumMember(Value = "Default")]
            Default = 1,

            /// <summary>
            /// Enum AverageCost for value: AverageCost
            /// </summary>
            [EnumMember(Value = "AverageCost")]
            AverageCost = 2,

            /// <summary>
            /// Enum FirstInFirstOut for value: FirstInFirstOut
            /// </summary>
            [EnumMember(Value = "FirstInFirstOut")]
            FirstInFirstOut = 3,

            /// <summary>
            /// Enum LastInFirstOut for value: LastInFirstOut
            /// </summary>
            [EnumMember(Value = "LastInFirstOut")]
            LastInFirstOut = 4,

            /// <summary>
            /// Enum HighestCostFirst for value: HighestCostFirst
            /// </summary>
            [EnumMember(Value = "HighestCostFirst")]
            HighestCostFirst = 5,

            /// <summary>
            /// Enum LowestCostFirst for value: LowestCostFirst
            /// </summary>
            [EnumMember(Value = "LowestCostFirst")]
            LowestCostFirst = 6,

            /// <summary>
            /// Enum ProRateByUnits for value: ProRateByUnits
            /// </summary>
            [EnumMember(Value = "ProRateByUnits")]
            ProRateByUnits = 7,

            /// <summary>
            /// Enum ProRateByCost for value: ProRateByCost
            /// </summary>
            [EnumMember(Value = "ProRateByCost")]
            ProRateByCost = 8,

            /// <summary>
            /// Enum ProRateByCostPortfolioCurrency for value: ProRateByCostPortfolioCurrency
            /// </summary>
            [EnumMember(Value = "ProRateByCostPortfolioCurrency")]
            ProRateByCostPortfolioCurrency = 9,

            /// <summary>
            /// Enum IntraDayThenFirstInFirstOut for value: IntraDayThenFirstInFirstOut
            /// </summary>
            [EnumMember(Value = "IntraDayThenFirstInFirstOut")]
            IntraDayThenFirstInFirstOut = 10,

            /// <summary>
            /// Enum LongTermHighestCostFirst for value: LongTermHighestCostFirst
            /// </summary>
            [EnumMember(Value = "LongTermHighestCostFirst")]
            LongTermHighestCostFirst = 11,

            /// <summary>
            /// Enum LongTermHighestCostFirstPortfolioCurrency for value: LongTermHighestCostFirstPortfolioCurrency
            /// </summary>
            [EnumMember(Value = "LongTermHighestCostFirstPortfolioCurrency")]
            LongTermHighestCostFirstPortfolioCurrency = 12,

            /// <summary>
            /// Enum HighestCostFirstPortfolioCurrency for value: HighestCostFirstPortfolioCurrency
            /// </summary>
            [EnumMember(Value = "HighestCostFirstPortfolioCurrency")]
            HighestCostFirstPortfolioCurrency = 13,

            /// <summary>
            /// Enum LowestCostFirstPortfolioCurrency for value: LowestCostFirstPortfolioCurrency
            /// </summary>
            [EnumMember(Value = "LowestCostFirstPortfolioCurrency")]
            LowestCostFirstPortfolioCurrency = 14,

            /// <summary>
            /// Enum MaximumLossMinimumGain for value: MaximumLossMinimumGain
            /// </summary>
            [EnumMember(Value = "MaximumLossMinimumGain")]
            MaximumLossMinimumGain = 15,

            /// <summary>
            /// Enum MaximumLossMinimumGainPortfolioCurrency for value: MaximumLossMinimumGainPortfolioCurrency
            /// </summary>
            [EnumMember(Value = "MaximumLossMinimumGainPortfolioCurrency")]
            MaximumLossMinimumGainPortfolioCurrency = 16
        }


        /// <summary>
        /// . The available values are: Default, AverageCost, FirstInFirstOut, LastInFirstOut, HighestCostFirst, LowestCostFirst, ProRateByUnits, ProRateByCost, ProRateByCostPortfolioCurrency, IntraDayThenFirstInFirstOut, LongTermHighestCostFirst, LongTermHighestCostFirstPortfolioCurrency, HighestCostFirstPortfolioCurrency, LowestCostFirstPortfolioCurrency, MaximumLossMinimumGain, MaximumLossMinimumGainPortfolioCurrency
        /// </summary>
        /// <value>. The available values are: Default, AverageCost, FirstInFirstOut, LastInFirstOut, HighestCostFirst, LowestCostFirst, ProRateByUnits, ProRateByCost, ProRateByCostPortfolioCurrency, IntraDayThenFirstInFirstOut, LongTermHighestCostFirst, LongTermHighestCostFirstPortfolioCurrency, HighestCostFirstPortfolioCurrency, LowestCostFirstPortfolioCurrency, MaximumLossMinimumGain, MaximumLossMinimumGainPortfolioCurrency</value>
        [DataMember(Name = "accountingMethod", EmitDefaultValue = false)]
        public AccountingMethodEnum? AccountingMethod { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="PortfolioDetails" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected PortfolioDetails() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="PortfolioDetails" /> class.
        /// </summary>
        /// <param name="href">The specific Uniform Resource Identifier (URI) for this resource at the requested effective and asAt datetime..</param>
        /// <param name="originPortfolioId">originPortfolioId (required).</param>
        /// <param name="varVersion">varVersion (required).</param>
        /// <param name="baseCurrency">The base currency of the transaction portfolio. (required).</param>
        /// <param name="corporateActionSourceId">corporateActionSourceId.</param>
        /// <param name="subHoldingKeys">subHoldingKeys.</param>
        /// <param name="instrumentScopes">The resolution strategy used to resolve instruments of transactions/holdings upserted to the transaction portfolio..</param>
        /// <param name="accountingMethod">. The available values are: Default, AverageCost, FirstInFirstOut, LastInFirstOut, HighestCostFirst, LowestCostFirst, ProRateByUnits, ProRateByCost, ProRateByCostPortfolioCurrency, IntraDayThenFirstInFirstOut, LongTermHighestCostFirst, LongTermHighestCostFirstPortfolioCurrency, HighestCostFirstPortfolioCurrency, LowestCostFirstPortfolioCurrency, MaximumLossMinimumGain, MaximumLossMinimumGainPortfolioCurrency.</param>
        /// <param name="amortisationMethod">The amortisation method used by the portfolio for the calculation. The available values are: NoAmortisation, StraightLine, EffectiveYield, StraightLineSettlementDate, EffectiveYieldSettlementDate.</param>
        /// <param name="transactionTypeScope">The scope of the transaction types..</param>
        /// <param name="cashGainLossCalculationDate">The option when the Cash Gain Loss to be calulated, TransactionDate/SettlementDate. Defaults to SettlementDate..</param>
        /// <param name="instrumentEventConfiguration">instrumentEventConfiguration.</param>
        /// <param name="amortisationRuleSetId">amortisationRuleSetId.</param>
        /// <param name="stagedModifications">stagedModifications.</param>
        /// <param name="links">links.</param>
        public PortfolioDetails(string href = default(string), ResourceId originPortfolioId = default(ResourceId), ModelVersion varVersion = default(ModelVersion), string baseCurrency = default(string), ResourceId corporateActionSourceId = default(ResourceId), List<string> subHoldingKeys = default(List<string>), List<string> instrumentScopes = default(List<string>), AccountingMethodEnum? accountingMethod = default(AccountingMethodEnum?), string amortisationMethod = default(string), string transactionTypeScope = default(string), string cashGainLossCalculationDate = default(string), InstrumentEventConfiguration instrumentEventConfiguration = default(InstrumentEventConfiguration), ResourceId amortisationRuleSetId = default(ResourceId), StagedModificationsInfo stagedModifications = default(StagedModificationsInfo), List<Link> links = default(List<Link>))
        {
            // to ensure "originPortfolioId" is required (not null)
            if (originPortfolioId == null)
            {
                throw new ArgumentNullException("originPortfolioId is a required property for PortfolioDetails and cannot be null");
            }
            this.OriginPortfolioId = originPortfolioId;
            // to ensure "varVersion" is required (not null)
            if (varVersion == null)
            {
                throw new ArgumentNullException("varVersion is a required property for PortfolioDetails and cannot be null");
            }
            this.VarVersion = varVersion;
            // to ensure "baseCurrency" is required (not null)
            if (baseCurrency == null)
            {
                throw new ArgumentNullException("baseCurrency is a required property for PortfolioDetails and cannot be null");
            }
            this.BaseCurrency = baseCurrency;
            this.Href = href;
            this.CorporateActionSourceId = corporateActionSourceId;
            this.SubHoldingKeys = subHoldingKeys;
            this.InstrumentScopes = instrumentScopes;
            this.AccountingMethod = accountingMethod;
            this.AmortisationMethod = amortisationMethod;
            this.TransactionTypeScope = transactionTypeScope;
            this.CashGainLossCalculationDate = cashGainLossCalculationDate;
            this.InstrumentEventConfiguration = instrumentEventConfiguration;
            this.AmortisationRuleSetId = amortisationRuleSetId;
            this.StagedModifications = stagedModifications;
            this.Links = links;
        }

        /// <summary>
        /// The specific Uniform Resource Identifier (URI) for this resource at the requested effective and asAt datetime.
        /// </summary>
        /// <value>The specific Uniform Resource Identifier (URI) for this resource at the requested effective and asAt datetime.</value>
        [DataMember(Name = "href", EmitDefaultValue = true)]
        public string Href { get; set; }

        /// <summary>
        /// Gets or Sets OriginPortfolioId
        /// </summary>
        [DataMember(Name = "originPortfolioId", IsRequired = true, EmitDefaultValue = true)]
        public ResourceId OriginPortfolioId { get; set; }

        /// <summary>
        /// Gets or Sets VarVersion
        /// </summary>
        [DataMember(Name = "version", IsRequired = true, EmitDefaultValue = true)]
        public ModelVersion VarVersion { get; set; }

        /// <summary>
        /// The base currency of the transaction portfolio.
        /// </summary>
        /// <value>The base currency of the transaction portfolio.</value>
        [DataMember(Name = "baseCurrency", IsRequired = true, EmitDefaultValue = true)]
        public string BaseCurrency { get; set; }

        /// <summary>
        /// Gets or Sets CorporateActionSourceId
        /// </summary>
        [DataMember(Name = "corporateActionSourceId", EmitDefaultValue = false)]
        public ResourceId CorporateActionSourceId { get; set; }

        /// <summary>
        /// Gets or Sets SubHoldingKeys
        /// </summary>
        [DataMember(Name = "subHoldingKeys", EmitDefaultValue = true)]
        public List<string> SubHoldingKeys { get; set; }

        /// <summary>
        /// The resolution strategy used to resolve instruments of transactions/holdings upserted to the transaction portfolio.
        /// </summary>
        /// <value>The resolution strategy used to resolve instruments of transactions/holdings upserted to the transaction portfolio.</value>
        [DataMember(Name = "instrumentScopes", EmitDefaultValue = true)]
        public List<string> InstrumentScopes { get; set; }

        /// <summary>
        /// The amortisation method used by the portfolio for the calculation. The available values are: NoAmortisation, StraightLine, EffectiveYield, StraightLineSettlementDate, EffectiveYieldSettlementDate
        /// </summary>
        /// <value>The amortisation method used by the portfolio for the calculation. The available values are: NoAmortisation, StraightLine, EffectiveYield, StraightLineSettlementDate, EffectiveYieldSettlementDate</value>
        [DataMember(Name = "amortisationMethod", EmitDefaultValue = true)]
        public string AmortisationMethod { get; set; }

        /// <summary>
        /// The scope of the transaction types.
        /// </summary>
        /// <value>The scope of the transaction types.</value>
        [DataMember(Name = "transactionTypeScope", EmitDefaultValue = true)]
        public string TransactionTypeScope { get; set; }

        /// <summary>
        /// The option when the Cash Gain Loss to be calulated, TransactionDate/SettlementDate. Defaults to SettlementDate.
        /// </summary>
        /// <value>The option when the Cash Gain Loss to be calulated, TransactionDate/SettlementDate. Defaults to SettlementDate.</value>
        [DataMember(Name = "cashGainLossCalculationDate", EmitDefaultValue = true)]
        public string CashGainLossCalculationDate { get; set; }

        /// <summary>
        /// Gets or Sets InstrumentEventConfiguration
        /// </summary>
        [DataMember(Name = "instrumentEventConfiguration", EmitDefaultValue = false)]
        public InstrumentEventConfiguration InstrumentEventConfiguration { get; set; }

        /// <summary>
        /// Gets or Sets AmortisationRuleSetId
        /// </summary>
        [DataMember(Name = "amortisationRuleSetId", EmitDefaultValue = false)]
        public ResourceId AmortisationRuleSetId { get; set; }

        /// <summary>
        /// Gets or Sets StagedModifications
        /// </summary>
        [DataMember(Name = "stagedModifications", EmitDefaultValue = false)]
        public StagedModificationsInfo StagedModifications { get; set; }

        /// <summary>
        /// Gets or Sets Links
        /// </summary>
        [DataMember(Name = "links", EmitDefaultValue = true)]
        public List<Link> Links { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PortfolioDetails {\n");
            sb.Append("  Href: ").Append(Href).Append("\n");
            sb.Append("  OriginPortfolioId: ").Append(OriginPortfolioId).Append("\n");
            sb.Append("  VarVersion: ").Append(VarVersion).Append("\n");
            sb.Append("  BaseCurrency: ").Append(BaseCurrency).Append("\n");
            sb.Append("  CorporateActionSourceId: ").Append(CorporateActionSourceId).Append("\n");
            sb.Append("  SubHoldingKeys: ").Append(SubHoldingKeys).Append("\n");
            sb.Append("  InstrumentScopes: ").Append(InstrumentScopes).Append("\n");
            sb.Append("  AccountingMethod: ").Append(AccountingMethod).Append("\n");
            sb.Append("  AmortisationMethod: ").Append(AmortisationMethod).Append("\n");
            sb.Append("  TransactionTypeScope: ").Append(TransactionTypeScope).Append("\n");
            sb.Append("  CashGainLossCalculationDate: ").Append(CashGainLossCalculationDate).Append("\n");
            sb.Append("  InstrumentEventConfiguration: ").Append(InstrumentEventConfiguration).Append("\n");
            sb.Append("  AmortisationRuleSetId: ").Append(AmortisationRuleSetId).Append("\n");
            sb.Append("  StagedModifications: ").Append(StagedModifications).Append("\n");
            sb.Append("  Links: ").Append(Links).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PortfolioDetails);
        }

        /// <summary>
        /// Returns true if PortfolioDetails instances are equal
        /// </summary>
        /// <param name="input">Instance of PortfolioDetails to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PortfolioDetails input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Href == input.Href ||
                    (this.Href != null &&
                    this.Href.Equals(input.Href))
                ) && 
                (
                    this.OriginPortfolioId == input.OriginPortfolioId ||
                    (this.OriginPortfolioId != null &&
                    this.OriginPortfolioId.Equals(input.OriginPortfolioId))
                ) && 
                (
                    this.VarVersion == input.VarVersion ||
                    (this.VarVersion != null &&
                    this.VarVersion.Equals(input.VarVersion))
                ) && 
                (
                    this.BaseCurrency == input.BaseCurrency ||
                    (this.BaseCurrency != null &&
                    this.BaseCurrency.Equals(input.BaseCurrency))
                ) && 
                (
                    this.CorporateActionSourceId == input.CorporateActionSourceId ||
                    (this.CorporateActionSourceId != null &&
                    this.CorporateActionSourceId.Equals(input.CorporateActionSourceId))
                ) && 
                (
                    this.SubHoldingKeys == input.SubHoldingKeys ||
                    this.SubHoldingKeys != null &&
                    input.SubHoldingKeys != null &&
                    this.SubHoldingKeys.SequenceEqual(input.SubHoldingKeys)
                ) && 
                (
                    this.InstrumentScopes == input.InstrumentScopes ||
                    this.InstrumentScopes != null &&
                    input.InstrumentScopes != null &&
                    this.InstrumentScopes.SequenceEqual(input.InstrumentScopes)
                ) && 
                (
                    this.AccountingMethod == input.AccountingMethod ||
                    this.AccountingMethod.Equals(input.AccountingMethod)
                ) && 
                (
                    this.AmortisationMethod == input.AmortisationMethod ||
                    (this.AmortisationMethod != null &&
                    this.AmortisationMethod.Equals(input.AmortisationMethod))
                ) && 
                (
                    this.TransactionTypeScope == input.TransactionTypeScope ||
                    (this.TransactionTypeScope != null &&
                    this.TransactionTypeScope.Equals(input.TransactionTypeScope))
                ) && 
                (
                    this.CashGainLossCalculationDate == input.CashGainLossCalculationDate ||
                    (this.CashGainLossCalculationDate != null &&
                    this.CashGainLossCalculationDate.Equals(input.CashGainLossCalculationDate))
                ) && 
                (
                    this.InstrumentEventConfiguration == input.InstrumentEventConfiguration ||
                    (this.InstrumentEventConfiguration != null &&
                    this.InstrumentEventConfiguration.Equals(input.InstrumentEventConfiguration))
                ) && 
                (
                    this.AmortisationRuleSetId == input.AmortisationRuleSetId ||
                    (this.AmortisationRuleSetId != null &&
                    this.AmortisationRuleSetId.Equals(input.AmortisationRuleSetId))
                ) && 
                (
                    this.StagedModifications == input.StagedModifications ||
                    (this.StagedModifications != null &&
                    this.StagedModifications.Equals(input.StagedModifications))
                ) && 
                (
                    this.Links == input.Links ||
                    this.Links != null &&
                    input.Links != null &&
                    this.Links.SequenceEqual(input.Links)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Href != null)
                {
                    hashCode = (hashCode * 59) + this.Href.GetHashCode();
                }
                if (this.OriginPortfolioId != null)
                {
                    hashCode = (hashCode * 59) + this.OriginPortfolioId.GetHashCode();
                }
                if (this.VarVersion != null)
                {
                    hashCode = (hashCode * 59) + this.VarVersion.GetHashCode();
                }
                if (this.BaseCurrency != null)
                {
                    hashCode = (hashCode * 59) + this.BaseCurrency.GetHashCode();
                }
                if (this.CorporateActionSourceId != null)
                {
                    hashCode = (hashCode * 59) + this.CorporateActionSourceId.GetHashCode();
                }
                if (this.SubHoldingKeys != null)
                {
                    hashCode = (hashCode * 59) + this.SubHoldingKeys.GetHashCode();
                }
                if (this.InstrumentScopes != null)
                {
                    hashCode = (hashCode * 59) + this.InstrumentScopes.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.AccountingMethod.GetHashCode();
                if (this.AmortisationMethod != null)
                {
                    hashCode = (hashCode * 59) + this.AmortisationMethod.GetHashCode();
                }
                if (this.TransactionTypeScope != null)
                {
                    hashCode = (hashCode * 59) + this.TransactionTypeScope.GetHashCode();
                }
                if (this.CashGainLossCalculationDate != null)
                {
                    hashCode = (hashCode * 59) + this.CashGainLossCalculationDate.GetHashCode();
                }
                if (this.InstrumentEventConfiguration != null)
                {
                    hashCode = (hashCode * 59) + this.InstrumentEventConfiguration.GetHashCode();
                }
                if (this.AmortisationRuleSetId != null)
                {
                    hashCode = (hashCode * 59) + this.AmortisationRuleSetId.GetHashCode();
                }
                if (this.StagedModifications != null)
                {
                    hashCode = (hashCode * 59) + this.StagedModifications.GetHashCode();
                }
                if (this.Links != null)
                {
                    hashCode = (hashCode * 59) + this.Links.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
