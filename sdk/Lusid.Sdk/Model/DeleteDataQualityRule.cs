/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Lusid.Sdk.Client.OpenAPIDateConverter;

namespace Lusid.Sdk.Model
{
    /// <summary>
    /// DeleteDataQualityRule
    /// </summary>
    [DataContract(Name = "DeleteDataQualityRule")]
    public partial class DeleteDataQualityRule : IEquatable<DeleteDataQualityRule>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DeleteDataQualityRule" /> class.
        /// </summary>
        /// <param name="ruleSetKey">ruleSetKey.</param>
        /// <param name="ruleKey">ruleKey.</param>
        public DeleteDataQualityRule(string ruleSetKey = default(string), string ruleKey = default(string))
        {
            this.RuleSetKey = ruleSetKey;
            this.RuleKey = ruleKey;
        }

        /// <summary>
        /// Gets or Sets RuleSetKey
        /// </summary>
        [DataMember(Name = "ruleSetKey", EmitDefaultValue = true)]
        public string RuleSetKey { get; set; }

        /// <summary>
        /// Gets or Sets RuleKey
        /// </summary>
        [DataMember(Name = "ruleKey", EmitDefaultValue = true)]
        public string RuleKey { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DeleteDataQualityRule {\n");
            sb.Append("  RuleSetKey: ").Append(RuleSetKey).Append("\n");
            sb.Append("  RuleKey: ").Append(RuleKey).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DeleteDataQualityRule);
        }

        /// <summary>
        /// Returns true if DeleteDataQualityRule instances are equal
        /// </summary>
        /// <param name="input">Instance of DeleteDataQualityRule to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DeleteDataQualityRule input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.RuleSetKey == input.RuleSetKey ||
                    (this.RuleSetKey != null &&
                    this.RuleSetKey.Equals(input.RuleSetKey))
                ) && 
                (
                    this.RuleKey == input.RuleKey ||
                    (this.RuleKey != null &&
                    this.RuleKey.Equals(input.RuleKey))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.RuleSetKey != null)
                {
                    hashCode = (hashCode * 59) + this.RuleSetKey.GetHashCode();
                }
                if (this.RuleKey != null)
                {
                    hashCode = (hashCode * 59) + this.RuleKey.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // RuleSetKey (string) maxLength
            if (this.RuleSetKey != null && this.RuleSetKey.Length > 50)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for RuleSetKey, length must be less than 50.", new [] { "RuleSetKey" });
            }

            // RuleSetKey (string) minLength
            if (this.RuleSetKey != null && this.RuleSetKey.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for RuleSetKey, length must be greater than 0.", new [] { "RuleSetKey" });
            }

            // RuleKey (string) maxLength
            if (this.RuleKey != null && this.RuleKey.Length > 50)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for RuleKey, length must be less than 50.", new [] { "RuleKey" });
            }

            // RuleKey (string) minLength
            if (this.RuleKey != null && this.RuleKey.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for RuleKey, length must be greater than 0.", new [] { "RuleKey" });
            }

            yield break;
        }
    }
}
