/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Lusid.Sdk.Client.OpenAPIDateConverter;

namespace Lusid.Sdk.Model
{
    /// <summary>
    /// The market quote for an observable which will be used to calibrate the market data,  including the format of the quote.  e.g. a volatility quote for a specific strike and expiry  the par rate of a swap                This is a slimmed down version of a full Quote that can be stored in our QuoteStore to  remove lineage, price source etc. for ease of use when creating complex market data.
    /// </summary>
    [DataContract(Name = "MarketQuote")]
    public partial class MarketQuote : IEquatable<MarketQuote>, IValidatableObject
    {
        /// <summary>
        /// The available values are: Price, Spread, Rate, LogNormalVol, NormalVol, ParSpread, IsdaSpread, Upfront, Index, Ratio, Delta, PoolFactor, InflationAssumption, DirtyPrice, PrincipalWriteOff, InterestDeferred, InterestShortfall, ConstituentWeightFactor
        /// </summary>
        /// <value>The available values are: Price, Spread, Rate, LogNormalVol, NormalVol, ParSpread, IsdaSpread, Upfront, Index, Ratio, Delta, PoolFactor, InflationAssumption, DirtyPrice, PrincipalWriteOff, InterestDeferred, InterestShortfall, ConstituentWeightFactor</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum QuoteTypeEnum
        {
            /// <summary>
            /// Enum Price for value: Price
            /// </summary>
            [EnumMember(Value = "Price")]
            Price = 1,

            /// <summary>
            /// Enum Spread for value: Spread
            /// </summary>
            [EnumMember(Value = "Spread")]
            Spread = 2,

            /// <summary>
            /// Enum Rate for value: Rate
            /// </summary>
            [EnumMember(Value = "Rate")]
            Rate = 3,

            /// <summary>
            /// Enum LogNormalVol for value: LogNormalVol
            /// </summary>
            [EnumMember(Value = "LogNormalVol")]
            LogNormalVol = 4,

            /// <summary>
            /// Enum NormalVol for value: NormalVol
            /// </summary>
            [EnumMember(Value = "NormalVol")]
            NormalVol = 5,

            /// <summary>
            /// Enum ParSpread for value: ParSpread
            /// </summary>
            [EnumMember(Value = "ParSpread")]
            ParSpread = 6,

            /// <summary>
            /// Enum IsdaSpread for value: IsdaSpread
            /// </summary>
            [EnumMember(Value = "IsdaSpread")]
            IsdaSpread = 7,

            /// <summary>
            /// Enum Upfront for value: Upfront
            /// </summary>
            [EnumMember(Value = "Upfront")]
            Upfront = 8,

            /// <summary>
            /// Enum Index for value: Index
            /// </summary>
            [EnumMember(Value = "Index")]
            Index = 9,

            /// <summary>
            /// Enum Ratio for value: Ratio
            /// </summary>
            [EnumMember(Value = "Ratio")]
            Ratio = 10,

            /// <summary>
            /// Enum Delta for value: Delta
            /// </summary>
            [EnumMember(Value = "Delta")]
            Delta = 11,

            /// <summary>
            /// Enum PoolFactor for value: PoolFactor
            /// </summary>
            [EnumMember(Value = "PoolFactor")]
            PoolFactor = 12,

            /// <summary>
            /// Enum InflationAssumption for value: InflationAssumption
            /// </summary>
            [EnumMember(Value = "InflationAssumption")]
            InflationAssumption = 13,

            /// <summary>
            /// Enum DirtyPrice for value: DirtyPrice
            /// </summary>
            [EnumMember(Value = "DirtyPrice")]
            DirtyPrice = 14,

            /// <summary>
            /// Enum PrincipalWriteOff for value: PrincipalWriteOff
            /// </summary>
            [EnumMember(Value = "PrincipalWriteOff")]
            PrincipalWriteOff = 15,

            /// <summary>
            /// Enum InterestDeferred for value: InterestDeferred
            /// </summary>
            [EnumMember(Value = "InterestDeferred")]
            InterestDeferred = 16,

            /// <summary>
            /// Enum InterestShortfall for value: InterestShortfall
            /// </summary>
            [EnumMember(Value = "InterestShortfall")]
            InterestShortfall = 17,

            /// <summary>
            /// Enum ConstituentWeightFactor for value: ConstituentWeightFactor
            /// </summary>
            [EnumMember(Value = "ConstituentWeightFactor")]
            ConstituentWeightFactor = 18
        }


        /// <summary>
        /// The available values are: Price, Spread, Rate, LogNormalVol, NormalVol, ParSpread, IsdaSpread, Upfront, Index, Ratio, Delta, PoolFactor, InflationAssumption, DirtyPrice, PrincipalWriteOff, InterestDeferred, InterestShortfall, ConstituentWeightFactor
        /// </summary>
        /// <value>The available values are: Price, Spread, Rate, LogNormalVol, NormalVol, ParSpread, IsdaSpread, Upfront, Index, Ratio, Delta, PoolFactor, InflationAssumption, DirtyPrice, PrincipalWriteOff, InterestDeferred, InterestShortfall, ConstituentWeightFactor</value>
        [DataMember(Name = "quoteType", IsRequired = true, EmitDefaultValue = true)]
        public QuoteTypeEnum QuoteType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="MarketQuote" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected MarketQuote() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="MarketQuote" /> class.
        /// </summary>
        /// <param name="quoteType">The available values are: Price, Spread, Rate, LogNormalVol, NormalVol, ParSpread, IsdaSpread, Upfront, Index, Ratio, Delta, PoolFactor, InflationAssumption, DirtyPrice, PrincipalWriteOff, InterestDeferred, InterestShortfall, ConstituentWeightFactor (required).</param>
        /// <param name="value">Numeric value of the quote (required).</param>
        public MarketQuote(QuoteTypeEnum quoteType = default(QuoteTypeEnum), decimal value = default(decimal))
        {
            this.QuoteType = quoteType;
            this.Value = value;
        }

        /// <summary>
        /// Numeric value of the quote
        /// </summary>
        /// <value>Numeric value of the quote</value>
        [DataMember(Name = "value", IsRequired = true, EmitDefaultValue = true)]
        public decimal Value { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class MarketQuote {\n");
            sb.Append("  QuoteType: ").Append(QuoteType).Append("\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as MarketQuote);
        }

        /// <summary>
        /// Returns true if MarketQuote instances are equal
        /// </summary>
        /// <param name="input">Instance of MarketQuote to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MarketQuote input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.QuoteType == input.QuoteType ||
                    this.QuoteType.Equals(input.QuoteType)
                ) && 
                (
                    this.Value == input.Value ||
                    this.Value.Equals(input.Value)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.QuoteType.GetHashCode();
                hashCode = (hashCode * 59) + this.Value.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
