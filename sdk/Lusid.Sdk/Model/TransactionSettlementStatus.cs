/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Lusid.Sdk.Client.OpenAPIDateConverter;

namespace Lusid.Sdk.Model
{
    /// <summary>
    /// TransactionSettlementStatus
    /// </summary>
    [DataContract(Name = "TransactionSettlementStatus")]
    public partial class TransactionSettlementStatus : IEquatable<TransactionSettlementStatus>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TransactionSettlementStatus" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected TransactionSettlementStatus() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="TransactionSettlementStatus" /> class.
        /// </summary>
        /// <param name="transactionId">The unique identifier for the transaction. (required).</param>
        /// <param name="settlementBuckets">The transaction&#39;s external movements (ie: with SettlementMode&#x3D;External) are grouped into buckets with each bucket uniquely defined by the combination of SettlementCategory, LusidInstrumentId, InstrumentScope and ContractualSettlementDate..</param>
        /// <param name="invalidInstructions">Invalid settlement instructions where the referenced transaction exists but the settlement bucket implied by the settlement instruction does not exist..</param>
        /// <param name="links">links.</param>
        public TransactionSettlementStatus(string transactionId = default(string), List<TransactionSettlementBucket> settlementBuckets = default(List<TransactionSettlementBucket>), List<TransactionSettlementInstruction> invalidInstructions = default(List<TransactionSettlementInstruction>), List<Link> links = default(List<Link>))
        {
            // to ensure "transactionId" is required (not null)
            if (transactionId == null)
            {
                throw new ArgumentNullException("transactionId is a required property for TransactionSettlementStatus and cannot be null");
            }
            this.TransactionId = transactionId;
            this.SettlementBuckets = settlementBuckets;
            this.InvalidInstructions = invalidInstructions;
            this.Links = links;
        }

        /// <summary>
        /// The unique identifier for the transaction.
        /// </summary>
        /// <value>The unique identifier for the transaction.</value>
        [DataMember(Name = "transactionId", IsRequired = true, EmitDefaultValue = true)]
        public string TransactionId { get; set; }

        /// <summary>
        /// The transaction&#39;s external movements (ie: with SettlementMode&#x3D;External) are grouped into buckets with each bucket uniquely defined by the combination of SettlementCategory, LusidInstrumentId, InstrumentScope and ContractualSettlementDate.
        /// </summary>
        /// <value>The transaction&#39;s external movements (ie: with SettlementMode&#x3D;External) are grouped into buckets with each bucket uniquely defined by the combination of SettlementCategory, LusidInstrumentId, InstrumentScope and ContractualSettlementDate.</value>
        [DataMember(Name = "settlementBuckets", EmitDefaultValue = true)]
        public List<TransactionSettlementBucket> SettlementBuckets { get; set; }

        /// <summary>
        /// Invalid settlement instructions where the referenced transaction exists but the settlement bucket implied by the settlement instruction does not exist.
        /// </summary>
        /// <value>Invalid settlement instructions where the referenced transaction exists but the settlement bucket implied by the settlement instruction does not exist.</value>
        [DataMember(Name = "invalidInstructions", EmitDefaultValue = true)]
        public List<TransactionSettlementInstruction> InvalidInstructions { get; set; }

        /// <summary>
        /// Gets or Sets Links
        /// </summary>
        [DataMember(Name = "links", EmitDefaultValue = true)]
        public List<Link> Links { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class TransactionSettlementStatus {\n");
            sb.Append("  TransactionId: ").Append(TransactionId).Append("\n");
            sb.Append("  SettlementBuckets: ").Append(SettlementBuckets).Append("\n");
            sb.Append("  InvalidInstructions: ").Append(InvalidInstructions).Append("\n");
            sb.Append("  Links: ").Append(Links).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TransactionSettlementStatus);
        }

        /// <summary>
        /// Returns true if TransactionSettlementStatus instances are equal
        /// </summary>
        /// <param name="input">Instance of TransactionSettlementStatus to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TransactionSettlementStatus input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.TransactionId == input.TransactionId ||
                    (this.TransactionId != null &&
                    this.TransactionId.Equals(input.TransactionId))
                ) && 
                (
                    this.SettlementBuckets == input.SettlementBuckets ||
                    this.SettlementBuckets != null &&
                    input.SettlementBuckets != null &&
                    this.SettlementBuckets.SequenceEqual(input.SettlementBuckets)
                ) && 
                (
                    this.InvalidInstructions == input.InvalidInstructions ||
                    this.InvalidInstructions != null &&
                    input.InvalidInstructions != null &&
                    this.InvalidInstructions.SequenceEqual(input.InvalidInstructions)
                ) && 
                (
                    this.Links == input.Links ||
                    this.Links != null &&
                    input.Links != null &&
                    this.Links.SequenceEqual(input.Links)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.TransactionId != null)
                {
                    hashCode = (hashCode * 59) + this.TransactionId.GetHashCode();
                }
                if (this.SettlementBuckets != null)
                {
                    hashCode = (hashCode * 59) + this.SettlementBuckets.GetHashCode();
                }
                if (this.InvalidInstructions != null)
                {
                    hashCode = (hashCode * 59) + this.InvalidInstructions.GetHashCode();
                }
                if (this.Links != null)
                {
                    hashCode = (hashCode * 59) + this.Links.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // TransactionId (string) minLength
            if (this.TransactionId != null && this.TransactionId.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for TransactionId, length must be greater than 1.", new [] { "TransactionId" });
            }

            yield break;
        }
    }
}
