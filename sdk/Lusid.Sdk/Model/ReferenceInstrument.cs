/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using JsonSubTypes;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Lusid.Sdk.Client.OpenAPIDateConverter;

namespace Lusid.Sdk.Model
{
    /// <summary>
    /// LUSID representation of a reference to another instrument that has already been loaded (e.g. a lookthrough to a portfolio).
    /// </summary>
    [DataContract(Name = "ReferenceInstrument")]
    [JsonConverter(typeof(JsonSubtypes), "InstrumentType")]
    public partial class ReferenceInstrument : LusidInstrument, IEquatable<ReferenceInstrument>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ReferenceInstrument" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ReferenceInstrument() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ReferenceInstrument" /> class.
        /// </summary>
        /// <param name="instrumentId">The Identifier code (required).</param>
        /// <param name="instrumentIdType">The type of the instrument id e.g. LusidInstrument Id (required).</param>
        /// <param name="scope">Scope for the instrument (optional) (required).</param>
        /// <param name="instrumentType">The available values are: QuotedSecurity, InterestRateSwap, FxForward, Future, ExoticInstrument, FxOption, CreditDefaultSwap, InterestRateSwaption, Bond, EquityOption, FixedLeg, FloatingLeg, BespokeCashFlowsLeg, Unknown, TermDeposit, ContractForDifference, EquitySwap, CashPerpetual, CapFloor, CashSettled, CdsIndex, Basket, FundingLeg, FxSwap, ForwardRateAgreement, SimpleInstrument, Repo, Equity, ExchangeTradedOption, ReferenceInstrument, ComplexBond, InflationLinkedBond, InflationSwap, SimpleCashFlowLoan, TotalReturnSwap, InflationLeg, FundShareClass, FlexibleLoan, UnsettledCash, Cash (required) (default to &quot;ReferenceInstrument&quot;).</param>
        public ReferenceInstrument(string instrumentId = default(string), string instrumentIdType = default(string), string scope = default(string), InstrumentTypeEnum instrumentType = default(InstrumentTypeEnum)) : base(instrumentType)
        {
            // to ensure "instrumentId" is required (not null)
            if (instrumentId == null)
            {
                throw new ArgumentNullException("instrumentId is a required property for ReferenceInstrument and cannot be null");
            }
            this.InstrumentId = instrumentId;
            // to ensure "instrumentIdType" is required (not null)
            if (instrumentIdType == null)
            {
                throw new ArgumentNullException("instrumentIdType is a required property for ReferenceInstrument and cannot be null");
            }
            this.InstrumentIdType = instrumentIdType;
            // to ensure "scope" is required (not null)
            if (scope == null)
            {
                throw new ArgumentNullException("scope is a required property for ReferenceInstrument and cannot be null");
            }
            this.Scope = scope;
        }

        /// <summary>
        /// The Identifier code
        /// </summary>
        /// <value>The Identifier code</value>
        [DataMember(Name = "instrumentId", IsRequired = true, EmitDefaultValue = true)]
        public string InstrumentId { get; set; }

        /// <summary>
        /// The type of the instrument id e.g. LusidInstrument Id
        /// </summary>
        /// <value>The type of the instrument id e.g. LusidInstrument Id</value>
        [DataMember(Name = "instrumentIdType", IsRequired = true, EmitDefaultValue = true)]
        public string InstrumentIdType { get; set; }

        /// <summary>
        /// Scope for the instrument (optional)
        /// </summary>
        /// <value>Scope for the instrument (optional)</value>
        [DataMember(Name = "scope", IsRequired = true, EmitDefaultValue = true)]
        public string Scope { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ReferenceInstrument {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  InstrumentId: ").Append(InstrumentId).Append("\n");
            sb.Append("  InstrumentIdType: ").Append(InstrumentIdType).Append("\n");
            sb.Append("  Scope: ").Append(Scope).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ReferenceInstrument);
        }

        /// <summary>
        /// Returns true if ReferenceInstrument instances are equal
        /// </summary>
        /// <param name="input">Instance of ReferenceInstrument to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ReferenceInstrument input)
        {
            if (input == null)
            {
                return false;
            }
            return base.Equals(input) && 
                (
                    this.InstrumentId == input.InstrumentId ||
                    (this.InstrumentId != null &&
                    this.InstrumentId.Equals(input.InstrumentId))
                ) && base.Equals(input) && 
                (
                    this.InstrumentIdType == input.InstrumentIdType ||
                    (this.InstrumentIdType != null &&
                    this.InstrumentIdType.Equals(input.InstrumentIdType))
                ) && base.Equals(input) && 
                (
                    this.Scope == input.Scope ||
                    (this.Scope != null &&
                    this.Scope.Equals(input.Scope))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = base.GetHashCode();
                if (this.InstrumentId != null)
                {
                    hashCode = (hashCode * 59) + this.InstrumentId.GetHashCode();
                }
                if (this.InstrumentIdType != null)
                {
                    hashCode = (hashCode * 59) + this.InstrumentIdType.GetHashCode();
                }
                if (this.Scope != null)
                {
                    hashCode = (hashCode * 59) + this.Scope.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            return this.BaseValidate(validationContext);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        protected IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> BaseValidate(ValidationContext validationContext)
        {
            foreach (var x in base.BaseValidate(validationContext))
            {
                yield return x;
            }
            // InstrumentId (string) minLength
            if (this.InstrumentId != null && this.InstrumentId.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for InstrumentId, length must be greater than 1.", new [] { "InstrumentId" });
            }

            // InstrumentIdType (string) minLength
            if (this.InstrumentIdType != null && this.InstrumentIdType.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for InstrumentIdType, length must be greater than 1.", new [] { "InstrumentIdType" });
            }

            // Scope (string) minLength
            if (this.Scope != null && this.Scope.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Scope, length must be greater than 1.", new [] { "Scope" });
            }

            yield break;
        }
    }
}
