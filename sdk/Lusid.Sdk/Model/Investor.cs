/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Lusid.Sdk.Client.OpenAPIDateConverter;

namespace Lusid.Sdk.Model
{
    /// <summary>
    /// Representation of an Investor on the LUSID API
    /// </summary>
    [DataContract(Name = "Investor")]
    public partial class Investor : IEquatable<Investor>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Investor" /> class.
        /// </summary>
        /// <param name="investorType">The type of the Investor.</param>
        /// <param name="investorIdentifiers">The identifiers of the Investor.</param>
        /// <param name="entityUniqueId">The unique Investor entity identifier.</param>
        /// <param name="person">person.</param>
        /// <param name="legalEntity">legalEntity.</param>
        public Investor(string investorType = default(string), Dictionary<string, Property> investorIdentifiers = default(Dictionary<string, Property>), string entityUniqueId = default(string), Person person = default(Person), LegalEntity legalEntity = default(LegalEntity))
        {
            this.InvestorType = investorType;
            this.InvestorIdentifiers = investorIdentifiers;
            this.EntityUniqueId = entityUniqueId;
            this.Person = person;
            this.LegalEntity = legalEntity;
        }

        /// <summary>
        /// The type of the Investor
        /// </summary>
        /// <value>The type of the Investor</value>
        [DataMember(Name = "investorType", EmitDefaultValue = true)]
        public string InvestorType { get; set; }

        /// <summary>
        /// The identifiers of the Investor
        /// </summary>
        /// <value>The identifiers of the Investor</value>
        [DataMember(Name = "investorIdentifiers", EmitDefaultValue = true)]
        public Dictionary<string, Property> InvestorIdentifiers { get; set; }

        /// <summary>
        /// The unique Investor entity identifier
        /// </summary>
        /// <value>The unique Investor entity identifier</value>
        [DataMember(Name = "entityUniqueId", EmitDefaultValue = true)]
        public string EntityUniqueId { get; set; }

        /// <summary>
        /// Gets or Sets Person
        /// </summary>
        [DataMember(Name = "person", EmitDefaultValue = false)]
        public Person Person { get; set; }

        /// <summary>
        /// Gets or Sets LegalEntity
        /// </summary>
        [DataMember(Name = "legalEntity", EmitDefaultValue = false)]
        public LegalEntity LegalEntity { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Investor {\n");
            sb.Append("  InvestorType: ").Append(InvestorType).Append("\n");
            sb.Append("  InvestorIdentifiers: ").Append(InvestorIdentifiers).Append("\n");
            sb.Append("  EntityUniqueId: ").Append(EntityUniqueId).Append("\n");
            sb.Append("  Person: ").Append(Person).Append("\n");
            sb.Append("  LegalEntity: ").Append(LegalEntity).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Investor);
        }

        /// <summary>
        /// Returns true if Investor instances are equal
        /// </summary>
        /// <param name="input">Instance of Investor to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Investor input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.InvestorType == input.InvestorType ||
                    (this.InvestorType != null &&
                    this.InvestorType.Equals(input.InvestorType))
                ) && 
                (
                    this.InvestorIdentifiers == input.InvestorIdentifiers ||
                    this.InvestorIdentifiers != null &&
                    input.InvestorIdentifiers != null &&
                    this.InvestorIdentifiers.SequenceEqual(input.InvestorIdentifiers)
                ) && 
                (
                    this.EntityUniqueId == input.EntityUniqueId ||
                    (this.EntityUniqueId != null &&
                    this.EntityUniqueId.Equals(input.EntityUniqueId))
                ) && 
                (
                    this.Person == input.Person ||
                    (this.Person != null &&
                    this.Person.Equals(input.Person))
                ) && 
                (
                    this.LegalEntity == input.LegalEntity ||
                    (this.LegalEntity != null &&
                    this.LegalEntity.Equals(input.LegalEntity))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.InvestorType != null)
                {
                    hashCode = (hashCode * 59) + this.InvestorType.GetHashCode();
                }
                if (this.InvestorIdentifiers != null)
                {
                    hashCode = (hashCode * 59) + this.InvestorIdentifiers.GetHashCode();
                }
                if (this.EntityUniqueId != null)
                {
                    hashCode = (hashCode * 59) + this.EntityUniqueId.GetHashCode();
                }
                if (this.Person != null)
                {
                    hashCode = (hashCode * 59) + this.Person.GetHashCode();
                }
                if (this.LegalEntity != null)
                {
                    hashCode = (hashCode * 59) + this.LegalEntity.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
