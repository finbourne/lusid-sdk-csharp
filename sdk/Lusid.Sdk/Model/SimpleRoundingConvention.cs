/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Lusid.Sdk.Client.OpenAPIDateConverter;

namespace Lusid.Sdk.Model
{
    /// <summary>
    /// Certain bonds will follow certain rounding conventions. For example, Thai government bonds will round accrued interest and cashflow values 2dp, whereas for French government bonds, the rounding is to 7dp.
    /// </summary>
    [DataContract(Name = "SimpleRoundingConvention")]
    public partial class SimpleRoundingConvention : IEquatable<SimpleRoundingConvention>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SimpleRoundingConvention" /> class.
        /// </summary>
        /// <param name="precision">The precision of the rounding. The decimal places or significant figures to which the rounding takes place..</param>
        /// <param name="roundingType">The type of rounding.  e.g. Round Up, Round Down  Supported string (enumeration) values are: [Down, Up, Nearest]..</param>
        public SimpleRoundingConvention(int precision = default(int), string roundingType = default(string))
        {
            this.Precision = precision;
            this.RoundingType = roundingType;
        }

        /// <summary>
        /// The precision of the rounding. The decimal places or significant figures to which the rounding takes place.
        /// </summary>
        /// <value>The precision of the rounding. The decimal places or significant figures to which the rounding takes place.</value>
        [DataMember(Name = "precision", EmitDefaultValue = true)]
        public int Precision { get; set; }

        /// <summary>
        /// The type of rounding.  e.g. Round Up, Round Down  Supported string (enumeration) values are: [Down, Up, Nearest].
        /// </summary>
        /// <value>The type of rounding.  e.g. Round Up, Round Down  Supported string (enumeration) values are: [Down, Up, Nearest].</value>
        [DataMember(Name = "roundingType", EmitDefaultValue = true)]
        public string RoundingType { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SimpleRoundingConvention {\n");
            sb.Append("  Precision: ").Append(Precision).Append("\n");
            sb.Append("  RoundingType: ").Append(RoundingType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SimpleRoundingConvention);
        }

        /// <summary>
        /// Returns true if SimpleRoundingConvention instances are equal
        /// </summary>
        /// <param name="input">Instance of SimpleRoundingConvention to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SimpleRoundingConvention input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Precision == input.Precision ||
                    this.Precision.Equals(input.Precision)
                ) && 
                (
                    this.RoundingType == input.RoundingType ||
                    (this.RoundingType != null &&
                    this.RoundingType.Equals(input.RoundingType))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Precision.GetHashCode();
                if (this.RoundingType != null)
                {
                    hashCode = (hashCode * 59) + this.RoundingType.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
