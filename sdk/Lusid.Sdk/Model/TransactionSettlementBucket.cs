/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Lusid.Sdk.Client.OpenAPIDateConverter;

namespace Lusid.Sdk.Model
{
    /// <summary>
    /// TransactionSettlementBucket
    /// </summary>
    [DataContract(Name = "TransactionSettlementBucket")]
    public partial class TransactionSettlementBucket : IEquatable<TransactionSettlementBucket>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TransactionSettlementBucket" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected TransactionSettlementBucket() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="TransactionSettlementBucket" /> class.
        /// </summary>
        /// <param name="settlementCategory">A category representing the set of movement types that this instruction applies to. (required).</param>
        /// <param name="lusidInstrumentId">The LusidInstrumentId of the instrument being settled. (required).</param>
        /// <param name="instrumentScope">The Scope of the instrument being settled. (required).</param>
        /// <param name="contractualSettlementDate">The contractual settlement date. Used to match the instruction to the correct settlement bucket..</param>
        /// <param name="contractedUnits">The contracted units..</param>
        /// <param name="settledUnits">The settled units..</param>
        /// <param name="unsettledUnits">The unsettled units..</param>
        /// <param name="overdueUnits">The overdue units..</param>
        /// <param name="configuredSettlement">The method of settlement for the settlement bucket, as defined in the portfolio&#39;s SettlementConfiguration.</param>
        /// <param name="status">The Status of the settlement bucket - &#39;Settled&#39;, &#39;Part Settled&#39; or &#39;Unsettled&#39;. (required).</param>
        /// <param name="settlementInstructions">The settlement instructions received for this settlement bucket..</param>
        /// <param name="movements">The movements for the settlement bucket..</param>
        public TransactionSettlementBucket(string settlementCategory = default(string), string lusidInstrumentId = default(string), string instrumentScope = default(string), DateTimeOffset? contractualSettlementDate = default(DateTimeOffset?), decimal contractedUnits = default(decimal), decimal settledUnits = default(decimal), decimal unsettledUnits = default(decimal), decimal overdueUnits = default(decimal), string configuredSettlement = default(string), string status = default(string), List<TransactionSettlementInstruction> settlementInstructions = default(List<TransactionSettlementInstruction>), List<TransactionSettlementMovement> movements = default(List<TransactionSettlementMovement>))
        {
            // to ensure "settlementCategory" is required (not null)
            if (settlementCategory == null)
            {
                throw new ArgumentNullException("settlementCategory is a required property for TransactionSettlementBucket and cannot be null");
            }
            this.SettlementCategory = settlementCategory;
            // to ensure "lusidInstrumentId" is required (not null)
            if (lusidInstrumentId == null)
            {
                throw new ArgumentNullException("lusidInstrumentId is a required property for TransactionSettlementBucket and cannot be null");
            }
            this.LusidInstrumentId = lusidInstrumentId;
            // to ensure "instrumentScope" is required (not null)
            if (instrumentScope == null)
            {
                throw new ArgumentNullException("instrumentScope is a required property for TransactionSettlementBucket and cannot be null");
            }
            this.InstrumentScope = instrumentScope;
            // to ensure "status" is required (not null)
            if (status == null)
            {
                throw new ArgumentNullException("status is a required property for TransactionSettlementBucket and cannot be null");
            }
            this.Status = status;
            this.ContractualSettlementDate = contractualSettlementDate;
            this.ContractedUnits = contractedUnits;
            this.SettledUnits = settledUnits;
            this.UnsettledUnits = unsettledUnits;
            this.OverdueUnits = overdueUnits;
            this.ConfiguredSettlement = configuredSettlement;
            this.SettlementInstructions = settlementInstructions;
            this.Movements = movements;
        }

        /// <summary>
        /// A category representing the set of movement types that this instruction applies to.
        /// </summary>
        /// <value>A category representing the set of movement types that this instruction applies to.</value>
        [DataMember(Name = "settlementCategory", IsRequired = true, EmitDefaultValue = true)]
        public string SettlementCategory { get; set; }

        /// <summary>
        /// The LusidInstrumentId of the instrument being settled.
        /// </summary>
        /// <value>The LusidInstrumentId of the instrument being settled.</value>
        [DataMember(Name = "lusidInstrumentId", IsRequired = true, EmitDefaultValue = true)]
        public string LusidInstrumentId { get; set; }

        /// <summary>
        /// The Scope of the instrument being settled.
        /// </summary>
        /// <value>The Scope of the instrument being settled.</value>
        [DataMember(Name = "instrumentScope", IsRequired = true, EmitDefaultValue = true)]
        public string InstrumentScope { get; set; }

        /// <summary>
        /// The contractual settlement date. Used to match the instruction to the correct settlement bucket.
        /// </summary>
        /// <value>The contractual settlement date. Used to match the instruction to the correct settlement bucket.</value>
        [DataMember(Name = "contractualSettlementDate", EmitDefaultValue = true)]
        public DateTimeOffset? ContractualSettlementDate { get; set; }

        /// <summary>
        /// The contracted units.
        /// </summary>
        /// <value>The contracted units.</value>
        [DataMember(Name = "contractedUnits", EmitDefaultValue = true)]
        public decimal ContractedUnits { get; set; }

        /// <summary>
        /// The settled units.
        /// </summary>
        /// <value>The settled units.</value>
        [DataMember(Name = "settledUnits", EmitDefaultValue = true)]
        public decimal SettledUnits { get; set; }

        /// <summary>
        /// The unsettled units.
        /// </summary>
        /// <value>The unsettled units.</value>
        [DataMember(Name = "unsettledUnits", EmitDefaultValue = true)]
        public decimal UnsettledUnits { get; set; }

        /// <summary>
        /// The overdue units.
        /// </summary>
        /// <value>The overdue units.</value>
        [DataMember(Name = "overdueUnits", EmitDefaultValue = true)]
        public decimal OverdueUnits { get; set; }

        /// <summary>
        /// The method of settlement for the settlement bucket, as defined in the portfolio&#39;s SettlementConfiguration
        /// </summary>
        /// <value>The method of settlement for the settlement bucket, as defined in the portfolio&#39;s SettlementConfiguration</value>
        [DataMember(Name = "configuredSettlement", EmitDefaultValue = true)]
        public string ConfiguredSettlement { get; set; }

        /// <summary>
        /// The Status of the settlement bucket - &#39;Settled&#39;, &#39;Part Settled&#39; or &#39;Unsettled&#39;.
        /// </summary>
        /// <value>The Status of the settlement bucket - &#39;Settled&#39;, &#39;Part Settled&#39; or &#39;Unsettled&#39;.</value>
        [DataMember(Name = "status", IsRequired = true, EmitDefaultValue = true)]
        public string Status { get; set; }

        /// <summary>
        /// The settlement instructions received for this settlement bucket.
        /// </summary>
        /// <value>The settlement instructions received for this settlement bucket.</value>
        [DataMember(Name = "settlementInstructions", EmitDefaultValue = true)]
        public List<TransactionSettlementInstruction> SettlementInstructions { get; set; }

        /// <summary>
        /// The movements for the settlement bucket.
        /// </summary>
        /// <value>The movements for the settlement bucket.</value>
        [DataMember(Name = "movements", EmitDefaultValue = true)]
        public List<TransactionSettlementMovement> Movements { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class TransactionSettlementBucket {\n");
            sb.Append("  SettlementCategory: ").Append(SettlementCategory).Append("\n");
            sb.Append("  LusidInstrumentId: ").Append(LusidInstrumentId).Append("\n");
            sb.Append("  InstrumentScope: ").Append(InstrumentScope).Append("\n");
            sb.Append("  ContractualSettlementDate: ").Append(ContractualSettlementDate).Append("\n");
            sb.Append("  ContractedUnits: ").Append(ContractedUnits).Append("\n");
            sb.Append("  SettledUnits: ").Append(SettledUnits).Append("\n");
            sb.Append("  UnsettledUnits: ").Append(UnsettledUnits).Append("\n");
            sb.Append("  OverdueUnits: ").Append(OverdueUnits).Append("\n");
            sb.Append("  ConfiguredSettlement: ").Append(ConfiguredSettlement).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  SettlementInstructions: ").Append(SettlementInstructions).Append("\n");
            sb.Append("  Movements: ").Append(Movements).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TransactionSettlementBucket);
        }

        /// <summary>
        /// Returns true if TransactionSettlementBucket instances are equal
        /// </summary>
        /// <param name="input">Instance of TransactionSettlementBucket to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TransactionSettlementBucket input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.SettlementCategory == input.SettlementCategory ||
                    (this.SettlementCategory != null &&
                    this.SettlementCategory.Equals(input.SettlementCategory))
                ) && 
                (
                    this.LusidInstrumentId == input.LusidInstrumentId ||
                    (this.LusidInstrumentId != null &&
                    this.LusidInstrumentId.Equals(input.LusidInstrumentId))
                ) && 
                (
                    this.InstrumentScope == input.InstrumentScope ||
                    (this.InstrumentScope != null &&
                    this.InstrumentScope.Equals(input.InstrumentScope))
                ) && 
                (
                    this.ContractualSettlementDate == input.ContractualSettlementDate ||
                    (this.ContractualSettlementDate != null &&
                    this.ContractualSettlementDate.Equals(input.ContractualSettlementDate))
                ) && 
                (
                    this.ContractedUnits == input.ContractedUnits ||
                    this.ContractedUnits.Equals(input.ContractedUnits)
                ) && 
                (
                    this.SettledUnits == input.SettledUnits ||
                    this.SettledUnits.Equals(input.SettledUnits)
                ) && 
                (
                    this.UnsettledUnits == input.UnsettledUnits ||
                    this.UnsettledUnits.Equals(input.UnsettledUnits)
                ) && 
                (
                    this.OverdueUnits == input.OverdueUnits ||
                    this.OverdueUnits.Equals(input.OverdueUnits)
                ) && 
                (
                    this.ConfiguredSettlement == input.ConfiguredSettlement ||
                    (this.ConfiguredSettlement != null &&
                    this.ConfiguredSettlement.Equals(input.ConfiguredSettlement))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.SettlementInstructions == input.SettlementInstructions ||
                    this.SettlementInstructions != null &&
                    input.SettlementInstructions != null &&
                    this.SettlementInstructions.SequenceEqual(input.SettlementInstructions)
                ) && 
                (
                    this.Movements == input.Movements ||
                    this.Movements != null &&
                    input.Movements != null &&
                    this.Movements.SequenceEqual(input.Movements)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.SettlementCategory != null)
                {
                    hashCode = (hashCode * 59) + this.SettlementCategory.GetHashCode();
                }
                if (this.LusidInstrumentId != null)
                {
                    hashCode = (hashCode * 59) + this.LusidInstrumentId.GetHashCode();
                }
                if (this.InstrumentScope != null)
                {
                    hashCode = (hashCode * 59) + this.InstrumentScope.GetHashCode();
                }
                if (this.ContractualSettlementDate != null)
                {
                    hashCode = (hashCode * 59) + this.ContractualSettlementDate.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.ContractedUnits.GetHashCode();
                hashCode = (hashCode * 59) + this.SettledUnits.GetHashCode();
                hashCode = (hashCode * 59) + this.UnsettledUnits.GetHashCode();
                hashCode = (hashCode * 59) + this.OverdueUnits.GetHashCode();
                if (this.ConfiguredSettlement != null)
                {
                    hashCode = (hashCode * 59) + this.ConfiguredSettlement.GetHashCode();
                }
                if (this.Status != null)
                {
                    hashCode = (hashCode * 59) + this.Status.GetHashCode();
                }
                if (this.SettlementInstructions != null)
                {
                    hashCode = (hashCode * 59) + this.SettlementInstructions.GetHashCode();
                }
                if (this.Movements != null)
                {
                    hashCode = (hashCode * 59) + this.Movements.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // SettlementCategory (string) minLength
            if (this.SettlementCategory != null && this.SettlementCategory.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SettlementCategory, length must be greater than 1.", new [] { "SettlementCategory" });
            }

            // LusidInstrumentId (string) minLength
            if (this.LusidInstrumentId != null && this.LusidInstrumentId.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for LusidInstrumentId, length must be greater than 1.", new [] { "LusidInstrumentId" });
            }

            // InstrumentScope (string) minLength
            if (this.InstrumentScope != null && this.InstrumentScope.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for InstrumentScope, length must be greater than 1.", new [] { "InstrumentScope" });
            }

            // Status (string) minLength
            if (this.Status != null && this.Status.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Status, length must be greater than 1.", new [] { "Status" });
            }

            yield break;
        }
    }
}
