/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Lusid.Sdk.Client.OpenAPIDateConverter;

namespace Lusid.Sdk.Model
{
    /// <summary>
    /// GroupReconciliationComparisonRuleStringValueMap
    /// </summary>
    [DataContract(Name = "GroupReconciliationComparisonRuleStringValueMap")]
    public partial class GroupReconciliationComparisonRuleStringValueMap : IEquatable<GroupReconciliationComparisonRuleStringValueMap>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GroupReconciliationComparisonRuleStringValueMap" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected GroupReconciliationComparisonRuleStringValueMap() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="GroupReconciliationComparisonRuleStringValueMap" /> class.
        /// </summary>
        /// <param name="leftValue">The left string to map (required).</param>
        /// <param name="rightValue">The right string to map (required).</param>
        /// <param name="direction">The direction to map. \&quot;UniDirectional\&quot; | \&quot;BiDirectional\&quot; (required).</param>
        public GroupReconciliationComparisonRuleStringValueMap(string leftValue = default(string), string rightValue = default(string), string direction = default(string))
        {
            // to ensure "leftValue" is required (not null)
            if (leftValue == null)
            {
                throw new ArgumentNullException("leftValue is a required property for GroupReconciliationComparisonRuleStringValueMap and cannot be null");
            }
            this.LeftValue = leftValue;
            // to ensure "rightValue" is required (not null)
            if (rightValue == null)
            {
                throw new ArgumentNullException("rightValue is a required property for GroupReconciliationComparisonRuleStringValueMap and cannot be null");
            }
            this.RightValue = rightValue;
            // to ensure "direction" is required (not null)
            if (direction == null)
            {
                throw new ArgumentNullException("direction is a required property for GroupReconciliationComparisonRuleStringValueMap and cannot be null");
            }
            this.Direction = direction;
        }

        /// <summary>
        /// The left string to map
        /// </summary>
        /// <value>The left string to map</value>
        [DataMember(Name = "leftValue", IsRequired = true, EmitDefaultValue = true)]
        public string LeftValue { get; set; }

        /// <summary>
        /// The right string to map
        /// </summary>
        /// <value>The right string to map</value>
        [DataMember(Name = "rightValue", IsRequired = true, EmitDefaultValue = true)]
        public string RightValue { get; set; }

        /// <summary>
        /// The direction to map. \&quot;UniDirectional\&quot; | \&quot;BiDirectional\&quot;
        /// </summary>
        /// <value>The direction to map. \&quot;UniDirectional\&quot; | \&quot;BiDirectional\&quot;</value>
        [DataMember(Name = "direction", IsRequired = true, EmitDefaultValue = true)]
        public string Direction { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class GroupReconciliationComparisonRuleStringValueMap {\n");
            sb.Append("  LeftValue: ").Append(LeftValue).Append("\n");
            sb.Append("  RightValue: ").Append(RightValue).Append("\n");
            sb.Append("  Direction: ").Append(Direction).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GroupReconciliationComparisonRuleStringValueMap);
        }

        /// <summary>
        /// Returns true if GroupReconciliationComparisonRuleStringValueMap instances are equal
        /// </summary>
        /// <param name="input">Instance of GroupReconciliationComparisonRuleStringValueMap to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GroupReconciliationComparisonRuleStringValueMap input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.LeftValue == input.LeftValue ||
                    (this.LeftValue != null &&
                    this.LeftValue.Equals(input.LeftValue))
                ) && 
                (
                    this.RightValue == input.RightValue ||
                    (this.RightValue != null &&
                    this.RightValue.Equals(input.RightValue))
                ) && 
                (
                    this.Direction == input.Direction ||
                    (this.Direction != null &&
                    this.Direction.Equals(input.Direction))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.LeftValue != null)
                {
                    hashCode = (hashCode * 59) + this.LeftValue.GetHashCode();
                }
                if (this.RightValue != null)
                {
                    hashCode = (hashCode * 59) + this.RightValue.GetHashCode();
                }
                if (this.Direction != null)
                {
                    hashCode = (hashCode * 59) + this.Direction.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // LeftValue (string) maxLength
            if (this.LeftValue != null && this.LeftValue.Length > 256)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for LeftValue, length must be less than 256.", new [] { "LeftValue" });
            }

            // LeftValue (string) minLength
            if (this.LeftValue != null && this.LeftValue.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for LeftValue, length must be greater than 1.", new [] { "LeftValue" });
            }

            // RightValue (string) maxLength
            if (this.RightValue != null && this.RightValue.Length > 256)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for RightValue, length must be less than 256.", new [] { "RightValue" });
            }

            // RightValue (string) minLength
            if (this.RightValue != null && this.RightValue.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for RightValue, length must be greater than 1.", new [] { "RightValue" });
            }

            // Direction (string) minLength
            if (this.Direction != null && this.Direction.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Direction, length must be greater than 1.", new [] { "Direction" });
            }

            yield break;
        }
    }
}
