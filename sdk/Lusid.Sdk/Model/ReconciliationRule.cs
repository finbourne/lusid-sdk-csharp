/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using JsonSubTypes;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Lusid.Sdk.Client.OpenAPIDateConverter;

namespace Lusid.Sdk.Model
{
    /// <summary>
    /// Base class for representing reconciliation rules in LUSID. Reconciliation rules describe how a comparison between two items in the reconciliation should be performed and what constitutes equality. This does not influence WHAT constitutes a match, but only whether once a line has been matched whether an item within it matches another item. If a rule is not given for an item, it will default to equality comparison. This base class should not be directly instantiated; each supported ReconciliationRuleType has a corresponding inherited class.
    /// </summary>
    [DataContract(Name = "ReconciliationRule")]
    [JsonConverter(typeof(JsonSubtypes), "RuleType")]
    [JsonSubtypes.KnownSubType(typeof(ReconcileDateTimeRule), "ReconcileDateTimeRule")]
    [JsonSubtypes.KnownSubType(typeof(ReconcileNumericRule), "ReconcileNumericRule")]
    [JsonSubtypes.KnownSubType(typeof(ReconcileStringRule), "ReconcileStringRule")]
    public partial class ReconciliationRule : IEquatable<ReconciliationRule>, IValidatableObject
    {
        /// <summary>
        /// The available values are: ReconcileNumericRule, ReconcileDateTimeRule, ReconcileStringRule, ReconcileExact
        /// </summary>
        /// <value>The available values are: ReconcileNumericRule, ReconcileDateTimeRule, ReconcileStringRule, ReconcileExact</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum RuleTypeEnum
        {
            /// <summary>
            /// Enum ReconcileNumericRule for value: ReconcileNumericRule
            /// </summary>
            [EnumMember(Value = "ReconcileNumericRule")]
            ReconcileNumericRule = 1,

            /// <summary>
            /// Enum ReconcileDateTimeRule for value: ReconcileDateTimeRule
            /// </summary>
            [EnumMember(Value = "ReconcileDateTimeRule")]
            ReconcileDateTimeRule = 2,

            /// <summary>
            /// Enum ReconcileStringRule for value: ReconcileStringRule
            /// </summary>
            [EnumMember(Value = "ReconcileStringRule")]
            ReconcileStringRule = 3,

            /// <summary>
            /// Enum ReconcileExact for value: ReconcileExact
            /// </summary>
            [EnumMember(Value = "ReconcileExact")]
            ReconcileExact = 4
        }


        /// <summary>
        /// The available values are: ReconcileNumericRule, ReconcileDateTimeRule, ReconcileStringRule, ReconcileExact
        /// </summary>
        /// <value>The available values are: ReconcileNumericRule, ReconcileDateTimeRule, ReconcileStringRule, ReconcileExact</value>
        [DataMember(Name = "ruleType", IsRequired = true, EmitDefaultValue = true)]
        public RuleTypeEnum RuleType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ReconciliationRule" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ReconciliationRule() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ReconciliationRule" /> class.
        /// </summary>
        /// <param name="ruleType">The available values are: ReconcileNumericRule, ReconcileDateTimeRule, ReconcileStringRule, ReconcileExact (required).</param>
        public ReconciliationRule(RuleTypeEnum ruleType = default(RuleTypeEnum))
        {
            this.RuleType = ruleType;
        }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ReconciliationRule {\n");
            sb.Append("  RuleType: ").Append(RuleType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ReconciliationRule);
        }

        /// <summary>
        /// Returns true if ReconciliationRule instances are equal
        /// </summary>
        /// <param name="input">Instance of ReconciliationRule to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ReconciliationRule input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.RuleType == input.RuleType ||
                    this.RuleType.Equals(input.RuleType)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.RuleType.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            return this.BaseValidate(validationContext);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        protected IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> BaseValidate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
