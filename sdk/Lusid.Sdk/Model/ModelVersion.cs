/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Lusid.Sdk.Client.OpenAPIDateConverter;

namespace Lusid.Sdk.Model
{
    /// <summary>
    /// The version metadata.
    /// </summary>
    [DataContract(Name = "varVersion")]
    public partial class ModelVersion : IEquatable<ModelVersion>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ModelVersion" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ModelVersion() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ModelVersion" /> class.
        /// </summary>
        /// <param name="effectiveFrom">The effective datetime at which this version became valid. Only applies when a single entity is being interacted with. (required).</param>
        /// <param name="asAtDate">The asAt datetime at which the data was committed to LUSID. (required).</param>
        /// <param name="asAtCreated">The asAt datetime at which the entity was first created in LUSID..</param>
        /// <param name="userIdCreated">The unique id of the user who created the entity..</param>
        /// <param name="requestIdCreated">The unique request id of the command that created the entity..</param>
        /// <param name="asAtModified">The asAt datetime at which the entity (including its properties) was last updated in LUSID..</param>
        /// <param name="userIdModified">The unique id of the user who last updated the entity (including its properties) in LUSID..</param>
        /// <param name="requestIdModified">The unique request id of the command that last updated the entity (including its properties) in LUSID..</param>
        /// <param name="asAtVersionNumber">The integer version number for the entity (the entity was created at version 1).</param>
        /// <param name="entityUniqueId">The unique id of the entity.</param>
        /// <param name="stagedModificationIdModified">The ID of the staged change that resulted in the most recent modification..</param>
        public ModelVersion(DateTimeOffset effectiveFrom = default(DateTimeOffset), DateTimeOffset asAtDate = default(DateTimeOffset), DateTimeOffset? asAtCreated = default(DateTimeOffset?), string userIdCreated = default(string), string requestIdCreated = default(string), DateTimeOffset? asAtModified = default(DateTimeOffset?), string userIdModified = default(string), string requestIdModified = default(string), int? asAtVersionNumber = default(int?), string entityUniqueId = default(string), string stagedModificationIdModified = default(string))
        {
            this.EffectiveFrom = effectiveFrom;
            this.AsAtDate = asAtDate;
            this.AsAtCreated = asAtCreated;
            this.UserIdCreated = userIdCreated;
            this.RequestIdCreated = requestIdCreated;
            this.AsAtModified = asAtModified;
            this.UserIdModified = userIdModified;
            this.RequestIdModified = requestIdModified;
            this.AsAtVersionNumber = asAtVersionNumber;
            this.EntityUniqueId = entityUniqueId;
            this.StagedModificationIdModified = stagedModificationIdModified;
        }

        /// <summary>
        /// The effective datetime at which this version became valid. Only applies when a single entity is being interacted with.
        /// </summary>
        /// <value>The effective datetime at which this version became valid. Only applies when a single entity is being interacted with.</value>
        [DataMember(Name = "effectiveFrom", IsRequired = true, EmitDefaultValue = true)]
        public DateTimeOffset EffectiveFrom { get; set; }

        /// <summary>
        /// The asAt datetime at which the data was committed to LUSID.
        /// </summary>
        /// <value>The asAt datetime at which the data was committed to LUSID.</value>
        [DataMember(Name = "asAtDate", IsRequired = true, EmitDefaultValue = true)]
        public DateTimeOffset AsAtDate { get; set; }

        /// <summary>
        /// The asAt datetime at which the entity was first created in LUSID.
        /// </summary>
        /// <value>The asAt datetime at which the entity was first created in LUSID.</value>
        [DataMember(Name = "asAtCreated", EmitDefaultValue = true)]
        public DateTimeOffset? AsAtCreated { get; set; }

        /// <summary>
        /// The unique id of the user who created the entity.
        /// </summary>
        /// <value>The unique id of the user who created the entity.</value>
        [DataMember(Name = "userIdCreated", EmitDefaultValue = true)]
        public string UserIdCreated { get; set; }

        /// <summary>
        /// The unique request id of the command that created the entity.
        /// </summary>
        /// <value>The unique request id of the command that created the entity.</value>
        [DataMember(Name = "requestIdCreated", EmitDefaultValue = true)]
        public string RequestIdCreated { get; set; }

        /// <summary>
        /// The asAt datetime at which the entity (including its properties) was last updated in LUSID.
        /// </summary>
        /// <value>The asAt datetime at which the entity (including its properties) was last updated in LUSID.</value>
        [DataMember(Name = "asAtModified", EmitDefaultValue = true)]
        public DateTimeOffset? AsAtModified { get; set; }

        /// <summary>
        /// The unique id of the user who last updated the entity (including its properties) in LUSID.
        /// </summary>
        /// <value>The unique id of the user who last updated the entity (including its properties) in LUSID.</value>
        [DataMember(Name = "userIdModified", EmitDefaultValue = true)]
        public string UserIdModified { get; set; }

        /// <summary>
        /// The unique request id of the command that last updated the entity (including its properties) in LUSID.
        /// </summary>
        /// <value>The unique request id of the command that last updated the entity (including its properties) in LUSID.</value>
        [DataMember(Name = "requestIdModified", EmitDefaultValue = true)]
        public string RequestIdModified { get; set; }

        /// <summary>
        /// The integer version number for the entity (the entity was created at version 1)
        /// </summary>
        /// <value>The integer version number for the entity (the entity was created at version 1)</value>
        [DataMember(Name = "asAtVersionNumber", EmitDefaultValue = true)]
        public int? AsAtVersionNumber { get; set; }

        /// <summary>
        /// The unique id of the entity
        /// </summary>
        /// <value>The unique id of the entity</value>
        [DataMember(Name = "entityUniqueId", EmitDefaultValue = true)]
        public string EntityUniqueId { get; set; }

        /// <summary>
        /// The ID of the staged change that resulted in the most recent modification.
        /// </summary>
        /// <value>The ID of the staged change that resulted in the most recent modification.</value>
        [DataMember(Name = "stagedModificationIdModified", EmitDefaultValue = true)]
        public string StagedModificationIdModified { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ModelVersion {\n");
            sb.Append("  EffectiveFrom: ").Append(EffectiveFrom).Append("\n");
            sb.Append("  AsAtDate: ").Append(AsAtDate).Append("\n");
            sb.Append("  AsAtCreated: ").Append(AsAtCreated).Append("\n");
            sb.Append("  UserIdCreated: ").Append(UserIdCreated).Append("\n");
            sb.Append("  RequestIdCreated: ").Append(RequestIdCreated).Append("\n");
            sb.Append("  AsAtModified: ").Append(AsAtModified).Append("\n");
            sb.Append("  UserIdModified: ").Append(UserIdModified).Append("\n");
            sb.Append("  RequestIdModified: ").Append(RequestIdModified).Append("\n");
            sb.Append("  AsAtVersionNumber: ").Append(AsAtVersionNumber).Append("\n");
            sb.Append("  EntityUniqueId: ").Append(EntityUniqueId).Append("\n");
            sb.Append("  StagedModificationIdModified: ").Append(StagedModificationIdModified).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ModelVersion);
        }

        /// <summary>
        /// Returns true if ModelVersion instances are equal
        /// </summary>
        /// <param name="input">Instance of ModelVersion to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ModelVersion input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.EffectiveFrom == input.EffectiveFrom ||
                    (this.EffectiveFrom != null &&
                    this.EffectiveFrom.Equals(input.EffectiveFrom))
                ) && 
                (
                    this.AsAtDate == input.AsAtDate ||
                    (this.AsAtDate != null &&
                    this.AsAtDate.Equals(input.AsAtDate))
                ) && 
                (
                    this.AsAtCreated == input.AsAtCreated ||
                    (this.AsAtCreated != null &&
                    this.AsAtCreated.Equals(input.AsAtCreated))
                ) && 
                (
                    this.UserIdCreated == input.UserIdCreated ||
                    (this.UserIdCreated != null &&
                    this.UserIdCreated.Equals(input.UserIdCreated))
                ) && 
                (
                    this.RequestIdCreated == input.RequestIdCreated ||
                    (this.RequestIdCreated != null &&
                    this.RequestIdCreated.Equals(input.RequestIdCreated))
                ) && 
                (
                    this.AsAtModified == input.AsAtModified ||
                    (this.AsAtModified != null &&
                    this.AsAtModified.Equals(input.AsAtModified))
                ) && 
                (
                    this.UserIdModified == input.UserIdModified ||
                    (this.UserIdModified != null &&
                    this.UserIdModified.Equals(input.UserIdModified))
                ) && 
                (
                    this.RequestIdModified == input.RequestIdModified ||
                    (this.RequestIdModified != null &&
                    this.RequestIdModified.Equals(input.RequestIdModified))
                ) && 
                (
                    this.AsAtVersionNumber == input.AsAtVersionNumber ||
                    (this.AsAtVersionNumber != null &&
                    this.AsAtVersionNumber.Equals(input.AsAtVersionNumber))
                ) && 
                (
                    this.EntityUniqueId == input.EntityUniqueId ||
                    (this.EntityUniqueId != null &&
                    this.EntityUniqueId.Equals(input.EntityUniqueId))
                ) && 
                (
                    this.StagedModificationIdModified == input.StagedModificationIdModified ||
                    (this.StagedModificationIdModified != null &&
                    this.StagedModificationIdModified.Equals(input.StagedModificationIdModified))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.EffectiveFrom != null)
                {
                    hashCode = (hashCode * 59) + this.EffectiveFrom.GetHashCode();
                }
                if (this.AsAtDate != null)
                {
                    hashCode = (hashCode * 59) + this.AsAtDate.GetHashCode();
                }
                if (this.AsAtCreated != null)
                {
                    hashCode = (hashCode * 59) + this.AsAtCreated.GetHashCode();
                }
                if (this.UserIdCreated != null)
                {
                    hashCode = (hashCode * 59) + this.UserIdCreated.GetHashCode();
                }
                if (this.RequestIdCreated != null)
                {
                    hashCode = (hashCode * 59) + this.RequestIdCreated.GetHashCode();
                }
                if (this.AsAtModified != null)
                {
                    hashCode = (hashCode * 59) + this.AsAtModified.GetHashCode();
                }
                if (this.UserIdModified != null)
                {
                    hashCode = (hashCode * 59) + this.UserIdModified.GetHashCode();
                }
                if (this.RequestIdModified != null)
                {
                    hashCode = (hashCode * 59) + this.RequestIdModified.GetHashCode();
                }
                if (this.AsAtVersionNumber != null)
                {
                    hashCode = (hashCode * 59) + this.AsAtVersionNumber.GetHashCode();
                }
                if (this.EntityUniqueId != null)
                {
                    hashCode = (hashCode * 59) + this.EntityUniqueId.GetHashCode();
                }
                if (this.StagedModificationIdModified != null)
                {
                    hashCode = (hashCode * 59) + this.StagedModificationIdModified.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
