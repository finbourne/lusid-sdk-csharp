/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Lusid.Sdk.Client.OpenAPIDateConverter;

namespace Lusid.Sdk.Model
{
    /// <summary>
    /// BranchStepRequestAllOf
    /// </summary>
    [DataContract(Name = "BranchStepRequest_allOf")]
    public partial class BranchStepRequestAllOf : IEquatable<BranchStepRequestAllOf>, IValidatableObject
    {
        /// <summary>
        /// . The available values are: FilterStepRequest, GroupByStepRequest, GroupFilterStepRequest, BranchStepRequest, CheckStepRequest
        /// </summary>
        /// <value>. The available values are: FilterStepRequest, GroupByStepRequest, GroupFilterStepRequest, BranchStepRequest, CheckStepRequest</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ComplianceStepTypeRequestEnum
        {
            /// <summary>
            /// Enum FilterStepRequest for value: FilterStepRequest
            /// </summary>
            [EnumMember(Value = "FilterStepRequest")]
            FilterStepRequest = 1,

            /// <summary>
            /// Enum GroupByStepRequest for value: GroupByStepRequest
            /// </summary>
            [EnumMember(Value = "GroupByStepRequest")]
            GroupByStepRequest = 2,

            /// <summary>
            /// Enum GroupFilterStepRequest for value: GroupFilterStepRequest
            /// </summary>
            [EnumMember(Value = "GroupFilterStepRequest")]
            GroupFilterStepRequest = 3,

            /// <summary>
            /// Enum BranchStepRequest for value: BranchStepRequest
            /// </summary>
            [EnumMember(Value = "BranchStepRequest")]
            BranchStepRequest = 4,

            /// <summary>
            /// Enum CheckStepRequest for value: CheckStepRequest
            /// </summary>
            [EnumMember(Value = "CheckStepRequest")]
            CheckStepRequest = 5

        }


        /// <summary>
        /// . The available values are: FilterStepRequest, GroupByStepRequest, GroupFilterStepRequest, BranchStepRequest, CheckStepRequest
        /// </summary>
        /// <value>. The available values are: FilterStepRequest, GroupByStepRequest, GroupFilterStepRequest, BranchStepRequest, CheckStepRequest</value>
        [DataMember(Name = "complianceStepTypeRequest", IsRequired = true, EmitDefaultValue = true)]
        public ComplianceStepTypeRequestEnum ComplianceStepTypeRequest { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="BranchStepRequestAllOf" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected BranchStepRequestAllOf() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="BranchStepRequestAllOf" /> class.
        /// </summary>
        /// <param name="label">The label of the compliance step (required).</param>
        /// <param name="complianceStepTypeRequest">. The available values are: FilterStepRequest, GroupByStepRequest, GroupFilterStepRequest, BranchStepRequest, CheckStepRequest (required).</param>
        public BranchStepRequestAllOf(string label = default(string), ComplianceStepTypeRequestEnum complianceStepTypeRequest = default(ComplianceStepTypeRequestEnum))
        {
            // to ensure "label" is required (not null)
            if (label == null)
            {
                throw new ArgumentNullException("label is a required property for BranchStepRequestAllOf and cannot be null");
            }
            this.Label = label;
            this.ComplianceStepTypeRequest = complianceStepTypeRequest;
        }

        /// <summary>
        /// The label of the compliance step
        /// </summary>
        /// <value>The label of the compliance step</value>
        [DataMember(Name = "label", IsRequired = true, EmitDefaultValue = true)]
        public string Label { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class BranchStepRequestAllOf {\n");
            sb.Append("  Label: ").Append(Label).Append("\n");
            sb.Append("  ComplianceStepTypeRequest: ").Append(ComplianceStepTypeRequest).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as BranchStepRequestAllOf);
        }

        /// <summary>
        /// Returns true if BranchStepRequestAllOf instances are equal
        /// </summary>
        /// <param name="input">Instance of BranchStepRequestAllOf to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BranchStepRequestAllOf input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Label == input.Label ||
                    (this.Label != null &&
                    this.Label.Equals(input.Label))
                ) && 
                (
                    this.ComplianceStepTypeRequest == input.ComplianceStepTypeRequest ||
                    this.ComplianceStepTypeRequest.Equals(input.ComplianceStepTypeRequest)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Label != null)
                {
                    hashCode = (hashCode * 59) + this.Label.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.ComplianceStepTypeRequest.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Label (string) maxLength
            if (this.Label != null && this.Label.Length > 64)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Label, length must be less than 64.", new [] { "Label" });
            }

            // Label (string) minLength
            if (this.Label != null && this.Label.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Label, length must be greater than 1.", new [] { "Label" });
            }

            yield break;
        }
    }
}
