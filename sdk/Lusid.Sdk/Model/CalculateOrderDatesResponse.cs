/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Lusid.Sdk.Client.OpenAPIDateConverter;

namespace Lusid.Sdk.Model
{
    /// <summary>
    /// CalculateOrderDatesResponse
    /// </summary>
    [DataContract(Name = "CalculateOrderDatesResponse")]
    public partial class CalculateOrderDatesResponse : IEquatable<CalculateOrderDatesResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CalculateOrderDatesResponse" /> class.
        /// </summary>
        /// <param name="successes">A dictionary of successful date calculations, keyed by the request key..</param>
        /// <param name="failed">A dictionary of failed date calculations, keyed by the request key, containing the error details of any failures that occurred during the calculation..</param>
        /// <param name="links">links.</param>
        public CalculateOrderDatesResponse(Dictionary<string, TransferAgencyDates> successes = default(Dictionary<string, TransferAgencyDates>), Dictionary<string, ErrorDetail> failed = default(Dictionary<string, ErrorDetail>), List<Link> links = default(List<Link>))
        {
            this.Successes = successes;
            this.Failed = failed;
            this.Links = links;
        }

        /// <summary>
        /// A dictionary of successful date calculations, keyed by the request key.
        /// </summary>
        /// <value>A dictionary of successful date calculations, keyed by the request key.</value>
        [DataMember(Name = "successes", EmitDefaultValue = true)]
        public Dictionary<string, TransferAgencyDates> Successes { get; set; }

        /// <summary>
        /// A dictionary of failed date calculations, keyed by the request key, containing the error details of any failures that occurred during the calculation.
        /// </summary>
        /// <value>A dictionary of failed date calculations, keyed by the request key, containing the error details of any failures that occurred during the calculation.</value>
        [DataMember(Name = "failed", EmitDefaultValue = true)]
        public Dictionary<string, ErrorDetail> Failed { get; set; }

        /// <summary>
        /// Gets or Sets Links
        /// </summary>
        [DataMember(Name = "links", EmitDefaultValue = true)]
        public List<Link> Links { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CalculateOrderDatesResponse {\n");
            sb.Append("  Successes: ").Append(Successes).Append("\n");
            sb.Append("  Failed: ").Append(Failed).Append("\n");
            sb.Append("  Links: ").Append(Links).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CalculateOrderDatesResponse);
        }

        /// <summary>
        /// Returns true if CalculateOrderDatesResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of CalculateOrderDatesResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CalculateOrderDatesResponse input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Successes == input.Successes ||
                    this.Successes != null &&
                    input.Successes != null &&
                    this.Successes.SequenceEqual(input.Successes)
                ) && 
                (
                    this.Failed == input.Failed ||
                    this.Failed != null &&
                    input.Failed != null &&
                    this.Failed.SequenceEqual(input.Failed)
                ) && 
                (
                    this.Links == input.Links ||
                    this.Links != null &&
                    input.Links != null &&
                    this.Links.SequenceEqual(input.Links)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Successes != null)
                {
                    hashCode = (hashCode * 59) + this.Successes.GetHashCode();
                }
                if (this.Failed != null)
                {
                    hashCode = (hashCode * 59) + this.Failed.GetHashCode();
                }
                if (this.Links != null)
                {
                    hashCode = (hashCode * 59) + this.Links.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
