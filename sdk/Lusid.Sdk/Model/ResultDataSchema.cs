/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Lusid.Sdk.Client.OpenAPIDateConverter;

namespace Lusid.Sdk.Model
{
    /// <summary>
    /// The shape and type of the returned data. The AddressSchema gives information about the requested keys,  including the return type, links to further documentation, lifecycle status and removal date if they are  deprecated.                Note: the NodeValueSchema and PropertySchema fields have been deprecated. Please use the AddressSchema instead.
    /// </summary>
    [DataContract(Name = "ResultDataSchema")]
    public partial class ResultDataSchema : IEquatable<ResultDataSchema>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ResultDataSchema" /> class.
        /// </summary>
        /// <param name="nodeValueSchema">This has been deprecated. Please use AddressSchema instead..</param>
        /// <param name="propertySchema">This has been deprecated. Please use AddressSchema instead..</param>
        /// <param name="addressSchema">addressSchema.</param>
        public ResultDataSchema(Dictionary<string, FieldSchema> nodeValueSchema = default(Dictionary<string, FieldSchema>), Dictionary<string, FieldSchema> propertySchema = default(Dictionary<string, FieldSchema>), Dictionary<string, AddressDefinition> addressSchema = default(Dictionary<string, AddressDefinition>))
        {
            this.NodeValueSchema = nodeValueSchema;
            this.PropertySchema = propertySchema;
            this.AddressSchema = addressSchema;
        }

        /// <summary>
        /// This has been deprecated. Please use AddressSchema instead.
        /// </summary>
        /// <value>This has been deprecated. Please use AddressSchema instead.</value>
        [DataMember(Name = "nodeValueSchema", EmitDefaultValue = true)]
        public Dictionary<string, FieldSchema> NodeValueSchema { get; set; }

        /// <summary>
        /// This has been deprecated. Please use AddressSchema instead.
        /// </summary>
        /// <value>This has been deprecated. Please use AddressSchema instead.</value>
        [DataMember(Name = "propertySchema", EmitDefaultValue = true)]
        public Dictionary<string, FieldSchema> PropertySchema { get; set; }

        /// <summary>
        /// Gets or Sets AddressSchema
        /// </summary>
        [DataMember(Name = "addressSchema", EmitDefaultValue = true)]
        public Dictionary<string, AddressDefinition> AddressSchema { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ResultDataSchema {\n");
            sb.Append("  NodeValueSchema: ").Append(NodeValueSchema).Append("\n");
            sb.Append("  PropertySchema: ").Append(PropertySchema).Append("\n");
            sb.Append("  AddressSchema: ").Append(AddressSchema).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ResultDataSchema);
        }

        /// <summary>
        /// Returns true if ResultDataSchema instances are equal
        /// </summary>
        /// <param name="input">Instance of ResultDataSchema to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ResultDataSchema input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.NodeValueSchema == input.NodeValueSchema ||
                    this.NodeValueSchema != null &&
                    input.NodeValueSchema != null &&
                    this.NodeValueSchema.SequenceEqual(input.NodeValueSchema)
                ) && 
                (
                    this.PropertySchema == input.PropertySchema ||
                    this.PropertySchema != null &&
                    input.PropertySchema != null &&
                    this.PropertySchema.SequenceEqual(input.PropertySchema)
                ) && 
                (
                    this.AddressSchema == input.AddressSchema ||
                    this.AddressSchema != null &&
                    input.AddressSchema != null &&
                    this.AddressSchema.SequenceEqual(input.AddressSchema)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.NodeValueSchema != null)
                {
                    hashCode = (hashCode * 59) + this.NodeValueSchema.GetHashCode();
                }
                if (this.PropertySchema != null)
                {
                    hashCode = (hashCode * 59) + this.PropertySchema.GetHashCode();
                }
                if (this.AddressSchema != null)
                {
                    hashCode = (hashCode * 59) + this.AddressSchema.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
