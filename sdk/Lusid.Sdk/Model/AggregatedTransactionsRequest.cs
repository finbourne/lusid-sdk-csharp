/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Lusid.Sdk.Client.OpenAPIDateConverter;

namespace Lusid.Sdk.Model
{
    /// <summary>
    /// AggregatedTransactionsRequest
    /// </summary>
    [DataContract(Name = "AggregatedTransactionsRequest")]
    public partial class AggregatedTransactionsRequest : IEquatable<AggregatedTransactionsRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AggregatedTransactionsRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected AggregatedTransactionsRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="AggregatedTransactionsRequest" /> class.
        /// </summary>
        /// <param name="fromTransactionDate">fromTransactionDate (required).</param>
        /// <param name="toTransactionDate">toTransactionDate (required).</param>
        /// <param name="portfolioId">portfolioId.</param>
        /// <param name="portfolioEntityIds">The set of portfolio or portfolio group identifiers containing the relevant transactions..</param>
        /// <param name="asAt">asAt.</param>
        /// <param name="metrics">metrics (required).</param>
        /// <param name="groupBy">groupBy.</param>
        /// <param name="filters">filters.</param>
        /// <param name="sort">sort.</param>
        public AggregatedTransactionsRequest(DateTimeOffset fromTransactionDate = default(DateTimeOffset), DateTimeOffset toTransactionDate = default(DateTimeOffset), ResourceId portfolioId = default(ResourceId), List<PortfolioEntityId> portfolioEntityIds = default(List<PortfolioEntityId>), DateTimeOffset? asAt = default(DateTimeOffset?), List<AggregateSpec> metrics = default(List<AggregateSpec>), List<string> groupBy = default(List<string>), List<PropertyFilter> filters = default(List<PropertyFilter>), List<OrderBySpec> sort = default(List<OrderBySpec>))
        {
            this.FromTransactionDate = fromTransactionDate;
            this.ToTransactionDate = toTransactionDate;
            // to ensure "metrics" is required (not null)
            if (metrics == null)
            {
                throw new ArgumentNullException("metrics is a required property for AggregatedTransactionsRequest and cannot be null");
            }
            this.Metrics = metrics;
            this.PortfolioId = portfolioId;
            this.PortfolioEntityIds = portfolioEntityIds;
            this.AsAt = asAt;
            this.GroupBy = groupBy;
            this.Filters = filters;
            this.Sort = sort;
        }

        /// <summary>
        /// Gets or Sets FromTransactionDate
        /// </summary>
        [DataMember(Name = "fromTransactionDate", IsRequired = true, EmitDefaultValue = true)]
        public DateTimeOffset FromTransactionDate { get; set; }

        /// <summary>
        /// Gets or Sets ToTransactionDate
        /// </summary>
        [DataMember(Name = "toTransactionDate", IsRequired = true, EmitDefaultValue = true)]
        public DateTimeOffset ToTransactionDate { get; set; }

        /// <summary>
        /// Gets or Sets PortfolioId
        /// </summary>
        [DataMember(Name = "portfolioId", EmitDefaultValue = false)]
        public ResourceId PortfolioId { get; set; }

        /// <summary>
        /// The set of portfolio or portfolio group identifiers containing the relevant transactions.
        /// </summary>
        /// <value>The set of portfolio or portfolio group identifiers containing the relevant transactions.</value>
        [DataMember(Name = "portfolioEntityIds", EmitDefaultValue = true)]
        public List<PortfolioEntityId> PortfolioEntityIds { get; set; }

        /// <summary>
        /// Gets or Sets AsAt
        /// </summary>
        [DataMember(Name = "asAt", EmitDefaultValue = true)]
        public DateTimeOffset? AsAt { get; set; }

        /// <summary>
        /// Gets or Sets Metrics
        /// </summary>
        [DataMember(Name = "metrics", IsRequired = true, EmitDefaultValue = true)]
        public List<AggregateSpec> Metrics { get; set; }

        /// <summary>
        /// Gets or Sets GroupBy
        /// </summary>
        [DataMember(Name = "groupBy", EmitDefaultValue = true)]
        public List<string> GroupBy { get; set; }

        /// <summary>
        /// Gets or Sets Filters
        /// </summary>
        [DataMember(Name = "filters", EmitDefaultValue = true)]
        public List<PropertyFilter> Filters { get; set; }

        /// <summary>
        /// Gets or Sets Sort
        /// </summary>
        [DataMember(Name = "sort", EmitDefaultValue = true)]
        public List<OrderBySpec> Sort { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AggregatedTransactionsRequest {\n");
            sb.Append("  FromTransactionDate: ").Append(FromTransactionDate).Append("\n");
            sb.Append("  ToTransactionDate: ").Append(ToTransactionDate).Append("\n");
            sb.Append("  PortfolioId: ").Append(PortfolioId).Append("\n");
            sb.Append("  PortfolioEntityIds: ").Append(PortfolioEntityIds).Append("\n");
            sb.Append("  AsAt: ").Append(AsAt).Append("\n");
            sb.Append("  Metrics: ").Append(Metrics).Append("\n");
            sb.Append("  GroupBy: ").Append(GroupBy).Append("\n");
            sb.Append("  Filters: ").Append(Filters).Append("\n");
            sb.Append("  Sort: ").Append(Sort).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AggregatedTransactionsRequest);
        }

        /// <summary>
        /// Returns true if AggregatedTransactionsRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of AggregatedTransactionsRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AggregatedTransactionsRequest input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.FromTransactionDate == input.FromTransactionDate ||
                    (this.FromTransactionDate != null &&
                    this.FromTransactionDate.Equals(input.FromTransactionDate))
                ) && 
                (
                    this.ToTransactionDate == input.ToTransactionDate ||
                    (this.ToTransactionDate != null &&
                    this.ToTransactionDate.Equals(input.ToTransactionDate))
                ) && 
                (
                    this.PortfolioId == input.PortfolioId ||
                    (this.PortfolioId != null &&
                    this.PortfolioId.Equals(input.PortfolioId))
                ) && 
                (
                    this.PortfolioEntityIds == input.PortfolioEntityIds ||
                    this.PortfolioEntityIds != null &&
                    input.PortfolioEntityIds != null &&
                    this.PortfolioEntityIds.SequenceEqual(input.PortfolioEntityIds)
                ) && 
                (
                    this.AsAt == input.AsAt ||
                    (this.AsAt != null &&
                    this.AsAt.Equals(input.AsAt))
                ) && 
                (
                    this.Metrics == input.Metrics ||
                    this.Metrics != null &&
                    input.Metrics != null &&
                    this.Metrics.SequenceEqual(input.Metrics)
                ) && 
                (
                    this.GroupBy == input.GroupBy ||
                    this.GroupBy != null &&
                    input.GroupBy != null &&
                    this.GroupBy.SequenceEqual(input.GroupBy)
                ) && 
                (
                    this.Filters == input.Filters ||
                    this.Filters != null &&
                    input.Filters != null &&
                    this.Filters.SequenceEqual(input.Filters)
                ) && 
                (
                    this.Sort == input.Sort ||
                    this.Sort != null &&
                    input.Sort != null &&
                    this.Sort.SequenceEqual(input.Sort)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.FromTransactionDate != null)
                {
                    hashCode = (hashCode * 59) + this.FromTransactionDate.GetHashCode();
                }
                if (this.ToTransactionDate != null)
                {
                    hashCode = (hashCode * 59) + this.ToTransactionDate.GetHashCode();
                }
                if (this.PortfolioId != null)
                {
                    hashCode = (hashCode * 59) + this.PortfolioId.GetHashCode();
                }
                if (this.PortfolioEntityIds != null)
                {
                    hashCode = (hashCode * 59) + this.PortfolioEntityIds.GetHashCode();
                }
                if (this.AsAt != null)
                {
                    hashCode = (hashCode * 59) + this.AsAt.GetHashCode();
                }
                if (this.Metrics != null)
                {
                    hashCode = (hashCode * 59) + this.Metrics.GetHashCode();
                }
                if (this.GroupBy != null)
                {
                    hashCode = (hashCode * 59) + this.GroupBy.GetHashCode();
                }
                if (this.Filters != null)
                {
                    hashCode = (hashCode * 59) + this.Filters.GetHashCode();
                }
                if (this.Sort != null)
                {
                    hashCode = (hashCode * 59) + this.Sort.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
