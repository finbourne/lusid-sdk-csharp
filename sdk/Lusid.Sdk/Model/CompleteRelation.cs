/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Lusid.Sdk.Client.OpenAPIDateConverter;

namespace Lusid.Sdk.Model
{
    /// <summary>
    /// Representation of a relation containing details of source and target entities, and both outward and inward descriptions.
    /// </summary>
    [DataContract(Name = "CompleteRelation")]
    public partial class CompleteRelation : IEquatable<CompleteRelation>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CompleteRelation" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CompleteRelation() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CompleteRelation" /> class.
        /// </summary>
        /// <param name="href">href.</param>
        /// <param name="varVersion">varVersion.</param>
        /// <param name="relationDefinitionId">relationDefinitionId (required).</param>
        /// <param name="sourceEntityId">sourceEntityId (required).</param>
        /// <param name="targetEntityId">targetEntityId (required).</param>
        /// <param name="outwardDescription">outwardDescription (required).</param>
        /// <param name="inwardDescription">inwardDescription (required).</param>
        /// <param name="effectiveFrom">effectiveFrom.</param>
        public CompleteRelation(string href = default(string), ModelVersion varVersion = default(ModelVersion), ResourceId relationDefinitionId = default(ResourceId), Dictionary<string, string> sourceEntityId = default(Dictionary<string, string>), Dictionary<string, string> targetEntityId = default(Dictionary<string, string>), string outwardDescription = default(string), string inwardDescription = default(string), DateTimeOffset effectiveFrom = default(DateTimeOffset))
        {
            // to ensure "relationDefinitionId" is required (not null)
            if (relationDefinitionId == null)
            {
                throw new ArgumentNullException("relationDefinitionId is a required property for CompleteRelation and cannot be null");
            }
            this.RelationDefinitionId = relationDefinitionId;
            // to ensure "sourceEntityId" is required (not null)
            if (sourceEntityId == null)
            {
                throw new ArgumentNullException("sourceEntityId is a required property for CompleteRelation and cannot be null");
            }
            this.SourceEntityId = sourceEntityId;
            // to ensure "targetEntityId" is required (not null)
            if (targetEntityId == null)
            {
                throw new ArgumentNullException("targetEntityId is a required property for CompleteRelation and cannot be null");
            }
            this.TargetEntityId = targetEntityId;
            // to ensure "outwardDescription" is required (not null)
            if (outwardDescription == null)
            {
                throw new ArgumentNullException("outwardDescription is a required property for CompleteRelation and cannot be null");
            }
            this.OutwardDescription = outwardDescription;
            // to ensure "inwardDescription" is required (not null)
            if (inwardDescription == null)
            {
                throw new ArgumentNullException("inwardDescription is a required property for CompleteRelation and cannot be null");
            }
            this.InwardDescription = inwardDescription;
            this.Href = href;
            this.VarVersion = varVersion;
            this.EffectiveFrom = effectiveFrom;
        }

        /// <summary>
        /// Gets or Sets Href
        /// </summary>
        [DataMember(Name = "href", EmitDefaultValue = true)]
        public string Href { get; set; }

        /// <summary>
        /// Gets or Sets VarVersion
        /// </summary>
        [DataMember(Name = "version", EmitDefaultValue = false)]
        public ModelVersion VarVersion { get; set; }

        /// <summary>
        /// Gets or Sets RelationDefinitionId
        /// </summary>
        [DataMember(Name = "relationDefinitionId", IsRequired = true, EmitDefaultValue = true)]
        public ResourceId RelationDefinitionId { get; set; }

        /// <summary>
        /// Gets or Sets SourceEntityId
        /// </summary>
        [DataMember(Name = "sourceEntityId", IsRequired = true, EmitDefaultValue = true)]
        public Dictionary<string, string> SourceEntityId { get; set; }

        /// <summary>
        /// Gets or Sets TargetEntityId
        /// </summary>
        [DataMember(Name = "targetEntityId", IsRequired = true, EmitDefaultValue = true)]
        public Dictionary<string, string> TargetEntityId { get; set; }

        /// <summary>
        /// Gets or Sets OutwardDescription
        /// </summary>
        [DataMember(Name = "outwardDescription", IsRequired = true, EmitDefaultValue = true)]
        public string OutwardDescription { get; set; }

        /// <summary>
        /// Gets or Sets InwardDescription
        /// </summary>
        [DataMember(Name = "inwardDescription", IsRequired = true, EmitDefaultValue = true)]
        public string InwardDescription { get; set; }

        /// <summary>
        /// Gets or Sets EffectiveFrom
        /// </summary>
        [DataMember(Name = "effectiveFrom", EmitDefaultValue = false)]
        public DateTimeOffset EffectiveFrom { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CompleteRelation {\n");
            sb.Append("  Href: ").Append(Href).Append("\n");
            sb.Append("  VarVersion: ").Append(VarVersion).Append("\n");
            sb.Append("  RelationDefinitionId: ").Append(RelationDefinitionId).Append("\n");
            sb.Append("  SourceEntityId: ").Append(SourceEntityId).Append("\n");
            sb.Append("  TargetEntityId: ").Append(TargetEntityId).Append("\n");
            sb.Append("  OutwardDescription: ").Append(OutwardDescription).Append("\n");
            sb.Append("  InwardDescription: ").Append(InwardDescription).Append("\n");
            sb.Append("  EffectiveFrom: ").Append(EffectiveFrom).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CompleteRelation);
        }

        /// <summary>
        /// Returns true if CompleteRelation instances are equal
        /// </summary>
        /// <param name="input">Instance of CompleteRelation to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CompleteRelation input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Href == input.Href ||
                    (this.Href != null &&
                    this.Href.Equals(input.Href))
                ) && 
                (
                    this.VarVersion == input.VarVersion ||
                    (this.VarVersion != null &&
                    this.VarVersion.Equals(input.VarVersion))
                ) && 
                (
                    this.RelationDefinitionId == input.RelationDefinitionId ||
                    (this.RelationDefinitionId != null &&
                    this.RelationDefinitionId.Equals(input.RelationDefinitionId))
                ) && 
                (
                    this.SourceEntityId == input.SourceEntityId ||
                    this.SourceEntityId != null &&
                    input.SourceEntityId != null &&
                    this.SourceEntityId.SequenceEqual(input.SourceEntityId)
                ) && 
                (
                    this.TargetEntityId == input.TargetEntityId ||
                    this.TargetEntityId != null &&
                    input.TargetEntityId != null &&
                    this.TargetEntityId.SequenceEqual(input.TargetEntityId)
                ) && 
                (
                    this.OutwardDescription == input.OutwardDescription ||
                    (this.OutwardDescription != null &&
                    this.OutwardDescription.Equals(input.OutwardDescription))
                ) && 
                (
                    this.InwardDescription == input.InwardDescription ||
                    (this.InwardDescription != null &&
                    this.InwardDescription.Equals(input.InwardDescription))
                ) && 
                (
                    this.EffectiveFrom == input.EffectiveFrom ||
                    (this.EffectiveFrom != null &&
                    this.EffectiveFrom.Equals(input.EffectiveFrom))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Href != null)
                {
                    hashCode = (hashCode * 59) + this.Href.GetHashCode();
                }
                if (this.VarVersion != null)
                {
                    hashCode = (hashCode * 59) + this.VarVersion.GetHashCode();
                }
                if (this.RelationDefinitionId != null)
                {
                    hashCode = (hashCode * 59) + this.RelationDefinitionId.GetHashCode();
                }
                if (this.SourceEntityId != null)
                {
                    hashCode = (hashCode * 59) + this.SourceEntityId.GetHashCode();
                }
                if (this.TargetEntityId != null)
                {
                    hashCode = (hashCode * 59) + this.TargetEntityId.GetHashCode();
                }
                if (this.OutwardDescription != null)
                {
                    hashCode = (hashCode * 59) + this.OutwardDescription.GetHashCode();
                }
                if (this.InwardDescription != null)
                {
                    hashCode = (hashCode * 59) + this.InwardDescription.GetHashCode();
                }
                if (this.EffectiveFrom != null)
                {
                    hashCode = (hashCode * 59) + this.EffectiveFrom.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // OutwardDescription (string) minLength
            if (this.OutwardDescription != null && this.OutwardDescription.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for OutwardDescription, length must be greater than 1.", new [] { "OutwardDescription" });
            }

            // InwardDescription (string) minLength
            if (this.InwardDescription != null && this.InwardDescription.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for InwardDescription, length must be greater than 1.", new [] { "InwardDescription" });
            }

            yield break;
        }
    }
}
