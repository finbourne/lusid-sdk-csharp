/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Lusid.Sdk.Client.OpenAPIDateConverter;

namespace Lusid.Sdk.Model
{
    /// <summary>
    /// A leg containing a set of cashflows.
    /// </summary>
    [DataContract(Name = "InstrumentPaymentDiaryLeg")]
    public partial class InstrumentPaymentDiaryLeg : IEquatable<InstrumentPaymentDiaryLeg>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InstrumentPaymentDiaryLeg" /> class.
        /// </summary>
        /// <param name="legIndex">Index (integer) for the leg of a payment diary..</param>
        /// <param name="legId">Identifier string for the leg of a payment diary..</param>
        /// <param name="rows">List of individual cashflows within the payment diary..</param>
        public InstrumentPaymentDiaryLeg(int legIndex = default(int), string legId = default(string), List<InstrumentPaymentDiaryRow> rows = default(List<InstrumentPaymentDiaryRow>))
        {
            this.LegIndex = legIndex;
            this.LegId = legId;
            this.Rows = rows;
        }

        /// <summary>
        /// Index (integer) for the leg of a payment diary.
        /// </summary>
        /// <value>Index (integer) for the leg of a payment diary.</value>
        [DataMember(Name = "legIndex", EmitDefaultValue = true)]
        public int LegIndex { get; set; }

        /// <summary>
        /// Identifier string for the leg of a payment diary.
        /// </summary>
        /// <value>Identifier string for the leg of a payment diary.</value>
        [DataMember(Name = "legId", EmitDefaultValue = true)]
        public string LegId { get; set; }

        /// <summary>
        /// List of individual cashflows within the payment diary.
        /// </summary>
        /// <value>List of individual cashflows within the payment diary.</value>
        [DataMember(Name = "rows", EmitDefaultValue = true)]
        public List<InstrumentPaymentDiaryRow> Rows { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class InstrumentPaymentDiaryLeg {\n");
            sb.Append("  LegIndex: ").Append(LegIndex).Append("\n");
            sb.Append("  LegId: ").Append(LegId).Append("\n");
            sb.Append("  Rows: ").Append(Rows).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as InstrumentPaymentDiaryLeg);
        }

        /// <summary>
        /// Returns true if InstrumentPaymentDiaryLeg instances are equal
        /// </summary>
        /// <param name="input">Instance of InstrumentPaymentDiaryLeg to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InstrumentPaymentDiaryLeg input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.LegIndex == input.LegIndex ||
                    this.LegIndex.Equals(input.LegIndex)
                ) && 
                (
                    this.LegId == input.LegId ||
                    (this.LegId != null &&
                    this.LegId.Equals(input.LegId))
                ) && 
                (
                    this.Rows == input.Rows ||
                    this.Rows != null &&
                    input.Rows != null &&
                    this.Rows.SequenceEqual(input.Rows)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.LegIndex.GetHashCode();
                if (this.LegId != null)
                {
                    hashCode = (hashCode * 59) + this.LegId.GetHashCode();
                }
                if (this.Rows != null)
                {
                    hashCode = (hashCode * 59) + this.Rows.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
