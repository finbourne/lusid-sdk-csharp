/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Lusid.Sdk.Client.OpenAPIDateConverter;

namespace Lusid.Sdk.Model
{
    /// <summary>
    /// In the event that the legal entity is a counterparty to an OTC transaction  (as signatory to a counterparty agreement such as an ISDA 2002 Master Agreement),  this information would be needed for calculations  such as Credit-Valuation-Adjustments and Debit-Valuation-Adjustments (CVA, DVA, XVA etc).
    /// </summary>
    [DataContract(Name = "CounterpartyRiskInformation")]
    public partial class CounterpartyRiskInformation : IEquatable<CounterpartyRiskInformation>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CounterpartyRiskInformation" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CounterpartyRiskInformation() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CounterpartyRiskInformation" /> class.
        /// </summary>
        /// <param name="countryOfRisk">The country to which one would naturally ascribe risk, typically the legal entity&#39;s country of registration. This can be used to infer funding currency and related market data in the absence of a specific preference. (required).</param>
        /// <param name="creditRatings">creditRatings (required).</param>
        /// <param name="industryClassifiers">industryClassifiers (required).</param>
        public CounterpartyRiskInformation(string countryOfRisk = default(string), List<CreditRating> creditRatings = default(List<CreditRating>), List<IndustryClassifier> industryClassifiers = default(List<IndustryClassifier>))
        {
            // to ensure "countryOfRisk" is required (not null)
            if (countryOfRisk == null)
            {
                throw new ArgumentNullException("countryOfRisk is a required property for CounterpartyRiskInformation and cannot be null");
            }
            this.CountryOfRisk = countryOfRisk;
            // to ensure "creditRatings" is required (not null)
            if (creditRatings == null)
            {
                throw new ArgumentNullException("creditRatings is a required property for CounterpartyRiskInformation and cannot be null");
            }
            this.CreditRatings = creditRatings;
            // to ensure "industryClassifiers" is required (not null)
            if (industryClassifiers == null)
            {
                throw new ArgumentNullException("industryClassifiers is a required property for CounterpartyRiskInformation and cannot be null");
            }
            this.IndustryClassifiers = industryClassifiers;
        }

        /// <summary>
        /// The country to which one would naturally ascribe risk, typically the legal entity&#39;s country of registration. This can be used to infer funding currency and related market data in the absence of a specific preference.
        /// </summary>
        /// <value>The country to which one would naturally ascribe risk, typically the legal entity&#39;s country of registration. This can be used to infer funding currency and related market data in the absence of a specific preference.</value>
        [DataMember(Name = "countryOfRisk", IsRequired = true, EmitDefaultValue = true)]
        public string CountryOfRisk { get; set; }

        /// <summary>
        /// Gets or Sets CreditRatings
        /// </summary>
        [DataMember(Name = "creditRatings", IsRequired = true, EmitDefaultValue = true)]
        public List<CreditRating> CreditRatings { get; set; }

        /// <summary>
        /// Gets or Sets IndustryClassifiers
        /// </summary>
        [DataMember(Name = "industryClassifiers", IsRequired = true, EmitDefaultValue = true)]
        public List<IndustryClassifier> IndustryClassifiers { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CounterpartyRiskInformation {\n");
            sb.Append("  CountryOfRisk: ").Append(CountryOfRisk).Append("\n");
            sb.Append("  CreditRatings: ").Append(CreditRatings).Append("\n");
            sb.Append("  IndustryClassifiers: ").Append(IndustryClassifiers).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CounterpartyRiskInformation);
        }

        /// <summary>
        /// Returns true if CounterpartyRiskInformation instances are equal
        /// </summary>
        /// <param name="input">Instance of CounterpartyRiskInformation to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CounterpartyRiskInformation input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.CountryOfRisk == input.CountryOfRisk ||
                    (this.CountryOfRisk != null &&
                    this.CountryOfRisk.Equals(input.CountryOfRisk))
                ) && 
                (
                    this.CreditRatings == input.CreditRatings ||
                    this.CreditRatings != null &&
                    input.CreditRatings != null &&
                    this.CreditRatings.SequenceEqual(input.CreditRatings)
                ) && 
                (
                    this.IndustryClassifiers == input.IndustryClassifiers ||
                    this.IndustryClassifiers != null &&
                    input.IndustryClassifiers != null &&
                    this.IndustryClassifiers.SequenceEqual(input.IndustryClassifiers)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CountryOfRisk != null)
                {
                    hashCode = (hashCode * 59) + this.CountryOfRisk.GetHashCode();
                }
                if (this.CreditRatings != null)
                {
                    hashCode = (hashCode * 59) + this.CreditRatings.GetHashCode();
                }
                if (this.IndustryClassifiers != null)
                {
                    hashCode = (hashCode * 59) + this.IndustryClassifiers.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // CountryOfRisk (string) maxLength
            if (this.CountryOfRisk != null && this.CountryOfRisk.Length > 64)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CountryOfRisk, length must be less than 64.", new [] { "CountryOfRisk" });
            }

            // CountryOfRisk (string) minLength
            if (this.CountryOfRisk != null && this.CountryOfRisk.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CountryOfRisk, length must be greater than 1.", new [] { "CountryOfRisk" });
            }

            // CountryOfRisk (string) pattern
            Regex regexCountryOfRisk = new Regex(@"^[a-zA-Z0-9\-_]+$", RegexOptions.CultureInvariant);
            if (false == regexCountryOfRisk.Match(this.CountryOfRisk).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CountryOfRisk, must match a pattern of " + regexCountryOfRisk, new [] { "CountryOfRisk" });
            }

            yield break;
        }
    }
}
