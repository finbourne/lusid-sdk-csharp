/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Lusid.Sdk.Client.OpenAPIDateConverter;

namespace Lusid.Sdk.Model
{
    /// <summary>
    /// GroupReconciliationDefinitionCurrencies
    /// </summary>
    [DataContract(Name = "GroupReconciliationDefinitionCurrencies")]
    public partial class GroupReconciliationDefinitionCurrencies : IEquatable<GroupReconciliationDefinitionCurrencies>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GroupReconciliationDefinitionCurrencies" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected GroupReconciliationDefinitionCurrencies() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="GroupReconciliationDefinitionCurrencies" /> class.
        /// </summary>
        /// <param name="left">Currency for the left side of a reconciliation (required).</param>
        /// <param name="right">Currency for the right side of a reconciliation (required).</param>
        public GroupReconciliationDefinitionCurrencies(string left = default(string), string right = default(string))
        {
            // to ensure "left" is required (not null)
            if (left == null)
            {
                throw new ArgumentNullException("left is a required property for GroupReconciliationDefinitionCurrencies and cannot be null");
            }
            this.Left = left;
            // to ensure "right" is required (not null)
            if (right == null)
            {
                throw new ArgumentNullException("right is a required property for GroupReconciliationDefinitionCurrencies and cannot be null");
            }
            this.Right = right;
        }

        /// <summary>
        /// Currency for the left side of a reconciliation
        /// </summary>
        /// <value>Currency for the left side of a reconciliation</value>
        [DataMember(Name = "left", IsRequired = true, EmitDefaultValue = true)]
        public string Left { get; set; }

        /// <summary>
        /// Currency for the right side of a reconciliation
        /// </summary>
        /// <value>Currency for the right side of a reconciliation</value>
        [DataMember(Name = "right", IsRequired = true, EmitDefaultValue = true)]
        public string Right { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class GroupReconciliationDefinitionCurrencies {\n");
            sb.Append("  Left: ").Append(Left).Append("\n");
            sb.Append("  Right: ").Append(Right).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GroupReconciliationDefinitionCurrencies);
        }

        /// <summary>
        /// Returns true if GroupReconciliationDefinitionCurrencies instances are equal
        /// </summary>
        /// <param name="input">Instance of GroupReconciliationDefinitionCurrencies to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GroupReconciliationDefinitionCurrencies input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Left == input.Left ||
                    (this.Left != null &&
                    this.Left.Equals(input.Left))
                ) && 
                (
                    this.Right == input.Right ||
                    (this.Right != null &&
                    this.Right.Equals(input.Right))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Left != null)
                {
                    hashCode = (hashCode * 59) + this.Left.GetHashCode();
                }
                if (this.Right != null)
                {
                    hashCode = (hashCode * 59) + this.Right.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Left (string) maxLength
            if (this.Left != null && this.Left.Length > 3)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Left, length must be less than 3.", new [] { "Left" });
            }

            // Left (string) minLength
            if (this.Left != null && this.Left.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Left, length must be greater than 0.", new [] { "Left" });
            }

            // Left (string) pattern
            Regex regexLeft = new Regex(@"^[a-zA-Z]*$", RegexOptions.CultureInvariant);
            if (false == regexLeft.Match(this.Left).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Left, must match a pattern of " + regexLeft, new [] { "Left" });
            }

            // Right (string) maxLength
            if (this.Right != null && this.Right.Length > 3)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Right, length must be less than 3.", new [] { "Right" });
            }

            // Right (string) minLength
            if (this.Right != null && this.Right.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Right, length must be greater than 0.", new [] { "Right" });
            }

            // Right (string) pattern
            Regex regexRight = new Regex(@"^[a-zA-Z]*$", RegexOptions.CultureInvariant);
            if (false == regexRight.Match(this.Right).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Right, must match a pattern of " + regexRight, new [] { "Right" });
            }

            yield break;
        }
    }
}
