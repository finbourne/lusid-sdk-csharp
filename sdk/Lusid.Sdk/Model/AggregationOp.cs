/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Lusid.Sdk.Client.OpenAPIDateConverter;

namespace Lusid.Sdk.Model
{
    /// <summary>
    /// Defines AggregationOp
    /// </summary>
    [JsonConverter(typeof(StringEnumConverter))]
    public enum AggregationOp
    {
        /// <summary>
        /// Enum Sum for value: Sum
        /// </summary>
        [EnumMember(Value = "Sum")]
        Sum = 1,

        /// <summary>
        /// Enum DefaultSum for value: DefaultSum
        /// </summary>
        [EnumMember(Value = "DefaultSum")]
        DefaultSum = 2,

        /// <summary>
        /// Enum Proportion for value: Proportion
        /// </summary>
        [EnumMember(Value = "Proportion")]
        Proportion = 3,

        /// <summary>
        /// Enum Average for value: Average
        /// </summary>
        [EnumMember(Value = "Average")]
        Average = 4,

        /// <summary>
        /// Enum Count for value: Count
        /// </summary>
        [EnumMember(Value = "Count")]
        Count = 5,

        /// <summary>
        /// Enum Min for value: Min
        /// </summary>
        [EnumMember(Value = "Min")]
        Min = 6,

        /// <summary>
        /// Enum Max for value: Max
        /// </summary>
        [EnumMember(Value = "Max")]
        Max = 7,

        /// <summary>
        /// Enum Value for value: Value
        /// </summary>
        [EnumMember(Value = "Value")]
        Value = 8,

        /// <summary>
        /// Enum SumOfPositiveValues for value: SumOfPositiveValues
        /// </summary>
        [EnumMember(Value = "SumOfPositiveValues")]
        SumOfPositiveValues = 9,

        /// <summary>
        /// Enum SumOfNegativeValues for value: SumOfNegativeValues
        /// </summary>
        [EnumMember(Value = "SumOfNegativeValues")]
        SumOfNegativeValues = 10,

        /// <summary>
        /// Enum SumOfAbsoluteValues for value: SumOfAbsoluteValues
        /// </summary>
        [EnumMember(Value = "SumOfAbsoluteValues")]
        SumOfAbsoluteValues = 11,

        /// <summary>
        /// Enum ProportionOfAbsoluteValues for value: ProportionOfAbsoluteValues
        /// </summary>
        [EnumMember(Value = "ProportionOfAbsoluteValues")]
        ProportionOfAbsoluteValues = 12,

        /// <summary>
        /// Enum SumCumulativeInAdvance for value: SumCumulativeInAdvance
        /// </summary>
        [EnumMember(Value = "SumCumulativeInAdvance")]
        SumCumulativeInAdvance = 13,

        /// <summary>
        /// Enum SumCumulativeInArrears for value: SumCumulativeInArrears
        /// </summary>
        [EnumMember(Value = "SumCumulativeInArrears")]
        SumCumulativeInArrears = 14
    }

}
