/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using JsonSubTypes;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Lusid.Sdk.Client.OpenAPIDateConverter;

namespace Lusid.Sdk.Model
{
    /// <summary>
    /// LUSID representation of an Interest Rate Swaption.
    /// </summary>
    [DataContract(Name = "InterestRateSwaption")]
    [JsonConverter(typeof(JsonSubtypes), "InstrumentType")]
    public partial class InterestRateSwaption : LusidInstrument, IEquatable<InterestRateSwaption>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InterestRateSwaption" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected InterestRateSwaption() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="InterestRateSwaption" /> class.
        /// </summary>
        /// <param name="startDate">The start date of the instrument. This is normally synonymous with the trade-date. (required).</param>
        /// <param name="payOrReceiveFixed">True if on exercise the holder of the option enters the swap paying fixed, false if floating.    Supported string (enumeration) values are: [Pay, Receive]. (required).</param>
        /// <param name="premium">premium.</param>
        /// <param name="deliveryMethod">How does the option settle    Supported string (enumeration) values are: [Cash, Physical]. (required).</param>
        /// <param name="swap">swap (required).</param>
        /// <param name="instrumentType">The available values are: QuotedSecurity, InterestRateSwap, FxForward, Future, ExoticInstrument, FxOption, CreditDefaultSwap, InterestRateSwaption, Bond, EquityOption, FixedLeg, FloatingLeg, BespokeCashFlowsLeg, Unknown, TermDeposit, ContractForDifference, EquitySwap, CashPerpetual, CapFloor, CashSettled, CdsIndex, Basket, FundingLeg, FxSwap, ForwardRateAgreement, SimpleInstrument, Repo, Equity, ExchangeTradedOption, ReferenceInstrument, ComplexBond, InflationLinkedBond, InflationSwap, SimpleCashFlowLoan, TotalReturnSwap, InflationLeg, FundShareClass, FlexibleLoan (required) (default to &quot;InterestRateSwaption&quot;).</param>
        public InterestRateSwaption(DateTimeOffset startDate = default(DateTimeOffset), string payOrReceiveFixed = default(string), Premium premium = default(Premium), string deliveryMethod = default(string), InterestRateSwap swap = default(InterestRateSwap), InstrumentTypeEnum instrumentType = default(InstrumentTypeEnum)) : base(instrumentType)
        {
            this.StartDate = startDate;
            // to ensure "payOrReceiveFixed" is required (not null)
            if (payOrReceiveFixed == null)
            {
                throw new ArgumentNullException("payOrReceiveFixed is a required property for InterestRateSwaption and cannot be null");
            }
            this.PayOrReceiveFixed = payOrReceiveFixed;
            // to ensure "deliveryMethod" is required (not null)
            if (deliveryMethod == null)
            {
                throw new ArgumentNullException("deliveryMethod is a required property for InterestRateSwaption and cannot be null");
            }
            this.DeliveryMethod = deliveryMethod;
            // to ensure "swap" is required (not null)
            if (swap == null)
            {
                throw new ArgumentNullException("swap is a required property for InterestRateSwaption and cannot be null");
            }
            this.Swap = swap;
            this.Premium = premium;
        }

        /// <summary>
        /// The start date of the instrument. This is normally synonymous with the trade-date.
        /// </summary>
        /// <value>The start date of the instrument. This is normally synonymous with the trade-date.</value>
        [DataMember(Name = "startDate", IsRequired = true, EmitDefaultValue = true)]
        public DateTimeOffset StartDate { get; set; }

        /// <summary>
        /// True if on exercise the holder of the option enters the swap paying fixed, false if floating.    Supported string (enumeration) values are: [Pay, Receive].
        /// </summary>
        /// <value>True if on exercise the holder of the option enters the swap paying fixed, false if floating.    Supported string (enumeration) values are: [Pay, Receive].</value>
        [DataMember(Name = "payOrReceiveFixed", IsRequired = true, EmitDefaultValue = true)]
        public string PayOrReceiveFixed { get; set; }

        /// <summary>
        /// Gets or Sets Premium
        /// </summary>
        [DataMember(Name = "premium", EmitDefaultValue = false)]
        public Premium Premium { get; set; }

        /// <summary>
        /// How does the option settle    Supported string (enumeration) values are: [Cash, Physical].
        /// </summary>
        /// <value>How does the option settle    Supported string (enumeration) values are: [Cash, Physical].</value>
        [DataMember(Name = "deliveryMethod", IsRequired = true, EmitDefaultValue = true)]
        public string DeliveryMethod { get; set; }

        /// <summary>
        /// Gets or Sets Swap
        /// </summary>
        [DataMember(Name = "swap", IsRequired = true, EmitDefaultValue = true)]
        public InterestRateSwap Swap { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class InterestRateSwaption {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  StartDate: ").Append(StartDate).Append("\n");
            sb.Append("  PayOrReceiveFixed: ").Append(PayOrReceiveFixed).Append("\n");
            sb.Append("  Premium: ").Append(Premium).Append("\n");
            sb.Append("  DeliveryMethod: ").Append(DeliveryMethod).Append("\n");
            sb.Append("  Swap: ").Append(Swap).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as InterestRateSwaption);
        }

        /// <summary>
        /// Returns true if InterestRateSwaption instances are equal
        /// </summary>
        /// <param name="input">Instance of InterestRateSwaption to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InterestRateSwaption input)
        {
            if (input == null)
            {
                return false;
            }
            return base.Equals(input) && 
                (
                    this.StartDate == input.StartDate ||
                    (this.StartDate != null &&
                    this.StartDate.Equals(input.StartDate))
                ) && base.Equals(input) && 
                (
                    this.PayOrReceiveFixed == input.PayOrReceiveFixed ||
                    (this.PayOrReceiveFixed != null &&
                    this.PayOrReceiveFixed.Equals(input.PayOrReceiveFixed))
                ) && base.Equals(input) && 
                (
                    this.Premium == input.Premium ||
                    (this.Premium != null &&
                    this.Premium.Equals(input.Premium))
                ) && base.Equals(input) && 
                (
                    this.DeliveryMethod == input.DeliveryMethod ||
                    (this.DeliveryMethod != null &&
                    this.DeliveryMethod.Equals(input.DeliveryMethod))
                ) && base.Equals(input) && 
                (
                    this.Swap == input.Swap ||
                    (this.Swap != null &&
                    this.Swap.Equals(input.Swap))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = base.GetHashCode();
                if (this.StartDate != null)
                {
                    hashCode = (hashCode * 59) + this.StartDate.GetHashCode();
                }
                if (this.PayOrReceiveFixed != null)
                {
                    hashCode = (hashCode * 59) + this.PayOrReceiveFixed.GetHashCode();
                }
                if (this.Premium != null)
                {
                    hashCode = (hashCode * 59) + this.Premium.GetHashCode();
                }
                if (this.DeliveryMethod != null)
                {
                    hashCode = (hashCode * 59) + this.DeliveryMethod.GetHashCode();
                }
                if (this.Swap != null)
                {
                    hashCode = (hashCode * 59) + this.Swap.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            return this.BaseValidate(validationContext);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        protected IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> BaseValidate(ValidationContext validationContext)
        {
            foreach (var x in base.BaseValidate(validationContext))
            {
                yield return x;
            }
            // PayOrReceiveFixed (string) minLength
            if (this.PayOrReceiveFixed != null && this.PayOrReceiveFixed.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PayOrReceiveFixed, length must be greater than 1.", new [] { "PayOrReceiveFixed" });
            }

            // DeliveryMethod (string) minLength
            if (this.DeliveryMethod != null && this.DeliveryMethod.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for DeliveryMethod, length must be greater than 1.", new [] { "DeliveryMethod" });
            }

            yield break;
        }
    }
}
