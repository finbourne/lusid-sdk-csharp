/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using JsonSubTypes;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Lusid.Sdk.Client.OpenAPIDateConverter;

namespace Lusid.Sdk.Model
{
    /// <summary>
    /// CallOnIntermediateSecuritiesEvent event (EXRI), representing an exercise on intermediate securities resulting from an intermediate securities distribution.
    /// </summary>
    [DataContract(Name = "CallOnIntermediateSecuritiesEvent")]
    [JsonConverter(typeof(JsonSubtypes), "InstrumentEventType")]
    public partial class CallOnIntermediateSecuritiesEvent : InstrumentEvent, IEquatable<CallOnIntermediateSecuritiesEvent>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CallOnIntermediateSecuritiesEvent" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CallOnIntermediateSecuritiesEvent() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CallOnIntermediateSecuritiesEvent" /> class.
        /// </summary>
        /// <param name="expiryDate">The date on which the issue ends..</param>
        /// <param name="paymentDate">The payment date of the event..</param>
        /// <param name="newInstrument">newInstrument (required).</param>
        /// <param name="unitsRatio">unitsRatio (required).</param>
        /// <param name="price">The price at which new units are purchased. (required).</param>
        /// <param name="exerciseCurrency">The currency of the exercise. (required).</param>
        /// <param name="optionExerciseElections">Option exercise election for this event..</param>
        /// <param name="lapseElections">Lapse election for this event..</param>
        /// <param name="instrumentEventType">The Type of Event. The available values are: TransitionEvent, InformationalEvent, OpenEvent, CloseEvent, StockSplitEvent, BondDefaultEvent, CashDividendEvent, AmortisationEvent, CashFlowEvent, ExerciseEvent, ResetEvent, TriggerEvent, RawVendorEvent, InformationalErrorEvent, BondCouponEvent, DividendReinvestmentEvent, AccumulationEvent, BondPrincipalEvent, DividendOptionEvent, MaturityEvent, FxForwardSettlementEvent, ExpiryEvent, ScripDividendEvent, StockDividendEvent, ReverseStockSplitEvent, CapitalDistributionEvent, SpinOffEvent, MergerEvent, FutureExpiryEvent, SwapCashFlowEvent, SwapPrincipalEvent, CreditPremiumCashFlowEvent, CdsCreditEvent, CdxCreditEvent, MbsCouponEvent, MbsPrincipalEvent, BonusIssueEvent, MbsPrincipalWriteOffEvent, MbsInterestDeferralEvent, MbsInterestShortfallEvent, TenderEvent, CallOnIntermediateSecuritiesEvent, IntermediateSecuritiesDistributionEvent, OptionExercisePhysicalEvent, OptionExerciseCashEvent, ProtectionPayoutCashFlowEvent, TermDepositInterestEvent, TermDepositPrincipalEvent, EarlyRedemptionEvent, FutureMarkToMarketEvent, AdjustGlobalCommitmentEvent, ContractInitialisationEvent, DrawdownEvent, LoanInterestRepaymentEvent, UpdateDepositAmountEvent, LoanPrincipalRepaymentEvent, DepositInterestPaymentEvent, DepositCloseEvent, LoanFacilityContractRolloverEvent, RepurchaseOfferEvent, RepoPartialClosureEvent, RepoCashFlowEvent, FlexibleRepoInterestPaymentEvent, FlexibleRepoCashFlowEvent, FlexibleRepoCollateralEvent, ConversionEvent (required) (default to &quot;CallOnIntermediateSecuritiesEvent&quot;).</param>
        public CallOnIntermediateSecuritiesEvent(DateTimeOffset expiryDate = default(DateTimeOffset), DateTimeOffset paymentDate = default(DateTimeOffset), NewInstrument newInstrument = default(NewInstrument), UnitsRatio unitsRatio = default(UnitsRatio), decimal price = default(decimal), string exerciseCurrency = default(string), List<OptionExerciseElection> optionExerciseElections = default(List<OptionExerciseElection>), List<LapseElection> lapseElections = default(List<LapseElection>), InstrumentEventTypeEnum instrumentEventType = default(InstrumentEventTypeEnum)) : base(instrumentEventType)
        {
            // to ensure "newInstrument" is required (not null)
            if (newInstrument == null)
            {
                throw new ArgumentNullException("newInstrument is a required property for CallOnIntermediateSecuritiesEvent and cannot be null");
            }
            this.NewInstrument = newInstrument;
            // to ensure "unitsRatio" is required (not null)
            if (unitsRatio == null)
            {
                throw new ArgumentNullException("unitsRatio is a required property for CallOnIntermediateSecuritiesEvent and cannot be null");
            }
            this.UnitsRatio = unitsRatio;
            this.Price = price;
            // to ensure "exerciseCurrency" is required (not null)
            if (exerciseCurrency == null)
            {
                throw new ArgumentNullException("exerciseCurrency is a required property for CallOnIntermediateSecuritiesEvent and cannot be null");
            }
            this.ExerciseCurrency = exerciseCurrency;
            this.ExpiryDate = expiryDate;
            this.PaymentDate = paymentDate;
            this.OptionExerciseElections = optionExerciseElections;
            this.LapseElections = lapseElections;
        }

        /// <summary>
        /// The date on which the issue ends.
        /// </summary>
        /// <value>The date on which the issue ends.</value>
        [DataMember(Name = "expiryDate", EmitDefaultValue = false)]
        public DateTimeOffset ExpiryDate { get; set; }

        /// <summary>
        /// The payment date of the event.
        /// </summary>
        /// <value>The payment date of the event.</value>
        [DataMember(Name = "paymentDate", EmitDefaultValue = false)]
        public DateTimeOffset PaymentDate { get; set; }

        /// <summary>
        /// Gets or Sets NewInstrument
        /// </summary>
        [DataMember(Name = "newInstrument", IsRequired = true, EmitDefaultValue = true)]
        public NewInstrument NewInstrument { get; set; }

        /// <summary>
        /// Gets or Sets UnitsRatio
        /// </summary>
        [DataMember(Name = "unitsRatio", IsRequired = true, EmitDefaultValue = true)]
        public UnitsRatio UnitsRatio { get; set; }

        /// <summary>
        /// The price at which new units are purchased.
        /// </summary>
        /// <value>The price at which new units are purchased.</value>
        [DataMember(Name = "price", IsRequired = true, EmitDefaultValue = true)]
        public decimal Price { get; set; }

        /// <summary>
        /// The currency of the exercise.
        /// </summary>
        /// <value>The currency of the exercise.</value>
        [DataMember(Name = "exerciseCurrency", IsRequired = true, EmitDefaultValue = true)]
        public string ExerciseCurrency { get; set; }

        /// <summary>
        /// Option exercise election for this event.
        /// </summary>
        /// <value>Option exercise election for this event.</value>
        [DataMember(Name = "optionExerciseElections", EmitDefaultValue = true)]
        public List<OptionExerciseElection> OptionExerciseElections { get; set; }

        /// <summary>
        /// Lapse election for this event.
        /// </summary>
        /// <value>Lapse election for this event.</value>
        [DataMember(Name = "lapseElections", EmitDefaultValue = true)]
        public List<LapseElection> LapseElections { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CallOnIntermediateSecuritiesEvent {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  ExpiryDate: ").Append(ExpiryDate).Append("\n");
            sb.Append("  PaymentDate: ").Append(PaymentDate).Append("\n");
            sb.Append("  NewInstrument: ").Append(NewInstrument).Append("\n");
            sb.Append("  UnitsRatio: ").Append(UnitsRatio).Append("\n");
            sb.Append("  Price: ").Append(Price).Append("\n");
            sb.Append("  ExerciseCurrency: ").Append(ExerciseCurrency).Append("\n");
            sb.Append("  OptionExerciseElections: ").Append(OptionExerciseElections).Append("\n");
            sb.Append("  LapseElections: ").Append(LapseElections).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CallOnIntermediateSecuritiesEvent);
        }

        /// <summary>
        /// Returns true if CallOnIntermediateSecuritiesEvent instances are equal
        /// </summary>
        /// <param name="input">Instance of CallOnIntermediateSecuritiesEvent to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CallOnIntermediateSecuritiesEvent input)
        {
            if (input == null)
            {
                return false;
            }
            return base.Equals(input) && 
                (
                    this.ExpiryDate == input.ExpiryDate ||
                    (this.ExpiryDate != null &&
                    this.ExpiryDate.Equals(input.ExpiryDate))
                ) && base.Equals(input) && 
                (
                    this.PaymentDate == input.PaymentDate ||
                    (this.PaymentDate != null &&
                    this.PaymentDate.Equals(input.PaymentDate))
                ) && base.Equals(input) && 
                (
                    this.NewInstrument == input.NewInstrument ||
                    (this.NewInstrument != null &&
                    this.NewInstrument.Equals(input.NewInstrument))
                ) && base.Equals(input) && 
                (
                    this.UnitsRatio == input.UnitsRatio ||
                    (this.UnitsRatio != null &&
                    this.UnitsRatio.Equals(input.UnitsRatio))
                ) && base.Equals(input) && 
                (
                    this.Price == input.Price ||
                    this.Price.Equals(input.Price)
                ) && base.Equals(input) && 
                (
                    this.ExerciseCurrency == input.ExerciseCurrency ||
                    (this.ExerciseCurrency != null &&
                    this.ExerciseCurrency.Equals(input.ExerciseCurrency))
                ) && base.Equals(input) && 
                (
                    this.OptionExerciseElections == input.OptionExerciseElections ||
                    this.OptionExerciseElections != null &&
                    input.OptionExerciseElections != null &&
                    this.OptionExerciseElections.SequenceEqual(input.OptionExerciseElections)
                ) && base.Equals(input) && 
                (
                    this.LapseElections == input.LapseElections ||
                    this.LapseElections != null &&
                    input.LapseElections != null &&
                    this.LapseElections.SequenceEqual(input.LapseElections)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = base.GetHashCode();
                if (this.ExpiryDate != null)
                {
                    hashCode = (hashCode * 59) + this.ExpiryDate.GetHashCode();
                }
                if (this.PaymentDate != null)
                {
                    hashCode = (hashCode * 59) + this.PaymentDate.GetHashCode();
                }
                if (this.NewInstrument != null)
                {
                    hashCode = (hashCode * 59) + this.NewInstrument.GetHashCode();
                }
                if (this.UnitsRatio != null)
                {
                    hashCode = (hashCode * 59) + this.UnitsRatio.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Price.GetHashCode();
                if (this.ExerciseCurrency != null)
                {
                    hashCode = (hashCode * 59) + this.ExerciseCurrency.GetHashCode();
                }
                if (this.OptionExerciseElections != null)
                {
                    hashCode = (hashCode * 59) + this.OptionExerciseElections.GetHashCode();
                }
                if (this.LapseElections != null)
                {
                    hashCode = (hashCode * 59) + this.LapseElections.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            return this.BaseValidate(validationContext);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        protected IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> BaseValidate(ValidationContext validationContext)
        {
            foreach (var x in base.BaseValidate(validationContext))
            {
                yield return x;
            }
            yield break;
        }
    }
}
