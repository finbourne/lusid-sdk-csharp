/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Lusid.Sdk.Client.OpenAPIDateConverter;

namespace Lusid.Sdk.Model
{
    /// <summary>
    /// Recipe value represents a data that is then used to perform an atomic operation which is then used in composition of Configuration Recipe.  This object either includes the data itself (in json form or as simple string) or is a reference where the data can be obtained from (from a Configuration Recipe say).  Only one field is to be populated.
    /// </summary>
    [DataContract(Name = "RecipeValue")]
    public partial class RecipeValue : IEquatable<RecipeValue>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RecipeValue" /> class.
        /// </summary>
        /// <param name="asJson">Field to allow providing a potentially complex json value..</param>
        /// <param name="asString">For simple value, a single input value, note complex nested objects are not allowed here..</param>
        /// <param name="fromRecipe">fromRecipe.</param>
        public RecipeValue(string asJson = default(string), string asString = default(string), FromRecipe fromRecipe = default(FromRecipe))
        {
            this.AsJson = asJson;
            this.AsString = asString;
            this.FromRecipe = fromRecipe;
        }

        /// <summary>
        /// Field to allow providing a potentially complex json value.
        /// </summary>
        /// <value>Field to allow providing a potentially complex json value.</value>
        [DataMember(Name = "asJson", EmitDefaultValue = true)]
        public string AsJson { get; set; }

        /// <summary>
        /// For simple value, a single input value, note complex nested objects are not allowed here.
        /// </summary>
        /// <value>For simple value, a single input value, note complex nested objects are not allowed here.</value>
        [DataMember(Name = "asString", EmitDefaultValue = true)]
        public string AsString { get; set; }

        /// <summary>
        /// Gets or Sets FromRecipe
        /// </summary>
        [DataMember(Name = "fromRecipe", EmitDefaultValue = false)]
        public FromRecipe FromRecipe { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class RecipeValue {\n");
            sb.Append("  AsJson: ").Append(AsJson).Append("\n");
            sb.Append("  AsString: ").Append(AsString).Append("\n");
            sb.Append("  FromRecipe: ").Append(FromRecipe).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as RecipeValue);
        }

        /// <summary>
        /// Returns true if RecipeValue instances are equal
        /// </summary>
        /// <param name="input">Instance of RecipeValue to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RecipeValue input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.AsJson == input.AsJson ||
                    (this.AsJson != null &&
                    this.AsJson.Equals(input.AsJson))
                ) && 
                (
                    this.AsString == input.AsString ||
                    (this.AsString != null &&
                    this.AsString.Equals(input.AsString))
                ) && 
                (
                    this.FromRecipe == input.FromRecipe ||
                    (this.FromRecipe != null &&
                    this.FromRecipe.Equals(input.FromRecipe))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AsJson != null)
                {
                    hashCode = (hashCode * 59) + this.AsJson.GetHashCode();
                }
                if (this.AsString != null)
                {
                    hashCode = (hashCode * 59) + this.AsString.GetHashCode();
                }
                if (this.FromRecipe != null)
                {
                    hashCode = (hashCode * 59) + this.FromRecipe.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
