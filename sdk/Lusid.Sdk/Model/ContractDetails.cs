/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Lusid.Sdk.Client.OpenAPIDateConverter;

namespace Lusid.Sdk.Model
{
    /// <summary>
    /// Set of identifiers of an existing FlexibleLoan contract.
    /// </summary>
    [DataContract(Name = "ContractDetails")]
    public partial class ContractDetails : IEquatable<ContractDetails>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ContractDetails" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ContractDetails() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ContractDetails" /> class.
        /// </summary>
        /// <param name="identifiers">Unique instrument identifiers. (required).</param>
        public ContractDetails(Dictionary<string, string> identifiers = default(Dictionary<string, string>))
        {
            // to ensure "identifiers" is required (not null)
            if (identifiers == null)
            {
                throw new ArgumentNullException("identifiers is a required property for ContractDetails and cannot be null");
            }
            this.Identifiers = identifiers;
        }

        /// <summary>
        /// Unique instrument identifiers.
        /// </summary>
        /// <value>Unique instrument identifiers.</value>
        [DataMember(Name = "identifiers", IsRequired = true, EmitDefaultValue = true)]
        public Dictionary<string, string> Identifiers { get; set; }

        /// <summary>
        /// LUSID&#39;s internal unique instrument identifier - readonly field, resolved from the instrument identifiers.
        /// </summary>
        /// <value>LUSID&#39;s internal unique instrument identifier - readonly field, resolved from the instrument identifiers.</value>
        [DataMember(Name = "lusidInstrumentId", EmitDefaultValue = true)]
        public string LusidInstrumentId { get; private set; }

        /// <summary>
        /// Returns false as LusidInstrumentId should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeLusidInstrumentId()
        {
            return false;
        }
        /// <summary>
        /// The scope in which the FlexibleLoan instrument lies - readonly field, resolved from the instrument identifiers.
        /// </summary>
        /// <value>The scope in which the FlexibleLoan instrument lies - readonly field, resolved from the instrument identifiers.</value>
        [DataMember(Name = "instrumentScope", EmitDefaultValue = true)]
        public string InstrumentScope { get; private set; }

        /// <summary>
        /// Returns false as InstrumentScope should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeInstrumentScope()
        {
            return false;
        }
        /// <summary>
        /// The name of the FlexibleLoan instrument - readonly field, resolved from the instrument identifiers.
        /// </summary>
        /// <value>The name of the FlexibleLoan instrument - readonly field, resolved from the instrument identifiers.</value>
        [DataMember(Name = "instrumentName", EmitDefaultValue = true)]
        public string InstrumentName { get; private set; }

        /// <summary>
        /// Returns false as InstrumentName should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeInstrumentName()
        {
            return false;
        }
        /// <summary>
        /// The domestic currency of the instrument - readonly field, resolved from the instrument identifiers.
        /// </summary>
        /// <value>The domestic currency of the instrument - readonly field, resolved from the instrument identifiers.</value>
        [DataMember(Name = "domCcy", EmitDefaultValue = true)]
        public string DomCcy { get; private set; }

        /// <summary>
        /// Returns false as DomCcy should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeDomCcy()
        {
            return false;
        }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ContractDetails {\n");
            sb.Append("  Identifiers: ").Append(Identifiers).Append("\n");
            sb.Append("  LusidInstrumentId: ").Append(LusidInstrumentId).Append("\n");
            sb.Append("  InstrumentScope: ").Append(InstrumentScope).Append("\n");
            sb.Append("  InstrumentName: ").Append(InstrumentName).Append("\n");
            sb.Append("  DomCcy: ").Append(DomCcy).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ContractDetails);
        }

        /// <summary>
        /// Returns true if ContractDetails instances are equal
        /// </summary>
        /// <param name="input">Instance of ContractDetails to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ContractDetails input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Identifiers == input.Identifiers ||
                    this.Identifiers != null &&
                    input.Identifiers != null &&
                    this.Identifiers.SequenceEqual(input.Identifiers)
                ) && 
                (
                    this.LusidInstrumentId == input.LusidInstrumentId ||
                    (this.LusidInstrumentId != null &&
                    this.LusidInstrumentId.Equals(input.LusidInstrumentId))
                ) && 
                (
                    this.InstrumentScope == input.InstrumentScope ||
                    (this.InstrumentScope != null &&
                    this.InstrumentScope.Equals(input.InstrumentScope))
                ) && 
                (
                    this.InstrumentName == input.InstrumentName ||
                    (this.InstrumentName != null &&
                    this.InstrumentName.Equals(input.InstrumentName))
                ) && 
                (
                    this.DomCcy == input.DomCcy ||
                    (this.DomCcy != null &&
                    this.DomCcy.Equals(input.DomCcy))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Identifiers != null)
                {
                    hashCode = (hashCode * 59) + this.Identifiers.GetHashCode();
                }
                if (this.LusidInstrumentId != null)
                {
                    hashCode = (hashCode * 59) + this.LusidInstrumentId.GetHashCode();
                }
                if (this.InstrumentScope != null)
                {
                    hashCode = (hashCode * 59) + this.InstrumentScope.GetHashCode();
                }
                if (this.InstrumentName != null)
                {
                    hashCode = (hashCode * 59) + this.InstrumentName.GetHashCode();
                }
                if (this.DomCcy != null)
                {
                    hashCode = (hashCode * 59) + this.DomCcy.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
