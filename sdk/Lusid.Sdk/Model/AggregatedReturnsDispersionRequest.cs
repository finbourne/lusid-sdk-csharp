/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Lusid.Sdk.Client.OpenAPIDateConverter;

namespace Lusid.Sdk.Model
{
    /// <summary>
    /// The request used in the AggregatedReturnsDispersionMetric.
    /// </summary>
    [DataContract(Name = "AggregatedReturnsDispersionRequest")]
    public partial class AggregatedReturnsDispersionRequest : IEquatable<AggregatedReturnsDispersionRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AggregatedReturnsDispersionRequest" /> class.
        /// </summary>
        /// <param name="toEffectiveAt">The end date for when the you want the dispersion to be calculated..</param>
        /// <param name="yearsCount">For how many years to calculate the dispersion. Default to 10..</param>
        /// <param name="returnIds">The Scope and code of the returns..</param>
        /// <param name="recipeId">recipeId.</param>
        /// <param name="compositeMethod">The method used to calculate the Portfolio performance: Equal/Asset..</param>
        /// <param name="alternativeInceptionDate">Optional - either a date, or the key for a portfolio property containing a date. If provided, the given date will override the inception date for this request..</param>
        public AggregatedReturnsDispersionRequest(DateTimeOrCutLabel toEffectiveAt = default(DateTimeOrCutLabel), int yearsCount = default(int), List<ResourceId> returnIds = default(List<ResourceId>), ResourceId recipeId = default(ResourceId), string compositeMethod = default(string), string alternativeInceptionDate = default(string))
        {
            this.ToEffectiveAt = toEffectiveAt;
            this.YearsCount = yearsCount;
            this.ReturnIds = returnIds;
            this.RecipeId = recipeId;
            this.CompositeMethod = compositeMethod;
            this.AlternativeInceptionDate = alternativeInceptionDate;
        }

        /// <summary>
        /// The end date for when the you want the dispersion to be calculated.
        /// </summary>
        /// <value>The end date for when the you want the dispersion to be calculated.</value>
        [DataMember(Name = "toEffectiveAt", EmitDefaultValue = true)]
        public DateTimeOrCutLabel ToEffectiveAt { get; set; }

        /// <summary>
        /// For how many years to calculate the dispersion. Default to 10.
        /// </summary>
        /// <value>For how many years to calculate the dispersion. Default to 10.</value>
        [DataMember(Name = "yearsCount", EmitDefaultValue = true)]
        public int YearsCount { get; set; }

        /// <summary>
        /// The Scope and code of the returns.
        /// </summary>
        /// <value>The Scope and code of the returns.</value>
        [DataMember(Name = "returnIds", EmitDefaultValue = true)]
        public List<ResourceId> ReturnIds { get; set; }

        /// <summary>
        /// Gets or Sets RecipeId
        /// </summary>
        [DataMember(Name = "recipeId", EmitDefaultValue = false)]
        public ResourceId RecipeId { get; set; }

        /// <summary>
        /// The method used to calculate the Portfolio performance: Equal/Asset.
        /// </summary>
        /// <value>The method used to calculate the Portfolio performance: Equal/Asset.</value>
        [DataMember(Name = "compositeMethod", EmitDefaultValue = true)]
        public string CompositeMethod { get; set; }

        /// <summary>
        /// Optional - either a date, or the key for a portfolio property containing a date. If provided, the given date will override the inception date for this request.
        /// </summary>
        /// <value>Optional - either a date, or the key for a portfolio property containing a date. If provided, the given date will override the inception date for this request.</value>
        [DataMember(Name = "alternativeInceptionDate", EmitDefaultValue = true)]
        public string AlternativeInceptionDate { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AggregatedReturnsDispersionRequest {\n");
            sb.Append("  ToEffectiveAt: ").Append(ToEffectiveAt).Append("\n");
            sb.Append("  YearsCount: ").Append(YearsCount).Append("\n");
            sb.Append("  ReturnIds: ").Append(ReturnIds).Append("\n");
            sb.Append("  RecipeId: ").Append(RecipeId).Append("\n");
            sb.Append("  CompositeMethod: ").Append(CompositeMethod).Append("\n");
            sb.Append("  AlternativeInceptionDate: ").Append(AlternativeInceptionDate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AggregatedReturnsDispersionRequest);
        }

        /// <summary>
        /// Returns true if AggregatedReturnsDispersionRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of AggregatedReturnsDispersionRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AggregatedReturnsDispersionRequest input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.ToEffectiveAt == input.ToEffectiveAt ||
                    (this.ToEffectiveAt != null &&
                    this.ToEffectiveAt.Equals(input.ToEffectiveAt))
                ) && 
                (
                    this.YearsCount == input.YearsCount ||
                    this.YearsCount.Equals(input.YearsCount)
                ) && 
                (
                    this.ReturnIds == input.ReturnIds ||
                    this.ReturnIds != null &&
                    input.ReturnIds != null &&
                    this.ReturnIds.SequenceEqual(input.ReturnIds)
                ) && 
                (
                    this.RecipeId == input.RecipeId ||
                    (this.RecipeId != null &&
                    this.RecipeId.Equals(input.RecipeId))
                ) && 
                (
                    this.CompositeMethod == input.CompositeMethod ||
                    (this.CompositeMethod != null &&
                    this.CompositeMethod.Equals(input.CompositeMethod))
                ) && 
                (
                    this.AlternativeInceptionDate == input.AlternativeInceptionDate ||
                    (this.AlternativeInceptionDate != null &&
                    this.AlternativeInceptionDate.Equals(input.AlternativeInceptionDate))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ToEffectiveAt != null)
                {
                    hashCode = (hashCode * 59) + this.ToEffectiveAt.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.YearsCount.GetHashCode();
                if (this.ReturnIds != null)
                {
                    hashCode = (hashCode * 59) + this.ReturnIds.GetHashCode();
                }
                if (this.RecipeId != null)
                {
                    hashCode = (hashCode * 59) + this.RecipeId.GetHashCode();
                }
                if (this.CompositeMethod != null)
                {
                    hashCode = (hashCode * 59) + this.CompositeMethod.GetHashCode();
                }
                if (this.AlternativeInceptionDate != null)
                {
                    hashCode = (hashCode * 59) + this.AlternativeInceptionDate.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // ToEffectiveAt (DateTimeOrCutLabel) maxLength
            if (this.ToEffectiveAt != null && this.ToEffectiveAt.Length > 256)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ToEffectiveAt, length must be less than 256.", new [] { "ToEffectiveAt" });
            }

            // ToEffectiveAt (DateTimeOrCutLabel) minLength
            if (this.ToEffectiveAt != null && this.ToEffectiveAt.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ToEffectiveAt, length must be greater than 0.", new [] { "ToEffectiveAt" });
            }

            // ToEffectiveAt (DateTimeOrCutLabel) pattern
            Regex regexToEffectiveAt = new Regex(@"^[a-zA-Z0-9\-_\+:\.]+$", RegexOptions.CultureInvariant);
            if (false == regexToEffectiveAt.Match(this.ToEffectiveAt).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ToEffectiveAt, must match a pattern of " + regexToEffectiveAt, new [] { "ToEffectiveAt" });
            }

            // AlternativeInceptionDate (string) maxLength
            if (this.AlternativeInceptionDate != null && this.AlternativeInceptionDate.Length > 1024)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for AlternativeInceptionDate, length must be less than 1024.", new [] { "AlternativeInceptionDate" });
            }

            // AlternativeInceptionDate (string) minLength
            if (this.AlternativeInceptionDate != null && this.AlternativeInceptionDate.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for AlternativeInceptionDate, length must be greater than 0.", new [] { "AlternativeInceptionDate" });
            }

            yield break;
        }
    }
}
