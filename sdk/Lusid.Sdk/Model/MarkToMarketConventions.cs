/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Lusid.Sdk.Client.OpenAPIDateConverter;

namespace Lusid.Sdk.Model
{
    /// <summary>
    /// A set of conventions for mark to market. Mark to market is a method   that values financial instruments based on current market prices,   reflecting their current value, rather than historical cost.
    /// </summary>
    [DataContract(Name = "MarkToMarketConventions")]
    public partial class MarkToMarketConventions : IEquatable<MarkToMarketConventions>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="MarkToMarketConventions" /> class.
        /// </summary>
        /// <param name="calendarCode">The calendar to use when generating mark to market cashflows and events..</param>
        /// <param name="hourOffsetTenor">The hour tenor component of the time offset against the maturity date.  This is an optional field, if a value is provided it must be a positive value between &#39;0hour&#39; and &#39;23hour&#39;..</param>
        /// <param name="minuteOffsetTenor">The minute tenor component of the time offset against the maturity date.  This is an optional field, if a value is provided it must be a positive value between &#39;0min&#39; and &#39;59min&#39;..</param>
        public MarkToMarketConventions(string calendarCode = default(string), string hourOffsetTenor = default(string), string minuteOffsetTenor = default(string))
        {
            this.CalendarCode = calendarCode;
            this.HourOffsetTenor = hourOffsetTenor;
            this.MinuteOffsetTenor = minuteOffsetTenor;
        }

        /// <summary>
        /// The calendar to use when generating mark to market cashflows and events.
        /// </summary>
        /// <value>The calendar to use when generating mark to market cashflows and events.</value>
        [DataMember(Name = "calendarCode", EmitDefaultValue = true)]
        public string CalendarCode { get; set; }

        /// <summary>
        /// The hour tenor component of the time offset against the maturity date.  This is an optional field, if a value is provided it must be a positive value between &#39;0hour&#39; and &#39;23hour&#39;.
        /// </summary>
        /// <value>The hour tenor component of the time offset against the maturity date.  This is an optional field, if a value is provided it must be a positive value between &#39;0hour&#39; and &#39;23hour&#39;.</value>
        [DataMember(Name = "hourOffsetTenor", EmitDefaultValue = true)]
        public string HourOffsetTenor { get; set; }

        /// <summary>
        /// The minute tenor component of the time offset against the maturity date.  This is an optional field, if a value is provided it must be a positive value between &#39;0min&#39; and &#39;59min&#39;.
        /// </summary>
        /// <value>The minute tenor component of the time offset against the maturity date.  This is an optional field, if a value is provided it must be a positive value between &#39;0min&#39; and &#39;59min&#39;.</value>
        [DataMember(Name = "minuteOffsetTenor", EmitDefaultValue = true)]
        public string MinuteOffsetTenor { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class MarkToMarketConventions {\n");
            sb.Append("  CalendarCode: ").Append(CalendarCode).Append("\n");
            sb.Append("  HourOffsetTenor: ").Append(HourOffsetTenor).Append("\n");
            sb.Append("  MinuteOffsetTenor: ").Append(MinuteOffsetTenor).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as MarkToMarketConventions);
        }

        /// <summary>
        /// Returns true if MarkToMarketConventions instances are equal
        /// </summary>
        /// <param name="input">Instance of MarkToMarketConventions to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MarkToMarketConventions input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.CalendarCode == input.CalendarCode ||
                    (this.CalendarCode != null &&
                    this.CalendarCode.Equals(input.CalendarCode))
                ) && 
                (
                    this.HourOffsetTenor == input.HourOffsetTenor ||
                    (this.HourOffsetTenor != null &&
                    this.HourOffsetTenor.Equals(input.HourOffsetTenor))
                ) && 
                (
                    this.MinuteOffsetTenor == input.MinuteOffsetTenor ||
                    (this.MinuteOffsetTenor != null &&
                    this.MinuteOffsetTenor.Equals(input.MinuteOffsetTenor))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CalendarCode != null)
                {
                    hashCode = (hashCode * 59) + this.CalendarCode.GetHashCode();
                }
                if (this.HourOffsetTenor != null)
                {
                    hashCode = (hashCode * 59) + this.HourOffsetTenor.GetHashCode();
                }
                if (this.MinuteOffsetTenor != null)
                {
                    hashCode = (hashCode * 59) + this.MinuteOffsetTenor.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // CalendarCode (string) maxLength
            if (this.CalendarCode != null && this.CalendarCode.Length > 50)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CalendarCode, length must be less than 50.", new [] { "CalendarCode" });
            }

            // CalendarCode (string) minLength
            if (this.CalendarCode != null && this.CalendarCode.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CalendarCode, length must be greater than 0.", new [] { "CalendarCode" });
            }

            // HourOffsetTenor (string) maxLength
            if (this.HourOffsetTenor != null && this.HourOffsetTenor.Length > 32)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for HourOffsetTenor, length must be less than 32.", new [] { "HourOffsetTenor" });
            }

            // HourOffsetTenor (string) minLength
            if (this.HourOffsetTenor != null && this.HourOffsetTenor.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for HourOffsetTenor, length must be greater than 0.", new [] { "HourOffsetTenor" });
            }

            // MinuteOffsetTenor (string) maxLength
            if (this.MinuteOffsetTenor != null && this.MinuteOffsetTenor.Length > 32)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for MinuteOffsetTenor, length must be less than 32.", new [] { "MinuteOffsetTenor" });
            }

            // MinuteOffsetTenor (string) minLength
            if (this.MinuteOffsetTenor != null && this.MinuteOffsetTenor.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for MinuteOffsetTenor, length must be greater than 0.", new [] { "MinuteOffsetTenor" });
            }

            yield break;
        }
    }
}
