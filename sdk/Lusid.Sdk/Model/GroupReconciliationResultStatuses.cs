/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Lusid.Sdk.Client.OpenAPIDateConverter;

namespace Lusid.Sdk.Model
{
    /// <summary>
    /// GroupReconciliationResultStatuses
    /// </summary>
    [DataContract(Name = "GroupReconciliationResultStatuses")]
    public partial class GroupReconciliationResultStatuses : IEquatable<GroupReconciliationResultStatuses>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GroupReconciliationResultStatuses" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected GroupReconciliationResultStatuses() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="GroupReconciliationResultStatuses" /> class.
        /// </summary>
        /// <param name="countNew">The number of comparison results of resultStatus \&quot;New\&quot; with this instanceId and reconciliationType (required).</param>
        /// <param name="linkNew">linkNew (required).</param>
        /// <param name="countConfirmed">The number of comparison results of resultStatus \&quot;Confirmed\&quot; with this instanceId and reconciliationType (required).</param>
        /// <param name="linkConfirmed">linkConfirmed (required).</param>
        /// <param name="countChanged">The number of comparison results of resultStatus \&quot;Changed\&quot; with this instanceId and reconciliationType (required).</param>
        /// <param name="linkChanged">linkChanged (required).</param>
        public GroupReconciliationResultStatuses(int countNew = default(int), Link linkNew = default(Link), int countConfirmed = default(int), Link linkConfirmed = default(Link), int countChanged = default(int), Link linkChanged = default(Link))
        {
            this.CountNew = countNew;
            // to ensure "linkNew" is required (not null)
            if (linkNew == null)
            {
                throw new ArgumentNullException("linkNew is a required property for GroupReconciliationResultStatuses and cannot be null");
            }
            this.LinkNew = linkNew;
            this.CountConfirmed = countConfirmed;
            // to ensure "linkConfirmed" is required (not null)
            if (linkConfirmed == null)
            {
                throw new ArgumentNullException("linkConfirmed is a required property for GroupReconciliationResultStatuses and cannot be null");
            }
            this.LinkConfirmed = linkConfirmed;
            this.CountChanged = countChanged;
            // to ensure "linkChanged" is required (not null)
            if (linkChanged == null)
            {
                throw new ArgumentNullException("linkChanged is a required property for GroupReconciliationResultStatuses and cannot be null");
            }
            this.LinkChanged = linkChanged;
        }

        /// <summary>
        /// The number of comparison results of resultStatus \&quot;New\&quot; with this instanceId and reconciliationType
        /// </summary>
        /// <value>The number of comparison results of resultStatus \&quot;New\&quot; with this instanceId and reconciliationType</value>
        [DataMember(Name = "countNew", IsRequired = true, EmitDefaultValue = true)]
        public int CountNew { get; set; }

        /// <summary>
        /// Gets or Sets LinkNew
        /// </summary>
        [DataMember(Name = "linkNew", IsRequired = true, EmitDefaultValue = true)]
        public Link LinkNew { get; set; }

        /// <summary>
        /// The number of comparison results of resultStatus \&quot;Confirmed\&quot; with this instanceId and reconciliationType
        /// </summary>
        /// <value>The number of comparison results of resultStatus \&quot;Confirmed\&quot; with this instanceId and reconciliationType</value>
        [DataMember(Name = "countConfirmed", IsRequired = true, EmitDefaultValue = true)]
        public int CountConfirmed { get; set; }

        /// <summary>
        /// Gets or Sets LinkConfirmed
        /// </summary>
        [DataMember(Name = "linkConfirmed", IsRequired = true, EmitDefaultValue = true)]
        public Link LinkConfirmed { get; set; }

        /// <summary>
        /// The number of comparison results of resultStatus \&quot;Changed\&quot; with this instanceId and reconciliationType
        /// </summary>
        /// <value>The number of comparison results of resultStatus \&quot;Changed\&quot; with this instanceId and reconciliationType</value>
        [DataMember(Name = "countChanged", IsRequired = true, EmitDefaultValue = true)]
        public int CountChanged { get; set; }

        /// <summary>
        /// Gets or Sets LinkChanged
        /// </summary>
        [DataMember(Name = "linkChanged", IsRequired = true, EmitDefaultValue = true)]
        public Link LinkChanged { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class GroupReconciliationResultStatuses {\n");
            sb.Append("  CountNew: ").Append(CountNew).Append("\n");
            sb.Append("  LinkNew: ").Append(LinkNew).Append("\n");
            sb.Append("  CountConfirmed: ").Append(CountConfirmed).Append("\n");
            sb.Append("  LinkConfirmed: ").Append(LinkConfirmed).Append("\n");
            sb.Append("  CountChanged: ").Append(CountChanged).Append("\n");
            sb.Append("  LinkChanged: ").Append(LinkChanged).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GroupReconciliationResultStatuses);
        }

        /// <summary>
        /// Returns true if GroupReconciliationResultStatuses instances are equal
        /// </summary>
        /// <param name="input">Instance of GroupReconciliationResultStatuses to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GroupReconciliationResultStatuses input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.CountNew == input.CountNew ||
                    this.CountNew.Equals(input.CountNew)
                ) && 
                (
                    this.LinkNew == input.LinkNew ||
                    (this.LinkNew != null &&
                    this.LinkNew.Equals(input.LinkNew))
                ) && 
                (
                    this.CountConfirmed == input.CountConfirmed ||
                    this.CountConfirmed.Equals(input.CountConfirmed)
                ) && 
                (
                    this.LinkConfirmed == input.LinkConfirmed ||
                    (this.LinkConfirmed != null &&
                    this.LinkConfirmed.Equals(input.LinkConfirmed))
                ) && 
                (
                    this.CountChanged == input.CountChanged ||
                    this.CountChanged.Equals(input.CountChanged)
                ) && 
                (
                    this.LinkChanged == input.LinkChanged ||
                    (this.LinkChanged != null &&
                    this.LinkChanged.Equals(input.LinkChanged))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.CountNew.GetHashCode();
                if (this.LinkNew != null)
                {
                    hashCode = (hashCode * 59) + this.LinkNew.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.CountConfirmed.GetHashCode();
                if (this.LinkConfirmed != null)
                {
                    hashCode = (hashCode * 59) + this.LinkConfirmed.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.CountChanged.GetHashCode();
                if (this.LinkChanged != null)
                {
                    hashCode = (hashCode * 59) + this.LinkChanged.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
