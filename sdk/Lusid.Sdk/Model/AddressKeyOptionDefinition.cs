/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Lusid.Sdk.Client.OpenAPIDateConverter;

namespace Lusid.Sdk.Model
{
    /// <summary>
    /// The definition of an Address Key Option
    /// </summary>
    [DataContract(Name = "AddressKeyOptionDefinition")]
    public partial class AddressKeyOptionDefinition : IEquatable<AddressKeyOptionDefinition>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AddressKeyOptionDefinition" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected AddressKeyOptionDefinition() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="AddressKeyOptionDefinition" /> class.
        /// </summary>
        /// <param name="name">The name of the option (required).</param>
        /// <param name="type">The type of the option (required).</param>
        /// <param name="description">The description of the option (required).</param>
        /// <param name="optional">Is this option required or optional? (required).</param>
        /// <param name="allowedValueSet">If the option is a string or enum, the allowed set of values it can take..</param>
        /// <param name="defaultValue">If the option is not required, what is the default value?.</param>
        public AddressKeyOptionDefinition(string name = default(string), string type = default(string), string description = default(string), bool optional = default(bool), List<string> allowedValueSet = default(List<string>), string defaultValue = default(string))
        {
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for AddressKeyOptionDefinition and cannot be null");
            }
            this.Name = name;
            // to ensure "type" is required (not null)
            if (type == null)
            {
                throw new ArgumentNullException("type is a required property for AddressKeyOptionDefinition and cannot be null");
            }
            this.Type = type;
            // to ensure "description" is required (not null)
            if (description == null)
            {
                throw new ArgumentNullException("description is a required property for AddressKeyOptionDefinition and cannot be null");
            }
            this.Description = description;
            this.Optional = optional;
            this.AllowedValueSet = allowedValueSet;
            this.DefaultValue = defaultValue;
        }

        /// <summary>
        /// The name of the option
        /// </summary>
        /// <value>The name of the option</value>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// The type of the option
        /// </summary>
        /// <value>The type of the option</value>
        [DataMember(Name = "type", IsRequired = true, EmitDefaultValue = true)]
        public string Type { get; set; }

        /// <summary>
        /// The description of the option
        /// </summary>
        /// <value>The description of the option</value>
        [DataMember(Name = "description", IsRequired = true, EmitDefaultValue = true)]
        public string Description { get; set; }

        /// <summary>
        /// Is this option required or optional?
        /// </summary>
        /// <value>Is this option required or optional?</value>
        [DataMember(Name = "optional", IsRequired = true, EmitDefaultValue = true)]
        public bool Optional { get; set; }

        /// <summary>
        /// If the option is a string or enum, the allowed set of values it can take.
        /// </summary>
        /// <value>If the option is a string or enum, the allowed set of values it can take.</value>
        [DataMember(Name = "allowedValueSet", EmitDefaultValue = true)]
        public List<string> AllowedValueSet { get; set; }

        /// <summary>
        /// If the option is not required, what is the default value?
        /// </summary>
        /// <value>If the option is not required, what is the default value?</value>
        [DataMember(Name = "defaultValue", EmitDefaultValue = true)]
        public string DefaultValue { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AddressKeyOptionDefinition {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Optional: ").Append(Optional).Append("\n");
            sb.Append("  AllowedValueSet: ").Append(AllowedValueSet).Append("\n");
            sb.Append("  DefaultValue: ").Append(DefaultValue).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AddressKeyOptionDefinition);
        }

        /// <summary>
        /// Returns true if AddressKeyOptionDefinition instances are equal
        /// </summary>
        /// <param name="input">Instance of AddressKeyOptionDefinition to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AddressKeyOptionDefinition input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.Optional == input.Optional ||
                    this.Optional.Equals(input.Optional)
                ) && 
                (
                    this.AllowedValueSet == input.AllowedValueSet ||
                    this.AllowedValueSet != null &&
                    input.AllowedValueSet != null &&
                    this.AllowedValueSet.SequenceEqual(input.AllowedValueSet)
                ) && 
                (
                    this.DefaultValue == input.DefaultValue ||
                    (this.DefaultValue != null &&
                    this.DefaultValue.Equals(input.DefaultValue))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.Type != null)
                {
                    hashCode = (hashCode * 59) + this.Type.GetHashCode();
                }
                if (this.Description != null)
                {
                    hashCode = (hashCode * 59) + this.Description.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Optional.GetHashCode();
                if (this.AllowedValueSet != null)
                {
                    hashCode = (hashCode * 59) + this.AllowedValueSet.GetHashCode();
                }
                if (this.DefaultValue != null)
                {
                    hashCode = (hashCode * 59) + this.DefaultValue.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Name (string) minLength
            if (this.Name != null && this.Name.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Name, length must be greater than 1.", new [] { "Name" });
            }

            // Type (string) minLength
            if (this.Type != null && this.Type.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Type, length must be greater than 1.", new [] { "Type" });
            }

            // Description (string) minLength
            if (this.Description != null && this.Description.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Description, length must be greater than 1.", new [] { "Description" });
            }

            yield break;
        }
    }
}
