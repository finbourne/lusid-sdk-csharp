/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Lusid.Sdk.Client.OpenAPIDateConverter;

namespace Lusid.Sdk.Model
{
    /// <summary>
    /// StagedModificationStagingRule
    /// </summary>
    [DataContract(Name = "StagedModificationStagingRule")]
    public partial class StagedModificationStagingRule : IEquatable<StagedModificationStagingRule>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="StagedModificationStagingRule" /> class.
        /// </summary>
        /// <param name="stagingRuleSetId">System generated unique id for the staging rule set..</param>
        /// <param name="ruleId">The ID of the staging rule..</param>
        /// <param name="requiredApprovals">The number of approvals required. If left blank, one approval is needed..</param>
        /// <param name="currentUserCanDecide">True or False indicating whether the current user can make a decision on the staged modification..</param>
        public StagedModificationStagingRule(string stagingRuleSetId = default(string), string ruleId = default(string), int requiredApprovals = default(int), bool currentUserCanDecide = default(bool))
        {
            this.StagingRuleSetId = stagingRuleSetId;
            this.RuleId = ruleId;
            this.RequiredApprovals = requiredApprovals;
            this.CurrentUserCanDecide = currentUserCanDecide;
        }

        /// <summary>
        /// System generated unique id for the staging rule set.
        /// </summary>
        /// <value>System generated unique id for the staging rule set.</value>
        [DataMember(Name = "stagingRuleSetId", EmitDefaultValue = true)]
        public string StagingRuleSetId { get; set; }

        /// <summary>
        /// The ID of the staging rule.
        /// </summary>
        /// <value>The ID of the staging rule.</value>
        [DataMember(Name = "ruleId", EmitDefaultValue = true)]
        public string RuleId { get; set; }

        /// <summary>
        /// The number of approvals required. If left blank, one approval is needed.
        /// </summary>
        /// <value>The number of approvals required. If left blank, one approval is needed.</value>
        [DataMember(Name = "requiredApprovals", EmitDefaultValue = true)]
        public int RequiredApprovals { get; set; }

        /// <summary>
        /// True or False indicating whether the current user can make a decision on the staged modification.
        /// </summary>
        /// <value>True or False indicating whether the current user can make a decision on the staged modification.</value>
        [DataMember(Name = "currentUserCanDecide", EmitDefaultValue = true)]
        public bool CurrentUserCanDecide { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class StagedModificationStagingRule {\n");
            sb.Append("  StagingRuleSetId: ").Append(StagingRuleSetId).Append("\n");
            sb.Append("  RuleId: ").Append(RuleId).Append("\n");
            sb.Append("  RequiredApprovals: ").Append(RequiredApprovals).Append("\n");
            sb.Append("  CurrentUserCanDecide: ").Append(CurrentUserCanDecide).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as StagedModificationStagingRule);
        }

        /// <summary>
        /// Returns true if StagedModificationStagingRule instances are equal
        /// </summary>
        /// <param name="input">Instance of StagedModificationStagingRule to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(StagedModificationStagingRule input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.StagingRuleSetId == input.StagingRuleSetId ||
                    (this.StagingRuleSetId != null &&
                    this.StagingRuleSetId.Equals(input.StagingRuleSetId))
                ) && 
                (
                    this.RuleId == input.RuleId ||
                    (this.RuleId != null &&
                    this.RuleId.Equals(input.RuleId))
                ) && 
                (
                    this.RequiredApprovals == input.RequiredApprovals ||
                    this.RequiredApprovals.Equals(input.RequiredApprovals)
                ) && 
                (
                    this.CurrentUserCanDecide == input.CurrentUserCanDecide ||
                    this.CurrentUserCanDecide.Equals(input.CurrentUserCanDecide)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.StagingRuleSetId != null)
                {
                    hashCode = (hashCode * 59) + this.StagingRuleSetId.GetHashCode();
                }
                if (this.RuleId != null)
                {
                    hashCode = (hashCode * 59) + this.RuleId.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.RequiredApprovals.GetHashCode();
                hashCode = (hashCode * 59) + this.CurrentUserCanDecide.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
