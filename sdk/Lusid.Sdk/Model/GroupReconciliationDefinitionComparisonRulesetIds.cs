/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Lusid.Sdk.Client.OpenAPIDateConverter;

namespace Lusid.Sdk.Model
{
    /// <summary>
    /// GroupReconciliationDefinitionComparisonRulesetIds
    /// </summary>
    [DataContract(Name = "GroupReconciliationDefinitionComparisonRulesetIds")]
    public partial class GroupReconciliationDefinitionComparisonRulesetIds : IEquatable<GroupReconciliationDefinitionComparisonRulesetIds>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GroupReconciliationDefinitionComparisonRulesetIds" /> class.
        /// </summary>
        /// <param name="transactionReconciliation">transactionReconciliation.</param>
        /// <param name="holdingReconciliation">holdingReconciliation.</param>
        /// <param name="valuationReconciliation">valuationReconciliation.</param>
        public GroupReconciliationDefinitionComparisonRulesetIds(ResourceId transactionReconciliation = default(ResourceId), ResourceId holdingReconciliation = default(ResourceId), ResourceId valuationReconciliation = default(ResourceId))
        {
            this.TransactionReconciliation = transactionReconciliation;
            this.HoldingReconciliation = holdingReconciliation;
            this.ValuationReconciliation = valuationReconciliation;
        }

        /// <summary>
        /// Gets or Sets TransactionReconciliation
        /// </summary>
        [DataMember(Name = "transactionReconciliation", EmitDefaultValue = false)]
        public ResourceId TransactionReconciliation { get; set; }

        /// <summary>
        /// Gets or Sets HoldingReconciliation
        /// </summary>
        [DataMember(Name = "holdingReconciliation", EmitDefaultValue = false)]
        public ResourceId HoldingReconciliation { get; set; }

        /// <summary>
        /// Gets or Sets ValuationReconciliation
        /// </summary>
        [DataMember(Name = "valuationReconciliation", EmitDefaultValue = false)]
        public ResourceId ValuationReconciliation { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class GroupReconciliationDefinitionComparisonRulesetIds {\n");
            sb.Append("  TransactionReconciliation: ").Append(TransactionReconciliation).Append("\n");
            sb.Append("  HoldingReconciliation: ").Append(HoldingReconciliation).Append("\n");
            sb.Append("  ValuationReconciliation: ").Append(ValuationReconciliation).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GroupReconciliationDefinitionComparisonRulesetIds);
        }

        /// <summary>
        /// Returns true if GroupReconciliationDefinitionComparisonRulesetIds instances are equal
        /// </summary>
        /// <param name="input">Instance of GroupReconciliationDefinitionComparisonRulesetIds to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GroupReconciliationDefinitionComparisonRulesetIds input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.TransactionReconciliation == input.TransactionReconciliation ||
                    (this.TransactionReconciliation != null &&
                    this.TransactionReconciliation.Equals(input.TransactionReconciliation))
                ) && 
                (
                    this.HoldingReconciliation == input.HoldingReconciliation ||
                    (this.HoldingReconciliation != null &&
                    this.HoldingReconciliation.Equals(input.HoldingReconciliation))
                ) && 
                (
                    this.ValuationReconciliation == input.ValuationReconciliation ||
                    (this.ValuationReconciliation != null &&
                    this.ValuationReconciliation.Equals(input.ValuationReconciliation))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.TransactionReconciliation != null)
                {
                    hashCode = (hashCode * 59) + this.TransactionReconciliation.GetHashCode();
                }
                if (this.HoldingReconciliation != null)
                {
                    hashCode = (hashCode * 59) + this.HoldingReconciliation.GetHashCode();
                }
                if (this.ValuationReconciliation != null)
                {
                    hashCode = (hashCode * 59) + this.ValuationReconciliation.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
