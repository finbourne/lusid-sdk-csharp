/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Lusid.Sdk.Client.OpenAPIDateConverter;

namespace Lusid.Sdk.Model
{
    /// <summary>
    /// VersionedResourceListWithPostBodiesOfSettlementInstructionWithTransactionToSettlementInstructionQuery
    /// </summary>
    [DataContract(Name = "VersionedResourceListWithPostBodiesOfSettlementInstructionWithTransactionToSettlementInstructionQuery")]
    public partial class VersionedResourceListWithPostBodiesOfSettlementInstructionWithTransactionToSettlementInstructionQuery : IEquatable<VersionedResourceListWithPostBodiesOfSettlementInstructionWithTransactionToSettlementInstructionQuery>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="VersionedResourceListWithPostBodiesOfSettlementInstructionWithTransactionToSettlementInstructionQuery" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected VersionedResourceListWithPostBodiesOfSettlementInstructionWithTransactionToSettlementInstructionQuery() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="VersionedResourceListWithPostBodiesOfSettlementInstructionWithTransactionToSettlementInstructionQuery" /> class.
        /// </summary>
        /// <param name="varVersion">varVersion (required).</param>
        /// <param name="values">The resources to list. (required).</param>
        /// <param name="href">The URI of the resource list..</param>
        /// <param name="postBody">postBody.</param>
        /// <param name="nextPage">nextPage.</param>
        /// <param name="previousPage">previousPage.</param>
        /// <param name="links">links.</param>
        public VersionedResourceListWithPostBodiesOfSettlementInstructionWithTransactionToSettlementInstructionQuery(ModelVersion varVersion = default(ModelVersion), List<SettlementInstructionWithTransaction> values = default(List<SettlementInstructionWithTransaction>), string href = default(string), SettlementInstructionQuery postBody = default(SettlementInstructionQuery), SettlementInstructionQuery nextPage = default(SettlementInstructionQuery), SettlementInstructionQuery previousPage = default(SettlementInstructionQuery), List<Link> links = default(List<Link>))
        {
            // to ensure "varVersion" is required (not null)
            if (varVersion == null)
            {
                throw new ArgumentNullException("varVersion is a required property for VersionedResourceListWithPostBodiesOfSettlementInstructionWithTransactionToSettlementInstructionQuery and cannot be null");
            }
            this.VarVersion = varVersion;
            // to ensure "values" is required (not null)
            if (values == null)
            {
                throw new ArgumentNullException("values is a required property for VersionedResourceListWithPostBodiesOfSettlementInstructionWithTransactionToSettlementInstructionQuery and cannot be null");
            }
            this.Values = values;
            this.Href = href;
            this.PostBody = postBody;
            this.NextPage = nextPage;
            this.PreviousPage = previousPage;
            this.Links = links;
        }

        /// <summary>
        /// Gets or Sets VarVersion
        /// </summary>
        [DataMember(Name = "version", IsRequired = true, EmitDefaultValue = true)]
        public ModelVersion VarVersion { get; set; }

        /// <summary>
        /// The resources to list.
        /// </summary>
        /// <value>The resources to list.</value>
        [DataMember(Name = "values", IsRequired = true, EmitDefaultValue = true)]
        public List<SettlementInstructionWithTransaction> Values { get; set; }

        /// <summary>
        /// The URI of the resource list.
        /// </summary>
        /// <value>The URI of the resource list.</value>
        [DataMember(Name = "href", EmitDefaultValue = true)]
        public string Href { get; set; }

        /// <summary>
        /// Gets or Sets PostBody
        /// </summary>
        [DataMember(Name = "postBody", EmitDefaultValue = false)]
        public SettlementInstructionQuery PostBody { get; set; }

        /// <summary>
        /// Gets or Sets NextPage
        /// </summary>
        [DataMember(Name = "nextPage", EmitDefaultValue = false)]
        public SettlementInstructionQuery NextPage { get; set; }

        /// <summary>
        /// Gets or Sets PreviousPage
        /// </summary>
        [DataMember(Name = "previousPage", EmitDefaultValue = false)]
        public SettlementInstructionQuery PreviousPage { get; set; }

        /// <summary>
        /// Gets or Sets Links
        /// </summary>
        [DataMember(Name = "links", EmitDefaultValue = true)]
        public List<Link> Links { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class VersionedResourceListWithPostBodiesOfSettlementInstructionWithTransactionToSettlementInstructionQuery {\n");
            sb.Append("  VarVersion: ").Append(VarVersion).Append("\n");
            sb.Append("  Values: ").Append(Values).Append("\n");
            sb.Append("  Href: ").Append(Href).Append("\n");
            sb.Append("  PostBody: ").Append(PostBody).Append("\n");
            sb.Append("  NextPage: ").Append(NextPage).Append("\n");
            sb.Append("  PreviousPage: ").Append(PreviousPage).Append("\n");
            sb.Append("  Links: ").Append(Links).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as VersionedResourceListWithPostBodiesOfSettlementInstructionWithTransactionToSettlementInstructionQuery);
        }

        /// <summary>
        /// Returns true if VersionedResourceListWithPostBodiesOfSettlementInstructionWithTransactionToSettlementInstructionQuery instances are equal
        /// </summary>
        /// <param name="input">Instance of VersionedResourceListWithPostBodiesOfSettlementInstructionWithTransactionToSettlementInstructionQuery to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(VersionedResourceListWithPostBodiesOfSettlementInstructionWithTransactionToSettlementInstructionQuery input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.VarVersion == input.VarVersion ||
                    (this.VarVersion != null &&
                    this.VarVersion.Equals(input.VarVersion))
                ) && 
                (
                    this.Values == input.Values ||
                    this.Values != null &&
                    input.Values != null &&
                    this.Values.SequenceEqual(input.Values)
                ) && 
                (
                    this.Href == input.Href ||
                    (this.Href != null &&
                    this.Href.Equals(input.Href))
                ) && 
                (
                    this.PostBody == input.PostBody ||
                    (this.PostBody != null &&
                    this.PostBody.Equals(input.PostBody))
                ) && 
                (
                    this.NextPage == input.NextPage ||
                    (this.NextPage != null &&
                    this.NextPage.Equals(input.NextPage))
                ) && 
                (
                    this.PreviousPage == input.PreviousPage ||
                    (this.PreviousPage != null &&
                    this.PreviousPage.Equals(input.PreviousPage))
                ) && 
                (
                    this.Links == input.Links ||
                    this.Links != null &&
                    input.Links != null &&
                    this.Links.SequenceEqual(input.Links)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.VarVersion != null)
                {
                    hashCode = (hashCode * 59) + this.VarVersion.GetHashCode();
                }
                if (this.Values != null)
                {
                    hashCode = (hashCode * 59) + this.Values.GetHashCode();
                }
                if (this.Href != null)
                {
                    hashCode = (hashCode * 59) + this.Href.GetHashCode();
                }
                if (this.PostBody != null)
                {
                    hashCode = (hashCode * 59) + this.PostBody.GetHashCode();
                }
                if (this.NextPage != null)
                {
                    hashCode = (hashCode * 59) + this.NextPage.GetHashCode();
                }
                if (this.PreviousPage != null)
                {
                    hashCode = (hashCode * 59) + this.PreviousPage.GetHashCode();
                }
                if (this.Links != null)
                {
                    hashCode = (hashCode * 59) + this.Links.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
