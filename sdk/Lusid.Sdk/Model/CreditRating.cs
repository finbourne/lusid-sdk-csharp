/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Lusid.Sdk.Client.OpenAPIDateConverter;

namespace Lusid.Sdk.Model
{
    /// <summary>
    /// Object describing a credit rating,  which assesses the stability and credit worthiness of a legal entity  and hence its likelihood of defaulting on its outstanding obligations (typically debt).
    /// </summary>
    [DataContract(Name = "CreditRating")]
    public partial class CreditRating : IEquatable<CreditRating>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CreditRating" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CreditRating() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CreditRating" /> class.
        /// </summary>
        /// <param name="ratingSource">The provider of the credit rating, which will typically be an agency such as Moody&#39;s or Standard and Poor. (required).</param>
        /// <param name="rating">The credit rating provided by the rating source. This would expected to be consistent with the rating scheme of that agency/source. (required).</param>
        public CreditRating(string ratingSource = default(string), string rating = default(string))
        {
            // to ensure "ratingSource" is required (not null)
            if (ratingSource == null)
            {
                throw new ArgumentNullException("ratingSource is a required property for CreditRating and cannot be null");
            }
            this.RatingSource = ratingSource;
            // to ensure "rating" is required (not null)
            if (rating == null)
            {
                throw new ArgumentNullException("rating is a required property for CreditRating and cannot be null");
            }
            this.Rating = rating;
        }

        /// <summary>
        /// The provider of the credit rating, which will typically be an agency such as Moody&#39;s or Standard and Poor.
        /// </summary>
        /// <value>The provider of the credit rating, which will typically be an agency such as Moody&#39;s or Standard and Poor.</value>
        [DataMember(Name = "ratingSource", IsRequired = true, EmitDefaultValue = true)]
        public string RatingSource { get; set; }

        /// <summary>
        /// The credit rating provided by the rating source. This would expected to be consistent with the rating scheme of that agency/source.
        /// </summary>
        /// <value>The credit rating provided by the rating source. This would expected to be consistent with the rating scheme of that agency/source.</value>
        [DataMember(Name = "rating", IsRequired = true, EmitDefaultValue = true)]
        public string Rating { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CreditRating {\n");
            sb.Append("  RatingSource: ").Append(RatingSource).Append("\n");
            sb.Append("  Rating: ").Append(Rating).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CreditRating);
        }

        /// <summary>
        /// Returns true if CreditRating instances are equal
        /// </summary>
        /// <param name="input">Instance of CreditRating to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CreditRating input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.RatingSource == input.RatingSource ||
                    (this.RatingSource != null &&
                    this.RatingSource.Equals(input.RatingSource))
                ) && 
                (
                    this.Rating == input.Rating ||
                    (this.Rating != null &&
                    this.Rating.Equals(input.Rating))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.RatingSource != null)
                {
                    hashCode = (hashCode * 59) + this.RatingSource.GetHashCode();
                }
                if (this.Rating != null)
                {
                    hashCode = (hashCode * 59) + this.Rating.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // RatingSource (string) maxLength
            if (this.RatingSource != null && this.RatingSource.Length > 64)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for RatingSource, length must be less than 64.", new [] { "RatingSource" });
            }

            // RatingSource (string) minLength
            if (this.RatingSource != null && this.RatingSource.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for RatingSource, length must be greater than 1.", new [] { "RatingSource" });
            }

            // RatingSource (string) pattern
            Regex regexRatingSource = new Regex(@"^[a-zA-Z0-9\-_]+$", RegexOptions.CultureInvariant);
            if (false == regexRatingSource.Match(this.RatingSource).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for RatingSource, must match a pattern of " + regexRatingSource, new [] { "RatingSource" });
            }

            // Rating (string) maxLength
            if (this.Rating != null && this.Rating.Length > 64)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Rating, length must be less than 64.", new [] { "Rating" });
            }

            // Rating (string) minLength
            if (this.Rating != null && this.Rating.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Rating, length must be greater than 1.", new [] { "Rating" });
            }

            // Rating (string) pattern
            Regex regexRating = new Regex(@"^[a-zA-Z0-9\-+\/]+$", RegexOptions.CultureInvariant);
            if (false == regexRating.Match(this.Rating).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Rating, must match a pattern of " + regexRating, new [] { "Rating" });
            }

            yield break;
        }
    }
}
