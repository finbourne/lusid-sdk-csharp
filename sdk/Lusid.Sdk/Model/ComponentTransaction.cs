/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Lusid.Sdk.Client.OpenAPIDateConverter;

namespace Lusid.Sdk.Model
{
    /// <summary>
    /// ComponentTransaction
    /// </summary>
    [DataContract(Name = "ComponentTransaction")]
    public partial class ComponentTransaction : IEquatable<ComponentTransaction>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ComponentTransaction" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ComponentTransaction() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ComponentTransaction" /> class.
        /// </summary>
        /// <param name="displayName">displayName (required).</param>
        /// <param name="condition">condition.</param>
        /// <param name="transactionFieldMap">transactionFieldMap (required).</param>
        /// <param name="transactionPropertyMap">transactionPropertyMap (required).</param>
        /// <param name="preserveTaxLotStructure">Controls if tax lot structure should be preserved when cost base is transferred to a new holding. For example in Spin Off instrument events..</param>
        public ComponentTransaction(string displayName = default(string), string condition = default(string), TransactionFieldMap transactionFieldMap = default(TransactionFieldMap), List<TransactionPropertyMap> transactionPropertyMap = default(List<TransactionPropertyMap>), bool? preserveTaxLotStructure = default(bool?))
        {
            // to ensure "displayName" is required (not null)
            if (displayName == null)
            {
                throw new ArgumentNullException("displayName is a required property for ComponentTransaction and cannot be null");
            }
            this.DisplayName = displayName;
            // to ensure "transactionFieldMap" is required (not null)
            if (transactionFieldMap == null)
            {
                throw new ArgumentNullException("transactionFieldMap is a required property for ComponentTransaction and cannot be null");
            }
            this.TransactionFieldMap = transactionFieldMap;
            // to ensure "transactionPropertyMap" is required (not null)
            if (transactionPropertyMap == null)
            {
                throw new ArgumentNullException("transactionPropertyMap is a required property for ComponentTransaction and cannot be null");
            }
            this.TransactionPropertyMap = transactionPropertyMap;
            this.Condition = condition;
            this.PreserveTaxLotStructure = preserveTaxLotStructure;
        }

        /// <summary>
        /// Gets or Sets DisplayName
        /// </summary>
        [DataMember(Name = "displayName", IsRequired = true, EmitDefaultValue = true)]
        public string DisplayName { get; set; }

        /// <summary>
        /// Gets or Sets Condition
        /// </summary>
        [DataMember(Name = "condition", EmitDefaultValue = true)]
        public string Condition { get; set; }

        /// <summary>
        /// Gets or Sets TransactionFieldMap
        /// </summary>
        [DataMember(Name = "transactionFieldMap", IsRequired = true, EmitDefaultValue = true)]
        public TransactionFieldMap TransactionFieldMap { get; set; }

        /// <summary>
        /// Gets or Sets TransactionPropertyMap
        /// </summary>
        [DataMember(Name = "transactionPropertyMap", IsRequired = true, EmitDefaultValue = true)]
        public List<TransactionPropertyMap> TransactionPropertyMap { get; set; }

        /// <summary>
        /// Controls if tax lot structure should be preserved when cost base is transferred to a new holding. For example in Spin Off instrument events.
        /// </summary>
        /// <value>Controls if tax lot structure should be preserved when cost base is transferred to a new holding. For example in Spin Off instrument events.</value>
        [DataMember(Name = "preserveTaxLotStructure", EmitDefaultValue = true)]
        public bool? PreserveTaxLotStructure { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ComponentTransaction {\n");
            sb.Append("  DisplayName: ").Append(DisplayName).Append("\n");
            sb.Append("  Condition: ").Append(Condition).Append("\n");
            sb.Append("  TransactionFieldMap: ").Append(TransactionFieldMap).Append("\n");
            sb.Append("  TransactionPropertyMap: ").Append(TransactionPropertyMap).Append("\n");
            sb.Append("  PreserveTaxLotStructure: ").Append(PreserveTaxLotStructure).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ComponentTransaction);
        }

        /// <summary>
        /// Returns true if ComponentTransaction instances are equal
        /// </summary>
        /// <param name="input">Instance of ComponentTransaction to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ComponentTransaction input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.DisplayName == input.DisplayName ||
                    (this.DisplayName != null &&
                    this.DisplayName.Equals(input.DisplayName))
                ) && 
                (
                    this.Condition == input.Condition ||
                    (this.Condition != null &&
                    this.Condition.Equals(input.Condition))
                ) && 
                (
                    this.TransactionFieldMap == input.TransactionFieldMap ||
                    (this.TransactionFieldMap != null &&
                    this.TransactionFieldMap.Equals(input.TransactionFieldMap))
                ) && 
                (
                    this.TransactionPropertyMap == input.TransactionPropertyMap ||
                    this.TransactionPropertyMap != null &&
                    input.TransactionPropertyMap != null &&
                    this.TransactionPropertyMap.SequenceEqual(input.TransactionPropertyMap)
                ) && 
                (
                    this.PreserveTaxLotStructure == input.PreserveTaxLotStructure ||
                    (this.PreserveTaxLotStructure != null &&
                    this.PreserveTaxLotStructure.Equals(input.PreserveTaxLotStructure))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.DisplayName != null)
                {
                    hashCode = (hashCode * 59) + this.DisplayName.GetHashCode();
                }
                if (this.Condition != null)
                {
                    hashCode = (hashCode * 59) + this.Condition.GetHashCode();
                }
                if (this.TransactionFieldMap != null)
                {
                    hashCode = (hashCode * 59) + this.TransactionFieldMap.GetHashCode();
                }
                if (this.TransactionPropertyMap != null)
                {
                    hashCode = (hashCode * 59) + this.TransactionPropertyMap.GetHashCode();
                }
                if (this.PreserveTaxLotStructure != null)
                {
                    hashCode = (hashCode * 59) + this.PreserveTaxLotStructure.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // DisplayName (string) maxLength
            if (this.DisplayName != null && this.DisplayName.Length > 100)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for DisplayName, length must be less than 100.", new [] { "DisplayName" });
            }

            // DisplayName (string) minLength
            if (this.DisplayName != null && this.DisplayName.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for DisplayName, length must be greater than 0.", new [] { "DisplayName" });
            }

            // Condition (string) maxLength
            if (this.Condition != null && this.Condition.Length > 1024)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Condition, length must be less than 1024.", new [] { "Condition" });
            }

            // Condition (string) minLength
            if (this.Condition != null && this.Condition.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Condition, length must be greater than 0.", new [] { "Condition" });
            }

            yield break;
        }
    }
}
