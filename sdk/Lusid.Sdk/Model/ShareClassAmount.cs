/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Lusid.Sdk.Client.OpenAPIDateConverter;

namespace Lusid.Sdk.Model
{
    /// <summary>
    /// ShareClassAmount
    /// </summary>
    [DataContract(Name = "ShareClassAmount")]
    public partial class ShareClassAmount : IEquatable<ShareClassAmount>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ShareClassAmount" /> class.
        /// </summary>
        /// <param name="fundCurrencyAmount">The value of the amount in the fund currency..</param>
        /// <param name="shareClassCurrencyAmount">The value of the amount in the share class currency..</param>
        public ShareClassAmount(decimal fundCurrencyAmount = default(decimal), decimal shareClassCurrencyAmount = default(decimal))
        {
            this.FundCurrencyAmount = fundCurrencyAmount;
            this.ShareClassCurrencyAmount = shareClassCurrencyAmount;
        }

        /// <summary>
        /// The value of the amount in the fund currency.
        /// </summary>
        /// <value>The value of the amount in the fund currency.</value>
        [DataMember(Name = "fundCurrencyAmount", EmitDefaultValue = true)]
        public decimal FundCurrencyAmount { get; set; }

        /// <summary>
        /// The value of the amount in the share class currency.
        /// </summary>
        /// <value>The value of the amount in the share class currency.</value>
        [DataMember(Name = "shareClassCurrencyAmount", EmitDefaultValue = true)]
        public decimal ShareClassCurrencyAmount { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ShareClassAmount {\n");
            sb.Append("  FundCurrencyAmount: ").Append(FundCurrencyAmount).Append("\n");
            sb.Append("  ShareClassCurrencyAmount: ").Append(ShareClassCurrencyAmount).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ShareClassAmount);
        }

        /// <summary>
        /// Returns true if ShareClassAmount instances are equal
        /// </summary>
        /// <param name="input">Instance of ShareClassAmount to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ShareClassAmount input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.FundCurrencyAmount == input.FundCurrencyAmount ||
                    this.FundCurrencyAmount.Equals(input.FundCurrencyAmount)
                ) && 
                (
                    this.ShareClassCurrencyAmount == input.ShareClassCurrencyAmount ||
                    this.ShareClassCurrencyAmount.Equals(input.ShareClassCurrencyAmount)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.FundCurrencyAmount.GetHashCode();
                hashCode = (hashCode * 59) + this.ShareClassCurrencyAmount.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
