/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Lusid.Sdk.Client.OpenAPIDateConverter;

namespace Lusid.Sdk.Model
{
    /// <summary>
    /// RelationalDataSeriesResponse
    /// </summary>
    [DataContract(Name = "RelationalDataSeriesResponse")]
    public partial class RelationalDataSeriesResponse : IEquatable<RelationalDataSeriesResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RelationalDataSeriesResponse" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected RelationalDataSeriesResponse() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="RelationalDataSeriesResponse" /> class.
        /// </summary>
        /// <param name="seriesScope">The scope of the DataSeries. (required).</param>
        /// <param name="applicableEntity">applicableEntity (required).</param>
        /// <param name="seriesIdentifiers">The identifiers that uniquely define this DataSeries, structured according to the FieldSchema of the parent RelationalDatasetDefinition. (required).</param>
        public RelationalDataSeriesResponse(string seriesScope = default(string), ApplicableEntity applicableEntity = default(ApplicableEntity), Dictionary<string, RelationalDataPointFieldValueResponse> seriesIdentifiers = default(Dictionary<string, RelationalDataPointFieldValueResponse>))
        {
            // to ensure "seriesScope" is required (not null)
            if (seriesScope == null)
            {
                throw new ArgumentNullException("seriesScope is a required property for RelationalDataSeriesResponse and cannot be null");
            }
            this.SeriesScope = seriesScope;
            // to ensure "applicableEntity" is required (not null)
            if (applicableEntity == null)
            {
                throw new ArgumentNullException("applicableEntity is a required property for RelationalDataSeriesResponse and cannot be null");
            }
            this.ApplicableEntity = applicableEntity;
            // to ensure "seriesIdentifiers" is required (not null)
            if (seriesIdentifiers == null)
            {
                throw new ArgumentNullException("seriesIdentifiers is a required property for RelationalDataSeriesResponse and cannot be null");
            }
            this.SeriesIdentifiers = seriesIdentifiers;
        }

        /// <summary>
        /// The scope of the DataSeries.
        /// </summary>
        /// <value>The scope of the DataSeries.</value>
        [DataMember(Name = "seriesScope", IsRequired = true, EmitDefaultValue = true)]
        public string SeriesScope { get; set; }

        /// <summary>
        /// Gets or Sets ApplicableEntity
        /// </summary>
        [DataMember(Name = "applicableEntity", IsRequired = true, EmitDefaultValue = true)]
        public ApplicableEntity ApplicableEntity { get; set; }

        /// <summary>
        /// The identifiers that uniquely define this DataSeries, structured according to the FieldSchema of the parent RelationalDatasetDefinition.
        /// </summary>
        /// <value>The identifiers that uniquely define this DataSeries, structured according to the FieldSchema of the parent RelationalDatasetDefinition.</value>
        [DataMember(Name = "seriesIdentifiers", IsRequired = true, EmitDefaultValue = true)]
        public Dictionary<string, RelationalDataPointFieldValueResponse> SeriesIdentifiers { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class RelationalDataSeriesResponse {\n");
            sb.Append("  SeriesScope: ").Append(SeriesScope).Append("\n");
            sb.Append("  ApplicableEntity: ").Append(ApplicableEntity).Append("\n");
            sb.Append("  SeriesIdentifiers: ").Append(SeriesIdentifiers).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as RelationalDataSeriesResponse);
        }

        /// <summary>
        /// Returns true if RelationalDataSeriesResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of RelationalDataSeriesResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RelationalDataSeriesResponse input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.SeriesScope == input.SeriesScope ||
                    (this.SeriesScope != null &&
                    this.SeriesScope.Equals(input.SeriesScope))
                ) && 
                (
                    this.ApplicableEntity == input.ApplicableEntity ||
                    (this.ApplicableEntity != null &&
                    this.ApplicableEntity.Equals(input.ApplicableEntity))
                ) && 
                (
                    this.SeriesIdentifiers == input.SeriesIdentifiers ||
                    this.SeriesIdentifiers != null &&
                    input.SeriesIdentifiers != null &&
                    this.SeriesIdentifiers.SequenceEqual(input.SeriesIdentifiers)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.SeriesScope != null)
                {
                    hashCode = (hashCode * 59) + this.SeriesScope.GetHashCode();
                }
                if (this.ApplicableEntity != null)
                {
                    hashCode = (hashCode * 59) + this.ApplicableEntity.GetHashCode();
                }
                if (this.SeriesIdentifiers != null)
                {
                    hashCode = (hashCode * 59) + this.SeriesIdentifiers.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // SeriesScope (string) minLength
            if (this.SeriesScope != null && this.SeriesScope.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SeriesScope, length must be greater than 1.", new [] { "SeriesScope" });
            }

            yield break;
        }
    }
}
