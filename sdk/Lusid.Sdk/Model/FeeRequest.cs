/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Lusid.Sdk.Client.OpenAPIDateConverter;

namespace Lusid.Sdk.Model
{
    /// <summary>
    /// FeeRequest
    /// </summary>
    [DataContract(Name = "FeeRequest")]
    public partial class FeeRequest : IEquatable<FeeRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FeeRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected FeeRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="FeeRequest" /> class.
        /// </summary>
        /// <param name="code">The code of the Fee. (required).</param>
        /// <param name="feeTypeId">feeTypeId (required).</param>
        /// <param name="displayName">The name of the Fee. (required).</param>
        /// <param name="description">A description for the Fee..</param>
        /// <param name="origin">The origin or source of the Fee accrual..</param>
        /// <param name="calculationBase">The calculation base for the Fee that is calculated using a percentage. (TotalAnnualAccrualAmount and CalculationBase cannot both be present).</param>
        /// <param name="accrualCurrency">The accrual currency. (required).</param>
        /// <param name="treatment">The accrual period of the Fee; &#39;Monthly&#39; or &#39;Daily&#39;. (required).</param>
        /// <param name="totalAnnualAccrualAmount">The total annual accrued amount for the Fee. (TotalAnnualAccrualAmount and CalculationBase cannot both be present).</param>
        /// <param name="feeRatePercentage">The fee rate percentage. (Required when CalculationBase is present and not compatible with TotalAnnualAccrualAmount).</param>
        /// <param name="payableFrequency">The payable frequency for the Fee; &#39;Annually&#39;, &#39;Quarterly&#39; or &#39;Monthly&#39;. (required).</param>
        /// <param name="businessDayConvention">The business day convention to use for Fee calculations on weekends or holidays. Supported string values are: [Previous, P, Following, F, None]. (required).</param>
        /// <param name="startDate">The start date of the Fee. (required).</param>
        /// <param name="endDate">The end date of the Fee..</param>
        /// <param name="anchorDate">anchorDate.</param>
        /// <param name="properties">The Fee properties. These will be from the &#39;Fee&#39; domain..</param>
        /// <param name="portfolioId">portfolioId.</param>
        public FeeRequest(string code = default(string), ResourceId feeTypeId = default(ResourceId), string displayName = default(string), string description = default(string), string origin = default(string), string calculationBase = default(string), string accrualCurrency = default(string), string treatment = default(string), decimal? totalAnnualAccrualAmount = default(decimal?), decimal? feeRatePercentage = default(decimal?), string payableFrequency = default(string), string businessDayConvention = default(string), DateTimeOffset startDate = default(DateTimeOffset), DateTimeOffset? endDate = default(DateTimeOffset?), DayMonth anchorDate = default(DayMonth), Dictionary<string, Property> properties = default(Dictionary<string, Property>), ResourceId portfolioId = default(ResourceId))
        {
            // to ensure "code" is required (not null)
            if (code == null)
            {
                throw new ArgumentNullException("code is a required property for FeeRequest and cannot be null");
            }
            this.Code = code;
            // to ensure "feeTypeId" is required (not null)
            if (feeTypeId == null)
            {
                throw new ArgumentNullException("feeTypeId is a required property for FeeRequest and cannot be null");
            }
            this.FeeTypeId = feeTypeId;
            // to ensure "displayName" is required (not null)
            if (displayName == null)
            {
                throw new ArgumentNullException("displayName is a required property for FeeRequest and cannot be null");
            }
            this.DisplayName = displayName;
            // to ensure "accrualCurrency" is required (not null)
            if (accrualCurrency == null)
            {
                throw new ArgumentNullException("accrualCurrency is a required property for FeeRequest and cannot be null");
            }
            this.AccrualCurrency = accrualCurrency;
            // to ensure "treatment" is required (not null)
            if (treatment == null)
            {
                throw new ArgumentNullException("treatment is a required property for FeeRequest and cannot be null");
            }
            this.Treatment = treatment;
            // to ensure "payableFrequency" is required (not null)
            if (payableFrequency == null)
            {
                throw new ArgumentNullException("payableFrequency is a required property for FeeRequest and cannot be null");
            }
            this.PayableFrequency = payableFrequency;
            // to ensure "businessDayConvention" is required (not null)
            if (businessDayConvention == null)
            {
                throw new ArgumentNullException("businessDayConvention is a required property for FeeRequest and cannot be null");
            }
            this.BusinessDayConvention = businessDayConvention;
            this.StartDate = startDate;
            this.Description = description;
            this.Origin = origin;
            this.CalculationBase = calculationBase;
            this.TotalAnnualAccrualAmount = totalAnnualAccrualAmount;
            this.FeeRatePercentage = feeRatePercentage;
            this.EndDate = endDate;
            this.AnchorDate = anchorDate;
            this.Properties = properties;
            this.PortfolioId = portfolioId;
        }

        /// <summary>
        /// The code of the Fee.
        /// </summary>
        /// <value>The code of the Fee.</value>
        [DataMember(Name = "code", IsRequired = true, EmitDefaultValue = true)]
        public string Code { get; set; }

        /// <summary>
        /// Gets or Sets FeeTypeId
        /// </summary>
        [DataMember(Name = "feeTypeId", IsRequired = true, EmitDefaultValue = true)]
        public ResourceId FeeTypeId { get; set; }

        /// <summary>
        /// The name of the Fee.
        /// </summary>
        /// <value>The name of the Fee.</value>
        [DataMember(Name = "displayName", IsRequired = true, EmitDefaultValue = true)]
        public string DisplayName { get; set; }

        /// <summary>
        /// A description for the Fee.
        /// </summary>
        /// <value>A description for the Fee.</value>
        [DataMember(Name = "description", EmitDefaultValue = true)]
        public string Description { get; set; }

        /// <summary>
        /// The origin or source of the Fee accrual.
        /// </summary>
        /// <value>The origin or source of the Fee accrual.</value>
        [DataMember(Name = "origin", EmitDefaultValue = true)]
        public string Origin { get; set; }

        /// <summary>
        /// The calculation base for the Fee that is calculated using a percentage. (TotalAnnualAccrualAmount and CalculationBase cannot both be present)
        /// </summary>
        /// <value>The calculation base for the Fee that is calculated using a percentage. (TotalAnnualAccrualAmount and CalculationBase cannot both be present)</value>
        [DataMember(Name = "calculationBase", EmitDefaultValue = true)]
        public string CalculationBase { get; set; }

        /// <summary>
        /// The accrual currency.
        /// </summary>
        /// <value>The accrual currency.</value>
        [DataMember(Name = "accrualCurrency", IsRequired = true, EmitDefaultValue = true)]
        public string AccrualCurrency { get; set; }

        /// <summary>
        /// The accrual period of the Fee; &#39;Monthly&#39; or &#39;Daily&#39;.
        /// </summary>
        /// <value>The accrual period of the Fee; &#39;Monthly&#39; or &#39;Daily&#39;.</value>
        [DataMember(Name = "treatment", IsRequired = true, EmitDefaultValue = true)]
        public string Treatment { get; set; }

        /// <summary>
        /// The total annual accrued amount for the Fee. (TotalAnnualAccrualAmount and CalculationBase cannot both be present)
        /// </summary>
        /// <value>The total annual accrued amount for the Fee. (TotalAnnualAccrualAmount and CalculationBase cannot both be present)</value>
        [DataMember(Name = "totalAnnualAccrualAmount", EmitDefaultValue = true)]
        public decimal? TotalAnnualAccrualAmount { get; set; }

        /// <summary>
        /// The fee rate percentage. (Required when CalculationBase is present and not compatible with TotalAnnualAccrualAmount)
        /// </summary>
        /// <value>The fee rate percentage. (Required when CalculationBase is present and not compatible with TotalAnnualAccrualAmount)</value>
        [DataMember(Name = "feeRatePercentage", EmitDefaultValue = true)]
        public decimal? FeeRatePercentage { get; set; }

        /// <summary>
        /// The payable frequency for the Fee; &#39;Annually&#39;, &#39;Quarterly&#39; or &#39;Monthly&#39;.
        /// </summary>
        /// <value>The payable frequency for the Fee; &#39;Annually&#39;, &#39;Quarterly&#39; or &#39;Monthly&#39;.</value>
        [DataMember(Name = "payableFrequency", IsRequired = true, EmitDefaultValue = true)]
        public string PayableFrequency { get; set; }

        /// <summary>
        /// The business day convention to use for Fee calculations on weekends or holidays. Supported string values are: [Previous, P, Following, F, None].
        /// </summary>
        /// <value>The business day convention to use for Fee calculations on weekends or holidays. Supported string values are: [Previous, P, Following, F, None].</value>
        [DataMember(Name = "businessDayConvention", IsRequired = true, EmitDefaultValue = true)]
        public string BusinessDayConvention { get; set; }

        /// <summary>
        /// The start date of the Fee.
        /// </summary>
        /// <value>The start date of the Fee.</value>
        [DataMember(Name = "startDate", IsRequired = true, EmitDefaultValue = true)]
        public DateTimeOffset StartDate { get; set; }

        /// <summary>
        /// The end date of the Fee.
        /// </summary>
        /// <value>The end date of the Fee.</value>
        [DataMember(Name = "endDate", EmitDefaultValue = true)]
        public DateTimeOffset? EndDate { get; set; }

        /// <summary>
        /// Gets or Sets AnchorDate
        /// </summary>
        [DataMember(Name = "anchorDate", EmitDefaultValue = false)]
        public DayMonth AnchorDate { get; set; }

        /// <summary>
        /// The Fee properties. These will be from the &#39;Fee&#39; domain.
        /// </summary>
        /// <value>The Fee properties. These will be from the &#39;Fee&#39; domain.</value>
        [DataMember(Name = "properties", EmitDefaultValue = true)]
        public Dictionary<string, Property> Properties { get; set; }

        /// <summary>
        /// Gets or Sets PortfolioId
        /// </summary>
        [DataMember(Name = "portfolioId", EmitDefaultValue = false)]
        public ResourceId PortfolioId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class FeeRequest {\n");
            sb.Append("  Code: ").Append(Code).Append("\n");
            sb.Append("  FeeTypeId: ").Append(FeeTypeId).Append("\n");
            sb.Append("  DisplayName: ").Append(DisplayName).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Origin: ").Append(Origin).Append("\n");
            sb.Append("  CalculationBase: ").Append(CalculationBase).Append("\n");
            sb.Append("  AccrualCurrency: ").Append(AccrualCurrency).Append("\n");
            sb.Append("  Treatment: ").Append(Treatment).Append("\n");
            sb.Append("  TotalAnnualAccrualAmount: ").Append(TotalAnnualAccrualAmount).Append("\n");
            sb.Append("  FeeRatePercentage: ").Append(FeeRatePercentage).Append("\n");
            sb.Append("  PayableFrequency: ").Append(PayableFrequency).Append("\n");
            sb.Append("  BusinessDayConvention: ").Append(BusinessDayConvention).Append("\n");
            sb.Append("  StartDate: ").Append(StartDate).Append("\n");
            sb.Append("  EndDate: ").Append(EndDate).Append("\n");
            sb.Append("  AnchorDate: ").Append(AnchorDate).Append("\n");
            sb.Append("  Properties: ").Append(Properties).Append("\n");
            sb.Append("  PortfolioId: ").Append(PortfolioId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as FeeRequest);
        }

        /// <summary>
        /// Returns true if FeeRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of FeeRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FeeRequest input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Code == input.Code ||
                    (this.Code != null &&
                    this.Code.Equals(input.Code))
                ) && 
                (
                    this.FeeTypeId == input.FeeTypeId ||
                    (this.FeeTypeId != null &&
                    this.FeeTypeId.Equals(input.FeeTypeId))
                ) && 
                (
                    this.DisplayName == input.DisplayName ||
                    (this.DisplayName != null &&
                    this.DisplayName.Equals(input.DisplayName))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.Origin == input.Origin ||
                    (this.Origin != null &&
                    this.Origin.Equals(input.Origin))
                ) && 
                (
                    this.CalculationBase == input.CalculationBase ||
                    (this.CalculationBase != null &&
                    this.CalculationBase.Equals(input.CalculationBase))
                ) && 
                (
                    this.AccrualCurrency == input.AccrualCurrency ||
                    (this.AccrualCurrency != null &&
                    this.AccrualCurrency.Equals(input.AccrualCurrency))
                ) && 
                (
                    this.Treatment == input.Treatment ||
                    (this.Treatment != null &&
                    this.Treatment.Equals(input.Treatment))
                ) && 
                (
                    this.TotalAnnualAccrualAmount == input.TotalAnnualAccrualAmount ||
                    (this.TotalAnnualAccrualAmount != null &&
                    this.TotalAnnualAccrualAmount.Equals(input.TotalAnnualAccrualAmount))
                ) && 
                (
                    this.FeeRatePercentage == input.FeeRatePercentage ||
                    (this.FeeRatePercentage != null &&
                    this.FeeRatePercentage.Equals(input.FeeRatePercentage))
                ) && 
                (
                    this.PayableFrequency == input.PayableFrequency ||
                    (this.PayableFrequency != null &&
                    this.PayableFrequency.Equals(input.PayableFrequency))
                ) && 
                (
                    this.BusinessDayConvention == input.BusinessDayConvention ||
                    (this.BusinessDayConvention != null &&
                    this.BusinessDayConvention.Equals(input.BusinessDayConvention))
                ) && 
                (
                    this.StartDate == input.StartDate ||
                    (this.StartDate != null &&
                    this.StartDate.Equals(input.StartDate))
                ) && 
                (
                    this.EndDate == input.EndDate ||
                    (this.EndDate != null &&
                    this.EndDate.Equals(input.EndDate))
                ) && 
                (
                    this.AnchorDate == input.AnchorDate ||
                    (this.AnchorDate != null &&
                    this.AnchorDate.Equals(input.AnchorDate))
                ) && 
                (
                    this.Properties == input.Properties ||
                    this.Properties != null &&
                    input.Properties != null &&
                    this.Properties.SequenceEqual(input.Properties)
                ) && 
                (
                    this.PortfolioId == input.PortfolioId ||
                    (this.PortfolioId != null &&
                    this.PortfolioId.Equals(input.PortfolioId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Code != null)
                {
                    hashCode = (hashCode * 59) + this.Code.GetHashCode();
                }
                if (this.FeeTypeId != null)
                {
                    hashCode = (hashCode * 59) + this.FeeTypeId.GetHashCode();
                }
                if (this.DisplayName != null)
                {
                    hashCode = (hashCode * 59) + this.DisplayName.GetHashCode();
                }
                if (this.Description != null)
                {
                    hashCode = (hashCode * 59) + this.Description.GetHashCode();
                }
                if (this.Origin != null)
                {
                    hashCode = (hashCode * 59) + this.Origin.GetHashCode();
                }
                if (this.CalculationBase != null)
                {
                    hashCode = (hashCode * 59) + this.CalculationBase.GetHashCode();
                }
                if (this.AccrualCurrency != null)
                {
                    hashCode = (hashCode * 59) + this.AccrualCurrency.GetHashCode();
                }
                if (this.Treatment != null)
                {
                    hashCode = (hashCode * 59) + this.Treatment.GetHashCode();
                }
                if (this.TotalAnnualAccrualAmount != null)
                {
                    hashCode = (hashCode * 59) + this.TotalAnnualAccrualAmount.GetHashCode();
                }
                if (this.FeeRatePercentage != null)
                {
                    hashCode = (hashCode * 59) + this.FeeRatePercentage.GetHashCode();
                }
                if (this.PayableFrequency != null)
                {
                    hashCode = (hashCode * 59) + this.PayableFrequency.GetHashCode();
                }
                if (this.BusinessDayConvention != null)
                {
                    hashCode = (hashCode * 59) + this.BusinessDayConvention.GetHashCode();
                }
                if (this.StartDate != null)
                {
                    hashCode = (hashCode * 59) + this.StartDate.GetHashCode();
                }
                if (this.EndDate != null)
                {
                    hashCode = (hashCode * 59) + this.EndDate.GetHashCode();
                }
                if (this.AnchorDate != null)
                {
                    hashCode = (hashCode * 59) + this.AnchorDate.GetHashCode();
                }
                if (this.Properties != null)
                {
                    hashCode = (hashCode * 59) + this.Properties.GetHashCode();
                }
                if (this.PortfolioId != null)
                {
                    hashCode = (hashCode * 59) + this.PortfolioId.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Code (string) maxLength
            if (this.Code != null && this.Code.Length > 64)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Code, length must be less than 64.", new [] { "Code" });
            }

            // Code (string) minLength
            if (this.Code != null && this.Code.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Code, length must be greater than 1.", new [] { "Code" });
            }

            // Code (string) pattern
            Regex regexCode = new Regex(@"^[a-zA-Z0-9\-_]+$", RegexOptions.CultureInvariant);
            if (false == regexCode.Match(this.Code).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Code, must match a pattern of " + regexCode, new [] { "Code" });
            }

            // DisplayName (string) maxLength
            if (this.DisplayName != null && this.DisplayName.Length > 256)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for DisplayName, length must be less than 256.", new [] { "DisplayName" });
            }

            // DisplayName (string) minLength
            if (this.DisplayName != null && this.DisplayName.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for DisplayName, length must be greater than 1.", new [] { "DisplayName" });
            }

            // Description (string) maxLength
            if (this.Description != null && this.Description.Length > 1024)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Description, length must be less than 1024.", new [] { "Description" });
            }

            // Description (string) minLength
            if (this.Description != null && this.Description.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Description, length must be greater than 0.", new [] { "Description" });
            }

            // Description (string) pattern
            Regex regexDescription = new Regex(@"^[\s\S]*$", RegexOptions.CultureInvariant);
            if (false == regexDescription.Match(this.Description).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Description, must match a pattern of " + regexDescription, new [] { "Description" });
            }

            // Origin (string) maxLength
            if (this.Origin != null && this.Origin.Length > 512)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Origin, length must be less than 512.", new [] { "Origin" });
            }

            // Origin (string) minLength
            if (this.Origin != null && this.Origin.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Origin, length must be greater than 1.", new [] { "Origin" });
            }

            // CalculationBase (string) maxLength
            if (this.CalculationBase != null && this.CalculationBase.Length > 1024)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CalculationBase, length must be less than 1024.", new [] { "CalculationBase" });
            }

            // CalculationBase (string) minLength
            if (this.CalculationBase != null && this.CalculationBase.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CalculationBase, length must be greater than 0.", new [] { "CalculationBase" });
            }

            // AccrualCurrency (string) maxLength
            if (this.AccrualCurrency != null && this.AccrualCurrency.Length > 3)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for AccrualCurrency, length must be less than 3.", new [] { "AccrualCurrency" });
            }

            // AccrualCurrency (string) minLength
            if (this.AccrualCurrency != null && this.AccrualCurrency.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for AccrualCurrency, length must be greater than 0.", new [] { "AccrualCurrency" });
            }

            // Treatment (string) minLength
            if (this.Treatment != null && this.Treatment.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Treatment, length must be greater than 1.", new [] { "Treatment" });
            }

            // PayableFrequency (string) minLength
            if (this.PayableFrequency != null && this.PayableFrequency.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PayableFrequency, length must be greater than 1.", new [] { "PayableFrequency" });
            }

            // BusinessDayConvention (string) minLength
            if (this.BusinessDayConvention != null && this.BusinessDayConvention.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for BusinessDayConvention, length must be greater than 1.", new [] { "BusinessDayConvention" });
            }

            yield break;
        }
    }
}
