/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Lusid.Sdk.Client.OpenAPIDateConverter;

namespace Lusid.Sdk.Model
{
    /// <summary>
    /// Information about the other related entity in the relationship
    /// </summary>
    [DataContract(Name = "RelatedEntity")]
    public partial class RelatedEntity : IEquatable<RelatedEntity>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RelatedEntity" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected RelatedEntity() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="RelatedEntity" /> class.
        /// </summary>
        /// <param name="entityType">The type of the entity. (required).</param>
        /// <param name="entityId">The identifier of the other related entity in the relationship. It contains &#39;scope&#39; and &#39;code&#39; as keys for identifiers of a Portfolio or Portfolio Group, or &#39;idTypeScope&#39;, &#39;idTypeCode&#39;, &#39;code&#39; as keys for identifiers of a Person or Legal entity, or &#39;scope&#39;, &#39;identifierType&#39;, &#39;identifierValue&#39; as keys for identifiers of an Instrument (required).</param>
        /// <param name="displayName">The display name of the entity. (required).</param>
        /// <param name="properties">The properties of the entity. This field is empty until further notice..</param>
        /// <param name="scope">The scope of the identifier.</param>
        /// <param name="lusidUniqueId">lusidUniqueId.</param>
        /// <param name="identifiers">The identifiers of the related entity in the relationship. (required).</param>
        /// <param name="href">The link to the entity..</param>
        public RelatedEntity(string entityType = default(string), Dictionary<string, string> entityId = default(Dictionary<string, string>), string displayName = default(string), Dictionary<string, Property> properties = default(Dictionary<string, Property>), string scope = default(string), LusidUniqueId lusidUniqueId = default(LusidUniqueId), List<EntityIdentifier> identifiers = default(List<EntityIdentifier>), string href = default(string))
        {
            // to ensure "entityType" is required (not null)
            if (entityType == null)
            {
                throw new ArgumentNullException("entityType is a required property for RelatedEntity and cannot be null");
            }
            this.EntityType = entityType;
            // to ensure "entityId" is required (not null)
            if (entityId == null)
            {
                throw new ArgumentNullException("entityId is a required property for RelatedEntity and cannot be null");
            }
            this.EntityId = entityId;
            // to ensure "displayName" is required (not null)
            if (displayName == null)
            {
                throw new ArgumentNullException("displayName is a required property for RelatedEntity and cannot be null");
            }
            this.DisplayName = displayName;
            // to ensure "identifiers" is required (not null)
            if (identifiers == null)
            {
                throw new ArgumentNullException("identifiers is a required property for RelatedEntity and cannot be null");
            }
            this.Identifiers = identifiers;
            this.Properties = properties;
            this.Scope = scope;
            this.LusidUniqueId = lusidUniqueId;
            this.Href = href;
        }

        /// <summary>
        /// The type of the entity.
        /// </summary>
        /// <value>The type of the entity.</value>
        [DataMember(Name = "entityType", IsRequired = true, EmitDefaultValue = true)]
        public string EntityType { get; set; }

        /// <summary>
        /// The identifier of the other related entity in the relationship. It contains &#39;scope&#39; and &#39;code&#39; as keys for identifiers of a Portfolio or Portfolio Group, or &#39;idTypeScope&#39;, &#39;idTypeCode&#39;, &#39;code&#39; as keys for identifiers of a Person or Legal entity, or &#39;scope&#39;, &#39;identifierType&#39;, &#39;identifierValue&#39; as keys for identifiers of an Instrument
        /// </summary>
        /// <value>The identifier of the other related entity in the relationship. It contains &#39;scope&#39; and &#39;code&#39; as keys for identifiers of a Portfolio or Portfolio Group, or &#39;idTypeScope&#39;, &#39;idTypeCode&#39;, &#39;code&#39; as keys for identifiers of a Person or Legal entity, or &#39;scope&#39;, &#39;identifierType&#39;, &#39;identifierValue&#39; as keys for identifiers of an Instrument</value>
        [DataMember(Name = "entityId", IsRequired = true, EmitDefaultValue = true)]
        public Dictionary<string, string> EntityId { get; set; }

        /// <summary>
        /// The display name of the entity.
        /// </summary>
        /// <value>The display name of the entity.</value>
        [DataMember(Name = "displayName", IsRequired = true, EmitDefaultValue = true)]
        public string DisplayName { get; set; }

        /// <summary>
        /// The properties of the entity. This field is empty until further notice.
        /// </summary>
        /// <value>The properties of the entity. This field is empty until further notice.</value>
        [DataMember(Name = "properties", EmitDefaultValue = true)]
        public Dictionary<string, Property> Properties { get; set; }

        /// <summary>
        /// The scope of the identifier
        /// </summary>
        /// <value>The scope of the identifier</value>
        [DataMember(Name = "scope", EmitDefaultValue = true)]
        public string Scope { get; set; }

        /// <summary>
        /// Gets or Sets LusidUniqueId
        /// </summary>
        [DataMember(Name = "lusidUniqueId", EmitDefaultValue = false)]
        public LusidUniqueId LusidUniqueId { get; set; }

        /// <summary>
        /// The identifiers of the related entity in the relationship.
        /// </summary>
        /// <value>The identifiers of the related entity in the relationship.</value>
        [DataMember(Name = "identifiers", IsRequired = true, EmitDefaultValue = true)]
        public List<EntityIdentifier> Identifiers { get; set; }

        /// <summary>
        /// The link to the entity.
        /// </summary>
        /// <value>The link to the entity.</value>
        [DataMember(Name = "href", EmitDefaultValue = true)]
        public string Href { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class RelatedEntity {\n");
            sb.Append("  EntityType: ").Append(EntityType).Append("\n");
            sb.Append("  EntityId: ").Append(EntityId).Append("\n");
            sb.Append("  DisplayName: ").Append(DisplayName).Append("\n");
            sb.Append("  Properties: ").Append(Properties).Append("\n");
            sb.Append("  Scope: ").Append(Scope).Append("\n");
            sb.Append("  LusidUniqueId: ").Append(LusidUniqueId).Append("\n");
            sb.Append("  Identifiers: ").Append(Identifiers).Append("\n");
            sb.Append("  Href: ").Append(Href).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as RelatedEntity);
        }

        /// <summary>
        /// Returns true if RelatedEntity instances are equal
        /// </summary>
        /// <param name="input">Instance of RelatedEntity to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RelatedEntity input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.EntityType == input.EntityType ||
                    (this.EntityType != null &&
                    this.EntityType.Equals(input.EntityType))
                ) && 
                (
                    this.EntityId == input.EntityId ||
                    this.EntityId != null &&
                    input.EntityId != null &&
                    this.EntityId.SequenceEqual(input.EntityId)
                ) && 
                (
                    this.DisplayName == input.DisplayName ||
                    (this.DisplayName != null &&
                    this.DisplayName.Equals(input.DisplayName))
                ) && 
                (
                    this.Properties == input.Properties ||
                    this.Properties != null &&
                    input.Properties != null &&
                    this.Properties.SequenceEqual(input.Properties)
                ) && 
                (
                    this.Scope == input.Scope ||
                    (this.Scope != null &&
                    this.Scope.Equals(input.Scope))
                ) && 
                (
                    this.LusidUniqueId == input.LusidUniqueId ||
                    (this.LusidUniqueId != null &&
                    this.LusidUniqueId.Equals(input.LusidUniqueId))
                ) && 
                (
                    this.Identifiers == input.Identifiers ||
                    this.Identifiers != null &&
                    input.Identifiers != null &&
                    this.Identifiers.SequenceEqual(input.Identifiers)
                ) && 
                (
                    this.Href == input.Href ||
                    (this.Href != null &&
                    this.Href.Equals(input.Href))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.EntityType != null)
                {
                    hashCode = (hashCode * 59) + this.EntityType.GetHashCode();
                }
                if (this.EntityId != null)
                {
                    hashCode = (hashCode * 59) + this.EntityId.GetHashCode();
                }
                if (this.DisplayName != null)
                {
                    hashCode = (hashCode * 59) + this.DisplayName.GetHashCode();
                }
                if (this.Properties != null)
                {
                    hashCode = (hashCode * 59) + this.Properties.GetHashCode();
                }
                if (this.Scope != null)
                {
                    hashCode = (hashCode * 59) + this.Scope.GetHashCode();
                }
                if (this.LusidUniqueId != null)
                {
                    hashCode = (hashCode * 59) + this.LusidUniqueId.GetHashCode();
                }
                if (this.Identifiers != null)
                {
                    hashCode = (hashCode * 59) + this.Identifiers.GetHashCode();
                }
                if (this.Href != null)
                {
                    hashCode = (hashCode * 59) + this.Href.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // EntityType (string) minLength
            if (this.EntityType != null && this.EntityType.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for EntityType, length must be greater than 1.", new [] { "EntityType" });
            }

            // DisplayName (string) minLength
            if (this.DisplayName != null && this.DisplayName.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for DisplayName, length must be greater than 1.", new [] { "DisplayName" });
            }

            yield break;
        }
    }
}
