/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Lusid.Sdk.Client.OpenAPIDateConverter;

namespace Lusid.Sdk.Model
{
    /// <summary>
    /// Security election for Events that result in equity
    /// </summary>
    [DataContract(Name = "SecurityElection")]
    public partial class SecurityElection : IEquatable<SecurityElection>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SecurityElection" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected SecurityElection() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="SecurityElection" /> class.
        /// </summary>
        /// <param name="electionKey">Unique key associated to this election. (required).</param>
        /// <param name="isChosen">Is this the election that has been explicitly chosen from multiple options..</param>
        /// <param name="isDefault">Is this election automatically applied in the absence of an election having been made. May only be true for one election if multiple are provided..</param>
        /// <param name="price">Price per unit of the security. At least one of UnitsRatio or Price must be provided. Price must non-zero..</param>
        /// <param name="unitsRatio">unitsRatio.</param>
        public SecurityElection(string electionKey = default(string), bool isChosen = default(bool), bool isDefault = default(bool), decimal? price = default(decimal?), UnitsRatio unitsRatio = default(UnitsRatio))
        {
            // to ensure "electionKey" is required (not null)
            if (electionKey == null)
            {
                throw new ArgumentNullException("electionKey is a required property for SecurityElection and cannot be null");
            }
            this.ElectionKey = electionKey;
            this.IsChosen = isChosen;
            this.IsDefault = isDefault;
            this.Price = price;
            this.UnitsRatio = unitsRatio;
        }

        /// <summary>
        /// Unique key associated to this election.
        /// </summary>
        /// <value>Unique key associated to this election.</value>
        [DataMember(Name = "electionKey", IsRequired = true, EmitDefaultValue = true)]
        public string ElectionKey { get; set; }

        /// <summary>
        /// Is this the election that has been explicitly chosen from multiple options.
        /// </summary>
        /// <value>Is this the election that has been explicitly chosen from multiple options.</value>
        [DataMember(Name = "isChosen", EmitDefaultValue = true)]
        public bool IsChosen { get; set; }

        /// <summary>
        /// Is this election automatically applied in the absence of an election having been made. May only be true for one election if multiple are provided.
        /// </summary>
        /// <value>Is this election automatically applied in the absence of an election having been made. May only be true for one election if multiple are provided.</value>
        [DataMember(Name = "isDefault", EmitDefaultValue = true)]
        public bool IsDefault { get; set; }

        /// <summary>
        /// Price per unit of the security. At least one of UnitsRatio or Price must be provided. Price must non-zero.
        /// </summary>
        /// <value>Price per unit of the security. At least one of UnitsRatio or Price must be provided. Price must non-zero.</value>
        [DataMember(Name = "price", EmitDefaultValue = true)]
        public decimal? Price { get; set; }

        /// <summary>
        /// Gets or Sets UnitsRatio
        /// </summary>
        [DataMember(Name = "unitsRatio", EmitDefaultValue = false)]
        public UnitsRatio UnitsRatio { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SecurityElection {\n");
            sb.Append("  ElectionKey: ").Append(ElectionKey).Append("\n");
            sb.Append("  IsChosen: ").Append(IsChosen).Append("\n");
            sb.Append("  IsDefault: ").Append(IsDefault).Append("\n");
            sb.Append("  Price: ").Append(Price).Append("\n");
            sb.Append("  UnitsRatio: ").Append(UnitsRatio).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SecurityElection);
        }

        /// <summary>
        /// Returns true if SecurityElection instances are equal
        /// </summary>
        /// <param name="input">Instance of SecurityElection to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SecurityElection input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.ElectionKey == input.ElectionKey ||
                    (this.ElectionKey != null &&
                    this.ElectionKey.Equals(input.ElectionKey))
                ) && 
                (
                    this.IsChosen == input.IsChosen ||
                    this.IsChosen.Equals(input.IsChosen)
                ) && 
                (
                    this.IsDefault == input.IsDefault ||
                    this.IsDefault.Equals(input.IsDefault)
                ) && 
                (
                    this.Price == input.Price ||
                    (this.Price != null &&
                    this.Price.Equals(input.Price))
                ) && 
                (
                    this.UnitsRatio == input.UnitsRatio ||
                    (this.UnitsRatio != null &&
                    this.UnitsRatio.Equals(input.UnitsRatio))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ElectionKey != null)
                {
                    hashCode = (hashCode * 59) + this.ElectionKey.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.IsChosen.GetHashCode();
                hashCode = (hashCode * 59) + this.IsDefault.GetHashCode();
                if (this.Price != null)
                {
                    hashCode = (hashCode * 59) + this.Price.GetHashCode();
                }
                if (this.UnitsRatio != null)
                {
                    hashCode = (hashCode * 59) + this.UnitsRatio.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // ElectionKey (string) minLength
            if (this.ElectionKey != null && this.ElectionKey.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ElectionKey, length must be greater than 1.", new [] { "ElectionKey" });
            }

            yield break;
        }
    }
}
