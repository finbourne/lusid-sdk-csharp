/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Lusid.Sdk.Client.OpenAPIDateConverter;

namespace Lusid.Sdk.Model
{
    /// <summary>
    /// BondDefaultEventAllOf
    /// </summary>
    [DataContract(Name = "BondDefaultEvent_allOf")]
    public partial class BondDefaultEventAllOf : IEquatable<BondDefaultEventAllOf>, IValidatableObject
    {
        /// <summary>
        /// The Type of Event. The available values are: TransitionEvent, InformationalEvent, OpenEvent, CloseEvent, StockSplitEvent, BondDefaultEvent, CashDividendEvent, AmortisationEvent, CashFlowEvent, ExerciseEvent, ResetEvent, TriggerEvent, RawVendorEvent, InformationalErrorEvent, BondCouponEvent, DividendReinvestmentEvent, AccumulationEvent, BondPrincipalEvent, DividendOptionEvent, MaturityEvent
        /// </summary>
        /// <value>The Type of Event. The available values are: TransitionEvent, InformationalEvent, OpenEvent, CloseEvent, StockSplitEvent, BondDefaultEvent, CashDividendEvent, AmortisationEvent, CashFlowEvent, ExerciseEvent, ResetEvent, TriggerEvent, RawVendorEvent, InformationalErrorEvent, BondCouponEvent, DividendReinvestmentEvent, AccumulationEvent, BondPrincipalEvent, DividendOptionEvent, MaturityEvent</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum InstrumentEventTypeEnum
        {
            /// <summary>
            /// Enum TransitionEvent for value: TransitionEvent
            /// </summary>
            [EnumMember(Value = "TransitionEvent")]
            TransitionEvent = 1,

            /// <summary>
            /// Enum InformationalEvent for value: InformationalEvent
            /// </summary>
            [EnumMember(Value = "InformationalEvent")]
            InformationalEvent = 2,

            /// <summary>
            /// Enum OpenEvent for value: OpenEvent
            /// </summary>
            [EnumMember(Value = "OpenEvent")]
            OpenEvent = 3,

            /// <summary>
            /// Enum CloseEvent for value: CloseEvent
            /// </summary>
            [EnumMember(Value = "CloseEvent")]
            CloseEvent = 4,

            /// <summary>
            /// Enum StockSplitEvent for value: StockSplitEvent
            /// </summary>
            [EnumMember(Value = "StockSplitEvent")]
            StockSplitEvent = 5,

            /// <summary>
            /// Enum BondDefaultEvent for value: BondDefaultEvent
            /// </summary>
            [EnumMember(Value = "BondDefaultEvent")]
            BondDefaultEvent = 6,

            /// <summary>
            /// Enum CashDividendEvent for value: CashDividendEvent
            /// </summary>
            [EnumMember(Value = "CashDividendEvent")]
            CashDividendEvent = 7,

            /// <summary>
            /// Enum AmortisationEvent for value: AmortisationEvent
            /// </summary>
            [EnumMember(Value = "AmortisationEvent")]
            AmortisationEvent = 8,

            /// <summary>
            /// Enum CashFlowEvent for value: CashFlowEvent
            /// </summary>
            [EnumMember(Value = "CashFlowEvent")]
            CashFlowEvent = 9,

            /// <summary>
            /// Enum ExerciseEvent for value: ExerciseEvent
            /// </summary>
            [EnumMember(Value = "ExerciseEvent")]
            ExerciseEvent = 10,

            /// <summary>
            /// Enum ResetEvent for value: ResetEvent
            /// </summary>
            [EnumMember(Value = "ResetEvent")]
            ResetEvent = 11,

            /// <summary>
            /// Enum TriggerEvent for value: TriggerEvent
            /// </summary>
            [EnumMember(Value = "TriggerEvent")]
            TriggerEvent = 12,

            /// <summary>
            /// Enum RawVendorEvent for value: RawVendorEvent
            /// </summary>
            [EnumMember(Value = "RawVendorEvent")]
            RawVendorEvent = 13,

            /// <summary>
            /// Enum InformationalErrorEvent for value: InformationalErrorEvent
            /// </summary>
            [EnumMember(Value = "InformationalErrorEvent")]
            InformationalErrorEvent = 14,

            /// <summary>
            /// Enum BondCouponEvent for value: BondCouponEvent
            /// </summary>
            [EnumMember(Value = "BondCouponEvent")]
            BondCouponEvent = 15,

            /// <summary>
            /// Enum DividendReinvestmentEvent for value: DividendReinvestmentEvent
            /// </summary>
            [EnumMember(Value = "DividendReinvestmentEvent")]
            DividendReinvestmentEvent = 16,

            /// <summary>
            /// Enum AccumulationEvent for value: AccumulationEvent
            /// </summary>
            [EnumMember(Value = "AccumulationEvent")]
            AccumulationEvent = 17,

            /// <summary>
            /// Enum BondPrincipalEvent for value: BondPrincipalEvent
            /// </summary>
            [EnumMember(Value = "BondPrincipalEvent")]
            BondPrincipalEvent = 18,

            /// <summary>
            /// Enum DividendOptionEvent for value: DividendOptionEvent
            /// </summary>
            [EnumMember(Value = "DividendOptionEvent")]
            DividendOptionEvent = 19,

            /// <summary>
            /// Enum MaturityEvent for value: MaturityEvent
            /// </summary>
            [EnumMember(Value = "MaturityEvent")]
            MaturityEvent = 20

        }


        /// <summary>
        /// The Type of Event. The available values are: TransitionEvent, InformationalEvent, OpenEvent, CloseEvent, StockSplitEvent, BondDefaultEvent, CashDividendEvent, AmortisationEvent, CashFlowEvent, ExerciseEvent, ResetEvent, TriggerEvent, RawVendorEvent, InformationalErrorEvent, BondCouponEvent, DividendReinvestmentEvent, AccumulationEvent, BondPrincipalEvent, DividendOptionEvent, MaturityEvent
        /// </summary>
        /// <value>The Type of Event. The available values are: TransitionEvent, InformationalEvent, OpenEvent, CloseEvent, StockSplitEvent, BondDefaultEvent, CashDividendEvent, AmortisationEvent, CashFlowEvent, ExerciseEvent, ResetEvent, TriggerEvent, RawVendorEvent, InformationalErrorEvent, BondCouponEvent, DividendReinvestmentEvent, AccumulationEvent, BondPrincipalEvent, DividendOptionEvent, MaturityEvent</value>
        [DataMember(Name = "instrumentEventType", IsRequired = true, EmitDefaultValue = true)]
        public InstrumentEventTypeEnum InstrumentEventType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="BondDefaultEventAllOf" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected BondDefaultEventAllOf() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="BondDefaultEventAllOf" /> class.
        /// </summary>
        /// <param name="amount">Percentage or amount of each share held to be given to shareholders. (required).</param>
        /// <param name="couponPaidDate">Date that the missed coupon is paid if payment is made within grace period. (required).</param>
        /// <param name="defaultStatus">The status of the bond default (i.e., technical or default)    Supported string (enumeration) values are: [Technical, Default]. (required).</param>
        /// <param name="defaultType">The type of the default. (coupon payment, principal payment, covenant ...)    Supported string (enumeration) values are: [CouponPayment, CouponAndPrincipalPayment, PrincipalPayment, Covenant, Bankruptcy, BuyBackOption]. (required).</param>
        /// <param name="graceEndDate">Date the grace period for making coupon payment ends. (required).</param>
        /// <param name="paymentDate">The date the coupon payment was missed. (required).</param>
        /// <param name="instrumentEventType">The Type of Event. The available values are: TransitionEvent, InformationalEvent, OpenEvent, CloseEvent, StockSplitEvent, BondDefaultEvent, CashDividendEvent, AmortisationEvent, CashFlowEvent, ExerciseEvent, ResetEvent, TriggerEvent, RawVendorEvent, InformationalErrorEvent, BondCouponEvent, DividendReinvestmentEvent, AccumulationEvent, BondPrincipalEvent, DividendOptionEvent, MaturityEvent (required).</param>
        public BondDefaultEventAllOf(decimal amount = default(decimal), DateTimeOffset couponPaidDate = default(DateTimeOffset), string defaultStatus = default(string), string defaultType = default(string), DateTimeOffset graceEndDate = default(DateTimeOffset), DateTimeOffset paymentDate = default(DateTimeOffset), InstrumentEventTypeEnum instrumentEventType = default(InstrumentEventTypeEnum))
        {
            this.Amount = amount;
            this.CouponPaidDate = couponPaidDate;
            // to ensure "defaultStatus" is required (not null)
            if (defaultStatus == null)
            {
                throw new ArgumentNullException("defaultStatus is a required property for BondDefaultEventAllOf and cannot be null");
            }
            this.DefaultStatus = defaultStatus;
            // to ensure "defaultType" is required (not null)
            if (defaultType == null)
            {
                throw new ArgumentNullException("defaultType is a required property for BondDefaultEventAllOf and cannot be null");
            }
            this.DefaultType = defaultType;
            this.GraceEndDate = graceEndDate;
            this.PaymentDate = paymentDate;
            this.InstrumentEventType = instrumentEventType;
        }

        /// <summary>
        /// Percentage or amount of each share held to be given to shareholders.
        /// </summary>
        /// <value>Percentage or amount of each share held to be given to shareholders.</value>
        [DataMember(Name = "amount", IsRequired = true, EmitDefaultValue = true)]
        public decimal Amount { get; set; }

        /// <summary>
        /// Date that the missed coupon is paid if payment is made within grace period.
        /// </summary>
        /// <value>Date that the missed coupon is paid if payment is made within grace period.</value>
        [DataMember(Name = "couponPaidDate", IsRequired = true, EmitDefaultValue = true)]
        public DateTimeOffset CouponPaidDate { get; set; }

        /// <summary>
        /// The status of the bond default (i.e., technical or default)    Supported string (enumeration) values are: [Technical, Default].
        /// </summary>
        /// <value>The status of the bond default (i.e., technical or default)    Supported string (enumeration) values are: [Technical, Default].</value>
        [DataMember(Name = "defaultStatus", IsRequired = true, EmitDefaultValue = true)]
        public string DefaultStatus { get; set; }

        /// <summary>
        /// The type of the default. (coupon payment, principal payment, covenant ...)    Supported string (enumeration) values are: [CouponPayment, CouponAndPrincipalPayment, PrincipalPayment, Covenant, Bankruptcy, BuyBackOption].
        /// </summary>
        /// <value>The type of the default. (coupon payment, principal payment, covenant ...)    Supported string (enumeration) values are: [CouponPayment, CouponAndPrincipalPayment, PrincipalPayment, Covenant, Bankruptcy, BuyBackOption].</value>
        [DataMember(Name = "defaultType", IsRequired = true, EmitDefaultValue = true)]
        public string DefaultType { get; set; }

        /// <summary>
        /// Date the grace period for making coupon payment ends.
        /// </summary>
        /// <value>Date the grace period for making coupon payment ends.</value>
        [DataMember(Name = "graceEndDate", IsRequired = true, EmitDefaultValue = true)]
        public DateTimeOffset GraceEndDate { get; set; }

        /// <summary>
        /// The date the coupon payment was missed.
        /// </summary>
        /// <value>The date the coupon payment was missed.</value>
        [DataMember(Name = "paymentDate", IsRequired = true, EmitDefaultValue = true)]
        public DateTimeOffset PaymentDate { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class BondDefaultEventAllOf {\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("  CouponPaidDate: ").Append(CouponPaidDate).Append("\n");
            sb.Append("  DefaultStatus: ").Append(DefaultStatus).Append("\n");
            sb.Append("  DefaultType: ").Append(DefaultType).Append("\n");
            sb.Append("  GraceEndDate: ").Append(GraceEndDate).Append("\n");
            sb.Append("  PaymentDate: ").Append(PaymentDate).Append("\n");
            sb.Append("  InstrumentEventType: ").Append(InstrumentEventType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as BondDefaultEventAllOf);
        }

        /// <summary>
        /// Returns true if BondDefaultEventAllOf instances are equal
        /// </summary>
        /// <param name="input">Instance of BondDefaultEventAllOf to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BondDefaultEventAllOf input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Amount == input.Amount ||
                    this.Amount.Equals(input.Amount)
                ) && 
                (
                    this.CouponPaidDate == input.CouponPaidDate ||
                    (this.CouponPaidDate != null &&
                    this.CouponPaidDate.Equals(input.CouponPaidDate))
                ) && 
                (
                    this.DefaultStatus == input.DefaultStatus ||
                    (this.DefaultStatus != null &&
                    this.DefaultStatus.Equals(input.DefaultStatus))
                ) && 
                (
                    this.DefaultType == input.DefaultType ||
                    (this.DefaultType != null &&
                    this.DefaultType.Equals(input.DefaultType))
                ) && 
                (
                    this.GraceEndDate == input.GraceEndDate ||
                    (this.GraceEndDate != null &&
                    this.GraceEndDate.Equals(input.GraceEndDate))
                ) && 
                (
                    this.PaymentDate == input.PaymentDate ||
                    (this.PaymentDate != null &&
                    this.PaymentDate.Equals(input.PaymentDate))
                ) && 
                (
                    this.InstrumentEventType == input.InstrumentEventType ||
                    this.InstrumentEventType.Equals(input.InstrumentEventType)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Amount.GetHashCode();
                if (this.CouponPaidDate != null)
                {
                    hashCode = (hashCode * 59) + this.CouponPaidDate.GetHashCode();
                }
                if (this.DefaultStatus != null)
                {
                    hashCode = (hashCode * 59) + this.DefaultStatus.GetHashCode();
                }
                if (this.DefaultType != null)
                {
                    hashCode = (hashCode * 59) + this.DefaultType.GetHashCode();
                }
                if (this.GraceEndDate != null)
                {
                    hashCode = (hashCode * 59) + this.GraceEndDate.GetHashCode();
                }
                if (this.PaymentDate != null)
                {
                    hashCode = (hashCode * 59) + this.PaymentDate.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.InstrumentEventType.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // DefaultStatus (string) minLength
            if (this.DefaultStatus != null && this.DefaultStatus.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for DefaultStatus, length must be greater than 1.", new [] { "DefaultStatus" });
            }

            // DefaultType (string) minLength
            if (this.DefaultType != null && this.DefaultType.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for DefaultType, length must be greater than 1.", new [] { "DefaultType" });
            }

            yield break;
        }
    }
}
