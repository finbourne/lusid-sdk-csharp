/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Lusid.Sdk.Client.OpenAPIDateConverter;

namespace Lusid.Sdk.Model
{
    /// <summary>
    /// CalendarDate
    /// </summary>
    [DataContract(Name = "CalendarDate")]
    public partial class CalendarDate : IEquatable<CalendarDate>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CalendarDate" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CalendarDate() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CalendarDate" /> class.
        /// </summary>
        /// <param name="href">href.</param>
        /// <param name="dateIdentifier">dateIdentifier (required).</param>
        /// <param name="fromUtc">fromUtc (required).</param>
        /// <param name="toUtc">toUtc (required).</param>
        /// <param name="localDate">localDate (required).</param>
        /// <param name="timezone">timezone (required).</param>
        /// <param name="description">description (required).</param>
        /// <param name="type">type.</param>
        /// <param name="attributes">attributes.</param>
        /// <param name="sourceData">sourceData.</param>
        public CalendarDate(string href = default(string), string dateIdentifier = default(string), DateTimeOffset fromUtc = default(DateTimeOffset), DateTimeOffset toUtc = default(DateTimeOffset), string localDate = default(string), string timezone = default(string), string description = default(string), string type = default(string), DateAttributes attributes = default(DateAttributes), Dictionary<string, string> sourceData = default(Dictionary<string, string>))
        {
            // to ensure "dateIdentifier" is required (not null)
            if (dateIdentifier == null)
            {
                throw new ArgumentNullException("dateIdentifier is a required property for CalendarDate and cannot be null");
            }
            this.DateIdentifier = dateIdentifier;
            this.FromUtc = fromUtc;
            this.ToUtc = toUtc;
            // to ensure "localDate" is required (not null)
            if (localDate == null)
            {
                throw new ArgumentNullException("localDate is a required property for CalendarDate and cannot be null");
            }
            this.LocalDate = localDate;
            // to ensure "timezone" is required (not null)
            if (timezone == null)
            {
                throw new ArgumentNullException("timezone is a required property for CalendarDate and cannot be null");
            }
            this.Timezone = timezone;
            // to ensure "description" is required (not null)
            if (description == null)
            {
                throw new ArgumentNullException("description is a required property for CalendarDate and cannot be null");
            }
            this.Description = description;
            this.Href = href;
            this.Type = type;
            this.Attributes = attributes;
            this.SourceData = sourceData;
        }

        /// <summary>
        /// Gets or Sets Href
        /// </summary>
        [DataMember(Name = "href", EmitDefaultValue = true)]
        public string Href { get; set; }

        /// <summary>
        /// Gets or Sets DateIdentifier
        /// </summary>
        [DataMember(Name = "dateIdentifier", IsRequired = true, EmitDefaultValue = true)]
        public string DateIdentifier { get; set; }

        /// <summary>
        /// Gets or Sets FromUtc
        /// </summary>
        [DataMember(Name = "fromUtc", IsRequired = true, EmitDefaultValue = true)]
        public DateTimeOffset FromUtc { get; set; }

        /// <summary>
        /// Gets or Sets ToUtc
        /// </summary>
        [DataMember(Name = "toUtc", IsRequired = true, EmitDefaultValue = true)]
        public DateTimeOffset ToUtc { get; set; }

        /// <summary>
        /// Gets or Sets LocalDate
        /// </summary>
        [DataMember(Name = "localDate", IsRequired = true, EmitDefaultValue = true)]
        public string LocalDate { get; set; }

        /// <summary>
        /// Gets or Sets Timezone
        /// </summary>
        [DataMember(Name = "timezone", IsRequired = true, EmitDefaultValue = true)]
        public string Timezone { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name = "description", IsRequired = true, EmitDefaultValue = true)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name = "type", EmitDefaultValue = true)]
        public string Type { get; set; }

        /// <summary>
        /// Gets or Sets Attributes
        /// </summary>
        [DataMember(Name = "attributes", EmitDefaultValue = false)]
        public DateAttributes Attributes { get; set; }

        /// <summary>
        /// Gets or Sets SourceData
        /// </summary>
        [DataMember(Name = "sourceData", EmitDefaultValue = true)]
        public Dictionary<string, string> SourceData { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CalendarDate {\n");
            sb.Append("  Href: ").Append(Href).Append("\n");
            sb.Append("  DateIdentifier: ").Append(DateIdentifier).Append("\n");
            sb.Append("  FromUtc: ").Append(FromUtc).Append("\n");
            sb.Append("  ToUtc: ").Append(ToUtc).Append("\n");
            sb.Append("  LocalDate: ").Append(LocalDate).Append("\n");
            sb.Append("  Timezone: ").Append(Timezone).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Attributes: ").Append(Attributes).Append("\n");
            sb.Append("  SourceData: ").Append(SourceData).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CalendarDate);
        }

        /// <summary>
        /// Returns true if CalendarDate instances are equal
        /// </summary>
        /// <param name="input">Instance of CalendarDate to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CalendarDate input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Href == input.Href ||
                    (this.Href != null &&
                    this.Href.Equals(input.Href))
                ) && 
                (
                    this.DateIdentifier == input.DateIdentifier ||
                    (this.DateIdentifier != null &&
                    this.DateIdentifier.Equals(input.DateIdentifier))
                ) && 
                (
                    this.FromUtc == input.FromUtc ||
                    (this.FromUtc != null &&
                    this.FromUtc.Equals(input.FromUtc))
                ) && 
                (
                    this.ToUtc == input.ToUtc ||
                    (this.ToUtc != null &&
                    this.ToUtc.Equals(input.ToUtc))
                ) && 
                (
                    this.LocalDate == input.LocalDate ||
                    (this.LocalDate != null &&
                    this.LocalDate.Equals(input.LocalDate))
                ) && 
                (
                    this.Timezone == input.Timezone ||
                    (this.Timezone != null &&
                    this.Timezone.Equals(input.Timezone))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.Attributes == input.Attributes ||
                    (this.Attributes != null &&
                    this.Attributes.Equals(input.Attributes))
                ) && 
                (
                    this.SourceData == input.SourceData ||
                    this.SourceData != null &&
                    input.SourceData != null &&
                    this.SourceData.SequenceEqual(input.SourceData)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Href != null)
                {
                    hashCode = (hashCode * 59) + this.Href.GetHashCode();
                }
                if (this.DateIdentifier != null)
                {
                    hashCode = (hashCode * 59) + this.DateIdentifier.GetHashCode();
                }
                if (this.FromUtc != null)
                {
                    hashCode = (hashCode * 59) + this.FromUtc.GetHashCode();
                }
                if (this.ToUtc != null)
                {
                    hashCode = (hashCode * 59) + this.ToUtc.GetHashCode();
                }
                if (this.LocalDate != null)
                {
                    hashCode = (hashCode * 59) + this.LocalDate.GetHashCode();
                }
                if (this.Timezone != null)
                {
                    hashCode = (hashCode * 59) + this.Timezone.GetHashCode();
                }
                if (this.Description != null)
                {
                    hashCode = (hashCode * 59) + this.Description.GetHashCode();
                }
                if (this.Type != null)
                {
                    hashCode = (hashCode * 59) + this.Type.GetHashCode();
                }
                if (this.Attributes != null)
                {
                    hashCode = (hashCode * 59) + this.Attributes.GetHashCode();
                }
                if (this.SourceData != null)
                {
                    hashCode = (hashCode * 59) + this.SourceData.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // DateIdentifier (string) minLength
            if (this.DateIdentifier != null && this.DateIdentifier.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for DateIdentifier, length must be greater than 1.", new [] { "DateIdentifier" });
            }

            // LocalDate (string) minLength
            if (this.LocalDate != null && this.LocalDate.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for LocalDate, length must be greater than 1.", new [] { "LocalDate" });
            }

            // Timezone (string) minLength
            if (this.Timezone != null && this.Timezone.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Timezone, length must be greater than 1.", new [] { "Timezone" });
            }

            // Description (string) minLength
            if (this.Description != null && this.Description.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Description, length must be greater than 1.", new [] { "Description" });
            }

            yield break;
        }
    }
}
