/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Lusid.Sdk.Client.OpenAPIDateConverter;

namespace Lusid.Sdk.Model
{
    /// <summary>
    /// When performing analytics, instruments and models have dependencies on market data.  A market data key rule essentially tells lusid to \&quot;resolve dependencies matching the pattern &#39;X&#39; using data of the form &#39;Y&#39;\&quot;.  The parameter &#39;X&#39; is defined by the key of the key rule, and might specify \&quot;all USD rates curves\&quot; or \&quot;all RIC-based prices\&quot;.  The parameter &#39;Y&#39; is defined by the remaining fields of the key rule, and allows the user to configure things such as  where to look for data, what sort of data should be looked for (e.g. bid/mid/ask), and how old the data is allowed to be.
    /// </summary>
    [DataContract(Name = "MarketDataKeyRule")]
    public partial class MarketDataKeyRule : IEquatable<MarketDataKeyRule>, IValidatableObject
    {
        /// <summary>
        /// The available values are: Price, Spread, Rate, LogNormalVol, NormalVol, ParSpread, IsdaSpread, Upfront, Index, Ratio, Delta, PoolFactor, InflationAssumption, DirtyPrice, PrincipalWriteOff, InterestDeferred, InterestShortfall
        /// </summary>
        /// <value>The available values are: Price, Spread, Rate, LogNormalVol, NormalVol, ParSpread, IsdaSpread, Upfront, Index, Ratio, Delta, PoolFactor, InflationAssumption, DirtyPrice, PrincipalWriteOff, InterestDeferred, InterestShortfall</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum QuoteTypeEnum
        {
            /// <summary>
            /// Enum Price for value: Price
            /// </summary>
            [EnumMember(Value = "Price")]
            Price = 1,

            /// <summary>
            /// Enum Spread for value: Spread
            /// </summary>
            [EnumMember(Value = "Spread")]
            Spread = 2,

            /// <summary>
            /// Enum Rate for value: Rate
            /// </summary>
            [EnumMember(Value = "Rate")]
            Rate = 3,

            /// <summary>
            /// Enum LogNormalVol for value: LogNormalVol
            /// </summary>
            [EnumMember(Value = "LogNormalVol")]
            LogNormalVol = 4,

            /// <summary>
            /// Enum NormalVol for value: NormalVol
            /// </summary>
            [EnumMember(Value = "NormalVol")]
            NormalVol = 5,

            /// <summary>
            /// Enum ParSpread for value: ParSpread
            /// </summary>
            [EnumMember(Value = "ParSpread")]
            ParSpread = 6,

            /// <summary>
            /// Enum IsdaSpread for value: IsdaSpread
            /// </summary>
            [EnumMember(Value = "IsdaSpread")]
            IsdaSpread = 7,

            /// <summary>
            /// Enum Upfront for value: Upfront
            /// </summary>
            [EnumMember(Value = "Upfront")]
            Upfront = 8,

            /// <summary>
            /// Enum Index for value: Index
            /// </summary>
            [EnumMember(Value = "Index")]
            Index = 9,

            /// <summary>
            /// Enum Ratio for value: Ratio
            /// </summary>
            [EnumMember(Value = "Ratio")]
            Ratio = 10,

            /// <summary>
            /// Enum Delta for value: Delta
            /// </summary>
            [EnumMember(Value = "Delta")]
            Delta = 11,

            /// <summary>
            /// Enum PoolFactor for value: PoolFactor
            /// </summary>
            [EnumMember(Value = "PoolFactor")]
            PoolFactor = 12,

            /// <summary>
            /// Enum InflationAssumption for value: InflationAssumption
            /// </summary>
            [EnumMember(Value = "InflationAssumption")]
            InflationAssumption = 13,

            /// <summary>
            /// Enum DirtyPrice for value: DirtyPrice
            /// </summary>
            [EnumMember(Value = "DirtyPrice")]
            DirtyPrice = 14,

            /// <summary>
            /// Enum PrincipalWriteOff for value: PrincipalWriteOff
            /// </summary>
            [EnumMember(Value = "PrincipalWriteOff")]
            PrincipalWriteOff = 15,

            /// <summary>
            /// Enum InterestDeferred for value: InterestDeferred
            /// </summary>
            [EnumMember(Value = "InterestDeferred")]
            InterestDeferred = 16,

            /// <summary>
            /// Enum InterestShortfall for value: InterestShortfall
            /// </summary>
            [EnumMember(Value = "InterestShortfall")]
            InterestShortfall = 17

        }


        /// <summary>
        /// The available values are: Price, Spread, Rate, LogNormalVol, NormalVol, ParSpread, IsdaSpread, Upfront, Index, Ratio, Delta, PoolFactor, InflationAssumption, DirtyPrice, PrincipalWriteOff, InterestDeferred, InterestShortfall
        /// </summary>
        /// <value>The available values are: Price, Spread, Rate, LogNormalVol, NormalVol, ParSpread, IsdaSpread, Upfront, Index, Ratio, Delta, PoolFactor, InflationAssumption, DirtyPrice, PrincipalWriteOff, InterestDeferred, InterestShortfall</value>
        [DataMember(Name = "quoteType", IsRequired = true, EmitDefaultValue = true)]
        public QuoteTypeEnum QuoteType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="MarketDataKeyRule" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected MarketDataKeyRule() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="MarketDataKeyRule" /> class.
        /// </summary>
        /// <param name="key">A dot-separated string that defines a pattern for matching market data dependencies.  The form of the string depends on the type of the dependency; see below for basic types and the Knowledge Base for further info.  Quote lookup: \&quot;Quote.{CodeType}.*\&quot; e.g. \&quot;Quote.RIC.*\&quot; refers to &#39;any RIC quote&#39;  Fx rates: \&quot;Fx.CurrencyPair.*\&quot;, which refers to &#39;any FX rate&#39;  Discounting curves: \&quot;Rates.{Currency}.{Currency}OIS e.g. \&quot;Rates.USD.USDOIS\&quot; refers to the OIS USD discounting curve                For non-fx and non-quote rules, trailing parameters can be replaced by the wildcard character &#39;*&#39;.  e.g. \&quot;Rates.*.*\&quot; matches any dependency on a discounting curve. (required).</param>
        /// <param name="supplier">The market data supplier (where the data comes from) (required).</param>
        /// <param name="dataScope">The scope in which the data should be found when using this rule. (required).</param>
        /// <param name="quoteType">The available values are: Price, Spread, Rate, LogNormalVol, NormalVol, ParSpread, IsdaSpread, Upfront, Index, Ratio, Delta, PoolFactor, InflationAssumption, DirtyPrice, PrincipalWriteOff, InterestDeferred, InterestShortfall (required).</param>
        /// <param name="field">The conceptual qualification for the field, typically &#39;bid&#39;, &#39;mid&#39; (default), or &#39;ask&#39;, but can also be &#39;open&#39;, &#39;close&#39;, etc.  When resolving quotes from LUSID&#39;s database, only quotes whose Field is identical to the Field specified here  will be accepted as market data.  When resolving data from an external supplier, the Field must be one of a defined set for the given supplier.                Note: Applies to the retrieval of quotes only. Has no impact on the resolution of complex market data..</param>
        /// <param name="quoteInterval">Shorthand for the time interval used to select market data. This must be a dot-separated string              nominating a start and end date, for example &#39;5D.0D&#39; to look back 5 days from today (0 days ago). The syntax              is &lt;i&gt;int&lt;/i&gt;&lt;i&gt;char&lt;/i&gt;.&lt;i&gt;int&lt;/i&gt;&lt;i&gt;char&lt;/i&gt;, where &lt;i&gt;char&lt;/i&gt; is one of              D(ay), Bd(business day), W(eek), M(onth) or Y(ear).              Business days are calculated using the calendars specified on the Valuation Request.              If no calendar is provided in the request, then it will default to only skipping weekends.              For example, if the valuation date is a Monday, then a quote interval of \&quot;1Bd\&quot; would behave as \&quot;3D\&quot;,              looking back to the Friday. Data with effectiveAt on the weekend will still be found in that window..</param>
        /// <param name="asAt">The AsAt predicate specification..</param>
        /// <param name="priceSource">The source of the quote. For a given provider/supplier of market data there may be an additional qualifier, e.g. the exchange or bank that provided the quote.</param>
        /// <param name="mask">Allows for partial or complete override of the market asset resolved for a dependency  Either a named override or a dot separated string (A.B.C.D.*).  e.g. for Rates curve &#39;EUR.*&#39; will replace the resolve MarketAsset &#39;GBP/12M&#39;, &#39;GBP/3M&#39; with the EUR equivalent, if there  are no wildcards in the mask, the mask is taken as the MarketAsset for any dependency matching the rule..</param>
        /// <param name="sourceSystem">If set, this parameter will seek an external source of market data.  Optional and, if omitted, will default to \&quot;Lusid\&quot;.  This means that data will be retrieved from the LUSID Quote Store and LUSID Complex Market Data Store.                This can be set to \&quot;MarketDataOverrides\&quot; if Supplier is set to \&quot;Client\&quot;..</param>
        /// <param name="fallThroughOnAccessDenied">When a user attempts to use a rule to access data to which they are not entitled,  the rule will fail to resolve any market data.  By default, such an access denied failure will stop any further attempts to resolve market data.  This is so that differently entitled users always receive the same market data from market data resolution,  if they have sufficient entitlements to retrieve the required data.  If set to true, then an access denied failure will not stop further market data resolution,  and resolution will continue with the next specified MarketDataKeyRule.  Optional, and defaults to false..</param>
        public MarketDataKeyRule(string key = default(string), string supplier = default(string), string dataScope = default(string), QuoteTypeEnum quoteType = default(QuoteTypeEnum), string field = default(string), string quoteInterval = default(string), DateTimeOffset? asAt = default(DateTimeOffset?), string priceSource = default(string), string mask = default(string), string sourceSystem = default(string), bool fallThroughOnAccessDenied = default(bool))
        {
            // to ensure "key" is required (not null)
            if (key == null)
            {
                throw new ArgumentNullException("key is a required property for MarketDataKeyRule and cannot be null");
            }
            this.Key = key;
            // to ensure "supplier" is required (not null)
            if (supplier == null)
            {
                throw new ArgumentNullException("supplier is a required property for MarketDataKeyRule and cannot be null");
            }
            this.Supplier = supplier;
            // to ensure "dataScope" is required (not null)
            if (dataScope == null)
            {
                throw new ArgumentNullException("dataScope is a required property for MarketDataKeyRule and cannot be null");
            }
            this.DataScope = dataScope;
            this.QuoteType = quoteType;
            this.Field = field;
            this.QuoteInterval = quoteInterval;
            this.AsAt = asAt;
            this.PriceSource = priceSource;
            this.Mask = mask;
            this.SourceSystem = sourceSystem;
            this.FallThroughOnAccessDenied = fallThroughOnAccessDenied;
        }

        /// <summary>
        /// A dot-separated string that defines a pattern for matching market data dependencies.  The form of the string depends on the type of the dependency; see below for basic types and the Knowledge Base for further info.  Quote lookup: \&quot;Quote.{CodeType}.*\&quot; e.g. \&quot;Quote.RIC.*\&quot; refers to &#39;any RIC quote&#39;  Fx rates: \&quot;Fx.CurrencyPair.*\&quot;, which refers to &#39;any FX rate&#39;  Discounting curves: \&quot;Rates.{Currency}.{Currency}OIS e.g. \&quot;Rates.USD.USDOIS\&quot; refers to the OIS USD discounting curve                For non-fx and non-quote rules, trailing parameters can be replaced by the wildcard character &#39;*&#39;.  e.g. \&quot;Rates.*.*\&quot; matches any dependency on a discounting curve.
        /// </summary>
        /// <value>A dot-separated string that defines a pattern for matching market data dependencies.  The form of the string depends on the type of the dependency; see below for basic types and the Knowledge Base for further info.  Quote lookup: \&quot;Quote.{CodeType}.*\&quot; e.g. \&quot;Quote.RIC.*\&quot; refers to &#39;any RIC quote&#39;  Fx rates: \&quot;Fx.CurrencyPair.*\&quot;, which refers to &#39;any FX rate&#39;  Discounting curves: \&quot;Rates.{Currency}.{Currency}OIS e.g. \&quot;Rates.USD.USDOIS\&quot; refers to the OIS USD discounting curve                For non-fx and non-quote rules, trailing parameters can be replaced by the wildcard character &#39;*&#39;.  e.g. \&quot;Rates.*.*\&quot; matches any dependency on a discounting curve.</value>
        [DataMember(Name = "key", IsRequired = true, EmitDefaultValue = true)]
        public string Key { get; set; }

        /// <summary>
        /// The market data supplier (where the data comes from)
        /// </summary>
        /// <value>The market data supplier (where the data comes from)</value>
        [DataMember(Name = "supplier", IsRequired = true, EmitDefaultValue = true)]
        public string Supplier { get; set; }

        /// <summary>
        /// The scope in which the data should be found when using this rule.
        /// </summary>
        /// <value>The scope in which the data should be found when using this rule.</value>
        [DataMember(Name = "dataScope", IsRequired = true, EmitDefaultValue = true)]
        public string DataScope { get; set; }

        /// <summary>
        /// The conceptual qualification for the field, typically &#39;bid&#39;, &#39;mid&#39; (default), or &#39;ask&#39;, but can also be &#39;open&#39;, &#39;close&#39;, etc.  When resolving quotes from LUSID&#39;s database, only quotes whose Field is identical to the Field specified here  will be accepted as market data.  When resolving data from an external supplier, the Field must be one of a defined set for the given supplier.                Note: Applies to the retrieval of quotes only. Has no impact on the resolution of complex market data.
        /// </summary>
        /// <value>The conceptual qualification for the field, typically &#39;bid&#39;, &#39;mid&#39; (default), or &#39;ask&#39;, but can also be &#39;open&#39;, &#39;close&#39;, etc.  When resolving quotes from LUSID&#39;s database, only quotes whose Field is identical to the Field specified here  will be accepted as market data.  When resolving data from an external supplier, the Field must be one of a defined set for the given supplier.                Note: Applies to the retrieval of quotes only. Has no impact on the resolution of complex market data.</value>
        [DataMember(Name = "field", EmitDefaultValue = true)]
        public string Field { get; set; }

        /// <summary>
        /// Shorthand for the time interval used to select market data. This must be a dot-separated string              nominating a start and end date, for example &#39;5D.0D&#39; to look back 5 days from today (0 days ago). The syntax              is &lt;i&gt;int&lt;/i&gt;&lt;i&gt;char&lt;/i&gt;.&lt;i&gt;int&lt;/i&gt;&lt;i&gt;char&lt;/i&gt;, where &lt;i&gt;char&lt;/i&gt; is one of              D(ay), Bd(business day), W(eek), M(onth) or Y(ear).              Business days are calculated using the calendars specified on the Valuation Request.              If no calendar is provided in the request, then it will default to only skipping weekends.              For example, if the valuation date is a Monday, then a quote interval of \&quot;1Bd\&quot; would behave as \&quot;3D\&quot;,              looking back to the Friday. Data with effectiveAt on the weekend will still be found in that window.
        /// </summary>
        /// <value>Shorthand for the time interval used to select market data. This must be a dot-separated string              nominating a start and end date, for example &#39;5D.0D&#39; to look back 5 days from today (0 days ago). The syntax              is &lt;i&gt;int&lt;/i&gt;&lt;i&gt;char&lt;/i&gt;.&lt;i&gt;int&lt;/i&gt;&lt;i&gt;char&lt;/i&gt;, where &lt;i&gt;char&lt;/i&gt; is one of              D(ay), Bd(business day), W(eek), M(onth) or Y(ear).              Business days are calculated using the calendars specified on the Valuation Request.              If no calendar is provided in the request, then it will default to only skipping weekends.              For example, if the valuation date is a Monday, then a quote interval of \&quot;1Bd\&quot; would behave as \&quot;3D\&quot;,              looking back to the Friday. Data with effectiveAt on the weekend will still be found in that window.</value>
        [DataMember(Name = "quoteInterval", EmitDefaultValue = true)]
        public string QuoteInterval { get; set; }

        /// <summary>
        /// The AsAt predicate specification.
        /// </summary>
        /// <value>The AsAt predicate specification.</value>
        [DataMember(Name = "asAt", EmitDefaultValue = true)]
        public DateTimeOffset? AsAt { get; set; }

        /// <summary>
        /// The source of the quote. For a given provider/supplier of market data there may be an additional qualifier, e.g. the exchange or bank that provided the quote
        /// </summary>
        /// <value>The source of the quote. For a given provider/supplier of market data there may be an additional qualifier, e.g. the exchange or bank that provided the quote</value>
        [DataMember(Name = "priceSource", EmitDefaultValue = true)]
        public string PriceSource { get; set; }

        /// <summary>
        /// Allows for partial or complete override of the market asset resolved for a dependency  Either a named override or a dot separated string (A.B.C.D.*).  e.g. for Rates curve &#39;EUR.*&#39; will replace the resolve MarketAsset &#39;GBP/12M&#39;, &#39;GBP/3M&#39; with the EUR equivalent, if there  are no wildcards in the mask, the mask is taken as the MarketAsset for any dependency matching the rule.
        /// </summary>
        /// <value>Allows for partial or complete override of the market asset resolved for a dependency  Either a named override or a dot separated string (A.B.C.D.*).  e.g. for Rates curve &#39;EUR.*&#39; will replace the resolve MarketAsset &#39;GBP/12M&#39;, &#39;GBP/3M&#39; with the EUR equivalent, if there  are no wildcards in the mask, the mask is taken as the MarketAsset for any dependency matching the rule.</value>
        [DataMember(Name = "mask", EmitDefaultValue = true)]
        public string Mask { get; set; }

        /// <summary>
        /// If set, this parameter will seek an external source of market data.  Optional and, if omitted, will default to \&quot;Lusid\&quot;.  This means that data will be retrieved from the LUSID Quote Store and LUSID Complex Market Data Store.                This can be set to \&quot;MarketDataOverrides\&quot; if Supplier is set to \&quot;Client\&quot;.
        /// </summary>
        /// <value>If set, this parameter will seek an external source of market data.  Optional and, if omitted, will default to \&quot;Lusid\&quot;.  This means that data will be retrieved from the LUSID Quote Store and LUSID Complex Market Data Store.                This can be set to \&quot;MarketDataOverrides\&quot; if Supplier is set to \&quot;Client\&quot;.</value>
        [DataMember(Name = "sourceSystem", EmitDefaultValue = true)]
        public string SourceSystem { get; set; }

        /// <summary>
        /// When a user attempts to use a rule to access data to which they are not entitled,  the rule will fail to resolve any market data.  By default, such an access denied failure will stop any further attempts to resolve market data.  This is so that differently entitled users always receive the same market data from market data resolution,  if they have sufficient entitlements to retrieve the required data.  If set to true, then an access denied failure will not stop further market data resolution,  and resolution will continue with the next specified MarketDataKeyRule.  Optional, and defaults to false.
        /// </summary>
        /// <value>When a user attempts to use a rule to access data to which they are not entitled,  the rule will fail to resolve any market data.  By default, such an access denied failure will stop any further attempts to resolve market data.  This is so that differently entitled users always receive the same market data from market data resolution,  if they have sufficient entitlements to retrieve the required data.  If set to true, then an access denied failure will not stop further market data resolution,  and resolution will continue with the next specified MarketDataKeyRule.  Optional, and defaults to false.</value>
        [DataMember(Name = "fallThroughOnAccessDenied", EmitDefaultValue = true)]
        public bool FallThroughOnAccessDenied { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class MarketDataKeyRule {\n");
            sb.Append("  Key: ").Append(Key).Append("\n");
            sb.Append("  Supplier: ").Append(Supplier).Append("\n");
            sb.Append("  DataScope: ").Append(DataScope).Append("\n");
            sb.Append("  QuoteType: ").Append(QuoteType).Append("\n");
            sb.Append("  Field: ").Append(Field).Append("\n");
            sb.Append("  QuoteInterval: ").Append(QuoteInterval).Append("\n");
            sb.Append("  AsAt: ").Append(AsAt).Append("\n");
            sb.Append("  PriceSource: ").Append(PriceSource).Append("\n");
            sb.Append("  Mask: ").Append(Mask).Append("\n");
            sb.Append("  SourceSystem: ").Append(SourceSystem).Append("\n");
            sb.Append("  FallThroughOnAccessDenied: ").Append(FallThroughOnAccessDenied).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as MarketDataKeyRule);
        }

        /// <summary>
        /// Returns true if MarketDataKeyRule instances are equal
        /// </summary>
        /// <param name="input">Instance of MarketDataKeyRule to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MarketDataKeyRule input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Key == input.Key ||
                    (this.Key != null &&
                    this.Key.Equals(input.Key))
                ) && 
                (
                    this.Supplier == input.Supplier ||
                    (this.Supplier != null &&
                    this.Supplier.Equals(input.Supplier))
                ) && 
                (
                    this.DataScope == input.DataScope ||
                    (this.DataScope != null &&
                    this.DataScope.Equals(input.DataScope))
                ) && 
                (
                    this.QuoteType == input.QuoteType ||
                    this.QuoteType.Equals(input.QuoteType)
                ) && 
                (
                    this.Field == input.Field ||
                    (this.Field != null &&
                    this.Field.Equals(input.Field))
                ) && 
                (
                    this.QuoteInterval == input.QuoteInterval ||
                    (this.QuoteInterval != null &&
                    this.QuoteInterval.Equals(input.QuoteInterval))
                ) && 
                (
                    this.AsAt == input.AsAt ||
                    (this.AsAt != null &&
                    this.AsAt.Equals(input.AsAt))
                ) && 
                (
                    this.PriceSource == input.PriceSource ||
                    (this.PriceSource != null &&
                    this.PriceSource.Equals(input.PriceSource))
                ) && 
                (
                    this.Mask == input.Mask ||
                    (this.Mask != null &&
                    this.Mask.Equals(input.Mask))
                ) && 
                (
                    this.SourceSystem == input.SourceSystem ||
                    (this.SourceSystem != null &&
                    this.SourceSystem.Equals(input.SourceSystem))
                ) && 
                (
                    this.FallThroughOnAccessDenied == input.FallThroughOnAccessDenied ||
                    this.FallThroughOnAccessDenied.Equals(input.FallThroughOnAccessDenied)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Key != null)
                {
                    hashCode = (hashCode * 59) + this.Key.GetHashCode();
                }
                if (this.Supplier != null)
                {
                    hashCode = (hashCode * 59) + this.Supplier.GetHashCode();
                }
                if (this.DataScope != null)
                {
                    hashCode = (hashCode * 59) + this.DataScope.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.QuoteType.GetHashCode();
                if (this.Field != null)
                {
                    hashCode = (hashCode * 59) + this.Field.GetHashCode();
                }
                if (this.QuoteInterval != null)
                {
                    hashCode = (hashCode * 59) + this.QuoteInterval.GetHashCode();
                }
                if (this.AsAt != null)
                {
                    hashCode = (hashCode * 59) + this.AsAt.GetHashCode();
                }
                if (this.PriceSource != null)
                {
                    hashCode = (hashCode * 59) + this.PriceSource.GetHashCode();
                }
                if (this.Mask != null)
                {
                    hashCode = (hashCode * 59) + this.Mask.GetHashCode();
                }
                if (this.SourceSystem != null)
                {
                    hashCode = (hashCode * 59) + this.SourceSystem.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.FallThroughOnAccessDenied.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Key (string) maxLength
            if (this.Key != null && this.Key.Length > 128)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Key, length must be less than 128.", new [] { "Key" });
            }

            // Key (string) minLength
            if (this.Key != null && this.Key.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Key, length must be greater than 0.", new [] { "Key" });
            }

            // Supplier (string) maxLength
            if (this.Supplier != null && this.Supplier.Length > 32)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Supplier, length must be less than 32.", new [] { "Supplier" });
            }

            // Supplier (string) minLength
            if (this.Supplier != null && this.Supplier.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Supplier, length must be greater than 0.", new [] { "Supplier" });
            }

            // DataScope (string) maxLength
            if (this.DataScope != null && this.DataScope.Length > 256)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for DataScope, length must be less than 256.", new [] { "DataScope" });
            }

            // DataScope (string) minLength
            if (this.DataScope != null && this.DataScope.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for DataScope, length must be greater than 1.", new [] { "DataScope" });
            }

            // DataScope (string) pattern
            Regex regexDataScope = new Regex(@"^[a-zA-Z0-9\-_]+$", RegexOptions.CultureInvariant);
            if (false == regexDataScope.Match(this.DataScope).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for DataScope, must match a pattern of " + regexDataScope, new [] { "DataScope" });
            }

            // Field (string) maxLength
            if (this.Field != null && this.Field.Length > 32)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Field, length must be less than 32.", new [] { "Field" });
            }

            // Field (string) minLength
            if (this.Field != null && this.Field.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Field, length must be greater than 0.", new [] { "Field" });
            }

            // QuoteInterval (string) maxLength
            if (this.QuoteInterval != null && this.QuoteInterval.Length > 16)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for QuoteInterval, length must be less than 16.", new [] { "QuoteInterval" });
            }

            // QuoteInterval (string) minLength
            if (this.QuoteInterval != null && this.QuoteInterval.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for QuoteInterval, length must be greater than 0.", new [] { "QuoteInterval" });
            }

            // PriceSource (string) maxLength
            if (this.PriceSource != null && this.PriceSource.Length > 256)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PriceSource, length must be less than 256.", new [] { "PriceSource" });
            }

            // PriceSource (string) minLength
            if (this.PriceSource != null && this.PriceSource.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PriceSource, length must be greater than 0.", new [] { "PriceSource" });
            }

            // Mask (string) maxLength
            if (this.Mask != null && this.Mask.Length > 256)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Mask, length must be less than 256.", new [] { "Mask" });
            }

            // Mask (string) minLength
            if (this.Mask != null && this.Mask.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Mask, length must be greater than 0.", new [] { "Mask" });
            }

            // SourceSystem (string) maxLength
            if (this.SourceSystem != null && this.SourceSystem.Length > 256)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SourceSystem, length must be less than 256.", new [] { "SourceSystem" });
            }

            // SourceSystem (string) minLength
            if (this.SourceSystem != null && this.SourceSystem.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SourceSystem, length must be greater than 0.", new [] { "SourceSystem" });
            }

            yield break;
        }
    }
}
