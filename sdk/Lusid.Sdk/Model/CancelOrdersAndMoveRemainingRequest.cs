/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Lusid.Sdk.Client.OpenAPIDateConverter;

namespace Lusid.Sdk.Model
{
    /// <summary>
    /// A request to create or update a Order.
    /// </summary>
    [DataContract(Name = "CancelOrdersAndMoveRemainingRequest")]
    public partial class CancelOrdersAndMoveRemainingRequest : IEquatable<CancelOrdersAndMoveRemainingRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CancelOrdersAndMoveRemainingRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CancelOrdersAndMoveRemainingRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CancelOrdersAndMoveRemainingRequest" /> class.
        /// </summary>
        /// <param name="cancelOrderId">cancelOrderId (required).</param>
        /// <param name="moveRemainingToOrderId">moveRemainingToOrderId (required).</param>
        /// <param name="moveRemainingToBlockId">moveRemainingToBlockId (required).</param>
        public CancelOrdersAndMoveRemainingRequest(ResourceId cancelOrderId = default(ResourceId), ResourceId moveRemainingToOrderId = default(ResourceId), ResourceId moveRemainingToBlockId = default(ResourceId))
        {
            // to ensure "cancelOrderId" is required (not null)
            if (cancelOrderId == null)
            {
                throw new ArgumentNullException("cancelOrderId is a required property for CancelOrdersAndMoveRemainingRequest and cannot be null");
            }
            this.CancelOrderId = cancelOrderId;
            // to ensure "moveRemainingToOrderId" is required (not null)
            if (moveRemainingToOrderId == null)
            {
                throw new ArgumentNullException("moveRemainingToOrderId is a required property for CancelOrdersAndMoveRemainingRequest and cannot be null");
            }
            this.MoveRemainingToOrderId = moveRemainingToOrderId;
            // to ensure "moveRemainingToBlockId" is required (not null)
            if (moveRemainingToBlockId == null)
            {
                throw new ArgumentNullException("moveRemainingToBlockId is a required property for CancelOrdersAndMoveRemainingRequest and cannot be null");
            }
            this.MoveRemainingToBlockId = moveRemainingToBlockId;
        }

        /// <summary>
        /// Gets or Sets CancelOrderId
        /// </summary>
        [DataMember(Name = "cancelOrderId", IsRequired = true, EmitDefaultValue = true)]
        public ResourceId CancelOrderId { get; set; }

        /// <summary>
        /// Gets or Sets MoveRemainingToOrderId
        /// </summary>
        [DataMember(Name = "moveRemainingToOrderId", IsRequired = true, EmitDefaultValue = true)]
        public ResourceId MoveRemainingToOrderId { get; set; }

        /// <summary>
        /// Gets or Sets MoveRemainingToBlockId
        /// </summary>
        [DataMember(Name = "moveRemainingToBlockId", IsRequired = true, EmitDefaultValue = true)]
        public ResourceId MoveRemainingToBlockId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CancelOrdersAndMoveRemainingRequest {\n");
            sb.Append("  CancelOrderId: ").Append(CancelOrderId).Append("\n");
            sb.Append("  MoveRemainingToOrderId: ").Append(MoveRemainingToOrderId).Append("\n");
            sb.Append("  MoveRemainingToBlockId: ").Append(MoveRemainingToBlockId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CancelOrdersAndMoveRemainingRequest);
        }

        /// <summary>
        /// Returns true if CancelOrdersAndMoveRemainingRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of CancelOrdersAndMoveRemainingRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CancelOrdersAndMoveRemainingRequest input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.CancelOrderId == input.CancelOrderId ||
                    (this.CancelOrderId != null &&
                    this.CancelOrderId.Equals(input.CancelOrderId))
                ) && 
                (
                    this.MoveRemainingToOrderId == input.MoveRemainingToOrderId ||
                    (this.MoveRemainingToOrderId != null &&
                    this.MoveRemainingToOrderId.Equals(input.MoveRemainingToOrderId))
                ) && 
                (
                    this.MoveRemainingToBlockId == input.MoveRemainingToBlockId ||
                    (this.MoveRemainingToBlockId != null &&
                    this.MoveRemainingToBlockId.Equals(input.MoveRemainingToBlockId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CancelOrderId != null)
                {
                    hashCode = (hashCode * 59) + this.CancelOrderId.GetHashCode();
                }
                if (this.MoveRemainingToOrderId != null)
                {
                    hashCode = (hashCode * 59) + this.MoveRemainingToOrderId.GetHashCode();
                }
                if (this.MoveRemainingToBlockId != null)
                {
                    hashCode = (hashCode * 59) + this.MoveRemainingToBlockId.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
