/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Lusid.Sdk.Client.OpenAPIDateConverter;

namespace Lusid.Sdk.Model
{
    /// <summary>
    /// Defines a change that occured for an entity
    /// </summary>
    [DataContract(Name = "ChangeInterval")]
    public partial class ChangeInterval : IEquatable<ChangeInterval>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ChangeInterval" /> class.
        /// </summary>
        /// <param name="asAtModified">The date/time of the change..</param>
        /// <param name="userIdModified">The unique identifier of the user that made the change..</param>
        /// <param name="requestIdModified">The unique identifier of the request that the changes were part of..</param>
        /// <param name="asAtVersionNumber">The version number for the entity (the entity was created at version 1). This may refer to the version number of a changed related entity, not a change for the entity itself..</param>
        /// <param name="stagedModificationIdModified">The id of the staged modification that was approved. Will be null if the change didn&#39;t come from a staged modification..</param>
        /// <param name="action">The action performed on the entity..</param>
        /// <param name="attributeName">The name of the field or property that has been changed..</param>
        /// <param name="previousValue">previousValue.</param>
        /// <param name="newValue">newValue.</param>
        /// <param name="effectiveRange">effectiveRange.</param>
        public ChangeInterval(DateTimeOffset asAtModified = default(DateTimeOffset), string userIdModified = default(string), string requestIdModified = default(string), int asAtVersionNumber = default(int), string stagedModificationIdModified = default(string), string action = default(string), string attributeName = default(string), PropertyValue previousValue = default(PropertyValue), PropertyValue newValue = default(PropertyValue), EffectiveRange effectiveRange = default(EffectiveRange))
        {
            this.AsAtModified = asAtModified;
            this.UserIdModified = userIdModified;
            this.RequestIdModified = requestIdModified;
            this.AsAtVersionNumber = asAtVersionNumber;
            this.StagedModificationIdModified = stagedModificationIdModified;
            this.Action = action;
            this.AttributeName = attributeName;
            this.PreviousValue = previousValue;
            this.NewValue = newValue;
            this.EffectiveRange = effectiveRange;
        }

        /// <summary>
        /// The date/time of the change.
        /// </summary>
        /// <value>The date/time of the change.</value>
        [DataMember(Name = "asAtModified", EmitDefaultValue = false)]
        public DateTimeOffset AsAtModified { get; set; }

        /// <summary>
        /// The unique identifier of the user that made the change.
        /// </summary>
        /// <value>The unique identifier of the user that made the change.</value>
        [DataMember(Name = "userIdModified", EmitDefaultValue = true)]
        public string UserIdModified { get; set; }

        /// <summary>
        /// The unique identifier of the request that the changes were part of.
        /// </summary>
        /// <value>The unique identifier of the request that the changes were part of.</value>
        [DataMember(Name = "requestIdModified", EmitDefaultValue = true)]
        public string RequestIdModified { get; set; }

        /// <summary>
        /// The version number for the entity (the entity was created at version 1). This may refer to the version number of a changed related entity, not a change for the entity itself.
        /// </summary>
        /// <value>The version number for the entity (the entity was created at version 1). This may refer to the version number of a changed related entity, not a change for the entity itself.</value>
        [DataMember(Name = "asAtVersionNumber", EmitDefaultValue = true)]
        public int AsAtVersionNumber { get; set; }

        /// <summary>
        /// The id of the staged modification that was approved. Will be null if the change didn&#39;t come from a staged modification.
        /// </summary>
        /// <value>The id of the staged modification that was approved. Will be null if the change didn&#39;t come from a staged modification.</value>
        [DataMember(Name = "stagedModificationIdModified", EmitDefaultValue = true)]
        public string StagedModificationIdModified { get; set; }

        /// <summary>
        /// The action performed on the entity.
        /// </summary>
        /// <value>The action performed on the entity.</value>
        [DataMember(Name = "action", EmitDefaultValue = true)]
        public string Action { get; set; }

        /// <summary>
        /// The name of the field or property that has been changed.
        /// </summary>
        /// <value>The name of the field or property that has been changed.</value>
        [DataMember(Name = "attributeName", EmitDefaultValue = true)]
        public string AttributeName { get; set; }

        /// <summary>
        /// Gets or Sets PreviousValue
        /// </summary>
        [DataMember(Name = "previousValue", EmitDefaultValue = false)]
        public PropertyValue PreviousValue { get; set; }

        /// <summary>
        /// Gets or Sets NewValue
        /// </summary>
        [DataMember(Name = "newValue", EmitDefaultValue = false)]
        public PropertyValue NewValue { get; set; }

        /// <summary>
        /// Gets or Sets EffectiveRange
        /// </summary>
        [DataMember(Name = "effectiveRange", EmitDefaultValue = false)]
        public EffectiveRange EffectiveRange { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ChangeInterval {\n");
            sb.Append("  AsAtModified: ").Append(AsAtModified).Append("\n");
            sb.Append("  UserIdModified: ").Append(UserIdModified).Append("\n");
            sb.Append("  RequestIdModified: ").Append(RequestIdModified).Append("\n");
            sb.Append("  AsAtVersionNumber: ").Append(AsAtVersionNumber).Append("\n");
            sb.Append("  StagedModificationIdModified: ").Append(StagedModificationIdModified).Append("\n");
            sb.Append("  Action: ").Append(Action).Append("\n");
            sb.Append("  AttributeName: ").Append(AttributeName).Append("\n");
            sb.Append("  PreviousValue: ").Append(PreviousValue).Append("\n");
            sb.Append("  NewValue: ").Append(NewValue).Append("\n");
            sb.Append("  EffectiveRange: ").Append(EffectiveRange).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ChangeInterval);
        }

        /// <summary>
        /// Returns true if ChangeInterval instances are equal
        /// </summary>
        /// <param name="input">Instance of ChangeInterval to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ChangeInterval input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.AsAtModified == input.AsAtModified ||
                    (this.AsAtModified != null &&
                    this.AsAtModified.Equals(input.AsAtModified))
                ) && 
                (
                    this.UserIdModified == input.UserIdModified ||
                    (this.UserIdModified != null &&
                    this.UserIdModified.Equals(input.UserIdModified))
                ) && 
                (
                    this.RequestIdModified == input.RequestIdModified ||
                    (this.RequestIdModified != null &&
                    this.RequestIdModified.Equals(input.RequestIdModified))
                ) && 
                (
                    this.AsAtVersionNumber == input.AsAtVersionNumber ||
                    this.AsAtVersionNumber.Equals(input.AsAtVersionNumber)
                ) && 
                (
                    this.StagedModificationIdModified == input.StagedModificationIdModified ||
                    (this.StagedModificationIdModified != null &&
                    this.StagedModificationIdModified.Equals(input.StagedModificationIdModified))
                ) && 
                (
                    this.Action == input.Action ||
                    (this.Action != null &&
                    this.Action.Equals(input.Action))
                ) && 
                (
                    this.AttributeName == input.AttributeName ||
                    (this.AttributeName != null &&
                    this.AttributeName.Equals(input.AttributeName))
                ) && 
                (
                    this.PreviousValue == input.PreviousValue ||
                    (this.PreviousValue != null &&
                    this.PreviousValue.Equals(input.PreviousValue))
                ) && 
                (
                    this.NewValue == input.NewValue ||
                    (this.NewValue != null &&
                    this.NewValue.Equals(input.NewValue))
                ) && 
                (
                    this.EffectiveRange == input.EffectiveRange ||
                    (this.EffectiveRange != null &&
                    this.EffectiveRange.Equals(input.EffectiveRange))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AsAtModified != null)
                {
                    hashCode = (hashCode * 59) + this.AsAtModified.GetHashCode();
                }
                if (this.UserIdModified != null)
                {
                    hashCode = (hashCode * 59) + this.UserIdModified.GetHashCode();
                }
                if (this.RequestIdModified != null)
                {
                    hashCode = (hashCode * 59) + this.RequestIdModified.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.AsAtVersionNumber.GetHashCode();
                if (this.StagedModificationIdModified != null)
                {
                    hashCode = (hashCode * 59) + this.StagedModificationIdModified.GetHashCode();
                }
                if (this.Action != null)
                {
                    hashCode = (hashCode * 59) + this.Action.GetHashCode();
                }
                if (this.AttributeName != null)
                {
                    hashCode = (hashCode * 59) + this.AttributeName.GetHashCode();
                }
                if (this.PreviousValue != null)
                {
                    hashCode = (hashCode * 59) + this.PreviousValue.GetHashCode();
                }
                if (this.NewValue != null)
                {
                    hashCode = (hashCode * 59) + this.NewValue.GetHashCode();
                }
                if (this.EffectiveRange != null)
                {
                    hashCode = (hashCode * 59) + this.EffectiveRange.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
