/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Lusid.Sdk.Client.OpenAPIDateConverter;

namespace Lusid.Sdk.Model
{
    /// <summary>
    /// ContributionToNonPassingRuleDetail
    /// </summary>
    [DataContract(Name = "ContributionToNonPassingRuleDetail")]
    public partial class ContributionToNonPassingRuleDetail : IEquatable<ContributionToNonPassingRuleDetail>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ContributionToNonPassingRuleDetail" /> class.
        /// </summary>
        /// <param name="ruleId">ruleId.</param>
        /// <param name="ruleStatus">The status of the non-passing rule..</param>
        /// <param name="breachTaskIds">The task ids associated with the compliance breach for this order&#39;s groups (if failing)..</param>
        /// <param name="likelyResponsibleForStatus">Whether this order is deemed as a likely contributor to the non-passing rule for this group..</param>
        public ContributionToNonPassingRuleDetail(ResourceId ruleId = default(ResourceId), string ruleStatus = default(string), List<string> breachTaskIds = default(List<string>), bool likelyResponsibleForStatus = default(bool))
        {
            this.RuleId = ruleId;
            this.RuleStatus = ruleStatus;
            this.BreachTaskIds = breachTaskIds;
            this.LikelyResponsibleForStatus = likelyResponsibleForStatus;
        }

        /// <summary>
        /// Gets or Sets RuleId
        /// </summary>
        [DataMember(Name = "ruleId", EmitDefaultValue = false)]
        public ResourceId RuleId { get; set; }

        /// <summary>
        /// The status of the non-passing rule.
        /// </summary>
        /// <value>The status of the non-passing rule.</value>
        [DataMember(Name = "ruleStatus", EmitDefaultValue = true)]
        public string RuleStatus { get; set; }

        /// <summary>
        /// The task ids associated with the compliance breach for this order&#39;s groups (if failing).
        /// </summary>
        /// <value>The task ids associated with the compliance breach for this order&#39;s groups (if failing).</value>
        [DataMember(Name = "breachTaskIds", EmitDefaultValue = true)]
        public List<string> BreachTaskIds { get; set; }

        /// <summary>
        /// Whether this order is deemed as a likely contributor to the non-passing rule for this group.
        /// </summary>
        /// <value>Whether this order is deemed as a likely contributor to the non-passing rule for this group.</value>
        [DataMember(Name = "likelyResponsibleForStatus", EmitDefaultValue = true)]
        public bool LikelyResponsibleForStatus { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ContributionToNonPassingRuleDetail {\n");
            sb.Append("  RuleId: ").Append(RuleId).Append("\n");
            sb.Append("  RuleStatus: ").Append(RuleStatus).Append("\n");
            sb.Append("  BreachTaskIds: ").Append(BreachTaskIds).Append("\n");
            sb.Append("  LikelyResponsibleForStatus: ").Append(LikelyResponsibleForStatus).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ContributionToNonPassingRuleDetail);
        }

        /// <summary>
        /// Returns true if ContributionToNonPassingRuleDetail instances are equal
        /// </summary>
        /// <param name="input">Instance of ContributionToNonPassingRuleDetail to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ContributionToNonPassingRuleDetail input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.RuleId == input.RuleId ||
                    (this.RuleId != null &&
                    this.RuleId.Equals(input.RuleId))
                ) && 
                (
                    this.RuleStatus == input.RuleStatus ||
                    (this.RuleStatus != null &&
                    this.RuleStatus.Equals(input.RuleStatus))
                ) && 
                (
                    this.BreachTaskIds == input.BreachTaskIds ||
                    this.BreachTaskIds != null &&
                    input.BreachTaskIds != null &&
                    this.BreachTaskIds.SequenceEqual(input.BreachTaskIds)
                ) && 
                (
                    this.LikelyResponsibleForStatus == input.LikelyResponsibleForStatus ||
                    this.LikelyResponsibleForStatus.Equals(input.LikelyResponsibleForStatus)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.RuleId != null)
                {
                    hashCode = (hashCode * 59) + this.RuleId.GetHashCode();
                }
                if (this.RuleStatus != null)
                {
                    hashCode = (hashCode * 59) + this.RuleStatus.GetHashCode();
                }
                if (this.BreachTaskIds != null)
                {
                    hashCode = (hashCode * 59) + this.BreachTaskIds.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.LikelyResponsibleForStatus.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
