/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Lusid.Sdk.Client.OpenAPIDateConverter;

namespace Lusid.Sdk.Model
{
    /// <summary>
    /// Represents a set of diagnostics per transaction, where applicable.
    /// </summary>
    [DataContract(Name = "TransactionDiagnostics")]
    public partial class TransactionDiagnostics : IEquatable<TransactionDiagnostics>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TransactionDiagnostics" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected TransactionDiagnostics() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="TransactionDiagnostics" /> class.
        /// </summary>
        /// <param name="transactionDisplayName">transactionDisplayName (required).</param>
        /// <param name="errorDetails">errorDetails (required).</param>
        public TransactionDiagnostics(string transactionDisplayName = default(string), List<string> errorDetails = default(List<string>))
        {
            // to ensure "transactionDisplayName" is required (not null)
            if (transactionDisplayName == null)
            {
                throw new ArgumentNullException("transactionDisplayName is a required property for TransactionDiagnostics and cannot be null");
            }
            this.TransactionDisplayName = transactionDisplayName;
            // to ensure "errorDetails" is required (not null)
            if (errorDetails == null)
            {
                throw new ArgumentNullException("errorDetails is a required property for TransactionDiagnostics and cannot be null");
            }
            this.ErrorDetails = errorDetails;
        }

        /// <summary>
        /// Gets or Sets TransactionDisplayName
        /// </summary>
        [DataMember(Name = "transactionDisplayName", IsRequired = true, EmitDefaultValue = true)]
        public string TransactionDisplayName { get; set; }

        /// <summary>
        /// Gets or Sets ErrorDetails
        /// </summary>
        [DataMember(Name = "errorDetails", IsRequired = true, EmitDefaultValue = true)]
        public List<string> ErrorDetails { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class TransactionDiagnostics {\n");
            sb.Append("  TransactionDisplayName: ").Append(TransactionDisplayName).Append("\n");
            sb.Append("  ErrorDetails: ").Append(ErrorDetails).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TransactionDiagnostics);
        }

        /// <summary>
        /// Returns true if TransactionDiagnostics instances are equal
        /// </summary>
        /// <param name="input">Instance of TransactionDiagnostics to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TransactionDiagnostics input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.TransactionDisplayName == input.TransactionDisplayName ||
                    (this.TransactionDisplayName != null &&
                    this.TransactionDisplayName.Equals(input.TransactionDisplayName))
                ) && 
                (
                    this.ErrorDetails == input.ErrorDetails ||
                    this.ErrorDetails != null &&
                    input.ErrorDetails != null &&
                    this.ErrorDetails.SequenceEqual(input.ErrorDetails)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.TransactionDisplayName != null)
                {
                    hashCode = (hashCode * 59) + this.TransactionDisplayName.GetHashCode();
                }
                if (this.ErrorDetails != null)
                {
                    hashCode = (hashCode * 59) + this.ErrorDetails.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // TransactionDisplayName (string) minLength
            if (this.TransactionDisplayName != null && this.TransactionDisplayName.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for TransactionDisplayName, length must be greater than 1.", new [] { "TransactionDisplayName" });
            }

            yield break;
        }
    }
}
