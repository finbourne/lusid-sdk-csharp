/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Lusid.Sdk.Client.OpenAPIDateConverter;

namespace Lusid.Sdk.Model
{
    /// <summary>
    /// Configure the ex-dividend periods for the instrument.
    /// </summary>
    [DataContract(Name = "ExDividendConfiguration")]
    public partial class ExDividendConfiguration : IEquatable<ExDividendConfiguration>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ExDividendConfiguration" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ExDividendConfiguration() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ExDividendConfiguration" /> class.
        /// </summary>
        /// <param name="useBusinessDays">Is the ex-dividend period counted in business days or calendar days.  Defaults to false if not set..</param>
        /// <param name="exDividendDays">Number of days in the ex-dividend period.  If the settlement date falls in the ex-dividend period then the coupon paid is zero and the accrued interest is negative.  If set, this must be a non-negative number.  If not set, or set to 0, than there is no ex-dividend period. (required).</param>
        /// <param name="returnNegativeAccrued">Does the accrued interest go negative in the ex-dividend period, or does it go to zero.  Defaults to true if not set..</param>
        /// <param name="applyThirty360PayDelay">Set this flag to true if the ex-dividend days represent a pay delay from the accrual end date in calendar  days under the 30/360 day count convention. The typical use case for this flag are Mortgage Backed Securities  with pay delay between 1 and 60 days, such as FreddieMac and FannieMae. If this flag is set, the useBusinessDays  setting will be ignored.  Defaults to false if not provided..</param>
        public ExDividendConfiguration(bool useBusinessDays = default(bool), int exDividendDays = default(int), bool returnNegativeAccrued = default(bool), bool applyThirty360PayDelay = default(bool))
        {
            this.ExDividendDays = exDividendDays;
            this.UseBusinessDays = useBusinessDays;
            this.ReturnNegativeAccrued = returnNegativeAccrued;
            this.ApplyThirty360PayDelay = applyThirty360PayDelay;
        }

        /// <summary>
        /// Is the ex-dividend period counted in business days or calendar days.  Defaults to false if not set.
        /// </summary>
        /// <value>Is the ex-dividend period counted in business days or calendar days.  Defaults to false if not set.</value>
        [DataMember(Name = "useBusinessDays", EmitDefaultValue = true)]
        public bool UseBusinessDays { get; set; }

        /// <summary>
        /// Number of days in the ex-dividend period.  If the settlement date falls in the ex-dividend period then the coupon paid is zero and the accrued interest is negative.  If set, this must be a non-negative number.  If not set, or set to 0, than there is no ex-dividend period.
        /// </summary>
        /// <value>Number of days in the ex-dividend period.  If the settlement date falls in the ex-dividend period then the coupon paid is zero and the accrued interest is negative.  If set, this must be a non-negative number.  If not set, or set to 0, than there is no ex-dividend period.</value>
        [DataMember(Name = "exDividendDays", IsRequired = true, EmitDefaultValue = true)]
        public int ExDividendDays { get; set; }

        /// <summary>
        /// Does the accrued interest go negative in the ex-dividend period, or does it go to zero.  Defaults to true if not set.
        /// </summary>
        /// <value>Does the accrued interest go negative in the ex-dividend period, or does it go to zero.  Defaults to true if not set.</value>
        [DataMember(Name = "returnNegativeAccrued", EmitDefaultValue = true)]
        public bool ReturnNegativeAccrued { get; set; }

        /// <summary>
        /// Set this flag to true if the ex-dividend days represent a pay delay from the accrual end date in calendar  days under the 30/360 day count convention. The typical use case for this flag are Mortgage Backed Securities  with pay delay between 1 and 60 days, such as FreddieMac and FannieMae. If this flag is set, the useBusinessDays  setting will be ignored.  Defaults to false if not provided.
        /// </summary>
        /// <value>Set this flag to true if the ex-dividend days represent a pay delay from the accrual end date in calendar  days under the 30/360 day count convention. The typical use case for this flag are Mortgage Backed Securities  with pay delay between 1 and 60 days, such as FreddieMac and FannieMae. If this flag is set, the useBusinessDays  setting will be ignored.  Defaults to false if not provided.</value>
        [DataMember(Name = "applyThirty360PayDelay", EmitDefaultValue = true)]
        public bool ApplyThirty360PayDelay { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ExDividendConfiguration {\n");
            sb.Append("  UseBusinessDays: ").Append(UseBusinessDays).Append("\n");
            sb.Append("  ExDividendDays: ").Append(ExDividendDays).Append("\n");
            sb.Append("  ReturnNegativeAccrued: ").Append(ReturnNegativeAccrued).Append("\n");
            sb.Append("  ApplyThirty360PayDelay: ").Append(ApplyThirty360PayDelay).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ExDividendConfiguration);
        }

        /// <summary>
        /// Returns true if ExDividendConfiguration instances are equal
        /// </summary>
        /// <param name="input">Instance of ExDividendConfiguration to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ExDividendConfiguration input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.UseBusinessDays == input.UseBusinessDays ||
                    this.UseBusinessDays.Equals(input.UseBusinessDays)
                ) && 
                (
                    this.ExDividendDays == input.ExDividendDays ||
                    this.ExDividendDays.Equals(input.ExDividendDays)
                ) && 
                (
                    this.ReturnNegativeAccrued == input.ReturnNegativeAccrued ||
                    this.ReturnNegativeAccrued.Equals(input.ReturnNegativeAccrued)
                ) && 
                (
                    this.ApplyThirty360PayDelay == input.ApplyThirty360PayDelay ||
                    this.ApplyThirty360PayDelay.Equals(input.ApplyThirty360PayDelay)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.UseBusinessDays.GetHashCode();
                hashCode = (hashCode * 59) + this.ExDividendDays.GetHashCode();
                hashCode = (hashCode * 59) + this.ReturnNegativeAccrued.GetHashCode();
                hashCode = (hashCode * 59) + this.ApplyThirty360PayDelay.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
