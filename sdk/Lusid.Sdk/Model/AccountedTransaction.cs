/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Lusid.Sdk.Client.OpenAPIDateConverter;

namespace Lusid.Sdk.Model
{
    /// <summary>
    /// The Valuation Point Data Response for the Fund and specified date.
    /// </summary>
    [DataContract(Name = "AccountedTransaction")]
    public partial class AccountedTransaction : IEquatable<AccountedTransaction>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AccountedTransaction" /> class.
        /// </summary>
        /// <param name="accountingDate">The transaction&#39;s accounting date..</param>
        /// <param name="journalEntryAction">The journal entry line action associated with this transaction..</param>
        /// <param name="transaction">transaction.</param>
        /// <param name="portfolioId">portfolioId.</param>
        public AccountedTransaction(DateTimeOffset accountingDate = default(DateTimeOffset), string journalEntryAction = default(string), OutputTransaction transaction = default(OutputTransaction), PortfolioId portfolioId = default(PortfolioId))
        {
            this.AccountingDate = accountingDate;
            this.JournalEntryAction = journalEntryAction;
            this.Transaction = transaction;
            this.PortfolioId = portfolioId;
        }

        /// <summary>
        /// The transaction&#39;s accounting date.
        /// </summary>
        /// <value>The transaction&#39;s accounting date.</value>
        [DataMember(Name = "accountingDate", EmitDefaultValue = false)]
        public DateTimeOffset AccountingDate { get; set; }

        /// <summary>
        /// The journal entry line action associated with this transaction.
        /// </summary>
        /// <value>The journal entry line action associated with this transaction.</value>
        [DataMember(Name = "journalEntryAction", EmitDefaultValue = true)]
        public string JournalEntryAction { get; set; }

        /// <summary>
        /// Gets or Sets Transaction
        /// </summary>
        [DataMember(Name = "transaction", EmitDefaultValue = false)]
        public OutputTransaction Transaction { get; set; }

        /// <summary>
        /// Gets or Sets PortfolioId
        /// </summary>
        [DataMember(Name = "portfolioId", EmitDefaultValue = false)]
        public PortfolioId PortfolioId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AccountedTransaction {\n");
            sb.Append("  AccountingDate: ").Append(AccountingDate).Append("\n");
            sb.Append("  JournalEntryAction: ").Append(JournalEntryAction).Append("\n");
            sb.Append("  Transaction: ").Append(Transaction).Append("\n");
            sb.Append("  PortfolioId: ").Append(PortfolioId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AccountedTransaction);
        }

        /// <summary>
        /// Returns true if AccountedTransaction instances are equal
        /// </summary>
        /// <param name="input">Instance of AccountedTransaction to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AccountedTransaction input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.AccountingDate == input.AccountingDate ||
                    (this.AccountingDate != null &&
                    this.AccountingDate.Equals(input.AccountingDate))
                ) && 
                (
                    this.JournalEntryAction == input.JournalEntryAction ||
                    (this.JournalEntryAction != null &&
                    this.JournalEntryAction.Equals(input.JournalEntryAction))
                ) && 
                (
                    this.Transaction == input.Transaction ||
                    (this.Transaction != null &&
                    this.Transaction.Equals(input.Transaction))
                ) && 
                (
                    this.PortfolioId == input.PortfolioId ||
                    (this.PortfolioId != null &&
                    this.PortfolioId.Equals(input.PortfolioId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AccountingDate != null)
                {
                    hashCode = (hashCode * 59) + this.AccountingDate.GetHashCode();
                }
                if (this.JournalEntryAction != null)
                {
                    hashCode = (hashCode * 59) + this.JournalEntryAction.GetHashCode();
                }
                if (this.Transaction != null)
                {
                    hashCode = (hashCode * 59) + this.Transaction.GetHashCode();
                }
                if (this.PortfolioId != null)
                {
                    hashCode = (hashCode * 59) + this.PortfolioId.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
