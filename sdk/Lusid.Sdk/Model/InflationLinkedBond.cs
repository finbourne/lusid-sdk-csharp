/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using JsonSubTypes;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Lusid.Sdk.Client.OpenAPIDateConverter;

namespace Lusid.Sdk.Model
{
    /// <summary>
    /// Inflation Linked Bond.
    /// </summary>
    [DataContract(Name = "InflationLinkedBond")]
    [JsonConverter(typeof(JsonSubtypes), "InstrumentType")]
    public partial class InflationLinkedBond : LusidInstrument, IEquatable<InflationLinkedBond>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InflationLinkedBond" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected InflationLinkedBond() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="InflationLinkedBond" /> class.
        /// </summary>
        /// <param name="startDate">The start date of the bond. (required).</param>
        /// <param name="maturityDate">The final maturity date of the instrument. This means the last date on which the instruments makes a payment of any amount.  For the avoidance of doubt, that is not necessarily prior to its last sensitivity date for the purposes of risk; e.g. instruments such as  Constant Maturity Swaps (CMS) often have sensitivities to rates that may well be observed or set prior to the maturity date, but refer to a termination date beyond it. (required).</param>
        /// <param name="flowConventions">flowConventions (required).</param>
        /// <param name="inflationIndexConventions">inflationIndexConventions (required).</param>
        /// <param name="couponRate">Simple coupon rate. (required).</param>
        /// <param name="identifiers">External market codes and identifiers for the bond, e.g. ISIN..</param>
        /// <param name="baseCPI">BaseCPI value. This is optional, if not provided the BaseCPI value will be calculated from the BaseCPIDate,  if that too is not present the StartDate will be used.                If provided then this value will always set the BaseCPI on this bond.                The BaseCPI of an inflation linked bond is calculated using the following logic:  - If a BaseCPI value is provided, this is used.  - Otherwise, if BaseCPIDate is provided, the CPI for this date is calculated and used.  - Otherwise, the CPI for the StartDate is calculated and used.                Note that if both BaseCPI and BaseCPIDate are set, the BaseCPI value will be used and the BaseCPIDate  will be ignored but can still be added for informative purposes.                Some bonds are issued with a BaseCPI date that does not correspond to the StartDate CPI value, in this  case the value should be provided here or with the BaseCPIDate..</param>
        /// <param name="baseCPIDate">BaseCPIDate. This is optional. Gives the date that the BaseCPI is calculated for.                Note this is an un-lagged date (similar to StartDate) so the Bond ObservationLag will  be applied to this date when calculating the CPI.                The BaseCPI of an inflation linked bond is calculated using the following logic:  - If a BaseCPI value is provided, this is used.  - Otherwise, if BaseCPIDate is provided, the CPI for this date is calculated and used.  - Otherwise, the CPI for the StartDate is calculated and used.                Note that if both BaseCPI and BaseCPIDate are set, the BaseCPI value will be used and the BaseCPIDate  will be ignored but can still be added for informative purposes.                Some bonds are issued with a BaseCPI date that does not correspond to the StartDate CPI value, in this  case the value should be provided here or with the actual BaseCPI..</param>
        /// <param name="calculationType">The calculation type applied to the bond coupon and principal amount.  The default CalculationType is &#x60;Standard&#x60;.    Supported string (enumeration) values are: [Standard, Quarterly, Ratio, Brazil, StandardAccruedOnly, RatioAccruedOnly, StandardWithCappedAccruedInterest]..</param>
        /// <param name="exDividendDays">Number of Good Business Days before the next coupon payment, in which the bond goes ex-dividend..</param>
        /// <param name="indexPrecision">Number of decimal places used to round IndexRatio. This defaults to 5 if not set..</param>
        /// <param name="principal">The face-value or principal for the bond at outset. (required).</param>
        /// <param name="principalProtection">If true then the principal is protected in that the redemption amount will be at least the face value (Principal).  This is typically set to true for inflation linked bonds issued by the United States and France (for example).  This is typically set to false for inflation linked bonds issued by the United Kingdom (post 2005).  For other sovereigns this can vary from issue to issue.  If not set this property defaults to true.  This is sometimes referred to as Deflation protection or an inflation floor of 0%..</param>
        /// <param name="stubType">StubType. Most Inflation linked bonds have a ShortFront stub type so this is the default, however in some cases  with a long front stub LongFront should be selected.  StubType Both is not supported for InflationLinkedBonds.    Supported string (enumeration) values are: [ShortFront, ShortBack, LongBack, LongFront, Both]..</param>
        /// <param name="roundingConventions">Rounding conventions for analytics, if any..</param>
        /// <param name="tradingConventions">tradingConventions.</param>
        /// <param name="originalIssuePrice">The price the bond was issued at. This is to be entered as a percentage of par, for example a value of 98.5 would represent 98.5%..</param>
        /// <param name="timeZoneConventions">timeZoneConventions.</param>
        /// <param name="instrumentType">The available values are: QuotedSecurity, InterestRateSwap, FxForward, Future, ExoticInstrument, FxOption, CreditDefaultSwap, InterestRateSwaption, Bond, EquityOption, FixedLeg, FloatingLeg, BespokeCashFlowsLeg, Unknown, TermDeposit, ContractForDifference, EquitySwap, CashPerpetual, CapFloor, CashSettled, CdsIndex, Basket, FundingLeg, FxSwap, ForwardRateAgreement, SimpleInstrument, Repo, Equity, ExchangeTradedOption, ReferenceInstrument, ComplexBond, InflationLinkedBond, InflationSwap, SimpleCashFlowLoan, TotalReturnSwap, InflationLeg, FundShareClass, FlexibleLoan, UnsettledCash, Cash, MasteredInstrument, LoanFacility, FlexibleDeposit (required) (default to &quot;InflationLinkedBond&quot;).</param>
        public InflationLinkedBond(DateTimeOffset startDate = default(DateTimeOffset), DateTimeOffset maturityDate = default(DateTimeOffset), FlowConventions flowConventions = default(FlowConventions), InflationIndexConventions inflationIndexConventions = default(InflationIndexConventions), decimal couponRate = default(decimal), Dictionary<string, string> identifiers = default(Dictionary<string, string>), decimal? baseCPI = default(decimal?), DateTimeOffset? baseCPIDate = default(DateTimeOffset?), string calculationType = default(string), int? exDividendDays = default(int?), int indexPrecision = default(int), decimal principal = default(decimal), bool principalProtection = default(bool), string stubType = default(string), List<RoundingConvention> roundingConventions = default(List<RoundingConvention>), TradingConventions tradingConventions = default(TradingConventions), decimal? originalIssuePrice = default(decimal?), TimeZoneConventions timeZoneConventions = default(TimeZoneConventions), InstrumentTypeEnum instrumentType = default(InstrumentTypeEnum)) : base(instrumentType)
        {
            this.StartDate = startDate;
            this.MaturityDate = maturityDate;
            // to ensure "flowConventions" is required (not null)
            if (flowConventions == null)
            {
                throw new ArgumentNullException("flowConventions is a required property for InflationLinkedBond and cannot be null");
            }
            this.FlowConventions = flowConventions;
            // to ensure "inflationIndexConventions" is required (not null)
            if (inflationIndexConventions == null)
            {
                throw new ArgumentNullException("inflationIndexConventions is a required property for InflationLinkedBond and cannot be null");
            }
            this.InflationIndexConventions = inflationIndexConventions;
            this.CouponRate = couponRate;
            this.Principal = principal;
            this.Identifiers = identifiers;
            this.BaseCPI = baseCPI;
            this.BaseCPIDate = baseCPIDate;
            this.CalculationType = calculationType;
            this.ExDividendDays = exDividendDays;
            this.IndexPrecision = indexPrecision;
            this.PrincipalProtection = principalProtection;
            this.StubType = stubType;
            this.RoundingConventions = roundingConventions;
            this.TradingConventions = tradingConventions;
            this.OriginalIssuePrice = originalIssuePrice;
            this.TimeZoneConventions = timeZoneConventions;
        }

        /// <summary>
        /// The start date of the bond.
        /// </summary>
        /// <value>The start date of the bond.</value>
        [DataMember(Name = "startDate", IsRequired = true, EmitDefaultValue = true)]
        public DateTimeOffset StartDate { get; set; }

        /// <summary>
        /// The final maturity date of the instrument. This means the last date on which the instruments makes a payment of any amount.  For the avoidance of doubt, that is not necessarily prior to its last sensitivity date for the purposes of risk; e.g. instruments such as  Constant Maturity Swaps (CMS) often have sensitivities to rates that may well be observed or set prior to the maturity date, but refer to a termination date beyond it.
        /// </summary>
        /// <value>The final maturity date of the instrument. This means the last date on which the instruments makes a payment of any amount.  For the avoidance of doubt, that is not necessarily prior to its last sensitivity date for the purposes of risk; e.g. instruments such as  Constant Maturity Swaps (CMS) often have sensitivities to rates that may well be observed or set prior to the maturity date, but refer to a termination date beyond it.</value>
        [DataMember(Name = "maturityDate", IsRequired = true, EmitDefaultValue = true)]
        public DateTimeOffset MaturityDate { get; set; }

        /// <summary>
        /// Gets or Sets FlowConventions
        /// </summary>
        [DataMember(Name = "flowConventions", IsRequired = true, EmitDefaultValue = true)]
        public FlowConventions FlowConventions { get; set; }

        /// <summary>
        /// Gets or Sets InflationIndexConventions
        /// </summary>
        [DataMember(Name = "inflationIndexConventions", IsRequired = true, EmitDefaultValue = true)]
        public InflationIndexConventions InflationIndexConventions { get; set; }

        /// <summary>
        /// Simple coupon rate.
        /// </summary>
        /// <value>Simple coupon rate.</value>
        [DataMember(Name = "couponRate", IsRequired = true, EmitDefaultValue = true)]
        public decimal CouponRate { get; set; }

        /// <summary>
        /// External market codes and identifiers for the bond, e.g. ISIN.
        /// </summary>
        /// <value>External market codes and identifiers for the bond, e.g. ISIN.</value>
        [DataMember(Name = "identifiers", EmitDefaultValue = true)]
        public Dictionary<string, string> Identifiers { get; set; }

        /// <summary>
        /// BaseCPI value. This is optional, if not provided the BaseCPI value will be calculated from the BaseCPIDate,  if that too is not present the StartDate will be used.                If provided then this value will always set the BaseCPI on this bond.                The BaseCPI of an inflation linked bond is calculated using the following logic:  - If a BaseCPI value is provided, this is used.  - Otherwise, if BaseCPIDate is provided, the CPI for this date is calculated and used.  - Otherwise, the CPI for the StartDate is calculated and used.                Note that if both BaseCPI and BaseCPIDate are set, the BaseCPI value will be used and the BaseCPIDate  will be ignored but can still be added for informative purposes.                Some bonds are issued with a BaseCPI date that does not correspond to the StartDate CPI value, in this  case the value should be provided here or with the BaseCPIDate.
        /// </summary>
        /// <value>BaseCPI value. This is optional, if not provided the BaseCPI value will be calculated from the BaseCPIDate,  if that too is not present the StartDate will be used.                If provided then this value will always set the BaseCPI on this bond.                The BaseCPI of an inflation linked bond is calculated using the following logic:  - If a BaseCPI value is provided, this is used.  - Otherwise, if BaseCPIDate is provided, the CPI for this date is calculated and used.  - Otherwise, the CPI for the StartDate is calculated and used.                Note that if both BaseCPI and BaseCPIDate are set, the BaseCPI value will be used and the BaseCPIDate  will be ignored but can still be added for informative purposes.                Some bonds are issued with a BaseCPI date that does not correspond to the StartDate CPI value, in this  case the value should be provided here or with the BaseCPIDate.</value>
        [DataMember(Name = "baseCPI", EmitDefaultValue = true)]
        public decimal? BaseCPI { get; set; }

        /// <summary>
        /// BaseCPIDate. This is optional. Gives the date that the BaseCPI is calculated for.                Note this is an un-lagged date (similar to StartDate) so the Bond ObservationLag will  be applied to this date when calculating the CPI.                The BaseCPI of an inflation linked bond is calculated using the following logic:  - If a BaseCPI value is provided, this is used.  - Otherwise, if BaseCPIDate is provided, the CPI for this date is calculated and used.  - Otherwise, the CPI for the StartDate is calculated and used.                Note that if both BaseCPI and BaseCPIDate are set, the BaseCPI value will be used and the BaseCPIDate  will be ignored but can still be added for informative purposes.                Some bonds are issued with a BaseCPI date that does not correspond to the StartDate CPI value, in this  case the value should be provided here or with the actual BaseCPI.
        /// </summary>
        /// <value>BaseCPIDate. This is optional. Gives the date that the BaseCPI is calculated for.                Note this is an un-lagged date (similar to StartDate) so the Bond ObservationLag will  be applied to this date when calculating the CPI.                The BaseCPI of an inflation linked bond is calculated using the following logic:  - If a BaseCPI value is provided, this is used.  - Otherwise, if BaseCPIDate is provided, the CPI for this date is calculated and used.  - Otherwise, the CPI for the StartDate is calculated and used.                Note that if both BaseCPI and BaseCPIDate are set, the BaseCPI value will be used and the BaseCPIDate  will be ignored but can still be added for informative purposes.                Some bonds are issued with a BaseCPI date that does not correspond to the StartDate CPI value, in this  case the value should be provided here or with the actual BaseCPI.</value>
        [DataMember(Name = "baseCPIDate", EmitDefaultValue = true)]
        public DateTimeOffset? BaseCPIDate { get; set; }

        /// <summary>
        /// The calculation type applied to the bond coupon and principal amount.  The default CalculationType is &#x60;Standard&#x60;.    Supported string (enumeration) values are: [Standard, Quarterly, Ratio, Brazil, StandardAccruedOnly, RatioAccruedOnly, StandardWithCappedAccruedInterest].
        /// </summary>
        /// <value>The calculation type applied to the bond coupon and principal amount.  The default CalculationType is &#x60;Standard&#x60;.    Supported string (enumeration) values are: [Standard, Quarterly, Ratio, Brazil, StandardAccruedOnly, RatioAccruedOnly, StandardWithCappedAccruedInterest].</value>
        [DataMember(Name = "calculationType", EmitDefaultValue = true)]
        public string CalculationType { get; set; }

        /// <summary>
        /// Number of Good Business Days before the next coupon payment, in which the bond goes ex-dividend.
        /// </summary>
        /// <value>Number of Good Business Days before the next coupon payment, in which the bond goes ex-dividend.</value>
        [DataMember(Name = "exDividendDays", EmitDefaultValue = true)]
        public int? ExDividendDays { get; set; }

        /// <summary>
        /// Number of decimal places used to round IndexRatio. This defaults to 5 if not set.
        /// </summary>
        /// <value>Number of decimal places used to round IndexRatio. This defaults to 5 if not set.</value>
        [DataMember(Name = "indexPrecision", EmitDefaultValue = true)]
        public int IndexPrecision { get; set; }

        /// <summary>
        /// The face-value or principal for the bond at outset.
        /// </summary>
        /// <value>The face-value or principal for the bond at outset.</value>
        [DataMember(Name = "principal", IsRequired = true, EmitDefaultValue = true)]
        public decimal Principal { get; set; }

        /// <summary>
        /// If true then the principal is protected in that the redemption amount will be at least the face value (Principal).  This is typically set to true for inflation linked bonds issued by the United States and France (for example).  This is typically set to false for inflation linked bonds issued by the United Kingdom (post 2005).  For other sovereigns this can vary from issue to issue.  If not set this property defaults to true.  This is sometimes referred to as Deflation protection or an inflation floor of 0%.
        /// </summary>
        /// <value>If true then the principal is protected in that the redemption amount will be at least the face value (Principal).  This is typically set to true for inflation linked bonds issued by the United States and France (for example).  This is typically set to false for inflation linked bonds issued by the United Kingdom (post 2005).  For other sovereigns this can vary from issue to issue.  If not set this property defaults to true.  This is sometimes referred to as Deflation protection or an inflation floor of 0%.</value>
        [DataMember(Name = "principalProtection", EmitDefaultValue = true)]
        public bool PrincipalProtection { get; set; }

        /// <summary>
        /// StubType. Most Inflation linked bonds have a ShortFront stub type so this is the default, however in some cases  with a long front stub LongFront should be selected.  StubType Both is not supported for InflationLinkedBonds.    Supported string (enumeration) values are: [ShortFront, ShortBack, LongBack, LongFront, Both].
        /// </summary>
        /// <value>StubType. Most Inflation linked bonds have a ShortFront stub type so this is the default, however in some cases  with a long front stub LongFront should be selected.  StubType Both is not supported for InflationLinkedBonds.    Supported string (enumeration) values are: [ShortFront, ShortBack, LongBack, LongFront, Both].</value>
        [DataMember(Name = "stubType", EmitDefaultValue = true)]
        public string StubType { get; set; }

        /// <summary>
        /// Rounding conventions for analytics, if any.
        /// </summary>
        /// <value>Rounding conventions for analytics, if any.</value>
        [DataMember(Name = "roundingConventions", EmitDefaultValue = true)]
        public List<RoundingConvention> RoundingConventions { get; set; }

        /// <summary>
        /// Gets or Sets TradingConventions
        /// </summary>
        [DataMember(Name = "tradingConventions", EmitDefaultValue = false)]
        public TradingConventions TradingConventions { get; set; }

        /// <summary>
        /// The price the bond was issued at. This is to be entered as a percentage of par, for example a value of 98.5 would represent 98.5%.
        /// </summary>
        /// <value>The price the bond was issued at. This is to be entered as a percentage of par, for example a value of 98.5 would represent 98.5%.</value>
        [DataMember(Name = "originalIssuePrice", EmitDefaultValue = true)]
        public decimal? OriginalIssuePrice { get; set; }

        /// <summary>
        /// Gets or Sets TimeZoneConventions
        /// </summary>
        [DataMember(Name = "timeZoneConventions", EmitDefaultValue = false)]
        public TimeZoneConventions TimeZoneConventions { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class InflationLinkedBond {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  StartDate: ").Append(StartDate).Append("\n");
            sb.Append("  MaturityDate: ").Append(MaturityDate).Append("\n");
            sb.Append("  FlowConventions: ").Append(FlowConventions).Append("\n");
            sb.Append("  InflationIndexConventions: ").Append(InflationIndexConventions).Append("\n");
            sb.Append("  CouponRate: ").Append(CouponRate).Append("\n");
            sb.Append("  Identifiers: ").Append(Identifiers).Append("\n");
            sb.Append("  BaseCPI: ").Append(BaseCPI).Append("\n");
            sb.Append("  BaseCPIDate: ").Append(BaseCPIDate).Append("\n");
            sb.Append("  CalculationType: ").Append(CalculationType).Append("\n");
            sb.Append("  ExDividendDays: ").Append(ExDividendDays).Append("\n");
            sb.Append("  IndexPrecision: ").Append(IndexPrecision).Append("\n");
            sb.Append("  Principal: ").Append(Principal).Append("\n");
            sb.Append("  PrincipalProtection: ").Append(PrincipalProtection).Append("\n");
            sb.Append("  StubType: ").Append(StubType).Append("\n");
            sb.Append("  RoundingConventions: ").Append(RoundingConventions).Append("\n");
            sb.Append("  TradingConventions: ").Append(TradingConventions).Append("\n");
            sb.Append("  OriginalIssuePrice: ").Append(OriginalIssuePrice).Append("\n");
            sb.Append("  TimeZoneConventions: ").Append(TimeZoneConventions).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as InflationLinkedBond);
        }

        /// <summary>
        /// Returns true if InflationLinkedBond instances are equal
        /// </summary>
        /// <param name="input">Instance of InflationLinkedBond to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InflationLinkedBond input)
        {
            if (input == null)
            {
                return false;
            }
            return base.Equals(input) && 
                (
                    this.StartDate == input.StartDate ||
                    (this.StartDate != null &&
                    this.StartDate.Equals(input.StartDate))
                ) && base.Equals(input) && 
                (
                    this.MaturityDate == input.MaturityDate ||
                    (this.MaturityDate != null &&
                    this.MaturityDate.Equals(input.MaturityDate))
                ) && base.Equals(input) && 
                (
                    this.FlowConventions == input.FlowConventions ||
                    (this.FlowConventions != null &&
                    this.FlowConventions.Equals(input.FlowConventions))
                ) && base.Equals(input) && 
                (
                    this.InflationIndexConventions == input.InflationIndexConventions ||
                    (this.InflationIndexConventions != null &&
                    this.InflationIndexConventions.Equals(input.InflationIndexConventions))
                ) && base.Equals(input) && 
                (
                    this.CouponRate == input.CouponRate ||
                    this.CouponRate.Equals(input.CouponRate)
                ) && base.Equals(input) && 
                (
                    this.Identifiers == input.Identifiers ||
                    this.Identifiers != null &&
                    input.Identifiers != null &&
                    this.Identifiers.SequenceEqual(input.Identifiers)
                ) && base.Equals(input) && 
                (
                    this.BaseCPI == input.BaseCPI ||
                    (this.BaseCPI != null &&
                    this.BaseCPI.Equals(input.BaseCPI))
                ) && base.Equals(input) && 
                (
                    this.BaseCPIDate == input.BaseCPIDate ||
                    (this.BaseCPIDate != null &&
                    this.BaseCPIDate.Equals(input.BaseCPIDate))
                ) && base.Equals(input) && 
                (
                    this.CalculationType == input.CalculationType ||
                    (this.CalculationType != null &&
                    this.CalculationType.Equals(input.CalculationType))
                ) && base.Equals(input) && 
                (
                    this.ExDividendDays == input.ExDividendDays ||
                    (this.ExDividendDays != null &&
                    this.ExDividendDays.Equals(input.ExDividendDays))
                ) && base.Equals(input) && 
                (
                    this.IndexPrecision == input.IndexPrecision ||
                    this.IndexPrecision.Equals(input.IndexPrecision)
                ) && base.Equals(input) && 
                (
                    this.Principal == input.Principal ||
                    this.Principal.Equals(input.Principal)
                ) && base.Equals(input) && 
                (
                    this.PrincipalProtection == input.PrincipalProtection ||
                    this.PrincipalProtection.Equals(input.PrincipalProtection)
                ) && base.Equals(input) && 
                (
                    this.StubType == input.StubType ||
                    (this.StubType != null &&
                    this.StubType.Equals(input.StubType))
                ) && base.Equals(input) && 
                (
                    this.RoundingConventions == input.RoundingConventions ||
                    this.RoundingConventions != null &&
                    input.RoundingConventions != null &&
                    this.RoundingConventions.SequenceEqual(input.RoundingConventions)
                ) && base.Equals(input) && 
                (
                    this.TradingConventions == input.TradingConventions ||
                    (this.TradingConventions != null &&
                    this.TradingConventions.Equals(input.TradingConventions))
                ) && base.Equals(input) && 
                (
                    this.OriginalIssuePrice == input.OriginalIssuePrice ||
                    (this.OriginalIssuePrice != null &&
                    this.OriginalIssuePrice.Equals(input.OriginalIssuePrice))
                ) && base.Equals(input) && 
                (
                    this.TimeZoneConventions == input.TimeZoneConventions ||
                    (this.TimeZoneConventions != null &&
                    this.TimeZoneConventions.Equals(input.TimeZoneConventions))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = base.GetHashCode();
                if (this.StartDate != null)
                {
                    hashCode = (hashCode * 59) + this.StartDate.GetHashCode();
                }
                if (this.MaturityDate != null)
                {
                    hashCode = (hashCode * 59) + this.MaturityDate.GetHashCode();
                }
                if (this.FlowConventions != null)
                {
                    hashCode = (hashCode * 59) + this.FlowConventions.GetHashCode();
                }
                if (this.InflationIndexConventions != null)
                {
                    hashCode = (hashCode * 59) + this.InflationIndexConventions.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.CouponRate.GetHashCode();
                if (this.Identifiers != null)
                {
                    hashCode = (hashCode * 59) + this.Identifiers.GetHashCode();
                }
                if (this.BaseCPI != null)
                {
                    hashCode = (hashCode * 59) + this.BaseCPI.GetHashCode();
                }
                if (this.BaseCPIDate != null)
                {
                    hashCode = (hashCode * 59) + this.BaseCPIDate.GetHashCode();
                }
                if (this.CalculationType != null)
                {
                    hashCode = (hashCode * 59) + this.CalculationType.GetHashCode();
                }
                if (this.ExDividendDays != null)
                {
                    hashCode = (hashCode * 59) + this.ExDividendDays.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.IndexPrecision.GetHashCode();
                hashCode = (hashCode * 59) + this.Principal.GetHashCode();
                hashCode = (hashCode * 59) + this.PrincipalProtection.GetHashCode();
                if (this.StubType != null)
                {
                    hashCode = (hashCode * 59) + this.StubType.GetHashCode();
                }
                if (this.RoundingConventions != null)
                {
                    hashCode = (hashCode * 59) + this.RoundingConventions.GetHashCode();
                }
                if (this.TradingConventions != null)
                {
                    hashCode = (hashCode * 59) + this.TradingConventions.GetHashCode();
                }
                if (this.OriginalIssuePrice != null)
                {
                    hashCode = (hashCode * 59) + this.OriginalIssuePrice.GetHashCode();
                }
                if (this.TimeZoneConventions != null)
                {
                    hashCode = (hashCode * 59) + this.TimeZoneConventions.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            return this.BaseValidate(validationContext);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        protected IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> BaseValidate(ValidationContext validationContext)
        {
            foreach (var x in base.BaseValidate(validationContext))
            {
                yield return x;
            }
            // CalculationType (string) maxLength
            if (this.CalculationType != null && this.CalculationType.Length > 50)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CalculationType, length must be less than 50.", new [] { "CalculationType" });
            }

            // CalculationType (string) minLength
            if (this.CalculationType != null && this.CalculationType.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CalculationType, length must be greater than 0.", new [] { "CalculationType" });
            }

            yield break;
        }
    }
}
