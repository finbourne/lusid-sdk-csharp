/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Lusid.Sdk.Client.OpenAPIDateConverter;

namespace Lusid.Sdk.Model
{
    /// <summary>
    /// DataModelSummary
    /// </summary>
    [DataContract(Name = "DataModelSummary")]
    public partial class DataModelSummary : IEquatable<DataModelSummary>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DataModelSummary" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected DataModelSummary() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="DataModelSummary" /> class.
        /// </summary>
        /// <param name="id">id (required).</param>
        /// <param name="displayName">The name of the Custom Data Model. (required).</param>
        /// <param name="description">A description for the Custom Data Model. (required).</param>
        /// <param name="entityType">The entity type that the Custom Data Model binds to. (required).</param>
        /// <param name="type">Either Root or Leaf or Intermediate. (required).</param>
        /// <param name="precedence">Where in the hierarchy this model sits. (required).</param>
        /// <param name="parent">parent.</param>
        /// <param name="children">Child Custom Data Models that will inherit from this data model. (required).</param>
        public DataModelSummary(ResourceId id = default(ResourceId), string displayName = default(string), string description = default(string), string entityType = default(string), string type = default(string), int precedence = default(int), ResourceId parent = default(ResourceId), List<DataModelSummary> children = default(List<DataModelSummary>))
        {
            // to ensure "id" is required (not null)
            if (id == null)
            {
                throw new ArgumentNullException("id is a required property for DataModelSummary and cannot be null");
            }
            this.Id = id;
            // to ensure "displayName" is required (not null)
            if (displayName == null)
            {
                throw new ArgumentNullException("displayName is a required property for DataModelSummary and cannot be null");
            }
            this.DisplayName = displayName;
            // to ensure "description" is required (not null)
            if (description == null)
            {
                throw new ArgumentNullException("description is a required property for DataModelSummary and cannot be null");
            }
            this.Description = description;
            // to ensure "entityType" is required (not null)
            if (entityType == null)
            {
                throw new ArgumentNullException("entityType is a required property for DataModelSummary and cannot be null");
            }
            this.EntityType = entityType;
            // to ensure "type" is required (not null)
            if (type == null)
            {
                throw new ArgumentNullException("type is a required property for DataModelSummary and cannot be null");
            }
            this.Type = type;
            this.Precedence = precedence;
            // to ensure "children" is required (not null)
            if (children == null)
            {
                throw new ArgumentNullException("children is a required property for DataModelSummary and cannot be null");
            }
            this.Children = children;
            this.Parent = parent;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = true)]
        public ResourceId Id { get; set; }

        /// <summary>
        /// The name of the Custom Data Model.
        /// </summary>
        /// <value>The name of the Custom Data Model.</value>
        [DataMember(Name = "displayName", IsRequired = true, EmitDefaultValue = true)]
        public string DisplayName { get; set; }

        /// <summary>
        /// A description for the Custom Data Model.
        /// </summary>
        /// <value>A description for the Custom Data Model.</value>
        [DataMember(Name = "description", IsRequired = true, EmitDefaultValue = true)]
        public string Description { get; set; }

        /// <summary>
        /// The entity type that the Custom Data Model binds to.
        /// </summary>
        /// <value>The entity type that the Custom Data Model binds to.</value>
        [DataMember(Name = "entityType", IsRequired = true, EmitDefaultValue = true)]
        public string EntityType { get; set; }

        /// <summary>
        /// Either Root or Leaf or Intermediate.
        /// </summary>
        /// <value>Either Root or Leaf or Intermediate.</value>
        [DataMember(Name = "type", IsRequired = true, EmitDefaultValue = true)]
        public string Type { get; set; }

        /// <summary>
        /// Where in the hierarchy this model sits.
        /// </summary>
        /// <value>Where in the hierarchy this model sits.</value>
        [DataMember(Name = "precedence", IsRequired = true, EmitDefaultValue = true)]
        public int Precedence { get; set; }

        /// <summary>
        /// Gets or Sets Parent
        /// </summary>
        [DataMember(Name = "parent", EmitDefaultValue = false)]
        public ResourceId Parent { get; set; }

        /// <summary>
        /// Child Custom Data Models that will inherit from this data model.
        /// </summary>
        /// <value>Child Custom Data Models that will inherit from this data model.</value>
        [DataMember(Name = "children", IsRequired = true, EmitDefaultValue = true)]
        public List<DataModelSummary> Children { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DataModelSummary {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  DisplayName: ").Append(DisplayName).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  EntityType: ").Append(EntityType).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Precedence: ").Append(Precedence).Append("\n");
            sb.Append("  Parent: ").Append(Parent).Append("\n");
            sb.Append("  Children: ").Append(Children).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DataModelSummary);
        }

        /// <summary>
        /// Returns true if DataModelSummary instances are equal
        /// </summary>
        /// <param name="input">Instance of DataModelSummary to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DataModelSummary input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.DisplayName == input.DisplayName ||
                    (this.DisplayName != null &&
                    this.DisplayName.Equals(input.DisplayName))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.EntityType == input.EntityType ||
                    (this.EntityType != null &&
                    this.EntityType.Equals(input.EntityType))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.Precedence == input.Precedence ||
                    this.Precedence.Equals(input.Precedence)
                ) && 
                (
                    this.Parent == input.Parent ||
                    (this.Parent != null &&
                    this.Parent.Equals(input.Parent))
                ) && 
                (
                    this.Children == input.Children ||
                    this.Children != null &&
                    input.Children != null &&
                    this.Children.SequenceEqual(input.Children)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                {
                    hashCode = (hashCode * 59) + this.Id.GetHashCode();
                }
                if (this.DisplayName != null)
                {
                    hashCode = (hashCode * 59) + this.DisplayName.GetHashCode();
                }
                if (this.Description != null)
                {
                    hashCode = (hashCode * 59) + this.Description.GetHashCode();
                }
                if (this.EntityType != null)
                {
                    hashCode = (hashCode * 59) + this.EntityType.GetHashCode();
                }
                if (this.Type != null)
                {
                    hashCode = (hashCode * 59) + this.Type.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Precedence.GetHashCode();
                if (this.Parent != null)
                {
                    hashCode = (hashCode * 59) + this.Parent.GetHashCode();
                }
                if (this.Children != null)
                {
                    hashCode = (hashCode * 59) + this.Children.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // DisplayName (string) minLength
            if (this.DisplayName != null && this.DisplayName.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for DisplayName, length must be greater than 1.", new [] { "DisplayName" });
            }

            // Description (string) minLength
            if (this.Description != null && this.Description.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Description, length must be greater than 1.", new [] { "Description" });
            }

            // EntityType (string) minLength
            if (this.EntityType != null && this.EntityType.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for EntityType, length must be greater than 1.", new [] { "EntityType" });
            }

            // Type (string) minLength
            if (this.Type != null && this.Type.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Type, length must be greater than 1.", new [] { "Type" });
            }

            yield break;
        }
    }
}
