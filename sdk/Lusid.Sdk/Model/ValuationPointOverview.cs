/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Lusid.Sdk.Client.OpenAPIDateConverter;

namespace Lusid.Sdk.Model
{
    /// <summary>
    /// ValuationPointOverview
    /// </summary>
    [DataContract(Name = "ValuationPointOverview")]
    public partial class ValuationPointOverview : IEquatable<ValuationPointOverview>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ValuationPointOverview" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ValuationPointOverview() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ValuationPointOverview" /> class.
        /// </summary>
        /// <param name="href">The specific Uniform Resource Identifier (URI) for this resource at the requested effective and asAt datetime..</param>
        /// <param name="diaryEntryCode">The code for the Valuation Point. (required).</param>
        /// <param name="effectiveFrom">The effective time of the last Valuation Point. (required).</param>
        /// <param name="effectiveTo">The effective time of the current Valuation Point. (required).</param>
        /// <param name="queryAsAt">The query time of the Valuation Point. Defaults to latest..</param>
        /// <param name="type">The type of the diary entry. This is &#39;ValuationPoint&#39;. (required).</param>
        /// <param name="status">The status of the Valuation Point. Can be &#39;Estimate&#39;, &#39;Candidate&#39; or &#39;Final&#39;. (required).</param>
        /// <param name="gav">The Gross Asset Value of the Fund or Share Class at the Valuation Point. This is effectively a summation of all Trial balance entries linked to accounts of types &#39;Asset&#39; and &#39;Liabilities&#39;. (required).</param>
        /// <param name="nav">The Net Asset Value of the Fund or Share Class at the Valuation Point. This represents the GAV with any fees applied in the period. (required).</param>
        /// <param name="properties">The Fee properties. These will be from the &#39;Fee&#39; domain..</param>
        /// <param name="links">links.</param>
        public ValuationPointOverview(string href = default(string), string diaryEntryCode = default(string), DateTimeOffset effectiveFrom = default(DateTimeOffset), DateTimeOffset effectiveTo = default(DateTimeOffset), DateTimeOffset queryAsAt = default(DateTimeOffset), string type = default(string), string status = default(string), decimal gav = default(decimal), decimal nav = default(decimal), Dictionary<string, Property> properties = default(Dictionary<string, Property>), List<Link> links = default(List<Link>))
        {
            // to ensure "diaryEntryCode" is required (not null)
            if (diaryEntryCode == null)
            {
                throw new ArgumentNullException("diaryEntryCode is a required property for ValuationPointOverview and cannot be null");
            }
            this.DiaryEntryCode = diaryEntryCode;
            this.EffectiveFrom = effectiveFrom;
            this.EffectiveTo = effectiveTo;
            // to ensure "type" is required (not null)
            if (type == null)
            {
                throw new ArgumentNullException("type is a required property for ValuationPointOverview and cannot be null");
            }
            this.Type = type;
            // to ensure "status" is required (not null)
            if (status == null)
            {
                throw new ArgumentNullException("status is a required property for ValuationPointOverview and cannot be null");
            }
            this.Status = status;
            this.Gav = gav;
            this.Nav = nav;
            this.Href = href;
            this.QueryAsAt = queryAsAt;
            this.Properties = properties;
            this.Links = links;
        }

        /// <summary>
        /// The specific Uniform Resource Identifier (URI) for this resource at the requested effective and asAt datetime.
        /// </summary>
        /// <value>The specific Uniform Resource Identifier (URI) for this resource at the requested effective and asAt datetime.</value>
        [DataMember(Name = "href", EmitDefaultValue = true)]
        public string Href { get; set; }

        /// <summary>
        /// The code for the Valuation Point.
        /// </summary>
        /// <value>The code for the Valuation Point.</value>
        [DataMember(Name = "diaryEntryCode", IsRequired = true, EmitDefaultValue = true)]
        public string DiaryEntryCode { get; set; }

        /// <summary>
        /// The effective time of the last Valuation Point.
        /// </summary>
        /// <value>The effective time of the last Valuation Point.</value>
        [DataMember(Name = "effectiveFrom", IsRequired = true, EmitDefaultValue = true)]
        public DateTimeOffset EffectiveFrom { get; set; }

        /// <summary>
        /// The effective time of the current Valuation Point.
        /// </summary>
        /// <value>The effective time of the current Valuation Point.</value>
        [DataMember(Name = "effectiveTo", IsRequired = true, EmitDefaultValue = true)]
        public DateTimeOffset EffectiveTo { get; set; }

        /// <summary>
        /// The query time of the Valuation Point. Defaults to latest.
        /// </summary>
        /// <value>The query time of the Valuation Point. Defaults to latest.</value>
        [DataMember(Name = "queryAsAt", EmitDefaultValue = false)]
        public DateTimeOffset QueryAsAt { get; set; }

        /// <summary>
        /// The type of the diary entry. This is &#39;ValuationPoint&#39;.
        /// </summary>
        /// <value>The type of the diary entry. This is &#39;ValuationPoint&#39;.</value>
        [DataMember(Name = "type", IsRequired = true, EmitDefaultValue = true)]
        public string Type { get; set; }

        /// <summary>
        /// The status of the Valuation Point. Can be &#39;Estimate&#39;, &#39;Candidate&#39; or &#39;Final&#39;.
        /// </summary>
        /// <value>The status of the Valuation Point. Can be &#39;Estimate&#39;, &#39;Candidate&#39; or &#39;Final&#39;.</value>
        [DataMember(Name = "status", IsRequired = true, EmitDefaultValue = true)]
        public string Status { get; set; }

        /// <summary>
        /// The Gross Asset Value of the Fund or Share Class at the Valuation Point. This is effectively a summation of all Trial balance entries linked to accounts of types &#39;Asset&#39; and &#39;Liabilities&#39;.
        /// </summary>
        /// <value>The Gross Asset Value of the Fund or Share Class at the Valuation Point. This is effectively a summation of all Trial balance entries linked to accounts of types &#39;Asset&#39; and &#39;Liabilities&#39;.</value>
        [DataMember(Name = "gav", IsRequired = true, EmitDefaultValue = true)]
        public decimal Gav { get; set; }

        /// <summary>
        /// The Net Asset Value of the Fund or Share Class at the Valuation Point. This represents the GAV with any fees applied in the period.
        /// </summary>
        /// <value>The Net Asset Value of the Fund or Share Class at the Valuation Point. This represents the GAV with any fees applied in the period.</value>
        [DataMember(Name = "nav", IsRequired = true, EmitDefaultValue = true)]
        public decimal Nav { get; set; }

        /// <summary>
        /// The Fee properties. These will be from the &#39;Fee&#39; domain.
        /// </summary>
        /// <value>The Fee properties. These will be from the &#39;Fee&#39; domain.</value>
        [DataMember(Name = "properties", EmitDefaultValue = true)]
        public Dictionary<string, Property> Properties { get; set; }

        /// <summary>
        /// Gets or Sets Links
        /// </summary>
        [DataMember(Name = "links", EmitDefaultValue = true)]
        public List<Link> Links { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ValuationPointOverview {\n");
            sb.Append("  Href: ").Append(Href).Append("\n");
            sb.Append("  DiaryEntryCode: ").Append(DiaryEntryCode).Append("\n");
            sb.Append("  EffectiveFrom: ").Append(EffectiveFrom).Append("\n");
            sb.Append("  EffectiveTo: ").Append(EffectiveTo).Append("\n");
            sb.Append("  QueryAsAt: ").Append(QueryAsAt).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Gav: ").Append(Gav).Append("\n");
            sb.Append("  Nav: ").Append(Nav).Append("\n");
            sb.Append("  Properties: ").Append(Properties).Append("\n");
            sb.Append("  Links: ").Append(Links).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ValuationPointOverview);
        }

        /// <summary>
        /// Returns true if ValuationPointOverview instances are equal
        /// </summary>
        /// <param name="input">Instance of ValuationPointOverview to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ValuationPointOverview input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Href == input.Href ||
                    (this.Href != null &&
                    this.Href.Equals(input.Href))
                ) && 
                (
                    this.DiaryEntryCode == input.DiaryEntryCode ||
                    (this.DiaryEntryCode != null &&
                    this.DiaryEntryCode.Equals(input.DiaryEntryCode))
                ) && 
                (
                    this.EffectiveFrom == input.EffectiveFrom ||
                    (this.EffectiveFrom != null &&
                    this.EffectiveFrom.Equals(input.EffectiveFrom))
                ) && 
                (
                    this.EffectiveTo == input.EffectiveTo ||
                    (this.EffectiveTo != null &&
                    this.EffectiveTo.Equals(input.EffectiveTo))
                ) && 
                (
                    this.QueryAsAt == input.QueryAsAt ||
                    (this.QueryAsAt != null &&
                    this.QueryAsAt.Equals(input.QueryAsAt))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.Gav == input.Gav ||
                    this.Gav.Equals(input.Gav)
                ) && 
                (
                    this.Nav == input.Nav ||
                    this.Nav.Equals(input.Nav)
                ) && 
                (
                    this.Properties == input.Properties ||
                    this.Properties != null &&
                    input.Properties != null &&
                    this.Properties.SequenceEqual(input.Properties)
                ) && 
                (
                    this.Links == input.Links ||
                    this.Links != null &&
                    input.Links != null &&
                    this.Links.SequenceEqual(input.Links)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Href != null)
                {
                    hashCode = (hashCode * 59) + this.Href.GetHashCode();
                }
                if (this.DiaryEntryCode != null)
                {
                    hashCode = (hashCode * 59) + this.DiaryEntryCode.GetHashCode();
                }
                if (this.EffectiveFrom != null)
                {
                    hashCode = (hashCode * 59) + this.EffectiveFrom.GetHashCode();
                }
                if (this.EffectiveTo != null)
                {
                    hashCode = (hashCode * 59) + this.EffectiveTo.GetHashCode();
                }
                if (this.QueryAsAt != null)
                {
                    hashCode = (hashCode * 59) + this.QueryAsAt.GetHashCode();
                }
                if (this.Type != null)
                {
                    hashCode = (hashCode * 59) + this.Type.GetHashCode();
                }
                if (this.Status != null)
                {
                    hashCode = (hashCode * 59) + this.Status.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Gav.GetHashCode();
                hashCode = (hashCode * 59) + this.Nav.GetHashCode();
                if (this.Properties != null)
                {
                    hashCode = (hashCode * 59) + this.Properties.GetHashCode();
                }
                if (this.Links != null)
                {
                    hashCode = (hashCode * 59) + this.Links.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Type (string) minLength
            if (this.Type != null && this.Type.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Type, length must be greater than 1.", new [] { "Type" });
            }

            // Status (string) minLength
            if (this.Status != null && this.Status.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Status, length must be greater than 1.", new [] { "Status" });
            }

            yield break;
        }
    }
}
