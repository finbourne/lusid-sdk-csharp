/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Lusid.Sdk.Client.OpenAPIDateConverter;

namespace Lusid.Sdk.Model
{
    /// <summary>
    /// RelationDefinition
    /// </summary>
    [DataContract(Name = "RelationDefinition")]
    public partial class RelationDefinition : IEquatable<RelationDefinition>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RelationDefinition" /> class.
        /// </summary>
        /// <param name="varVersion">varVersion.</param>
        /// <param name="relationDefinitionId">relationDefinitionId.</param>
        /// <param name="sourceEntityDomain">The entity domain of the source entity object..</param>
        /// <param name="targetEntityDomain">The entity domain of the target entity object..</param>
        /// <param name="displayName">The display name of the relation..</param>
        /// <param name="outwardDescription">The description to relate source entity object and target entity object.</param>
        /// <param name="inwardDescription">The description to relate target entity object and source entity object.</param>
        /// <param name="lifeTime">Describes how the relations can change over time, allowed values are \&quot;Perpetual\&quot; and \&quot;TimeVariant\&quot;.</param>
        /// <param name="constraintStyle">Describes the uniqueness and cardinality for relations with a specific source entity object and relations under this definition. Allowed values are \&quot;Property\&quot; and \&quot;Collection\&quot;, defaults to \&quot;Collection\&quot; if not specified..</param>
        /// <param name="links">links.</param>
        public RelationDefinition(ModelVersion varVersion = default(ModelVersion), ResourceId relationDefinitionId = default(ResourceId), string sourceEntityDomain = default(string), string targetEntityDomain = default(string), string displayName = default(string), string outwardDescription = default(string), string inwardDescription = default(string), string lifeTime = default(string), string constraintStyle = default(string), List<Link> links = default(List<Link>))
        {
            this.VarVersion = varVersion;
            this.RelationDefinitionId = relationDefinitionId;
            this.SourceEntityDomain = sourceEntityDomain;
            this.TargetEntityDomain = targetEntityDomain;
            this.DisplayName = displayName;
            this.OutwardDescription = outwardDescription;
            this.InwardDescription = inwardDescription;
            this.LifeTime = lifeTime;
            this.ConstraintStyle = constraintStyle;
            this.Links = links;
        }

        /// <summary>
        /// Gets or Sets VarVersion
        /// </summary>
        [DataMember(Name = "version", EmitDefaultValue = false)]
        public ModelVersion VarVersion { get; set; }

        /// <summary>
        /// Gets or Sets RelationDefinitionId
        /// </summary>
        [DataMember(Name = "relationDefinitionId", EmitDefaultValue = false)]
        public ResourceId RelationDefinitionId { get; set; }

        /// <summary>
        /// The entity domain of the source entity object.
        /// </summary>
        /// <value>The entity domain of the source entity object.</value>
        [DataMember(Name = "sourceEntityDomain", EmitDefaultValue = true)]
        public string SourceEntityDomain { get; set; }

        /// <summary>
        /// The entity domain of the target entity object.
        /// </summary>
        /// <value>The entity domain of the target entity object.</value>
        [DataMember(Name = "targetEntityDomain", EmitDefaultValue = true)]
        public string TargetEntityDomain { get; set; }

        /// <summary>
        /// The display name of the relation.
        /// </summary>
        /// <value>The display name of the relation.</value>
        [DataMember(Name = "displayName", EmitDefaultValue = true)]
        public string DisplayName { get; set; }

        /// <summary>
        /// The description to relate source entity object and target entity object
        /// </summary>
        /// <value>The description to relate source entity object and target entity object</value>
        [DataMember(Name = "outwardDescription", EmitDefaultValue = true)]
        public string OutwardDescription { get; set; }

        /// <summary>
        /// The description to relate target entity object and source entity object
        /// </summary>
        /// <value>The description to relate target entity object and source entity object</value>
        [DataMember(Name = "inwardDescription", EmitDefaultValue = true)]
        public string InwardDescription { get; set; }

        /// <summary>
        /// Describes how the relations can change over time, allowed values are \&quot;Perpetual\&quot; and \&quot;TimeVariant\&quot;
        /// </summary>
        /// <value>Describes how the relations can change over time, allowed values are \&quot;Perpetual\&quot; and \&quot;TimeVariant\&quot;</value>
        [DataMember(Name = "lifeTime", EmitDefaultValue = true)]
        public string LifeTime { get; set; }

        /// <summary>
        /// Describes the uniqueness and cardinality for relations with a specific source entity object and relations under this definition. Allowed values are \&quot;Property\&quot; and \&quot;Collection\&quot;, defaults to \&quot;Collection\&quot; if not specified.
        /// </summary>
        /// <value>Describes the uniqueness and cardinality for relations with a specific source entity object and relations under this definition. Allowed values are \&quot;Property\&quot; and \&quot;Collection\&quot;, defaults to \&quot;Collection\&quot; if not specified.</value>
        [DataMember(Name = "constraintStyle", EmitDefaultValue = true)]
        public string ConstraintStyle { get; set; }

        /// <summary>
        /// Gets or Sets Links
        /// </summary>
        [DataMember(Name = "links", EmitDefaultValue = true)]
        public List<Link> Links { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class RelationDefinition {\n");
            sb.Append("  VarVersion: ").Append(VarVersion).Append("\n");
            sb.Append("  RelationDefinitionId: ").Append(RelationDefinitionId).Append("\n");
            sb.Append("  SourceEntityDomain: ").Append(SourceEntityDomain).Append("\n");
            sb.Append("  TargetEntityDomain: ").Append(TargetEntityDomain).Append("\n");
            sb.Append("  DisplayName: ").Append(DisplayName).Append("\n");
            sb.Append("  OutwardDescription: ").Append(OutwardDescription).Append("\n");
            sb.Append("  InwardDescription: ").Append(InwardDescription).Append("\n");
            sb.Append("  LifeTime: ").Append(LifeTime).Append("\n");
            sb.Append("  ConstraintStyle: ").Append(ConstraintStyle).Append("\n");
            sb.Append("  Links: ").Append(Links).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as RelationDefinition);
        }

        /// <summary>
        /// Returns true if RelationDefinition instances are equal
        /// </summary>
        /// <param name="input">Instance of RelationDefinition to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RelationDefinition input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.VarVersion == input.VarVersion ||
                    (this.VarVersion != null &&
                    this.VarVersion.Equals(input.VarVersion))
                ) && 
                (
                    this.RelationDefinitionId == input.RelationDefinitionId ||
                    (this.RelationDefinitionId != null &&
                    this.RelationDefinitionId.Equals(input.RelationDefinitionId))
                ) && 
                (
                    this.SourceEntityDomain == input.SourceEntityDomain ||
                    (this.SourceEntityDomain != null &&
                    this.SourceEntityDomain.Equals(input.SourceEntityDomain))
                ) && 
                (
                    this.TargetEntityDomain == input.TargetEntityDomain ||
                    (this.TargetEntityDomain != null &&
                    this.TargetEntityDomain.Equals(input.TargetEntityDomain))
                ) && 
                (
                    this.DisplayName == input.DisplayName ||
                    (this.DisplayName != null &&
                    this.DisplayName.Equals(input.DisplayName))
                ) && 
                (
                    this.OutwardDescription == input.OutwardDescription ||
                    (this.OutwardDescription != null &&
                    this.OutwardDescription.Equals(input.OutwardDescription))
                ) && 
                (
                    this.InwardDescription == input.InwardDescription ||
                    (this.InwardDescription != null &&
                    this.InwardDescription.Equals(input.InwardDescription))
                ) && 
                (
                    this.LifeTime == input.LifeTime ||
                    (this.LifeTime != null &&
                    this.LifeTime.Equals(input.LifeTime))
                ) && 
                (
                    this.ConstraintStyle == input.ConstraintStyle ||
                    (this.ConstraintStyle != null &&
                    this.ConstraintStyle.Equals(input.ConstraintStyle))
                ) && 
                (
                    this.Links == input.Links ||
                    this.Links != null &&
                    input.Links != null &&
                    this.Links.SequenceEqual(input.Links)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.VarVersion != null)
                {
                    hashCode = (hashCode * 59) + this.VarVersion.GetHashCode();
                }
                if (this.RelationDefinitionId != null)
                {
                    hashCode = (hashCode * 59) + this.RelationDefinitionId.GetHashCode();
                }
                if (this.SourceEntityDomain != null)
                {
                    hashCode = (hashCode * 59) + this.SourceEntityDomain.GetHashCode();
                }
                if (this.TargetEntityDomain != null)
                {
                    hashCode = (hashCode * 59) + this.TargetEntityDomain.GetHashCode();
                }
                if (this.DisplayName != null)
                {
                    hashCode = (hashCode * 59) + this.DisplayName.GetHashCode();
                }
                if (this.OutwardDescription != null)
                {
                    hashCode = (hashCode * 59) + this.OutwardDescription.GetHashCode();
                }
                if (this.InwardDescription != null)
                {
                    hashCode = (hashCode * 59) + this.InwardDescription.GetHashCode();
                }
                if (this.LifeTime != null)
                {
                    hashCode = (hashCode * 59) + this.LifeTime.GetHashCode();
                }
                if (this.ConstraintStyle != null)
                {
                    hashCode = (hashCode * 59) + this.ConstraintStyle.GetHashCode();
                }
                if (this.Links != null)
                {
                    hashCode = (hashCode * 59) + this.Links.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
