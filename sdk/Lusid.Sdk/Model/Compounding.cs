/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Lusid.Sdk.Client.OpenAPIDateConverter;

namespace Lusid.Sdk.Model
{
    /// <summary>
    /// The compounding settings used on interest rate.
    /// </summary>
    [DataContract(Name = "Compounding")]
    public partial class Compounding : IEquatable<Compounding>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Compounding" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Compounding() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Compounding" /> class.
        /// </summary>
        /// <param name="averagingMethod">Defines whether a weighted or unweighted average is used when calculating the average rate. It applies only when CompoundingMethod &#x3D; ‘Averaging‘.  Supported string (enumeration) values are: [Unweighted, UnweightedIncludingWeekends, Weighted]..</param>
        /// <param name="calculationShiftMethod">Defines which resets and day counts are used for the rate calculation  Supported string (enumeration) values are: [Lookback, NoShift, ObservationPeriodShift, Lockout]..</param>
        /// <param name="compoundingMethod">If the interest rate is simple, compounded or using a pre-computed compounded index.  Supported string (enumeration) values are: [Averaging, Compounding, CompoundedIndex, NonCumulativeCompounding]. (required).</param>
        /// <param name="resetFrequency">The interest payment frequency.  For more information on tenors, see [knowledge base article KA-02097](https://support.lusid.com/knowledgebase/article/KA-02097) (required).</param>
        /// <param name="shift">Defines the number of days to lockout or shift observation period by - should be a non-negative integer.</param>
        /// <param name="spreadCompoundingMethod">Defines how the computed leg spread is applied to compounded rate. It applies only when CompoundingMethod &#x3D; ‘Compounding‘ or ‘CompoundedIndex‘.  Available compounding methods:  | Method | Description | | - -- -- - | - -- -- -- -- -- | | Straight | Compounding rate in each compound period includes the spread. | | Flat | Compounding rate does not include the spread, and the spread is used for simple interest in each compound period. | | SpreadExclusive | Compounding rate does not include the spread, and the spread is used for simple interest for whole accrual period. |  The values \&quot;IsdaCompounding\&quot;, \&quot;NoCompounding\&quot;, \&quot;IsdaFlatCompounding\&quot;, and \&quot;None\&quot; are accepted for compatibility with existing instruments and their use is discouraged.  Supported string (enumeration) values are: [Straight, IsdaCompounding, NoCompounding, SpreadExclusive, IsdaFlatCompounding, Flat, None]..</param>
        /// <param name="roundingPrecision">Defines the number of decimal places the compounded rate (expressed as a decimal) should be rounded to. This is an optional field, leaving it blank will mean no rounding takes place in Compounding..</param>
        public Compounding(string averagingMethod = default(string), string calculationShiftMethod = default(string), string compoundingMethod = default(string), string resetFrequency = default(string), int shift = default(int), string spreadCompoundingMethod = default(string), int? roundingPrecision = default(int?))
        {
            // to ensure "compoundingMethod" is required (not null)
            if (compoundingMethod == null)
            {
                throw new ArgumentNullException("compoundingMethod is a required property for Compounding and cannot be null");
            }
            this.CompoundingMethod = compoundingMethod;
            // to ensure "resetFrequency" is required (not null)
            if (resetFrequency == null)
            {
                throw new ArgumentNullException("resetFrequency is a required property for Compounding and cannot be null");
            }
            this.ResetFrequency = resetFrequency;
            this.AveragingMethod = averagingMethod;
            this.CalculationShiftMethod = calculationShiftMethod;
            this.Shift = shift;
            this.SpreadCompoundingMethod = spreadCompoundingMethod;
            this.RoundingPrecision = roundingPrecision;
        }

        /// <summary>
        /// Defines whether a weighted or unweighted average is used when calculating the average rate. It applies only when CompoundingMethod &#x3D; ‘Averaging‘.  Supported string (enumeration) values are: [Unweighted, UnweightedIncludingWeekends, Weighted].
        /// </summary>
        /// <value>Defines whether a weighted or unweighted average is used when calculating the average rate. It applies only when CompoundingMethod &#x3D; ‘Averaging‘.  Supported string (enumeration) values are: [Unweighted, UnweightedIncludingWeekends, Weighted].</value>
        [DataMember(Name = "averagingMethod", EmitDefaultValue = true)]
        public string AveragingMethod { get; set; }

        /// <summary>
        /// Defines which resets and day counts are used for the rate calculation  Supported string (enumeration) values are: [Lookback, NoShift, ObservationPeriodShift, Lockout].
        /// </summary>
        /// <value>Defines which resets and day counts are used for the rate calculation  Supported string (enumeration) values are: [Lookback, NoShift, ObservationPeriodShift, Lockout].</value>
        [DataMember(Name = "calculationShiftMethod", EmitDefaultValue = true)]
        public string CalculationShiftMethod { get; set; }

        /// <summary>
        /// If the interest rate is simple, compounded or using a pre-computed compounded index.  Supported string (enumeration) values are: [Averaging, Compounding, CompoundedIndex, NonCumulativeCompounding].
        /// </summary>
        /// <value>If the interest rate is simple, compounded or using a pre-computed compounded index.  Supported string (enumeration) values are: [Averaging, Compounding, CompoundedIndex, NonCumulativeCompounding].</value>
        [DataMember(Name = "compoundingMethod", IsRequired = true, EmitDefaultValue = true)]
        public string CompoundingMethod { get; set; }

        /// <summary>
        /// The interest payment frequency.  For more information on tenors, see [knowledge base article KA-02097](https://support.lusid.com/knowledgebase/article/KA-02097)
        /// </summary>
        /// <value>The interest payment frequency.  For more information on tenors, see [knowledge base article KA-02097](https://support.lusid.com/knowledgebase/article/KA-02097)</value>
        [DataMember(Name = "resetFrequency", IsRequired = true, EmitDefaultValue = true)]
        public string ResetFrequency { get; set; }

        /// <summary>
        /// Defines the number of days to lockout or shift observation period by - should be a non-negative integer
        /// </summary>
        /// <value>Defines the number of days to lockout or shift observation period by - should be a non-negative integer</value>
        [DataMember(Name = "shift", EmitDefaultValue = true)]
        public int Shift { get; set; }

        /// <summary>
        /// Defines how the computed leg spread is applied to compounded rate. It applies only when CompoundingMethod &#x3D; ‘Compounding‘ or ‘CompoundedIndex‘.  Available compounding methods:  | Method | Description | | - -- -- - | - -- -- -- -- -- | | Straight | Compounding rate in each compound period includes the spread. | | Flat | Compounding rate does not include the spread, and the spread is used for simple interest in each compound period. | | SpreadExclusive | Compounding rate does not include the spread, and the spread is used for simple interest for whole accrual period. |  The values \&quot;IsdaCompounding\&quot;, \&quot;NoCompounding\&quot;, \&quot;IsdaFlatCompounding\&quot;, and \&quot;None\&quot; are accepted for compatibility with existing instruments and their use is discouraged.  Supported string (enumeration) values are: [Straight, IsdaCompounding, NoCompounding, SpreadExclusive, IsdaFlatCompounding, Flat, None].
        /// </summary>
        /// <value>Defines how the computed leg spread is applied to compounded rate. It applies only when CompoundingMethod &#x3D; ‘Compounding‘ or ‘CompoundedIndex‘.  Available compounding methods:  | Method | Description | | - -- -- - | - -- -- -- -- -- | | Straight | Compounding rate in each compound period includes the spread. | | Flat | Compounding rate does not include the spread, and the spread is used for simple interest in each compound period. | | SpreadExclusive | Compounding rate does not include the spread, and the spread is used for simple interest for whole accrual period. |  The values \&quot;IsdaCompounding\&quot;, \&quot;NoCompounding\&quot;, \&quot;IsdaFlatCompounding\&quot;, and \&quot;None\&quot; are accepted for compatibility with existing instruments and their use is discouraged.  Supported string (enumeration) values are: [Straight, IsdaCompounding, NoCompounding, SpreadExclusive, IsdaFlatCompounding, Flat, None].</value>
        [DataMember(Name = "spreadCompoundingMethod", EmitDefaultValue = true)]
        public string SpreadCompoundingMethod { get; set; }

        /// <summary>
        /// Defines the number of decimal places the compounded rate (expressed as a decimal) should be rounded to. This is an optional field, leaving it blank will mean no rounding takes place in Compounding.
        /// </summary>
        /// <value>Defines the number of decimal places the compounded rate (expressed as a decimal) should be rounded to. This is an optional field, leaving it blank will mean no rounding takes place in Compounding.</value>
        [DataMember(Name = "roundingPrecision", EmitDefaultValue = true)]
        public int? RoundingPrecision { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Compounding {\n");
            sb.Append("  AveragingMethod: ").Append(AveragingMethod).Append("\n");
            sb.Append("  CalculationShiftMethod: ").Append(CalculationShiftMethod).Append("\n");
            sb.Append("  CompoundingMethod: ").Append(CompoundingMethod).Append("\n");
            sb.Append("  ResetFrequency: ").Append(ResetFrequency).Append("\n");
            sb.Append("  Shift: ").Append(Shift).Append("\n");
            sb.Append("  SpreadCompoundingMethod: ").Append(SpreadCompoundingMethod).Append("\n");
            sb.Append("  RoundingPrecision: ").Append(RoundingPrecision).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Compounding);
        }

        /// <summary>
        /// Returns true if Compounding instances are equal
        /// </summary>
        /// <param name="input">Instance of Compounding to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Compounding input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.AveragingMethod == input.AveragingMethod ||
                    (this.AveragingMethod != null &&
                    this.AveragingMethod.Equals(input.AveragingMethod))
                ) && 
                (
                    this.CalculationShiftMethod == input.CalculationShiftMethod ||
                    (this.CalculationShiftMethod != null &&
                    this.CalculationShiftMethod.Equals(input.CalculationShiftMethod))
                ) && 
                (
                    this.CompoundingMethod == input.CompoundingMethod ||
                    (this.CompoundingMethod != null &&
                    this.CompoundingMethod.Equals(input.CompoundingMethod))
                ) && 
                (
                    this.ResetFrequency == input.ResetFrequency ||
                    (this.ResetFrequency != null &&
                    this.ResetFrequency.Equals(input.ResetFrequency))
                ) && 
                (
                    this.Shift == input.Shift ||
                    this.Shift.Equals(input.Shift)
                ) && 
                (
                    this.SpreadCompoundingMethod == input.SpreadCompoundingMethod ||
                    (this.SpreadCompoundingMethod != null &&
                    this.SpreadCompoundingMethod.Equals(input.SpreadCompoundingMethod))
                ) && 
                (
                    this.RoundingPrecision == input.RoundingPrecision ||
                    (this.RoundingPrecision != null &&
                    this.RoundingPrecision.Equals(input.RoundingPrecision))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AveragingMethod != null)
                {
                    hashCode = (hashCode * 59) + this.AveragingMethod.GetHashCode();
                }
                if (this.CalculationShiftMethod != null)
                {
                    hashCode = (hashCode * 59) + this.CalculationShiftMethod.GetHashCode();
                }
                if (this.CompoundingMethod != null)
                {
                    hashCode = (hashCode * 59) + this.CompoundingMethod.GetHashCode();
                }
                if (this.ResetFrequency != null)
                {
                    hashCode = (hashCode * 59) + this.ResetFrequency.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Shift.GetHashCode();
                if (this.SpreadCompoundingMethod != null)
                {
                    hashCode = (hashCode * 59) + this.SpreadCompoundingMethod.GetHashCode();
                }
                if (this.RoundingPrecision != null)
                {
                    hashCode = (hashCode * 59) + this.RoundingPrecision.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // AveragingMethod (string) maxLength
            if (this.AveragingMethod != null && this.AveragingMethod.Length > 32)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for AveragingMethod, length must be less than 32.", new [] { "AveragingMethod" });
            }

            // AveragingMethod (string) minLength
            if (this.AveragingMethod != null && this.AveragingMethod.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for AveragingMethod, length must be greater than 0.", new [] { "AveragingMethod" });
            }

            // CompoundingMethod (string) minLength
            if (this.CompoundingMethod != null && this.CompoundingMethod.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CompoundingMethod, length must be greater than 1.", new [] { "CompoundingMethod" });
            }

            // ResetFrequency (string) minLength
            if (this.ResetFrequency != null && this.ResetFrequency.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ResetFrequency, length must be greater than 1.", new [] { "ResetFrequency" });
            }

            // SpreadCompoundingMethod (string) maxLength
            if (this.SpreadCompoundingMethod != null && this.SpreadCompoundingMethod.Length > 32)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SpreadCompoundingMethod, length must be less than 32.", new [] { "SpreadCompoundingMethod" });
            }

            // SpreadCompoundingMethod (string) minLength
            if (this.SpreadCompoundingMethod != null && this.SpreadCompoundingMethod.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SpreadCompoundingMethod, length must be greater than 0.", new [] { "SpreadCompoundingMethod" });
            }

            yield break;
        }
    }
}
