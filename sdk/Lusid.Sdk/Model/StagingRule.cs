/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Lusid.Sdk.Client.OpenAPIDateConverter;

namespace Lusid.Sdk.Model
{
    /// <summary>
    /// StagingRule
    /// </summary>
    [DataContract(Name = "StagingRule")]
    public partial class StagingRule : IEquatable<StagingRule>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="StagingRule" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected StagingRule() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="StagingRule" /> class.
        /// </summary>
        /// <param name="ruleId">The ID of the staging rule. (required).</param>
        /// <param name="description">A description for the staging rule..</param>
        /// <param name="status">Whether the rule is &#39;Active&#39; or &#39;Inactive&#39;. (required).</param>
        /// <param name="matchCriteria">matchCriteria (required).</param>
        /// <param name="approvalCriteria">approvalCriteria (required).</param>
        public StagingRule(string ruleId = default(string), string description = default(string), string status = default(string), StagingRuleMatchCriteria matchCriteria = default(StagingRuleMatchCriteria), StagingRuleApprovalCriteria approvalCriteria = default(StagingRuleApprovalCriteria))
        {
            // to ensure "ruleId" is required (not null)
            if (ruleId == null)
            {
                throw new ArgumentNullException("ruleId is a required property for StagingRule and cannot be null");
            }
            this.RuleId = ruleId;
            // to ensure "status" is required (not null)
            if (status == null)
            {
                throw new ArgumentNullException("status is a required property for StagingRule and cannot be null");
            }
            this.Status = status;
            // to ensure "matchCriteria" is required (not null)
            if (matchCriteria == null)
            {
                throw new ArgumentNullException("matchCriteria is a required property for StagingRule and cannot be null");
            }
            this.MatchCriteria = matchCriteria;
            // to ensure "approvalCriteria" is required (not null)
            if (approvalCriteria == null)
            {
                throw new ArgumentNullException("approvalCriteria is a required property for StagingRule and cannot be null");
            }
            this.ApprovalCriteria = approvalCriteria;
            this.Description = description;
        }

        /// <summary>
        /// The ID of the staging rule.
        /// </summary>
        /// <value>The ID of the staging rule.</value>
        [DataMember(Name = "ruleId", IsRequired = true, EmitDefaultValue = true)]
        public string RuleId { get; set; }

        /// <summary>
        /// A description for the staging rule.
        /// </summary>
        /// <value>A description for the staging rule.</value>
        [DataMember(Name = "description", EmitDefaultValue = true)]
        public string Description { get; set; }

        /// <summary>
        /// Whether the rule is &#39;Active&#39; or &#39;Inactive&#39;.
        /// </summary>
        /// <value>Whether the rule is &#39;Active&#39; or &#39;Inactive&#39;.</value>
        [DataMember(Name = "status", IsRequired = true, EmitDefaultValue = true)]
        public string Status { get; set; }

        /// <summary>
        /// Gets or Sets MatchCriteria
        /// </summary>
        [DataMember(Name = "matchCriteria", IsRequired = true, EmitDefaultValue = true)]
        public StagingRuleMatchCriteria MatchCriteria { get; set; }

        /// <summary>
        /// Gets or Sets ApprovalCriteria
        /// </summary>
        [DataMember(Name = "approvalCriteria", IsRequired = true, EmitDefaultValue = true)]
        public StagingRuleApprovalCriteria ApprovalCriteria { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class StagingRule {\n");
            sb.Append("  RuleId: ").Append(RuleId).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  MatchCriteria: ").Append(MatchCriteria).Append("\n");
            sb.Append("  ApprovalCriteria: ").Append(ApprovalCriteria).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as StagingRule);
        }

        /// <summary>
        /// Returns true if StagingRule instances are equal
        /// </summary>
        /// <param name="input">Instance of StagingRule to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(StagingRule input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.RuleId == input.RuleId ||
                    (this.RuleId != null &&
                    this.RuleId.Equals(input.RuleId))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.MatchCriteria == input.MatchCriteria ||
                    (this.MatchCriteria != null &&
                    this.MatchCriteria.Equals(input.MatchCriteria))
                ) && 
                (
                    this.ApprovalCriteria == input.ApprovalCriteria ||
                    (this.ApprovalCriteria != null &&
                    this.ApprovalCriteria.Equals(input.ApprovalCriteria))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.RuleId != null)
                {
                    hashCode = (hashCode * 59) + this.RuleId.GetHashCode();
                }
                if (this.Description != null)
                {
                    hashCode = (hashCode * 59) + this.Description.GetHashCode();
                }
                if (this.Status != null)
                {
                    hashCode = (hashCode * 59) + this.Status.GetHashCode();
                }
                if (this.MatchCriteria != null)
                {
                    hashCode = (hashCode * 59) + this.MatchCriteria.GetHashCode();
                }
                if (this.ApprovalCriteria != null)
                {
                    hashCode = (hashCode * 59) + this.ApprovalCriteria.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // RuleId (string) maxLength
            if (this.RuleId != null && this.RuleId.Length > 64)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for RuleId, length must be less than 64.", new [] { "RuleId" });
            }

            // RuleId (string) minLength
            if (this.RuleId != null && this.RuleId.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for RuleId, length must be greater than 1.", new [] { "RuleId" });
            }

            // Description (string) maxLength
            if (this.Description != null && this.Description.Length > 1024)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Description, length must be less than 1024.", new [] { "Description" });
            }

            // Description (string) minLength
            if (this.Description != null && this.Description.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Description, length must be greater than 0.", new [] { "Description" });
            }

            // Status (string) minLength
            if (this.Status != null && this.Status.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Status, length must be greater than 1.", new [] { "Status" });
            }

            yield break;
        }
    }
}
