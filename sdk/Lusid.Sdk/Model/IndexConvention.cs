/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Lusid.Sdk.Client.OpenAPIDateConverter;

namespace Lusid.Sdk.Model
{
    /// <summary>
    /// A set of conventions that describe the conventions for calculation of payments made on rates interbank lending and similar.  Based on ISDA 2006 conventions and similar documentation. Please see the knowledge base for further documentation.
    /// </summary>
    [DataContract(Name = "IndexConvention")]
    public partial class IndexConvention : IEquatable<IndexConvention>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="IndexConvention" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected IndexConvention() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="IndexConvention" /> class.
        /// </summary>
        /// <param name="fixingReference">The reference rate name for fixings. (required).</param>
        /// <param name="publicationDayLag">Number of days between spot and publication of the rate. (required).</param>
        /// <param name="paymentTenor">The tenor of the payment. For an OIS index this is always 1 day. For other indices, e.g. LIBOR it will have a variable tenor typically between 1 day and 1 year.    For more information on tenors, see [knowledge base article KA-02097](https://support.lusid.com/knowledgebase/article/KA-02097) (required).</param>
        /// <param name="dayCountConvention">when calculating the fraction of a year between two dates, what convention is used to represent the number of days in a year  and difference between them.  For more information on day counts, see [knowledge base article KA-01798](https://support.lusid.com/knowledgebase/article/KA-01798)                Supported string (enumeration) values are: [Actual360, Act360, MoneyMarket, Actual365, Act365, Thirty360, ThirtyU360, Bond, ThirtyE360, EuroBond, ActualActual, ActAct, ActActIsda, ActActIsma, ActActIcma, OneOne, Act364, Act365F, Act365L, Act365_25, Act252, Bus252, NL360, NL365]. (required).</param>
        /// <param name="currency">Currency of the index convention. (required).</param>
        /// <param name="indexName">The name of the index for which this represents the conventions of.  For instance, \&quot;SOFR\&quot;, \&quot;LIBOR\&quot;, \&quot;EURIBOR\&quot;, etc.  Defaults to \&quot;INDEX\&quot; if not specified..</param>
        /// <param name="scope">The scope used when updating or inserting the convention..</param>
        /// <param name="code">The code of the convention..</param>
        public IndexConvention(string fixingReference = default(string), int publicationDayLag = default(int), string paymentTenor = default(string), string dayCountConvention = default(string), string currency = default(string), string indexName = default(string), string scope = default(string), string code = default(string))
        {
            // to ensure "fixingReference" is required (not null)
            if (fixingReference == null)
            {
                throw new ArgumentNullException("fixingReference is a required property for IndexConvention and cannot be null");
            }
            this.FixingReference = fixingReference;
            this.PublicationDayLag = publicationDayLag;
            // to ensure "paymentTenor" is required (not null)
            if (paymentTenor == null)
            {
                throw new ArgumentNullException("paymentTenor is a required property for IndexConvention and cannot be null");
            }
            this.PaymentTenor = paymentTenor;
            // to ensure "dayCountConvention" is required (not null)
            if (dayCountConvention == null)
            {
                throw new ArgumentNullException("dayCountConvention is a required property for IndexConvention and cannot be null");
            }
            this.DayCountConvention = dayCountConvention;
            // to ensure "currency" is required (not null)
            if (currency == null)
            {
                throw new ArgumentNullException("currency is a required property for IndexConvention and cannot be null");
            }
            this.Currency = currency;
            this.IndexName = indexName;
            this.Scope = scope;
            this.Code = code;
        }

        /// <summary>
        /// The reference rate name for fixings.
        /// </summary>
        /// <value>The reference rate name for fixings.</value>
        [DataMember(Name = "fixingReference", IsRequired = true, EmitDefaultValue = true)]
        public string FixingReference { get; set; }

        /// <summary>
        /// Number of days between spot and publication of the rate.
        /// </summary>
        /// <value>Number of days between spot and publication of the rate.</value>
        [DataMember(Name = "publicationDayLag", IsRequired = true, EmitDefaultValue = true)]
        public int PublicationDayLag { get; set; }

        /// <summary>
        /// The tenor of the payment. For an OIS index this is always 1 day. For other indices, e.g. LIBOR it will have a variable tenor typically between 1 day and 1 year.    For more information on tenors, see [knowledge base article KA-02097](https://support.lusid.com/knowledgebase/article/KA-02097)
        /// </summary>
        /// <value>The tenor of the payment. For an OIS index this is always 1 day. For other indices, e.g. LIBOR it will have a variable tenor typically between 1 day and 1 year.    For more information on tenors, see [knowledge base article KA-02097](https://support.lusid.com/knowledgebase/article/KA-02097)</value>
        [DataMember(Name = "paymentTenor", IsRequired = true, EmitDefaultValue = true)]
        public string PaymentTenor { get; set; }

        /// <summary>
        /// when calculating the fraction of a year between two dates, what convention is used to represent the number of days in a year  and difference between them.  For more information on day counts, see [knowledge base article KA-01798](https://support.lusid.com/knowledgebase/article/KA-01798)                Supported string (enumeration) values are: [Actual360, Act360, MoneyMarket, Actual365, Act365, Thirty360, ThirtyU360, Bond, ThirtyE360, EuroBond, ActualActual, ActAct, ActActIsda, ActActIsma, ActActIcma, OneOne, Act364, Act365F, Act365L, Act365_25, Act252, Bus252, NL360, NL365].
        /// </summary>
        /// <value>when calculating the fraction of a year between two dates, what convention is used to represent the number of days in a year  and difference between them.  For more information on day counts, see [knowledge base article KA-01798](https://support.lusid.com/knowledgebase/article/KA-01798)                Supported string (enumeration) values are: [Actual360, Act360, MoneyMarket, Actual365, Act365, Thirty360, ThirtyU360, Bond, ThirtyE360, EuroBond, ActualActual, ActAct, ActActIsda, ActActIsma, ActActIcma, OneOne, Act364, Act365F, Act365L, Act365_25, Act252, Bus252, NL360, NL365].</value>
        [DataMember(Name = "dayCountConvention", IsRequired = true, EmitDefaultValue = true)]
        public string DayCountConvention { get; set; }

        /// <summary>
        /// Currency of the index convention.
        /// </summary>
        /// <value>Currency of the index convention.</value>
        [DataMember(Name = "currency", IsRequired = true, EmitDefaultValue = true)]
        public string Currency { get; set; }

        /// <summary>
        /// The name of the index for which this represents the conventions of.  For instance, \&quot;SOFR\&quot;, \&quot;LIBOR\&quot;, \&quot;EURIBOR\&quot;, etc.  Defaults to \&quot;INDEX\&quot; if not specified.
        /// </summary>
        /// <value>The name of the index for which this represents the conventions of.  For instance, \&quot;SOFR\&quot;, \&quot;LIBOR\&quot;, \&quot;EURIBOR\&quot;, etc.  Defaults to \&quot;INDEX\&quot; if not specified.</value>
        [DataMember(Name = "indexName", EmitDefaultValue = true)]
        public string IndexName { get; set; }

        /// <summary>
        /// The scope used when updating or inserting the convention.
        /// </summary>
        /// <value>The scope used when updating or inserting the convention.</value>
        [DataMember(Name = "scope", EmitDefaultValue = true)]
        public string Scope { get; set; }

        /// <summary>
        /// The code of the convention.
        /// </summary>
        /// <value>The code of the convention.</value>
        [DataMember(Name = "code", EmitDefaultValue = true)]
        public string Code { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class IndexConvention {\n");
            sb.Append("  FixingReference: ").Append(FixingReference).Append("\n");
            sb.Append("  PublicationDayLag: ").Append(PublicationDayLag).Append("\n");
            sb.Append("  PaymentTenor: ").Append(PaymentTenor).Append("\n");
            sb.Append("  DayCountConvention: ").Append(DayCountConvention).Append("\n");
            sb.Append("  Currency: ").Append(Currency).Append("\n");
            sb.Append("  IndexName: ").Append(IndexName).Append("\n");
            sb.Append("  Scope: ").Append(Scope).Append("\n");
            sb.Append("  Code: ").Append(Code).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as IndexConvention);
        }

        /// <summary>
        /// Returns true if IndexConvention instances are equal
        /// </summary>
        /// <param name="input">Instance of IndexConvention to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(IndexConvention input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.FixingReference == input.FixingReference ||
                    (this.FixingReference != null &&
                    this.FixingReference.Equals(input.FixingReference))
                ) && 
                (
                    this.PublicationDayLag == input.PublicationDayLag ||
                    this.PublicationDayLag.Equals(input.PublicationDayLag)
                ) && 
                (
                    this.PaymentTenor == input.PaymentTenor ||
                    (this.PaymentTenor != null &&
                    this.PaymentTenor.Equals(input.PaymentTenor))
                ) && 
                (
                    this.DayCountConvention == input.DayCountConvention ||
                    (this.DayCountConvention != null &&
                    this.DayCountConvention.Equals(input.DayCountConvention))
                ) && 
                (
                    this.Currency == input.Currency ||
                    (this.Currency != null &&
                    this.Currency.Equals(input.Currency))
                ) && 
                (
                    this.IndexName == input.IndexName ||
                    (this.IndexName != null &&
                    this.IndexName.Equals(input.IndexName))
                ) && 
                (
                    this.Scope == input.Scope ||
                    (this.Scope != null &&
                    this.Scope.Equals(input.Scope))
                ) && 
                (
                    this.Code == input.Code ||
                    (this.Code != null &&
                    this.Code.Equals(input.Code))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.FixingReference != null)
                {
                    hashCode = (hashCode * 59) + this.FixingReference.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.PublicationDayLag.GetHashCode();
                if (this.PaymentTenor != null)
                {
                    hashCode = (hashCode * 59) + this.PaymentTenor.GetHashCode();
                }
                if (this.DayCountConvention != null)
                {
                    hashCode = (hashCode * 59) + this.DayCountConvention.GetHashCode();
                }
                if (this.Currency != null)
                {
                    hashCode = (hashCode * 59) + this.Currency.GetHashCode();
                }
                if (this.IndexName != null)
                {
                    hashCode = (hashCode * 59) + this.IndexName.GetHashCode();
                }
                if (this.Scope != null)
                {
                    hashCode = (hashCode * 59) + this.Scope.GetHashCode();
                }
                if (this.Code != null)
                {
                    hashCode = (hashCode * 59) + this.Code.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // FixingReference (string) maxLength
            if (this.FixingReference != null && this.FixingReference.Length > 64)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for FixingReference, length must be less than 64.", new [] { "FixingReference" });
            }

            // FixingReference (string) minLength
            if (this.FixingReference != null && this.FixingReference.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for FixingReference, length must be greater than 0.", new [] { "FixingReference" });
            }

            // PaymentTenor (string) maxLength
            if (this.PaymentTenor != null && this.PaymentTenor.Length > 32)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PaymentTenor, length must be less than 32.", new [] { "PaymentTenor" });
            }

            // PaymentTenor (string) minLength
            if (this.PaymentTenor != null && this.PaymentTenor.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PaymentTenor, length must be greater than 0.", new [] { "PaymentTenor" });
            }

            // DayCountConvention (string) maxLength
            if (this.DayCountConvention != null && this.DayCountConvention.Length > 32)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for DayCountConvention, length must be less than 32.", new [] { "DayCountConvention" });
            }

            // DayCountConvention (string) minLength
            if (this.DayCountConvention != null && this.DayCountConvention.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for DayCountConvention, length must be greater than 0.", new [] { "DayCountConvention" });
            }

            // IndexName (string) maxLength
            if (this.IndexName != null && this.IndexName.Length > 64)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for IndexName, length must be less than 64.", new [] { "IndexName" });
            }

            // IndexName (string) minLength
            if (this.IndexName != null && this.IndexName.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for IndexName, length must be greater than 0.", new [] { "IndexName" });
            }

            // Scope (string) maxLength
            if (this.Scope != null && this.Scope.Length > 256)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Scope, length must be less than 256.", new [] { "Scope" });
            }

            // Scope (string) minLength
            if (this.Scope != null && this.Scope.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Scope, length must be greater than 1.", new [] { "Scope" });
            }

            // Scope (string) pattern
            Regex regexScope = new Regex(@"^[a-zA-Z0-9\-_]+$", RegexOptions.CultureInvariant);
            if (false == regexScope.Match(this.Scope).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Scope, must match a pattern of " + regexScope, new [] { "Scope" });
            }

            // Code (string) maxLength
            if (this.Code != null && this.Code.Length > 256)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Code, length must be less than 256.", new [] { "Code" });
            }

            // Code (string) minLength
            if (this.Code != null && this.Code.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Code, length must be greater than 1.", new [] { "Code" });
            }

            // Code (string) pattern
            Regex regexCode = new Regex(@"^[a-zA-Z0-9\-_]+$", RegexOptions.CultureInvariant);
            if (false == regexCode.Match(this.Code).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Code, must match a pattern of " + regexCode, new [] { "Code" });
            }

            yield break;
        }
    }
}
