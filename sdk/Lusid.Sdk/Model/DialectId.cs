/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Lusid.Sdk.Client.OpenAPIDateConverter;

namespace Lusid.Sdk.Model
{
    /// <summary>
    /// Unique identifier of a given Dialect
    /// </summary>
    [DataContract(Name = "DialectId")]
    public partial class DialectId : IEquatable<DialectId>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DialectId" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected DialectId() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="DialectId" /> class.
        /// </summary>
        /// <param name="scope">The Scope of the dialect. (required).</param>
        /// <param name="vendor">The vendor of the dialect, the entity that created it. e.g. ISDA, FINBOURNE. (required).</param>
        /// <param name="sourceSystem">The source system of the dialect, the system that understands it. e.g. LUSID, QuantLib. (required).</param>
        /// <param name="varVersion">The semantic version of the dialect: MAJOR.MINOR.PATCH. (required).</param>
        /// <param name="serialisationFormat">The serialisation format of a document in this dialect. e.g. JSON, XML. (required).</param>
        /// <param name="entityType">The type of entity this dialect describes e.g. Instrument. (required).</param>
        public DialectId(string scope = default(string), string vendor = default(string), string sourceSystem = default(string), string varVersion = default(string), string serialisationFormat = default(string), string entityType = default(string))
        {
            // to ensure "scope" is required (not null)
            if (scope == null)
            {
                throw new ArgumentNullException("scope is a required property for DialectId and cannot be null");
            }
            this.Scope = scope;
            // to ensure "vendor" is required (not null)
            if (vendor == null)
            {
                throw new ArgumentNullException("vendor is a required property for DialectId and cannot be null");
            }
            this.Vendor = vendor;
            // to ensure "sourceSystem" is required (not null)
            if (sourceSystem == null)
            {
                throw new ArgumentNullException("sourceSystem is a required property for DialectId and cannot be null");
            }
            this.SourceSystem = sourceSystem;
            // to ensure "varVersion" is required (not null)
            if (varVersion == null)
            {
                throw new ArgumentNullException("varVersion is a required property for DialectId and cannot be null");
            }
            this.VarVersion = varVersion;
            // to ensure "serialisationFormat" is required (not null)
            if (serialisationFormat == null)
            {
                throw new ArgumentNullException("serialisationFormat is a required property for DialectId and cannot be null");
            }
            this.SerialisationFormat = serialisationFormat;
            // to ensure "entityType" is required (not null)
            if (entityType == null)
            {
                throw new ArgumentNullException("entityType is a required property for DialectId and cannot be null");
            }
            this.EntityType = entityType;
        }

        /// <summary>
        /// The Scope of the dialect.
        /// </summary>
        /// <value>The Scope of the dialect.</value>
        [DataMember(Name = "scope", IsRequired = true, EmitDefaultValue = true)]
        public string Scope { get; set; }

        /// <summary>
        /// The vendor of the dialect, the entity that created it. e.g. ISDA, FINBOURNE.
        /// </summary>
        /// <value>The vendor of the dialect, the entity that created it. e.g. ISDA, FINBOURNE.</value>
        [DataMember(Name = "vendor", IsRequired = true, EmitDefaultValue = true)]
        public string Vendor { get; set; }

        /// <summary>
        /// The source system of the dialect, the system that understands it. e.g. LUSID, QuantLib.
        /// </summary>
        /// <value>The source system of the dialect, the system that understands it. e.g. LUSID, QuantLib.</value>
        [DataMember(Name = "sourceSystem", IsRequired = true, EmitDefaultValue = true)]
        public string SourceSystem { get; set; }

        /// <summary>
        /// The semantic version of the dialect: MAJOR.MINOR.PATCH.
        /// </summary>
        /// <value>The semantic version of the dialect: MAJOR.MINOR.PATCH.</value>
        [DataMember(Name = "version", IsRequired = true, EmitDefaultValue = true)]
        public string VarVersion { get; set; }

        /// <summary>
        /// The serialisation format of a document in this dialect. e.g. JSON, XML.
        /// </summary>
        /// <value>The serialisation format of a document in this dialect. e.g. JSON, XML.</value>
        [DataMember(Name = "serialisationFormat", IsRequired = true, EmitDefaultValue = true)]
        public string SerialisationFormat { get; set; }

        /// <summary>
        /// The type of entity this dialect describes e.g. Instrument.
        /// </summary>
        /// <value>The type of entity this dialect describes e.g. Instrument.</value>
        [DataMember(Name = "entityType", IsRequired = true, EmitDefaultValue = true)]
        public string EntityType { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DialectId {\n");
            sb.Append("  Scope: ").Append(Scope).Append("\n");
            sb.Append("  Vendor: ").Append(Vendor).Append("\n");
            sb.Append("  SourceSystem: ").Append(SourceSystem).Append("\n");
            sb.Append("  VarVersion: ").Append(VarVersion).Append("\n");
            sb.Append("  SerialisationFormat: ").Append(SerialisationFormat).Append("\n");
            sb.Append("  EntityType: ").Append(EntityType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DialectId);
        }

        /// <summary>
        /// Returns true if DialectId instances are equal
        /// </summary>
        /// <param name="input">Instance of DialectId to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DialectId input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Scope == input.Scope ||
                    (this.Scope != null &&
                    this.Scope.Equals(input.Scope))
                ) && 
                (
                    this.Vendor == input.Vendor ||
                    (this.Vendor != null &&
                    this.Vendor.Equals(input.Vendor))
                ) && 
                (
                    this.SourceSystem == input.SourceSystem ||
                    (this.SourceSystem != null &&
                    this.SourceSystem.Equals(input.SourceSystem))
                ) && 
                (
                    this.VarVersion == input.VarVersion ||
                    (this.VarVersion != null &&
                    this.VarVersion.Equals(input.VarVersion))
                ) && 
                (
                    this.SerialisationFormat == input.SerialisationFormat ||
                    (this.SerialisationFormat != null &&
                    this.SerialisationFormat.Equals(input.SerialisationFormat))
                ) && 
                (
                    this.EntityType == input.EntityType ||
                    (this.EntityType != null &&
                    this.EntityType.Equals(input.EntityType))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Scope != null)
                {
                    hashCode = (hashCode * 59) + this.Scope.GetHashCode();
                }
                if (this.Vendor != null)
                {
                    hashCode = (hashCode * 59) + this.Vendor.GetHashCode();
                }
                if (this.SourceSystem != null)
                {
                    hashCode = (hashCode * 59) + this.SourceSystem.GetHashCode();
                }
                if (this.VarVersion != null)
                {
                    hashCode = (hashCode * 59) + this.VarVersion.GetHashCode();
                }
                if (this.SerialisationFormat != null)
                {
                    hashCode = (hashCode * 59) + this.SerialisationFormat.GetHashCode();
                }
                if (this.EntityType != null)
                {
                    hashCode = (hashCode * 59) + this.EntityType.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Scope (string) maxLength
            if (this.Scope != null && this.Scope.Length > 64)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Scope, length must be less than 64.", new [] { "Scope" });
            }

            // Scope (string) minLength
            if (this.Scope != null && this.Scope.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Scope, length must be greater than 1.", new [] { "Scope" });
            }

            // Scope (string) pattern
            Regex regexScope = new Regex(@"^[a-zA-Z0-9\-_]+$", RegexOptions.CultureInvariant);
            if (false == regexScope.Match(this.Scope).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Scope, must match a pattern of " + regexScope, new [] { "Scope" });
            }

            // Vendor (string) maxLength
            if (this.Vendor != null && this.Vendor.Length > 64)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Vendor, length must be less than 64.", new [] { "Vendor" });
            }

            // Vendor (string) minLength
            if (this.Vendor != null && this.Vendor.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Vendor, length must be greater than 1.", new [] { "Vendor" });
            }

            // Vendor (string) pattern
            Regex regexVendor = new Regex(@"^[a-zA-Z0-9\-_]+$", RegexOptions.CultureInvariant);
            if (false == regexVendor.Match(this.Vendor).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Vendor, must match a pattern of " + regexVendor, new [] { "Vendor" });
            }

            // SourceSystem (string) maxLength
            if (this.SourceSystem != null && this.SourceSystem.Length > 64)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SourceSystem, length must be less than 64.", new [] { "SourceSystem" });
            }

            // SourceSystem (string) minLength
            if (this.SourceSystem != null && this.SourceSystem.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SourceSystem, length must be greater than 1.", new [] { "SourceSystem" });
            }

            // SourceSystem (string) pattern
            Regex regexSourceSystem = new Regex(@"^[a-zA-Z0-9\-_]+$", RegexOptions.CultureInvariant);
            if (false == regexSourceSystem.Match(this.SourceSystem).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SourceSystem, must match a pattern of " + regexSourceSystem, new [] { "SourceSystem" });
            }

            // VarVersion (string) maxLength
            if (this.VarVersion != null && this.VarVersion.Length > 30)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for VarVersion, length must be less than 30.", new [] { "VarVersion" });
            }

            // VarVersion (string) minLength
            if (this.VarVersion != null && this.VarVersion.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for VarVersion, length must be greater than 1.", new [] { "VarVersion" });
            }

            // VarVersion (string) pattern
            Regex regexVarVersion = new Regex(@"^(0|[1-9]\d*)\.(0|[1-9]\d*)\.(0|[1-9]\d*)$", RegexOptions.CultureInvariant);
            if (false == regexVarVersion.Match(this.VarVersion).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for VarVersion, must match a pattern of " + regexVarVersion, new [] { "VarVersion" });
            }

            // SerialisationFormat (string) minLength
            if (this.SerialisationFormat != null && this.SerialisationFormat.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SerialisationFormat, length must be greater than 1.", new [] { "SerialisationFormat" });
            }

            // EntityType (string) minLength
            if (this.EntityType != null && this.EntityType.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for EntityType, length must be greater than 1.", new [] { "EntityType" });
            }

            yield break;
        }
    }
}
