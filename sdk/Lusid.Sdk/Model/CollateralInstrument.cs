/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Lusid.Sdk.Client.OpenAPIDateConverter;

namespace Lusid.Sdk.Model
{
    /// <summary>
    /// Wrapper for one instrument in a larger collateral basket, as part of a repurchase agreement modelled as a FlexibleRepo.
    /// </summary>
    [DataContract(Name = "CollateralInstrument")]
    public partial class CollateralInstrument : IEquatable<CollateralInstrument>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CollateralInstrument" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CollateralInstrument() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CollateralInstrument" /> class.
        /// </summary>
        /// <param name="units">The amount of the instrument in the basket for this repurchase agreement. (required).</param>
        /// <param name="instrument">instrument (required).</param>
        public CollateralInstrument(decimal units = default(decimal), MasteredInstrument instrument = default(MasteredInstrument))
        {
            this.Units = units;
            // to ensure "instrument" is required (not null)
            if (instrument == null)
            {
                throw new ArgumentNullException("instrument is a required property for CollateralInstrument and cannot be null");
            }
            this.Instrument = instrument;
        }

        /// <summary>
        /// The amount of the instrument in the basket for this repurchase agreement.
        /// </summary>
        /// <value>The amount of the instrument in the basket for this repurchase agreement.</value>
        [DataMember(Name = "units", IsRequired = true, EmitDefaultValue = true)]
        public decimal Units { get; set; }

        /// <summary>
        /// Gets or Sets Instrument
        /// </summary>
        [DataMember(Name = "instrument", IsRequired = true, EmitDefaultValue = true)]
        public MasteredInstrument Instrument { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CollateralInstrument {\n");
            sb.Append("  Units: ").Append(Units).Append("\n");
            sb.Append("  Instrument: ").Append(Instrument).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CollateralInstrument);
        }

        /// <summary>
        /// Returns true if CollateralInstrument instances are equal
        /// </summary>
        /// <param name="input">Instance of CollateralInstrument to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CollateralInstrument input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Units == input.Units ||
                    this.Units.Equals(input.Units)
                ) && 
                (
                    this.Instrument == input.Instrument ||
                    (this.Instrument != null &&
                    this.Instrument.Equals(input.Instrument))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Units.GetHashCode();
                if (this.Instrument != null)
                {
                    hashCode = (hashCode * 59) + this.Instrument.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
