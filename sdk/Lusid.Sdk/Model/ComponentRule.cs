/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Lusid.Sdk.Client.OpenAPIDateConverter;

namespace Lusid.Sdk.Model
{
    /// <summary>
    /// ComponentRule
    /// </summary>
    [DataContract(Name = "ComponentRule")]
    public partial class ComponentRule : IEquatable<ComponentRule>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ComponentRule" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ComponentRule() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ComponentRule" /> class.
        /// </summary>
        /// <param name="matchCriteria">matchCriteria (required).</param>
        /// <param name="components">components.</param>
        public ComponentRule(string matchCriteria = default(string), List<ComponentFilter> components = default(List<ComponentFilter>))
        {
            // to ensure "matchCriteria" is required (not null)
            if (matchCriteria == null)
            {
                throw new ArgumentNullException("matchCriteria is a required property for ComponentRule and cannot be null");
            }
            this.MatchCriteria = matchCriteria;
            this.Components = components;
        }

        /// <summary>
        /// Gets or Sets MatchCriteria
        /// </summary>
        [DataMember(Name = "matchCriteria", IsRequired = true, EmitDefaultValue = true)]
        public string MatchCriteria { get; set; }

        /// <summary>
        /// Gets or Sets Components
        /// </summary>
        [DataMember(Name = "components", EmitDefaultValue = false)]
        public List<ComponentFilter> Components { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ComponentRule {\n");
            sb.Append("  MatchCriteria: ").Append(MatchCriteria).Append("\n");
            sb.Append("  Components: ").Append(Components).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ComponentRule);
        }

        /// <summary>
        /// Returns true if ComponentRule instances are equal
        /// </summary>
        /// <param name="input">Instance of ComponentRule to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ComponentRule input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.MatchCriteria == input.MatchCriteria ||
                    (this.MatchCriteria != null &&
                    this.MatchCriteria.Equals(input.MatchCriteria))
                ) && 
                (
                    this.Components == input.Components ||
                    this.Components != null &&
                    input.Components != null &&
                    this.Components.SequenceEqual(input.Components)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.MatchCriteria != null)
                {
                    hashCode = (hashCode * 59) + this.MatchCriteria.GetHashCode();
                }
                if (this.Components != null)
                {
                    hashCode = (hashCode * 59) + this.Components.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // MatchCriteria (string) maxLength
            if (this.MatchCriteria != null && this.MatchCriteria.Length > 16384)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for MatchCriteria, length must be less than 16384.", new [] { "MatchCriteria" });
            }

            // MatchCriteria (string) minLength
            if (this.MatchCriteria != null && this.MatchCriteria.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for MatchCriteria, length must be greater than 1.", new [] { "MatchCriteria" });
            }

            // MatchCriteria (string) pattern
            Regex regexMatchCriteria = new Regex(@"^[\s\S]*$", RegexOptions.CultureInvariant);
            if (false == regexMatchCriteria.Match(this.MatchCriteria).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for MatchCriteria, must match a pattern of " + regexMatchCriteria, new [] { "MatchCriteria" });
            }

            yield break;
        }
    }
}
