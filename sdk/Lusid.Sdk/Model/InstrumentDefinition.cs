/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Lusid.Sdk.Client.OpenAPIDateConverter;

namespace Lusid.Sdk.Model
{
    /// <summary>
    /// InstrumentDefinition
    /// </summary>
    [DataContract(Name = "InstrumentDefinition")]
    public partial class InstrumentDefinition : IEquatable<InstrumentDefinition>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InstrumentDefinition" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected InstrumentDefinition() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="InstrumentDefinition" /> class.
        /// </summary>
        /// <param name="name">The name of the instrument. (required).</param>
        /// <param name="identifiers">A set of identifiers that can be used to identify the instrument. At least one of these must be configured to be a unique identifier. (required).</param>
        /// <param name="properties">Set of unique instrument properties and associated values to store with the instrument. Each property must be from the &#39;Instrument&#39; domain..</param>
        /// <param name="lookThroughPortfolioId">lookThroughPortfolioId.</param>
        /// <param name="definition">definition.</param>
        /// <param name="settlementCycle">settlementCycle.</param>
        public InstrumentDefinition(string name = default(string), Dictionary<string, InstrumentIdValue> identifiers = default(Dictionary<string, InstrumentIdValue>), List<Property> properties = default(List<Property>), ResourceId lookThroughPortfolioId = default(ResourceId), LusidInstrument definition = default(LusidInstrument), SettlementCycle settlementCycle = default(SettlementCycle))
        {
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for InstrumentDefinition and cannot be null");
            }
            this.Name = name;
            // to ensure "identifiers" is required (not null)
            if (identifiers == null)
            {
                throw new ArgumentNullException("identifiers is a required property for InstrumentDefinition and cannot be null");
            }
            this.Identifiers = identifiers;
            this.Properties = properties;
            this.LookThroughPortfolioId = lookThroughPortfolioId;
            this.Definition = definition;
            this.SettlementCycle = settlementCycle;
        }

        /// <summary>
        /// The name of the instrument.
        /// </summary>
        /// <value>The name of the instrument.</value>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// A set of identifiers that can be used to identify the instrument. At least one of these must be configured to be a unique identifier.
        /// </summary>
        /// <value>A set of identifiers that can be used to identify the instrument. At least one of these must be configured to be a unique identifier.</value>
        [DataMember(Name = "identifiers", IsRequired = true, EmitDefaultValue = true)]
        public Dictionary<string, InstrumentIdValue> Identifiers { get; set; }

        /// <summary>
        /// Set of unique instrument properties and associated values to store with the instrument. Each property must be from the &#39;Instrument&#39; domain.
        /// </summary>
        /// <value>Set of unique instrument properties and associated values to store with the instrument. Each property must be from the &#39;Instrument&#39; domain.</value>
        [DataMember(Name = "properties", EmitDefaultValue = true)]
        public List<Property> Properties { get; set; }

        /// <summary>
        /// Gets or Sets LookThroughPortfolioId
        /// </summary>
        [DataMember(Name = "lookThroughPortfolioId", EmitDefaultValue = false)]
        public ResourceId LookThroughPortfolioId { get; set; }

        /// <summary>
        /// Gets or Sets Definition
        /// </summary>
        [DataMember(Name = "definition", EmitDefaultValue = false)]
        public LusidInstrument Definition { get; set; }

        /// <summary>
        /// Gets or Sets SettlementCycle
        /// </summary>
        [DataMember(Name = "settlementCycle", EmitDefaultValue = false)]
        public SettlementCycle SettlementCycle { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class InstrumentDefinition {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Identifiers: ").Append(Identifiers).Append("\n");
            sb.Append("  Properties: ").Append(Properties).Append("\n");
            sb.Append("  LookThroughPortfolioId: ").Append(LookThroughPortfolioId).Append("\n");
            sb.Append("  Definition: ").Append(Definition).Append("\n");
            sb.Append("  SettlementCycle: ").Append(SettlementCycle).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as InstrumentDefinition);
        }

        /// <summary>
        /// Returns true if InstrumentDefinition instances are equal
        /// </summary>
        /// <param name="input">Instance of InstrumentDefinition to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InstrumentDefinition input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Identifiers == input.Identifiers ||
                    this.Identifiers != null &&
                    input.Identifiers != null &&
                    this.Identifiers.SequenceEqual(input.Identifiers)
                ) && 
                (
                    this.Properties == input.Properties ||
                    this.Properties != null &&
                    input.Properties != null &&
                    this.Properties.SequenceEqual(input.Properties)
                ) && 
                (
                    this.LookThroughPortfolioId == input.LookThroughPortfolioId ||
                    (this.LookThroughPortfolioId != null &&
                    this.LookThroughPortfolioId.Equals(input.LookThroughPortfolioId))
                ) && 
                (
                    this.Definition == input.Definition ||
                    (this.Definition != null &&
                    this.Definition.Equals(input.Definition))
                ) && 
                (
                    this.SettlementCycle == input.SettlementCycle ||
                    (this.SettlementCycle != null &&
                    this.SettlementCycle.Equals(input.SettlementCycle))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.Identifiers != null)
                {
                    hashCode = (hashCode * 59) + this.Identifiers.GetHashCode();
                }
                if (this.Properties != null)
                {
                    hashCode = (hashCode * 59) + this.Properties.GetHashCode();
                }
                if (this.LookThroughPortfolioId != null)
                {
                    hashCode = (hashCode * 59) + this.LookThroughPortfolioId.GetHashCode();
                }
                if (this.Definition != null)
                {
                    hashCode = (hashCode * 59) + this.Definition.GetHashCode();
                }
                if (this.SettlementCycle != null)
                {
                    hashCode = (hashCode * 59) + this.SettlementCycle.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Name (string) minLength
            if (this.Name != null && this.Name.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Name, length must be greater than 1.", new [] { "Name" });
            }

            yield break;
        }
    }
}
