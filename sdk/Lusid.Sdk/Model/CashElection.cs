/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Lusid.Sdk.Client.OpenAPIDateConverter;

namespace Lusid.Sdk.Model
{
    /// <summary>
    /// Cash election for Events that result in a cash payment.
    /// </summary>
    [DataContract(Name = "CashElection")]
    public partial class CashElection : IEquatable<CashElection>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CashElection" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CashElection() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CashElection" /> class.
        /// </summary>
        /// <param name="electionKey">Unique key used to identify this election. (required).</param>
        /// <param name="exchangeRate">The exchange rate if this is not the declared CashElection.  Defaults to 1 if Election is Declared..</param>
        /// <param name="dividendRate">The payment rate for this CashElection. (required).</param>
        /// <param name="isChosen">Has this election been chosen.  Only one Election may be Chosen per Event..</param>
        /// <param name="isDeclared">Is this the declared CashElection.  Only one Election may be Declared per Event..</param>
        /// <param name="isDefault">Is this election the default.  Only one Election may be Default per Event.</param>
        /// <param name="dividendCurrency">The payment currency for this CashElection. (required).</param>
        public CashElection(string electionKey = default(string), decimal exchangeRate = default(decimal), decimal dividendRate = default(decimal), bool isChosen = default(bool), bool isDeclared = default(bool), bool isDefault = default(bool), string dividendCurrency = default(string))
        {
            // to ensure "electionKey" is required (not null)
            if (electionKey == null)
            {
                throw new ArgumentNullException("electionKey is a required property for CashElection and cannot be null");
            }
            this.ElectionKey = electionKey;
            this.DividendRate = dividendRate;
            // to ensure "dividendCurrency" is required (not null)
            if (dividendCurrency == null)
            {
                throw new ArgumentNullException("dividendCurrency is a required property for CashElection and cannot be null");
            }
            this.DividendCurrency = dividendCurrency;
            this.ExchangeRate = exchangeRate;
            this.IsChosen = isChosen;
            this.IsDeclared = isDeclared;
            this.IsDefault = isDefault;
        }

        /// <summary>
        /// Unique key used to identify this election.
        /// </summary>
        /// <value>Unique key used to identify this election.</value>
        [DataMember(Name = "electionKey", IsRequired = true, EmitDefaultValue = true)]
        public string ElectionKey { get; set; }

        /// <summary>
        /// The exchange rate if this is not the declared CashElection.  Defaults to 1 if Election is Declared.
        /// </summary>
        /// <value>The exchange rate if this is not the declared CashElection.  Defaults to 1 if Election is Declared.</value>
        [DataMember(Name = "exchangeRate", EmitDefaultValue = true)]
        public decimal ExchangeRate { get; set; }

        /// <summary>
        /// The payment rate for this CashElection.
        /// </summary>
        /// <value>The payment rate for this CashElection.</value>
        [DataMember(Name = "dividendRate", IsRequired = true, EmitDefaultValue = true)]
        public decimal DividendRate { get; set; }

        /// <summary>
        /// Has this election been chosen.  Only one Election may be Chosen per Event.
        /// </summary>
        /// <value>Has this election been chosen.  Only one Election may be Chosen per Event.</value>
        [DataMember(Name = "isChosen", EmitDefaultValue = true)]
        public bool IsChosen { get; set; }

        /// <summary>
        /// Is this the declared CashElection.  Only one Election may be Declared per Event.
        /// </summary>
        /// <value>Is this the declared CashElection.  Only one Election may be Declared per Event.</value>
        [DataMember(Name = "isDeclared", EmitDefaultValue = true)]
        public bool IsDeclared { get; set; }

        /// <summary>
        /// Is this election the default.  Only one Election may be Default per Event
        /// </summary>
        /// <value>Is this election the default.  Only one Election may be Default per Event</value>
        [DataMember(Name = "isDefault", EmitDefaultValue = true)]
        public bool IsDefault { get; set; }

        /// <summary>
        /// The payment currency for this CashElection.
        /// </summary>
        /// <value>The payment currency for this CashElection.</value>
        [DataMember(Name = "dividendCurrency", IsRequired = true, EmitDefaultValue = true)]
        public string DividendCurrency { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CashElection {\n");
            sb.Append("  ElectionKey: ").Append(ElectionKey).Append("\n");
            sb.Append("  ExchangeRate: ").Append(ExchangeRate).Append("\n");
            sb.Append("  DividendRate: ").Append(DividendRate).Append("\n");
            sb.Append("  IsChosen: ").Append(IsChosen).Append("\n");
            sb.Append("  IsDeclared: ").Append(IsDeclared).Append("\n");
            sb.Append("  IsDefault: ").Append(IsDefault).Append("\n");
            sb.Append("  DividendCurrency: ").Append(DividendCurrency).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CashElection);
        }

        /// <summary>
        /// Returns true if CashElection instances are equal
        /// </summary>
        /// <param name="input">Instance of CashElection to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CashElection input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.ElectionKey == input.ElectionKey ||
                    (this.ElectionKey != null &&
                    this.ElectionKey.Equals(input.ElectionKey))
                ) && 
                (
                    this.ExchangeRate == input.ExchangeRate ||
                    this.ExchangeRate.Equals(input.ExchangeRate)
                ) && 
                (
                    this.DividendRate == input.DividendRate ||
                    this.DividendRate.Equals(input.DividendRate)
                ) && 
                (
                    this.IsChosen == input.IsChosen ||
                    this.IsChosen.Equals(input.IsChosen)
                ) && 
                (
                    this.IsDeclared == input.IsDeclared ||
                    this.IsDeclared.Equals(input.IsDeclared)
                ) && 
                (
                    this.IsDefault == input.IsDefault ||
                    this.IsDefault.Equals(input.IsDefault)
                ) && 
                (
                    this.DividendCurrency == input.DividendCurrency ||
                    (this.DividendCurrency != null &&
                    this.DividendCurrency.Equals(input.DividendCurrency))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ElectionKey != null)
                {
                    hashCode = (hashCode * 59) + this.ElectionKey.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.ExchangeRate.GetHashCode();
                hashCode = (hashCode * 59) + this.DividendRate.GetHashCode();
                hashCode = (hashCode * 59) + this.IsChosen.GetHashCode();
                hashCode = (hashCode * 59) + this.IsDeclared.GetHashCode();
                hashCode = (hashCode * 59) + this.IsDefault.GetHashCode();
                if (this.DividendCurrency != null)
                {
                    hashCode = (hashCode * 59) + this.DividendCurrency.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // ElectionKey (string) minLength
            if (this.ElectionKey != null && this.ElectionKey.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ElectionKey, length must be greater than 1.", new [] { "ElectionKey" });
            }

            yield break;
        }
    }
}
