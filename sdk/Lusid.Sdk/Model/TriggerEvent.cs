/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using JsonSubTypes;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Lusid.Sdk.Client.OpenAPIDateConverter;

namespace Lusid.Sdk.Model
{
    /// <summary>
    /// Definition of a trigger event.  This is an event that occurs on transformation of an option instrument being  triggered by a barrier/touch price level being hit by the underlying asset.
    /// </summary>
    [DataContract(Name = "TriggerEvent")]
    [JsonConverter(typeof(JsonSubtypes), "InstrumentEventType")]
    public partial class TriggerEvent : InstrumentEvent, IEquatable<TriggerEvent>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TriggerEvent" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected TriggerEvent() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="TriggerEvent" /> class.
        /// </summary>
        /// <param name="level">The underlying price level that triggers the event (required).</param>
        /// <param name="triggerType">The type of the trigger; valid options are Knock-In, Knock-Out, Touch or No-Touch (required).</param>
        /// <param name="triggerDirection">The direction of the trigger; valid options are Up and Down (required).</param>
        /// <param name="triggerDate">The date the trigger happens at. (required).</param>
        /// <param name="maturityDate">The date the trigger takes effect. (required).</param>
        /// <param name="instrumentEventType">The Type of Event. The available values are: TransitionEvent, InformationalEvent, OpenEvent, CloseEvent, StockSplitEvent, BondDefaultEvent, CashDividendEvent, AmortisationEvent, CashFlowEvent, ExerciseEvent, ResetEvent, TriggerEvent, RawVendorEvent, InformationalErrorEvent, BondCouponEvent, DividendReinvestmentEvent, AccumulationEvent, BondPrincipalEvent, DividendOptionEvent, MaturityEvent, FxForwardSettlementEvent, ExpiryEvent, ScripDividendEvent, StockDividendEvent, ReverseStockSplitEvent, CapitalDistributionEvent, SpinOffEvent, MergerEvent, FutureExpiryEvent, SwapCashFlowEvent, SwapPrincipalEvent, CreditPremiumCashFlowEvent, CdsCreditEvent, CdxCreditEvent, MbsCouponEvent, MbsPrincipalEvent, BonusIssueEvent, MbsPrincipalWriteOffEvent, MbsInterestDeferralEvent, MbsInterestShortfallEvent, TenderEvent, CallOnIntermediateSecuritiesEvent, IntermediateSecuritiesDistributionEvent, OptionExercisePhysicalEvent, OptionExerciseCashEvent, ProtectionPayoutCashFlowEvent, TermDepositInterestEvent, TermDepositPrincipalEvent, EarlyRedemptionEvent, FutureMarkToMarketEvent, AdjustGlobalCommitmentEvent, ContractInitialisationEvent, DrawdownEvent, LoanInterestRepaymentEvent, UpdateDepositAmountEvent, LoanPrincipalRepaymentEvent, DepositInterestPaymentEvent (required) (default to &quot;TriggerEvent&quot;).</param>
        public TriggerEvent(decimal level = default(decimal), string triggerType = default(string), string triggerDirection = default(string), DateTimeOffset triggerDate = default(DateTimeOffset), DateTimeOffset maturityDate = default(DateTimeOffset), InstrumentEventTypeEnum instrumentEventType = default(InstrumentEventTypeEnum)) : base(instrumentEventType)
        {
            this.Level = level;
            // to ensure "triggerType" is required (not null)
            if (triggerType == null)
            {
                throw new ArgumentNullException("triggerType is a required property for TriggerEvent and cannot be null");
            }
            this.TriggerType = triggerType;
            // to ensure "triggerDirection" is required (not null)
            if (triggerDirection == null)
            {
                throw new ArgumentNullException("triggerDirection is a required property for TriggerEvent and cannot be null");
            }
            this.TriggerDirection = triggerDirection;
            this.TriggerDate = triggerDate;
            this.MaturityDate = maturityDate;
        }

        /// <summary>
        /// The underlying price level that triggers the event
        /// </summary>
        /// <value>The underlying price level that triggers the event</value>
        [DataMember(Name = "level", IsRequired = true, EmitDefaultValue = true)]
        public decimal Level { get; set; }

        /// <summary>
        /// The type of the trigger; valid options are Knock-In, Knock-Out, Touch or No-Touch
        /// </summary>
        /// <value>The type of the trigger; valid options are Knock-In, Knock-Out, Touch or No-Touch</value>
        [DataMember(Name = "triggerType", IsRequired = true, EmitDefaultValue = true)]
        public string TriggerType { get; set; }

        /// <summary>
        /// The direction of the trigger; valid options are Up and Down
        /// </summary>
        /// <value>The direction of the trigger; valid options are Up and Down</value>
        [DataMember(Name = "triggerDirection", IsRequired = true, EmitDefaultValue = true)]
        public string TriggerDirection { get; set; }

        /// <summary>
        /// The date the trigger happens at.
        /// </summary>
        /// <value>The date the trigger happens at.</value>
        [DataMember(Name = "triggerDate", IsRequired = true, EmitDefaultValue = true)]
        public DateTimeOffset TriggerDate { get; set; }

        /// <summary>
        /// The date the trigger takes effect.
        /// </summary>
        /// <value>The date the trigger takes effect.</value>
        [DataMember(Name = "maturityDate", IsRequired = true, EmitDefaultValue = true)]
        public DateTimeOffset MaturityDate { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class TriggerEvent {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  Level: ").Append(Level).Append("\n");
            sb.Append("  TriggerType: ").Append(TriggerType).Append("\n");
            sb.Append("  TriggerDirection: ").Append(TriggerDirection).Append("\n");
            sb.Append("  TriggerDate: ").Append(TriggerDate).Append("\n");
            sb.Append("  MaturityDate: ").Append(MaturityDate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TriggerEvent);
        }

        /// <summary>
        /// Returns true if TriggerEvent instances are equal
        /// </summary>
        /// <param name="input">Instance of TriggerEvent to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TriggerEvent input)
        {
            if (input == null)
            {
                return false;
            }
            return base.Equals(input) && 
                (
                    this.Level == input.Level ||
                    this.Level.Equals(input.Level)
                ) && base.Equals(input) && 
                (
                    this.TriggerType == input.TriggerType ||
                    (this.TriggerType != null &&
                    this.TriggerType.Equals(input.TriggerType))
                ) && base.Equals(input) && 
                (
                    this.TriggerDirection == input.TriggerDirection ||
                    (this.TriggerDirection != null &&
                    this.TriggerDirection.Equals(input.TriggerDirection))
                ) && base.Equals(input) && 
                (
                    this.TriggerDate == input.TriggerDate ||
                    (this.TriggerDate != null &&
                    this.TriggerDate.Equals(input.TriggerDate))
                ) && base.Equals(input) && 
                (
                    this.MaturityDate == input.MaturityDate ||
                    (this.MaturityDate != null &&
                    this.MaturityDate.Equals(input.MaturityDate))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = base.GetHashCode();
                hashCode = (hashCode * 59) + this.Level.GetHashCode();
                if (this.TriggerType != null)
                {
                    hashCode = (hashCode * 59) + this.TriggerType.GetHashCode();
                }
                if (this.TriggerDirection != null)
                {
                    hashCode = (hashCode * 59) + this.TriggerDirection.GetHashCode();
                }
                if (this.TriggerDate != null)
                {
                    hashCode = (hashCode * 59) + this.TriggerDate.GetHashCode();
                }
                if (this.MaturityDate != null)
                {
                    hashCode = (hashCode * 59) + this.MaturityDate.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            return this.BaseValidate(validationContext);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        protected IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> BaseValidate(ValidationContext validationContext)
        {
            foreach (var x in base.BaseValidate(validationContext))
            {
                yield return x;
            }
            // TriggerType (string) minLength
            if (this.TriggerType != null && this.TriggerType.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for TriggerType, length must be greater than 1.", new [] { "TriggerType" });
            }

            // TriggerDirection (string) minLength
            if (this.TriggerDirection != null && this.TriggerDirection.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for TriggerDirection, length must be greater than 1.", new [] { "TriggerDirection" });
            }

            yield break;
        }
    }
}
