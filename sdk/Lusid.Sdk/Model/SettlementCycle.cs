/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Lusid.Sdk.Client.OpenAPIDateConverter;

namespace Lusid.Sdk.Model
{
    /// <summary>
    /// The settlement cycle for an instrument
    /// </summary>
    [DataContract(Name = "SettlementCycle")]
    public partial class SettlementCycle : IEquatable<SettlementCycle>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SettlementCycle" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected SettlementCycle() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="SettlementCycle" /> class.
        /// </summary>
        /// <param name="businessDayOffset">businessDayOffset (required).</param>
        /// <param name="calendars">calendars (required).</param>
        public SettlementCycle(int businessDayOffset = default(int), List<ResourceId> calendars = default(List<ResourceId>))
        {
            this.BusinessDayOffset = businessDayOffset;
            // to ensure "calendars" is required (not null)
            if (calendars == null)
            {
                throw new ArgumentNullException("calendars is a required property for SettlementCycle and cannot be null");
            }
            this.Calendars = calendars;
        }

        /// <summary>
        /// Gets or Sets BusinessDayOffset
        /// </summary>
        [DataMember(Name = "businessDayOffset", IsRequired = true, EmitDefaultValue = true)]
        public int BusinessDayOffset { get; set; }

        /// <summary>
        /// Gets or Sets Calendars
        /// </summary>
        [DataMember(Name = "calendars", IsRequired = true, EmitDefaultValue = true)]
        public List<ResourceId> Calendars { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SettlementCycle {\n");
            sb.Append("  BusinessDayOffset: ").Append(BusinessDayOffset).Append("\n");
            sb.Append("  Calendars: ").Append(Calendars).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SettlementCycle);
        }

        /// <summary>
        /// Returns true if SettlementCycle instances are equal
        /// </summary>
        /// <param name="input">Instance of SettlementCycle to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SettlementCycle input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.BusinessDayOffset == input.BusinessDayOffset ||
                    this.BusinessDayOffset.Equals(input.BusinessDayOffset)
                ) && 
                (
                    this.Calendars == input.Calendars ||
                    this.Calendars != null &&
                    input.Calendars != null &&
                    this.Calendars.SequenceEqual(input.Calendars)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.BusinessDayOffset.GetHashCode();
                if (this.Calendars != null)
                {
                    hashCode = (hashCode * 59) + this.Calendars.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // BusinessDayOffset (int) maximum
            if (this.BusinessDayOffset > (int)2147483647)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for BusinessDayOffset, must be a value less than or equal to 2147483647.", new [] { "BusinessDayOffset" });
            }

            // BusinessDayOffset (int) minimum
            if (this.BusinessDayOffset < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for BusinessDayOffset, must be a value greater than or equal to 0.", new [] { "BusinessDayOffset" });
            }

            yield break;
        }
    }
}
