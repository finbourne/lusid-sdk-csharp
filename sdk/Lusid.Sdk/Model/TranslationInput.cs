/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Lusid.Sdk.Client.OpenAPIDateConverter;

namespace Lusid.Sdk.Model
{
    /// <summary>
    /// The input to a translation script.
    /// </summary>
    [DataContract(Name = "TranslationInput")]
    public partial class TranslationInput : IEquatable<TranslationInput>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TranslationInput" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected TranslationInput() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="TranslationInput" /> class.
        /// </summary>
        /// <param name="entity">The serialised entity to be passed to the translation script. This could represent e.g. an instrument in any  dialect. (required).</param>
        public TranslationInput(string entity = default(string))
        {
            // to ensure "entity" is required (not null)
            if (entity == null)
            {
                throw new ArgumentNullException("entity is a required property for TranslationInput and cannot be null");
            }
            this.Entity = entity;
        }

        /// <summary>
        /// The serialised entity to be passed to the translation script. This could represent e.g. an instrument in any  dialect.
        /// </summary>
        /// <value>The serialised entity to be passed to the translation script. This could represent e.g. an instrument in any  dialect.</value>
        [DataMember(Name = "entity", IsRequired = true, EmitDefaultValue = true)]
        public string Entity { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class TranslationInput {\n");
            sb.Append("  Entity: ").Append(Entity).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TranslationInput);
        }

        /// <summary>
        /// Returns true if TranslationInput instances are equal
        /// </summary>
        /// <param name="input">Instance of TranslationInput to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TranslationInput input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Entity == input.Entity ||
                    (this.Entity != null &&
                    this.Entity.Equals(input.Entity))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Entity != null)
                {
                    hashCode = (hashCode * 59) + this.Entity.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Entity (string) maxLength
            if (this.Entity != null && this.Entity.Length > 500000)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Entity, length must be less than 500000.", new [] { "Entity" });
            }

            // Entity (string) minLength
            if (this.Entity != null && this.Entity.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Entity, length must be greater than 0.", new [] { "Entity" });
            }

            yield break;
        }
    }
}
