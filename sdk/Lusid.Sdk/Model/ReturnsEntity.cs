/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Lusid.Sdk.Client.OpenAPIDateConverter;

namespace Lusid.Sdk.Model
{
    /// <summary>
    /// Returns entity, used for configuring the calculation of aggregated returns.
    /// </summary>
    [DataContract(Name = "ReturnsEntity")]
    public partial class ReturnsEntity : IEquatable<ReturnsEntity>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ReturnsEntity" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ReturnsEntity() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ReturnsEntity" /> class.
        /// </summary>
        /// <param name="id">id (required).</param>
        /// <param name="recipeId">recipeId.</param>
        /// <param name="recipeEntity">Entity a recipe is retrieved from for use in the aggregated returns calculation. Either RecipeId or RecipeEntity must be specified..</param>
        /// <param name="feeHandling">Configures how fees are handled in the aggregated returns calculation..</param>
        /// <param name="flowHandling">Configures how flows are handled in the aggregated returns calculation..</param>
        /// <param name="businessCalendar">Calendar used in the aggregated returns calculation..</param>
        /// <param name="handleFlowDiscrepancy">Configures handling for the case where net flows do not match the sum of tagged flows..</param>
        public ReturnsEntity(ResourceId id = default(ResourceId), ResourceId recipeId = default(ResourceId), string recipeEntity = default(string), string feeHandling = default(string), string flowHandling = default(string), string businessCalendar = default(string), string handleFlowDiscrepancy = default(string))
        {
            // to ensure "id" is required (not null)
            if (id == null)
            {
                throw new ArgumentNullException("id is a required property for ReturnsEntity and cannot be null");
            }
            this.Id = id;
            this.RecipeId = recipeId;
            this.RecipeEntity = recipeEntity;
            this.FeeHandling = feeHandling;
            this.FlowHandling = flowHandling;
            this.BusinessCalendar = businessCalendar;
            this.HandleFlowDiscrepancy = handleFlowDiscrepancy;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = true)]
        public ResourceId Id { get; set; }

        /// <summary>
        /// Gets or Sets RecipeId
        /// </summary>
        [DataMember(Name = "recipeId", EmitDefaultValue = false)]
        public ResourceId RecipeId { get; set; }

        /// <summary>
        /// Entity a recipe is retrieved from for use in the aggregated returns calculation. Either RecipeId or RecipeEntity must be specified.
        /// </summary>
        /// <value>Entity a recipe is retrieved from for use in the aggregated returns calculation. Either RecipeId or RecipeEntity must be specified.</value>
        [DataMember(Name = "recipeEntity", EmitDefaultValue = true)]
        public string RecipeEntity { get; set; }

        /// <summary>
        /// Configures how fees are handled in the aggregated returns calculation.
        /// </summary>
        /// <value>Configures how fees are handled in the aggregated returns calculation.</value>
        [DataMember(Name = "feeHandling", EmitDefaultValue = true)]
        public string FeeHandling { get; set; }

        /// <summary>
        /// Configures how flows are handled in the aggregated returns calculation.
        /// </summary>
        /// <value>Configures how flows are handled in the aggregated returns calculation.</value>
        [DataMember(Name = "flowHandling", EmitDefaultValue = true)]
        public string FlowHandling { get; set; }

        /// <summary>
        /// Calendar used in the aggregated returns calculation.
        /// </summary>
        /// <value>Calendar used in the aggregated returns calculation.</value>
        [DataMember(Name = "businessCalendar", EmitDefaultValue = true)]
        public string BusinessCalendar { get; set; }

        /// <summary>
        /// Configures handling for the case where net flows do not match the sum of tagged flows.
        /// </summary>
        /// <value>Configures handling for the case where net flows do not match the sum of tagged flows.</value>
        [DataMember(Name = "handleFlowDiscrepancy", EmitDefaultValue = true)]
        public string HandleFlowDiscrepancy { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ReturnsEntity {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  RecipeId: ").Append(RecipeId).Append("\n");
            sb.Append("  RecipeEntity: ").Append(RecipeEntity).Append("\n");
            sb.Append("  FeeHandling: ").Append(FeeHandling).Append("\n");
            sb.Append("  FlowHandling: ").Append(FlowHandling).Append("\n");
            sb.Append("  BusinessCalendar: ").Append(BusinessCalendar).Append("\n");
            sb.Append("  HandleFlowDiscrepancy: ").Append(HandleFlowDiscrepancy).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ReturnsEntity);
        }

        /// <summary>
        /// Returns true if ReturnsEntity instances are equal
        /// </summary>
        /// <param name="input">Instance of ReturnsEntity to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ReturnsEntity input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.RecipeId == input.RecipeId ||
                    (this.RecipeId != null &&
                    this.RecipeId.Equals(input.RecipeId))
                ) && 
                (
                    this.RecipeEntity == input.RecipeEntity ||
                    (this.RecipeEntity != null &&
                    this.RecipeEntity.Equals(input.RecipeEntity))
                ) && 
                (
                    this.FeeHandling == input.FeeHandling ||
                    (this.FeeHandling != null &&
                    this.FeeHandling.Equals(input.FeeHandling))
                ) && 
                (
                    this.FlowHandling == input.FlowHandling ||
                    (this.FlowHandling != null &&
                    this.FlowHandling.Equals(input.FlowHandling))
                ) && 
                (
                    this.BusinessCalendar == input.BusinessCalendar ||
                    (this.BusinessCalendar != null &&
                    this.BusinessCalendar.Equals(input.BusinessCalendar))
                ) && 
                (
                    this.HandleFlowDiscrepancy == input.HandleFlowDiscrepancy ||
                    (this.HandleFlowDiscrepancy != null &&
                    this.HandleFlowDiscrepancy.Equals(input.HandleFlowDiscrepancy))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                {
                    hashCode = (hashCode * 59) + this.Id.GetHashCode();
                }
                if (this.RecipeId != null)
                {
                    hashCode = (hashCode * 59) + this.RecipeId.GetHashCode();
                }
                if (this.RecipeEntity != null)
                {
                    hashCode = (hashCode * 59) + this.RecipeEntity.GetHashCode();
                }
                if (this.FeeHandling != null)
                {
                    hashCode = (hashCode * 59) + this.FeeHandling.GetHashCode();
                }
                if (this.FlowHandling != null)
                {
                    hashCode = (hashCode * 59) + this.FlowHandling.GetHashCode();
                }
                if (this.BusinessCalendar != null)
                {
                    hashCode = (hashCode * 59) + this.BusinessCalendar.GetHashCode();
                }
                if (this.HandleFlowDiscrepancy != null)
                {
                    hashCode = (hashCode * 59) + this.HandleFlowDiscrepancy.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // BusinessCalendar (string) maxLength
            if (this.BusinessCalendar != null && this.BusinessCalendar.Length > 64)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for BusinessCalendar, length must be less than 64.", new [] { "BusinessCalendar" });
            }

            // BusinessCalendar (string) minLength
            if (this.BusinessCalendar != null && this.BusinessCalendar.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for BusinessCalendar, length must be greater than 0.", new [] { "BusinessCalendar" });
            }

            yield break;
        }
    }
}
