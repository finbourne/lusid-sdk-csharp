/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Lusid.Sdk.Client.OpenAPIDateConverter;

namespace Lusid.Sdk.Model
{
    /// <summary>
    /// PostCloseActivity
    /// </summary>
    [DataContract(Name = "PostCloseActivity")]
    public partial class PostCloseActivity : IEquatable<PostCloseActivity>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PostCloseActivity" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected PostCloseActivity() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="PostCloseActivity" /> class.
        /// </summary>
        /// <param name="entityType">entityType (required).</param>
        /// <param name="entityUniqueId">entityUniqueId (required).</param>
        /// <param name="asAt">asAt (required).</param>
        public PostCloseActivity(string entityType = default(string), string entityUniqueId = default(string), DateTimeOffset asAt = default(DateTimeOffset))
        {
            // to ensure "entityType" is required (not null)
            if (entityType == null)
            {
                throw new ArgumentNullException("entityType is a required property for PostCloseActivity and cannot be null");
            }
            this.EntityType = entityType;
            // to ensure "entityUniqueId" is required (not null)
            if (entityUniqueId == null)
            {
                throw new ArgumentNullException("entityUniqueId is a required property for PostCloseActivity and cannot be null");
            }
            this.EntityUniqueId = entityUniqueId;
            this.AsAt = asAt;
        }

        /// <summary>
        /// Gets or Sets EntityType
        /// </summary>
        [DataMember(Name = "entityType", IsRequired = true, EmitDefaultValue = true)]
        public string EntityType { get; set; }

        /// <summary>
        /// Gets or Sets EntityUniqueId
        /// </summary>
        [DataMember(Name = "entityUniqueId", IsRequired = true, EmitDefaultValue = true)]
        public string EntityUniqueId { get; set; }

        /// <summary>
        /// Gets or Sets AsAt
        /// </summary>
        [DataMember(Name = "asAt", IsRequired = true, EmitDefaultValue = true)]
        public DateTimeOffset AsAt { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PostCloseActivity {\n");
            sb.Append("  EntityType: ").Append(EntityType).Append("\n");
            sb.Append("  EntityUniqueId: ").Append(EntityUniqueId).Append("\n");
            sb.Append("  AsAt: ").Append(AsAt).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PostCloseActivity);
        }

        /// <summary>
        /// Returns true if PostCloseActivity instances are equal
        /// </summary>
        /// <param name="input">Instance of PostCloseActivity to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PostCloseActivity input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.EntityType == input.EntityType ||
                    (this.EntityType != null &&
                    this.EntityType.Equals(input.EntityType))
                ) && 
                (
                    this.EntityUniqueId == input.EntityUniqueId ||
                    (this.EntityUniqueId != null &&
                    this.EntityUniqueId.Equals(input.EntityUniqueId))
                ) && 
                (
                    this.AsAt == input.AsAt ||
                    (this.AsAt != null &&
                    this.AsAt.Equals(input.AsAt))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.EntityType != null)
                {
                    hashCode = (hashCode * 59) + this.EntityType.GetHashCode();
                }
                if (this.EntityUniqueId != null)
                {
                    hashCode = (hashCode * 59) + this.EntityUniqueId.GetHashCode();
                }
                if (this.AsAt != null)
                {
                    hashCode = (hashCode * 59) + this.AsAt.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // EntityType (string) maxLength
            if (this.EntityType != null && this.EntityType.Length > 128)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for EntityType, length must be less than 128.", new [] { "EntityType" });
            }

            // EntityType (string) minLength
            if (this.EntityType != null && this.EntityType.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for EntityType, length must be greater than 0.", new [] { "EntityType" });
            }

            // EntityType (string) pattern
            Regex regexEntityType = new Regex(@"^[a-zA-Z]*$", RegexOptions.CultureInvariant);
            if (false == regexEntityType.Match(this.EntityType).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for EntityType, must match a pattern of " + regexEntityType, new [] { "EntityType" });
            }

            // EntityUniqueId (string) maxLength
            if (this.EntityUniqueId != null && this.EntityUniqueId.Length > 256)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for EntityUniqueId, length must be less than 256.", new [] { "EntityUniqueId" });
            }

            // EntityUniqueId (string) minLength
            if (this.EntityUniqueId != null && this.EntityUniqueId.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for EntityUniqueId, length must be greater than 0.", new [] { "EntityUniqueId" });
            }

            yield break;
        }
    }
}
