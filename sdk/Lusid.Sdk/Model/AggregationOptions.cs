/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Lusid.Sdk.Client.OpenAPIDateConverter;

namespace Lusid.Sdk.Model
{
    /// <summary>
    /// Options for controlling the default aspects and behaviour of the aggregation.
    /// </summary>
    [DataContract(Name = "AggregationOptions")]
    public partial class AggregationOptions : IEquatable<AggregationOptions>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AggregationOptions" /> class.
        /// </summary>
        /// <param name="useAnsiLikeSyntax">Should the aggregation behave like ANSI Sql or MySql with respect to a conceptual request which is equivalent to \&quot;select a,sum(a) from results\&quot;;  ANSI Sql would report an error if a was not unique where MySql would simply view a,suma(a) as equivalent to firstof(a),sum(a)..</param>
        /// <param name="allowPartialEntitlementSuccess">In the case of valuing a portfolio group where some, but not all entitlements fail, should the aggregation return the valuations  applied only to those portfolios where entitlements checks succeeded..</param>
        /// <param name="applyIso4217Rounding">Various results that are units of currency might need to be rounded.  This will round according to the ISO4217 standard number of decimal places for a currency..</param>
        public AggregationOptions(bool useAnsiLikeSyntax = default(bool), bool allowPartialEntitlementSuccess = default(bool), bool applyIso4217Rounding = default(bool))
        {
            this.UseAnsiLikeSyntax = useAnsiLikeSyntax;
            this.AllowPartialEntitlementSuccess = allowPartialEntitlementSuccess;
            this.ApplyIso4217Rounding = applyIso4217Rounding;
        }

        /// <summary>
        /// Should the aggregation behave like ANSI Sql or MySql with respect to a conceptual request which is equivalent to \&quot;select a,sum(a) from results\&quot;;  ANSI Sql would report an error if a was not unique where MySql would simply view a,suma(a) as equivalent to firstof(a),sum(a).
        /// </summary>
        /// <value>Should the aggregation behave like ANSI Sql or MySql with respect to a conceptual request which is equivalent to \&quot;select a,sum(a) from results\&quot;;  ANSI Sql would report an error if a was not unique where MySql would simply view a,suma(a) as equivalent to firstof(a),sum(a).</value>
        [DataMember(Name = "useAnsiLikeSyntax", EmitDefaultValue = true)]
        public bool UseAnsiLikeSyntax { get; set; }

        /// <summary>
        /// In the case of valuing a portfolio group where some, but not all entitlements fail, should the aggregation return the valuations  applied only to those portfolios where entitlements checks succeeded.
        /// </summary>
        /// <value>In the case of valuing a portfolio group where some, but not all entitlements fail, should the aggregation return the valuations  applied only to those portfolios where entitlements checks succeeded.</value>
        [DataMember(Name = "allowPartialEntitlementSuccess", EmitDefaultValue = true)]
        public bool AllowPartialEntitlementSuccess { get; set; }

        /// <summary>
        /// Various results that are units of currency might need to be rounded.  This will round according to the ISO4217 standard number of decimal places for a currency.
        /// </summary>
        /// <value>Various results that are units of currency might need to be rounded.  This will round according to the ISO4217 standard number of decimal places for a currency.</value>
        [DataMember(Name = "applyIso4217Rounding", EmitDefaultValue = true)]
        public bool ApplyIso4217Rounding { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AggregationOptions {\n");
            sb.Append("  UseAnsiLikeSyntax: ").Append(UseAnsiLikeSyntax).Append("\n");
            sb.Append("  AllowPartialEntitlementSuccess: ").Append(AllowPartialEntitlementSuccess).Append("\n");
            sb.Append("  ApplyIso4217Rounding: ").Append(ApplyIso4217Rounding).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AggregationOptions);
        }

        /// <summary>
        /// Returns true if AggregationOptions instances are equal
        /// </summary>
        /// <param name="input">Instance of AggregationOptions to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AggregationOptions input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.UseAnsiLikeSyntax == input.UseAnsiLikeSyntax ||
                    this.UseAnsiLikeSyntax.Equals(input.UseAnsiLikeSyntax)
                ) && 
                (
                    this.AllowPartialEntitlementSuccess == input.AllowPartialEntitlementSuccess ||
                    this.AllowPartialEntitlementSuccess.Equals(input.AllowPartialEntitlementSuccess)
                ) && 
                (
                    this.ApplyIso4217Rounding == input.ApplyIso4217Rounding ||
                    this.ApplyIso4217Rounding.Equals(input.ApplyIso4217Rounding)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.UseAnsiLikeSyntax.GetHashCode();
                hashCode = (hashCode * 59) + this.AllowPartialEntitlementSuccess.GetHashCode();
                hashCode = (hashCode * 59) + this.ApplyIso4217Rounding.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
