/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Lusid.Sdk.Client.OpenAPIDateConverter;

namespace Lusid.Sdk.Model
{
    /// <summary>
    /// GroupReconciliationSummary
    /// </summary>
    [DataContract(Name = "GroupReconciliationSummary")]
    public partial class GroupReconciliationSummary : IEquatable<GroupReconciliationSummary>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GroupReconciliationSummary" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected GroupReconciliationSummary() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="GroupReconciliationSummary" /> class.
        /// </summary>
        /// <param name="runDetails">runDetails.</param>
        /// <param name="groupReconciliationDefinitionId">groupReconciliationDefinitionId.</param>
        /// <param name="reconciliationType">The type of reconciliation to perform. \&quot;Holding\&quot; | \&quot;Transaction\&quot; | \&quot;Valuation\&quot; (required).</param>
        /// <param name="instanceId">instanceId (required).</param>
        /// <param name="datesReconciled">datesReconciled (required).</param>
        /// <param name="reconciliationRunAsAt">The date and time the reconciliation was run (required).</param>
        /// <param name="countComparisonResults">The total number of comparison results with this InstanceId and ReconciliationType (required).</param>
        /// <param name="linkComparisonResults">linkComparisonResults.</param>
        /// <param name="resultTypes">resultTypes.</param>
        /// <param name="resultStatuses">resultStatuses.</param>
        /// <param name="reviewStatuses">reviewStatuses.</param>
        public GroupReconciliationSummary(GroupReconciliationRunDetails runDetails = default(GroupReconciliationRunDetails), ResourceId groupReconciliationDefinitionId = default(ResourceId), string reconciliationType = default(string), GroupReconciliationInstanceId instanceId = default(GroupReconciliationInstanceId), GroupReconciliationDates datesReconciled = default(GroupReconciliationDates), string reconciliationRunAsAt = default(string), int countComparisonResults = default(int), Link linkComparisonResults = default(Link), GroupReconciliationResultTypes resultTypes = default(GroupReconciliationResultTypes), GroupReconciliationResultStatuses resultStatuses = default(GroupReconciliationResultStatuses), GroupReconciliationReviewStatuses reviewStatuses = default(GroupReconciliationReviewStatuses))
        {
            // to ensure "reconciliationType" is required (not null)
            if (reconciliationType == null)
            {
                throw new ArgumentNullException("reconciliationType is a required property for GroupReconciliationSummary and cannot be null");
            }
            this.ReconciliationType = reconciliationType;
            // to ensure "instanceId" is required (not null)
            if (instanceId == null)
            {
                throw new ArgumentNullException("instanceId is a required property for GroupReconciliationSummary and cannot be null");
            }
            this.InstanceId = instanceId;
            // to ensure "datesReconciled" is required (not null)
            if (datesReconciled == null)
            {
                throw new ArgumentNullException("datesReconciled is a required property for GroupReconciliationSummary and cannot be null");
            }
            this.DatesReconciled = datesReconciled;
            // to ensure "reconciliationRunAsAt" is required (not null)
            if (reconciliationRunAsAt == null)
            {
                throw new ArgumentNullException("reconciliationRunAsAt is a required property for GroupReconciliationSummary and cannot be null");
            }
            this.ReconciliationRunAsAt = reconciliationRunAsAt;
            this.CountComparisonResults = countComparisonResults;
            this.RunDetails = runDetails;
            this.GroupReconciliationDefinitionId = groupReconciliationDefinitionId;
            this.LinkComparisonResults = linkComparisonResults;
            this.ResultTypes = resultTypes;
            this.ResultStatuses = resultStatuses;
            this.ReviewStatuses = reviewStatuses;
        }

        /// <summary>
        /// Gets or Sets RunDetails
        /// </summary>
        [DataMember(Name = "runDetails", EmitDefaultValue = false)]
        public GroupReconciliationRunDetails RunDetails { get; set; }

        /// <summary>
        /// Gets or Sets GroupReconciliationDefinitionId
        /// </summary>
        [DataMember(Name = "groupReconciliationDefinitionId", EmitDefaultValue = false)]
        public ResourceId GroupReconciliationDefinitionId { get; set; }

        /// <summary>
        /// The type of reconciliation to perform. \&quot;Holding\&quot; | \&quot;Transaction\&quot; | \&quot;Valuation\&quot;
        /// </summary>
        /// <value>The type of reconciliation to perform. \&quot;Holding\&quot; | \&quot;Transaction\&quot; | \&quot;Valuation\&quot;</value>
        [DataMember(Name = "reconciliationType", IsRequired = true, EmitDefaultValue = true)]
        public string ReconciliationType { get; set; }

        /// <summary>
        /// Gets or Sets InstanceId
        /// </summary>
        [DataMember(Name = "instanceId", IsRequired = true, EmitDefaultValue = true)]
        public GroupReconciliationInstanceId InstanceId { get; set; }

        /// <summary>
        /// Gets or Sets DatesReconciled
        /// </summary>
        [DataMember(Name = "datesReconciled", IsRequired = true, EmitDefaultValue = true)]
        public GroupReconciliationDates DatesReconciled { get; set; }

        /// <summary>
        /// The date and time the reconciliation was run
        /// </summary>
        /// <value>The date and time the reconciliation was run</value>
        [DataMember(Name = "reconciliationRunAsAt", IsRequired = true, EmitDefaultValue = true)]
        public string ReconciliationRunAsAt { get; set; }

        /// <summary>
        /// The total number of comparison results with this InstanceId and ReconciliationType
        /// </summary>
        /// <value>The total number of comparison results with this InstanceId and ReconciliationType</value>
        [DataMember(Name = "countComparisonResults", IsRequired = true, EmitDefaultValue = true)]
        public int CountComparisonResults { get; set; }

        /// <summary>
        /// Gets or Sets LinkComparisonResults
        /// </summary>
        [DataMember(Name = "linkComparisonResults", EmitDefaultValue = false)]
        public Link LinkComparisonResults { get; set; }

        /// <summary>
        /// Gets or Sets ResultTypes
        /// </summary>
        [DataMember(Name = "resultTypes", EmitDefaultValue = false)]
        public GroupReconciliationResultTypes ResultTypes { get; set; }

        /// <summary>
        /// Gets or Sets ResultStatuses
        /// </summary>
        [DataMember(Name = "resultStatuses", EmitDefaultValue = false)]
        public GroupReconciliationResultStatuses ResultStatuses { get; set; }

        /// <summary>
        /// Gets or Sets ReviewStatuses
        /// </summary>
        [DataMember(Name = "reviewStatuses", EmitDefaultValue = false)]
        public GroupReconciliationReviewStatuses ReviewStatuses { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class GroupReconciliationSummary {\n");
            sb.Append("  RunDetails: ").Append(RunDetails).Append("\n");
            sb.Append("  GroupReconciliationDefinitionId: ").Append(GroupReconciliationDefinitionId).Append("\n");
            sb.Append("  ReconciliationType: ").Append(ReconciliationType).Append("\n");
            sb.Append("  InstanceId: ").Append(InstanceId).Append("\n");
            sb.Append("  DatesReconciled: ").Append(DatesReconciled).Append("\n");
            sb.Append("  ReconciliationRunAsAt: ").Append(ReconciliationRunAsAt).Append("\n");
            sb.Append("  CountComparisonResults: ").Append(CountComparisonResults).Append("\n");
            sb.Append("  LinkComparisonResults: ").Append(LinkComparisonResults).Append("\n");
            sb.Append("  ResultTypes: ").Append(ResultTypes).Append("\n");
            sb.Append("  ResultStatuses: ").Append(ResultStatuses).Append("\n");
            sb.Append("  ReviewStatuses: ").Append(ReviewStatuses).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GroupReconciliationSummary);
        }

        /// <summary>
        /// Returns true if GroupReconciliationSummary instances are equal
        /// </summary>
        /// <param name="input">Instance of GroupReconciliationSummary to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GroupReconciliationSummary input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.RunDetails == input.RunDetails ||
                    (this.RunDetails != null &&
                    this.RunDetails.Equals(input.RunDetails))
                ) && 
                (
                    this.GroupReconciliationDefinitionId == input.GroupReconciliationDefinitionId ||
                    (this.GroupReconciliationDefinitionId != null &&
                    this.GroupReconciliationDefinitionId.Equals(input.GroupReconciliationDefinitionId))
                ) && 
                (
                    this.ReconciliationType == input.ReconciliationType ||
                    (this.ReconciliationType != null &&
                    this.ReconciliationType.Equals(input.ReconciliationType))
                ) && 
                (
                    this.InstanceId == input.InstanceId ||
                    (this.InstanceId != null &&
                    this.InstanceId.Equals(input.InstanceId))
                ) && 
                (
                    this.DatesReconciled == input.DatesReconciled ||
                    (this.DatesReconciled != null &&
                    this.DatesReconciled.Equals(input.DatesReconciled))
                ) && 
                (
                    this.ReconciliationRunAsAt == input.ReconciliationRunAsAt ||
                    (this.ReconciliationRunAsAt != null &&
                    this.ReconciliationRunAsAt.Equals(input.ReconciliationRunAsAt))
                ) && 
                (
                    this.CountComparisonResults == input.CountComparisonResults ||
                    this.CountComparisonResults.Equals(input.CountComparisonResults)
                ) && 
                (
                    this.LinkComparisonResults == input.LinkComparisonResults ||
                    (this.LinkComparisonResults != null &&
                    this.LinkComparisonResults.Equals(input.LinkComparisonResults))
                ) && 
                (
                    this.ResultTypes == input.ResultTypes ||
                    (this.ResultTypes != null &&
                    this.ResultTypes.Equals(input.ResultTypes))
                ) && 
                (
                    this.ResultStatuses == input.ResultStatuses ||
                    (this.ResultStatuses != null &&
                    this.ResultStatuses.Equals(input.ResultStatuses))
                ) && 
                (
                    this.ReviewStatuses == input.ReviewStatuses ||
                    (this.ReviewStatuses != null &&
                    this.ReviewStatuses.Equals(input.ReviewStatuses))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.RunDetails != null)
                {
                    hashCode = (hashCode * 59) + this.RunDetails.GetHashCode();
                }
                if (this.GroupReconciliationDefinitionId != null)
                {
                    hashCode = (hashCode * 59) + this.GroupReconciliationDefinitionId.GetHashCode();
                }
                if (this.ReconciliationType != null)
                {
                    hashCode = (hashCode * 59) + this.ReconciliationType.GetHashCode();
                }
                if (this.InstanceId != null)
                {
                    hashCode = (hashCode * 59) + this.InstanceId.GetHashCode();
                }
                if (this.DatesReconciled != null)
                {
                    hashCode = (hashCode * 59) + this.DatesReconciled.GetHashCode();
                }
                if (this.ReconciliationRunAsAt != null)
                {
                    hashCode = (hashCode * 59) + this.ReconciliationRunAsAt.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.CountComparisonResults.GetHashCode();
                if (this.LinkComparisonResults != null)
                {
                    hashCode = (hashCode * 59) + this.LinkComparisonResults.GetHashCode();
                }
                if (this.ResultTypes != null)
                {
                    hashCode = (hashCode * 59) + this.ResultTypes.GetHashCode();
                }
                if (this.ResultStatuses != null)
                {
                    hashCode = (hashCode * 59) + this.ResultStatuses.GetHashCode();
                }
                if (this.ReviewStatuses != null)
                {
                    hashCode = (hashCode * 59) + this.ReviewStatuses.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // ReconciliationType (string) minLength
            if (this.ReconciliationType != null && this.ReconciliationType.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ReconciliationType, length must be greater than 1.", new [] { "ReconciliationType" });
            }

            // ReconciliationRunAsAt (string) minLength
            if (this.ReconciliationRunAsAt != null && this.ReconciliationRunAsAt.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ReconciliationRunAsAt, length must be greater than 1.", new [] { "ReconciliationRunAsAt" });
            }

            yield break;
        }
    }
}
