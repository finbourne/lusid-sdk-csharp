/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using JsonSubTypes;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Lusid.Sdk.Client.OpenAPIDateConverter;

namespace Lusid.Sdk.Model
{
    /// <summary>
    /// Event for physical option exercises.
    /// </summary>
    [DataContract(Name = "OptionExercisePhysicalEvent")]
    [JsonConverter(typeof(JsonSubtypes), "InstrumentEventType")]
    public partial class OptionExercisePhysicalEvent : InstrumentEvent, IEquatable<OptionExercisePhysicalEvent>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="OptionExercisePhysicalEvent" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected OptionExercisePhysicalEvent() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="OptionExercisePhysicalEvent" /> class.
        /// </summary>
        /// <param name="exerciseDate">The exercise date of the option..</param>
        /// <param name="deliveryDate">The delivery date of the option..</param>
        /// <param name="exerciseType">The optionality type of the underlying option e.g. American, European.    Supported string (enumeration) values are: [European, Bermudan, American]. (required).</param>
        /// <param name="maturityDate">The maturity date of the option. (required).</param>
        /// <param name="moneyness">The moneyness of the option e.g. InTheMoney, OutOfTheMoney.    Supported string (enumeration) values are: [InTheMoney, OutOfTheMoney, AtTheMoney]..</param>
        /// <param name="newInstrument">newInstrument (required).</param>
        /// <param name="optionExerciseElections">Option exercise election for this OptionExercisePhysicalEvent..</param>
        /// <param name="optionType">Type of optionality that is present e.g. call, put.    Supported string (enumeration) values are: [Call, Put]. (required).</param>
        /// <param name="startDate">The trade date of the option. (required).</param>
        /// <param name="strikeCurrency">The strike currency of the equity option. (required).</param>
        /// <param name="strikePerUnit">The strike of the equity option times the number of shares to exchange if exercised. (required).</param>
        /// <param name="underlyingValuePerUnit">The underlying price times the number of shares to exchange if exercised..</param>
        /// <param name="unitsRatio">unitsRatio (required).</param>
        /// <param name="instrumentEventType">The Type of Event. The available values are: TransitionEvent, InformationalEvent, OpenEvent, CloseEvent, StockSplitEvent, BondDefaultEvent, CashDividendEvent, AmortisationEvent, CashFlowEvent, ExerciseEvent, ResetEvent, TriggerEvent, RawVendorEvent, InformationalErrorEvent, BondCouponEvent, DividendReinvestmentEvent, AccumulationEvent, BondPrincipalEvent, DividendOptionEvent, MaturityEvent, FxForwardSettlementEvent, ExpiryEvent, ScripDividendEvent, StockDividendEvent, ReverseStockSplitEvent, CapitalDistributionEvent, SpinOffEvent, MergerEvent, FutureExpiryEvent, SwapCashFlowEvent, SwapPrincipalEvent, CreditPremiumCashFlowEvent, CdsCreditEvent, CdxCreditEvent, MbsCouponEvent, MbsPrincipalEvent, BonusIssueEvent, MbsPrincipalWriteOffEvent, MbsInterestDeferralEvent, MbsInterestShortfallEvent, TenderEvent, CallOnIntermediateSecuritiesEvent, IntermediateSecuritiesDistributionEvent, OptionExercisePhysicalEvent, OptionExerciseCashEvent, ProtectionPayoutCashFlowEvent, TermDepositInterestEvent, TermDepositPrincipalEvent (required) (default to &quot;OptionExercisePhysicalEvent&quot;).</param>
        public OptionExercisePhysicalEvent(DateTimeOffset? exerciseDate = default(DateTimeOffset?), DateTimeOffset? deliveryDate = default(DateTimeOffset?), string exerciseType = default(string), DateTimeOffset maturityDate = default(DateTimeOffset), string moneyness = default(string), NewInstrument newInstrument = default(NewInstrument), List<OptionExerciseElection> optionExerciseElections = default(List<OptionExerciseElection>), string optionType = default(string), DateTimeOffset startDate = default(DateTimeOffset), string strikeCurrency = default(string), decimal strikePerUnit = default(decimal), decimal? underlyingValuePerUnit = default(decimal?), UnitsRatio unitsRatio = default(UnitsRatio), InstrumentEventTypeEnum instrumentEventType = default(InstrumentEventTypeEnum)) : base(instrumentEventType)
        {
            // to ensure "exerciseType" is required (not null)
            if (exerciseType == null)
            {
                throw new ArgumentNullException("exerciseType is a required property for OptionExercisePhysicalEvent and cannot be null");
            }
            this.ExerciseType = exerciseType;
            this.MaturityDate = maturityDate;
            // to ensure "newInstrument" is required (not null)
            if (newInstrument == null)
            {
                throw new ArgumentNullException("newInstrument is a required property for OptionExercisePhysicalEvent and cannot be null");
            }
            this.NewInstrument = newInstrument;
            // to ensure "optionType" is required (not null)
            if (optionType == null)
            {
                throw new ArgumentNullException("optionType is a required property for OptionExercisePhysicalEvent and cannot be null");
            }
            this.OptionType = optionType;
            this.StartDate = startDate;
            // to ensure "strikeCurrency" is required (not null)
            if (strikeCurrency == null)
            {
                throw new ArgumentNullException("strikeCurrency is a required property for OptionExercisePhysicalEvent and cannot be null");
            }
            this.StrikeCurrency = strikeCurrency;
            this.StrikePerUnit = strikePerUnit;
            // to ensure "unitsRatio" is required (not null)
            if (unitsRatio == null)
            {
                throw new ArgumentNullException("unitsRatio is a required property for OptionExercisePhysicalEvent and cannot be null");
            }
            this.UnitsRatio = unitsRatio;
            this.ExerciseDate = exerciseDate;
            this.DeliveryDate = deliveryDate;
            this.Moneyness = moneyness;
            this.OptionExerciseElections = optionExerciseElections;
            this.UnderlyingValuePerUnit = underlyingValuePerUnit;
        }

        /// <summary>
        /// The exercise date of the option.
        /// </summary>
        /// <value>The exercise date of the option.</value>
        [DataMember(Name = "exerciseDate", EmitDefaultValue = true)]
        public DateTimeOffset? ExerciseDate { get; set; }

        /// <summary>
        /// The delivery date of the option.
        /// </summary>
        /// <value>The delivery date of the option.</value>
        [DataMember(Name = "deliveryDate", EmitDefaultValue = true)]
        public DateTimeOffset? DeliveryDate { get; set; }

        /// <summary>
        /// The optionality type of the underlying option e.g. American, European.    Supported string (enumeration) values are: [European, Bermudan, American].
        /// </summary>
        /// <value>The optionality type of the underlying option e.g. American, European.    Supported string (enumeration) values are: [European, Bermudan, American].</value>
        [DataMember(Name = "exerciseType", IsRequired = true, EmitDefaultValue = true)]
        public string ExerciseType { get; set; }

        /// <summary>
        /// The maturity date of the option.
        /// </summary>
        /// <value>The maturity date of the option.</value>
        [DataMember(Name = "maturityDate", IsRequired = true, EmitDefaultValue = true)]
        public DateTimeOffset MaturityDate { get; set; }

        /// <summary>
        /// The moneyness of the option e.g. InTheMoney, OutOfTheMoney.    Supported string (enumeration) values are: [InTheMoney, OutOfTheMoney, AtTheMoney].
        /// </summary>
        /// <value>The moneyness of the option e.g. InTheMoney, OutOfTheMoney.    Supported string (enumeration) values are: [InTheMoney, OutOfTheMoney, AtTheMoney].</value>
        [DataMember(Name = "moneyness", EmitDefaultValue = true)]
        public string Moneyness { get; set; }

        /// <summary>
        /// Gets or Sets NewInstrument
        /// </summary>
        [DataMember(Name = "newInstrument", IsRequired = true, EmitDefaultValue = true)]
        public NewInstrument NewInstrument { get; set; }

        /// <summary>
        /// Option exercise election for this OptionExercisePhysicalEvent.
        /// </summary>
        /// <value>Option exercise election for this OptionExercisePhysicalEvent.</value>
        [DataMember(Name = "optionExerciseElections", EmitDefaultValue = true)]
        public List<OptionExerciseElection> OptionExerciseElections { get; set; }

        /// <summary>
        /// Type of optionality that is present e.g. call, put.    Supported string (enumeration) values are: [Call, Put].
        /// </summary>
        /// <value>Type of optionality that is present e.g. call, put.    Supported string (enumeration) values are: [Call, Put].</value>
        [DataMember(Name = "optionType", IsRequired = true, EmitDefaultValue = true)]
        public string OptionType { get; set; }

        /// <summary>
        /// The trade date of the option.
        /// </summary>
        /// <value>The trade date of the option.</value>
        [DataMember(Name = "startDate", IsRequired = true, EmitDefaultValue = true)]
        public DateTimeOffset StartDate { get; set; }

        /// <summary>
        /// The strike currency of the equity option.
        /// </summary>
        /// <value>The strike currency of the equity option.</value>
        [DataMember(Name = "strikeCurrency", IsRequired = true, EmitDefaultValue = true)]
        public string StrikeCurrency { get; set; }

        /// <summary>
        /// The strike of the equity option times the number of shares to exchange if exercised.
        /// </summary>
        /// <value>The strike of the equity option times the number of shares to exchange if exercised.</value>
        [DataMember(Name = "strikePerUnit", IsRequired = true, EmitDefaultValue = true)]
        public decimal StrikePerUnit { get; set; }

        /// <summary>
        /// The underlying price times the number of shares to exchange if exercised.
        /// </summary>
        /// <value>The underlying price times the number of shares to exchange if exercised.</value>
        [DataMember(Name = "underlyingValuePerUnit", EmitDefaultValue = true)]
        public decimal? UnderlyingValuePerUnit { get; set; }

        /// <summary>
        /// Gets or Sets UnitsRatio
        /// </summary>
        [DataMember(Name = "unitsRatio", IsRequired = true, EmitDefaultValue = true)]
        public UnitsRatio UnitsRatio { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class OptionExercisePhysicalEvent {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  ExerciseDate: ").Append(ExerciseDate).Append("\n");
            sb.Append("  DeliveryDate: ").Append(DeliveryDate).Append("\n");
            sb.Append("  ExerciseType: ").Append(ExerciseType).Append("\n");
            sb.Append("  MaturityDate: ").Append(MaturityDate).Append("\n");
            sb.Append("  Moneyness: ").Append(Moneyness).Append("\n");
            sb.Append("  NewInstrument: ").Append(NewInstrument).Append("\n");
            sb.Append("  OptionExerciseElections: ").Append(OptionExerciseElections).Append("\n");
            sb.Append("  OptionType: ").Append(OptionType).Append("\n");
            sb.Append("  StartDate: ").Append(StartDate).Append("\n");
            sb.Append("  StrikeCurrency: ").Append(StrikeCurrency).Append("\n");
            sb.Append("  StrikePerUnit: ").Append(StrikePerUnit).Append("\n");
            sb.Append("  UnderlyingValuePerUnit: ").Append(UnderlyingValuePerUnit).Append("\n");
            sb.Append("  UnitsRatio: ").Append(UnitsRatio).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as OptionExercisePhysicalEvent);
        }

        /// <summary>
        /// Returns true if OptionExercisePhysicalEvent instances are equal
        /// </summary>
        /// <param name="input">Instance of OptionExercisePhysicalEvent to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OptionExercisePhysicalEvent input)
        {
            if (input == null)
            {
                return false;
            }
            return base.Equals(input) && 
                (
                    this.ExerciseDate == input.ExerciseDate ||
                    (this.ExerciseDate != null &&
                    this.ExerciseDate.Equals(input.ExerciseDate))
                ) && base.Equals(input) && 
                (
                    this.DeliveryDate == input.DeliveryDate ||
                    (this.DeliveryDate != null &&
                    this.DeliveryDate.Equals(input.DeliveryDate))
                ) && base.Equals(input) && 
                (
                    this.ExerciseType == input.ExerciseType ||
                    (this.ExerciseType != null &&
                    this.ExerciseType.Equals(input.ExerciseType))
                ) && base.Equals(input) && 
                (
                    this.MaturityDate == input.MaturityDate ||
                    (this.MaturityDate != null &&
                    this.MaturityDate.Equals(input.MaturityDate))
                ) && base.Equals(input) && 
                (
                    this.Moneyness == input.Moneyness ||
                    (this.Moneyness != null &&
                    this.Moneyness.Equals(input.Moneyness))
                ) && base.Equals(input) && 
                (
                    this.NewInstrument == input.NewInstrument ||
                    (this.NewInstrument != null &&
                    this.NewInstrument.Equals(input.NewInstrument))
                ) && base.Equals(input) && 
                (
                    this.OptionExerciseElections == input.OptionExerciseElections ||
                    this.OptionExerciseElections != null &&
                    input.OptionExerciseElections != null &&
                    this.OptionExerciseElections.SequenceEqual(input.OptionExerciseElections)
                ) && base.Equals(input) && 
                (
                    this.OptionType == input.OptionType ||
                    (this.OptionType != null &&
                    this.OptionType.Equals(input.OptionType))
                ) && base.Equals(input) && 
                (
                    this.StartDate == input.StartDate ||
                    (this.StartDate != null &&
                    this.StartDate.Equals(input.StartDate))
                ) && base.Equals(input) && 
                (
                    this.StrikeCurrency == input.StrikeCurrency ||
                    (this.StrikeCurrency != null &&
                    this.StrikeCurrency.Equals(input.StrikeCurrency))
                ) && base.Equals(input) && 
                (
                    this.StrikePerUnit == input.StrikePerUnit ||
                    this.StrikePerUnit.Equals(input.StrikePerUnit)
                ) && base.Equals(input) && 
                (
                    this.UnderlyingValuePerUnit == input.UnderlyingValuePerUnit ||
                    (this.UnderlyingValuePerUnit != null &&
                    this.UnderlyingValuePerUnit.Equals(input.UnderlyingValuePerUnit))
                ) && base.Equals(input) && 
                (
                    this.UnitsRatio == input.UnitsRatio ||
                    (this.UnitsRatio != null &&
                    this.UnitsRatio.Equals(input.UnitsRatio))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = base.GetHashCode();
                if (this.ExerciseDate != null)
                {
                    hashCode = (hashCode * 59) + this.ExerciseDate.GetHashCode();
                }
                if (this.DeliveryDate != null)
                {
                    hashCode = (hashCode * 59) + this.DeliveryDate.GetHashCode();
                }
                if (this.ExerciseType != null)
                {
                    hashCode = (hashCode * 59) + this.ExerciseType.GetHashCode();
                }
                if (this.MaturityDate != null)
                {
                    hashCode = (hashCode * 59) + this.MaturityDate.GetHashCode();
                }
                if (this.Moneyness != null)
                {
                    hashCode = (hashCode * 59) + this.Moneyness.GetHashCode();
                }
                if (this.NewInstrument != null)
                {
                    hashCode = (hashCode * 59) + this.NewInstrument.GetHashCode();
                }
                if (this.OptionExerciseElections != null)
                {
                    hashCode = (hashCode * 59) + this.OptionExerciseElections.GetHashCode();
                }
                if (this.OptionType != null)
                {
                    hashCode = (hashCode * 59) + this.OptionType.GetHashCode();
                }
                if (this.StartDate != null)
                {
                    hashCode = (hashCode * 59) + this.StartDate.GetHashCode();
                }
                if (this.StrikeCurrency != null)
                {
                    hashCode = (hashCode * 59) + this.StrikeCurrency.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.StrikePerUnit.GetHashCode();
                if (this.UnderlyingValuePerUnit != null)
                {
                    hashCode = (hashCode * 59) + this.UnderlyingValuePerUnit.GetHashCode();
                }
                if (this.UnitsRatio != null)
                {
                    hashCode = (hashCode * 59) + this.UnitsRatio.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            return this.BaseValidate(validationContext);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        protected IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> BaseValidate(ValidationContext validationContext)
        {
            foreach (var x in base.BaseValidate(validationContext))
            {
                yield return x;
            }
            // ExerciseType (string) minLength
            if (this.ExerciseType != null && this.ExerciseType.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ExerciseType, length must be greater than 1.", new [] { "ExerciseType" });
            }

            // OptionType (string) minLength
            if (this.OptionType != null && this.OptionType.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for OptionType, length must be greater than 1.", new [] { "OptionType" });
            }

            yield break;
        }
    }
}
