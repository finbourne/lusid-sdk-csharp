/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Lusid.Sdk.Client.OpenAPIDateConverter;

namespace Lusid.Sdk.Model
{
    /// <summary>
    /// GroupReconciliationInstanceId
    /// </summary>
    [DataContract(Name = "GroupReconciliationInstanceId")]
    public partial class GroupReconciliationInstanceId : IEquatable<GroupReconciliationInstanceId>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GroupReconciliationInstanceId" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected GroupReconciliationInstanceId() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="GroupReconciliationInstanceId" /> class.
        /// </summary>
        /// <param name="runIdType">Type of the reconciliation run, manual or automatic (via the workflow). \&quot;Manual\&quot; | \&quot;WorkflowServiceTaskId\&quot; (required).</param>
        /// <param name="runIdValue">Reconciliation run identifier: a manually-provided key or taskId. (required).</param>
        public GroupReconciliationInstanceId(string runIdType = default(string), string runIdValue = default(string))
        {
            // to ensure "runIdType" is required (not null)
            if (runIdType == null)
            {
                throw new ArgumentNullException("runIdType is a required property for GroupReconciliationInstanceId and cannot be null");
            }
            this.RunIdType = runIdType;
            // to ensure "runIdValue" is required (not null)
            if (runIdValue == null)
            {
                throw new ArgumentNullException("runIdValue is a required property for GroupReconciliationInstanceId and cannot be null");
            }
            this.RunIdValue = runIdValue;
        }

        /// <summary>
        /// Type of the reconciliation run, manual or automatic (via the workflow). \&quot;Manual\&quot; | \&quot;WorkflowServiceTaskId\&quot;
        /// </summary>
        /// <value>Type of the reconciliation run, manual or automatic (via the workflow). \&quot;Manual\&quot; | \&quot;WorkflowServiceTaskId\&quot;</value>
        [DataMember(Name = "runIdType", IsRequired = true, EmitDefaultValue = true)]
        public string RunIdType { get; set; }

        /// <summary>
        /// Reconciliation run identifier: a manually-provided key or taskId.
        /// </summary>
        /// <value>Reconciliation run identifier: a manually-provided key or taskId.</value>
        [DataMember(Name = "runIdValue", IsRequired = true, EmitDefaultValue = true)]
        public string RunIdValue { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class GroupReconciliationInstanceId {\n");
            sb.Append("  RunIdType: ").Append(RunIdType).Append("\n");
            sb.Append("  RunIdValue: ").Append(RunIdValue).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GroupReconciliationInstanceId);
        }

        /// <summary>
        /// Returns true if GroupReconciliationInstanceId instances are equal
        /// </summary>
        /// <param name="input">Instance of GroupReconciliationInstanceId to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GroupReconciliationInstanceId input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.RunIdType == input.RunIdType ||
                    (this.RunIdType != null &&
                    this.RunIdType.Equals(input.RunIdType))
                ) && 
                (
                    this.RunIdValue == input.RunIdValue ||
                    (this.RunIdValue != null &&
                    this.RunIdValue.Equals(input.RunIdValue))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.RunIdType != null)
                {
                    hashCode = (hashCode * 59) + this.RunIdType.GetHashCode();
                }
                if (this.RunIdValue != null)
                {
                    hashCode = (hashCode * 59) + this.RunIdValue.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // RunIdType (string) minLength
            if (this.RunIdType != null && this.RunIdType.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for RunIdType, length must be greater than 1.", new [] { "RunIdType" });
            }

            // RunIdValue (string) minLength
            if (this.RunIdValue != null && this.RunIdValue.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for RunIdValue, length must be greater than 1.", new [] { "RunIdValue" });
            }

            yield break;
        }
    }
}
