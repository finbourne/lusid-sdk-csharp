/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Lusid.Sdk.Client.OpenAPIDateConverter;

namespace Lusid.Sdk.Model
{
    /// <summary>
    /// GroupReconciliationInstanceId
    /// </summary>
    [DataContract(Name = "GroupReconciliationInstanceId")]
    public partial class GroupReconciliationInstanceId : IEquatable<GroupReconciliationInstanceId>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GroupReconciliationInstanceId" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected GroupReconciliationInstanceId() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="GroupReconciliationInstanceId" /> class.
        /// </summary>
        /// <param name="instanceIdType">Type of the reconciliation run, manual or automatic (via the workflow). \&quot;Manual\&quot; | \&quot;WorkflowServiceTaskId\&quot; (required).</param>
        /// <param name="instanceIdValue">Reconciliation run identifier: a manually-provided key or taskId. (required).</param>
        public GroupReconciliationInstanceId(string instanceIdType = default(string), string instanceIdValue = default(string))
        {
            // to ensure "instanceIdType" is required (not null)
            if (instanceIdType == null)
            {
                throw new ArgumentNullException("instanceIdType is a required property for GroupReconciliationInstanceId and cannot be null");
            }
            this.InstanceIdType = instanceIdType;
            // to ensure "instanceIdValue" is required (not null)
            if (instanceIdValue == null)
            {
                throw new ArgumentNullException("instanceIdValue is a required property for GroupReconciliationInstanceId and cannot be null");
            }
            this.InstanceIdValue = instanceIdValue;
        }

        /// <summary>
        /// Type of the reconciliation run, manual or automatic (via the workflow). \&quot;Manual\&quot; | \&quot;WorkflowServiceTaskId\&quot;
        /// </summary>
        /// <value>Type of the reconciliation run, manual or automatic (via the workflow). \&quot;Manual\&quot; | \&quot;WorkflowServiceTaskId\&quot;</value>
        [DataMember(Name = "instanceIdType", IsRequired = true, EmitDefaultValue = true)]
        public string InstanceIdType { get; set; }

        /// <summary>
        /// Reconciliation run identifier: a manually-provided key or taskId.
        /// </summary>
        /// <value>Reconciliation run identifier: a manually-provided key or taskId.</value>
        [DataMember(Name = "instanceIdValue", IsRequired = true, EmitDefaultValue = true)]
        public string InstanceIdValue { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class GroupReconciliationInstanceId {\n");
            sb.Append("  InstanceIdType: ").Append(InstanceIdType).Append("\n");
            sb.Append("  InstanceIdValue: ").Append(InstanceIdValue).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GroupReconciliationInstanceId);
        }

        /// <summary>
        /// Returns true if GroupReconciliationInstanceId instances are equal
        /// </summary>
        /// <param name="input">Instance of GroupReconciliationInstanceId to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GroupReconciliationInstanceId input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.InstanceIdType == input.InstanceIdType ||
                    (this.InstanceIdType != null &&
                    this.InstanceIdType.Equals(input.InstanceIdType))
                ) && 
                (
                    this.InstanceIdValue == input.InstanceIdValue ||
                    (this.InstanceIdValue != null &&
                    this.InstanceIdValue.Equals(input.InstanceIdValue))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.InstanceIdType != null)
                {
                    hashCode = (hashCode * 59) + this.InstanceIdType.GetHashCode();
                }
                if (this.InstanceIdValue != null)
                {
                    hashCode = (hashCode * 59) + this.InstanceIdValue.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // InstanceIdType (string) minLength
            if (this.InstanceIdType != null && this.InstanceIdType.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for InstanceIdType, length must be greater than 1.", new [] { "InstanceIdType" });
            }

            // InstanceIdValue (string) minLength
            if (this.InstanceIdValue != null && this.InstanceIdValue.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for InstanceIdValue, length must be greater than 1.", new [] { "InstanceIdValue" });
            }

            yield break;
        }
    }
}
