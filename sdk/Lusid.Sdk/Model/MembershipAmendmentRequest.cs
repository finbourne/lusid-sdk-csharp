/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Lusid.Sdk.Client.OpenAPIDateConverter;

namespace Lusid.Sdk.Model
{
    /// <summary>
    /// MembershipAmendmentRequest
    /// </summary>
    [DataContract(Name = "MembershipAmendmentRequest")]
    public partial class MembershipAmendmentRequest : IEquatable<MembershipAmendmentRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="MembershipAmendmentRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected MembershipAmendmentRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="MembershipAmendmentRequest" /> class.
        /// </summary>
        /// <param name="customDataModelId">customDataModelId (required).</param>
        /// <param name="entityType">The type of the entity that is being added or removed from the Custom Data Model. (required).</param>
        /// <param name="entityUniqueId">The entity unique identifier of the entity that is being added or removed from the Custom Data Model. (required).</param>
        /// <param name="operation">The operation to be performed on the entity&#39;s membership in the Custom Data Model. Either &#39;Add&#39; or &#39;Remove&#39;. (required).</param>
        public MembershipAmendmentRequest(ResourceId customDataModelId = default(ResourceId), string entityType = default(string), string entityUniqueId = default(string), string operation = default(string))
        {
            // to ensure "customDataModelId" is required (not null)
            if (customDataModelId == null)
            {
                throw new ArgumentNullException("customDataModelId is a required property for MembershipAmendmentRequest and cannot be null");
            }
            this.CustomDataModelId = customDataModelId;
            // to ensure "entityType" is required (not null)
            if (entityType == null)
            {
                throw new ArgumentNullException("entityType is a required property for MembershipAmendmentRequest and cannot be null");
            }
            this.EntityType = entityType;
            // to ensure "entityUniqueId" is required (not null)
            if (entityUniqueId == null)
            {
                throw new ArgumentNullException("entityUniqueId is a required property for MembershipAmendmentRequest and cannot be null");
            }
            this.EntityUniqueId = entityUniqueId;
            // to ensure "operation" is required (not null)
            if (operation == null)
            {
                throw new ArgumentNullException("operation is a required property for MembershipAmendmentRequest and cannot be null");
            }
            this.Operation = operation;
        }

        /// <summary>
        /// Gets or Sets CustomDataModelId
        /// </summary>
        [DataMember(Name = "customDataModelId", IsRequired = true, EmitDefaultValue = true)]
        public ResourceId CustomDataModelId { get; set; }

        /// <summary>
        /// The type of the entity that is being added or removed from the Custom Data Model.
        /// </summary>
        /// <value>The type of the entity that is being added or removed from the Custom Data Model.</value>
        [DataMember(Name = "entityType", IsRequired = true, EmitDefaultValue = true)]
        public string EntityType { get; set; }

        /// <summary>
        /// The entity unique identifier of the entity that is being added or removed from the Custom Data Model.
        /// </summary>
        /// <value>The entity unique identifier of the entity that is being added or removed from the Custom Data Model.</value>
        [DataMember(Name = "entityUniqueId", IsRequired = true, EmitDefaultValue = true)]
        public string EntityUniqueId { get; set; }

        /// <summary>
        /// The operation to be performed on the entity&#39;s membership in the Custom Data Model. Either &#39;Add&#39; or &#39;Remove&#39;.
        /// </summary>
        /// <value>The operation to be performed on the entity&#39;s membership in the Custom Data Model. Either &#39;Add&#39; or &#39;Remove&#39;.</value>
        [DataMember(Name = "operation", IsRequired = true, EmitDefaultValue = true)]
        public string Operation { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class MembershipAmendmentRequest {\n");
            sb.Append("  CustomDataModelId: ").Append(CustomDataModelId).Append("\n");
            sb.Append("  EntityType: ").Append(EntityType).Append("\n");
            sb.Append("  EntityUniqueId: ").Append(EntityUniqueId).Append("\n");
            sb.Append("  Operation: ").Append(Operation).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as MembershipAmendmentRequest);
        }

        /// <summary>
        /// Returns true if MembershipAmendmentRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of MembershipAmendmentRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MembershipAmendmentRequest input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.CustomDataModelId == input.CustomDataModelId ||
                    (this.CustomDataModelId != null &&
                    this.CustomDataModelId.Equals(input.CustomDataModelId))
                ) && 
                (
                    this.EntityType == input.EntityType ||
                    (this.EntityType != null &&
                    this.EntityType.Equals(input.EntityType))
                ) && 
                (
                    this.EntityUniqueId == input.EntityUniqueId ||
                    (this.EntityUniqueId != null &&
                    this.EntityUniqueId.Equals(input.EntityUniqueId))
                ) && 
                (
                    this.Operation == input.Operation ||
                    (this.Operation != null &&
                    this.Operation.Equals(input.Operation))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CustomDataModelId != null)
                {
                    hashCode = (hashCode * 59) + this.CustomDataModelId.GetHashCode();
                }
                if (this.EntityType != null)
                {
                    hashCode = (hashCode * 59) + this.EntityType.GetHashCode();
                }
                if (this.EntityUniqueId != null)
                {
                    hashCode = (hashCode * 59) + this.EntityUniqueId.GetHashCode();
                }
                if (this.Operation != null)
                {
                    hashCode = (hashCode * 59) + this.Operation.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // EntityType (string) maxLength
            if (this.EntityType != null && this.EntityType.Length > 128)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for EntityType, length must be less than 128.", new [] { "EntityType" });
            }

            // EntityType (string) minLength
            if (this.EntityType != null && this.EntityType.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for EntityType, length must be greater than 0.", new [] { "EntityType" });
            }

            // EntityType (string) pattern
            Regex regexEntityType = new Regex(@"^[a-zA-Z]*$", RegexOptions.CultureInvariant);
            if (false == regexEntityType.Match(this.EntityType).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for EntityType, must match a pattern of " + regexEntityType, new [] { "EntityType" });
            }

            // EntityUniqueId (string) maxLength
            if (this.EntityUniqueId != null && this.EntityUniqueId.Length > 36)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for EntityUniqueId, length must be less than 36.", new [] { "EntityUniqueId" });
            }

            // EntityUniqueId (string) minLength
            if (this.EntityUniqueId != null && this.EntityUniqueId.Length < 36)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for EntityUniqueId, length must be greater than 36.", new [] { "EntityUniqueId" });
            }

            // EntityUniqueId (string) pattern
            Regex regexEntityUniqueId = new Regex(@"^[a-zA-Z0-9\-]+$", RegexOptions.CultureInvariant);
            if (false == regexEntityUniqueId.Match(this.EntityUniqueId).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for EntityUniqueId, must match a pattern of " + regexEntityUniqueId, new [] { "EntityUniqueId" });
            }

            // Operation (string) minLength
            if (this.Operation != null && this.Operation.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Operation, length must be greater than 1.", new [] { "Operation" });
            }

            yield break;
        }
    }
}
