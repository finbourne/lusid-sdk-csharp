/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Lusid.Sdk.Client.OpenAPIDateConverter;

namespace Lusid.Sdk.Model
{
    /// <summary>
    /// The data for a Share Class at the previous valuation point.
    /// </summary>
    [DataContract(Name = "PreviousShareClassBreakdown")]
    public partial class PreviousShareClassBreakdown : IEquatable<PreviousShareClassBreakdown>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PreviousShareClassBreakdown" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected PreviousShareClassBreakdown() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="PreviousShareClassBreakdown" /> class.
        /// </summary>
        /// <param name="nav">nav (required).</param>
        /// <param name="unitisation">unitisation.</param>
        /// <param name="shareClassToFundFxRate">The fx rate from the Share Class currency to the fund currency at this valuation point. (required).</param>
        public PreviousShareClassBreakdown(PreviousNAV nav = default(PreviousNAV), UnitisationData unitisation = default(UnitisationData), decimal shareClassToFundFxRate = default(decimal))
        {
            // to ensure "nav" is required (not null)
            if (nav == null)
            {
                throw new ArgumentNullException("nav is a required property for PreviousShareClassBreakdown and cannot be null");
            }
            this.Nav = nav;
            this.ShareClassToFundFxRate = shareClassToFundFxRate;
            this.Unitisation = unitisation;
        }

        /// <summary>
        /// Gets or Sets Nav
        /// </summary>
        [DataMember(Name = "nav", IsRequired = true, EmitDefaultValue = true)]
        public PreviousNAV Nav { get; set; }

        /// <summary>
        /// Gets or Sets Unitisation
        /// </summary>
        [DataMember(Name = "unitisation", EmitDefaultValue = false)]
        public UnitisationData Unitisation { get; set; }

        /// <summary>
        /// The fx rate from the Share Class currency to the fund currency at this valuation point.
        /// </summary>
        /// <value>The fx rate from the Share Class currency to the fund currency at this valuation point.</value>
        [DataMember(Name = "shareClassToFundFxRate", IsRequired = true, EmitDefaultValue = true)]
        public decimal ShareClassToFundFxRate { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PreviousShareClassBreakdown {\n");
            sb.Append("  Nav: ").Append(Nav).Append("\n");
            sb.Append("  Unitisation: ").Append(Unitisation).Append("\n");
            sb.Append("  ShareClassToFundFxRate: ").Append(ShareClassToFundFxRate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PreviousShareClassBreakdown);
        }

        /// <summary>
        /// Returns true if PreviousShareClassBreakdown instances are equal
        /// </summary>
        /// <param name="input">Instance of PreviousShareClassBreakdown to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PreviousShareClassBreakdown input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Nav == input.Nav ||
                    (this.Nav != null &&
                    this.Nav.Equals(input.Nav))
                ) && 
                (
                    this.Unitisation == input.Unitisation ||
                    (this.Unitisation != null &&
                    this.Unitisation.Equals(input.Unitisation))
                ) && 
                (
                    this.ShareClassToFundFxRate == input.ShareClassToFundFxRate ||
                    this.ShareClassToFundFxRate.Equals(input.ShareClassToFundFxRate)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Nav != null)
                {
                    hashCode = (hashCode * 59) + this.Nav.GetHashCode();
                }
                if (this.Unitisation != null)
                {
                    hashCode = (hashCode * 59) + this.Unitisation.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.ShareClassToFundFxRate.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
