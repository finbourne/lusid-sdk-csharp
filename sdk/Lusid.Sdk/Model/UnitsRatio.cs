/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Lusid.Sdk.Client.OpenAPIDateConverter;

namespace Lusid.Sdk.Model
{
    /// <summary>
    /// The number of units you have after the event (output) for a given number of units you have prior to the event (input).
    /// </summary>
    [DataContract(Name = "UnitsRatio")]
    public partial class UnitsRatio : IEquatable<UnitsRatio>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UnitsRatio" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected UnitsRatio() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="UnitsRatio" /> class.
        /// </summary>
        /// <param name="input">Input amount.  Denominator of the Ratio (required).</param>
        /// <param name="output">Output amount. Numerator of the Ratio (required).</param>
        public UnitsRatio(decimal input = default(decimal), decimal output = default(decimal))
        {
            this.Input = input;
            this.Output = output;
        }

        /// <summary>
        /// Input amount.  Denominator of the Ratio
        /// </summary>
        /// <value>Input amount.  Denominator of the Ratio</value>
        [DataMember(Name = "input", IsRequired = true, EmitDefaultValue = true)]
        public decimal Input { get; set; }

        /// <summary>
        /// Output amount. Numerator of the Ratio
        /// </summary>
        /// <value>Output amount. Numerator of the Ratio</value>
        [DataMember(Name = "output", IsRequired = true, EmitDefaultValue = true)]
        public decimal Output { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class UnitsRatio {\n");
            sb.Append("  Input: ").Append(Input).Append("\n");
            sb.Append("  Output: ").Append(Output).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as UnitsRatio);
        }

        /// <summary>
        /// Returns true if UnitsRatio instances are equal
        /// </summary>
        /// <param name="input">Instance of UnitsRatio to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UnitsRatio input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Input == input.Input ||
                    this.Input.Equals(input.Input)
                ) && 
                (
                    this.Output == input.Output ||
                    this.Output.Equals(input.Output)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Input.GetHashCode();
                hashCode = (hashCode * 59) + this.Output.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
