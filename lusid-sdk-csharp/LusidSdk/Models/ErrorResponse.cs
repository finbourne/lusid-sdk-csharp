// <auto-generated>
// Copyright Â© 2018 FINBOURNE TECHNOLOGY LTD
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to
// deal in the Software without restriction, including without limitation the
// rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
// sell copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
// IN THE SOFTWARE.
// </auto-generated>

namespace Finbourne.Models
{
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    public partial class ErrorResponse
    {
        /// <summary>
        /// Initializes a new instance of the ErrorResponse class.
        /// </summary>
        public ErrorResponse()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ErrorResponse class.
        /// </summary>
        /// <param name="status">The status code that will be returned to the
        /// client</param>
        /// <param name="code">The Finbourne specific error-code that
        /// encapsulates the specific issue encountered. Possible values
        /// include: 'Unknown', 'PersonalisationNotFound',
        /// 'NonRecursivePersonalisation', 'VersionNotFound',
        /// 'SecurityNotFound', 'PropertyNotFound', 'PortfolioRecursionDepth',
        /// 'GroupNotFound', 'PortfolioNotFound', 'PropertySchemaNotFound',
        /// 'PortfolioWithIdAlreadyExists', 'OrphanedPortfolio',
        /// 'MissingBaseClaims', 'PropertyNotDefined',
        /// 'CannotDeleteSystemProperty', 'CannotModifyImmutablePropertyField',
        /// 'PropertyAlreadyExists', 'InvalidPropertyLifeTime',
        /// 'CannotModifyDefaultPropertyFormat', 'GroupAlreadyExists',
        /// 'NoSuchPropertyDataFormat', 'ValidationError',
        /// 'LoopDetectedInGroupHierarchy', 'SubGroupAlreadyExists',
        /// 'PriceSourceNotFound', 'AnalyticStoreNotFound',
        /// 'AnalyticStoreAlreadyExists', 'ClientSecurityAlreadyExists',
        /// 'DuplicateInParameterSet', 'ResultsNotFound',
        /// 'OrderFieldNotInResultSet', 'OperationFailed',
        /// 'ElasticSearchError', 'InvalidParameterValue',
        /// 'ServerConfigurationError', 'CommandProcessingFailure',
        /// 'EntityStateConstructionFailure', 'EntityTimelineDoesNotExist',
        /// 'EventPublishFailure', 'InvalidRequestFailure',
        /// 'EventPublishUnknown', 'EventQueryFailure',
        /// 'BlobDidNotExistFailure', 'SubSystemRequestFailure',
        /// 'SubSystemConfigurationFailure', 'FailedToDelete',
        /// 'UpsertClientSecurityFailure', 'IllegalAsAtInterval',
        /// 'IllegalBitemporalQuery', 'InvalidAlternateId',
        /// 'CannotAddSourcePortfolioPropertyExplicitly',
        /// 'EntityAlreadyExistsInGroup', 'EntityWithIdAlreadyExists',
        /// 'PortfolioDetailsDoNotExist', 'PortfolioWithNameAlreadyExists',
        /// 'InvalidTrades', 'ReferencePortfolioNotFound',
        /// 'DuplicateIdFailure', 'SecurityByCodeNotFound',
        /// 'CommandRetrievalFailure', 'DataFilterApplicationFailure',
        /// 'SearchFailed', 'MovementsEngineConfigurationKeyFailure',
        /// 'FxRateSourceNotFound', 'AccrualSourceNotFound'</param>
        /// <param name="message">The non-technical-user friendly message
        /// describing the error and how it might be remedied.</param>
        /// <param name="detailedMessage">A technical error message that
        /// contains the details of the issue and how it might be
        /// fixed.</param>
        /// <param name="items">Any action specific item specific sub errors
        /// (e.g. per-trade validation errors)</param>
        /// <param name="moreInfo">A link to the endpoint that can provide the
        /// dev with more information about that class of error.</param>
        public ErrorResponse(int? status = default(int?), string code = default(string), string message = default(string), string detailedMessage = default(string), IList<ErrorDetail> items = default(IList<ErrorDetail>), string moreInfo = default(string))
        {
            Status = status;
            Code = code;
            Message = message;
            DetailedMessage = detailedMessage;
            Items = items;
            MoreInfo = moreInfo;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets the status code that will be returned to the client
        /// </summary>
        [JsonProperty(PropertyName = "status")]
        public int? Status { get; private set; }

        /// <summary>
        /// Gets the Finbourne specific error-code that encapsulates the
        /// specific issue encountered. Possible values include: 'Unknown',
        /// 'PersonalisationNotFound', 'NonRecursivePersonalisation',
        /// 'VersionNotFound', 'SecurityNotFound', 'PropertyNotFound',
        /// 'PortfolioRecursionDepth', 'GroupNotFound', 'PortfolioNotFound',
        /// 'PropertySchemaNotFound', 'PortfolioWithIdAlreadyExists',
        /// 'OrphanedPortfolio', 'MissingBaseClaims', 'PropertyNotDefined',
        /// 'CannotDeleteSystemProperty', 'CannotModifyImmutablePropertyField',
        /// 'PropertyAlreadyExists', 'InvalidPropertyLifeTime',
        /// 'CannotModifyDefaultPropertyFormat', 'GroupAlreadyExists',
        /// 'NoSuchPropertyDataFormat', 'ValidationError',
        /// 'LoopDetectedInGroupHierarchy', 'SubGroupAlreadyExists',
        /// 'PriceSourceNotFound', 'AnalyticStoreNotFound',
        /// 'AnalyticStoreAlreadyExists', 'ClientSecurityAlreadyExists',
        /// 'DuplicateInParameterSet', 'ResultsNotFound',
        /// 'OrderFieldNotInResultSet', 'OperationFailed',
        /// 'ElasticSearchError', 'InvalidParameterValue',
        /// 'ServerConfigurationError', 'CommandProcessingFailure',
        /// 'EntityStateConstructionFailure', 'EntityTimelineDoesNotExist',
        /// 'EventPublishFailure', 'InvalidRequestFailure',
        /// 'EventPublishUnknown', 'EventQueryFailure',
        /// 'BlobDidNotExistFailure', 'SubSystemRequestFailure',
        /// 'SubSystemConfigurationFailure', 'FailedToDelete',
        /// 'UpsertClientSecurityFailure', 'IllegalAsAtInterval',
        /// 'IllegalBitemporalQuery', 'InvalidAlternateId',
        /// 'CannotAddSourcePortfolioPropertyExplicitly',
        /// 'EntityAlreadyExistsInGroup', 'EntityWithIdAlreadyExists',
        /// 'PortfolioDetailsDoNotExist', 'PortfolioWithNameAlreadyExists',
        /// 'InvalidTrades', 'ReferencePortfolioNotFound',
        /// 'DuplicateIdFailure', 'SecurityByCodeNotFound',
        /// 'CommandRetrievalFailure', 'DataFilterApplicationFailure',
        /// 'SearchFailed', 'MovementsEngineConfigurationKeyFailure',
        /// 'FxRateSourceNotFound', 'AccrualSourceNotFound'
        /// </summary>
        [JsonProperty(PropertyName = "code")]
        public string Code { get; private set; }

        /// <summary>
        /// Gets the non-technical-user friendly message describing the error
        /// and how it might be remedied.
        /// </summary>
        [JsonProperty(PropertyName = "message")]
        public string Message { get; private set; }

        /// <summary>
        /// Gets a technical error message that contains the details of the
        /// issue and how it might be fixed.
        /// </summary>
        [JsonProperty(PropertyName = "detailedMessage")]
        public string DetailedMessage { get; private set; }

        /// <summary>
        /// Gets or sets any action specific item specific sub errors (e.g.
        /// per-trade validation errors)
        /// </summary>
        [JsonProperty(PropertyName = "items")]
        public IList<ErrorDetail> Items { get; set; }

        /// <summary>
        /// Gets a link to the endpoint that can provide the dev with more
        /// information about that class of error.
        /// </summary>
        [JsonProperty(PropertyName = "moreInfo")]
        public string MoreInfo { get; private set; }

    }
}
