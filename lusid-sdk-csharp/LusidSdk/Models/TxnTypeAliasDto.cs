// <auto-generated>
// Copyright Â© 2018 FINBOURNE TECHNOLOGY LTD
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to
// deal in the Software without restriction, including without limitation the
// rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
// sell copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
// IN THE SOFTWARE.
// </auto-generated>

namespace Finbourne.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    public partial class TxnTypeAliasDto
    {
        /// <summary>
        /// Initializes a new instance of the TxnTypeAliasDto class.
        /// </summary>
        public TxnTypeAliasDto()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the TxnTypeAliasDto class.
        /// </summary>
        /// <param name="type">The transaction type</param>
        /// <param name="description">Brief description of the
        /// transaction</param>
        /// <param name="txnClass">Relates types of a similar class. E.g.
        /// Buy/Sell, StockIn/StockOut</param>
        /// <param name="txnGroup">Group is a set of codes related to a source,
        /// or sync</param>
        /// <param name="txnRoles">Transactions role within a class. E.g.
        /// Increase a long position. Possible values include: 'None',
        /// 'LongLonger', 'LongShorter', 'ShortShorter', 'ShortLonger',
        /// 'Longer', 'Shorter', 'AllRoles'</param>
        public TxnTypeAliasDto(string type, string description, string txnClass, string txnGroup, string txnRoles = default(string))
        {
            Type = type;
            Description = description;
            TxnClass = txnClass;
            TxnGroup = txnGroup;
            TxnRoles = txnRoles;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the transaction type
        /// </summary>
        [JsonProperty(PropertyName = "type")]
        public string Type { get; set; }

        /// <summary>
        /// Gets or sets brief description of the transaction
        /// </summary>
        [JsonProperty(PropertyName = "description")]
        public string Description { get; set; }

        /// <summary>
        /// Gets or sets relates types of a similar class. E.g. Buy/Sell,
        /// StockIn/StockOut
        /// </summary>
        [JsonProperty(PropertyName = "txnClass")]
        public string TxnClass { get; set; }

        /// <summary>
        /// Gets or sets group is a set of codes related to a source, or sync
        /// </summary>
        [JsonProperty(PropertyName = "txnGroup")]
        public string TxnGroup { get; set; }

        /// <summary>
        /// Gets or sets transactions role within a class. E.g. Increase a long
        /// position. Possible values include: 'None', 'LongLonger',
        /// 'LongShorter', 'ShortShorter', 'ShortLonger', 'Longer', 'Shorter',
        /// 'AllRoles'
        /// </summary>
        [JsonProperty(PropertyName = "txnRoles")]
        public string TxnRoles { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Type == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Type");
            }
            if (Description == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Description");
            }
            if (TxnClass == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "TxnClass");
            }
            if (TxnGroup == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "TxnGroup");
            }
        }
    }
}
