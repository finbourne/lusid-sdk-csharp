// <auto-generated>
// Copyright Â© 2018 FINBOURNE TECHNOLOGY LTD
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to
// deal in the Software without restriction, including without limitation the
// rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
// sell copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
// IN THE SOFTWARE.
// </auto-generated>

namespace Finbourne
{
    using Microsoft.Rest;
    using Models;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// # Introduction
    ///
    /// This page documents the [LUSID API](https://api.finbourne.com/swagger),
    /// which allows authorised clients to query and update their data within
    /// the LUSID platform.
    ///
    /// SDKs to interact with the LUSID API are available in the following
    /// languages :
    ///
    /// * [C#](https://github.com/finbourne/lusid-sdk-csharp)
    /// * [Java](https://github.com/finbourne/lusid-sdk-java)
    /// * [JavaScript](https://github.com/finbourne/lusid-sdk-js)
    /// * [Python](https://github.com/finbourne/lusid-sdk-python)
    ///
    /// # Immutable Events
    ///
    /// A core tenet of the LUSID platform is the concept of an immutable data
    /// store.  This gives the ability to consistently reproduce the state of
    /// the system for any given point in bi-temporal space.  In order to
    /// achieve this LUSID has implemented an append only event store for all
    /// data types.  New events, including historical amendments, are added to
    /// the end of the event stream and then 'played back' in order to
    /// construct the state.  Given that all the events from T0 are required in
    /// order to reconstruct the state, there can be significant computational
    /// complexity and cost involved.  FINBOURNE have employed a number of
    /// techniques and optimisations in order to produce consistent performance
    /// characteristics e.g. using snapshots which has resulted in a highly
    /// performance and scalable platform.
    ///
    /// # Data Model
    ///
    /// This section describes the data model that LUSID exposes via the APIs.
    ///
    /// ## Scope
    ///
    /// All entities in LUSID live within a logical partitioning of data known
    /// as a scope.  The unique code which identifies an entity is namespaced
    /// within the scope, allowing two entities with the same code in different
    /// scopes to be individually addressable.
    ///
    /// For example, prices for equities from different vendors may be uploaded
    /// into different scopes such as `client/vendor1` and `client/vendor2`.  A
    /// portfolio may then be valued using either of the price sources by
    /// referencing the appropriate scope.
    ///
    /// ## Schema
    ///
    /// A detailed description of the entities used by the API and parameters
    /// for endpoints which take a JSON document can be retrieved via the
    /// `schema` endpoint.
    ///
    /// ## Securities
    ///
    /// LUSID has its own security master implementation (LUSID CORE) which
    /// sources reference data from multiple data vendors.
    /// [OpenFIGI](https://openfigi.com/) and [PermID](https://permid.org/) are
    /// used as the security identifier when uploading trades, holdings,
    /// prices, etc.
    /// The API exposes a `securities/lookup` endpoint which can be used to
    /// lookup these identifiers given other market identifiers.
    ///
    /// Cash can be referenced using the ISO currency code prefixed with
    /// "`CCY_`" e.g. `CCY_GBP`
    ///
    /// For any securities that are not recognised by LUSID (eg OTCs) a client
    /// can upload a client defined security. Securitised portfolios and funds
    /// can be modelled as client defined securities.
    ///
    /// ## Security Prices (Analytics)
    ///
    /// Security prices are stored in LUSID's Analytics Store
    ///
    /// | Field|Type|Description |
    /// | ---|---|--- |
    /// | Id|string|Unique security identifier |
    /// | Value|decimal|Value of the analytic, eg price |
    /// | Denomination|string|Underlying unit of the analytic, eg currency, EPS
    /// etc. |
    ///
    ///
    /// ## Security Data
    ///
    /// Security data can be uploaded to the system using the
    /// [Classifications](#tag/Classification) endpoint.
    ///
    /// | Field|Type|Description |
    /// | ---|---|--- |
    /// | Uid|string|Unique security identifier |
    /// | EffectiveFrom|datetime|Date from which this classification is
    /// effective |
    ///
    ///
    /// ## Portfolios
    ///
    /// A portfolio is a container for trades and/or holdings.  Meta data and
    /// classifications of portfolios can be attached via properties.
    ///
    /// ## Derived Portfolios
    ///
    /// LUSID also allows for a portfolio to be composed of another portfolio
    /// via derived portfolios.  A derived portfolio can contain its own trades
    /// and also inherits any trades from its parent portfolio.  Any changes
    /// made to the parent portfolio are automatically reflected in derived
    /// portfolio.
    ///
    /// Derived portfolios in conjunction with scopes are a powerful construct.
    /// For example, to do pre-trade what-if analysis, a derived portfolio
    /// could be created a new namespace linked to the underlying live (parent)
    /// portfolio.  Analysis can then be undertaken on the derived portfolio
    /// without affecting the live portfolio.
    ///
    /// ## Transactions
    ///
    /// A transaction represents an economic activity against a Portfolio.
    ///
    /// | Field|Type|Description |
    /// | ---|---|--- |
    /// | TradeId|string|Unique trade identifier |
    /// | Type|string|LUSID transaction type code - Buy, Sell, StockIn,
    /// StockOut, etc |
    /// | SecurityUid|string|Unique security identifier |
    /// | TradeDate|datetime|Trade date |
    /// | SettlementDate|datetime|Settlement date |
    /// | Units|decimal|Quantity of trade in units of the security |
    /// | TradePrice|decimal|Execution price for the trade |
    /// | TotalConsideration|decimal|Total value of the trade |
    /// | ExchangeRate|decimal|Rate between trade and settle currency |
    /// | SettlementCurrency|string|Settlement currency |
    /// | TradeCurrency|string|Trade currency |
    /// | CounterpartyId|string|Counterparty identifier |
    /// | Source|string|Where this trade came from, either Client or System |
    /// | DividendState|string|  |
    /// | TradePriceType|string|  |
    /// | UnitType|string|  |
    /// | NettingSet|string|  |
    ///
    ///
    /// ## Holdings
    ///
    /// A holding represents a position in a security or cash on a given date.
    ///
    /// | Field|Type|Description |
    /// | ---|---|--- |
    /// | SecurityUid|string|Unique security identifier |
    /// | HoldingType|string|Type of holding, eg Position, Balance,
    /// CashCommitment, Receivable, ForwardFX |
    /// | Units|decimal|Quantity of holding |
    /// | SettledUnits|decimal|Settled quantity of holding |
    /// | Cost|decimal|Book cost of holding in trade currency |
    /// | CostPortfolioCcy|decimal|Book cost of holding in portfolio currency |
    /// | Transaction|TradeDto|If this is commitment-type holding, the
    /// transaction behind it |
    ///
    ///
    /// ## Corporate Actions
    ///
    /// Corporate actions are represented within LUSID in terms of a set of
    /// security-specific 'transitions'.  These transitions are used to specify
    /// the participants of the corporate action, and the effect that the
    /// corporate action will have on holdings in those participants.
    ///
    /// *Corporate action*
    ///
    /// | Field|Type|Description |
    /// | ---|---|--- |
    /// | SourceId|id|  |
    /// | CorporateActionId|code|  |
    /// | AnnouncementDate|datetime|  |
    /// | ExDate|datetime|  |
    /// | RecordDate|datetime|  |
    ///
    ///
    ///
    /// *Transition*
    ///
    /// | Field|Type|Description |
    /// | ---|---|--- |
    /// | Direction|string|  |
    /// | SecurityUid|string|  |
    /// | UnitsFactor|decimal|  |
    /// | CostFactor|decimal|  |
    ///
    ///
    /// ## Property
    ///
    /// Properties are key-value pairs that can be applied to any entity within
    /// a domain (where a domain is `trade`, `portfolio`, `security` etc).
    /// Properties must be defined before use with a `PropertyDefinition` and
    /// can then subsequently be added to entities.
    ///
    ///
    /// # Error Codes
    ///
    /// | Code|Name|Description |
    /// | ---|---|--- |
    /// | &lt;a name="100"&gt;100&lt;/a&gt;|Personalisations not found|The
    /// personalisation(s) identified by the pattern provided could not be
    /// found, either because it does not exist or it has been deleted. Please
    /// check the pattern your provided. |
    /// | &lt;a name="101"&gt;101&lt;/a&gt;|NonRecursivePersonalisation|  |
    /// | &lt;a name="102"&gt;102&lt;/a&gt;|VersionNotFound|  |
    /// | &lt;a name="104"&gt;104&lt;/a&gt;|SecurityNotFound|  |
    /// | &lt;a name="104"&gt;104&lt;/a&gt;|SecurityNotFound|  |
    /// | &lt;a name="105"&gt;105&lt;/a&gt;|PropertyNotFound|  |
    /// | &lt;a name="106"&gt;106&lt;/a&gt;|PortfolioRecursionDepth|  |
    /// | &lt;a name="108"&gt;108&lt;/a&gt;|GroupNotFound|  |
    /// | &lt;a name="109"&gt;109&lt;/a&gt;|PortfolioNotFound|  |
    /// | &lt;a name="110"&gt;110&lt;/a&gt;|PropertySchemaNotFound|  |
    /// | &lt;a name="112"&gt;112&lt;/a&gt;|PortfolioWithIdAlreadyExists|  |
    /// | &lt;a name="113"&gt;113&lt;/a&gt;|OrphanedPortfolio|  |
    /// | &lt;a name="119"&gt;119&lt;/a&gt;|MissingBaseClaims|  |
    /// | &lt;a name="121"&gt;121&lt;/a&gt;|PropertyNotDefined|  |
    /// | &lt;a name="122"&gt;122&lt;/a&gt;|CannotDeleteSystemProperty|  |
    /// | &lt;a name="123"&gt;123&lt;/a&gt;|CannotModifyImmutablePropertyField|
    /// |
    /// | &lt;a name="124"&gt;124&lt;/a&gt;|PropertyAlreadyExists|  |
    /// | &lt;a name="125"&gt;125&lt;/a&gt;|InvalidPropertyLifeTime|  |
    /// | &lt;a name="127"&gt;127&lt;/a&gt;|CannotModifyDefaultPropertyFormat|
    /// |
    /// | &lt;a name="128"&gt;128&lt;/a&gt;|GroupAlreadyExists|  |
    /// | &lt;a name="129"&gt;129&lt;/a&gt;|NoSuchPropertyDataFormat|  |
    /// | &lt;a name="132"&gt;132&lt;/a&gt;|ValidationError|  |
    /// | &lt;a name="133"&gt;133&lt;/a&gt;|LoopDetectedInGroupHierarchy|  |
    /// | &lt;a name="135"&gt;135&lt;/a&gt;|SubGroupAlreadyExists|  |
    /// | &lt;a name="138"&gt;138&lt;/a&gt;|PriceSourceNotFound|  |
    /// | &lt;a name="139"&gt;139&lt;/a&gt;|AnalyticStoreNotFound|  |
    /// | &lt;a name="141"&gt;141&lt;/a&gt;|AnalyticStoreAlreadyExists|  |
    /// | &lt;a name="143"&gt;143&lt;/a&gt;|ClientSecurityAlreadyExists|  |
    /// | &lt;a name="144"&gt;144&lt;/a&gt;|DuplicateInParameterSet|  |
    /// | &lt;a name="147"&gt;147&lt;/a&gt;|ResultsNotFound|  |
    /// | &lt;a name="148"&gt;148&lt;/a&gt;|OrderFieldNotInResultSet|  |
    /// | &lt;a name="149"&gt;149&lt;/a&gt;|OperationFailed|  |
    /// | &lt;a name="150"&gt;150&lt;/a&gt;|ElasticSearchError|  |
    /// | &lt;a name="151"&gt;151&lt;/a&gt;|InvalidParameterValue|  |
    /// | &lt;a name="152"&gt;152&lt;/a&gt;|ServerConfigurationError|  |
    /// | &lt;a name="153"&gt;153&lt;/a&gt;|CommandProcessingFailure|  |
    /// | &lt;a name="154"&gt;154&lt;/a&gt;|EntityStateConstructionFailure|  |
    /// | &lt;a name="155"&gt;155&lt;/a&gt;|EntityTimelineDoesNotExist|  |
    /// | &lt;a name="156"&gt;156&lt;/a&gt;|EventPublishFailure|  |
    /// | &lt;a name="157"&gt;157&lt;/a&gt;|InvalidRequestFailure|  |
    /// | &lt;a name="158"&gt;158&lt;/a&gt;|EventPublishUnknown|  |
    /// | &lt;a name="159"&gt;159&lt;/a&gt;|EventQueryFailure|  |
    /// | &lt;a name="160"&gt;160&lt;/a&gt;|BlobDidNotExistFailure|  |
    /// | &lt;a name="162"&gt;162&lt;/a&gt;|SubSystemRequestFailure|  |
    /// | &lt;a name="163"&gt;163&lt;/a&gt;|SubSystemConfigurationFailure|  |
    /// | &lt;a name="165"&gt;165&lt;/a&gt;|FailedToDelete|  |
    /// | &lt;a name="166"&gt;166&lt;/a&gt;|UpsertClientSecurityFailure|  |
    /// | &lt;a name="167"&gt;167&lt;/a&gt;|IllegalAsAtInterval|  |
    /// | &lt;a name="168"&gt;168&lt;/a&gt;|IllegalBitemporalQuery|  |
    /// | &lt;a name="169"&gt;169&lt;/a&gt;|InvalidAlternateId|  |
    /// | &lt;a
    /// name="170"&gt;170&lt;/a&gt;|CannotAddSourcePortfolioPropertyExplicitly|
    /// |
    /// | &lt;a name="171"&gt;171&lt;/a&gt;|EntityAlreadyExistsInGroup|  |
    /// | &lt;a name="173"&gt;173&lt;/a&gt;|EntityWithIdAlreadyExists|  |
    /// | &lt;a name="174"&gt;174&lt;/a&gt;|PortfolioDetailsDoNotExist|  |
    /// | &lt;a name="176"&gt;176&lt;/a&gt;|PortfolioWithNameAlreadyExists|  |
    /// | &lt;a name="177"&gt;177&lt;/a&gt;|InvalidTrades|  |
    /// | &lt;a name="178"&gt;178&lt;/a&gt;|ReferencePortfolioNotFound|  |
    /// | &lt;a name="179"&gt;179&lt;/a&gt;|DuplicateIdFailure|  |
    /// | &lt;a name="180"&gt;180&lt;/a&gt;|CommandRetrievalFailure|  |
    /// | &lt;a name="181"&gt;181&lt;/a&gt;|DataFilterApplicationFailure|  |
    /// | &lt;a name="182"&gt;182&lt;/a&gt;|SearchFailed|  |
    /// | &lt;a
    /// name="183"&gt;183&lt;/a&gt;|MovementsEngineConfigurationKeyFailure|  |
    /// | &lt;a name="184"&gt;184&lt;/a&gt;|FxRateSourceNotFound|  |
    /// | &lt;a name="185"&gt;185&lt;/a&gt;|AccrualSourceNotFound|  |
    /// | &lt;a name="-1"&gt;-1&lt;/a&gt;|Unknown error|  |
    ///
    /// </summary>
    public partial interface ILUSIDAPI : System.IDisposable
    {
        /// <summary>
        /// The base URI of the service.
        /// </summary>
        System.Uri BaseUri { get; set; }

        /// <summary>
        /// Gets or sets json serialization settings.
        /// </summary>
        JsonSerializerSettings SerializationSettings { get; }

        /// <summary>
        /// Gets or sets json deserialization settings.
        /// </summary>
        JsonSerializerSettings DeserializationSettings { get; }

        /// <summary>
        /// Subscription credentials which uniquely identify client
        /// subscription.
        /// </summary>
        ServiceClientCredentials Credentials { get; }


        /// <summary>
        /// Clears the entity caches on the instance that serves this request
        /// only.
        /// </summary>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> ClearEntityCachesWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets a corporate action based on dates
        /// </summary>
        /// <param name='scope'>
        /// Scope
        /// </param>
        /// <param name='sourceId'>
        /// Corporate action source id
        /// </param>
        /// <param name='effectiveDate'>
        /// Effective Date
        /// </param>
        /// <param name='asAt'>
        /// AsAt Date filter
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> ListCorporateActionsWithHttpMessagesAsync(string scope, string sourceId, System.DateTimeOffset? effectiveDate = default(System.DateTimeOffset?), System.DateTimeOffset? asAt = default(System.DateTimeOffset?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Creates/updates a corporate action
        /// </summary>
        /// <param name='scope'>
        /// The intended scope of the corporate action
        /// </param>
        /// <param name='sourceId'>
        /// Source of the corporate action
        /// </param>
        /// <param name='createRequest'>
        /// The corporate action creation request object
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> UpsertCorporateActionWithHttpMessagesAsync(string scope, string sourceId, UpsertCorporateActionRequest createRequest = default(UpsertCorporateActionRequest), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Aggregate data in a group hierarchy
        /// </summary>
        /// <param name='scope'>
        /// </param>
        /// <param name='groupCode'>
        /// </param>
        /// <param name='request'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> GetAggregationByGroupWithHttpMessagesAsync(string scope, string groupCode, AggregationRequest request = default(AggregationRequest), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Aggregation request data in a group hierarchy into a data tree
        /// </summary>
        /// <param name='scope'>
        /// </param>
        /// <param name='groupCode'>
        /// </param>
        /// <param name='request'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> GetNestedAggregationByGroupWithHttpMessagesAsync(string scope, string groupCode, AggregationRequest request = default(AggregationRequest), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Aggregate data in a portfolio
        /// </summary>
        /// <param name='scope'>
        /// </param>
        /// <param name='portfolioCode'>
        /// </param>
        /// <param name='request'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> GetAggregationByPortfolioWithHttpMessagesAsync(string scope, string portfolioCode, AggregationRequest request = default(AggregationRequest), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Aggregation request data in a portfolio into a data tree
        /// </summary>
        /// <param name='scope'>
        /// </param>
        /// <param name='portfolioCode'>
        /// </param>
        /// <param name='request'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> GetNestedAggregationByPortfolioWithHttpMessagesAsync(string scope, string portfolioCode, AggregationRequest request = default(AggregationRequest), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Aggregate data from a result set
        /// </summary>
        /// <param name='scope'>
        /// </param>
        /// <param name='resultsKey'>
        /// </param>
        /// <param name='resultsDate'>
        /// </param>
        /// <param name='request'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> GetAggregationByResultSetWithHttpMessagesAsync(string scope, string resultsKey, string resultsDate, AggregationRequest request = default(AggregationRequest), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Aggregate data from a result set into a nested structure
        /// </summary>
        /// <param name='scope'>
        /// </param>
        /// <param name='resultsKey'>
        /// </param>
        /// <param name='resultsDate'>
        /// </param>
        /// <param name='request'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> GetNestedAggregationByResultSetWithHttpMessagesAsync(string scope, string resultsKey, System.DateTimeOffset resultsDate, AggregationRequest request = default(AggregationRequest), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// List all analytic stores in client
        /// </summary>
        /// <param name='asAt'>
        /// </param>
        /// <param name='sortBy'>
        /// </param>
        /// <param name='start'>
        /// </param>
        /// <param name='limit'>
        /// </param>
        /// <param name='filter'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> ListAnalyticStoresWithHttpMessagesAsync(System.DateTimeOffset? asAt = default(System.DateTimeOffset?), IList<string> sortBy = default(IList<string>), int? start = default(int?), int? limit = default(int?), string filter = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Create a new analytic store for the given scope for the given date
        /// </summary>
        /// <param name='request'>
        /// A valid and fully populated analytic store creation request
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> CreateAnalyticStoreWithHttpMessagesAsync(CreateAnalyticStoreRequest request = default(CreateAnalyticStoreRequest), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get an analytic store
        /// </summary>
        /// <param name='scope'>
        /// The analytics data scope
        /// </param>
        /// <param name='year'>
        /// The year component of the date for the data in the scope
        /// </param>
        /// <param name='month'>
        /// The month component of the date for the data in the scope
        /// </param>
        /// <param name='day'>
        /// The day component of the date for the data in the scope
        /// </param>
        /// <param name='asAt'>
        /// AsAt date
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> GetAnalyticStoreWithHttpMessagesAsync(string scope, int year, int month, int day, System.DateTimeOffset? asAt = default(System.DateTimeOffset?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Create a new analytic store for the given scope for the given date
        /// </summary>
        /// <param name='scope'>
        /// The analytics data scope
        /// </param>
        /// <param name='year'>
        /// The year component of the date for the data in the scope
        /// </param>
        /// <param name='month'>
        /// The month component of the date for the data in the scope
        /// </param>
        /// <param name='day'>
        /// The day component of the date for the data in the scope
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> DeleteAnalyticStoreWithHttpMessagesAsync(string scope, int year, int month, int day, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Insert analytics into an existing analytic store for the given
        /// scope and date.
        /// </summary>
        /// <param name='scope'>
        /// The analytics data scope
        /// </param>
        /// <param name='year'>
        /// The year component of the date for the data in the scope
        /// </param>
        /// <param name='month'>
        /// The month component of the date for the data in the scope
        /// </param>
        /// <param name='day'>
        /// The day component of the date for the data in the scope
        /// </param>
        /// <param name='data'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> InsertAnalyticsWithHttpMessagesAsync(string scope, int year, int month, int day, IList<SecurityAnalyticDataDto> data = default(IList<SecurityAnalyticDataDto>), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Update classification data
        /// </summary>
        /// <param name='classifications'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> UpsertClassificationWithHttpMessagesAsync(IList<SecurityClassificationDto> classifications = default(IList<SecurityClassificationDto>), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Adds a new transaction type movement to the list of existing types
        /// </summary>
        /// <param name='type'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> AddConfigurationTransactionTypeWithHttpMessagesAsync(TxnMetaDataDto type = default(TxnMetaDataDto), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets the list of persisted transaction types
        /// </summary>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> GetConfigurationTransactionTypesWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Uploads a list of transaction types to be used by the movements
        /// engine
        /// </summary>
        /// <param name='types'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> UploadConfigurationTransactionTypesWithHttpMessagesAsync(IList<TxnMetaDataDto> types = default(IList<TxnMetaDataDto>), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <param name='version'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> GetDownloadUrlWithHttpMessagesAsync(string version = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> GetLatestVersionWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// List all groups in a specified scope
        /// </summary>
        /// <param name='scope'>
        /// </param>
        /// <param name='asAt'>
        /// </param>
        /// <param name='sortBy'>
        /// </param>
        /// <param name='start'>
        /// </param>
        /// <param name='limit'>
        /// </param>
        /// <param name='filter'>
        /// A filter expression to apply to the result set
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> ListPortfolioGroupsWithHttpMessagesAsync(string scope, System.DateTimeOffset? asAt = default(System.DateTimeOffset?), IList<string> sortBy = default(IList<string>), int? start = default(int?), int? limit = default(int?), string filter = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Create a new group
        /// </summary>
        /// <param name='scope'>
        /// </param>
        /// <param name='request'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> CreatePortfolioGroupWithHttpMessagesAsync(string scope, CreateGroupRequest request = default(CreateGroupRequest), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get an existing group
        /// </summary>
        /// <param name='scope'>
        /// </param>
        /// <param name='code'>
        /// </param>
        /// <param name='asAt'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> GetPortfolioGroupWithHttpMessagesAsync(string scope, string code, System.DateTimeOffset? asAt = default(System.DateTimeOffset?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Delete a group
        /// </summary>
        /// <param name='scope'>
        /// </param>
        /// <param name='code'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> DeletePortfolioGroupWithHttpMessagesAsync(string scope, string code, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets all commands that modified the portfolio groups(s) with the
        /// specified id.
        /// </summary>
        /// <param name='scope'>
        /// The scope of the portfolio group
        /// </param>
        /// <param name='code'>
        /// The portfolio group id
        /// </param>
        /// <param name='fromAsAt'>
        /// Filters commands by those that were processed at or after this
        /// time. Null means there is no lower limit.
        /// </param>
        /// <param name='toAsAt'>
        /// Filters commands by those that were processed at or before this
        /// time. Null means there is no upper limit (latest).
        /// </param>
        /// <param name='filter'>
        /// A filter expression to apply to the result set
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> GetPortfolioGroupCommandsWithHttpMessagesAsync(string scope, string code, System.DateTimeOffset? fromAsAt = default(System.DateTimeOffset?), System.DateTimeOffset? toAsAt = default(System.DateTimeOffset?), string filter = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get a full expansion of an existing group
        /// </summary>
        /// <param name='scope'>
        /// </param>
        /// <param name='code'>
        /// </param>
        /// <param name='effectiveAt'>
        /// </param>
        /// <param name='asAt'>
        /// </param>
        /// <param name='propertyFilter'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> GetPortfolioGroupExpansionWithHttpMessagesAsync(string scope, string code, System.DateTimeOffset? effectiveAt = default(System.DateTimeOffset?), System.DateTimeOffset? asAt = default(System.DateTimeOffset?), IList<string> propertyFilter = default(IList<string>), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Add a portfolio to an existing group
        /// </summary>
        /// <param name='scope'>
        /// </param>
        /// <param name='code'>
        /// </param>
        /// <param name='identifier'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> AddPortfolioToGroupWithHttpMessagesAsync(string scope, string code, ResourceId identifier = default(ResourceId), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Remove a portfolio that is currently present within an existing
        /// group
        /// </summary>
        /// <param name='scope'>
        /// </param>
        /// <param name='code'>
        /// </param>
        /// <param name='portfolioScope'>
        /// </param>
        /// <param name='portfolioCode'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> DeletePortfolioFromGroupWithHttpMessagesAsync(string scope, string code, string portfolioScope, string portfolioCode, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Add a sub group to an existing group
        /// </summary>
        /// <param name='scope'>
        /// </param>
        /// <param name='code'>
        /// </param>
        /// <param name='identifier'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> AddSubGroupToGroupWithHttpMessagesAsync(string scope, string code, ResourceId identifier = default(ResourceId), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Remove a subgroup that is currently present within an existing
        /// group
        /// </summary>
        /// <param name='scope'>
        /// </param>
        /// <param name='code'>
        /// </param>
        /// <param name='subgroupScope'>
        /// </param>
        /// <param name='subgroupCode'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> DeleteSubGroupFromGroupWithHttpMessagesAsync(string scope, string code, string subgroupScope, string subgroupCode, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Update an existing group
        /// </summary>
        /// <param name='scope'>
        /// </param>
        /// <param name='code'>
        /// </param>
        /// <param name='request'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> UpdatePortfolioGroupWithHttpMessagesAsync(string scope, string code, UpdateGroupRequest request = default(UpdateGroupRequest), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Search portfolio groups
        /// </summary>
        /// <param name='request'>
        /// </param>
        /// <param name='sortBy'>
        /// </param>
        /// <param name='start'>
        /// </param>
        /// <param name='limit'>
        /// </param>
        /// <param name='filter'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> PortfolioGroupsSearchWithHttpMessagesAsync(object request = default(object), IList<string> sortBy = default(IList<string>), int? start = default(int?), int? limit = default(int?), string filter = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Simple heartbeat method for the api
        /// </summary>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> GetHealthWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets the login information.
        /// </summary>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> GetLoginInfoWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Store a log message
        /// </summary>
        /// <param name='message'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> StoreWebLogsWithHttpMessagesAsync(WebLogMessage message = default(WebLogMessage), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Returns the current assembly version
        /// </summary>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> GetBuildVersionWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Returns the current assembly version
        /// </summary>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> VerifyConnectivityWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Returns the current assembly version
        /// </summary>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> GetVersionWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get a personalisation, recursing to get any referenced if required.
        /// </summary>
        /// <param name='pattern'>
        /// The search pattern or specific key
        /// </param>
        /// <param name='scope'>
        /// The scope level to request for. Possible values include: 'User',
        /// 'Group', 'Default', 'All'
        /// </param>
        /// <param name='recursive'>
        /// Whether to recurse into dereference recursive settings
        /// </param>
        /// <param name='wildcards'>
        /// Whether to apply wildcards to the provided pattern and pull back
        /// any matching
        /// </param>
        /// <param name='sortBy'>
        /// </param>
        /// <param name='start'>
        /// </param>
        /// <param name='limit'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> GetPersonalisationsWithHttpMessagesAsync(string pattern = default(string), string scope = default(string), bool? recursive = default(bool?), bool? wildcards = default(bool?), IList<string> sortBy = default(IList<string>), int? start = default(int?), int? limit = default(int?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Upsert one or more personalisations
        /// </summary>
        /// <param name='personalisations'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> UpsertPersonalisationsWithHttpMessagesAsync(IList<PersonalisationDto> personalisations = default(IList<PersonalisationDto>), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Delete a personalisation at a specific scope (or use scope ALL to
        /// purge the setting entirely)
        /// </summary>
        /// <param name='key'>
        /// The key of the setting to be deleted
        /// </param>
        /// <param name='scope'>
        /// The scope to delete at (use ALL to purge the setting entirely).
        /// Possible values include: 'User', 'Group', 'Default', 'All'
        /// </param>
        /// <param name='group'>
        /// If deleting a setting at group level, specify the group here
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> DeletePersonalisationWithHttpMessagesAsync(string key = default(string), string scope = default(string), string group = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// List scopes that contain portfolios
        /// </summary>
        /// <remarks>
        /// Lists all scopes that have previously been used
        /// </remarks>
        /// <param name='sortBy'>
        /// How to order the returned scopes
        /// </param>
        /// <param name='start'>
        /// The starting index for the returned scopes
        /// </param>
        /// <param name='limit'>
        /// The final index for the returned scopes
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> ListPortfolioScopesWithHttpMessagesAsync(IList<string> sortBy = default(IList<string>), int? start = default(int?), int? limit = default(int?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get all portfolios
        /// </summary>
        /// <remarks>
        /// Get all portfolios in a scope
        /// </remarks>
        /// <param name='scope'>
        /// The scope to get portfolios from
        /// </param>
        /// <param name='effectiveAt'>
        /// Effective date
        /// </param>
        /// <param name='asAt'>
        /// The asAt date to use
        /// </param>
        /// <param name='sortBy'>
        /// The columns to sort the returned data by
        /// </param>
        /// <param name='start'>
        /// How many items to skip from the returned set
        /// </param>
        /// <param name='limit'>
        /// How many items to return from the set
        /// </param>
        /// <param name='filter'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> ListPortfoliosWithHttpMessagesAsync(string scope, System.DateTimeOffset? effectiveAt = default(System.DateTimeOffset?), System.DateTimeOffset? asAt = default(System.DateTimeOffset?), IList<string> sortBy = default(IList<string>), int? start = default(int?), int? limit = default(int?), string filter = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Create portfolio
        /// </summary>
        /// <remarks>
        /// Creates a new portfolio
        /// </remarks>
        /// <param name='scope'>
        /// The intended scope of the portfolio
        /// </param>
        /// <param name='createRequest'>
        /// The portfolio creation request object
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> CreatePortfolioWithHttpMessagesAsync(string scope, CreatePortfolioRequest createRequest = default(CreatePortfolioRequest), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get portfolio
        /// </summary>
        /// <remarks>
        /// Gets a single portfolio by code
        /// </remarks>
        /// <param name='scope'>
        /// The scope of the portfolio
        /// </param>
        /// <param name='code'>
        /// Code for the portfolio
        /// </param>
        /// <param name='effectiveAt'>
        /// Effective date
        /// </param>
        /// <param name='asAt'>
        /// The asAt date to use
        /// </param>
        /// <param name='propertyFilter'>
        /// Optional property filter
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> GetPortfolioWithHttpMessagesAsync(string scope, string code, System.DateTimeOffset? effectiveAt = default(System.DateTimeOffset?), System.DateTimeOffset? asAt = default(System.DateTimeOffset?), IList<string> propertyFilter = default(IList<string>), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Update portfolio
        /// </summary>
        /// <param name='scope'>
        /// The scope of the portfolio to be updated
        /// </param>
        /// <param name='code'>
        /// Code for the portfolio
        /// </param>
        /// <param name='request'>
        /// The update request
        /// </param>
        /// <param name='effectiveAt'>
        /// The effective date for the change
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> UpdatePortfolioWithHttpMessagesAsync(string scope, string code, UpdatePortfolioRequest request = default(UpdatePortfolioRequest), System.DateTimeOffset? effectiveAt = default(System.DateTimeOffset?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Delete portfolio
        /// </summary>
        /// <remarks>
        /// Deletes a portfolio from the given effectiveAt
        /// </remarks>
        /// <param name='scope'>
        /// The scope of the portfolio
        /// </param>
        /// <param name='code'>
        /// Code for the portfolio
        /// </param>
        /// <param name='effectiveAt'>
        /// Effective date
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> DeletePortfolioWithHttpMessagesAsync(string scope, string code, System.DateTimeOffset? effectiveAt = default(System.DateTimeOffset?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get modifications
        /// </summary>
        /// <remarks>
        /// Gets all commands that modified the portfolio
        /// </remarks>
        /// <param name='scope'>
        /// The scope of the portfolio
        /// </param>
        /// <param name='code'>
        /// The portfolio id
        /// </param>
        /// <param name='fromAsAt'>
        /// Filters commands by those that were processed at or after this
        /// time. Null means there is no lower limit.
        /// </param>
        /// <param name='toAsAt'>
        /// Filters commands by those that were processed at or before this
        /// time. Null means there is no upper limit (latest).
        /// </param>
        /// <param name='filter'>
        /// Command filter
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> GetCommandsWithHttpMessagesAsync(string scope, string code, System.DateTimeOffset? fromAsAt = default(System.DateTimeOffset?), System.DateTimeOffset? toAsAt = default(System.DateTimeOffset?), string filter = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get portfolio details
        /// </summary>
        /// <remarks>
        /// Gets the details for a portfolio.  For a derived portfolio this can
        /// be
        /// the details of another reference portfolio
        /// </remarks>
        /// <param name='scope'>
        /// The scope of the portfolio
        /// </param>
        /// <param name='code'>
        /// Code for the portfolio
        /// </param>
        /// <param name='effectiveAt'>
        /// Effective date
        /// </param>
        /// <param name='asAt'>
        /// The asAt date to use
        /// </param>
        /// <param name='propertyFilter'>
        /// Optional property filter
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> GetDetailsWithHttpMessagesAsync(string scope, string code, System.DateTimeOffset? effectiveAt = default(System.DateTimeOffset?), System.DateTimeOffset? asAt = default(System.DateTimeOffset?), IList<string> propertyFilter = default(IList<string>), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Add/update portfolio details
        /// </summary>
        /// <remarks>
        /// Update the portfolio details for the given code or add if it
        /// doesn't already exist. Updates with
        /// null values will remove any existing values
        /// </remarks>
        /// <param name='scope'>
        /// The scope of the portfolio
        /// </param>
        /// <param name='code'>
        /// Code for the portfolio
        /// </param>
        /// <param name='details'>
        /// </param>
        /// <param name='effectiveAt'>
        /// The effective date of the change
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> UpsertPortfolioDetailsWithHttpMessagesAsync(string scope, string code, PortfolioDetailsRequest details = default(PortfolioDetailsRequest), System.DateTimeOffset? effectiveAt = default(System.DateTimeOffset?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Delete portfolio details
        /// </summary>
        /// <remarks>
        /// Deletes the portfolio details for the given code
        /// </remarks>
        /// <param name='scope'>
        /// The scope of the portfolio
        /// </param>
        /// <param name='code'>
        /// Code for the portfolio
        /// </param>
        /// <param name='effectiveAt'>
        /// The effective date of the change
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> DeletePortfolioDetailsWithHttpMessagesAsync(string scope, string code, System.DateTimeOffset? effectiveAt = default(System.DateTimeOffset?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get holdings
        /// </summary>
        /// <remarks>
        /// Get the aggregate holdings of a portfolio.  If no effectiveAt or
        /// asAt
        /// are supplied then values will be defaulted to the latest system
        /// time.
        /// </remarks>
        /// <param name='scope'>
        /// The scope of the portfolio
        /// </param>
        /// <param name='code'>
        /// Code for the portfolio
        /// </param>
        /// <param name='effectiveAt'>
        /// Effective date
        /// </param>
        /// <param name='asAt'>
        /// As at date
        /// </param>
        /// <param name='sortBy'>
        /// The columns to sort the returned data by
        /// </param>
        /// <param name='start'>
        /// How many items to skip from the returned set
        /// </param>
        /// <param name='limit'>
        /// How many items to return from the set
        /// </param>
        /// <param name='filter'>
        /// A filter on the results
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> GetAggregateHoldingsWithHttpMessagesAsync(string scope, string code, System.DateTimeOffset? effectiveAt = default(System.DateTimeOffset?), System.DateTimeOffset? asAt = default(System.DateTimeOffset?), IList<string> sortBy = default(IList<string>), int? start = default(int?), int? limit = default(int?), string filter = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Adjust holdings
        /// </summary>
        /// <remarks>
        /// Create trades in a specific portfolio to bring it to the specified
        /// holdings
        /// </remarks>
        /// <param name='scope'>
        /// The scope of the portfolio
        /// </param>
        /// <param name='code'>
        /// Code for the portfolio
        /// </param>
        /// <param name='effectiveAt'>
        /// Effective date
        /// </param>
        /// <param name='holdings'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> AdjustHoldingsWithHttpMessagesAsync(string scope, string code, System.DateTimeOffset effectiveAt, IList<HoldingAdjustmentDto> holdings = default(IList<HoldingAdjustmentDto>), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get properties
        /// </summary>
        /// <remarks>
        /// Get properties attached to the portfolio.  If the asAt is not
        /// specified then
        /// the latest system time is used
        /// </remarks>
        /// <param name='scope'>
        /// The scope of the portfolio
        /// </param>
        /// <param name='code'>
        /// Code for the portfolio
        /// </param>
        /// <param name='effectiveAt'>
        /// Effective date
        /// </param>
        /// <param name='asAt'>
        /// The asAt date to use
        /// </param>
        /// <param name='sortBy'>
        /// Property to sort the results by
        /// </param>
        /// <param name='start'>
        /// </param>
        /// <param name='limit'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> GetPropertiesWithHttpMessagesAsync(string scope, string code, System.DateTimeOffset? effectiveAt = default(System.DateTimeOffset?), System.DateTimeOffset? asAt = default(System.DateTimeOffset?), IList<string> sortBy = default(IList<string>), int? start = default(int?), int? limit = default(int?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Update properties
        /// </summary>
        /// <remarks>
        /// Create one or more properties on a portfolio
        /// </remarks>
        /// <param name='scope'>
        /// The scope of the portfolio
        /// </param>
        /// <param name='code'>
        /// Code for the portfolio
        /// </param>
        /// <param name='properties'>
        /// </param>
        /// <param name='effectiveAt'>
        /// The effective date for the change
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> UpsertPortfolioPropertiesWithHttpMessagesAsync(string scope, string code, IList<PropertyDto> properties = default(IList<PropertyDto>), System.DateTimeOffset? effectiveAt = default(System.DateTimeOffset?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Delete property
        /// </summary>
        /// <remarks>
        /// Delete a property from a portfolio
        /// </remarks>
        /// <param name='scope'>
        /// The scope of the portfolio
        /// </param>
        /// <param name='code'>
        /// Code for the portfolio
        /// </param>
        /// <param name='property'>
        /// The key of the property to be deleted
        /// </param>
        /// <param name='effectiveAt'>
        /// Effective date
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> DeletePortfolioPropertyWithHttpMessagesAsync(string scope, string code, string property = default(string), System.DateTimeOffset? effectiveAt = default(System.DateTimeOffset?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Delete properties
        /// </summary>
        /// <remarks>
        /// Delete all properties from a portfolio
        /// </remarks>
        /// <param name='scope'>
        /// The scope of the portfolio
        /// </param>
        /// <param name='code'>
        /// Code for the portfolio
        /// </param>
        /// <param name='effectiveAt'>
        /// The effective date for the change
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> DeletePortfolioPropertiesWithHttpMessagesAsync(string scope, string code, System.DateTimeOffset? effectiveAt = default(System.DateTimeOffset?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get trades
        /// </summary>
        /// <param name='scope'>
        /// The scope of the portfolio
        /// </param>
        /// <param name='code'>
        /// Code for the portfolio
        /// </param>
        /// <param name='fromTradeDate'>
        /// Include trades with a trade date equal or later than this date
        /// </param>
        /// <param name='toTradeDate'>
        /// Include trades with a trade date equal or before this date
        /// </param>
        /// <param name='asAt'>
        /// </param>
        /// <param name='sortBy'>
        /// The columns to sort the returned data by
        /// </param>
        /// <param name='start'>
        /// How many items to skip from the returned set
        /// </param>
        /// <param name='limit'>
        /// How many items to return from the set
        /// </param>
        /// <param name='securityPropertyKeys'>
        /// Keys for the security properties to be decorated onto the trades
        /// </param>
        /// <param name='filter'>
        /// Trade filter
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> GetTradesWithHttpMessagesAsync(string scope, string code, System.DateTimeOffset? fromTradeDate = default(System.DateTimeOffset?), System.DateTimeOffset? toTradeDate = default(System.DateTimeOffset?), System.DateTimeOffset? asAt = default(System.DateTimeOffset?), IList<string> sortBy = default(IList<string>), int? start = default(int?), int? limit = default(int?), IList<string> securityPropertyKeys = default(IList<string>), string filter = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Add/update trades
        /// </summary>
        /// <param name='scope'>
        /// The scope of the portfolio
        /// </param>
        /// <param name='code'>
        /// Code for the portfolio
        /// </param>
        /// <param name='trades'>
        /// The trades to be updated
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> UpsertTradesWithHttpMessagesAsync(string scope, string code, IList<TradeDto> trades = default(IList<TradeDto>), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Delete trades
        /// </summary>
        /// <remarks>
        /// Delete one or more trades from a portfolio
        /// </remarks>
        /// <param name='scope'>
        /// The scope of the portfolio
        /// </param>
        /// <param name='code'>
        /// Code for the portfolio
        /// </param>
        /// <param name='id'>
        /// Ids of trades to delete
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> DeleteTradesWithHttpMessagesAsync(string scope, string code, IList<string> id = default(IList<string>), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Add/update trade properties
        /// </summary>
        /// <remarks>
        /// Add one or more properties to a specific trade in a portfolio
        /// </remarks>
        /// <param name='scope'>
        /// The scope of the portfolio
        /// </param>
        /// <param name='code'>
        /// Code for the portfolio
        /// </param>
        /// <param name='tradeId'>
        /// Id of trade to add properties to
        /// </param>
        /// <param name='properties'>
        /// Trade properties to add
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> AddTradePropertyWithHttpMessagesAsync(string scope, string code, string tradeId, IList<PropertyDto> properties = default(IList<PropertyDto>), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Delete trade property
        /// </summary>
        /// <remarks>
        /// Delete a property from a specific trade
        /// </remarks>
        /// <param name='scope'>
        /// The scope of the portfolio
        /// </param>
        /// <param name='code'>
        /// Code for the portfolio
        /// </param>
        /// <param name='tradeId'>
        /// Id of the trade to delete the property from
        /// </param>
        /// <param name='property'>
        /// The key of the property to be deleted
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> DeletePropertyFromTradeWithHttpMessagesAsync(string scope, string code, string tradeId, string property = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Create derived portfolio
        /// </summary>
        /// <remarks>
        /// Creates a portfolio that derives from an existing portfolio
        /// </remarks>
        /// <param name='scope'>
        /// The scope into which to create the new derived portfolio
        /// </param>
        /// <param name='portfolio'>
        /// The root object of the new derived portfolio, containing a
        /// populated reference portfolio id and reference scope
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> CreateDerivedPortfolioWithHttpMessagesAsync(string scope, CreateDerivedPortfolioRequest portfolio = default(CreateDerivedPortfolioRequest), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Search portfolios
        /// </summary>
        /// <param name='request'>
        /// </param>
        /// <param name='sortBy'>
        /// </param>
        /// <param name='start'>
        /// </param>
        /// <param name='limit'>
        /// </param>
        /// <param name='filter'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> PortfoliosSearchWithHttpMessagesAsync(object request = default(object), IList<string> sortBy = default(IList<string>), int? start = default(int?), int? limit = default(int?), string filter = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Search properties
        /// </summary>
        /// <param name='request'>
        /// </param>
        /// <param name='sortBy'>
        /// </param>
        /// <param name='start'>
        /// </param>
        /// <param name='limit'>
        /// </param>
        /// <param name='filter'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> PropertiesSearchWithHttpMessagesAsync(object request = default(object), IList<string> sortBy = default(IList<string>), int? start = default(int?), int? limit = default(int?), string filter = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets the available property-definition domains.
        /// </summary>
        /// <param name='sortBy'>
        /// </param>
        /// <param name='start'>
        /// </param>
        /// <param name='limit'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> GetPropertyDefinitionDomainsWithHttpMessagesAsync(IList<string> sortBy = default(IList<string>), int? start = default(int?), int? limit = default(int?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Creates a new property definition.
        /// </summary>
        /// <param name='definition'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> CreatePropertyDefinitionWithHttpMessagesAsync(CreatePropertyDefinitionRequest definition = default(CreatePropertyDefinitionRequest), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets multiple property definitions.
        /// </summary>
        /// <param name='keys'>
        /// </param>
        /// <param name='asAt'>
        /// </param>
        /// <param name='sortBy'>
        /// </param>
        /// <param name='start'>
        /// </param>
        /// <param name='limit'>
        /// </param>
        /// <param name='filter'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> GetMultiplePropertyDefinitionsWithHttpMessagesAsync(IList<string> keys = default(IList<string>), System.DateTimeOffset? asAt = default(System.DateTimeOffset?), IList<string> sortBy = default(IList<string>), int? start = default(int?), int? limit = default(int?), string filter = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets all available property definitions.
        /// </summary>
        /// <param name='domain'>
        /// Possible values include: 'Trade', 'Portfolio', 'Security',
        /// 'Holding', 'ReferenceHolding', 'TxnType'
        /// </param>
        /// <param name='asAt'>
        /// </param>
        /// <param name='sortBy'>
        /// </param>
        /// <param name='start'>
        /// </param>
        /// <param name='limit'>
        /// </param>
        /// <param name='filter'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> GetAllPropertyKeysInDomainWithHttpMessagesAsync(string domain, System.DateTimeOffset? asAt = default(System.DateTimeOffset?), IList<string> sortBy = default(IList<string>), int? start = default(int?), int? limit = default(int?), string filter = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets the available property-definition scopes for the specified
        /// domain.
        /// </summary>
        /// <param name='domain'>
        /// Possible values include: 'Trade', 'Portfolio', 'Security',
        /// 'Holding', 'ReferenceHolding', 'TxnType'
        /// </param>
        /// <param name='sortBy'>
        /// </param>
        /// <param name='start'>
        /// </param>
        /// <param name='limit'>
        /// </param>
        /// <param name='filter'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> GetPropertyDefinitionScopesInDomainWithHttpMessagesAsync(string domain, IList<string> sortBy = default(IList<string>), int? start = default(int?), int? limit = default(int?), string filter = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets all properties in a scope.
        /// </summary>
        /// <param name='domain'>
        /// Possible values include: 'Trade', 'Portfolio', 'Security',
        /// 'Holding', 'ReferenceHolding', 'TxnType'
        /// </param>
        /// <param name='scope'>
        /// </param>
        /// <param name='asAt'>
        /// </param>
        /// <param name='sortBy'>
        /// </param>
        /// <param name='start'>
        /// </param>
        /// <param name='limit'>
        /// </param>
        /// <param name='filter'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> GetAllPropertyKeysInScopeWithHttpMessagesAsync(string domain, string scope, System.DateTimeOffset? asAt = default(System.DateTimeOffset?), IList<string> sortBy = default(IList<string>), int? start = default(int?), int? limit = default(int?), string filter = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets a property definition.
        /// </summary>
        /// <param name='domain'>
        /// Possible values include: 'Trade', 'Portfolio', 'Security',
        /// 'Holding', 'ReferenceHolding', 'TxnType'
        /// </param>
        /// <param name='scope'>
        /// </param>
        /// <param name='name'>
        /// </param>
        /// <param name='asAt'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> GetPropertyDefinitionWithHttpMessagesAsync(string domain, string scope, string name, System.DateTimeOffset? asAt = default(System.DateTimeOffset?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Updates the specified property definition.
        /// </summary>
        /// <param name='domain'>
        /// Possible values include: 'Trade', 'Portfolio', 'Security',
        /// 'Holding', 'ReferenceHolding', 'TxnType'
        /// </param>
        /// <param name='scope'>
        /// </param>
        /// <param name='name'>
        /// </param>
        /// <param name='definition'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> UpdatePropertyDefinitionWithHttpMessagesAsync(string domain, string scope, string name, UpdatePropertyDefinitionRequest definition = default(UpdatePropertyDefinitionRequest), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Deletes the property definition.
        /// </summary>
        /// <param name='domain'>
        /// Possible values include: 'Trade', 'Portfolio', 'Security',
        /// 'Holding', 'ReferenceHolding', 'TxnType'
        /// </param>
        /// <param name='scope'>
        /// </param>
        /// <param name='name'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> DeletePropertyDefinitionWithHttpMessagesAsync(string domain, string scope, string name, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Create a new PropertyDataFormat. Note: Only non-default formats can
        /// be created.
        /// </summary>
        /// <param name='request'>
        /// The definition of the new format
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> CreatePropertyDataFormatWithHttpMessagesAsync(CreatePropertyDataFormatRequest request = default(CreatePropertyDataFormatRequest), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Lists all property data formats in the specified scope.
        /// </summary>
        /// <param name='scope'>
        /// </param>
        /// <param name='includeDefault'>
        /// </param>
        /// <param name='includeSystem'>
        /// </param>
        /// <param name='sortBy'>
        /// </param>
        /// <param name='start'>
        /// </param>
        /// <param name='limit'>
        /// </param>
        /// <param name='filter'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> ListPropertyDataFormatsWithHttpMessagesAsync(string scope, bool? includeDefault = default(bool?), bool? includeSystem = default(bool?), IList<string> sortBy = default(IList<string>), int? start = default(int?), int? limit = default(int?), string filter = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets a property data format.
        /// </summary>
        /// <param name='scope'>
        /// </param>
        /// <param name='name'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> GetPropertyDataFormatWithHttpMessagesAsync(string scope, string name, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Update a PropertyDataFormat. Note: Only non-default formats can be
        /// updated.
        /// </summary>
        /// <param name='scope'>
        /// The scope of the format being updated
        /// </param>
        /// <param name='name'>
        /// The name of the format to update
        /// </param>
        /// <param name='request'>
        /// The new definition of the format
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> UpdatePropertyDataFormatWithHttpMessagesAsync(string scope, string name, UpdatePropertyDataFormatRequest request = default(UpdatePropertyDataFormatRequest), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Perform a reconciliation between two portfolios
        /// </summary>
        /// <param name='request'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> PerformReconciliationWithHttpMessagesAsync(ReconciliationRequest request = default(ReconciliationRequest), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get all reference portfolios in a scope
        /// </summary>
        /// <param name='scope'>
        /// </param>
        /// <param name='effectiveAt'>
        /// </param>
        /// <param name='asAt'>
        /// </param>
        /// <param name='sortBy'>
        /// </param>
        /// <param name='start'>
        /// </param>
        /// <param name='limit'>
        /// </param>
        /// <param name='filter'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> ListReferencePortfoliosWithHttpMessagesAsync(string scope, System.DateTimeOffset? effectiveAt = default(System.DateTimeOffset?), System.DateTimeOffset? asAt = default(System.DateTimeOffset?), IList<string> sortBy = default(IList<string>), int? start = default(int?), int? limit = default(int?), string filter = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Create a new reference portfolio
        /// </summary>
        /// <param name='scope'>
        /// The intended scope of the portfolio
        /// </param>
        /// <param name='referencePortfolio'>
        /// The portfolio creation request object
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> CreateReferencePortfolioWithHttpMessagesAsync(string scope, CreatePortfolioRequest referencePortfolio = default(CreatePortfolioRequest), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get a reference portfolio by name (as opposed to id)
        /// </summary>
        /// <param name='scope'>
        /// </param>
        /// <param name='code'>
        /// </param>
        /// <param name='effectiveAt'>
        /// </param>
        /// <param name='asAt'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> GetReferencePortfolioWithHttpMessagesAsync(string scope, string code, System.DateTimeOffset? effectiveAt = default(System.DateTimeOffset?), System.DateTimeOffset? asAt = default(System.DateTimeOffset?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Delete a specific portfolio
        /// </summary>
        /// <param name='scope'>
        /// </param>
        /// <param name='code'>
        /// </param>
        /// <param name='effectiveAt'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> DeleteReferencePortfolioWithHttpMessagesAsync(string scope, string code, System.DateTimeOffset? effectiveAt = default(System.DateTimeOffset?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get all the constituents in a reference portfolio
        /// </summary>
        /// <param name='scope'>
        /// </param>
        /// <param name='effectiveAt'>
        /// </param>
        /// <param name='code'>
        /// </param>
        /// <param name='referencePortfolioId'>
        /// </param>
        /// <param name='asAt'>
        /// </param>
        /// <param name='sortBy'>
        /// </param>
        /// <param name='start'>
        /// </param>
        /// <param name='limit'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> GetReferencePortfolioConstituentsWithHttpMessagesAsync(string scope, System.DateTimeOffset effectiveAt, string code, string referencePortfolioId = default(string), System.DateTimeOffset? asAt = default(System.DateTimeOffset?), IList<string> sortBy = default(IList<string>), int? start = default(int?), int? limit = default(int?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Add constituents to a specific reference portfolio
        /// </summary>
        /// <param name='scope'>
        /// </param>
        /// <param name='code'>
        /// </param>
        /// <param name='effectiveAt'>
        /// </param>
        /// <param name='constituents'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> UpsertReferencePortfolioConstituentsWithHttpMessagesAsync(string scope, string code, System.DateTimeOffset effectiveAt, IList<ReferencePortfolioConstituentDto> constituents = default(IList<ReferencePortfolioConstituentDto>), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Retrieve some previously stored results
        /// </summary>
        /// <param name='scope'>
        /// The scope of the data
        /// </param>
        /// <param name='key'>
        /// The key that identifies the data
        /// </param>
        /// <param name='date'>
        /// The date for which the data was loaded
        /// </param>
        /// <param name='asAt'>
        /// </param>
        /// <param name='sortBy'>
        /// </param>
        /// <param name='start'>
        /// </param>
        /// <param name='limit'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> GetResultsWithHttpMessagesAsync(string scope, string key, System.DateTimeOffset date, System.DateTimeOffset? asAt = default(System.DateTimeOffset?), IList<string> sortBy = default(IList<string>), int? start = default(int?), int? limit = default(int?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Upsert precalculated results against a specified scope/key/date
        /// combination
        /// </summary>
        /// <param name='scope'>
        /// The scope of the data
        /// </param>
        /// <param name='key'>
        /// The key that identifies the data
        /// </param>
        /// <param name='date'>
        /// The date for which the data is relevant
        /// </param>
        /// <param name='request'>
        /// The results to upload
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> UpsertResultsWithHttpMessagesAsync(string scope, string key, System.DateTimeOffset date, CreateResultsRequest request = default(CreateResultsRequest), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <param name='entity'>
        /// Possible values include: 'PropertyKey', 'FieldSchema',
        /// 'Personalisation', 'Security', 'Property', 'Login',
        /// 'PropertyDefinition', 'PropertyDataFormat',
        /// 'AggregationResponseNode', 'Portfolio', 'CompletePortfolio',
        /// 'PortfolioSearchResult', 'PortfolioDetails', 'PortfolioProperties',
        /// 'Version', 'AddTradeProperty', 'AnalyticStore', 'AnalyticStoreKey',
        /// 'UpsertPortfolioTrades', 'Group', 'Constituent', 'Trade',
        /// 'PortfolioHolding', 'AdjustHolding', 'ErrorDetail',
        /// 'ErrorResponse', 'InstrumentDefinition', 'ProcessedCommand',
        /// 'CreatePortfolio', 'CreateAnalyticStore', 'CreateClientSecurity',
        /// 'CreateDerivedPortfolio', 'CreateGroup',
        /// 'CreatePropertyDataFormat', 'CreatePropertyDefinition',
        /// 'UpdatePortfolio', 'UpdateGroup', 'UpdatePropertyDataFormat',
        /// 'UpdatePropertyDefinition', 'SecurityAnalytic',
        /// 'AggregationRequest', 'Aggregation', 'NestedAggregation',
        /// 'ResultDataSchema', 'Classification', 'SecurityClassification',
        /// 'WebLogMessage', 'UpsertPersonalisation', 'CreatePortfolioDetails',
        /// 'UpsertConstituent', 'CreateResults', 'Results',
        /// 'TryAddClientSecurities', 'TryDeleteClientSecurities',
        /// 'TryLookupSecuritiesFromCodes', 'ExpandedGroup',
        /// 'CreateCorporateAction', 'CorporateAction',
        /// 'CorporateActionTransition', 'ReconciliationRequest',
        /// 'ReconciliationBreak', 'TransactionConfigurationData',
        /// 'TransactionConfigurationMovementData',
        /// 'TransactionConfigurationTypeAlias'
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> GetEntitySchemaWithHttpMessagesAsync(string entity, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get the schemas for the provided list of property keys
        /// </summary>
        /// <param name='propertyKeys'>
        /// A comma delimited list of property keys in string format. e.g.
        /// "Portfolio/default/PropertyName,Portfolio/differentScope/MyProperty"
        /// </param>
        /// <param name='asAt'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> GetPropertySchemaWithHttpMessagesAsync(IList<string> propertyKeys = default(IList<string>), System.DateTimeOffset? asAt = default(System.DateTimeOffset?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets the available value types that could be returned in a schema
        /// </summary>
        /// <param name='sortBy'>
        /// </param>
        /// <param name='start'>
        /// </param>
        /// <param name='limit'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> GetValueTypesWithHttpMessagesAsync(IList<string> sortBy = default(IList<string>), int? start = default(int?), int? limit = default(int?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Attempt to create one or more client securities. Failed securities
        /// will be identified in the body of the response.
        /// </summary>
        /// <param name='definitions'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> BatchAddClientSecuritiesWithHttpMessagesAsync(IList<CreateClientSecurityRequest> definitions = default(IList<CreateClientSecurityRequest>), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Attempt to delete one or more client securities. Failed securities
        /// will be identified in the body of the response.
        /// </summary>
        /// <param name='uids'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> BatchDeleteClientSecuritiesWithHttpMessagesAsync(IList<string> uids = default(IList<string>), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get an individual security by the unique security uid.  Optionally,
        /// decorate each security with specific properties.
        /// </summary>
        /// <param name='uid'>
        /// The uid of the requested security
        /// </param>
        /// <param name='asAt'>
        /// As at date
        /// </param>
        /// <param name='propertyKeys'>
        /// Keys of the properties to be retrieved
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> GetSecurityWithHttpMessagesAsync(string uid, System.DateTimeOffset? asAt = default(System.DateTimeOffset?), IList<string> propertyKeys = default(IList<string>), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Lookup more than one security by supplying a collection of
        /// non-Finbourne codes.  Optionally, decorate each security with
        /// specific properties.
        /// </summary>
        /// <param name='codeType'>
        /// The type of identifier. Possible values include: 'Undefined',
        /// 'ReutersAssetId', 'CINS', 'Isin', 'Sedol', 'Cusip',
        /// 'ClientInternal', 'Figi', 'Wertpapier'
        /// </param>
        /// <param name='codes'>
        /// An array of codes
        /// </param>
        /// <param name='asAt'>
        /// As at date
        /// </param>
        /// <param name='propertyKeys'>
        /// Keys of the properties to be retrieved
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> LookupSecuritiesFromCodesWithHttpMessagesAsync(string codeType, IList<string> codes = default(IList<string>), System.DateTimeOffset? asAt = default(System.DateTimeOffset?), IList<string> propertyKeys = default(IList<string>), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Lookup a large number of securities by supplying a collection of
        /// non-Finbourne codes.  Optionally, decorate each security with
        /// specific properties.
        /// </summary>
        /// <param name='codeType'>
        /// The type of identifier. Possible values include: 'Undefined',
        /// 'ReutersAssetId', 'CINS', 'Isin', 'Sedol', 'Cusip',
        /// 'ClientInternal', 'Figi', 'Wertpapier'
        /// </param>
        /// <param name='codes'>
        /// An array of codes
        /// </param>
        /// <param name='asAt'>
        /// As at date
        /// </param>
        /// <param name='propertyKeys'>
        /// Keys of the properties to be retrieved
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> LookupSecuritiesFromCodesBulkWithHttpMessagesAsync(string codeType, IList<string> codes = default(IList<string>), System.DateTimeOffset? asAt = default(System.DateTimeOffset?), IList<string> propertyKeys = default(IList<string>), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

    }
}
