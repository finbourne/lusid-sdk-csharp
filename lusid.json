{
  "swagger": "2.0",
  "info": {
    "version": "0.6.162",
    "title": "LUSID API",
    "description": "# Introduction\n\nThis page documents the [LUSID API](https://api.finbourne.com/swagger), which allows authorised clients to query and update their data within the LUSID platform.\n\nSDKs to interact with the LUSID API are available in the following languages :\n\n* [C#](https://github.com/finbourne/lusid-sdk-csharp)\n* [Java](https://github.com/finbourne/lusid-sdk-java)\n* [JavaScript](https://github.com/finbourne/lusid-sdk-js)\n* [Python](https://github.com/finbourne/lusid-sdk-python)\n\n# Immutable Events\n\nA core tenet of the LUSID platform is the concept of an immutable data store.  This gives the ability to consistently reproduce the state of the system for any given point in bi-temporal space.  In order to achieve this LUSID has implemented an append only event store for all data types.  New events, including historical amendments, are added to the end of the event stream and then 'played back' in order to construct the state.  Given that all the events from T0 are required in order to reconstruct the state, there can be significant computational complexity and cost involved.  FINBOURNE have employed a number of techniques and optimisations in order to produce consistent performance characteristics e.g. using snapshots which has resulted in a highly performance and scalable platform.\n\n# Data Model\n\nThis section describes the data model that LUSID exposes via the APIs.\n\n## Scope\n\nAll entities in LUSID live within a logical partitioning of data known as a scope.  The unique code which identifies an entity is namespaced within the scope, allowing two entities with the same code in different scopes to be individually addressable.\n\nFor example, prices for equities from different vendors may be uploaded into different scopes such as `client/vendor1` and `client/vendor2`.  A portfolio may then be valued using either of the price sources by referencing the appropriate scope.\n\n## Schema\n\nA detailed description of the entities used by the API and parameters for endpoints which take a JSON document can be retrieved via the `schema` endpoint.\n\n## Securities\n\nLUSID has its own security master implementation (LUSID CORE) which sources reference data from multiple data vendors.\n[OpenFIGI](https://openfigi.com/) and [PermID](https://permid.org/) are used as the security identifier when uploading trades, holdings, prices, etc.\nThe API exposes a `securities/lookup` endpoint which can be used to lookup these identifiers given other market identifiers.\n\nCash can be referenced using the ISO currency code prefixed with \"`CCY_`\" e.g. `CCY_GBP`\n\nFor any securities that are not recognised by LUSID (eg OTCs) a client can upload a client defined security. Securitised portfolios and funds can be modelled as client defined securities.\n\n## Security Prices (Analytics)\n\nSecurity prices are stored in LUSID's Analytics Store\n\n| Field|Type|Description |\n| ---|---|--- |\n| Id|string|Unique security identifier |\n| Value|decimal|Value of the analytic, eg price |\n| Denomination|string|Underlying unit of the analytic, eg currency, EPS etc. |\n\n\n## Security Data\n\nSecurity data can be uploaded to the system using the [Classifications](#tag/Classification) endpoint.\n\n| Field|Type|Description |\n| ---|---|--- |\n| Uid|string|Unique security identifier |\n| EffectiveFrom|datetime|Date from which this classification is effective |\n\n\n## Portfolios\n\nA portfolio is a container for trades and/or holdings.  Meta data and classifications of portfolios can be attached via properties.\n\n## Derived Portfolios\n\nLUSID also allows for a portfolio to be composed of another portfolio via derived portfolios.  A derived portfolio can contain its own trades and also inherits any trades from its parent portfolio.  Any changes made to the parent portfolio are automatically reflected in derived portfolio.\n\nDerived portfolios in conjunction with scopes are a powerful construct.  For example, to do pre-trade what-if analysis, a derived portfolio could be created a new namespace linked to the underlying live (parent) portfolio.  Analysis can then be undertaken on the derived portfolio without affecting the live portfolio.\n\n## Transactions\n\nA transaction represents an economic activity against a Portfolio.\n\n| Field|Type|Description |\n| ---|---|--- |\n| TradeId|string|Unique trade identifier |\n| Type|string|LUSID transaction type code - Buy, Sell, StockIn, StockOut, etc |\n| SecurityUid|string|Unique security identifier |\n| TradeDate|datetime|Trade date |\n| SettlementDate|datetime|Settlement date |\n| Units|decimal|Quantity of trade in units of the security |\n| TradePrice|decimal|Execution price for the trade |\n| TotalConsideration|decimal|Total value of the trade |\n| ExchangeRate|decimal|Rate between trade and settle currency |\n| SettlementCurrency|string|Settlement currency |\n| TradeCurrency|string|Trade currency |\n| CounterpartyId|string|Counterparty identifier |\n| Source|string|Where this trade came from, either Client or System |\n| DividendState|string|  |\n| TradePriceType|string|  |\n| UnitType|string|  |\n| NettingSet|string|  |\n\n\n## Holdings\n\nA holding represents a position in a security or cash on a given date.\n\n| Field|Type|Description |\n| ---|---|--- |\n| SecurityUid|string|Unique security identifier |\n| HoldingType|string|Type of holding, eg Position, Balance, CashCommitment, Receivable, ForwardFX |\n| Units|decimal|Quantity of holding |\n| SettledUnits|decimal|Settled quantity of holding |\n| Cost|decimal|Book cost of holding in trade currency |\n| CostPortfolioCcy|decimal|Book cost of holding in portfolio currency |\n| Transaction|TradeDto|If this is commitment-type holding, the transaction behind it |\n\n\n## Corporate Actions\n\nCorporate actions are represented within LUSID in terms of a set of security-specific 'transitions'.  These transitions are used to specify the participants of the corporate action, and the effect that the corporate action will have on holdings in those participants.\n\n*Corporate action*\n\n| Field|Type|Description |\n| ---|---|--- |\n| SourceId|id|  |\n| CorporateActionId|code|  |\n| AnnouncementDate|datetime|  |\n| ExDate|datetime|  |\n| RecordDate|datetime|  |\n\n\n\n*Transition*\n\n| Field|Type|Description |\n| ---|---|--- |\n| Direction|string|  |\n| SecurityUid|string|  |\n| UnitsFactor|decimal|  |\n| CostFactor|decimal|  |\n\n\n## Property\n\nProperties are key-value pairs that can be applied to any entity within a domain (where a domain is `trade`, `portfolio`, `security` etc).  Properties must be defined before use with a `PropertyDefinition` and can then subsequently be added to entities.\n\n\n# Error Codes\n\n| Code|Name|Description |\n| ---|---|--- |\n| <a name=\"100\">100</a>|Personalisations not found|The personalisation(s) identified by the pattern provided could not be found, either because it does not exist or it has been deleted. Please check the pattern your provided. |\n| <a name=\"101\">101</a>|NonRecursivePersonalisation|  |\n| <a name=\"102\">102</a>|VersionNotFound|  |\n| <a name=\"104\">104</a>|SecurityNotFound|  |\n| <a name=\"104\">104</a>|SecurityNotFound|  |\n| <a name=\"105\">105</a>|PropertyNotFound|  |\n| <a name=\"106\">106</a>|PortfolioRecursionDepth|  |\n| <a name=\"108\">108</a>|GroupNotFound|  |\n| <a name=\"109\">109</a>|PortfolioNotFound|  |\n| <a name=\"110\">110</a>|PropertySchemaNotFound|  |\n| <a name=\"112\">112</a>|PortfolioWithIdAlreadyExists|  |\n| <a name=\"113\">113</a>|OrphanedPortfolio|  |\n| <a name=\"119\">119</a>|MissingBaseClaims|  |\n| <a name=\"121\">121</a>|PropertyNotDefined|  |\n| <a name=\"122\">122</a>|CannotDeleteSystemProperty|  |\n| <a name=\"123\">123</a>|CannotModifyImmutablePropertyField|  |\n| <a name=\"124\">124</a>|PropertyAlreadyExists|  |\n| <a name=\"125\">125</a>|InvalidPropertyLifeTime|  |\n| <a name=\"127\">127</a>|CannotModifyDefaultPropertyFormat|  |\n| <a name=\"128\">128</a>|GroupAlreadyExists|  |\n| <a name=\"129\">129</a>|NoSuchPropertyDataFormat|  |\n| <a name=\"132\">132</a>|ValidationError|  |\n| <a name=\"133\">133</a>|LoopDetectedInGroupHierarchy|  |\n| <a name=\"135\">135</a>|SubGroupAlreadyExists|  |\n| <a name=\"138\">138</a>|PriceSourceNotFound|  |\n| <a name=\"139\">139</a>|AnalyticStoreNotFound|  |\n| <a name=\"141\">141</a>|AnalyticStoreAlreadyExists|  |\n| <a name=\"143\">143</a>|ClientSecurityAlreadyExists|  |\n| <a name=\"144\">144</a>|DuplicateInParameterSet|  |\n| <a name=\"147\">147</a>|ResultsNotFound|  |\n| <a name=\"148\">148</a>|OrderFieldNotInResultSet|  |\n| <a name=\"149\">149</a>|OperationFailed|  |\n| <a name=\"150\">150</a>|ElasticSearchError|  |\n| <a name=\"151\">151</a>|InvalidParameterValue|  |\n| <a name=\"152\">152</a>|ServerConfigurationError|  |\n| <a name=\"153\">153</a>|CommandProcessingFailure|  |\n| <a name=\"154\">154</a>|EntityStateConstructionFailure|  |\n| <a name=\"155\">155</a>|EntityTimelineDoesNotExist|  |\n| <a name=\"156\">156</a>|EventPublishFailure|  |\n| <a name=\"157\">157</a>|InvalidRequestFailure|  |\n| <a name=\"158\">158</a>|EventPublishUnknown|  |\n| <a name=\"159\">159</a>|EventQueryFailure|  |\n| <a name=\"160\">160</a>|BlobDidNotExistFailure|  |\n| <a name=\"162\">162</a>|SubSystemRequestFailure|  |\n| <a name=\"163\">163</a>|SubSystemConfigurationFailure|  |\n| <a name=\"165\">165</a>|FailedToDelete|  |\n| <a name=\"166\">166</a>|UpsertClientSecurityFailure|  |\n| <a name=\"167\">167</a>|IllegalAsAtInterval|  |\n| <a name=\"168\">168</a>|IllegalBitemporalQuery|  |\n| <a name=\"169\">169</a>|InvalidAlternateId|  |\n| <a name=\"170\">170</a>|CannotAddSourcePortfolioPropertyExplicitly|  |\n| <a name=\"171\">171</a>|EntityAlreadyExistsInGroup|  |\n| <a name=\"173\">173</a>|EntityWithIdAlreadyExists|  |\n| <a name=\"174\">174</a>|PortfolioDetailsDoNotExist|  |\n| <a name=\"176\">176</a>|PortfolioWithNameAlreadyExists|  |\n| <a name=\"177\">177</a>|InvalidTrades|  |\n| <a name=\"178\">178</a>|ReferencePortfolioNotFound|  |\n| <a name=\"179\">179</a>|DuplicateIdFailure|  |\n| <a name=\"180\">180</a>|CommandRetrievalFailure|  |\n| <a name=\"181\">181</a>|DataFilterApplicationFailure|  |\n| <a name=\"182\">182</a>|SearchFailed|  |\n| <a name=\"183\">183</a>|MovementsEngineConfigurationKeyFailure|  |\n| <a name=\"184\">184</a>|FxRateSourceNotFound|  |\n| <a name=\"185\">185</a>|AccrualSourceNotFound|  |\n| <a name=\"-1\">-1</a>|Unknown error|  |\n",
    "termsOfService": "Not to be used without explicit authorisation from FINBOURNE",
    "contact": {
      "name": "FINBOURNE Technology",
      "url": "https://www.finbourne.com",
      "email": "info@finbourne.com"
    },
    "x-logo": {
      "url": "https://content.finbourne.com/FINBOURNE.png",
      "backgroundColor": "#415464"
    }
  },
  "paths": {
    "/v1/api/_internal/clearentitycaches": {
      "get": {
        "tags": [ "Internal" ],
        "summary": "Clears the entity caches on the instance that serves this request only.",
        "operationId": "ClearEntityCaches",
        "consumes": [],
        "produces": [ "text/plain", "application/json", "text/json" ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Success",
            "schema": { "$ref": "#/definitions/ClearEntityCachesDto" }
          },
          "500": {
            "description": "Server Error",
            "schema": { "$ref": "#/definitions/ErrorResponse" }
          },
          "400": {
            "description": "Bad Request",
            "schema": { "$ref": "#/definitions/ErrorResponse" }
          }
        }
      }
    },
    "/v1/api/actions/{scope}/{sourceId}": {
      "get": {
        "tags": [ "Corporate Actions" ],
        "summary": "Gets a corporate action based on dates",
        "operationId": "ListCorporateActions",
        "consumes": [],
        "produces": [ "text/plain", "application/json", "text/json" ],
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "Scope",
            "required": true,
            "type": "string"
          },
          {
            "name": "sourceId",
            "in": "path",
            "description": "Corporate action source id",
            "required": true,
            "type": "string"
          },
          {
            "name": "effectiveDate",
            "in": "query",
            "description": "Effective Date",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "asAt",
            "in": "query",
            "description": "AsAt Date filter",
            "required": false,
            "type": "string",
            "format": "date-time"
          }
        ],
        "responses": {
          "200": {
            "description": "Corporate Actions",
            "schema": {
              "type": "array",
              "items": { "$ref": "#/definitions/CorporateActionEventDto" }
            }
          },
          "500": {
            "description": "A structured error response",
            "schema": { "$ref": "#/definitions/ErrorResponse" }
          },
          "404": {
            "description": "A structured error response",
            "schema": { "$ref": "#/definitions/ErrorResponse" }
          }
        }
      },
      "post": {
        "tags": [ "Corporate Actions" ],
        "summary": "Creates/updates a corporate action",
        "operationId": "UpsertCorporateAction",
        "consumes": [ "application/json-patch+json", "application/json", "text/json", "application/*+json" ],
        "produces": [ "text/plain", "application/json", "text/json" ],
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The intended scope of the corporate action",
            "required": true,
            "type": "string"
          },
          {
            "name": "sourceId",
            "in": "path",
            "description": "Source of the corporate action",
            "required": true,
            "type": "string"
          },
          {
            "name": "createRequest",
            "in": "body",
            "description": "The corporate action creation request object",
            "required": false,
            "schema": { "$ref": "#/definitions/UpsertCorporateActionRequest" }
          }
        ],
        "responses": {
          "200": {
            "description": "The created corporate action, with populated id",
            "schema": {
              "type": "array",
              "items": { "$ref": "#/definitions/CorporateActionEventDto" }
            }
          },
          "500": {
            "description": "A structured error response",
            "schema": { "$ref": "#/definitions/ErrorResponse" }
          },
          "400": {
            "description": "A structured error response",
            "schema": { "$ref": "#/definitions/ErrorResponse" }
          }
        }
      }
    },
    "/v1/api/aggregation/groups/{scope}/{groupCode}": {
      "post": {
        "tags": [ "Aggregation" ],
        "summary": "Aggregate data in a group hierarchy",
        "operationId": "GetAggregationByGroup",
        "consumes": [ "application/json-patch+json", "application/json", "text/json", "application/*+json" ],
        "produces": [ "text/plain", "application/json", "text/json" ],
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "groupCode",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "request",
            "in": "body",
            "required": false,
            "schema": { "$ref": "#/definitions/AggregationRequest" }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": { "$ref": "#/definitions/ListAggregationResponse" }
          },
          "500": {
            "description": "Server Error",
            "schema": { "$ref": "#/definitions/ErrorResponse" }
          },
          "400": {
            "description": "Bad Request",
            "schema": { "$ref": "#/definitions/ErrorResponse" }
          }
        }
      }
    },
    "/v1/api/aggregation/groups/nested/{scope}/{groupCode}": {
      "post": {
        "tags": [ "Aggregation" ],
        "summary": "Aggregation request data in a group hierarchy into a data tree",
        "operationId": "GetNestedAggregationByGroup",
        "consumes": [ "application/json-patch+json", "application/json", "text/json", "application/*+json" ],
        "produces": [ "text/plain", "application/json", "text/json" ],
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "groupCode",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "request",
            "in": "body",
            "required": false,
            "schema": { "$ref": "#/definitions/AggregationRequest" }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": { "$ref": "#/definitions/NestedAggregationResponse" }
          },
          "500": {
            "description": "Server Error",
            "schema": { "$ref": "#/definitions/ErrorResponse" }
          },
          "400": {
            "description": "Bad Request",
            "schema": { "$ref": "#/definitions/ErrorResponse" }
          }
        }
      }
    },
    "/v1/api/aggregation/portfolios/{scope}/{portfolioCode}": {
      "post": {
        "tags": [ "Aggregation" ],
        "summary": "Aggregate data in a portfolio",
        "operationId": "GetAggregationByPortfolio",
        "consumes": [ "application/json-patch+json", "application/json", "text/json", "application/*+json" ],
        "produces": [ "text/plain", "application/json", "text/json" ],
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "portfolioCode",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "request",
            "in": "body",
            "required": false,
            "schema": { "$ref": "#/definitions/AggregationRequest" }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": { "$ref": "#/definitions/ListAggregationResponse" }
          },
          "500": {
            "description": "Server Error",
            "schema": { "$ref": "#/definitions/ErrorResponse" }
          },
          "400": {
            "description": "Bad Request",
            "schema": { "$ref": "#/definitions/ErrorResponse" }
          }
        }
      }
    },
    "/v1/api/aggregation/portfolios/nested/{scope}/{portfolioCode}": {
      "post": {
        "tags": [ "Aggregation" ],
        "summary": "Aggregation request data in a portfolio into a data tree",
        "operationId": "GetNestedAggregationByPortfolio",
        "consumes": [ "application/json-patch+json", "application/json", "text/json", "application/*+json" ],
        "produces": [ "text/plain", "application/json", "text/json" ],
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "portfolioCode",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "request",
            "in": "body",
            "required": false,
            "schema": { "$ref": "#/definitions/AggregationRequest" }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": { "$ref": "#/definitions/NestedAggregationResponse" }
          },
          "500": {
            "description": "Server Error",
            "schema": { "$ref": "#/definitions/ErrorResponse" }
          },
          "400": {
            "description": "Bad Request",
            "schema": { "$ref": "#/definitions/ErrorResponse" }
          }
        }
      }
    },
    "/v1/api/aggregation/results/{scope}/{resultsKey}/{resultsDate}": {
      "post": {
        "tags": [ "Aggregation" ],
        "summary": "Aggregate data from a result set",
        "operationId": "GetAggregationByResultSet",
        "consumes": [ "application/json-patch+json", "application/json", "text/json", "application/*+json" ],
        "produces": [ "text/plain", "application/json", "text/json" ],
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "resultsKey",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "request",
            "in": "body",
            "required": false,
            "schema": { "$ref": "#/definitions/AggregationRequest" }
          },
          {
            "name": "resultsDate",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": { "$ref": "#/definitions/ListAggregationResponse" }
          },
          "500": {
            "description": "Server Error",
            "schema": { "$ref": "#/definitions/ErrorResponse" }
          },
          "400": {
            "description": "Bad Request",
            "schema": { "$ref": "#/definitions/ErrorResponse" }
          }
        }
      }
    },
    "/v1/api/aggregation/results/nested/{scope}/{resultsKey}/{resultsDate}": {
      "post": {
        "tags": [ "Aggregation" ],
        "summary": "Aggregate data from a result set into a nested structure",
        "operationId": "GetNestedAggregationByResultSet",
        "consumes": [ "application/json-patch+json", "application/json", "text/json", "application/*+json" ],
        "produces": [ "text/plain", "application/json", "text/json" ],
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "resultsKey",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "resultsDate",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "request",
            "in": "body",
            "required": false,
            "schema": { "$ref": "#/definitions/AggregationRequest" }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": { "$ref": "#/definitions/NestedAggregationResponse" }
          },
          "500": {
            "description": "Server Error",
            "schema": { "$ref": "#/definitions/ErrorResponse" }
          },
          "400": {
            "description": "Bad Request",
            "schema": { "$ref": "#/definitions/ErrorResponse" }
          }
        }
      }
    },
    "/v1/api/analytics": {
      "get": {
        "tags": [ "Analytics Stores" ],
        "summary": "List all analytic stores in client",
        "operationId": "ListAnalyticStores",
        "consumes": [],
        "produces": [ "text/plain", "application/json", "text/json" ],
        "parameters": [
          {
            "name": "asAt",
            "in": "query",
            "description": "",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "",
            "required": false,
            "type": "array",
            "items": { "type": "string" },
            "collectionFormat": "multi"
          },
          {
            "name": "start",
            "in": "query",
            "description": "",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "filter",
            "in": "query",
            "description": "",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of analytic store keys",
            "schema": { "$ref": "#/definitions/ResourceList[AnalyticStoreKeyDto]" }
          },
          "500": {
            "description": "A structured error response",
            "schema": { "$ref": "#/definitions/ErrorResponse" }
          },
          "400": {
            "description": "A structured error response",
            "schema": { "$ref": "#/definitions/ErrorResponse" }
          },
          "404": {
            "description": "A structured error response",
            "schema": { "$ref": "#/definitions/ErrorResponse" }
          }
        }
      },
      "post": {
        "tags": [ "Analytics Stores" ],
        "summary": "Create a new analytic store for the given scope for the given date",
        "operationId": "CreateAnalyticStore",
        "consumes": [ "application/json-patch+json", "application/json", "text/json", "application/*+json" ],
        "produces": [ "text/plain", "application/json", "text/json" ],
        "parameters": [
          {
            "name": "request",
            "in": "body",
            "description": "A valid and fully populated analytic store creation request",
            "required": false,
            "schema": { "$ref": "#/definitions/CreateAnalyticStoreRequest" }
          }
        ],
        "responses": {
          "201": {
            "description": "The meta data of the created analytic store",
            "schema": { "$ref": "#/definitions/AnalyticStoreDto" }
          },
          "500": {
            "description": "A structured error response",
            "schema": { "$ref": "#/definitions/ErrorResponse" }
          },
          "400": {
            "description": "Bad Request",
            "schema": { "$ref": "#/definitions/ErrorResponse" }
          }
        }
      }
    },
    "/v1/api/analytics/{scope}/{year}/{month}/{day}": {
      "get": {
        "tags": [ "Analytics Stores" ],
        "summary": "Get an analytic store",
        "operationId": "GetAnalyticStore",
        "consumes": [],
        "produces": [ "text/plain", "application/json", "text/json" ],
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The analytics data scope",
            "required": true,
            "type": "string"
          },
          {
            "name": "year",
            "in": "path",
            "description": "The year component of the date for the data in the scope",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "month",
            "in": "path",
            "description": "The month component of the date for the data in the scope",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "day",
            "in": "path",
            "description": "The day component of the date for the data in the scope",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "asAt",
            "in": "query",
            "description": "AsAt date",
            "required": false,
            "type": "string",
            "format": "date-time"
          }
        ],
        "responses": {
          "200": {
            "description": "The analytic store's meta data",
            "schema": { "$ref": "#/definitions/AnalyticStoreDto" }
          },
          "500": {
            "description": "A structured error response",
            "schema": { "$ref": "#/definitions/ErrorResponse" }
          },
          "400": {
            "description": "A structured error response",
            "schema": { "$ref": "#/definitions/ErrorResponse" }
          },
          "404": {
            "description": "A structured error response",
            "schema": { "$ref": "#/definitions/ErrorResponse" }
          }
        }
      },
      "delete": {
        "tags": [ "Analytics Stores" ],
        "summary": "Create a new analytic store for the given scope for the given date",
        "operationId": "DeleteAnalyticStore",
        "consumes": [],
        "produces": [ "text/plain", "application/json", "text/json" ],
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The analytics data scope",
            "required": true,
            "type": "string"
          },
          {
            "name": "year",
            "in": "path",
            "description": "The year component of the date for the data in the scope",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "month",
            "in": "path",
            "description": "The month component of the date for the data in the scope",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "day",
            "in": "path",
            "description": "The day component of the date for the data in the scope",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "A confirmation of the deleted store",
            "schema": { "$ref": "#/definitions/DeletedEntityResponse" }
          },
          "500": {
            "description": "A structured error response",
            "schema": { "$ref": "#/definitions/ErrorResponse" }
          }
        }
      }
    },
    "/v1/api/analytics/{scope}/{year}/{month}/{day}/prices": {
      "post": {
        "tags": [ "Analytics Stores" ],
        "summary": "Insert analytics into an existing analytic store for the given scope and date.",
        "operationId": "InsertAnalytics",
        "consumes": [ "application/json-patch+json", "application/json", "text/json", "application/*+json" ],
        "produces": [ "text/plain", "application/json", "text/json" ],
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The analytics data scope",
            "required": true,
            "type": "string"
          },
          {
            "name": "year",
            "in": "path",
            "description": "The year component of the date for the data in the scope",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "month",
            "in": "path",
            "description": "The month component of the date for the data in the scope",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "day",
            "in": "path",
            "description": "The day component of the date for the data in the scope",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "data",
            "in": "body",
            "description": "",
            "required": false,
            "schema": {
              "type": "array",
              "items": { "$ref": "#/definitions/SecurityAnalyticDataDto" }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The meta data of the created analytic store",
            "schema": { "$ref": "#/definitions/AnalyticStoreDto" }
          },
          "500": {
            "description": "A structured error response",
            "schema": { "$ref": "#/definitions/ErrorResponse" }
          },
          "400": {
            "description": "A structured error response",
            "schema": { "$ref": "#/definitions/ErrorResponse" }
          },
          "404": {
            "description": "A structured error response",
            "schema": { "$ref": "#/definitions/ErrorResponse" }
          }
        }
      }
    },
    "/v1/api/classifications": {
      "post": {
        "tags": [ "Classification" ],
        "summary": "Update classification data",
        "operationId": "UpsertClassification",
        "consumes": [ "application/json-patch+json", "application/json", "text/json", "application/*+json" ],
        "produces": [ "text/plain", "application/json", "text/json" ],
        "parameters": [
          {
            "name": "classifications",
            "in": "body",
            "required": false,
            "schema": {
              "type": "array",
              "items": { "$ref": "#/definitions/SecurityClassificationDto" }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Success",
            "schema": { "$ref": "#/definitions/ClassificationsDto" }
          },
          "500": {
            "description": "Server Error",
            "schema": { "$ref": "#/definitions/ErrorResponse" }
          },
          "400": {
            "description": "Bad Request",
            "schema": { "$ref": "#/definitions/ErrorResponse" }
          },
          "404": {
            "description": "Not Found",
            "schema": { "$ref": "#/definitions/ErrorResponse" }
          }
        }
      }
    },
    "/v1/api/configuration/transactiontype": {
      "post": {
        "tags": [ "Configuration" ],
        "summary": "Adds a new transaction type movement to the list of existing types",
        "operationId": "AddConfigurationTransactionType",
        "consumes": [ "application/json-patch+json", "application/json", "text/json", "application/*+json" ],
        "produces": [ "text/plain", "application/json", "text/json" ],
        "parameters": [
          {
            "name": "type",
            "in": "body",
            "required": false,
            "schema": { "$ref": "#/definitions/TxnMetaDataDto" }
          }
        ],
        "responses": {
          "201": {
            "description": "Success",
            "schema": { "$ref": "#/definitions/TxnMetaDataDto" }
          },
          "500": {
            "description": "Server Error",
            "schema": { "$ref": "#/definitions/ErrorResponse" }
          },
          "400": {
            "description": "Bad Request",
            "schema": { "$ref": "#/definitions/ErrorResponse" }
          }
        }
      }
    },
    "/v1/api/configuration/transactiontypes": {
      "get": {
        "tags": [ "Configuration" ],
        "summary": "Gets the list of persisted transaction types",
        "operationId": "GetConfigurationTransactionTypes",
        "consumes": [],
        "produces": [ "text/plain", "application/json", "text/json" ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Success",
            "schema": { "$ref": "#/definitions/ResourceList[TxnMetaDataDto]" }
          },
          "500": {
            "description": "Server Error",
            "schema": { "$ref": "#/definitions/ErrorResponse" }
          },
          "400": {
            "description": "Bad Request",
            "schema": { "$ref": "#/definitions/ErrorResponse" }
          }
        }
      },
      "post": {
        "tags": [ "Configuration" ],
        "summary": "Uploads a list of transaction types to be used by the movements engine",
        "operationId": "UploadConfigurationTransactionTypes",
        "consumes": [ "application/json-patch+json", "application/json", "text/json", "application/*+json" ],
        "produces": [ "text/plain", "application/json", "text/json" ],
        "parameters": [
          {
            "name": "types",
            "in": "body",
            "required": false,
            "schema": {
              "type": "array",
              "items": { "$ref": "#/definitions/TxnMetaDataDto" }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Success",
            "schema": { "$ref": "#/definitions/ResourceList[TxnMetaDataDto]" }
          },
          "500": {
            "description": "Server Error",
            "schema": { "$ref": "#/definitions/ErrorResponse" }
          },
          "400": {
            "description": "Bad Request",
            "schema": { "$ref": "#/definitions/ErrorResponse" }
          }
        }
      }
    },
    "/v1/api/excel/download-token": {
      "get": {
        "tags": [ "Excel Addin" ],
        "summary": "",
        "operationId": "GetDownloadUrl",
        "consumes": [],
        "produces": [ "text/plain", "application/json", "text/json" ],
        "parameters": [
          {
            "name": "version",
            "in": "query",
            "description": "",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": { "type": "string" }
          },
          "500": {
            "description": "Server Error",
            "schema": { "$ref": "#/definitions/ErrorResponse" }
          }
        }
      }
    },
    "/v1/api/excel/latest-version": {
      "get": {
        "tags": [ "Excel Addin" ],
        "summary": "",
        "operationId": "GetLatestVersion",
        "consumes": [],
        "produces": [ "text/plain", "application/json", "text/json" ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Success",
            "schema": { "type": "string" }
          },
          "500": {
            "description": "Server Error",
            "schema": { "$ref": "#/definitions/ErrorResponse" }
          }
        }
      }
    },
    "/v1/api/groups/portfolios/{scope}": {
      "get": {
        "tags": [ "Portfolio Groups" ],
        "summary": "List all groups in a specified scope",
        "operationId": "ListPortfolioGroups",
        "consumes": [],
        "produces": [ "text/plain", "application/json", "text/json" ],
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "",
            "required": true,
            "type": "string"
          },
          {
            "name": "asAt",
            "in": "query",
            "description": "",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "",
            "required": false,
            "type": "array",
            "items": { "type": "string" },
            "collectionFormat": "multi"
          },
          {
            "name": "start",
            "in": "query",
            "description": "",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "filter",
            "in": "query",
            "description": "A filter expression to apply to the result set",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": { "$ref": "#/definitions/ResourceList[GroupDto]" }
          },
          "500": {
            "description": "Server Error",
            "schema": { "$ref": "#/definitions/ErrorResponse" }
          },
          "400": {
            "description": "Bad Request",
            "schema": { "$ref": "#/definitions/ErrorResponse" }
          },
          "404": {
            "description": "Not Found",
            "schema": { "$ref": "#/definitions/ErrorResponse" }
          }
        }
      },
      "post": {
        "tags": [ "Portfolio Groups" ],
        "summary": "Create a new group",
        "operationId": "CreatePortfolioGroup",
        "consumes": [ "application/json-patch+json", "application/json", "text/json", "application/*+json" ],
        "produces": [ "text/plain", "application/json", "text/json" ],
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "",
            "required": true,
            "type": "string"
          },
          {
            "name": "request",
            "in": "body",
            "description": "",
            "required": false,
            "schema": { "$ref": "#/definitions/CreateGroupRequest" }
          }
        ],
        "responses": {
          "201": {
            "description": "Success",
            "schema": { "$ref": "#/definitions/GroupDto" }
          },
          "500": {
            "description": "Server Error",
            "schema": { "$ref": "#/definitions/ErrorResponse" }
          },
          "400": {
            "description": "Bad Request",
            "schema": { "$ref": "#/definitions/ErrorResponse" }
          },
          "404": {
            "description": "Not Found",
            "schema": { "$ref": "#/definitions/ErrorResponse" }
          }
        }
      }
    },
    "/v1/api/groups/portfolios/{scope}/{code}": {
      "get": {
        "tags": [ "Portfolio Groups" ],
        "summary": "Get an existing group",
        "operationId": "GetPortfolioGroup",
        "consumes": [],
        "produces": [ "text/plain", "application/json", "text/json" ],
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "",
            "required": true,
            "type": "string"
          },
          {
            "name": "code",
            "in": "path",
            "description": "",
            "required": true,
            "type": "string"
          },
          {
            "name": "asAt",
            "in": "query",
            "description": "",
            "required": false,
            "type": "string",
            "format": "date-time"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": { "$ref": "#/definitions/GroupDto" }
          },
          "500": {
            "description": "Server Error",
            "schema": { "$ref": "#/definitions/ErrorResponse" }
          },
          "400": {
            "description": "Bad Request",
            "schema": { "$ref": "#/definitions/ErrorResponse" }
          },
          "404": {
            "description": "Not Found",
            "schema": { "$ref": "#/definitions/ErrorResponse" }
          }
        }
      },
      "delete": {
        "tags": [ "Portfolio Groups" ],
        "summary": "Delete a group",
        "operationId": "DeletePortfolioGroup",
        "consumes": [],
        "produces": [ "text/plain", "application/json", "text/json" ],
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "",
            "required": true,
            "type": "string"
          },
          {
            "name": "code",
            "in": "path",
            "description": "",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": { "$ref": "#/definitions/DeletedEntityResponse" }
          },
          "500": {
            "description": "Server Error",
            "schema": { "$ref": "#/definitions/ErrorResponse" }
          },
          "404": {
            "description": "Not Found",
            "schema": { "$ref": "#/definitions/ErrorResponse" }
          }
        }
      }
    },
    "/v1/api/groups/portfolios/{scope}/{code}/commands": {
      "get": {
        "tags": [ "Portfolio Groups" ],
        "summary": "Gets all commands that modified the portfolio groups(s) with the specified id.",
        "operationId": "GetPortfolioGroupCommands",
        "consumes": [],
        "produces": [ "text/plain", "application/json", "text/json" ],
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the portfolio group",
            "required": true,
            "type": "string"
          },
          {
            "name": "code",
            "in": "path",
            "description": "The portfolio group id",
            "required": true,
            "type": "string"
          },
          {
            "name": "fromAsAt",
            "in": "query",
            "description": "Filters commands by those that were processed at or after this time. Null means there is no lower limit.",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "toAsAt",
            "in": "query",
            "description": "Filters commands by those that were processed at or before this time. Null means there is no upper limit (latest).",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "filter",
            "in": "query",
            "description": "A filter expression to apply to the result set",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The commands that modified the specified portfolio group.",
            "schema": { "$ref": "#/definitions/ResourceList[ProcessedCommandDto]" }
          },
          "500": {
            "description": "Server Error",
            "schema": { "$ref": "#/definitions/ErrorResponse" }
          },
          "404": {
            "description": "The requested commands were not found.",
            "schema": { "$ref": "#/definitions/ErrorResponse" }
          },
          "400": {
            "description": "Bad Request",
            "schema": { "$ref": "#/definitions/ErrorResponse" }
          }
        }
      }
    },
    "/v1/api/groups/portfolios/{scope}/{code}/expansion": {
      "get": {
        "tags": [ "Portfolio Groups" ],
        "summary": "Get a full expansion of an existing group",
        "operationId": "GetPortfolioGroupExpansion",
        "consumes": [],
        "produces": [ "text/plain", "application/json", "text/json" ],
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "",
            "required": true,
            "type": "string"
          },
          {
            "name": "code",
            "in": "path",
            "description": "",
            "required": true,
            "type": "string"
          },
          {
            "name": "effectiveAt",
            "in": "query",
            "description": "",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "asAt",
            "in": "query",
            "description": "",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "propertyFilter",
            "in": "query",
            "description": "",
            "required": false,
            "type": "array",
            "items": { "type": "string" },
            "collectionFormat": "multi"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": { "$ref": "#/definitions/ExpandedGroupDto" }
          },
          "500": {
            "description": "Server Error",
            "schema": { "$ref": "#/definitions/ErrorResponse" }
          },
          "400": {
            "description": "Bad Request",
            "schema": { "$ref": "#/definitions/ErrorResponse" }
          },
          "404": {
            "description": "Not Found",
            "schema": { "$ref": "#/definitions/ErrorResponse" }
          }
        }
      }
    },
    "/v1/api/groups/portfolios/{scope}/{code}/portfolios": {
      "post": {
        "tags": [ "Portfolio Groups" ],
        "summary": "Add a portfolio to an existing group",
        "operationId": "AddPortfolioToGroup",
        "consumes": [ "application/json-patch+json", "application/json", "text/json", "application/*+json" ],
        "produces": [ "text/plain", "application/json", "text/json" ],
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "",
            "required": true,
            "type": "string"
          },
          {
            "name": "code",
            "in": "path",
            "description": "",
            "required": true,
            "type": "string"
          },
          {
            "name": "identifier",
            "in": "body",
            "description": "",
            "required": false,
            "schema": { "$ref": "#/definitions/ResourceId" }
          }
        ],
        "responses": {
          "201": {
            "description": "Success",
            "schema": { "$ref": "#/definitions/GroupDto" }
          },
          "500": {
            "description": "Server Error",
            "schema": { "$ref": "#/definitions/ErrorResponse" }
          },
          "400": {
            "description": "Bad Request",
            "schema": { "$ref": "#/definitions/ErrorResponse" }
          },
          "404": {
            "description": "Not Found",
            "schema": { "$ref": "#/definitions/ErrorResponse" }
          }
        }
      }
    },
    "/v1/api/groups/portfolios/{scope}/{code}/portfolios/{portfolioScope}/{portfolioCode}": {
      "delete": {
        "tags": [ "Portfolio Groups" ],
        "summary": "Remove a portfolio that is currently present within an existing group",
        "operationId": "DeletePortfolioFromGroup",
        "consumes": [],
        "produces": [ "text/plain", "application/json", "text/json" ],
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "",
            "required": true,
            "type": "string"
          },
          {
            "name": "code",
            "in": "path",
            "description": "",
            "required": true,
            "type": "string"
          },
          {
            "name": "portfolioScope",
            "in": "path",
            "description": "",
            "required": true,
            "type": "string"
          },
          {
            "name": "portfolioCode",
            "in": "path",
            "description": "",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": { "$ref": "#/definitions/GroupDto" }
          },
          "500": {
            "description": "Server Error",
            "schema": { "$ref": "#/definitions/ErrorResponse" }
          },
          "400": {
            "description": "Bad Request",
            "schema": { "$ref": "#/definitions/ErrorResponse" }
          },
          "404": {
            "description": "Not Found",
            "schema": { "$ref": "#/definitions/ErrorResponse" }
          }
        }
      }
    },
    "/v1/api/groups/portfolios/{scope}/{code}/subgroups": {
      "post": {
        "tags": [ "Portfolio Groups" ],
        "summary": "Add a sub group to an existing group",
        "operationId": "AddSubGroupToGroup",
        "consumes": [ "application/json-patch+json", "application/json", "text/json", "application/*+json" ],
        "produces": [ "text/plain", "application/json", "text/json" ],
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "",
            "required": true,
            "type": "string"
          },
          {
            "name": "code",
            "in": "path",
            "description": "",
            "required": true,
            "type": "string"
          },
          {
            "name": "identifier",
            "in": "body",
            "description": "",
            "required": false,
            "schema": { "$ref": "#/definitions/ResourceId" }
          }
        ],
        "responses": {
          "201": {
            "description": "Success",
            "schema": { "$ref": "#/definitions/GroupDto" }
          },
          "500": {
            "description": "Server Error",
            "schema": { "$ref": "#/definitions/ErrorResponse" }
          },
          "400": {
            "description": "Bad Request",
            "schema": { "$ref": "#/definitions/ErrorResponse" }
          },
          "404": {
            "description": "Not Found",
            "schema": { "$ref": "#/definitions/ErrorResponse" }
          }
        }
      }
    },
    "/v1/api/groups/portfolios/{scope}/{code}/subgroups/{subgroupScope}/{subgroupCode}": {
      "delete": {
        "tags": [ "Portfolio Groups" ],
        "summary": "Remove a subgroup that is currently present within an existing group",
        "operationId": "DeleteSubGroupFromGroup",
        "consumes": [],
        "produces": [ "text/plain", "application/json", "text/json" ],
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "",
            "required": true,
            "type": "string"
          },
          {
            "name": "code",
            "in": "path",
            "description": "",
            "required": true,
            "type": "string"
          },
          {
            "name": "subgroupScope",
            "in": "path",
            "description": "",
            "required": true,
            "type": "string"
          },
          {
            "name": "subgroupCode",
            "in": "path",
            "description": "",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": { "$ref": "#/definitions/GroupDto" }
          },
          "500": {
            "description": "Server Error",
            "schema": { "$ref": "#/definitions/ErrorResponse" }
          },
          "400": {
            "description": "Bad Request",
            "schema": { "$ref": "#/definitions/ErrorResponse" }
          },
          "404": {
            "description": "Not Found",
            "schema": { "$ref": "#/definitions/ErrorResponse" }
          }
        }
      }
    },
    "/v1/api/groups/portfolios/{scope}/{code}/update": {
      "put": {
        "tags": [ "Portfolio Groups" ],
        "summary": "Update an existing group",
        "operationId": "UpdatePortfolioGroup",
        "consumes": [ "application/json-patch+json", "application/json", "text/json", "application/*+json" ],
        "produces": [ "text/plain", "application/json", "text/json" ],
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "",
            "required": true,
            "type": "string"
          },
          {
            "name": "code",
            "in": "path",
            "description": "",
            "required": true,
            "type": "string"
          },
          {
            "name": "request",
            "in": "body",
            "description": "",
            "required": false,
            "schema": { "$ref": "#/definitions/UpdateGroupRequest" }
          }
        ],
        "responses": {
          "201": {
            "description": "Success",
            "schema": { "$ref": "#/definitions/GroupDto" }
          },
          "500": {
            "description": "Server Error",
            "schema": { "$ref": "#/definitions/ErrorResponse" }
          },
          "400": {
            "description": "Bad Request",
            "schema": { "$ref": "#/definitions/ErrorResponse" }
          },
          "404": {
            "description": "Not Found",
            "schema": { "$ref": "#/definitions/ErrorResponse" }
          }
        }
      }
    },
    "/v1/api/groups/search": {
      "post": {
        "tags": [ "Search Properties" ],
        "summary": "Search portfolio groups",
        "operationId": "PortfolioGroupsSearch",
        "consumes": [ "application/json-patch+json", "application/json", "text/json", "application/*+json" ],
        "produces": [ "text/plain", "application/json", "text/json" ],
        "parameters": [
          {
            "name": "request",
            "in": "body",
            "required": false,
            "schema": { "type": "object" }
          },
          {
            "name": "sortBy",
            "in": "query",
            "required": false,
            "type": "array",
            "items": { "type": "string" },
            "collectionFormat": "multi"
          },
          {
            "name": "start",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "filter",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": { "$ref": "#/definitions/ResourceList[GroupDto]" }
          },
          "500": {
            "description": "Server Error",
            "schema": { "$ref": "#/definitions/ErrorResponse" }
          },
          "400": {
            "description": "Bad Request",
            "schema": { "$ref": "#/definitions/ErrorResponse" }
          }
        }
      }
    },
    "/v1/api/health": {
      "get": {
        "tags": [ "Health" ],
        "summary": "Simple heartbeat method for the api",
        "operationId": "GetHealth",
        "consumes": [],
        "produces": [ "text/plain", "application/json", "text/json" ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Success",
            "schema": { "type": "string" }
          },
          "500": {
            "description": "Server Error",
            "schema": { "$ref": "#/definitions/ErrorResponse" }
          }
        }
      }
    },
    "/v1/api/login": {
      "get": {
        "tags": [ "Login" ],
        "summary": "Gets the login information.",
        "operationId": "GetLoginInfo",
        "consumes": [],
        "produces": [ "text/plain", "application/json", "text/json" ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Success",
            "schema": { "$ref": "#/definitions/LoginResponse" }
          },
          "500": {
            "description": "Server Error",
            "schema": { "$ref": "#/definitions/ErrorResponse" }
          },
          "400": {
            "description": "Bad Request",
            "schema": { "$ref": "#/definitions/ErrorResponse" }
          },
          "404": {
            "description": "Not Found",
            "schema": { "$ref": "#/definitions/ErrorResponse" }
          }
        }
      }
    },
    "/v1/api/logs/lusidweb": {
      "post": {
        "tags": [ "Logs" ],
        "summary": "Store a log message",
        "operationId": "StoreWebLogs",
        "consumes": [ "application/json-patch+json", "application/json", "text/json", "application/*+json" ],
        "produces": [ "text/plain", "application/json", "text/json" ],
        "parameters": [
          {
            "name": "message",
            "in": "body",
            "required": false,
            "schema": { "$ref": "#/definitions/WebLogMessage" }
          }
        ],
        "responses": {
          "204": {
            "description": "Success",
            "schema": { "type": "string" }
          },
          "500": {
            "description": "Server Error",
            "schema": { "$ref": "#/definitions/ErrorResponse" }
          },
          "400": {
            "description": "Bad Request",
            "schema": { "$ref": "#/definitions/ErrorResponse" }
          }
        }
      }
    },
    "/v1/api/metadata/buildversion": {
      "get": {
        "tags": [ "Application Metadata" ],
        "summary": "Returns the current assembly version",
        "operationId": "GetBuildVersion",
        "consumes": [],
        "produces": [ "text/plain", "application/json", "text/json" ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Success",
            "schema": { "type": "string" }
          },
          "500": {
            "description": "Server Error",
            "schema": { "$ref": "#/definitions/ErrorResponse" }
          }
        }
      }
    },
    "/v1/api/metadata/verifyconnectivity": {
      "get": {
        "tags": [ "Application Metadata" ],
        "summary": "Returns the current assembly version",
        "operationId": "VerifyConnectivity",
        "consumes": [],
        "produces": [ "text/plain", "application/json", "text/json" ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Success",
            "schema": { "type": "string" }
          },
          "500": {
            "description": "Server Error",
            "schema": { "$ref": "#/definitions/ErrorResponse" }
          }
        }
      }
    },
    "/v1/api/metadata/version": {
      "get": {
        "tags": [ "Application Metadata" ],
        "summary": "Returns the current assembly version",
        "operationId": "GetVersion",
        "consumes": [],
        "produces": [ "text/plain", "application/json", "text/json" ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Success",
            "schema": { "type": "string" }
          },
          "500": {
            "description": "Server Error",
            "schema": { "$ref": "#/definitions/ErrorResponse" }
          }
        }
      }
    },
    "/v1/api/personalisations": {
      "get": {
        "tags": [ "Personalisations" ],
        "summary": "Get a personalisation, recursing to get any referenced if required.",
        "operationId": "GetPersonalisations",
        "consumes": [],
        "produces": [ "text/plain", "application/json", "text/json" ],
        "parameters": [
          {
            "name": "pattern",
            "in": "query",
            "description": "The search pattern or specific key",
            "required": false,
            "type": "string"
          },
          {
            "name": "scope",
            "in": "query",
            "description": "The scope level to request for",
            "required": false,
            "type": "string",
            "enum": [ "User", "Group", "Default", "All" ]
          },
          {
            "name": "recursive",
            "in": "query",
            "description": "Whether to recurse into dereference recursive settings",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "wildcards",
            "in": "query",
            "description": "Whether to apply wildcards to the provided pattern and pull back any matching",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "",
            "required": false,
            "type": "array",
            "items": { "type": "string" },
            "collectionFormat": "multi"
          },
          {
            "name": "start",
            "in": "query",
            "description": "",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": { "$ref": "#/definitions/ResourceList[PersonalisationDto]" }
          },
          "500": {
            "description": "Server Error",
            "schema": { "$ref": "#/definitions/ErrorResponse" }
          },
          "400": {
            "description": "Bad Request",
            "schema": { "$ref": "#/definitions/ErrorResponse" }
          },
          "404": {
            "description": "Not Found",
            "schema": { "$ref": "#/definitions/ErrorResponse" }
          }
        }
      },
      "post": {
        "tags": [ "Personalisations" ],
        "summary": "Upsert one or more personalisations",
        "operationId": "UpsertPersonalisations",
        "consumes": [ "application/json-patch+json", "application/json", "text/json", "application/*+json" ],
        "produces": [ "text/plain", "application/json", "text/json" ],
        "parameters": [
          {
            "name": "personalisations",
            "in": "body",
            "required": false,
            "schema": {
              "type": "array",
              "items": { "$ref": "#/definitions/PersonalisationDto" }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Success",
            "schema": { "$ref": "#/definitions/UpsertPersonalisationsResponse" }
          },
          "500": {
            "description": "Server Error",
            "schema": { "$ref": "#/definitions/ErrorResponse" }
          },
          "400": {
            "description": "Bad Request",
            "schema": { "$ref": "#/definitions/ErrorResponse" }
          },
          "404": {
            "description": "Not Found",
            "schema": { "$ref": "#/definitions/ErrorResponse" }
          }
        }
      },
      "delete": {
        "tags": [ "Personalisations" ],
        "summary": "Delete a personalisation at a specific scope (or use scope ALL to purge the setting entirely)",
        "operationId": "DeletePersonalisation",
        "consumes": [],
        "produces": [ "text/plain", "application/json", "text/json" ],
        "parameters": [
          {
            "name": "key",
            "in": "query",
            "description": "The key of the setting to be deleted",
            "required": false,
            "type": "string"
          },
          {
            "name": "scope",
            "in": "query",
            "description": "The scope to delete at (use ALL to purge the setting entirely)",
            "required": false,
            "type": "string",
            "enum": [ "User", "Group", "Default", "All" ]
          },
          {
            "name": "group",
            "in": "query",
            "description": "If deleting a setting at group level, specify the group here",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": { "$ref": "#/definitions/DeletedEntityResponse" }
          },
          "500": {
            "description": "Server Error",
            "schema": { "$ref": "#/definitions/ErrorResponse" }
          },
          "400": {
            "description": "Bad Request",
            "schema": { "$ref": "#/definitions/ErrorResponse" }
          },
          "404": {
            "description": "Not Found",
            "schema": { "$ref": "#/definitions/ErrorResponse" }
          }
        }
      }
    },
    "/v1/api/portfolios": {
      "get": {
        "tags": [ "Portfolios" ],
        "summary": "List scopes that contain portfolios",
        "description": "Lists all scopes that have previously been used",
        "operationId": "ListPortfolioScopes",
        "consumes": [],
        "produces": [ "text/plain", "application/json", "text/json" ],
        "parameters": [
          {
            "name": "sortBy",
            "in": "query",
            "description": "How to order the returned scopes",
            "required": false,
            "type": "array",
            "items": { "type": "string" },
            "collectionFormat": "multi"
          },
          {
            "name": "start",
            "in": "query",
            "description": "The starting index for the returned scopes",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The final index for the returned scopes",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": { "$ref": "#/definitions/ResourceList[Scope]" }
          },
          "500": {
            "description": "Server Error",
            "schema": { "$ref": "#/definitions/ErrorResponse" }
          },
          "400": {
            "description": "Bad Request",
            "schema": { "$ref": "#/definitions/ErrorResponse" }
          }
        }
      }
    },
    "/v1/api/portfolios/{scope}": {
      "get": {
        "tags": [ "Portfolios" ],
        "summary": "Get all portfolios",
        "description": "Get all portfolios in a scope",
        "operationId": "ListPortfolios",
        "consumes": [],
        "produces": [ "text/plain", "application/json", "text/json" ],
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope to get portfolios from",
            "required": true,
            "type": "string"
          },
          {
            "name": "effectiveAt",
            "in": "query",
            "description": "Effective date",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "asAt",
            "in": "query",
            "description": "The asAt date to use",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "The columns to sort the returned data by",
            "required": false,
            "type": "array",
            "items": { "type": "string" },
            "collectionFormat": "multi"
          },
          {
            "name": "start",
            "in": "query",
            "description": "How many items to skip from the returned set",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "How many items to return from the set",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "filter",
            "in": "query",
            "description": "",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of portfolios in the requested scope",
            "schema": { "$ref": "#/definitions/ResourceList[PortfolioDto]" }
          },
          "500": {
            "description": "A structured error response",
            "schema": { "$ref": "#/definitions/ErrorResponse" }
          },
          "404": {
            "description": "A structured error response indicating missing portfolio",
            "schema": { "$ref": "#/definitions/ErrorResponse" }
          },
          "400": {
            "description": "Bad Request",
            "schema": { "$ref": "#/definitions/ErrorResponse" }
          }
        }
      },
      "post": {
        "tags": [ "Portfolios" ],
        "summary": "Create portfolio",
        "description": "Creates a new portfolio",
        "operationId": "CreatePortfolio",
        "consumes": [ "application/json-patch+json", "application/json", "text/json", "application/*+json" ],
        "produces": [ "text/plain", "application/json", "text/json" ],
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The intended scope of the portfolio",
            "required": true,
            "type": "string"
          },
          {
            "name": "createRequest",
            "in": "body",
            "description": "The portfolio creation request object",
            "required": false,
            "schema": { "$ref": "#/definitions/CreatePortfolioRequest" }
          }
        ],
        "responses": {
          "201": {
            "description": "The created portfolio, with populated id",
            "schema": { "$ref": "#/definitions/PortfolioDto" }
          },
          "500": {
            "description": "Server Error",
            "schema": { "$ref": "#/definitions/ErrorResponse" }
          },
          "404": {
            "description": "A structured error response indicating missing portfolio",
            "schema": { "$ref": "#/definitions/ErrorResponse" }
          },
          "400": {
            "description": "Bad Request",
            "schema": { "$ref": "#/definitions/ErrorResponse" }
          }
        }
      }
    },
    "/v1/api/portfolios/{scope}/{code}": {
      "get": {
        "tags": [ "Portfolios" ],
        "summary": "Get portfolio",
        "description": "Gets a single portfolio by code",
        "operationId": "GetPortfolio",
        "consumes": [],
        "produces": [ "text/plain", "application/json", "text/json" ],
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the portfolio",
            "required": true,
            "type": "string"
          },
          {
            "name": "code",
            "in": "path",
            "description": "Code for the portfolio",
            "required": true,
            "type": "string"
          },
          {
            "name": "effectiveAt",
            "in": "query",
            "description": "Effective date",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "asAt",
            "in": "query",
            "description": "The asAt date to use",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "propertyFilter",
            "in": "query",
            "description": "Optional property filter",
            "required": false,
            "type": "array",
            "items": { "type": "string" },
            "collectionFormat": "multi"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested portfolio",
            "schema": { "$ref": "#/definitions/PortfolioDto" }
          },
          "500": {
            "description": "Server Error",
            "schema": { "$ref": "#/definitions/ErrorResponse" }
          },
          "404": {
            "description": "A structured error response indicating missing portfolio",
            "schema": { "$ref": "#/definitions/ErrorResponse" }
          },
          "400": {
            "description": "Bad Request",
            "schema": { "$ref": "#/definitions/ErrorResponse" }
          }
        }
      },
      "put": {
        "tags": [ "Portfolios" ],
        "summary": "Update portfolio",
        "operationId": "UpdatePortfolio",
        "consumes": [ "application/json-patch+json", "application/json", "text/json", "application/*+json" ],
        "produces": [ "text/plain", "application/json", "text/json" ],
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the portfolio to be updated",
            "required": true,
            "type": "string"
          },
          {
            "name": "code",
            "in": "path",
            "description": "Code for the portfolio",
            "required": true,
            "type": "string"
          },
          {
            "name": "request",
            "in": "body",
            "description": "The update request",
            "required": false,
            "schema": { "$ref": "#/definitions/UpdatePortfolioRequest" }
          },
          {
            "name": "effectiveAt",
            "in": "query",
            "description": "The effective date for the change",
            "required": false,
            "type": "string",
            "format": "date-time"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": { "$ref": "#/definitions/PortfolioDto" }
          },
          "500": {
            "description": "Server Error",
            "schema": { "$ref": "#/definitions/ErrorResponse" }
          },
          "404": {
            "description": "A structured error response indicating missing portfolio",
            "schema": { "$ref": "#/definitions/ErrorResponse" }
          },
          "400": {
            "description": "Bad Request",
            "schema": { "$ref": "#/definitions/ErrorResponse" }
          }
        }
      },
      "delete": {
        "tags": [ "Portfolios" ],
        "summary": "Delete portfolio",
        "description": "Deletes a portfolio from the given effectiveAt",
        "operationId": "DeletePortfolio",
        "consumes": [],
        "produces": [ "text/plain", "application/json", "text/json" ],
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the portfolio",
            "required": true,
            "type": "string"
          },
          {
            "name": "code",
            "in": "path",
            "description": "Code for the portfolio",
            "required": true,
            "type": "string"
          },
          {
            "name": "effectiveAt",
            "in": "query",
            "description": "Effective date",
            "required": false,
            "type": "string",
            "format": "date-time"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": { "$ref": "#/definitions/DeletedEntityResponse" }
          },
          "500": {
            "description": "Server Error",
            "schema": { "$ref": "#/definitions/ErrorResponse" }
          },
          "404": {
            "description": "A structured error response indicating missing portfolio",
            "schema": { "$ref": "#/definitions/ErrorResponse" }
          },
          "400": {
            "description": "Bad Request",
            "schema": { "$ref": "#/definitions/ErrorResponse" }
          }
        }
      }
    },
    "/v1/api/portfolios/{scope}/{code}/commands": {
      "get": {
        "tags": [ "Portfolios" ],
        "summary": "Get modifications",
        "description": "Gets all commands that modified the portfolio",
        "operationId": "GetCommands",
        "consumes": [],
        "produces": [ "text/plain", "application/json", "text/json" ],
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the portfolio",
            "required": true,
            "type": "string"
          },
          {
            "name": "code",
            "in": "path",
            "description": "The portfolio id",
            "required": true,
            "type": "string"
          },
          {
            "name": "fromAsAt",
            "in": "query",
            "description": "Filters commands by those that were processed at or after this time. Null means there is no lower limit.",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "toAsAt",
            "in": "query",
            "description": "Filters commands by those that were processed at or before this time. Null means there is no upper limit (latest).",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Command filter",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The commands that modified the specified portfolio.",
            "schema": { "$ref": "#/definitions/ResourceList[ProcessedCommandDto]" }
          },
          "500": {
            "description": "Server Error",
            "schema": { "$ref": "#/definitions/ErrorResponse" }
          },
          "404": {
            "description": "The requested commands were not found.",
            "schema": { "$ref": "#/definitions/ErrorResponse" }
          },
          "400": {
            "description": "Bad Request",
            "schema": { "$ref": "#/definitions/ErrorResponse" }
          }
        }
      }
    },
    "/v1/api/portfolios/{scope}/{code}/details": {
      "get": {
        "tags": [ "Portfolios" ],
        "summary": "Get portfolio details",
        "description": "Gets the details for a portfolio.  For a derived portfolio this can be \r\n            the details of another reference portfolio",
        "operationId": "GetDetails",
        "consumes": [],
        "produces": [ "text/plain", "application/json", "text/json" ],
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the portfolio",
            "required": true,
            "type": "string"
          },
          {
            "name": "code",
            "in": "path",
            "description": "Code for the portfolio",
            "required": true,
            "type": "string"
          },
          {
            "name": "effectiveAt",
            "in": "query",
            "description": "Effective date",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "asAt",
            "in": "query",
            "description": "The asAt date to use",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "propertyFilter",
            "in": "query",
            "description": "Optional property filter",
            "required": false,
            "type": "array",
            "items": { "type": "string" },
            "collectionFormat": "multi"
          }
        ],
        "responses": {
          "200": {
            "description": "The details of the requested portfolio",
            "schema": { "$ref": "#/definitions/PortfolioDetailsDto" }
          },
          "500": {
            "description": "Server Error",
            "schema": { "$ref": "#/definitions/ErrorResponse" }
          },
          "404": {
            "description": "A structured error response indicating missing portfolio",
            "schema": { "$ref": "#/definitions/ErrorResponse" }
          },
          "400": {
            "description": "Bad Request",
            "schema": { "$ref": "#/definitions/ErrorResponse" }
          }
        }
      },
      "post": {
        "tags": [ "Portfolios" ],
        "summary": "Add/update portfolio details",
        "description": "Update the portfolio details for the given code or add if it doesn't already exist. Updates with\r\nnull values will remove any existing values",
        "operationId": "UpsertPortfolioDetails",
        "consumes": [ "application/json-patch+json", "application/json", "text/json", "application/*+json" ],
        "produces": [ "text/plain", "application/json", "text/json" ],
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the portfolio",
            "required": true,
            "type": "string"
          },
          {
            "name": "code",
            "in": "path",
            "description": "Code for the portfolio",
            "required": true,
            "type": "string"
          },
          {
            "name": "details",
            "in": "body",
            "description": "",
            "required": false,
            "schema": { "$ref": "#/definitions/PortfolioDetailsRequest" }
          },
          {
            "name": "effectiveAt",
            "in": "query",
            "description": "The effective date of the change",
            "required": false,
            "type": "string",
            "format": "date-time"
          }
        ],
        "responses": {
          "200": {
            "description": "The latest version of the created/updated details",
            "schema": { "$ref": "#/definitions/PortfolioDetailsDto" }
          },
          "500": {
            "description": "Server Error",
            "schema": { "$ref": "#/definitions/ErrorResponse" }
          },
          "404": {
            "description": "A structured error response indicating missing portfolio",
            "schema": { "$ref": "#/definitions/ErrorResponse" }
          },
          "400": {
            "description": "Bad Request",
            "schema": { "$ref": "#/definitions/ErrorResponse" }
          }
        }
      },
      "delete": {
        "tags": [ "Portfolios" ],
        "summary": "Delete portfolio details",
        "description": "Deletes the portfolio details for the given code",
        "operationId": "DeletePortfolioDetails",
        "consumes": [],
        "produces": [ "text/plain", "application/json", "text/json" ],
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the portfolio",
            "required": true,
            "type": "string"
          },
          {
            "name": "code",
            "in": "path",
            "description": "Code for the portfolio",
            "required": true,
            "type": "string"
          },
          {
            "name": "effectiveAt",
            "in": "query",
            "description": "The effective date of the change",
            "required": false,
            "type": "string",
            "format": "date-time"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": { "$ref": "#/definitions/DeletedEntityResponse" }
          },
          "500": {
            "description": "Server Error",
            "schema": { "$ref": "#/definitions/ErrorResponse" }
          },
          "404": {
            "description": "A structured error response indicating missing portfolio",
            "schema": { "$ref": "#/definitions/ErrorResponse" }
          },
          "400": {
            "description": "Bad Request",
            "schema": { "$ref": "#/definitions/ErrorResponse" }
          }
        }
      }
    },
    "/v1/api/portfolios/{scope}/{code}/holdings": {
      "get": {
        "tags": [ "Portfolios" ],
        "summary": "Get holdings",
        "description": "Get the aggregate holdings of a portfolio.  If no effectiveAt or asAt\r\nare supplied then values will be defaulted to the latest system time.",
        "operationId": "GetAggregateHoldings",
        "consumes": [],
        "produces": [ "text/plain", "application/json", "text/json" ],
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the portfolio",
            "required": true,
            "type": "string"
          },
          {
            "name": "code",
            "in": "path",
            "description": "Code for the portfolio",
            "required": true,
            "type": "string"
          },
          {
            "name": "effectiveAt",
            "in": "query",
            "description": "Effective date",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "asAt",
            "in": "query",
            "description": "As at date",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "The columns to sort the returned data by",
            "required": false,
            "type": "array",
            "items": { "type": "string" },
            "collectionFormat": "multi"
          },
          {
            "name": "start",
            "in": "query",
            "description": "How many items to skip from the returned set",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "How many items to return from the set",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "filter",
            "in": "query",
            "description": "A filter on the results",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "500": {
            "description": "Server Error",
            "schema": { "$ref": "#/definitions/ErrorResponse" }
          },
          "404": {
            "description": "A structured error response indicating missing portfolio",
            "schema": { "$ref": "#/definitions/ErrorResponse" }
          },
          "400": {
            "description": "Bad Request",
            "schema": { "$ref": "#/definitions/ErrorResponse" }
          },
          "200": {
            "description": "Success",
            "schema": { "$ref": "#/definitions/VersionedResourceList[HoldingDto]" }
          }
        }
      }
    },
    "/v1/api/portfolios/{scope}/{code}/holdings/{effectiveAt}": {
      "post": {
        "tags": [ "Portfolios" ],
        "summary": "Adjust holdings",
        "description": "Create trades in a specific portfolio to bring it to the specified holdings",
        "operationId": "AdjustHoldings",
        "consumes": [ "application/json-patch+json", "application/json", "text/json", "application/*+json" ],
        "produces": [ "text/plain", "application/json", "text/json" ],
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the portfolio",
            "required": true,
            "type": "string"
          },
          {
            "name": "code",
            "in": "path",
            "description": "Code for the portfolio",
            "required": true,
            "type": "string"
          },
          {
            "name": "effectiveAt",
            "in": "path",
            "description": "Effective date",
            "required": true,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "holdings",
            "in": "body",
            "description": "",
            "required": false,
            "schema": {
              "type": "array",
              "items": { "$ref": "#/definitions/HoldingAdjustmentDto" }
            }
          }
        ],
        "responses": {
          "500": {
            "description": "Server Error",
            "schema": { "$ref": "#/definitions/ErrorResponse" }
          },
          "400": {
            "description": "Bad Request",
            "schema": { "$ref": "#/definitions/ErrorResponse" }
          },
          "200": {
            "description": "Success",
            "schema": { "$ref": "#/definitions/UpsertPortfolioTradesDto" }
          },
          "404": {
            "description": "A structured error response indicating missing portfolio",
            "schema": { "$ref": "#/definitions/ErrorResponse" }
          }
        }
      }
    },
    "/v1/api/portfolios/{scope}/{code}/properties": {
      "get": {
        "tags": [ "Portfolios" ],
        "summary": "Get properties",
        "description": "Get properties attached to the portfolio.  If the asAt is not specified then\r\nthe latest system time is used",
        "operationId": "GetProperties",
        "consumes": [],
        "produces": [ "text/plain", "application/json", "text/json" ],
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the portfolio",
            "required": true,
            "type": "string"
          },
          {
            "name": "code",
            "in": "path",
            "description": "Code for the portfolio",
            "required": true,
            "type": "string"
          },
          {
            "name": "effectiveAt",
            "in": "query",
            "description": "Effective date",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "asAt",
            "in": "query",
            "description": "The asAt date to use",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "Property to sort the results by",
            "required": false,
            "type": "array",
            "items": { "type": "string" },
            "collectionFormat": "multi"
          },
          {
            "name": "start",
            "in": "query",
            "description": "",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "The properties of the requested portfolio",
            "schema": { "$ref": "#/definitions/PortfolioPropertiesDto" }
          },
          "500": {
            "description": "Server Error",
            "schema": { "$ref": "#/definitions/ErrorResponse" }
          },
          "404": {
            "description": "A structured error response indicating missing portfolio",
            "schema": { "$ref": "#/definitions/ErrorResponse" }
          },
          "400": {
            "description": "Bad Request",
            "schema": { "$ref": "#/definitions/ErrorResponse" }
          }
        }
      },
      "post": {
        "tags": [ "Portfolios" ],
        "summary": "Update properties",
        "description": "Create one or more properties on a portfolio",
        "operationId": "UpsertPortfolioProperties",
        "consumes": [ "application/json-patch+json", "application/json", "text/json", "application/*+json" ],
        "produces": [ "text/plain", "application/json", "text/json" ],
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the portfolio",
            "required": true,
            "type": "string"
          },
          {
            "name": "code",
            "in": "path",
            "description": "Code for the portfolio",
            "required": true,
            "type": "string"
          },
          {
            "name": "properties",
            "in": "body",
            "description": "",
            "required": false,
            "schema": {
              "type": "array",
              "items": { "$ref": "#/definitions/PropertyDto" }
            }
          },
          {
            "name": "effectiveAt",
            "in": "query",
            "description": "The effective date for the change",
            "required": false,
            "type": "string",
            "format": "date-time"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": { "$ref": "#/definitions/PortfolioPropertiesDto" }
          },
          "500": {
            "description": "Server Error",
            "schema": { "$ref": "#/definitions/ErrorResponse" }
          },
          "404": {
            "description": "A structured error response indicating missing portfolio",
            "schema": { "$ref": "#/definitions/ErrorResponse" }
          },
          "400": {
            "description": "Bad Request",
            "schema": { "$ref": "#/definitions/ErrorResponse" }
          }
        }
      },
      "delete": {
        "tags": [ "Portfolios" ],
        "summary": "Delete property",
        "description": "Delete a property from a portfolio",
        "operationId": "DeletePortfolioProperty",
        "consumes": [],
        "produces": [ "text/plain", "application/json", "text/json" ],
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the portfolio",
            "required": true,
            "type": "string"
          },
          {
            "name": "code",
            "in": "path",
            "description": "Code for the portfolio",
            "required": true,
            "type": "string"
          },
          {
            "name": "property",
            "in": "query",
            "description": "The key of the property to be deleted",
            "required": false,
            "type": "string"
          },
          {
            "name": "effectiveAt",
            "in": "query",
            "description": "Effective date",
            "required": false,
            "type": "string",
            "format": "date-time"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": { "$ref": "#/definitions/DeletedEntityResponse" }
          },
          "500": {
            "description": "Server Error",
            "schema": { "$ref": "#/definitions/ErrorResponse" }
          },
          "404": {
            "description": "A structured error response indicating missing portfolio",
            "schema": { "$ref": "#/definitions/ErrorResponse" }
          },
          "400": {
            "description": "Bad Request",
            "schema": { "$ref": "#/definitions/ErrorResponse" }
          }
        }
      }
    },
    "/v1/api/portfolios/{scope}/{code}/properties/all": {
      "delete": {
        "tags": [ "Portfolios" ],
        "summary": "Delete properties",
        "description": "Delete all properties from a portfolio",
        "operationId": "DeletePortfolioProperties",
        "consumes": [],
        "produces": [ "text/plain", "application/json", "text/json" ],
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the portfolio",
            "required": true,
            "type": "string"
          },
          {
            "name": "code",
            "in": "path",
            "description": "Code for the portfolio",
            "required": true,
            "type": "string"
          },
          {
            "name": "effectiveAt",
            "in": "query",
            "description": "The effective date for the change",
            "required": false,
            "type": "string",
            "format": "date-time"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": { "$ref": "#/definitions/DeletedEntityResponse" }
          },
          "500": {
            "description": "Server Error",
            "schema": { "$ref": "#/definitions/ErrorResponse" }
          },
          "404": {
            "description": "A structured error response indicating missing portfolio",
            "schema": { "$ref": "#/definitions/ErrorResponse" }
          },
          "400": {
            "description": "Bad Request",
            "schema": { "$ref": "#/definitions/ErrorResponse" }
          }
        }
      }
    },
    "/v1/api/portfolios/{scope}/{code}/trades": {
      "get": {
        "tags": [ "Portfolios" ],
        "summary": "Get trades",
        "operationId": "GetTrades",
        "consumes": [],
        "produces": [ "text/plain", "application/json", "text/json" ],
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the portfolio",
            "required": true,
            "type": "string"
          },
          {
            "name": "code",
            "in": "path",
            "description": "Code for the portfolio",
            "required": true,
            "type": "string"
          },
          {
            "name": "fromTradeDate",
            "in": "query",
            "description": "Include trades with a trade date equal or later than this date",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "toTradeDate",
            "in": "query",
            "description": "Include trades with a trade date equal or before this date",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "asAt",
            "in": "query",
            "description": "",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "The columns to sort the returned data by",
            "required": false,
            "type": "array",
            "items": { "type": "string" },
            "collectionFormat": "multi"
          },
          {
            "name": "start",
            "in": "query",
            "description": "How many items to skip from the returned set",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "How many items to return from the set",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "securityPropertyKeys",
            "in": "query",
            "description": "Keys for the security properties to be decorated onto the trades",
            "required": false,
            "type": "array",
            "items": { "type": "string" },
            "collectionFormat": "multi"
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Trade filter",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested portfolio trades",
            "schema": { "$ref": "#/definitions/VersionedResourceList[TradeDto]" }
          },
          "500": {
            "description": "Server Error",
            "schema": { "$ref": "#/definitions/ErrorResponse" }
          },
          "404": {
            "description": "A structured error response indicating missing portfolio",
            "schema": { "$ref": "#/definitions/ErrorResponse" }
          },
          "400": {
            "description": "Bad Request",
            "schema": { "$ref": "#/definitions/ErrorResponse" }
          }
        }
      },
      "post": {
        "tags": [ "Portfolios" ],
        "summary": "Add/update trades",
        "operationId": "UpsertTrades",
        "consumes": [ "application/json-patch+json", "application/json", "text/json", "application/*+json" ],
        "produces": [ "text/plain", "application/json", "text/json" ],
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the portfolio",
            "required": true,
            "type": "string"
          },
          {
            "name": "code",
            "in": "path",
            "description": "Code for the portfolio",
            "required": true,
            "type": "string"
          },
          {
            "name": "trades",
            "in": "body",
            "description": "The trades to be updated",
            "required": false,
            "schema": {
              "type": "array",
              "items": { "$ref": "#/definitions/TradeDto" }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": { "$ref": "#/definitions/UpsertPortfolioTradesDto" }
          },
          "500": {
            "description": "Server Error",
            "schema": { "$ref": "#/definitions/ErrorResponse" }
          },
          "404": {
            "description": "A structured error response indicating missing portfolio",
            "schema": { "$ref": "#/definitions/ErrorResponse" }
          },
          "400": {
            "description": "Bad Request",
            "schema": { "$ref": "#/definitions/ErrorResponse" }
          }
        }
      },
      "delete": {
        "tags": [ "Portfolios" ],
        "summary": "Delete trades",
        "description": "Delete one or more trades from a portfolio",
        "operationId": "DeleteTrades",
        "consumes": [],
        "produces": [ "text/plain", "application/json", "text/json" ],
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the portfolio",
            "required": true,
            "type": "string"
          },
          {
            "name": "code",
            "in": "path",
            "description": "Code for the portfolio",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "query",
            "description": "Ids of trades to delete",
            "required": false,
            "type": "array",
            "items": { "type": "string" },
            "collectionFormat": "multi"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": { "$ref": "#/definitions/DeletedEntityResponse" }
          },
          "500": {
            "description": "Server Error",
            "schema": { "$ref": "#/definitions/ErrorResponse" }
          },
          "404": {
            "description": "A structured error response indicating missing portfolio",
            "schema": { "$ref": "#/definitions/ErrorResponse" }
          },
          "400": {
            "description": "Bad Request",
            "schema": { "$ref": "#/definitions/ErrorResponse" }
          }
        }
      }
    },
    "/v1/api/portfolios/{scope}/{code}/trades/{tradeId}/properties": {
      "post": {
        "tags": [ "Portfolios" ],
        "summary": "Add/update trade properties",
        "description": "Add one or more properties to a specific trade in a portfolio",
        "operationId": "AddTradeProperty",
        "consumes": [ "application/json-patch+json", "application/json", "text/json", "application/*+json" ],
        "produces": [ "text/plain", "application/json", "text/json" ],
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the portfolio",
            "required": true,
            "type": "string"
          },
          {
            "name": "code",
            "in": "path",
            "description": "Code for the portfolio",
            "required": true,
            "type": "string"
          },
          {
            "name": "tradeId",
            "in": "path",
            "description": "Id of trade to add properties to",
            "required": true,
            "type": "string"
          },
          {
            "name": "properties",
            "in": "body",
            "description": "Trade properties to add",
            "required": false,
            "schema": {
              "type": "array",
              "items": { "$ref": "#/definitions/PropertyDto" }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Success",
            "schema": { "$ref": "#/definitions/AddTradePropertyDto" }
          },
          "500": {
            "description": "Server Error",
            "schema": { "$ref": "#/definitions/ErrorResponse" }
          },
          "404": {
            "description": "A structured error response indicating missing portfolio",
            "schema": { "$ref": "#/definitions/ErrorResponse" }
          },
          "400": {
            "description": "Bad Request",
            "schema": { "$ref": "#/definitions/ErrorResponse" }
          }
        }
      },
      "delete": {
        "tags": [ "Portfolios" ],
        "summary": "Delete trade property",
        "description": "Delete a property from a specific trade",
        "operationId": "DeletePropertyFromTrade",
        "consumes": [],
        "produces": [ "text/plain", "application/json", "text/json" ],
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the portfolio",
            "required": true,
            "type": "string"
          },
          {
            "name": "code",
            "in": "path",
            "description": "Code for the portfolio",
            "required": true,
            "type": "string"
          },
          {
            "name": "tradeId",
            "in": "path",
            "description": "Id of the trade to delete the property from",
            "required": true,
            "type": "string"
          },
          {
            "name": "property",
            "in": "query",
            "description": "The key of the property to be deleted",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": { "$ref": "#/definitions/DeletedEntityResponse" }
          },
          "404": {
            "description": "A structured error response indicating missing portfolio",
            "schema": { "$ref": "#/definitions/ErrorResponse" }
          },
          "400": {
            "description": "Bad Request",
            "schema": { "$ref": "#/definitions/ErrorResponse" }
          },
          "500": {
            "description": "Server Error",
            "schema": { "$ref": "#/definitions/ErrorResponse" }
          }
        }
      }
    },
    "/v1/api/portfolios/{scope}/derived": {
      "post": {
        "tags": [ "Portfolios" ],
        "summary": "Create derived portfolio",
        "description": "Creates a portfolio that derives from an existing portfolio",
        "operationId": "CreateDerivedPortfolio",
        "consumes": [ "application/json-patch+json", "application/json", "text/json", "application/*+json" ],
        "produces": [ "text/plain", "application/json", "text/json" ],
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope into which to create the new derived portfolio",
            "required": true,
            "type": "string"
          },
          {
            "name": "portfolio",
            "in": "body",
            "description": "The root object of the new derived portfolio, containing a populated reference portfolio id and reference scope",
            "required": false,
            "schema": { "$ref": "#/definitions/CreateDerivedPortfolioRequest" }
          }
        ],
        "responses": {
          "201": {
            "description": "The created derived portfolio, with populated id",
            "schema": { "$ref": "#/definitions/PortfolioDto" }
          },
          "500": {
            "description": "Server Error",
            "schema": { "$ref": "#/definitions/ErrorResponse" }
          },
          "404": {
            "description": "A structured error response indicating missing portfolio",
            "schema": { "$ref": "#/definitions/ErrorResponse" }
          },
          "400": {
            "description": "Bad Request",
            "schema": { "$ref": "#/definitions/ErrorResponse" }
          }
        }
      }
    },
    "/v1/api/portfolios/search": {
      "post": {
        "tags": [ "Search Properties" ],
        "summary": "Search portfolios",
        "operationId": "PortfoliosSearch",
        "consumes": [ "application/json-patch+json", "application/json", "text/json", "application/*+json" ],
        "produces": [ "text/plain", "application/json", "text/json" ],
        "parameters": [
          {
            "name": "request",
            "in": "body",
            "required": false,
            "schema": { "type": "object" }
          },
          {
            "name": "sortBy",
            "in": "query",
            "required": false,
            "type": "array",
            "items": { "type": "string" },
            "collectionFormat": "multi"
          },
          {
            "name": "start",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "filter",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": { "$ref": "#/definitions/ResourceList[PortfolioSearchResult]" }
          },
          "500": {
            "description": "Server Error",
            "schema": { "$ref": "#/definitions/ErrorResponse" }
          },
          "400": {
            "description": "Bad Request",
            "schema": { "$ref": "#/definitions/ErrorResponse" }
          }
        }
      }
    },
    "/v1/api/properties/search": {
      "post": {
        "tags": [ "Search Properties" ],
        "summary": "Search properties",
        "operationId": "PropertiesSearch",
        "consumes": [ "application/json-patch+json", "application/json", "text/json", "application/*+json" ],
        "produces": [ "text/plain", "application/json", "text/json" ],
        "parameters": [
          {
            "name": "request",
            "in": "body",
            "required": false,
            "schema": { "type": "object" }
          },
          {
            "name": "sortBy",
            "in": "query",
            "required": false,
            "type": "array",
            "items": { "type": "string" },
            "collectionFormat": "multi"
          },
          {
            "name": "start",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "filter",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": { "$ref": "#/definitions/ResourceList[PropertyDefinitionDto]" }
          },
          "500": {
            "description": "Server Error",
            "schema": { "$ref": "#/definitions/ErrorResponse" }
          },
          "400": {
            "description": "Bad Request",
            "schema": { "$ref": "#/definitions/ErrorResponse" }
          }
        }
      }
    },
    "/v1/api/propertydefinitions": {
      "get": {
        "tags": [ "Properties" ],
        "summary": "Gets the available property-definition domains.",
        "operationId": "GetPropertyDefinitionDomains",
        "consumes": [],
        "produces": [ "text/plain", "application/json", "text/json" ],
        "parameters": [
          {
            "name": "sortBy",
            "in": "query",
            "required": false,
            "type": "array",
            "items": { "type": "string" },
            "collectionFormat": "multi"
          },
          {
            "name": "start",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": { "$ref": "#/definitions/ResourceList[PropertyDomain]" }
          },
          "500": {
            "description": "Server Error",
            "schema": { "$ref": "#/definitions/ErrorResponse" }
          },
          "400": {
            "description": "Bad Request",
            "schema": { "$ref": "#/definitions/ErrorResponse" }
          },
          "404": {
            "description": "Not Found",
            "schema": { "$ref": "#/definitions/ErrorResponse" }
          }
        }
      },
      "post": {
        "tags": [ "Properties" ],
        "summary": "Creates a new property definition.",
        "operationId": "CreatePropertyDefinition",
        "consumes": [ "application/json-patch+json", "application/json", "text/json", "application/*+json" ],
        "produces": [ "text/plain", "application/json", "text/json" ],
        "parameters": [
          {
            "name": "definition",
            "in": "body",
            "required": false,
            "schema": { "$ref": "#/definitions/CreatePropertyDefinitionRequest" }
          }
        ],
        "responses": {
          "201": {
            "description": "Success",
            "schema": { "$ref": "#/definitions/PropertyDefinitionDto" }
          },
          "500": {
            "description": "Server Error",
            "schema": { "$ref": "#/definitions/ErrorResponse" }
          },
          "400": {
            "description": "Bad Request",
            "schema": { "$ref": "#/definitions/ErrorResponse" }
          },
          "404": {
            "description": "Not Found",
            "schema": { "$ref": "#/definitions/ErrorResponse" }
          }
        }
      }
    },
    "/v1/api/propertydefinitions/_keys": {
      "get": {
        "tags": [ "Properties" ],
        "summary": "Gets multiple property definitions.",
        "operationId": "GetMultiplePropertyDefinitions",
        "consumes": [],
        "produces": [ "text/plain", "application/json", "text/json" ],
        "parameters": [
          {
            "name": "keys",
            "in": "query",
            "required": false,
            "type": "array",
            "items": { "type": "string" },
            "collectionFormat": "multi"
          },
          {
            "name": "asAt",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "sortBy",
            "in": "query",
            "required": false,
            "type": "array",
            "items": { "type": "string" },
            "collectionFormat": "multi"
          },
          {
            "name": "start",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "filter",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": { "$ref": "#/definitions/ResourceList[PropertyDefinitionDto]" }
          },
          "500": {
            "description": "Server Error",
            "schema": { "$ref": "#/definitions/ErrorResponse" }
          },
          "400": {
            "description": "Bad Request",
            "schema": { "$ref": "#/definitions/ErrorResponse" }
          },
          "404": {
            "description": "Not Found",
            "schema": { "$ref": "#/definitions/ErrorResponse" }
          }
        }
      }
    },
    "/v1/api/propertydefinitions/{domain}": {
      "get": {
        "tags": [ "Properties" ],
        "summary": "Gets all available property definitions.",
        "operationId": "GetAllPropertyKeysInDomain",
        "consumes": [],
        "produces": [ "text/plain", "application/json", "text/json" ],
        "parameters": [
          {
            "name": "domain",
            "in": "path",
            "required": true,
            "type": "string",
            "enum": [ "Trade", "Portfolio", "Security", "Holding", "ReferenceHolding", "TxnType" ]
          },
          {
            "name": "asAt",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "sortBy",
            "in": "query",
            "required": false,
            "type": "array",
            "items": { "type": "string" },
            "collectionFormat": "multi"
          },
          {
            "name": "start",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "filter",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": { "$ref": "#/definitions/ResourceList[PropertyKey]" }
          },
          "500": {
            "description": "Server Error",
            "schema": { "$ref": "#/definitions/ErrorResponse" }
          },
          "400": {
            "description": "Bad Request",
            "schema": { "$ref": "#/definitions/ErrorResponse" }
          },
          "404": {
            "description": "Not Found",
            "schema": { "$ref": "#/definitions/ErrorResponse" }
          }
        }
      }
    },
    "/v1/api/propertydefinitions/{domain}/_scopes": {
      "get": {
        "tags": [ "Properties" ],
        "summary": "Gets the available property-definition scopes for the specified domain.",
        "operationId": "GetPropertyDefinitionScopesInDomain",
        "consumes": [],
        "produces": [ "text/plain", "application/json", "text/json" ],
        "parameters": [
          {
            "name": "domain",
            "in": "path",
            "required": true,
            "type": "string",
            "enum": [ "Trade", "Portfolio", "Security", "Holding", "ReferenceHolding", "TxnType" ]
          },
          {
            "name": "sortBy",
            "in": "query",
            "required": false,
            "type": "array",
            "items": { "type": "string" },
            "collectionFormat": "multi"
          },
          {
            "name": "start",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "filter",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": { "$ref": "#/definitions/ResourceList[Scope]" }
          },
          "500": {
            "description": "Server Error",
            "schema": { "$ref": "#/definitions/ErrorResponse" }
          },
          "400": {
            "description": "Bad Request",
            "schema": { "$ref": "#/definitions/ErrorResponse" }
          },
          "404": {
            "description": "Not Found",
            "schema": { "$ref": "#/definitions/ErrorResponse" }
          }
        }
      }
    },
    "/v1/api/propertydefinitions/{domain}/{scope}": {
      "get": {
        "tags": [ "Properties" ],
        "summary": "Gets all properties in a scope.",
        "operationId": "GetAllPropertyKeysInScope",
        "consumes": [],
        "produces": [ "text/plain", "application/json", "text/json" ],
        "parameters": [
          {
            "name": "domain",
            "in": "path",
            "required": true,
            "type": "string",
            "enum": [ "Trade", "Portfolio", "Security", "Holding", "ReferenceHolding", "TxnType" ]
          },
          {
            "name": "scope",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "asAt",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "sortBy",
            "in": "query",
            "required": false,
            "type": "array",
            "items": { "type": "string" },
            "collectionFormat": "multi"
          },
          {
            "name": "start",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "filter",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": { "$ref": "#/definitions/ResourceList[PropertyKey]" }
          },
          "500": {
            "description": "Server Error",
            "schema": { "$ref": "#/definitions/ErrorResponse" }
          },
          "400": {
            "description": "Bad Request",
            "schema": { "$ref": "#/definitions/ErrorResponse" }
          },
          "404": {
            "description": "Not Found",
            "schema": { "$ref": "#/definitions/ErrorResponse" }
          }
        }
      }
    },
    "/v1/api/propertydefinitions/{domain}/{scope}/{name}": {
      "get": {
        "tags": [ "Properties" ],
        "summary": "Gets a property definition.",
        "operationId": "GetPropertyDefinition",
        "consumes": [],
        "produces": [ "text/plain", "application/json", "text/json" ],
        "parameters": [
          {
            "name": "domain",
            "in": "path",
            "required": true,
            "type": "string",
            "enum": [ "Trade", "Portfolio", "Security", "Holding", "ReferenceHolding", "TxnType" ]
          },
          {
            "name": "scope",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "name",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "asAt",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": { "$ref": "#/definitions/PropertyDefinitionDto" }
          },
          "500": {
            "description": "Server Error",
            "schema": { "$ref": "#/definitions/ErrorResponse" }
          },
          "400": {
            "description": "Bad Request",
            "schema": { "$ref": "#/definitions/ErrorResponse" }
          },
          "404": {
            "description": "Not Found",
            "schema": { "$ref": "#/definitions/ErrorResponse" }
          }
        }
      },
      "put": {
        "tags": [ "Properties" ],
        "summary": "Updates the specified property definition.",
        "operationId": "UpdatePropertyDefinition",
        "consumes": [ "application/json-patch+json", "application/json", "text/json", "application/*+json" ],
        "produces": [ "text/plain", "application/json", "text/json" ],
        "parameters": [
          {
            "name": "domain",
            "in": "path",
            "required": true,
            "type": "string",
            "enum": [ "Trade", "Portfolio", "Security", "Holding", "ReferenceHolding", "TxnType" ]
          },
          {
            "name": "scope",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "name",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "definition",
            "in": "body",
            "required": false,
            "schema": { "$ref": "#/definitions/UpdatePropertyDefinitionRequest" }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": { "$ref": "#/definitions/PropertyDefinitionDto" }
          },
          "500": {
            "description": "Server Error",
            "schema": { "$ref": "#/definitions/ErrorResponse" }
          },
          "400": {
            "description": "Bad Request",
            "schema": { "$ref": "#/definitions/ErrorResponse" }
          },
          "404": {
            "description": "Not Found",
            "schema": { "$ref": "#/definitions/ErrorResponse" }
          }
        }
      },
      "delete": {
        "tags": [ "Properties" ],
        "summary": "Deletes the property definition.",
        "operationId": "DeletePropertyDefinition",
        "consumes": [],
        "produces": [ "text/plain", "application/json", "text/json" ],
        "parameters": [
          {
            "name": "domain",
            "in": "path",
            "required": true,
            "type": "string",
            "enum": [ "Trade", "Portfolio", "Security", "Holding", "ReferenceHolding", "TxnType" ]
          },
          {
            "name": "scope",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "name",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": { "$ref": "#/definitions/DeletedEntityResponse" }
          },
          "500": {
            "description": "Server Error",
            "schema": { "$ref": "#/definitions/ErrorResponse" }
          },
          "404": {
            "description": "Not Found",
            "schema": { "$ref": "#/definitions/ErrorResponse" }
          },
          "400": {
            "description": "Bad Request",
            "schema": { "$ref": "#/definitions/ErrorResponse" }
          }
        }
      }
    },
    "/v1/api/propertyformats": {
      "post": {
        "tags": [ "Property Data Formats" ],
        "summary": "Create a new PropertyDataFormat. Note: Only non-default formats can be created.",
        "operationId": "CreatePropertyDataFormat",
        "consumes": [ "application/json-patch+json", "application/json", "text/json", "application/*+json" ],
        "produces": [ "text/plain", "application/json", "text/json" ],
        "parameters": [
          {
            "name": "request",
            "in": "body",
            "description": "The definition of the new format",
            "required": false,
            "schema": { "$ref": "#/definitions/CreatePropertyDataFormatRequest" }
          }
        ],
        "responses": {
          "201": {
            "description": "Success",
            "schema": { "$ref": "#/definitions/PropertyDataFormatDto" }
          },
          "500": {
            "description": "Server Error",
            "schema": { "$ref": "#/definitions/ErrorResponse" }
          },
          "400": {
            "description": "Bad Request",
            "schema": { "$ref": "#/definitions/ErrorResponse" }
          },
          "404": {
            "description": "Not Found",
            "schema": { "$ref": "#/definitions/ErrorResponse" }
          }
        }
      }
    },
    "/v1/api/propertyformats/{scope}": {
      "get": {
        "tags": [ "Property Data Formats" ],
        "summary": "Lists all property data formats in the specified scope.",
        "operationId": "ListPropertyDataFormats",
        "consumes": [],
        "produces": [ "text/plain", "application/json", "text/json" ],
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "includeDefault",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "includeSystem",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "sortBy",
            "in": "query",
            "required": false,
            "type": "array",
            "items": { "type": "string" },
            "collectionFormat": "multi"
          },
          {
            "name": "start",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "filter",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": { "$ref": "#/definitions/ResourceList[PropertyDataFormatDto]" }
          },
          "500": {
            "description": "Server Error",
            "schema": { "$ref": "#/definitions/ErrorResponse" }
          },
          "400": {
            "description": "Bad Request",
            "schema": { "$ref": "#/definitions/ErrorResponse" }
          },
          "404": {
            "description": "Not Found",
            "schema": { "$ref": "#/definitions/ErrorResponse" }
          }
        }
      }
    },
    "/v1/api/propertyformats/{scope}/{name}": {
      "get": {
        "tags": [ "Property Data Formats" ],
        "summary": "Gets a property data format.",
        "operationId": "GetPropertyDataFormat",
        "consumes": [],
        "produces": [ "text/plain", "application/json", "text/json" ],
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "name",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": { "$ref": "#/definitions/PropertyDataFormatDto" }
          },
          "400": {
            "description": "Bad Request",
            "schema": { "$ref": "#/definitions/ErrorResponse" }
          },
          "500": {
            "description": "Server Error",
            "schema": { "$ref": "#/definitions/ErrorResponse" }
          },
          "404": {
            "description": "Not Found",
            "schema": { "$ref": "#/definitions/ErrorResponse" }
          }
        }
      },
      "put": {
        "tags": [ "Property Data Formats" ],
        "summary": "Update a PropertyDataFormat. Note: Only non-default formats can be updated.",
        "operationId": "UpdatePropertyDataFormat",
        "consumes": [ "application/json-patch+json", "application/json", "text/json", "application/*+json" ],
        "produces": [ "text/plain", "application/json", "text/json" ],
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the format being updated",
            "required": true,
            "type": "string"
          },
          {
            "name": "name",
            "in": "path",
            "description": "The name of the format to update",
            "required": true,
            "type": "string"
          },
          {
            "name": "request",
            "in": "body",
            "description": "The new definition of the format",
            "required": false,
            "schema": { "$ref": "#/definitions/UpdatePropertyDataFormatRequest" }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": { "$ref": "#/definitions/PropertyDataFormatDto" }
          },
          "500": {
            "description": "Server Error",
            "schema": { "$ref": "#/definitions/ErrorResponse" }
          },
          "400": {
            "description": "Bad Request",
            "schema": { "$ref": "#/definitions/ErrorResponse" }
          },
          "404": {
            "description": "Not Found",
            "schema": { "$ref": "#/definitions/ErrorResponse" }
          }
        }
      }
    },
    "/v1/api/recon": {
      "post": {
        "tags": [ "Reconciliations" ],
        "summary": "Perform a reconciliation between two portfolios",
        "operationId": "PerformReconciliation",
        "consumes": [ "application/json-patch+json", "application/json", "text/json", "application/*+json" ],
        "produces": [ "text/plain", "application/json", "text/json" ],
        "parameters": [
          {
            "name": "request",
            "in": "body",
            "required": false,
            "schema": { "$ref": "#/definitions/ReconciliationRequest" }
          }
        ],
        "responses": {
          "200": {
            "description": "The requested reconciliation",
            "schema": { "$ref": "#/definitions/ResourceList[ReconciliationBreakDto]" }
          },
          "500": {
            "description": "Server Error",
            "schema": { "$ref": "#/definitions/ErrorResponse" }
          },
          "404": {
            "description": "A structured error response indicating missing portfolio",
            "schema": { "$ref": "#/definitions/ErrorResponse" }
          },
          "400": {
            "description": "Bad Request",
            "schema": { "$ref": "#/definitions/ErrorResponse" }
          }
        }
      }
    },
    "/v1/api/reference/{scope}": {
      "get": {
        "tags": [ "Reference Portfolio" ],
        "summary": "Get all reference portfolios in a scope",
        "operationId": "ListReferencePortfolios",
        "consumes": [],
        "produces": [ "text/plain", "application/json", "text/json" ],
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "effectiveAt",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "asAt",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "sortBy",
            "in": "query",
            "required": false,
            "type": "array",
            "items": { "type": "string" },
            "collectionFormat": "multi"
          },
          {
            "name": "start",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "filter",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested list of reference portfolios",
            "schema": { "$ref": "#/definitions/ResourceList[PortfolioDto]" }
          },
          "500": {
            "description": "A structured error response",
            "schema": { "$ref": "#/definitions/ErrorResponse" }
          },
          "404": {
            "description": "A structured error response indicating missing reference portfolio",
            "schema": { "$ref": "#/definitions/ErrorResponse" }
          },
          "400": {
            "description": "Bad Request",
            "schema": { "$ref": "#/definitions/ErrorResponse" }
          }
        }
      },
      "post": {
        "tags": [ "Reference Portfolio" ],
        "summary": "Create a new reference portfolio",
        "operationId": "CreateReferencePortfolio",
        "consumes": [ "application/json-patch+json", "application/json", "text/json", "application/*+json" ],
        "produces": [ "text/plain", "application/json", "text/json" ],
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The intended scope of the portfolio",
            "required": true,
            "type": "string"
          },
          {
            "name": "referencePortfolio",
            "in": "body",
            "description": "The portfolio creation request object",
            "required": false,
            "schema": { "$ref": "#/definitions/CreatePortfolioRequest" }
          }
        ],
        "responses": {
          "201": {
            "description": "The created reference portfolio, with populated id",
            "schema": { "$ref": "#/definitions/PortfolioDto" }
          },
          "500": {
            "description": "A structured error response",
            "schema": { "$ref": "#/definitions/ErrorResponse" }
          },
          "400": {
            "description": "Bad Request",
            "schema": { "$ref": "#/definitions/ErrorResponse" }
          },
          "404": {
            "description": "Not Found",
            "schema": { "$ref": "#/definitions/ErrorResponse" }
          }
        }
      }
    },
    "/v1/api/reference/{scope}/{code}": {
      "get": {
        "tags": [ "Reference Portfolio" ],
        "summary": "Get a reference portfolio by name (as opposed to id)",
        "operationId": "GetReferencePortfolio",
        "consumes": [],
        "produces": [ "text/plain", "application/json", "text/json" ],
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "code",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "effectiveAt",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "asAt",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested reference portfolio ",
            "schema": { "$ref": "#/definitions/ResourceList[ReferencePortfolioConstituentDto]" }
          },
          "500": {
            "description": "A structured error response",
            "schema": { "$ref": "#/definitions/ErrorResponse" }
          },
          "404": {
            "description": "A structured error response indicating missing reference portfolio",
            "schema": { "$ref": "#/definitions/ErrorResponse" }
          },
          "400": {
            "description": "Bad Request",
            "schema": { "$ref": "#/definitions/ErrorResponse" }
          }
        }
      },
      "delete": {
        "tags": [ "Reference Portfolio" ],
        "summary": "Delete a specific portfolio",
        "operationId": "DeleteReferencePortfolio",
        "consumes": [],
        "produces": [ "text/plain", "application/json", "text/json" ],
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "",
            "required": true,
            "type": "string"
          },
          {
            "name": "code",
            "in": "path",
            "description": "",
            "required": true,
            "type": "string"
          },
          {
            "name": "effectiveAt",
            "in": "query",
            "description": "",
            "required": false,
            "type": "string",
            "format": "date-time"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": { "$ref": "#/definitions/DeletedEntityResponse" }
          },
          "500": {
            "description": "Server Error",
            "schema": { "$ref": "#/definitions/ErrorResponse" }
          },
          "404": {
            "description": "Not Found",
            "schema": { "$ref": "#/definitions/ErrorResponse" }
          },
          "400": {
            "description": "Bad Request",
            "schema": { "$ref": "#/definitions/ErrorResponse" }
          }
        }
      }
    },
    "/v1/api/reference/{scope}/{code}/{effectiveAt}/constituents": {
      "get": {
        "tags": [ "Reference Portfolio" ],
        "summary": "Get all the constituents in a reference portfolio",
        "operationId": "GetReferencePortfolioConstituents",
        "consumes": [],
        "produces": [ "text/plain", "application/json", "text/json" ],
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "referencePortfolioId",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "effectiveAt",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "asAt",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "sortBy",
            "in": "query",
            "required": false,
            "type": "array",
            "items": { "type": "string" },
            "collectionFormat": "multi"
          },
          {
            "name": "start",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "code",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested reference portfolio constituents",
            "schema": { "$ref": "#/definitions/ResourceList[ReferencePortfolioConstituentDto]" }
          },
          "500": {
            "description": "A structured error response",
            "schema": { "$ref": "#/definitions/ErrorResponse" }
          },
          "404": {
            "description": "A structured error response indicating missing reference portfolio",
            "schema": { "$ref": "#/definitions/ErrorResponse" }
          },
          "400": {
            "description": "Bad Request",
            "schema": { "$ref": "#/definitions/ErrorResponse" }
          }
        }
      },
      "post": {
        "tags": [ "Reference Portfolio" ],
        "summary": "Add constituents to a specific reference portfolio",
        "operationId": "UpsertReferencePortfolioConstituents",
        "consumes": [ "application/json-patch+json", "application/json", "text/json", "application/*+json" ],
        "produces": [ "text/plain", "application/json", "text/json" ],
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "code",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "effectiveAt",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "constituents",
            "in": "body",
            "required": false,
            "schema": {
              "type": "array",
              "items": { "$ref": "#/definitions/ReferencePortfolioConstituentDto" }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Success",
            "schema": { "$ref": "#/definitions/UpsertReferencePortfolioConstituentsDto" }
          },
          "500": {
            "description": "Server Error",
            "schema": { "$ref": "#/definitions/ErrorResponse" }
          },
          "400": {
            "description": "Bad Request",
            "schema": { "$ref": "#/definitions/ErrorResponse" }
          },
          "404": {
            "description": "Not Found",
            "schema": { "$ref": "#/definitions/ErrorResponse" }
          }
        }
      }
    },
    "/v1/api/results/{scope}/{key}/{date}": {
      "get": {
        "tags": [ "Results" ],
        "summary": "Retrieve some previously stored results",
        "operationId": "GetResults",
        "consumes": [],
        "produces": [ "text/plain", "application/json", "text/json" ],
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the data",
            "required": true,
            "type": "string"
          },
          {
            "name": "key",
            "in": "path",
            "description": "The key that identifies the data",
            "required": true,
            "type": "string"
          },
          {
            "name": "date",
            "in": "path",
            "description": "The date for which the data was loaded",
            "required": true,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "asAt",
            "in": "query",
            "description": "",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "",
            "required": false,
            "type": "array",
            "items": { "type": "string" },
            "collectionFormat": "multi"
          },
          {
            "name": "start",
            "in": "query",
            "description": "",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested set of results",
            "schema": { "$ref": "#/definitions/ResultsDto" }
          },
          "500": {
            "description": "A structured error response",
            "schema": { "$ref": "#/definitions/ErrorResponse" }
          },
          "400": {
            "description": "Bad Request",
            "schema": { "$ref": "#/definitions/ErrorResponse" }
          },
          "404": {
            "description": "Not Found",
            "schema": { "$ref": "#/definitions/ErrorResponse" }
          }
        }
      },
      "post": {
        "tags": [ "Results" ],
        "summary": "Upsert precalculated results against a specified scope/key/date combination",
        "operationId": "UpsertResults",
        "consumes": [ "application/json-patch+json", "application/json", "text/json", "application/*+json" ],
        "produces": [ "text/plain", "application/json", "text/json" ],
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the data",
            "required": true,
            "type": "string"
          },
          {
            "name": "key",
            "in": "path",
            "description": "The key that identifies the data",
            "required": true,
            "type": "string"
          },
          {
            "name": "date",
            "in": "path",
            "description": "The date for which the data is relevant",
            "required": true,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "request",
            "in": "body",
            "description": "The results to upload",
            "required": false,
            "schema": { "$ref": "#/definitions/CreateResultsRequest" }
          }
        ],
        "responses": {
          "200": {
            "description": "The results set uploaded",
            "schema": { "$ref": "#/definitions/ResultsDto" }
          },
          "500": {
            "description": "A structured error response",
            "schema": { "$ref": "#/definitions/ErrorResponse" }
          },
          "400": {
            "description": "Bad Request",
            "schema": { "$ref": "#/definitions/ErrorResponse" }
          },
          "404": {
            "description": "Not Found",
            "schema": { "$ref": "#/definitions/ErrorResponse" }
          }
        }
      }
    },
    "/v1/api/schema/entities/{entity}": {
      "get": {
        "tags": [ "Schema" ],
        "operationId": "GetEntitySchema",
        "consumes": [],
        "produces": [ "text/plain", "application/json", "text/json" ],
        "parameters": [
          {
            "name": "entity",
            "in": "path",
            "required": true,
            "type": "string",
            "enum": [ "PropertyKey", "FieldSchema", "Personalisation", "Security", "Property", "Login", "PropertyDefinition", "PropertyDataFormat", "AggregationResponseNode", "Portfolio", "CompletePortfolio", "PortfolioSearchResult", "PortfolioDetails", "PortfolioProperties", "Version", "AddTradeProperty", "AnalyticStore", "AnalyticStoreKey", "UpsertPortfolioTrades", "Group", "Constituent", "Trade", "PortfolioHolding", "AdjustHolding", "ErrorDetail", "ErrorResponse", "InstrumentDefinition", "ProcessedCommand", "CreatePortfolio", "CreateAnalyticStore", "CreateClientSecurity", "CreateDerivedPortfolio", "CreateGroup", "CreatePropertyDataFormat", "CreatePropertyDefinition", "UpdatePortfolio", "UpdateGroup", "UpdatePropertyDataFormat", "UpdatePropertyDefinition", "SecurityAnalytic", "AggregationRequest", "Aggregation", "NestedAggregation", "ResultDataSchema", "Classification", "SecurityClassification", "WebLogMessage", "UpsertPersonalisation", "CreatePortfolioDetails", "UpsertConstituent", "CreateResults", "Results", "TryAddClientSecurities", "TryDeleteClientSecurities", "TryLookupSecuritiesFromCodes", "ExpandedGroup", "CreateCorporateAction", "CorporateAction", "CorporateActionTransition", "ReconciliationRequest", "ReconciliationBreak", "TransactionConfigurationData", "TransactionConfigurationMovementData", "TransactionConfigurationTypeAlias" ]
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": { "$ref": "#/definitions/SchemaDto" }
          },
          "404": {
            "description": "Not Found",
            "schema": { "$ref": "#/definitions/ErrorResponse" }
          },
          "400": {
            "description": "Bad Request",
            "schema": { "$ref": "#/definitions/ErrorResponse" }
          },
          "500": {
            "description": "Server Error",
            "schema": { "$ref": "#/definitions/ErrorResponse" }
          }
        }
      }
    },
    "/v1/api/schema/properties": {
      "get": {
        "tags": [ "Schema" ],
        "summary": "Get the schemas for the provided list of property keys",
        "operationId": "GetPropertySchema",
        "consumes": [],
        "produces": [ "text/plain", "application/json", "text/json" ],
        "parameters": [
          {
            "name": "propertyKeys",
            "in": "query",
            "description": "A comma delimited list of property keys in string format. e.g. \"Portfolio/default/PropertyName,Portfolio/differentScope/MyProperty\"",
            "required": false,
            "type": "array",
            "items": { "type": "string" },
            "collectionFormat": "multi"
          },
          {
            "name": "asAt",
            "in": "query",
            "description": "",
            "required": false,
            "type": "string",
            "format": "date-time"
          }
        ],
        "responses": {
          "500": {
            "description": "Server Error",
            "schema": { "$ref": "#/definitions/ErrorResponse" }
          },
          "200": {
            "description": "Success",
            "schema": { "$ref": "#/definitions/PropertySchemaDto" }
          },
          "404": {
            "description": "Not Found",
            "schema": { "$ref": "#/definitions/ErrorResponse" }
          },
          "400": {
            "description": "Bad Request",
            "schema": { "$ref": "#/definitions/ErrorResponse" }
          }
        }
      }
    },
    "/v1/api/schema/types": {
      "get": {
        "tags": [ "Schema" ],
        "summary": "Gets the available value types that could be returned in a schema",
        "operationId": "GetValueTypes",
        "consumes": [],
        "produces": [ "text/plain", "application/json", "text/json" ],
        "parameters": [
          {
            "name": "sortBy",
            "in": "query",
            "required": false,
            "type": "array",
            "items": { "type": "string" },
            "collectionFormat": "multi"
          },
          {
            "name": "start",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": { "$ref": "#/definitions/ResourceList[UiDataType]" }
          },
          "500": {
            "description": "Server Error",
            "schema": { "$ref": "#/definitions/ErrorResponse" }
          },
          "400": {
            "description": "Bad Request",
            "schema": { "$ref": "#/definitions/ErrorResponse" }
          },
          "404": {
            "description": "Not Found",
            "schema": { "$ref": "#/definitions/ErrorResponse" }
          }
        }
      }
    },
    "/v1/api/securities": {
      "post": {
        "tags": [ "Securities" ],
        "summary": "Attempt to create one or more client securities. Failed securities will be identified in the body of the response.",
        "operationId": "BatchAddClientSecurities",
        "consumes": [ "application/json-patch+json", "application/json", "text/json", "application/*+json" ],
        "produces": [ "text/plain", "application/json", "text/json" ],
        "parameters": [
          {
            "name": "definitions",
            "in": "body",
            "description": "",
            "required": false,
            "schema": {
              "type": "array",
              "items": { "$ref": "#/definitions/CreateClientSecurityRequest" }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Success",
            "schema": { "$ref": "#/definitions/TryAddClientSecuritiesDto" }
          },
          "500": {
            "description": "Server Error",
            "schema": { "$ref": "#/definitions/ErrorResponse" }
          },
          "400": {
            "description": "Bad Request",
            "schema": { "$ref": "#/definitions/ErrorResponse" }
          }
        }
      },
      "delete": {
        "tags": [ "Securities" ],
        "summary": "Attempt to delete one or more client securities. Failed securities will be identified in the body of the response.",
        "operationId": "BatchDeleteClientSecurities",
        "consumes": [],
        "produces": [ "text/plain", "application/json", "text/json" ],
        "parameters": [
          {
            "name": "uids",
            "in": "query",
            "required": false,
            "type": "array",
            "items": { "type": "string" },
            "collectionFormat": "multi"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": { "$ref": "#/definitions/TryDeleteClientSecuritiesDto" }
          },
          "500": {
            "description": "Server Error",
            "schema": { "$ref": "#/definitions/ErrorResponse" }
          }
        }
      }
    },
    "/v1/api/securities/{uid}": {
      "get": {
        "tags": [ "Securities" ],
        "summary": "Get an individual security by the unique security uid.  Optionally, decorate each security with specific properties.",
        "operationId": "GetSecurity",
        "consumes": [],
        "produces": [ "text/plain", "application/json", "text/json" ],
        "parameters": [
          {
            "name": "uid",
            "in": "path",
            "description": "The uid of the requested security",
            "required": true,
            "type": "string"
          },
          {
            "name": "asAt",
            "in": "query",
            "description": "As at date",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "propertyKeys",
            "in": "query",
            "description": "Keys of the properties to be retrieved",
            "required": false,
            "type": "array",
            "items": { "type": "string" },
            "collectionFormat": "multi"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": { "$ref": "#/definitions/SecurityDto" }
          },
          "500": {
            "description": "Server Error",
            "schema": { "$ref": "#/definitions/ErrorResponse" }
          },
          "400": {
            "description": "Bad Request",
            "schema": { "$ref": "#/definitions/ErrorResponse" }
          }
        }
      }
    },
    "/v1/api/securities/lookup/{codeType}": {
      "get": {
        "tags": [ "Securities" ],
        "summary": "Lookup more than one security by supplying a collection of non-Finbourne codes.  Optionally, decorate each security with specific properties.",
        "operationId": "LookupSecuritiesFromCodes",
        "consumes": [],
        "produces": [ "text/plain", "application/json", "text/json" ],
        "parameters": [
          {
            "name": "codeType",
            "in": "path",
            "description": "The type of identifier",
            "required": true,
            "type": "string",
            "enum": [ "Undefined", "ReutersAssetId", "CINS", "Isin", "Sedol", "Cusip", "ClientInternal", "Figi", "Wertpapier" ]
          },
          {
            "name": "codes",
            "in": "query",
            "description": "An array of codes",
            "required": false,
            "type": "array",
            "items": { "type": "string" },
            "collectionFormat": "multi"
          },
          {
            "name": "asAt",
            "in": "query",
            "description": "As at date",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "propertyKeys",
            "in": "query",
            "description": "Keys of the properties to be retrieved",
            "required": false,
            "type": "array",
            "items": { "type": "string" },
            "collectionFormat": "multi"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": { "$ref": "#/definitions/TryLookupSecuritiesFromCodesDto" }
          },
          "500": {
            "description": "Server Error",
            "schema": { "$ref": "#/definitions/ErrorResponse" }
          },
          "400": {
            "description": "Bad Request",
            "schema": { "$ref": "#/definitions/ErrorResponse" }
          }
        }
      },
      "post": {
        "tags": [ "Securities" ],
        "summary": "Lookup a large number of securities by supplying a collection of non-Finbourne codes.  Optionally, decorate each security with specific properties.",
        "operationId": "LookupSecuritiesFromCodesBulk",
        "consumes": [ "application/json-patch+json", "application/json", "text/json", "application/*+json" ],
        "produces": [ "text/plain", "application/json", "text/json" ],
        "parameters": [
          {
            "name": "codeType",
            "in": "path",
            "description": "The type of identifier",
            "required": true,
            "type": "string",
            "enum": [ "Undefined", "ReutersAssetId", "CINS", "Isin", "Sedol", "Cusip", "ClientInternal", "Figi", "Wertpapier" ]
          },
          {
            "name": "codes",
            "in": "body",
            "description": "An array of codes",
            "required": false,
            "schema": {
              "type": "array",
              "items": { "type": "string" }
            }
          },
          {
            "name": "asAt",
            "in": "query",
            "description": "As at date",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "propertyKeys",
            "in": "query",
            "description": "Keys of the properties to be retrieved",
            "required": false,
            "type": "array",
            "items": { "type": "string" },
            "collectionFormat": "multi"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": { "$ref": "#/definitions/TryLookupSecuritiesFromCodesDto" }
          },
          "500": {
            "description": "Server Error",
            "schema": { "$ref": "#/definitions/ErrorResponse" }
          },
          "400": {
            "description": "Bad Request",
            "schema": { "$ref": "#/definitions/ErrorResponse" }
          }
        }
      }
    }
  },
  "definitions": {
    "ClearEntityCachesDto": {
      "type": "object",
      "properties": {
        "numberOfItemsCleared": {
          "format": "int64",
          "description": "The total number of items cleared from all instances of the caches on this machine instance",
          "type": "integer"
        }
      }
    },
    "ErrorResponse": {
      "type": "object",
      "properties": {
        "status": {
          "format": "int32",
          "description": "The status code that will be returned to the client",
          "type": "integer",
          "readOnly": true
        },
        "code": {
          "description": "The Finbourne specific error-code that encapsulates the specific issue encountered.",
          "enum": [ "Unknown", "PersonalisationNotFound", "NonRecursivePersonalisation", "VersionNotFound", "SecurityNotFound", "PropertyNotFound", "PortfolioRecursionDepth", "GroupNotFound", "PortfolioNotFound", "PropertySchemaNotFound", "PortfolioWithIdAlreadyExists", "OrphanedPortfolio", "MissingBaseClaims", "PropertyNotDefined", "CannotDeleteSystemProperty", "CannotModifyImmutablePropertyField", "PropertyAlreadyExists", "InvalidPropertyLifeTime", "CannotModifyDefaultPropertyFormat", "GroupAlreadyExists", "NoSuchPropertyDataFormat", "ValidationError", "LoopDetectedInGroupHierarchy", "SubGroupAlreadyExists", "PriceSourceNotFound", "AnalyticStoreNotFound", "AnalyticStoreAlreadyExists", "ClientSecurityAlreadyExists", "DuplicateInParameterSet", "ResultsNotFound", "OrderFieldNotInResultSet", "OperationFailed", "ElasticSearchError", "InvalidParameterValue", "ServerConfigurationError", "CommandProcessingFailure", "EntityStateConstructionFailure", "EntityTimelineDoesNotExist", "EventPublishFailure", "InvalidRequestFailure", "EventPublishUnknown", "EventQueryFailure", "BlobDidNotExistFailure", "SubSystemRequestFailure", "SubSystemConfigurationFailure", "FailedToDelete", "UpsertClientSecurityFailure", "IllegalAsAtInterval", "IllegalBitemporalQuery", "InvalidAlternateId", "CannotAddSourcePortfolioPropertyExplicitly", "EntityAlreadyExistsInGroup", "EntityWithIdAlreadyExists", "PortfolioDetailsDoNotExist", "PortfolioWithNameAlreadyExists", "InvalidTrades", "ReferencePortfolioNotFound", "DuplicateIdFailure", "SecurityByCodeNotFound", "CommandRetrievalFailure", "DataFilterApplicationFailure", "SearchFailed", "MovementsEngineConfigurationKeyFailure", "FxRateSourceNotFound", "AccrualSourceNotFound" ],
          "type": "string",
          "readOnly": true
        },
        "message": {
          "description": "The non-technical-user friendly message describing the error and how it might be remedied.",
          "type": "string",
          "readOnly": true
        },
        "detailedMessage": {
          "description": "A technical error message that contains the details of the issue and how it might be fixed.",
          "type": "string",
          "readOnly": true
        },
        "items": {
          "description": "Any action specific item specific sub errors (e.g. per-trade validation errors)",
          "type": "array",
          "items": { "$ref": "#/definitions/ErrorDetail" }
        },
        "moreInfo": {
          "description": "A link to the endpoint that can provide the dev with more information about that class of error.",
          "type": "string",
          "readOnly": true
        }
      }
    },
    "ErrorDetail": {
      "type": "object",
      "properties": {
        "id": { "type": "string" },
        "type": { "type": "string" },
        "detail": { "type": "string" }
      }
    },
    "UpsertCorporateActionRequest": {
      "required": [ "corporateActionId", "transitions" ],
      "type": "object",
      "properties": {
        "corporateActionId": {
          "description": "",
          "type": "string"
        },
        "announcementDate": {
          "format": "date-time",
          "description": "",
          "type": "string"
        },
        "exDate": {
          "format": "date-time",
          "description": "",
          "type": "string"
        },
        "recordDate": {
          "format": "date-time",
          "description": "",
          "type": "string"
        },
        "transitions": {
          "type": "array",
          "items": { "$ref": "#/definitions/CorporateActionTransitionDto" }
        }
      },
      "example": {
        "corporateActionId": "MyStockSplitId",
        "announcementDate": "2018-03-01T00:00:00Z",
        "exDate": "2018-06-01T00:00:00Z",
        "recordDate": "2018-06-02T00:00:00Z",
        "transitions": [
          {
            "direction": "In",
            "securityUid": "FIGI_BBG001S6PJ31",
            "unitsFactor": 1.0,
            "costFactor": 1.0
          },
          {
            "direction": "Out",
            "securityUid": "FIGI_BBG001S6PJ31",
            "unitsFactor": 2.0,
            "costFactor": 0.0
          }
        ]
      }
    },
    "CorporateActionTransitionDto": {
      "description": "A 'transition' within a corporate action, representing a single incoming or outgoing component",
      "type": "object",
      "properties": {
        "direction": {
          "description": "",
          "enum": [ "In", "Out" ],
          "type": "string"
        },
        "securityUid": {
          "description": "",
          "type": "string"
        },
        "unitsFactor": {
          "format": "double",
          "description": "",
          "type": "number"
        },
        "costFactor": {
          "format": "double",
          "description": "",
          "type": "number"
        }
      }
    },
    "CorporateActionEventDto": {
      "description": "A corporate action",
      "required": [ "sourceId", "corporateActionId" ],
      "type": "object",
      "properties": {
        "sourceId": {
          "$ref": "#/definitions/ResourceId",
          "description": ""
        },
        "corporateActionId": {
          "description": "",
          "type": "string"
        },
        "announcementDate": {
          "format": "date-time",
          "description": "",
          "type": "string"
        },
        "exDate": {
          "format": "date-time",
          "description": "",
          "type": "string"
        },
        "recordDate": {
          "format": "date-time",
          "description": "",
          "type": "string"
        },
        "transitions": {
          "type": "array",
          "items": { "$ref": "#/definitions/CorporateActionTransitionDto" }
        }
      }
    },
    "ResourceId": {
      "type": "object",
      "properties": {
        "scope": { "type": "string" },
        "code": { "type": "string" }
      },
      "example": {
        "scope": "MyScope",
        "code": "MyCode"
      }
    },
    "AggregationRequest": {
      "description": "Specification object for the parameters of an aggregation",
      "type": "object",
      "properties": {
        "recipeScope": { "type": "string" },
        "recipeKey": { "type": "string" },
        "loadReferencePortfolio": { "type": "boolean" },
        "asAt": {
          "format": "date-time",
          "description": "The asAt date to use",
          "type": "string"
        },
        "effectiveAt": {
          "format": "date-time",
          "type": "string"
        },
        "metrics": {
          "type": "array",
          "items": { "$ref": "#/definitions/AggregateSpec" }
        },
        "groupBy": {
          "type": "array",
          "items": { "type": "string" }
        },
        "filters": {
          "type": "array",
          "items": { "$ref": "#/definitions/PropertyFilter" }
        },
        "limit": {
          "format": "int32",
          "type": "integer"
        },
        "sort": { "type": "string" }
      },
      "example": {
        "recipeScope": "MyScope",
        "recipeKey": "MyRecipieKey",
        "loadReferencePortfolio": false,
        "asAt": "2018-06-12T10:59:56.6935506Z",
        "effectiveAt": "2018-06-12T10:59:56.6935503Z",
        "metrics": [
          {
            "key": "Holding/MyScope/PV",
            "op": "Proportion"
          },
          {
            "key": "Holding/MyScope/PV",
            "op": "Sum"
          }
        ],
        "groupBy": [ "Security/MyScope/CommonName" ]
      }
    },
    "AggregateSpec": {
      "type": "object",
      "properties": {
        "key": { "type": "string" },
        "op": {
          "enum": [ "Sum", "Proportion" ],
          "type": "string"
        }
      }
    },
    "PropertyFilter": {
      "type": "object",
      "properties": {
        "left": { "type": "string" },
        "operator": {
          "enum": [ "Equals", "NotEquals", "GreaterThan", "GreaterThanOrEqualTo", "LessThan", "LessThanOrEqualTo", "In" ],
          "type": "string"
        },
        "right": { "type": "object" },
        "rightOperandType": {
          "enum": [ "Absolute", "Property" ],
          "type": "string"
        }
      }
    },
    "ListAggregationResponse": {
      "type": "object",
      "properties": {
        "href": { "type": "string" },
        "data": {
          "type": "array",
          "items": {
            "type": "object",
            "additionalProperties": { "type": "object" }
          }
        },
        "aggregationCurrency": { "type": "string" },
        "dataSchema": { "$ref": "#/definitions/ResultDataSchema" }
      }
    },
    "ResultDataSchema": {
      "type": "object",
      "properties": {
        "nodeValueSchema": {
          "type": "array",
          "items": { "$ref": "#/definitions/KeyValuePair[PropertyKey,FieldSchema]" }
        },
        "propertySchema": {
          "type": "object",
          "additionalProperties": { "$ref": "#/definitions/FieldSchema" }
        }
      }
    },
    "KeyValuePair[PropertyKey,FieldSchema]": {
      "type": "object",
      "properties": {
        "key": {
          "type": "string",
          "readOnly": true
        },
        "value": {
          "$ref": "#/definitions/FieldSchema",
          "readOnly": true
        }
      }
    },
    "FieldSchema": {
      "type": "object",
      "properties": {
        "scope": { "type": "string" },
        "name": { "type": "string" },
        "displayName": { "type": "string" },
        "type": {
          "enum": [ "String", "Int", "Decimal", "DateTime", "Boolean", "Map", "PropertyArray", "Percentage", "Currency", "BenchmarkType", "Code", "Id", "Uri", "ArrayOfIds", "ArrayOfTxnAliases", "ArrayofTxnMovements" ],
          "type": "string"
        },
        "isMetric": { "type": "boolean" },
        "displayOrder": {
          "format": "int32",
          "type": "integer"
        },
        "propertySchema": {
          "type": "object",
          "additionalProperties": { "$ref": "#/definitions/FieldSchema" }
        }
      }
    },
    "NestedAggregationResponse": {
      "type": "object",
      "properties": {
        "href": { "type": "string" },
        "data": { "$ref": "#/definitions/AggregationResponseNode[Dictionary[String,Object]]" },
        "aggregationCurrency": { "type": "string" },
        "dataSchema": { "$ref": "#/definitions/ResultDataSchema" }
      }
    },
    "AggregationResponseNode[Dictionary[String,Object]]": {
      "type": "object",
      "properties": {
        "groupPropertyKey": { "type": "string" },
        "groupPropertyValue": { "type": "string" },
        "idx": {
          "format": "int32",
          "type": "integer"
        },
        "properties": {
          "type": "object",
          "additionalProperties": { "type": "object" }
        },
        "children": {
          "type": "array",
          "items": { "$ref": "#/definitions/AggregationResponseNode[Dictionary[String,Object]]" }
        }
      }
    },
    "CreateAnalyticStoreRequest": {
      "type": "object",
      "properties": {
        "scope": { "type": "string" },
        "date": {
          "format": "date-time",
          "type": "string"
        }
      },
      "example": {
        "scope": "MyScope",
        "date": "2018-06-12T10:59:56.7090358Z"
      }
    },
    "AnalyticStoreDto": {
      "type": "object",
      "properties": {
        "key": { "$ref": "#/definitions/AnalyticStoreKeyDto" },
        "href": { "type": "string" }
      }
    },
    "AnalyticStoreKeyDto": {
      "type": "object",
      "properties": {
        "scope": { "type": "string" },
        "date": {
          "format": "date-time",
          "type": "string"
        }
      }
    },
    "ResourceList[AnalyticStoreKeyDto]": {
      "type": "object",
      "properties": {
        "values": {
          "type": "array",
          "items": { "$ref": "#/definitions/AnalyticStoreKeyDto" }
        },
        "href": {
          "description": "The Uri that returns the same result as the original request,\r\nbut may include resolved as at time(s).",
          "type": "string"
        },
        "count": {
          "format": "int32",
          "description": "The total number of records returned in the set",
          "type": "integer"
        },
        "_links": {
          "type": "array",
          "items": { "$ref": "#/definitions/Link" }
        }
      }
    },
    "Link": {
      "required": [ "relation", "href", "method" ],
      "type": "object",
      "properties": {
        "relation": {
          "enum": [ "Root", "Properties", "Trades", "Details", "Constituents" ],
          "type": "string"
        },
        "href": { "type": "string" },
        "description": { "type": "string" },
        "method": {
          "enum": [ "POST", "GET", "PATCH", "DELETE" ],
          "type": "string"
        }
      }
    },
    "DeletedEntityResponse": {
      "type": "object",
      "properties": {
        "href": { "type": "string" },
        "asAt": {
          "format": "date-time",
          "type": "string"
        }
      }
    },
    "SecurityAnalyticDataDto": {
      "type": "object",
      "properties": {
        "id": {
          "description": "Unique security identifier",
          "type": "string"
        },
        "value": {
          "format": "double",
          "description": "Value of the analytic, eg price",
          "type": "number"
        },
        "denomination": {
          "description": "Underlying unit of the analytic, eg currency, EPS etc.",
          "type": "string"
        }
      },
      "example": {
        "id": "FIGI_BBG001S6PJ31",
        "value": 123.45
      }
    },
    "SecurityClassificationDto": {
      "type": "object",
      "properties": {
        "uid": {
          "description": "Unique security identifier",
          "type": "string"
        },
        "effectiveFrom": {
          "format": "date-time",
          "description": "Date from which this classification is effective",
          "type": "string"
        },
        "properties": {
          "type": "array",
          "items": { "$ref": "#/definitions/PropertyDto" }
        }
      },
      "example": {
        "uid": "FIGI_BBG001S6PJ31",
        "effectiveFrom": "2018-06-12T10:59:56.7723942Z",
        "properties": [
          {
            "key": "Security/MyScope/MyPropertyName",
            "value": "MyValue",
            "effectiveFrom": "2018-06-12T10:59:56.7723988Z"
          }
        ]
      }
    },
    "PropertyDto": {
      "description": "This is intended to be the external facing property specification data type.",
      "required": [ "key", "value" ],
      "type": "object",
      "properties": {
        "key": {
          "description": "",
          "type": "string"
        },
        "value": {
          "description": "",
          "type": "object"
        },
        "effectiveFrom": {
          "format": "date-time",
          "description": "Date for which the property is effective from",
          "type": "string"
        }
      },
      "example": {
        "key": "Trade/MyScope/MyPropertyName",
        "value": "MyTradePropertyValue",
        "effectiveFrom": "2018-06-12T10:59:56.9593084Z"
      }
    },
    "ClassificationsDto": {
      "type": "object",
      "properties": { "href": { "type": "string" } }
    },
    "TxnMetaDataDto": {
      "required": [ "aliases", "movements" ],
      "type": "object",
      "properties": {
        "aliases": {
          "description": "List of transaction codes that map to this specific transaction model",
          "type": "array",
          "items": { "$ref": "#/definitions/TxnTypeAliasDto" }
        },
        "movements": {
          "description": "Movement data for the transaction code",
          "type": "array",
          "items": { "$ref": "#/definitions/TxnMovementMetaDataDto" }
        },
        "properties": {
          "type": "array",
          "items": { "$ref": "#/definitions/PropertyDto" }
        }
      },
      "example": {
        "aliases": [
          {
            "type": "MyBuy",
            "description": "MyPurchase",
            "txnClass": "MyDefault",
            "txnGroup": "MyGroup",
            "txnRoles": "LongLonger"
          }
        ],
        "movements": [
          {
            "movementTypes": "Settlement, Traded",
            "side": "Side1",
            "direction": 1,
            "properties": [],
            "mappings": []
          },
          {
            "movementTypes": "Commitment, CashSettlement",
            "side": "Side2",
            "direction": -1,
            "properties": [],
            "mappings": []
          }
        ],
        "properties": []
      }
    },
    "TxnTypeAliasDto": {
      "required": [ "type", "description", "txnClass", "txnGroup" ],
      "type": "object",
      "properties": {
        "type": {
          "description": "The transaction type",
          "type": "string"
        },
        "description": {
          "description": "Brief description of the transaction",
          "type": "string"
        },
        "txnClass": {
          "description": "Relates types of a similar class. E.g. Buy/Sell, StockIn/StockOut",
          "type": "string"
        },
        "txnGroup": {
          "description": "Group is a set of codes related to a source, or sync",
          "type": "string"
        },
        "txnRoles": {
          "description": "Transactions role within a class. E.g. Increase a long position",
          "enum": [ "None", "LongLonger", "LongShorter", "ShortShorter", "ShortLonger", "Longer", "Shorter", "AllRoles" ],
          "type": "string"
        }
      }
    },
    "TxnMovementMetaDataDto": {
      "type": "object",
      "properties": {
        "movementTypes": {
          "description": "The Movement Types",
          "enum": [ "Settlement", "Traded", "ForwardFx", "Commitment", "Receivable", "CashSettlement", "Accrual", "UnsettledCashTypes" ],
          "type": "string"
        },
        "side": {
          "description": "The Movement Side",
          "enum": [ "Side1", "Side2", "BondInt" ],
          "type": "string"
        },
        "direction": {
          "format": "int32",
          "description": "The Movement direction",
          "type": "integer"
        },
        "properties": {
          "type": "array",
          "items": { "$ref": "#/definitions/PropertyDto" }
        },
        "mappings": {
          "type": "array",
          "items": { "$ref": "#/definitions/TxnPropertyMappingDto" }
        }
      }
    },
    "TxnPropertyMappingDto": {
      "required": [ "propertyKey" ],
      "type": "object",
      "properties": {
        "propertyKey": {
          "description": "The Side",
          "type": "string"
        },
        "mapFrom": {
          "description": "The Side",
          "type": "string"
        },
        "setTo": {
          "description": "The Side",
          "type": "object"
        }
      }
    },
    "ResourceList[TxnMetaDataDto]": {
      "type": "object",
      "properties": {
        "values": {
          "type": "array",
          "items": { "$ref": "#/definitions/TxnMetaDataDto" }
        },
        "href": {
          "description": "The Uri that returns the same result as the original request,\r\nbut may include resolved as at time(s).",
          "type": "string"
        },
        "count": {
          "format": "int32",
          "description": "The total number of records returned in the set",
          "type": "integer"
        },
        "_links": {
          "type": "array",
          "items": { "$ref": "#/definitions/Link" }
        }
      }
    },
    "CreateGroupRequest": {
      "required": [ "id", "name" ],
      "type": "object",
      "properties": {
        "id": { "type": "string" },
        "values": {
          "type": "array",
          "items": { "$ref": "#/definitions/ResourceId" }
        },
        "subGroups": {
          "type": "array",
          "items": { "$ref": "#/definitions/ResourceId" }
        },
        "name": { "type": "string" },
        "description": { "type": "string" }
      },
      "example": {
        "id": "MyGroupCode",
        "values": [
          {
            "scope": "MyScope",
            "code": "MyPortfolioCode1"
          },
          {
            "scope": "MyScope",
            "code": "MyPortfolioCode2"
          }
        ],
        "subGroups": [
          {
            "scope": "MyScope",
            "code": "MySubGroupCode"
          }
        ],
        "name": "MyGroupName",
        "description": "My group description"
      }
    },
    "GroupDto": {
      "type": "object",
      "properties": {
        "href": { "type": "string" },
        "id": { "$ref": "#/definitions/ResourceId" },
        "name": { "type": "string" },
        "description": { "type": "string" },
        "values": {
          "type": "array",
          "items": { "$ref": "#/definitions/ResourceId" }
        },
        "subGroups": {
          "type": "array",
          "items": { "$ref": "#/definitions/ResourceId" }
        },
        "version": { "$ref": "#/definitions/VersionDto" },
        "_links": {
          "type": "array",
          "items": { "$ref": "#/definitions/Link" }
        }
      }
    },
    "VersionDto": {
      "description": "Describes the version metadata of an entity.",
      "type": "object",
      "properties": {
        "effectiveFrom": {
          "format": "date-time",
          "description": "",
          "type": "string"
        },
        "asAtDate": {
          "format": "date-time",
          "description": "",
          "type": "string"
        },
        "updatedBy": {
          "description": "",
          "type": "string"
        },
        "href": { "type": "string" }
      }
    },
    "ResourceList[GroupDto]": {
      "type": "object",
      "properties": {
        "values": {
          "type": "array",
          "items": { "$ref": "#/definitions/GroupDto" }
        },
        "href": {
          "description": "The Uri that returns the same result as the original request,\r\nbut may include resolved as at time(s).",
          "type": "string"
        },
        "count": {
          "format": "int32",
          "description": "The total number of records returned in the set",
          "type": "integer"
        },
        "_links": {
          "type": "array",
          "items": { "$ref": "#/definitions/Link" }
        }
      }
    },
    "ResourceList[ProcessedCommandDto]": {
      "type": "object",
      "properties": {
        "values": {
          "type": "array",
          "items": { "$ref": "#/definitions/ProcessedCommandDto" }
        },
        "href": {
          "description": "The Uri that returns the same result as the original request,\r\nbut may include resolved as at time(s).",
          "type": "string"
        },
        "count": {
          "format": "int32",
          "description": "The total number of records returned in the set",
          "type": "integer"
        },
        "_links": {
          "type": "array",
          "items": { "$ref": "#/definitions/Link" }
        }
      }
    },
    "ProcessedCommandDto": {
      "type": "object",
      "properties": {
        "description": { "type": "string" },
        "path": { "type": "string" },
        "userId": {
          "description": "The user that issued the command.",
          "type": "string"
        },
        "processedTime": {
          "description": "The as at time of the events published by the processing of\r\nthis command.",
          "type": "object"
        }
      }
    },
    "ExpandedGroupDto": {
      "type": "object",
      "properties": {
        "href": { "type": "string" },
        "id": { "$ref": "#/definitions/ResourceId" },
        "name": { "type": "string" },
        "description": { "type": "string" },
        "values": {
          "type": "array",
          "items": { "$ref": "#/definitions/CompletePortfolioDto" }
        },
        "subGroups": {
          "type": "array",
          "items": { "$ref": "#/definitions/ExpandedGroupDto" }
        },
        "version": { "$ref": "#/definitions/VersionDto" },
        "_links": {
          "type": "array",
          "items": { "$ref": "#/definitions/Link" }
        }
      }
    },
    "CompletePortfolioDto": {
      "type": "object",
      "properties": {
        "id": { "$ref": "#/definitions/ResourceId" },
        "href": { "type": "string" },
        "description": { "type": "string" },
        "name": { "type": "string" },
        "created": {
          "format": "date-time",
          "type": "string"
        },
        "parentPortfolioId": { "$ref": "#/definitions/ResourceId" },
        "version": { "$ref": "#/definitions/VersionDto" },
        "properties": {
          "type": "array",
          "items": { "$ref": "#/definitions/PropertyDto" }
        },
        "baseCurrency": { "type": "string" },
        "_links": {
          "type": "array",
          "items": { "$ref": "#/definitions/Link" }
        }
      }
    },
    "UpdateGroupRequest": {
      "required": [ "name" ],
      "type": "object",
      "properties": {
        "name": { "type": "string" },
        "description": { "type": "string" }
      },
      "example": {
        "name": "MyGroupName",
        "description": "My Group Description"
      }
    },
    "LoginResponse": {
      "type": "object",
      "properties": {
        "name": {
          "description": "",
          "type": "string"
        },
        "firstName": {
          "description": "",
          "type": "string"
        },
        "defaultScope": {
          "description": "",
          "type": "string"
        },
        "sessionContextId": {
          "description": "",
          "type": "string"
        },
        "logoUri": {
          "description": "",
          "type": "string"
        },
        "valueCurrencyCode": {
          "description": "",
          "type": "string"
        },
        "valueCurrencySymbol": {
          "description": "",
          "type": "string"
        }
      }
    },
    "WebLogMessage": {
      "description": "A log message structured for provision by a web project",
      "type": "object",
      "properties": {
        "version": {
          "description": "The semantic version of the remote application submitting the log",
          "type": "string"
        },
        "url": {
          "description": "The url of the resource from which the message originated",
          "type": "string"
        },
        "message": {
          "description": "The body of the message",
          "type": "string"
        },
        "context": {
          "description": "Context as to the occurance of the message",
          "type": "string"
        },
        "severity": {
          "description": "The severity of the message",
          "enum": [ "Warn", "Error" ],
          "type": "string"
        },
        "stacktrace": {
          "description": "Any stacktrace that may be relavent",
          "type": "string"
        },
        "browser": {
          "description": "Any browser/user-agent/os related context",
          "type": "string"
        }
      }
    },
    "ResourceList[PersonalisationDto]": {
      "type": "object",
      "properties": {
        "values": {
          "type": "array",
          "items": { "$ref": "#/definitions/PersonalisationDto" }
        },
        "href": {
          "description": "The Uri that returns the same result as the original request,\r\nbut may include resolved as at time(s).",
          "type": "string"
        },
        "count": {
          "format": "int32",
          "description": "The total number of records returned in the set",
          "type": "integer"
        },
        "_links": {
          "type": "array",
          "items": { "$ref": "#/definitions/Link" }
        }
      }
    },
    "PersonalisationDto": {
      "type": "object",
      "properties": {
        "scope": {
          "description": "",
          "enum": [ "User", "Group", "Default", "All" ],
          "type": "string"
        },
        "scopeValue": {
          "description": "",
          "type": "string"
        },
        "settingKey": {
          "description": "",
          "type": "string"
        },
        "settingValue": {
          "description": "",
          "type": "string"
        },
        "dataType": {
          "description": "",
          "type": "string"
        },
        "href": { "type": "string" }
      }
    },
    "UpsertPersonalisationsResponse": {
      "type": "object",
      "properties": { "href": { "type": "string" } }
    },
    "ResourceList[Scope]": {
      "type": "object",
      "properties": {
        "values": {
          "type": "array",
          "items": { "type": "string" }
        },
        "href": {
          "description": "The Uri that returns the same result as the original request,\r\nbut may include resolved as at time(s).",
          "type": "string"
        },
        "count": {
          "format": "int32",
          "description": "The total number of records returned in the set",
          "type": "integer"
        },
        "_links": {
          "type": "array",
          "items": { "$ref": "#/definitions/Link" }
        }
      }
    },
    "CreatePortfolioRequest": {
      "required": [ "name", "code", "baseCurrency" ],
      "type": "object",
      "properties": {
        "name": {
          "description": "",
          "type": "string"
        },
        "code": {
          "description": "",
          "type": "string"
        },
        "created": {
          "format": "date-time",
          "description": "",
          "type": "string"
        },
        "baseCurrency": {
          "description": "",
          "type": "string"
        },
        "corporateActionSourceId": {
          "$ref": "#/definitions/ResourceId",
          "description": ""
        },
        "accountingMethod": {
          "description": "",
          "enum": [ "Default", "AverageCost", "FirstInFirstOut", "LastInFirstOut", "HighestCostFirst", "LowestCostFirst" ],
          "type": "string"
        }
      },
      "example": {
        "name": "MyPortfolioName",
        "code": "MyPortfolioCode",
        "created": "2018-06-12T10:59:57.0403911Z",
        "baseCurrency": "GBP",
        "corporateActionSourceId": {
          "scope": "MyScope",
          "code": "MyCorporateActionSourceId"
        },
        "accountingMethod": "Default"
      }
    },
    "PortfolioDto": {
      "type": "object",
      "properties": {
        "href": {
          "description": "Link to retrieve the current entity",
          "type": "string"
        },
        "id": {
          "$ref": "#/definitions/ResourceId",
          "description": "Identifier for the portfolio"
        },
        "name": {
          "description": "Name of the portfolio",
          "type": "string"
        },
        "created": {
          "format": "date-time",
          "description": "Portfolio creation time in UTC",
          "type": "string"
        },
        "parentPortfolioId": {
          "$ref": "#/definitions/ResourceId",
          "description": "If this is a derived portfolio, the identifier of the portfolio from which it is derived"
        },
        "version": {
          "$ref": "#/definitions/VersionDto",
          "description": "The version of the portfolio"
        },
        "_links": {
          "type": "array",
          "items": { "$ref": "#/definitions/Link" }
        }
      }
    },
    "ResourceList[PortfolioDto]": {
      "type": "object",
      "properties": {
        "values": {
          "type": "array",
          "items": { "$ref": "#/definitions/PortfolioDto" }
        },
        "href": {
          "description": "The Uri that returns the same result as the original request,\r\nbut may include resolved as at time(s).",
          "type": "string"
        },
        "count": {
          "format": "int32",
          "description": "The total number of records returned in the set",
          "type": "integer"
        },
        "_links": {
          "type": "array",
          "items": { "$ref": "#/definitions/Link" }
        }
      }
    },
    "UpdatePortfolioRequest": {
      "required": [ "name" ],
      "type": "object",
      "properties": {
        "name": {
          "description": "",
          "type": "string"
        },
        "created": {
          "format": "date-time",
          "description": "",
          "type": "string"
        }
      },
      "example": {
        "name": "MyPortfolioName",
        "created": "2018-06-12T10:59:56.8889412Z"
      }
    },
    "PortfolioDetailsDto": {
      "type": "object",
      "properties": {
        "href": { "type": "string" },
        "originPortfolioId": { "$ref": "#/definitions/ResourceId" },
        "version": {
          "$ref": "#/definitions/VersionDto",
          "description": "The version of the portfolio"
        },
        "baseCurrency": { "type": "string" },
        "_links": {
          "type": "array",
          "items": { "$ref": "#/definitions/Link" }
        }
      }
    },
    "PortfolioDetailsRequest": {
      "type": "object",
      "properties": { "baseCurrency": { "type": "string" } },
      "example": { "baseCurrency": "GBP" }
    },
    "VersionedResourceList[HoldingDto]": {
      "type": "object",
      "properties": {
        "version": { "$ref": "#/definitions/VersionDto" },
        "values": {
          "type": "array",
          "items": { "$ref": "#/definitions/HoldingDto" }
        },
        "href": {
          "description": "The Uri that returns the same result as the original request,\r\nbut may include resolved as at time(s).",
          "type": "string"
        },
        "count": {
          "format": "int32",
          "description": "The total number of records returned in the set",
          "type": "integer"
        },
        "_links": {
          "type": "array",
          "items": { "$ref": "#/definitions/Link" }
        }
      }
    },
    "HoldingDto": {
      "required": [ "holdingType" ],
      "type": "object",
      "properties": {
        "securityUid": {
          "description": "Unique security identifier",
          "type": "string"
        },
        "properties": {
          "type": "array",
          "items": { "$ref": "#/definitions/PropertyDto" }
        },
        "holdingType": {
          "description": "Type of holding, eg Position, Balance, CashCommitment, Receivable, ForwardFX",
          "type": "string"
        },
        "units": {
          "format": "double",
          "description": "Quantity of holding",
          "type": "number"
        },
        "settledUnits": {
          "format": "double",
          "description": "Settled quantity of holding",
          "type": "number"
        },
        "cost": {
          "format": "double",
          "description": "Book cost of holding in trade currency",
          "type": "number"
        },
        "costPortfolioCcy": {
          "format": "double",
          "description": "Book cost of holding in portfolio currency",
          "type": "number"
        },
        "transaction": {
          "$ref": "#/definitions/TradeDto",
          "description": "If this is commitment-type holding, the transaction behind it"
        }
      }
    },
    "TradeDto": {
      "required": [ "tradeId", "type", "settlementCurrency" ],
      "type": "object",
      "properties": {
        "tradeId": {
          "description": "Unique trade identifier",
          "type": "string"
        },
        "type": {
          "description": "LUSID transaction type code - Buy, Sell, StockIn, StockOut, etc",
          "type": "string"
        },
        "securityUid": {
          "description": "Unique security identifier",
          "type": "string"
        },
        "tradeDate": {
          "format": "date-time",
          "description": "Trade date",
          "type": "string"
        },
        "settlementDate": {
          "format": "date-time",
          "description": "Settlement date",
          "type": "string"
        },
        "units": {
          "format": "double",
          "description": "Quantity of trade in units of the security",
          "type": "number"
        },
        "tradePrice": {
          "format": "double",
          "description": "Execution price for the trade",
          "type": "number"
        },
        "totalConsideration": {
          "format": "double",
          "description": "Total value of the trade",
          "type": "number"
        },
        "exchangeRate": {
          "format": "double",
          "description": "Rate between trade and settle currency",
          "type": "number"
        },
        "settlementCurrency": {
          "description": "Settlement currency",
          "type": "string"
        },
        "tradeCurrency": {
          "description": "Trade currency",
          "type": "string"
        },
        "properties": {
          "type": "array",
          "items": { "$ref": "#/definitions/PropertyDto" }
        },
        "counterpartyId": {
          "description": "Counterparty identifier",
          "type": "string"
        },
        "source": {
          "description": "Where this trade came from, either Client or System",
          "enum": [ "System", "Client" ],
          "type": "string"
        },
        "dividendState": {
          "description": "",
          "enum": [ "Default", "ExDividend", "CumDividend" ],
          "type": "string"
        },
        "tradePriceType": {
          "description": "",
          "enum": [ "Price", "Yield", "Spread" ],
          "type": "string"
        },
        "unitType": {
          "description": "",
          "enum": [ "Nominal", "Shares", "FaceValue", "Contracts" ],
          "type": "string"
        },
        "nettingSet": {
          "description": "",
          "type": "string"
        }
      },
      "example": {
        "tradeId": "MyTradeId",
        "type": "StockIn",
        "securityUid": "FIGI_BBG001S6PJ31",
        "tradeDate": "2018-06-12T10:59:56.9523614Z",
        "settlementDate": "2018-06-15T10:59:56.9523617Z",
        "units": 1000.0,
        "tradePrice": 123.0,
        "totalConsideration": 1230.0,
        "settlementCurrency": "GBP",
        "tradeCurrency": "GBP",
        "properties": [
          {
            "key": "Security/MyScope/MyPropertyName",
            "value": "MyValue",
            "effectiveFrom": "2018-06-12T10:59:56.9523653Z"
          }
        ],
        "counterpartyId": "MyCounterpartyId",
        "source": "Client",
        "dividendState": "Default",
        "tradePriceType": "Price",
        "unitType": "Shares",
        "nettingSet": "MyNettingSet"
      }
    },
    "HoldingAdjustmentDto": {
      "description": "Used to specify the 'target' holding when calling the AdjustHoldings Api",
      "type": "object",
      "properties": {
        "href": { "type": "string" },
        "securityUid": { "type": "string" },
        "units": {
          "format": "double",
          "type": "number"
        },
        "cost": {
          "format": "double",
          "type": "number"
        },
        "properties": {
          "type": "array",
          "items": { "$ref": "#/definitions/PropertyDto" }
        },
        "_links": {
          "type": "array",
          "items": { "$ref": "#/definitions/Link" }
        }
      },
      "example": {
        "securityUid": "FIGI_BBG001S6PJ31",
        "units": -100.0,
        "cost": 10000.0,
        "properties": [
          {
            "key": "Holding/MyScope/MyHoldingProperty",
            "value": "MyPropertyValue",
            "effectiveFrom": "2018-06-12T10:59:56.941166Z"
          }
        ]
      }
    },
    "UpsertPortfolioTradesDto": {
      "type": "object",
      "properties": {
        "version": { "$ref": "#/definitions/VersionDto" },
        "href": { "type": "string" },
        "_links": {
          "type": "array",
          "items": { "$ref": "#/definitions/Link" }
        }
      }
    },
    "PortfolioPropertiesDto": {
      "type": "object",
      "properties": {
        "href": { "type": "string" },
        "originPortfolioId": { "$ref": "#/definitions/ResourceId" },
        "properties": {
          "type": "array",
          "items": { "$ref": "#/definitions/PropertyDto" }
        },
        "version": {
          "$ref": "#/definitions/VersionDto",
          "description": "The version of the portfolio"
        },
        "_links": {
          "type": "array",
          "items": { "$ref": "#/definitions/Link" }
        }
      }
    },
    "VersionedResourceList[TradeDto]": {
      "type": "object",
      "properties": {
        "version": { "$ref": "#/definitions/VersionDto" },
        "values": {
          "type": "array",
          "items": { "$ref": "#/definitions/TradeDto" }
        },
        "href": {
          "description": "The Uri that returns the same result as the original request,\r\nbut may include resolved as at time(s).",
          "type": "string"
        },
        "count": {
          "format": "int32",
          "description": "The total number of records returned in the set",
          "type": "integer"
        },
        "_links": {
          "type": "array",
          "items": { "$ref": "#/definitions/Link" }
        }
      }
    },
    "AddTradePropertyDto": {
      "type": "object",
      "properties": {
        "href": { "type": "string" },
        "version": { "$ref": "#/definitions/VersionDto" },
        "_links": {
          "type": "array",
          "items": { "$ref": "#/definitions/Link" }
        }
      }
    },
    "CreateDerivedPortfolioRequest": {
      "required": [ "name" ],
      "type": "object",
      "properties": {
        "name": {
          "description": "",
          "type": "string"
        },
        "id": {
          "description": "",
          "type": "string"
        },
        "parentPortfolio": {
          "$ref": "#/definitions/ResourceId",
          "description": ""
        },
        "created": {
          "format": "date-time",
          "description": "",
          "type": "string"
        }
      },
      "example": {
        "name": "MyDerivedPortfolioName",
        "id": "MyDerivedPortfolioCode",
        "parentPortfolio": {
          "scope": "MyParentPortfolioScope",
          "code": "MyParentPortfolioCode"
        },
        "created": "2018-06-12T10:59:56.96641Z"
      }
    },
    "ResourceList[PortfolioSearchResult]": {
      "type": "object",
      "properties": {
        "values": {
          "type": "array",
          "items": { "$ref": "#/definitions/PortfolioSearchResult" }
        },
        "href": {
          "description": "The Uri that returns the same result as the original request,\r\nbut may include resolved as at time(s).",
          "type": "string"
        },
        "count": {
          "format": "int32",
          "description": "The total number of records returned in the set",
          "type": "integer"
        },
        "_links": {
          "type": "array",
          "items": { "$ref": "#/definitions/Link" }
        }
      }
    },
    "PortfolioSearchResult": {
      "type": "object",
      "properties": {
        "id": { "$ref": "#/definitions/ResourceId" },
        "href": { "type": "string" },
        "description": { "type": "string" },
        "name": { "type": "string" },
        "isDerived": { "type": "boolean" },
        "created": {
          "format": "date-time",
          "type": "string"
        },
        "parentPortfolioId": { "$ref": "#/definitions/ResourceId" },
        "properties": {
          "type": "array",
          "items": { "$ref": "#/definitions/PropertyDto" }
        },
        "_links": {
          "type": "array",
          "items": { "$ref": "#/definitions/Link" }
        }
      }
    },
    "ResourceList[PropertyDefinitionDto]": {
      "type": "object",
      "properties": {
        "values": {
          "type": "array",
          "items": { "$ref": "#/definitions/PropertyDefinitionDto" }
        },
        "href": {
          "description": "The Uri that returns the same result as the original request,\r\nbut may include resolved as at time(s).",
          "type": "string"
        },
        "count": {
          "format": "int32",
          "description": "The total number of records returned in the set",
          "type": "integer"
        },
        "_links": {
          "type": "array",
          "items": { "$ref": "#/definitions/Link" }
        }
      }
    },
    "PropertyDefinitionDto": {
      "type": "object",
      "properties": {
        "href": { "type": "string" },
        "key": { "type": "string" },
        "valueType": {
          "enum": [ "String", "Int", "Decimal", "DateTime", "Boolean", "Map", "PropertyArray", "Percentage", "Currency", "BenchmarkType", "Code", "Id", "Uri", "ArrayOfIds", "ArrayOfTxnAliases", "ArrayofTxnMovements" ],
          "type": "string"
        },
        "valueRequired": { "type": "boolean" },
        "displayName": { "type": "string" },
        "dataFormatId": { "$ref": "#/definitions/ResourceId" },
        "sort": { "type": "string" },
        "lifeTime": {
          "enum": [ "Perpetual", "TimeVariant" ],
          "type": "string"
        },
        "type": {
          "enum": [ "Label", "Metric" ],
          "type": "string"
        },
        "_links": {
          "type": "array",
          "items": { "$ref": "#/definitions/Link" }
        }
      }
    },
    "CreatePropertyDefinitionRequest": {
      "type": "object",
      "properties": {
        "domain": {
          "enum": [ "Trade", "Portfolio", "Security", "Holding", "ReferenceHolding", "TxnType" ],
          "type": "string"
        },
        "scope": { "type": "string" },
        "name": { "type": "string" },
        "valueRequired": { "type": "boolean" },
        "displayName": { "type": "string" },
        "dataFormatId": { "$ref": "#/definitions/ResourceId" },
        "sort": { "type": "string" },
        "lifeTime": {
          "enum": [ "Perpetual", "TimeVariant" ],
          "type": "string"
        },
        "type": {
          "enum": [ "Label", "Metric" ],
          "type": "string"
        }
      },
      "example": {
        "domain": "Portfolio",
        "scope": "MyScope",
        "name": "MyPropertyName",
        "valueRequired": false,
        "displayName": "My Property Display Name",
        "dataFormatId": {
          "scope": "default",
          "code": "string"
        },
        "lifeTime": "Perpetual",
        "type": "Label"
      }
    },
    "ResourceList[PropertyDomain]": {
      "type": "object",
      "properties": {
        "values": {
          "type": "array",
          "items": {
            "enum": [ "Trade", "Portfolio", "Security", "Holding", "ReferenceHolding", "TxnType" ],
            "type": "string"
          }
        },
        "href": {
          "description": "The Uri that returns the same result as the original request,\r\nbut may include resolved as at time(s).",
          "type": "string"
        },
        "count": {
          "format": "int32",
          "description": "The total number of records returned in the set",
          "type": "integer"
        },
        "_links": {
          "type": "array",
          "items": { "$ref": "#/definitions/Link" }
        }
      }
    },
    "ResourceList[PropertyKey]": {
      "type": "object",
      "properties": {
        "values": {
          "type": "array",
          "items": { "type": "string" }
        },
        "href": {
          "description": "The Uri that returns the same result as the original request,\r\nbut may include resolved as at time(s).",
          "type": "string"
        },
        "count": {
          "format": "int32",
          "description": "The total number of records returned in the set",
          "type": "integer"
        },
        "_links": {
          "type": "array",
          "items": { "$ref": "#/definitions/Link" }
        }
      }
    },
    "UpdatePropertyDefinitionRequest": {
      "type": "object",
      "properties": {
        "valueRequired": { "type": "boolean" },
        "displayName": { "type": "string" },
        "dataFormatId": { "$ref": "#/definitions/ResourceId" },
        "sort": { "type": "string" },
        "lifeTime": {
          "enum": [ "Perpetual", "TimeVariant" ],
          "type": "string"
        },
        "type": {
          "enum": [ "Label", "Metric" ],
          "type": "string"
        }
      },
      "example": {
        "valueRequired": true,
        "displayName": "MyPropertyName",
        "dataFormatId": {
          "scope": "MyScope",
          "code": "MyDataFormatCode"
        },
        "lifeTime": "Perpetual",
        "type": "Label"
      }
    },
    "CreatePropertyDataFormatRequest": {
      "required": [ "scope", "code", "formatType", "order", "displayName", "valueType" ],
      "type": "object",
      "properties": {
        "scope": { "type": "string" },
        "code": { "type": "string" },
        "formatType": {
          "enum": [ "Basic", "Limited", "Currency" ],
          "type": "string"
        },
        "order": {
          "format": "int32",
          "type": "integer"
        },
        "displayName": { "type": "string" },
        "valueType": {
          "enum": [ "String", "Int", "Decimal", "DateTime", "Boolean", "Map", "PropertyArray", "Percentage", "Currency", "BenchmarkType", "Code", "Id", "Uri", "ArrayOfIds", "ArrayOfTxnAliases", "ArrayofTxnMovements" ],
          "type": "string"
        },
        "acceptableValues": {
          "type": "array",
          "items": { "type": "object" }
        }
      }
    },
    "PropertyDataFormatDto": {
      "type": "object",
      "properties": {
        "href": { "type": "string" },
        "formatType": {
          "enum": [ "Basic", "Limited", "Currency" ],
          "type": "string"
        },
        "id": { "$ref": "#/definitions/ResourceId" },
        "order": {
          "format": "int32",
          "type": "integer"
        },
        "displayName": { "type": "string" },
        "valueType": {
          "enum": [ "String", "Int", "Decimal", "DateTime", "Boolean", "Map", "PropertyArray", "Percentage", "Currency", "BenchmarkType", "Code", "Id", "Uri", "ArrayOfIds", "ArrayOfTxnAliases", "ArrayofTxnMovements" ],
          "type": "string"
        },
        "acceptableValues": {
          "type": "array",
          "items": { "type": "object" }
        }
      }
    },
    "UpdatePropertyDataFormatRequest": {
      "required": [ "formatType", "order", "displayName", "valueType" ],
      "type": "object",
      "properties": {
        "formatType": {
          "enum": [ "Basic", "Limited", "Currency" ],
          "type": "string"
        },
        "order": {
          "format": "int32",
          "type": "integer"
        },
        "displayName": { "type": "string" },
        "valueType": {
          "enum": [ "String", "Int", "Decimal", "DateTime", "Boolean", "Map", "PropertyArray", "Percentage", "Currency", "BenchmarkType", "Code", "Id", "Uri", "ArrayOfIds", "ArrayOfTxnAliases", "ArrayofTxnMovements" ],
          "type": "string"
        },
        "acceptableValues": {
          "type": "array",
          "items": { "type": "object" }
        }
      },
      "example": {
        "formatType": "Basic",
        "order": 1,
        "displayName": "My Data Format",
        "valueType": "String"
      }
    },
    "ResourceList[PropertyDataFormatDto]": {
      "type": "object",
      "properties": {
        "values": {
          "type": "array",
          "items": { "$ref": "#/definitions/PropertyDataFormatDto" }
        },
        "href": {
          "description": "The Uri that returns the same result as the original request,\r\nbut may include resolved as at time(s).",
          "type": "string"
        },
        "count": {
          "format": "int32",
          "description": "The total number of records returned in the set",
          "type": "integer"
        },
        "_links": {
          "type": "array",
          "items": { "$ref": "#/definitions/Link" }
        }
      }
    },
    "ReconciliationRequest": {
      "type": "object",
      "properties": {
        "leftScope": { "type": "string" },
        "leftCode": { "type": "string" },
        "leftEffectiveAt": {
          "format": "date-time",
          "type": "string"
        },
        "leftAsAt": {
          "format": "date-time",
          "type": "string"
        },
        "rightScope": { "type": "string" },
        "rightCode": { "type": "string" },
        "rightEffectiveAt": {
          "format": "date-time",
          "type": "string"
        },
        "rightAsAt": {
          "format": "date-time",
          "type": "string"
        }
      },
      "example": {
        "leftScope": "MySourceScope",
        "leftCode": "MySourcePortfolioCode",
        "leftEffectiveAt": "2018-06-12T10:59:57.0397656Z",
        "leftAsAt": "2018-06-12T10:59:57.0397661Z",
        "rightScope": "MyTargetScope",
        "rightCode": "MyTargetPortfolioCode",
        "rightEffectiveAt": "2018-06-12T10:59:57.0397663Z",
        "rightAsAt": "2018-06-12T10:59:57.0397663Z"
      }
    },
    "ResourceList[ReconciliationBreakDto]": {
      "type": "object",
      "properties": {
        "values": {
          "type": "array",
          "items": { "$ref": "#/definitions/ReconciliationBreakDto" }
        },
        "href": {
          "description": "The Uri that returns the same result as the original request,\r\nbut may include resolved as at time(s).",
          "type": "string"
        },
        "count": {
          "format": "int32",
          "description": "The total number of records returned in the set",
          "type": "integer"
        },
        "_links": {
          "type": "array",
          "items": { "$ref": "#/definitions/Link" }
        }
      }
    },
    "ReconciliationBreakDto": {
      "description": "A reconciliation break",
      "type": "object",
      "properties": {
        "securityUid": {
          "description": "Unique security identifier",
          "type": "string"
        },
        "properties": {
          "type": "array",
          "items": { "$ref": "#/definitions/PropertyDto" }
        },
        "unitsDifference": {
          "format": "double",
          "description": "Difference in units",
          "type": "number"
        },
        "costDifference": {
          "format": "double",
          "description": "Difference in cost",
          "type": "number"
        }
      }
    },
    "ResourceList[ReferencePortfolioConstituentDto]": {
      "type": "object",
      "properties": {
        "values": {
          "type": "array",
          "items": { "$ref": "#/definitions/ReferencePortfolioConstituentDto" }
        },
        "href": {
          "description": "The Uri that returns the same result as the original request,\r\nbut may include resolved as at time(s).",
          "type": "string"
        },
        "count": {
          "format": "int32",
          "description": "The total number of records returned in the set",
          "type": "integer"
        },
        "_links": {
          "type": "array",
          "items": { "$ref": "#/definitions/Link" }
        }
      }
    },
    "ReferencePortfolioConstituentDto": {
      "type": "object",
      "properties": {
        "id": {
          "description": "",
          "type": "string"
        },
        "properties": {
          "type": "array",
          "items": { "$ref": "#/definitions/PropertyDto" }
        },
        "quantity": {
          "format": "double",
          "description": "",
          "type": "number"
        },
        "type": {
          "description": "",
          "enum": [ "Shares", "Weight", "Nominal" ],
          "type": "string"
        }
      },
      "example": {
        "id": "FIGI_BBG001S6PJ31",
        "properties": [],
        "quantity": 1000.0,
        "type": "Shares"
      }
    },
    "UpsertReferencePortfolioConstituentsDto": {
      "type": "object",
      "properties": { "href": { "type": "string" } }
    },
    "CreateResultsRequest": {
      "type": "object",
      "properties": {
        "data": { "type": "object" },
        "scope": { "type": "string" },
        "key": { "type": "string" },
        "date": {
          "format": "date-time",
          "type": "string"
        }
      },
      "example": {
        "data": [],
        "scope": "MyScope",
        "key": "MyResultsUniqueKey",
        "date": "2018-06-12T10:59:57.0650629Z"
      }
    },
    "ResultsDto": {
      "type": "object",
      "properties": {
        "version": { "$ref": "#/definitions/VersionDto" },
        "href": { "type": "string" },
        "values": { "type": "object" }
      }
    },
    "SchemaDto": {
      "type": "object",
      "properties": {
        "entity": {
          "enum": [ "PropertyKey", "FieldSchema", "Personalisation", "Security", "Property", "Login", "PropertyDefinition", "PropertyDataFormat", "AggregationResponseNode", "Portfolio", "CompletePortfolio", "PortfolioSearchResult", "PortfolioDetails", "PortfolioProperties", "Version", "AddTradeProperty", "AnalyticStore", "AnalyticStoreKey", "UpsertPortfolioTrades", "Group", "Constituent", "Trade", "PortfolioHolding", "AdjustHolding", "ErrorDetail", "ErrorResponse", "InstrumentDefinition", "ProcessedCommand", "CreatePortfolio", "CreateAnalyticStore", "CreateClientSecurity", "CreateDerivedPortfolio", "CreateGroup", "CreatePropertyDataFormat", "CreatePropertyDefinition", "UpdatePortfolio", "UpdateGroup", "UpdatePropertyDataFormat", "UpdatePropertyDefinition", "SecurityAnalytic", "AggregationRequest", "Aggregation", "NestedAggregation", "ResultDataSchema", "Classification", "SecurityClassification", "WebLogMessage", "UpsertPersonalisation", "CreatePortfolioDetails", "UpsertConstituent", "CreateResults", "Results", "TryAddClientSecurities", "TryDeleteClientSecurities", "TryLookupSecuritiesFromCodes", "ExpandedGroup", "CreateCorporateAction", "CorporateAction", "CorporateActionTransition", "ReconciliationRequest", "ReconciliationBreak", "TransactionConfigurationData", "TransactionConfigurationMovementData", "TransactionConfigurationTypeAlias" ],
          "type": "string"
        },
        "href": { "type": "string" },
        "values": {
          "type": "array",
          "items": { "$ref": "#/definitions/KeyValuePair[String,FieldSchema]" }
        }
      }
    },
    "KeyValuePair[String,FieldSchema]": {
      "type": "object",
      "properties": {
        "key": {
          "type": "string",
          "readOnly": true
        },
        "value": {
          "$ref": "#/definitions/FieldSchema",
          "readOnly": true
        }
      }
    },
    "PropertySchemaDto": {
      "type": "object",
      "properties": {
        "href": { "type": "string" },
        "values": {
          "type": "array",
          "items": { "$ref": "#/definitions/KeyValuePair[PropertyKey,FieldSchema]" }
        }
      }
    },
    "ResourceList[UiDataType]": {
      "type": "object",
      "properties": {
        "values": {
          "type": "array",
          "items": {
            "enum": [ "String", "Int", "Decimal", "DateTime", "Boolean", "Map", "PropertyArray", "Percentage", "Currency", "BenchmarkType", "Code", "Id", "Uri", "ArrayOfIds", "ArrayOfTxnAliases", "ArrayofTxnMovements" ],
            "type": "string"
          }
        },
        "href": {
          "description": "The Uri that returns the same result as the original request,\r\nbut may include resolved as at time(s).",
          "type": "string"
        },
        "count": {
          "format": "int32",
          "description": "The total number of records returned in the set",
          "type": "integer"
        },
        "_links": {
          "type": "array",
          "items": { "$ref": "#/definitions/Link" }
        }
      }
    },
    "CreateClientSecurityRequest": {
      "required": [ "clientSecurityId", "name", "properties" ],
      "type": "object",
      "properties": {
        "clientSecurityId": { "type": "string" },
        "name": { "type": "string" },
        "properties": {
          "type": "array",
          "items": { "$ref": "#/definitions/PropertyDto" }
        },
        "aliases": {
          "type": "array",
          "items": { "$ref": "#/definitions/KeyValuePair[CodeType,String]" }
        },
        "lookThroughPortfolioId": { "$ref": "#/definitions/ResourceId" },
        "instrument": {
          "$ref": "#/definitions/InstrumentDefinitionDto",
          "description": "There could be multiple underlying instrument definitions (same\r\ninstrument but different format), but for now store one."
        }
      },
      "example": {
        "clientSecurityId": "MyClientSecurityId",
        "name": "My Private Placment",
        "properties": [
          {
            "key": "Security/MyScope/MySector",
            "value": "Financials",
            "effectiveFrom": "2018-06-12T10:59:57.0934706Z"
          }
        ]
      }
    },
    "KeyValuePair[CodeType,String]": {
      "type": "object",
      "properties": {
        "key": {
          "enum": [ "Undefined", "ReutersAssetId", "CINS", "Isin", "Sedol", "Cusip", "ClientInternal", "Figi", "Wertpapier" ],
          "type": "string",
          "readOnly": true
        },
        "value": {
          "type": "string",
          "readOnly": true
        }
      }
    },
    "InstrumentDefinitionDto": {
      "description": "An opaque instrument definition.\r\nUnderstood by some analytics library.",
      "type": "object",
      "properties": {
        "content": {
          "type": "string",
          "readOnly": true
        }
      }
    },
    "TryAddClientSecuritiesDto": {
      "type": "object",
      "properties": {
        "href": { "type": "string" },
        "values": {
          "type": "array",
          "items": { "$ref": "#/definitions/SecurityDto" }
        },
        "failed": {
          "type": "array",
          "items": { "$ref": "#/definitions/ErrorDetail" }
        }
      }
    },
    "SecurityDto": {
      "type": "object",
      "properties": {
        "href": { "type": "string" },
        "uid": { "type": "string" },
        "version": { "$ref": "#/definitions/VersionDto" },
        "commonName": { "type": "string" },
        "aliases": {
          "type": "object",
          "properties": {
            "Undefined": { "type": "string" },
            "ReutersAssetId": { "type": "string" },
            "CINS": { "type": "string" },
            "Isin": { "type": "string" },
            "Sedol": { "type": "string" },
            "Cusip": { "type": "string" },
            "ClientInternal": { "type": "string" },
            "Figi": { "type": "string" },
            "Wertpapier": { "type": "string" }
          }
        },
        "properties": {
          "type": "array",
          "items": { "$ref": "#/definitions/PropertyDto" }
        },
        "_links": {
          "type": "array",
          "items": { "$ref": "#/definitions/Link" }
        }
      }
    },
    "TryDeleteClientSecuritiesDto": {
      "type": "object",
      "properties": {
        "href": { "type": "string" },
        "failed": {
          "type": "array",
          "items": { "$ref": "#/definitions/ErrorDetail" }
        }
      }
    },
    "TryLookupSecuritiesFromCodesDto": {
      "type": "object",
      "properties": {
        "href": { "type": "string" },
        "values": {
          "type": "array",
          "items": { "$ref": "#/definitions/ResourceList[SecurityDto]" }
        },
        "failed": {
          "type": "array",
          "items": { "$ref": "#/definitions/ErrorDetail" }
        }
      }
    },
    "ResourceList[SecurityDto]": {
      "type": "object",
      "properties": {
        "values": {
          "type": "array",
          "items": { "$ref": "#/definitions/SecurityDto" }
        },
        "href": {
          "description": "The Uri that returns the same result as the original request,\r\nbut may include resolved as at time(s).",
          "type": "string"
        },
        "count": {
          "format": "int32",
          "description": "The total number of records returned in the set",
          "type": "integer"
        },
        "_links": {
          "type": "array",
          "items": { "$ref": "#/definitions/Link" }
        }
      }
    }
  },
  "securityDefinitions": {
    "oauth2": {
      "flow": "implicit",
      "authorizationUrl": "https://lusid.okta.com/oauth2/aus5a776yendDqtEq2p6/v1/authorize",
      "type": "oauth2",
      "description": "OAuth2 Implicit Grant"
    }
  },
  "security": [ { "oauth2": [] } ],
  "tags": [
    {
      "name": "Aggregation",
      "description": "Methods for accessing aggregated data"
    },
    {
      "name": "Analytics Stores",
      "description": "Methods for interacting with Analytic Stores"
    },
    {
      "name": "Application Metadata",
      "description": "Methods for querying application metadata"
    },
    {
      "name": "Classification",
      "description": "Methods for updating Classifications"
    },
    {
      "name": "Configuration",
      "description": "Methods for updating system configurationwith Portfolios"
    },
    {
      "name": "Corporate Actions",
      "description": "Methods for storage and retrieval of Corporate Action data"
    },
    {
      "name": "Excel Addin",
      "description": "Methods used by the Excel Addin"
    },
    {
      "name": "Health",
      "description": "Methods for querying the health of LUSID"
    },
    {
      "name": "Internal",
      "description": "Internal methods for the management of LUSID"
    },
    {
      "name": "Login",
      "description": "Methods to handle login"
    },
    {
      "name": "Logs",
      "description": "Methods for recording of log messages"
    },
    {
      "name": "Personalisations",
      "description": "Methods for storage and retrieval of Personalisations"
    },
    {
      "name": "Portfolio Groups",
      "description": "Methods for interacting with Portfolios Groups"
    },
    {
      "name": "Portfolios",
      "description": "Methods for interacting with Portfolios"
    },
    {
      "name": "Properties",
      "description": "Methods for interacting with Properties"
    },
    {
      "name": "Property Data Formats",
      "description": "Methods for configuration of Property Data Formats"
    },
    {
      "name": "Reconciliations",
      "description": "Endpoints for performing reconciliations"
    },
    {
      "name": "Reference Portfolio",
      "description": "Methods for interacting with Reference Portfolios"
    },
    {
      "name": "Results",
      "description": "Methods for storage and retrieval of Calculation Results"
    },
    {
      "name": "Schema",
      "description": "Methods for retrieval of Schemas"
    },
    {
      "name": "Search Properties",
      "description": "Methods providing Search capability"
    },
    {
      "name": "Securities",
      "description": "Methods for interacting with Securities"
    }
  ],
  "x-tagGroups": [
    {
      "name": "API",
      "tags": [ "Aggregation", "Analytics Stores", "Application Metadata", "Classification", "Configuration", "Corporate Actions", "Excel Addin", "Health", "Internal", "Login", "Logs", "Personalisations", "Portfolio Groups", "Portfolios", "Properties", "Property Data Formats", "Reconciliations", "Reference Portfolio", "Results", "Schema", "Search Properties", "Securities" ]
    }
  ]
}