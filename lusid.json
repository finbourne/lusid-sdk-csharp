{
  "openapi": "3.0.1",
  "info": {
    "title": "LUSID API",
    "description": "# Introduction\n\nThis page documents the [LUSID APIs](../../../api/swagger), which allows authorised clients to query and update their data within the LUSID platform.\n\nSDKs to interact with the LUSID APIs are available in the following languages and frameworks:\n\n* [C#](https://github.com/finbourne/lusid-sdk-csharp)\n* [Java](https://github.com/finbourne/lusid-sdk-java)\n* [JavaScript](https://github.com/finbourne/lusid-sdk-js)\n* [Python](https://github.com/finbourne/lusid-sdk-python)\n* [Angular](https://github.com/finbourne/lusid-sdk-angular)\n\nThe LUSID platform is made up of a number of sub-applications. You can find the API / swagger documentation by following the links in the table below.\n\n\n| Application   | Description                                                                       | API / Swagger Documentation                          |\n|---------------|-----------------------------------------------------------------------------------|------------------------------------------------------|\n| LUSID         | Open, API-first, developer-friendly investment data platform.                     | [Swagger](../../../api/swagger/index.html)           |\n| Web app       | User-facing front end for LUSID.                                                  | [Swagger](../../../app/swagger/index.html)           |\n| Scheduler     | Automated job scheduler.                                                          | [Swagger](../../../scheduler2/swagger/index.html)    |\n| Insights      | Monitoring and troubleshooting service.                                           | [Swagger](../../../insights/swagger/index.html)      |\n| Identity      | Identity management for LUSID (in conjunction with Access)                        | [Swagger](../../../identity/swagger/index.html)      |\n| Access        | Access control for LUSID (in conjunction with Identity)                           | [Swagger](../../../access/swagger/index.html)        |\n| Drive         | Secure file repository and manager for collaboration.                             | [Swagger](../../../drive/swagger/index.html)         |\n| Luminesce     | Data virtualisation service (query data from multiple providers, including LUSID) | [Swagger](../../../honeycomb/swagger/index.html)     |\n| Notification  | Notification service.                                                             | [Swagger](../../../notifications/swagger/index.html) |\n| Configuration | File store for secrets and other sensitive information.                           | [Swagger](../../../configuration/swagger/index.html) |\n\n\n# Error Codes\n\n| Code|Name|Description |\n| ---|---|--- |\n| <a name=\"-10\">-10</a>|Server Configuration Error|  |\n| <a name=\"-1\">-1</a>|Unknown error|An unexpected error was encountered on our side. |\n| <a name=\"102\">102</a>|Version Not Found|  |\n| <a name=\"103\">103</a>|Api Rate Limit Violation|  |\n| <a name=\"104\">104</a>|Instrument Not Found|  |\n| <a name=\"105\">105</a>|Property Not Found|  |\n| <a name=\"106\">106</a>|Portfolio Recursion Depth|  |\n| <a name=\"108\">108</a>|Group Not Found|  |\n| <a name=\"109\">109</a>|Portfolio Not Found|  |\n| <a name=\"110\">110</a>|Property Schema Not Found|  |\n| <a name=\"111\">111</a>|Portfolio Ancestry Not Found|  |\n| <a name=\"112\">112</a>|Portfolio With Id Already Exists|  |\n| <a name=\"113\">113</a>|Orphaned Portfolio|  |\n| <a name=\"119\">119</a>|Missing Base Claims|  |\n| <a name=\"121\">121</a>|Property Not Defined|  |\n| <a name=\"122\">122</a>|Cannot Delete System Property|  |\n| <a name=\"123\">123</a>|Cannot Modify Immutable Property Field|  |\n| <a name=\"124\">124</a>|Property Already Exists|  |\n| <a name=\"125\">125</a>|Invalid Property Life Time|  |\n| <a name=\"126\">126</a>|Property Constraint Style Excludes Properties|  |\n| <a name=\"127\">127</a>|Cannot Modify Default Data Type|  |\n| <a name=\"128\">128</a>|Group Already Exists|  |\n| <a name=\"129\">129</a>|No Such Data Type|  |\n| <a name=\"130\">130</a>|Undefined Value For Data Type|  |\n| <a name=\"131\">131</a>|Unsupported Value Type Defined On Data Type|  |\n| <a name=\"132\">132</a>|Validation Error|  |\n| <a name=\"133\">133</a>|Loop Detected In Group Hierarchy|  |\n| <a name=\"134\">134</a>|Undefined Acceptable Values|  |\n| <a name=\"135\">135</a>|Sub Group Already Exists|  |\n| <a name=\"138\">138</a>|Price Source Not Found|  |\n| <a name=\"139\">139</a>|Analytic Store Not Found|  |\n| <a name=\"141\">141</a>|Analytic Store Already Exists|  |\n| <a name=\"143\">143</a>|Client Instrument Already Exists|  |\n| <a name=\"144\">144</a>|Duplicate In Parameter Set|  |\n| <a name=\"147\">147</a>|Results Not Found|  |\n| <a name=\"148\">148</a>|Order Field Not In Result Set|  |\n| <a name=\"149\">149</a>|Operation Failed|  |\n| <a name=\"150\">150</a>|Elastic Search Error|  |\n| <a name=\"151\">151</a>|Invalid Parameter Value|  |\n| <a name=\"153\">153</a>|Command Processing Failure|  |\n| <a name=\"154\">154</a>|Entity State Construction Failure|  |\n| <a name=\"155\">155</a>|Entity Timeline Does Not Exist|  |\n| <a name=\"156\">156</a>|Concurrency Conflict Failure|  |\n| <a name=\"157\">157</a>|Invalid Request|  |\n| <a name=\"158\">158</a>|Event Publish Unknown|  |\n| <a name=\"159\">159</a>|Event Query Failure|  |\n| <a name=\"160\">160</a>|Blob Did Not Exist|  |\n| <a name=\"162\">162</a>|Sub System Request Failure|  |\n| <a name=\"163\">163</a>|Sub System Configuration Failure|  |\n| <a name=\"165\">165</a>|Failed To Delete|  |\n| <a name=\"166\">166</a>|Upsert Client Instrument Failure|  |\n| <a name=\"167\">167</a>|Illegal As At Interval|  |\n| <a name=\"168\">168</a>|Illegal Bitemporal Query|  |\n| <a name=\"169\">169</a>|Invalid Alternate Id|  |\n| <a name=\"170\">170</a>|Cannot Add Source Portfolio Property Explicitly|  |\n| <a name=\"171\">171</a>|Entity Already Exists In Group|  |\n| <a name=\"173\">173</a>|Entity With Id Already Exists|  |\n| <a name=\"174\">174</a>|Derived Portfolio Details Do Not Exist|  |\n| <a name=\"175\">175</a>|Entity Not In Group|  |\n| <a name=\"176\">176</a>|Portfolio With Name Already Exists|  |\n| <a name=\"177\">177</a>|Invalid Transactions|  |\n| <a name=\"178\">178</a>|Reference Portfolio Not Found|  |\n| <a name=\"179\">179</a>|Duplicate Id|  |\n| <a name=\"180\">180</a>|Command Retrieval Failure|  |\n| <a name=\"181\">181</a>|Data Filter Application Failure|  |\n| <a name=\"182\">182</a>|Search Failed|  |\n| <a name=\"183\">183</a>|Movements Engine Configuration Key Failure|  |\n| <a name=\"184\">184</a>|Fx Rate Source Not Found|  |\n| <a name=\"185\">185</a>|Accrual Source Not Found|  |\n| <a name=\"186\">186</a>|Access Denied|  |\n| <a name=\"187\">187</a>|Invalid Identity Token|  |\n| <a name=\"188\">188</a>|Invalid Request Headers|  |\n| <a name=\"189\">189</a>|Price Not Found|  |\n| <a name=\"190\">190</a>|Invalid Sub Holding Keys Provided|  |\n| <a name=\"191\">191</a>|Duplicate Sub Holding Keys Provided|  |\n| <a name=\"192\">192</a>|Cut Definition Not Found|  |\n| <a name=\"193\">193</a>|Cut Definition Invalid|  |\n| <a name=\"194\">194</a>|Time Variant Property Deletion Date Unspecified|  |\n| <a name=\"195\">195</a>|Perpetual Property Deletion Date Specified|  |\n| <a name=\"196\">196</a>|Time Variant Property Upsert Date Unspecified|  |\n| <a name=\"197\">197</a>|Perpetual Property Upsert Date Specified|  |\n| <a name=\"200\">200</a>|Invalid Unit For Data Type|  |\n| <a name=\"201\">201</a>|Invalid Type For Data Type|  |\n| <a name=\"202\">202</a>|Invalid Value For Data Type|  |\n| <a name=\"203\">203</a>|Unit Not Defined For Data Type|  |\n| <a name=\"204\">204</a>|Units Not Supported On Data Type|  |\n| <a name=\"205\">205</a>|Cannot Specify Units On Data Type|  |\n| <a name=\"206\">206</a>|Unit Schema Inconsistent With Data Type|  |\n| <a name=\"207\">207</a>|Unit Definition Not Specified|  |\n| <a name=\"208\">208</a>|Duplicate Unit Definitions Specified|  |\n| <a name=\"209\">209</a>|Invalid Units Definition|  |\n| <a name=\"210\">210</a>|Invalid Instrument Identifier Unit|  |\n| <a name=\"211\">211</a>|Holdings Adjustment Does Not Exist|  |\n| <a name=\"212\">212</a>|Could Not Build Excel Url|  |\n| <a name=\"213\">213</a>|Could Not Get Excel Version|  |\n| <a name=\"214\">214</a>|Instrument By Code Not Found|  |\n| <a name=\"215\">215</a>|Entity Schema Does Not Exist|  |\n| <a name=\"216\">216</a>|Feature Not Supported On Portfolio Type|  |\n| <a name=\"217\">217</a>|Quote Not Found|  |\n| <a name=\"218\">218</a>|Invalid Quote Identifier|  |\n| <a name=\"219\">219</a>|Invalid Metric For Data Type|  |\n| <a name=\"220\">220</a>|Invalid Instrument Definition|  |\n| <a name=\"221\">221</a>|Instrument Upsert Failure|  |\n| <a name=\"222\">222</a>|Reference Portfolio Request Not Supported|  |\n| <a name=\"223\">223</a>|Transaction Portfolio Request Not Supported|  |\n| <a name=\"224\">224</a>|Invalid Property Value Assignment|  |\n| <a name=\"230\">230</a>|Transaction Type Not Found|  |\n| <a name=\"231\">231</a>|Transaction Type Duplication|  |\n| <a name=\"232\">232</a>|Portfolio Does Not Exist At Given Date|  |\n| <a name=\"233\">233</a>|Query Parser Failure|  |\n| <a name=\"234\">234</a>|Duplicate Constituent|  |\n| <a name=\"235\">235</a>|Unresolved Instrument Constituent|  |\n| <a name=\"236\">236</a>|Unresolved Instrument In Transition|  |\n| <a name=\"237\">237</a>|Missing Side Definitions|  |\n| <a name=\"299\">299</a>|Invalid Recipe|  |\n| <a name=\"300\">300</a>|Missing Recipe|  |\n| <a name=\"301\">301</a>|Dependencies|  |\n| <a name=\"304\">304</a>|Portfolio Preprocess Failure|  |\n| <a name=\"310\">310</a>|Valuation Engine Failure|  |\n| <a name=\"311\">311</a>|Task Factory Failure|  |\n| <a name=\"312\">312</a>|Task Evaluation Failure|  |\n| <a name=\"313\">313</a>|Task Generation Failure|  |\n| <a name=\"314\">314</a>|Engine Configuration Failure|  |\n| <a name=\"315\">315</a>|Model Specification Failure|  |\n| <a name=\"320\">320</a>|Market Data Key Failure|  |\n| <a name=\"321\">321</a>|Market Resolver Failure|  |\n| <a name=\"322\">322</a>|Market Data Failure|  |\n| <a name=\"330\">330</a>|Curve Failure|  |\n| <a name=\"331\">331</a>|Volatility Surface Failure|  |\n| <a name=\"332\">332</a>|Volatility Cube Failure|  |\n| <a name=\"350\">350</a>|Instrument Failure|  |\n| <a name=\"351\">351</a>|Cash Flows Failure|  |\n| <a name=\"352\">352</a>|Reference Data Failure|  |\n| <a name=\"360\">360</a>|Aggregation Failure|  |\n| <a name=\"361\">361</a>|Aggregation Measure Failure|  |\n| <a name=\"370\">370</a>|Result Retrieval Failure|  |\n| <a name=\"371\">371</a>|Result Processing Failure|  |\n| <a name=\"372\">372</a>|Vendor Result Processing Failure|  |\n| <a name=\"373\">373</a>|Vendor Result Mapping Failure|  |\n| <a name=\"374\">374</a>|Vendor Library Unauthorised|  |\n| <a name=\"375\">375</a>|Vendor Connectivity Error|  |\n| <a name=\"376\">376</a>|Vendor Interface Error|  |\n| <a name=\"377\">377</a>|Vendor Pricing Failure|  |\n| <a name=\"378\">378</a>|Vendor Translation Failure|  |\n| <a name=\"379\">379</a>|Vendor Key Mapping Failure|  |\n| <a name=\"380\">380</a>|Vendor Reflection Failure|  |\n| <a name=\"381\">381</a>|Vendor Process Failure|  |\n| <a name=\"382\">382</a>|Vendor System Failure|  |\n| <a name=\"390\">390</a>|Attempt To Upsert Duplicate Quotes|  |\n| <a name=\"391\">391</a>|Corporate Action Source Does Not Exist|  |\n| <a name=\"392\">392</a>|Corporate Action Source Already Exists|  |\n| <a name=\"393\">393</a>|Instrument Identifier Already In Use|  |\n| <a name=\"394\">394</a>|Properties Not Found|  |\n| <a name=\"395\">395</a>|Batch Operation Aborted|  |\n| <a name=\"400\">400</a>|Invalid Iso4217 Currency Code|  |\n| <a name=\"401\">401</a>|Cannot Assign Instrument Identifier To Currency|  |\n| <a name=\"402\">402</a>|Cannot Assign Currency Identifier To Non Currency|  |\n| <a name=\"403\">403</a>|Currency Instrument Cannot Be Deleted|  |\n| <a name=\"404\">404</a>|Currency Instrument Cannot Have Economic Definition|  |\n| <a name=\"405\">405</a>|Currency Instrument Cannot Have Lookthrough Portfolio|  |\n| <a name=\"406\">406</a>|Cannot Create Currency Instrument With Multiple Identifiers|  |\n| <a name=\"407\">407</a>|Specified Currency Is Undefined|  |\n| <a name=\"410\">410</a>|Index Does Not Exist|  |\n| <a name=\"411\">411</a>|Sort Field Does Not Exist|  |\n| <a name=\"413\">413</a>|Negative Pagination Parameters|  |\n| <a name=\"414\">414</a>|Invalid Search Syntax|  |\n| <a name=\"415\">415</a>|Filter Execution Timeout|  |\n| <a name=\"420\">420</a>|Side Definition Inconsistent|  |\n| <a name=\"450\">450</a>|Invalid Quote Access Metadata Rule|  |\n| <a name=\"451\">451</a>|Access Metadata Not Found|  |\n| <a name=\"452\">452</a>|Invalid Access Metadata Identifier|  |\n| <a name=\"460\">460</a>|Standard Resource Not Found|  |\n| <a name=\"461\">461</a>|Standard Resource Conflict|  |\n| <a name=\"462\">462</a>|Calendar Not Found|  |\n| <a name=\"463\">463</a>|Date In A Calendar Not Found|  |\n| <a name=\"464\">464</a>|Invalid Date Source Data|  |\n| <a name=\"465\">465</a>|Invalid Timezone|  |\n| <a name=\"601\">601</a>|Person Identifier Already In Use|  |\n| <a name=\"602\">602</a>|Person Not Found|  |\n| <a name=\"603\">603</a>|Cannot Set Identifier|  |\n| <a name=\"617\">617</a>|Invalid Recipe Specification In Request|  |\n| <a name=\"618\">618</a>|Inline Recipe Deserialisation Failure|  |\n| <a name=\"619\">619</a>|Identifier Types Not Set For Entity|  |\n| <a name=\"620\">620</a>|Cannot Delete All Client Defined Identifiers|  |\n| <a name=\"650\">650</a>|The Order requested was not found.|  |\n| <a name=\"654\">654</a>|The Allocation requested was not found.|  |\n| <a name=\"655\">655</a>|Cannot build the fx forward target with the given holdings.|  |\n| <a name=\"656\">656</a>|Group does not contain expected entities.|  |\n| <a name=\"665\">665</a>|Destination directory not found|  |\n| <a name=\"667\">667</a>|Relation definition already exists|  |\n| <a name=\"672\">672</a>|Could not retrieve file contents|  |\n| <a name=\"673\">673</a>|Missing entitlements for entities in Group|  |\n| <a name=\"674\">674</a>|Next Best Action not found|  |\n| <a name=\"676\">676</a>|Relation definition not defined|  |\n| <a name=\"677\">677</a>|Invalid entity identifier for relation|  |\n| <a name=\"681\">681</a>|Sorting by specified field not supported|One or more of the provided fields to order by were either invalid or not supported. |\n| <a name=\"682\">682</a>|Too many fields to sort by|The number of fields to sort the data by exceeds the number allowed by the endpoint |\n| <a name=\"684\">684</a>|Sequence Not Found|  |\n| <a name=\"685\">685</a>|Sequence Already Exists|  |\n| <a name=\"686\">686</a>|Non-cycling sequence has been exhausted|  |\n| <a name=\"687\">687</a>|Legal Entity Identifier Already In Use|  |\n| <a name=\"688\">688</a>|Legal Entity Not Found|  |\n| <a name=\"689\">689</a>|The supplied pagination token is invalid|  |\n| <a name=\"690\">690</a>|Property Type Is Not Supported|  |\n| <a name=\"691\">691</a>|Multiple Tax-lots For Currency Type Is Not Supported|  |\n| <a name=\"692\">692</a>|This endpoint does not support impersonation|  |\n| <a name=\"693\">693</a>|Entity type is not supported for Relationship|  |\n| <a name=\"694\">694</a>|Relationship Validation Failure|  |\n| <a name=\"695\">695</a>|Relationship Not Found|  |\n| <a name=\"697\">697</a>|Derived Property Formula No Longer Valid|  |\n| <a name=\"698\">698</a>|Story is not available|  |\n| <a name=\"703\">703</a>|Corporate Action Does Not Exist|  |\n| <a name=\"720\">720</a>|The provided sort and filter combination is not valid|  |\n| <a name=\"721\">721</a>|A2B generation failed|  |\n| <a name=\"722\">722</a>|Aggregated Return Calculation Failure|  |\n| <a name=\"723\">723</a>|Custom Entity Definition Identifier Already In Use|  |\n| <a name=\"724\">724</a>|Custom Entity Definition Not Found|  |\n| <a name=\"725\">725</a>|The Placement requested was not found.|  |\n| <a name=\"726\">726</a>|The Execution requested was not found.|  |\n| <a name=\"727\">727</a>|The Block requested was not found.|  |\n| <a name=\"728\">728</a>|The Participation requested was not found.|  |\n| <a name=\"729\">729</a>|The Package requested was not found.|  |\n| <a name=\"730\">730</a>|The OrderInstruction requested was not found.|  |\n| <a name=\"732\">732</a>|Custom Entity not found.|  |\n| <a name=\"733\">733</a>|Custom Entity Identifier already in use.|  |\n| <a name=\"735\">735</a>|Calculation Failed.|  |\n| <a name=\"736\">736</a>|An expected key on HttpResponse is missing.|  |\n| <a name=\"737\">737</a>|A required fee detail is missing.|  |\n| <a name=\"738\">738</a>|Zero rows were returned from Luminesce|  |\n| <a name=\"739\">739</a>|Provided Weekend Mask was invalid|  |\n| <a name=\"742\">742</a>|Custom Entity fields do not match the definition|  |\n| <a name=\"746\">746</a>|The provided sequence is not valid.|  |\n| <a name=\"751\">751</a>|The type of the Custom Entity is different than the type provided in the definition.|  |\n| <a name=\"752\">752</a>|Luminesce process returned an error.|  |\n| <a name=\"753\">753</a>|File name or content incompatible with operation.|  |\n| <a name=\"755\">755</a>|Schema of response from Drive is not as expected.|  |\n| <a name=\"757\">757</a>|Schema of response from Luminesce is not as expected.|  |\n| <a name=\"758\">758</a>|Luminesce timed out.|  |\n| <a name=\"763\">763</a>|Invalid Lusid Entity Identifier Unit|  |\n| <a name=\"768\">768</a>|Fee rule not found.|  |\n| <a name=\"769\">769</a>|Cannot update the base currency of a portfolio with transactions loaded|  |\n| <a name=\"771\">771</a>|Transaction configuration source not found|  |\n| <a name=\"774\">774</a>|Compliance rule not found.|  |\n| <a name=\"775\">775</a>|Fund accounting document cannot be processed.|  |\n| <a name=\"778\">778</a>|Unable to look up FX rate from trade ccy to portfolio ccy for some of the trades.|  |\n| <a name=\"782\">782</a>|The Property definition dataType is not matching the derivation formula dataType|  |\n| <a name=\"783\">783</a>|The Property definition domain is not supported for derived properties|  |\n| <a name=\"788\">788</a>|Compliance run not found failure.|  |\n| <a name=\"790\">790</a>|Custom Entity has missing or invalid identifiers|  |\n| <a name=\"791\">791</a>|Custom Entity definition already exists|  |\n| <a name=\"792\">792</a>|Compliance PropertyKey is missing.|  |\n| <a name=\"793\">793</a>|Compliance Criteria Value for matching is missing.|  |\n| <a name=\"795\">795</a>|Cannot delete identifier definition|  |\n| <a name=\"796\">796</a>|Tax rule set not found.|  |\n| <a name=\"797\">797</a>|A tax rule set with this id already exists.|  |\n| <a name=\"798\">798</a>|Multiple rule sets for the same property key are applicable.|  |\n| <a name=\"800\">800</a>|Can not upsert an instrument event of this type.|  |\n| <a name=\"801\">801</a>|The instrument event does not exist.|  |\n| <a name=\"802\">802</a>|The Instrument event is missing salient information.|  |\n| <a name=\"803\">803</a>|The Instrument event could not be processed.|  |\n| <a name=\"804\">804</a>|Some data requested does not follow the order graph assumptions.|  |\n| <a name=\"811\">811</a>|A price could not be found for an order.|  |\n| <a name=\"812\">812</a>|A price could not be found for an allocation.|  |\n| <a name=\"813\">813</a>|Chart of Accounts not found.|  |\n| <a name=\"814\">814</a>|Account not found.|  |\n| <a name=\"815\">815</a>|Abor not found.|  |\n| <a name=\"816\">816</a>|Abor Configuration not found.|  |\n| <a name=\"817\">817</a>|Reconciliation mapping not found|  |\n| <a name=\"818\">818</a>|Attribute type could not be deleted because it doesn't exist.|  |\n| <a name=\"819\">819</a>|Reconciliation not found.|  |\n| <a name=\"820\">820</a>|Custodian Account not found.|  |\n| <a name=\"821\">821</a>|Allocation Failure|  |\n| <a name=\"822\">822</a>|Reconciliation run not found|  |\n| <a name=\"823\">823</a>|Reconciliation break not found|  |\n| <a name=\"824\">824</a>|Entity link type could not be deleted because it doesn't exist.|  |\n| <a name=\"828\">828</a>|Address key definition not found.|  |\n| <a name=\"829\">829</a>|Compliance template not found.|  |\n| <a name=\"830\">830</a>|Action not supported|  |\n| <a name=\"831\">831</a>|Reference list not found.|  |\n| <a name=\"832\">832</a>|Posting Module not found.|  |\n| <a name=\"833\">833</a>|The type of parameter provided did not match that required by the compliance rule.|  |\n| <a name=\"834\">834</a>|The parameters provided by a rule did not match those required by its template.|  |\n| <a name=\"835\">835</a>|PostingModuleRule has a not allowed Property Domain.|  |\n",
    "termsOfService": "https://www.finbourne.com/legal/terms-conditions",
    "contact": {
      "name": "FINBOURNE Technology",
      "url": "https://www.finbourne.com",
      "email": "info@finbourne.com"
    },
    "version": "1.0.285",
    "x-logo": {
      "url": "https://www.lusid.com/app/assets/logo_white.png",
      "backgroundColor": "#415464"
    }
  },
  "servers": [
    {
      "url": "https://www.lusid.com/api"
    }
  ],
  "paths": {
    "/api/addresskeydefinitions": {
      "post": {
        "tags": [
          "AddressKeyDefinition"
        ],
        "summary": "[EARLY ACCESS] CreateAddressKeyDefinition: Create an AddressKeyDefinition.",
        "description": "Create the given address key definition.",
        "operationId": "CreateAddressKeyDefinition",
        "requestBody": {
          "description": "The request used to create the address key definition.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/CreateAddressKeyDefinitionRequest"
              },
              "example": {
                "addressKey": "Instrument/default/LusidInstrumentId",
                "type": "Text"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateAddressKeyDefinitionRequest"
              },
              "example": {
                "addressKey": "Instrument/default/LusidInstrumentId",
                "type": "Text"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateAddressKeyDefinitionRequest"
              },
              "example": {
                "addressKey": "Instrument/default/LusidInstrumentId",
                "type": "Text"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/CreateAddressKeyDefinitionRequest"
              },
              "example": {
                "addressKey": "Instrument/default/LusidInstrumentId",
                "type": "Text"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "The newly created address key definition.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/AddressKeyDefinition"
                },
                "example": {
                  "addressKey": "Instrument/default/LusidInstrumentId",
                  "type": "Text",
                  "version": {
                    "effectiveFrom": "2020-01-01T00:00:00.0000000+00:00",
                    "asAtDate": "2023-01-01T00:00:00.0000000+00:00"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AddressKeyDefinition"
                },
                "example": {
                  "addressKey": "Instrument/default/LusidInstrumentId",
                  "type": "Text",
                  "version": {
                    "effectiveFrom": "2020-01-01T00:00:00.0000000+00:00",
                    "asAtDate": "2023-01-01T00:00:00.0000000+00:00"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/AddressKeyDefinition"
                },
                "example": {
                  "addressKey": "Instrument/default/LusidInstrumentId",
                  "type": "Text",
                  "version": {
                    "effectiveFrom": "2020-01-01T00:00:00.0000000+00:00",
                    "asAtDate": "2023-01-01T00:00:00.0000000+00:00"
                  }
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      },
      "get": {
        "tags": [
          "AddressKeyDefinition"
        ],
        "summary": "[EARLY ACCESS] ListAddressKeyDefinitions: List AddressKeyDefinitions.",
        "description": "Fetch the last pre-AsAt date version of each address key definition.",
        "operationId": "ListAddressKeyDefinitions",
        "parameters": [
          {
            "name": "asAt",
            "in": "query",
            "description": "The asAt datetime at which to retrieve the address key definition.\r\n            Defaults to return the latest version of the address key definition if not specified.",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "x-nullable": true
          },
          {
            "name": "page",
            "in": "query",
            "description": "The pagination token to use to continue listing address key definitions from a previous call to list address key definitions.\r\n            This value is returned from the previous call. If a pagination token is provided the sortBy, filter, effectiveAt, and asAt fields\r\n            must not have changed since the original request.",
            "schema": {
              "maxLength": 500,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\+/]*={0,3}$",
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "When paginating, limit the number of returned results to this many.",
            "schema": {
              "maximum": 5000,
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            },
            "x-nullable": true
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Expression to filter the result set. Read more about filtering results from LUSID here:\r\n            https://support.lusid.com/filtering-results-from-lusid.",
            "schema": {
              "maxLength": 16384,
              "minLength": 0,
              "pattern": "^[\\s\\S]*$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A collection of address key definitions.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PagedResourceListOfAddressKeyDefinition"
                },
                "example": {
                  "values": [
                    {
                      "addressKey": "Instrument/default/LusidInstrumentId",
                      "type": "Text",
                      "version": {
                        "effectiveFrom": "2020-01-01T00:00:00.0000000+00:00",
                        "asAtDate": "2023-01-01T00:00:00.0000000+00:00"
                      }
                    },
                    {
                      "addressKey": "Holding/default/PortfolioCost",
                      "type": "Decimal",
                      "version": {
                        "effectiveFrom": "2020-01-01T00:00:00.0000000+00:00",
                        "asAtDate": "2023-01-01T00:00:00.0000000+00:00"
                      }
                    }
                  ],
                  "href": "http://example.com",
                  "links": []
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagedResourceListOfAddressKeyDefinition"
                },
                "example": {
                  "values": [
                    {
                      "addressKey": "Instrument/default/LusidInstrumentId",
                      "type": "Text",
                      "version": {
                        "effectiveFrom": "2020-01-01T00:00:00.0000000+00:00",
                        "asAtDate": "2023-01-01T00:00:00.0000000+00:00"
                      }
                    },
                    {
                      "addressKey": "Holding/default/PortfolioCost",
                      "type": "Decimal",
                      "version": {
                        "effectiveFrom": "2020-01-01T00:00:00.0000000+00:00",
                        "asAtDate": "2023-01-01T00:00:00.0000000+00:00"
                      }
                    }
                  ],
                  "href": "http://example.com",
                  "links": []
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagedResourceListOfAddressKeyDefinition"
                },
                "example": {
                  "values": [
                    {
                      "addressKey": "Instrument/default/LusidInstrumentId",
                      "type": "Text",
                      "version": {
                        "effectiveFrom": "2020-01-01T00:00:00.0000000+00:00",
                        "asAtDate": "2023-01-01T00:00:00.0000000+00:00"
                      }
                    },
                    {
                      "addressKey": "Holding/default/PortfolioCost",
                      "type": "Decimal",
                      "version": {
                        "effectiveFrom": "2020-01-01T00:00:00.0000000+00:00",
                        "asAtDate": "2023-01-01T00:00:00.0000000+00:00"
                      }
                    }
                  ],
                  "href": "http://example.com",
                  "links": []
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      }
    },
    "/api/addresskeydefinitions/{key}": {
      "get": {
        "tags": [
          "AddressKeyDefinition"
        ],
        "summary": "[EARLY ACCESS] GetAddressKeyDefinition: Get an AddressKeyDefinition.",
        "description": "Get the address key definition with the given address key at the specific asAt time.",
        "operationId": "GetAddressKeyDefinition",
        "parameters": [
          {
            "name": "key",
            "in": "path",
            "description": "The address key of the address key definition.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The key that uniquely identifies a queryable address in Lusid."
            }
          },
          {
            "name": "asAt",
            "in": "query",
            "description": "The asAt datetime at which to retrieve the address key definition. Defaults to return the latest version of the address key definition if not specified.",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "description": "The address key definition with the given address key.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/AddressKeyDefinition"
                },
                "example": {
                  "addressKey": "Instrument/default/LusidInstrumentId",
                  "type": "Text",
                  "version": {
                    "effectiveFrom": "2020-01-01T00:00:00.0000000+00:00",
                    "asAtDate": "2023-01-01T00:00:00.0000000+00:00"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AddressKeyDefinition"
                },
                "example": {
                  "addressKey": "Instrument/default/LusidInstrumentId",
                  "type": "Text",
                  "version": {
                    "effectiveFrom": "2020-01-01T00:00:00.0000000+00:00",
                    "asAtDate": "2023-01-01T00:00:00.0000000+00:00"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/AddressKeyDefinition"
                },
                "example": {
                  "addressKey": "Instrument/default/LusidInstrumentId",
                  "type": "Text",
                  "version": {
                    "effectiveFrom": "2020-01-01T00:00:00.0000000+00:00",
                    "asAtDate": "2023-01-01T00:00:00.0000000+00:00"
                  }
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      }
    },
    "/api/aggregation/$valuation": {
      "post": {
        "tags": [
          "Aggregation"
        ],
        "summary": "GetValuation: Perform valuation for a list of portfolios and/or portfolio groups",
        "description": "Perform valuation on specified list of portfolio and/or portfolio groups for a set of dates.",
        "operationId": "GetValuation",
        "requestBody": {
          "description": "The request specifying the set of portfolios and dates on which to calculate a set of valuation metrics",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/ValuationRequest"
              },
              "example": {
                "recipeId": {
                  "scope": "MyRecipeScope",
                  "code": "default"
                },
                "asAt": "2018-03-05T00:00:00.0000000+00:00",
                "metrics": [
                  {
                    "key": "Instrument/default/Name",
                    "op": "Value",
                    "options": {}
                  },
                  {
                    "key": "Holding/default/PV",
                    "op": "Value",
                    "options": {}
                  }
                ],
                "groupBy": [
                  "Instrument/default/Name"
                ],
                "sort": [
                  {
                    "key": "Instrument/default/RIC",
                    "sortOrder": "Ascending"
                  }
                ],
                "reportCurrency": "USD",
                "equipWithSubtotals": false,
                "returnResultAsExpandedTypes": false,
                "portfolioEntityIds": [
                  {
                    "scope": "PortfolioScope1",
                    "code": "MyPortfolioAbC",
                    "portfolioEntityType": "SinglePortfolio"
                  },
                  {
                    "scope": "PortfolioScope2",
                    "code": "MyPortfolioDeF",
                    "portfolioEntityType": "SinglePortfolio"
                  }
                ],
                "valuationSchedule": {
                  "effectiveFrom": "2018-03-05T00:00:00.0000000+00:00",
                  "effectiveAt": "2018-03-05T00:00:00.0000000+00:00",
                  "tenor": "1D",
                  "rollConvention": "F",
                  "holidayCalendars": [],
                  "valuationDateTimes": []
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ValuationRequest"
              },
              "example": {
                "recipeId": {
                  "scope": "MyRecipeScope",
                  "code": "default"
                },
                "asAt": "2018-03-05T00:00:00.0000000+00:00",
                "metrics": [
                  {
                    "key": "Instrument/default/Name",
                    "op": "Value",
                    "options": {}
                  },
                  {
                    "key": "Holding/default/PV",
                    "op": "Value",
                    "options": {}
                  }
                ],
                "groupBy": [
                  "Instrument/default/Name"
                ],
                "sort": [
                  {
                    "key": "Instrument/default/RIC",
                    "sortOrder": "Ascending"
                  }
                ],
                "reportCurrency": "USD",
                "equipWithSubtotals": false,
                "returnResultAsExpandedTypes": false,
                "portfolioEntityIds": [
                  {
                    "scope": "PortfolioScope1",
                    "code": "MyPortfolioAbC",
                    "portfolioEntityType": "SinglePortfolio"
                  },
                  {
                    "scope": "PortfolioScope2",
                    "code": "MyPortfolioDeF",
                    "portfolioEntityType": "SinglePortfolio"
                  }
                ],
                "valuationSchedule": {
                  "effectiveFrom": "2018-03-05T00:00:00.0000000+00:00",
                  "effectiveAt": "2018-03-05T00:00:00.0000000+00:00",
                  "tenor": "1D",
                  "rollConvention": "F",
                  "holidayCalendars": [],
                  "valuationDateTimes": []
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ValuationRequest"
              },
              "example": {
                "recipeId": {
                  "scope": "MyRecipeScope",
                  "code": "default"
                },
                "asAt": "2018-03-05T00:00:00.0000000+00:00",
                "metrics": [
                  {
                    "key": "Instrument/default/Name",
                    "op": "Value",
                    "options": {}
                  },
                  {
                    "key": "Holding/default/PV",
                    "op": "Value",
                    "options": {}
                  }
                ],
                "groupBy": [
                  "Instrument/default/Name"
                ],
                "sort": [
                  {
                    "key": "Instrument/default/RIC",
                    "sortOrder": "Ascending"
                  }
                ],
                "reportCurrency": "USD",
                "equipWithSubtotals": false,
                "returnResultAsExpandedTypes": false,
                "portfolioEntityIds": [
                  {
                    "scope": "PortfolioScope1",
                    "code": "MyPortfolioAbC",
                    "portfolioEntityType": "SinglePortfolio"
                  },
                  {
                    "scope": "PortfolioScope2",
                    "code": "MyPortfolioDeF",
                    "portfolioEntityType": "SinglePortfolio"
                  }
                ],
                "valuationSchedule": {
                  "effectiveFrom": "2018-03-05T00:00:00.0000000+00:00",
                  "effectiveAt": "2018-03-05T00:00:00.0000000+00:00",
                  "tenor": "1D",
                  "rollConvention": "F",
                  "holidayCalendars": [],
                  "valuationDateTimes": []
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ValuationRequest"
              },
              "example": {
                "recipeId": {
                  "scope": "MyRecipeScope",
                  "code": "default"
                },
                "asAt": "2018-03-05T00:00:00.0000000+00:00",
                "metrics": [
                  {
                    "key": "Instrument/default/Name",
                    "op": "Value",
                    "options": {}
                  },
                  {
                    "key": "Holding/default/PV",
                    "op": "Value",
                    "options": {}
                  }
                ],
                "groupBy": [
                  "Instrument/default/Name"
                ],
                "sort": [
                  {
                    "key": "Instrument/default/RIC",
                    "sortOrder": "Ascending"
                  }
                ],
                "reportCurrency": "USD",
                "equipWithSubtotals": false,
                "returnResultAsExpandedTypes": false,
                "portfolioEntityIds": [
                  {
                    "scope": "PortfolioScope1",
                    "code": "MyPortfolioAbC",
                    "portfolioEntityType": "SinglePortfolio"
                  },
                  {
                    "scope": "PortfolioScope2",
                    "code": "MyPortfolioDeF",
                    "portfolioEntityType": "SinglePortfolio"
                  }
                ],
                "valuationSchedule": {
                  "effectiveFrom": "2018-03-05T00:00:00.0000000+00:00",
                  "effectiveAt": "2018-03-05T00:00:00.0000000+00:00",
                  "tenor": "1D",
                  "rollConvention": "F",
                  "holidayCalendars": [],
                  "valuationDateTimes": []
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ListAggregationResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListAggregationResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListAggregationResponse"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Stable"
      }
    },
    "/api/aggregation/$valuationinlined": {
      "post": {
        "tags": [
          "Aggregation"
        ],
        "summary": "GetValuationOfWeightedInstruments: Perform valuation for an inlined portfolio",
        "description": "Perform valuation on the portfolio that is defined by the weighted set of instruments passed to the request.",
        "operationId": "GetValuationOfWeightedInstruments",
        "requestBody": {
          "description": "The request specifying the set of portfolios and dates on which to calculate a set of valuation metrics",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/InlineValuationRequest"
              },
              "example": {
                "recipeId": {
                  "scope": "MyRecipeScope",
                  "code": "default"
                },
                "asAt": "2018-03-05T00:00:00.0000000+00:00",
                "metrics": [
                  {
                    "key": "Instrument/default/Name",
                    "op": "Value",
                    "options": {}
                  },
                  {
                    "key": "Holding/default/PV",
                    "op": "Value",
                    "options": {}
                  }
                ],
                "groupBy": [
                  "Instrument/default/Name"
                ],
                "reportCurrency": "USD",
                "equipWithSubtotals": false,
                "returnResultAsExpandedTypes": false,
                "valuationSchedule": {
                  "effectiveFrom": "2018-03-05T00:00:00.0000000+00:00",
                  "effectiveAt": "2018-03-05T00:00:00.0000000+00:00",
                  "tenor": "1D",
                  "rollConvention": "F",
                  "holidayCalendars": [],
                  "valuationDateTimes": []
                },
                "instruments": [
                  {
                    "quantity": 10000,
                    "holdingIdentifier": "my-holding-on-some-date",
                    "instrument": {
                      "startDate": "2018-03-05T00:00:00.0000000+00:00",
                      "maturityDate": "2018-04-04T00:00:00.0000000+00:00",
                      "domAmount": 100,
                      "domCcy": "GBP",
                      "fgnAmount": -150,
                      "fgnCcy": "USD",
                      "refSpotRate": 1.5,
                      "isNdf": false,
                      "fixingDate": "0001-01-01T00:00:00.0000000+00:00",
                      "instrumentType": "FxForward"
                    }
                  }
                ]
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InlineValuationRequest"
              },
              "example": {
                "recipeId": {
                  "scope": "MyRecipeScope",
                  "code": "default"
                },
                "asAt": "2018-03-05T00:00:00.0000000+00:00",
                "metrics": [
                  {
                    "key": "Instrument/default/Name",
                    "op": "Value",
                    "options": {}
                  },
                  {
                    "key": "Holding/default/PV",
                    "op": "Value",
                    "options": {}
                  }
                ],
                "groupBy": [
                  "Instrument/default/Name"
                ],
                "reportCurrency": "USD",
                "equipWithSubtotals": false,
                "returnResultAsExpandedTypes": false,
                "valuationSchedule": {
                  "effectiveFrom": "2018-03-05T00:00:00.0000000+00:00",
                  "effectiveAt": "2018-03-05T00:00:00.0000000+00:00",
                  "tenor": "1D",
                  "rollConvention": "F",
                  "holidayCalendars": [],
                  "valuationDateTimes": []
                },
                "instruments": [
                  {
                    "quantity": 10000,
                    "holdingIdentifier": "my-holding-on-some-date",
                    "instrument": {
                      "startDate": "2018-03-05T00:00:00.0000000+00:00",
                      "maturityDate": "2018-04-04T00:00:00.0000000+00:00",
                      "domAmount": 100,
                      "domCcy": "GBP",
                      "fgnAmount": -150,
                      "fgnCcy": "USD",
                      "refSpotRate": 1.5,
                      "isNdf": false,
                      "fixingDate": "0001-01-01T00:00:00.0000000+00:00",
                      "instrumentType": "FxForward"
                    }
                  }
                ]
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/InlineValuationRequest"
              },
              "example": {
                "recipeId": {
                  "scope": "MyRecipeScope",
                  "code": "default"
                },
                "asAt": "2018-03-05T00:00:00.0000000+00:00",
                "metrics": [
                  {
                    "key": "Instrument/default/Name",
                    "op": "Value",
                    "options": {}
                  },
                  {
                    "key": "Holding/default/PV",
                    "op": "Value",
                    "options": {}
                  }
                ],
                "groupBy": [
                  "Instrument/default/Name"
                ],
                "reportCurrency": "USD",
                "equipWithSubtotals": false,
                "returnResultAsExpandedTypes": false,
                "valuationSchedule": {
                  "effectiveFrom": "2018-03-05T00:00:00.0000000+00:00",
                  "effectiveAt": "2018-03-05T00:00:00.0000000+00:00",
                  "tenor": "1D",
                  "rollConvention": "F",
                  "holidayCalendars": [],
                  "valuationDateTimes": []
                },
                "instruments": [
                  {
                    "quantity": 10000,
                    "holdingIdentifier": "my-holding-on-some-date",
                    "instrument": {
                      "startDate": "2018-03-05T00:00:00.0000000+00:00",
                      "maturityDate": "2018-04-04T00:00:00.0000000+00:00",
                      "domAmount": 100,
                      "domCcy": "GBP",
                      "fgnAmount": -150,
                      "fgnCcy": "USD",
                      "refSpotRate": 1.5,
                      "isNdf": false,
                      "fixingDate": "0001-01-01T00:00:00.0000000+00:00",
                      "instrumentType": "FxForward"
                    }
                  }
                ]
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/InlineValuationRequest"
              },
              "example": {
                "recipeId": {
                  "scope": "MyRecipeScope",
                  "code": "default"
                },
                "asAt": "2018-03-05T00:00:00.0000000+00:00",
                "metrics": [
                  {
                    "key": "Instrument/default/Name",
                    "op": "Value",
                    "options": {}
                  },
                  {
                    "key": "Holding/default/PV",
                    "op": "Value",
                    "options": {}
                  }
                ],
                "groupBy": [
                  "Instrument/default/Name"
                ],
                "reportCurrency": "USD",
                "equipWithSubtotals": false,
                "returnResultAsExpandedTypes": false,
                "valuationSchedule": {
                  "effectiveFrom": "2018-03-05T00:00:00.0000000+00:00",
                  "effectiveAt": "2018-03-05T00:00:00.0000000+00:00",
                  "tenor": "1D",
                  "rollConvention": "F",
                  "holidayCalendars": [],
                  "valuationDateTimes": []
                },
                "instruments": [
                  {
                    "quantity": 10000,
                    "holdingIdentifier": "my-holding-on-some-date",
                    "instrument": {
                      "startDate": "2018-03-05T00:00:00.0000000+00:00",
                      "maturityDate": "2018-04-04T00:00:00.0000000+00:00",
                      "domAmount": 100,
                      "domCcy": "GBP",
                      "fgnAmount": -150,
                      "fgnCcy": "USD",
                      "refSpotRate": 1.5,
                      "isNdf": false,
                      "fixingDate": "0001-01-01T00:00:00.0000000+00:00",
                      "instrumentType": "FxForward"
                    }
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ListAggregationResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListAggregationResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListAggregationResponse"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Stable"
      }
    },
    "/api/allocations": {
      "get": {
        "tags": [
          "Allocations"
        ],
        "summary": "[EARLY ACCESS] ListAllocations: List Allocations",
        "description": "Fetch the last pre-AsAt date version of each allocation in scope (does not fetch the entire history).",
        "operationId": "ListAllocations",
        "parameters": [
          {
            "name": "asAt",
            "in": "query",
            "description": "The asAt datetime at which to retrieve the allocation. Defaults to return the latest version of the allocation if not specified.",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "x-nullable": true
          },
          {
            "name": "page",
            "in": "query",
            "description": "The pagination token to use to continue listing allocations from a previous call to list allocations.\r\n            This value is returned from the previous call. If a pagination token is provided the sortBy, filter, effectiveAt, and asAt fields\r\n            must not have changed since the original request. Also, if set, a start value cannot be provided.",
            "schema": {
              "maxLength": 500,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\+/]*={0,3}$",
              "type": "string"
            }
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "Allocation the results by these fields. Use use the '-' sign to denote descending allocation e.g. -MyFieldName.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "x-nullable": true
          },
          {
            "name": "start",
            "in": "query",
            "description": "When paginating, skip this number of results.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-nullable": true
          },
          {
            "name": "limit",
            "in": "query",
            "description": "When paginating, limit the number of returned results to this many.",
            "schema": {
              "maximum": 5000,
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            },
            "x-nullable": true
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Expression to filter the result set. Read more about filtering results from LUSID here:\r\n            https://support.lusid.com/filtering-results-from-lusid.",
            "schema": {
              "maxLength": 16384,
              "minLength": 0,
              "pattern": "^[\\s\\S]*$",
              "type": "string"
            }
          },
          {
            "name": "propertyKeys",
            "in": "query",
            "description": "A list of property keys from the \"Allocations\" domain to decorate onto each allocation.\r\n                These take the format {domain}/{scope}/{code} e.g. \"Allocations/system/Name\".",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "description": "The key that uniquely identifies the property. It has the format {domain}/{scope}/{code}."
              }
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "description": "Allocations.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PagedResourceListOfAllocation"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagedResourceListOfAllocation"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagedResourceListOfAllocation"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      },
      "post": {
        "tags": [
          "Allocations"
        ],
        "summary": "[EARLY ACCESS] UpsertAllocations: Upsert Allocations",
        "description": "Upsert; update existing allocations with given ids, or create new allocations otherwise.",
        "operationId": "UpsertAllocations",
        "requestBody": {
          "description": "The collection of allocation requests.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/AllocationSetRequest"
              },
              "example": {
                "allocationRequests": [
                  {
                    "properties": {
                      "Allocation/MyScope/SomeAllocationProperty": {
                        "key": "Allocation/MyScope/SomeAllocationProperty",
                        "value": {
                          "labelValue": "XYZ000034567"
                        }
                      }
                    },
                    "instrumentIdentifiers": {
                      "Instrument/default/Currency": "GBP"
                    },
                    "quantity": 100,
                    "portfolioId": {
                      "scope": "MyScope",
                      "code": "UKEquity"
                    },
                    "allocatedOrderId": {
                      "scope": "MyScope",
                      "code": "ORD00000123"
                    },
                    "id": {
                      "scope": "MyScope",
                      "code": "ALLOC00000123"
                    },
                    "placementIds": [
                      {
                        "scope": "MyScope",
                        "code": "SomePlacement"
                      }
                    ],
                    "state": "New",
                    "side": "Buy",
                    "type": "Limit",
                    "settlementDate": "2006-04-14T00:00:00.0000000+00:00",
                    "date": "2006-04-11T00:00:00.0000000+00:00",
                    "price": {
                      "amount": 12413.33,
                      "currency": "USD"
                    },
                    "settlementCurrency": "USD",
                    "settlementCurrencyFxRate": 1,
                    "counterparty": "SomeCounterparty",
                    "executionIds": [
                      {
                        "scope": "MyScope",
                        "code": "EXEC00000123"
                      }
                    ]
                  }
                ]
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AllocationSetRequest"
              },
              "example": {
                "allocationRequests": [
                  {
                    "properties": {
                      "Allocation/MyScope/SomeAllocationProperty": {
                        "key": "Allocation/MyScope/SomeAllocationProperty",
                        "value": {
                          "labelValue": "XYZ000034567"
                        }
                      }
                    },
                    "instrumentIdentifiers": {
                      "Instrument/default/Currency": "GBP"
                    },
                    "quantity": 100,
                    "portfolioId": {
                      "scope": "MyScope",
                      "code": "UKEquity"
                    },
                    "allocatedOrderId": {
                      "scope": "MyScope",
                      "code": "ORD00000123"
                    },
                    "id": {
                      "scope": "MyScope",
                      "code": "ALLOC00000123"
                    },
                    "placementIds": [
                      {
                        "scope": "MyScope",
                        "code": "SomePlacement"
                      }
                    ],
                    "state": "New",
                    "side": "Buy",
                    "type": "Limit",
                    "settlementDate": "2006-04-14T00:00:00.0000000+00:00",
                    "date": "2006-04-11T00:00:00.0000000+00:00",
                    "price": {
                      "amount": 12413.33,
                      "currency": "USD"
                    },
                    "settlementCurrency": "USD",
                    "settlementCurrencyFxRate": 1,
                    "counterparty": "SomeCounterparty",
                    "executionIds": [
                      {
                        "scope": "MyScope",
                        "code": "EXEC00000123"
                      }
                    ]
                  }
                ]
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/AllocationSetRequest"
              },
              "example": {
                "allocationRequests": [
                  {
                    "properties": {
                      "Allocation/MyScope/SomeAllocationProperty": {
                        "key": "Allocation/MyScope/SomeAllocationProperty",
                        "value": {
                          "labelValue": "XYZ000034567"
                        }
                      }
                    },
                    "instrumentIdentifiers": {
                      "Instrument/default/Currency": "GBP"
                    },
                    "quantity": 100,
                    "portfolioId": {
                      "scope": "MyScope",
                      "code": "UKEquity"
                    },
                    "allocatedOrderId": {
                      "scope": "MyScope",
                      "code": "ORD00000123"
                    },
                    "id": {
                      "scope": "MyScope",
                      "code": "ALLOC00000123"
                    },
                    "placementIds": [
                      {
                        "scope": "MyScope",
                        "code": "SomePlacement"
                      }
                    ],
                    "state": "New",
                    "side": "Buy",
                    "type": "Limit",
                    "settlementDate": "2006-04-14T00:00:00.0000000+00:00",
                    "date": "2006-04-11T00:00:00.0000000+00:00",
                    "price": {
                      "amount": 12413.33,
                      "currency": "USD"
                    },
                    "settlementCurrency": "USD",
                    "settlementCurrencyFxRate": 1,
                    "counterparty": "SomeCounterparty",
                    "executionIds": [
                      {
                        "scope": "MyScope",
                        "code": "EXEC00000123"
                      }
                    ]
                  }
                ]
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/AllocationSetRequest"
              },
              "example": {
                "allocationRequests": [
                  {
                    "properties": {
                      "Allocation/MyScope/SomeAllocationProperty": {
                        "key": "Allocation/MyScope/SomeAllocationProperty",
                        "value": {
                          "labelValue": "XYZ000034567"
                        }
                      }
                    },
                    "instrumentIdentifiers": {
                      "Instrument/default/Currency": "GBP"
                    },
                    "quantity": 100,
                    "portfolioId": {
                      "scope": "MyScope",
                      "code": "UKEquity"
                    },
                    "allocatedOrderId": {
                      "scope": "MyScope",
                      "code": "ORD00000123"
                    },
                    "id": {
                      "scope": "MyScope",
                      "code": "ALLOC00000123"
                    },
                    "placementIds": [
                      {
                        "scope": "MyScope",
                        "code": "SomePlacement"
                      }
                    ],
                    "state": "New",
                    "side": "Buy",
                    "type": "Limit",
                    "settlementDate": "2006-04-14T00:00:00.0000000+00:00",
                    "date": "2006-04-11T00:00:00.0000000+00:00",
                    "price": {
                      "amount": 12413.33,
                      "currency": "USD"
                    },
                    "settlementCurrency": "USD",
                    "settlementCurrencyFxRate": 1,
                    "counterparty": "SomeCounterparty",
                    "executionIds": [
                      {
                        "scope": "MyScope",
                        "code": "EXEC00000123"
                      }
                    ]
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "A collection of allocations.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfAllocation"
                },
                "example": {
                  "values": [
                    {
                      "id": {
                        "scope": "MyScope",
                        "code": "ALLOC00000123"
                      },
                      "allocatedOrderId": {
                        "scope": "MyScope",
                        "code": "ORD00000123"
                      },
                      "portfolioId": {
                        "scope": "MyScope",
                        "code": "testPortfolio"
                      },
                      "quantity": 100,
                      "instrumentIdentifiers": {
                        "Instrument/default/Currency": "GBP"
                      },
                      "version": {
                        "effectiveFrom": "2018-03-05T10:10:10.0000000+00:00",
                        "asAtDate": "2018-03-05T10:10:10.0000000+00:00",
                        "asAtCreated": "2018-03-05T10:10:10.0000000+00:00",
                        "userIdCreated": "AllocationUser1",
                        "asAtModified": "2018-03-08T10:10:10.0000000+00:00",
                        "userIdModified": "AllocationUser2",
                        "asAtVersionNumber": 2
                      },
                      "properties": {
                        "Allocation/MyScope/SomeAllocationProperty": {
                          "key": "Allocation/MyScope/SomeAllocationProperty",
                          "value": {
                            "labelValue": "XYZ000034567"
                          }
                        }
                      },
                      "placementIds": [
                        {
                          "scope": "MyScope",
                          "code": "PLAC00000123"
                        }
                      ],
                      "state": "New",
                      "side": "Buy",
                      "type": "Limit",
                      "settlementDate": "2006-04-14T00:00:00.0000000+00:00",
                      "date": "2006-04-11T00:00:00.0000000+00:00",
                      "price": {
                        "amount": 12413.33,
                        "currency": "USD"
                      },
                      "settlementCurrency": "USD",
                      "settlementCurrencyFxRate": 1,
                      "counterparty": "SomeCounterparty",
                      "executionIds": [
                        {
                          "scope": "MyScope",
                          "code": "EXEC00000123"
                        }
                      ]
                    }
                  ],
                  "links": []
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfAllocation"
                },
                "example": {
                  "values": [
                    {
                      "id": {
                        "scope": "MyScope",
                        "code": "ALLOC00000123"
                      },
                      "allocatedOrderId": {
                        "scope": "MyScope",
                        "code": "ORD00000123"
                      },
                      "portfolioId": {
                        "scope": "MyScope",
                        "code": "testPortfolio"
                      },
                      "quantity": 100,
                      "instrumentIdentifiers": {
                        "Instrument/default/Currency": "GBP"
                      },
                      "version": {
                        "effectiveFrom": "2018-03-05T10:10:10.0000000+00:00",
                        "asAtDate": "2018-03-05T10:10:10.0000000+00:00",
                        "asAtCreated": "2018-03-05T10:10:10.0000000+00:00",
                        "userIdCreated": "AllocationUser1",
                        "asAtModified": "2018-03-08T10:10:10.0000000+00:00",
                        "userIdModified": "AllocationUser2",
                        "asAtVersionNumber": 2
                      },
                      "properties": {
                        "Allocation/MyScope/SomeAllocationProperty": {
                          "key": "Allocation/MyScope/SomeAllocationProperty",
                          "value": {
                            "labelValue": "XYZ000034567"
                          }
                        }
                      },
                      "placementIds": [
                        {
                          "scope": "MyScope",
                          "code": "PLAC00000123"
                        }
                      ],
                      "state": "New",
                      "side": "Buy",
                      "type": "Limit",
                      "settlementDate": "2006-04-14T00:00:00.0000000+00:00",
                      "date": "2006-04-11T00:00:00.0000000+00:00",
                      "price": {
                        "amount": 12413.33,
                        "currency": "USD"
                      },
                      "settlementCurrency": "USD",
                      "settlementCurrencyFxRate": 1,
                      "counterparty": "SomeCounterparty",
                      "executionIds": [
                        {
                          "scope": "MyScope",
                          "code": "EXEC00000123"
                        }
                      ]
                    }
                  ],
                  "links": []
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfAllocation"
                },
                "example": {
                  "values": [
                    {
                      "id": {
                        "scope": "MyScope",
                        "code": "ALLOC00000123"
                      },
                      "allocatedOrderId": {
                        "scope": "MyScope",
                        "code": "ORD00000123"
                      },
                      "portfolioId": {
                        "scope": "MyScope",
                        "code": "testPortfolio"
                      },
                      "quantity": 100,
                      "instrumentIdentifiers": {
                        "Instrument/default/Currency": "GBP"
                      },
                      "version": {
                        "effectiveFrom": "2018-03-05T10:10:10.0000000+00:00",
                        "asAtDate": "2018-03-05T10:10:10.0000000+00:00",
                        "asAtCreated": "2018-03-05T10:10:10.0000000+00:00",
                        "userIdCreated": "AllocationUser1",
                        "asAtModified": "2018-03-08T10:10:10.0000000+00:00",
                        "userIdModified": "AllocationUser2",
                        "asAtVersionNumber": 2
                      },
                      "properties": {
                        "Allocation/MyScope/SomeAllocationProperty": {
                          "key": "Allocation/MyScope/SomeAllocationProperty",
                          "value": {
                            "labelValue": "XYZ000034567"
                          }
                        }
                      },
                      "placementIds": [
                        {
                          "scope": "MyScope",
                          "code": "PLAC00000123"
                        }
                      ],
                      "state": "New",
                      "side": "Buy",
                      "type": "Limit",
                      "settlementDate": "2006-04-14T00:00:00.0000000+00:00",
                      "date": "2006-04-11T00:00:00.0000000+00:00",
                      "price": {
                        "amount": 12413.33,
                        "currency": "USD"
                      },
                      "settlementCurrency": "USD",
                      "settlementCurrencyFxRate": 1,
                      "counterparty": "SomeCounterparty",
                      "executionIds": [
                        {
                          "scope": "MyScope",
                          "code": "EXEC00000123"
                        }
                      ]
                    }
                  ],
                  "links": []
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      }
    },
    "/api/allocations/{scope}/{code}": {
      "get": {
        "tags": [
          "Allocations"
        ],
        "summary": "[EARLY ACCESS] GetAllocation: Get Allocation",
        "description": "Fetch an Allocation matching the provided identifier",
        "operationId": "GetAllocation",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope to which the allocation belongs.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string"
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The allocation's unique identifier.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "type": "string"
            }
          },
          {
            "name": "asAt",
            "in": "query",
            "description": "The asAt datetime at which to retrieve the allocation. Defaults to return the latest version of the allocation if not specified.",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "x-nullable": true
          },
          {
            "name": "propertyKeys",
            "in": "query",
            "description": "A list of property keys from the \"Allocations\" domain to decorate onto the allocation.\r\n            These take the format {domain}/{scope}/{code} e.g. \"Allocations/system/Name\".",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "description": "The key that uniquely identifies the property. It has the format {domain}/{scope}/{code}."
              }
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "description": "The allocation matching the given identifier.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Allocation"
                },
                "example": {
                  "id": {
                    "scope": "MyScope",
                    "code": "ALLOC00000123"
                  },
                  "allocatedOrderId": {
                    "scope": "MyScope",
                    "code": "ORD00000123"
                  },
                  "portfolioId": {
                    "scope": "MyScope",
                    "code": "testPortfolio"
                  },
                  "quantity": 100,
                  "instrumentIdentifiers": {
                    "Instrument/default/Currency": "GBP"
                  },
                  "version": {
                    "effectiveFrom": "2018-03-05T10:10:10.0000000+00:00",
                    "asAtDate": "2018-03-05T10:10:10.0000000+00:00",
                    "asAtCreated": "2018-03-05T10:10:10.0000000+00:00",
                    "userIdCreated": "AllocationUser1",
                    "asAtModified": "2018-03-08T10:10:10.0000000+00:00",
                    "userIdModified": "AllocationUser2",
                    "asAtVersionNumber": 2
                  },
                  "properties": {
                    "Allocation/MyScope/SomeAllocationProperty": {
                      "key": "Allocation/MyScope/SomeAllocationProperty",
                      "value": {
                        "labelValue": "XYZ000034567"
                      }
                    }
                  },
                  "placementIds": [
                    {
                      "scope": "MyScope",
                      "code": "PLAC00000123"
                    }
                  ],
                  "state": "New",
                  "side": "Buy",
                  "type": "Limit",
                  "settlementDate": "2006-04-14T00:00:00.0000000+00:00",
                  "date": "2006-04-11T00:00:00.0000000+00:00",
                  "price": {
                    "amount": 12413.33,
                    "currency": "USD"
                  },
                  "settlementCurrency": "USD",
                  "settlementCurrencyFxRate": 1,
                  "counterparty": "SomeCounterparty",
                  "executionIds": [
                    {
                      "scope": "MyScope",
                      "code": "EXEC00000123"
                    }
                  ]
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Allocation"
                },
                "example": {
                  "id": {
                    "scope": "MyScope",
                    "code": "ALLOC00000123"
                  },
                  "allocatedOrderId": {
                    "scope": "MyScope",
                    "code": "ORD00000123"
                  },
                  "portfolioId": {
                    "scope": "MyScope",
                    "code": "testPortfolio"
                  },
                  "quantity": 100,
                  "instrumentIdentifiers": {
                    "Instrument/default/Currency": "GBP"
                  },
                  "version": {
                    "effectiveFrom": "2018-03-05T10:10:10.0000000+00:00",
                    "asAtDate": "2018-03-05T10:10:10.0000000+00:00",
                    "asAtCreated": "2018-03-05T10:10:10.0000000+00:00",
                    "userIdCreated": "AllocationUser1",
                    "asAtModified": "2018-03-08T10:10:10.0000000+00:00",
                    "userIdModified": "AllocationUser2",
                    "asAtVersionNumber": 2
                  },
                  "properties": {
                    "Allocation/MyScope/SomeAllocationProperty": {
                      "key": "Allocation/MyScope/SomeAllocationProperty",
                      "value": {
                        "labelValue": "XYZ000034567"
                      }
                    }
                  },
                  "placementIds": [
                    {
                      "scope": "MyScope",
                      "code": "PLAC00000123"
                    }
                  ],
                  "state": "New",
                  "side": "Buy",
                  "type": "Limit",
                  "settlementDate": "2006-04-14T00:00:00.0000000+00:00",
                  "date": "2006-04-11T00:00:00.0000000+00:00",
                  "price": {
                    "amount": 12413.33,
                    "currency": "USD"
                  },
                  "settlementCurrency": "USD",
                  "settlementCurrencyFxRate": 1,
                  "counterparty": "SomeCounterparty",
                  "executionIds": [
                    {
                      "scope": "MyScope",
                      "code": "EXEC00000123"
                    }
                  ]
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Allocation"
                },
                "example": {
                  "id": {
                    "scope": "MyScope",
                    "code": "ALLOC00000123"
                  },
                  "allocatedOrderId": {
                    "scope": "MyScope",
                    "code": "ORD00000123"
                  },
                  "portfolioId": {
                    "scope": "MyScope",
                    "code": "testPortfolio"
                  },
                  "quantity": 100,
                  "instrumentIdentifiers": {
                    "Instrument/default/Currency": "GBP"
                  },
                  "version": {
                    "effectiveFrom": "2018-03-05T10:10:10.0000000+00:00",
                    "asAtDate": "2018-03-05T10:10:10.0000000+00:00",
                    "asAtCreated": "2018-03-05T10:10:10.0000000+00:00",
                    "userIdCreated": "AllocationUser1",
                    "asAtModified": "2018-03-08T10:10:10.0000000+00:00",
                    "userIdModified": "AllocationUser2",
                    "asAtVersionNumber": 2
                  },
                  "properties": {
                    "Allocation/MyScope/SomeAllocationProperty": {
                      "key": "Allocation/MyScope/SomeAllocationProperty",
                      "value": {
                        "labelValue": "XYZ000034567"
                      }
                    }
                  },
                  "placementIds": [
                    {
                      "scope": "MyScope",
                      "code": "PLAC00000123"
                    }
                  ],
                  "state": "New",
                  "side": "Buy",
                  "type": "Limit",
                  "settlementDate": "2006-04-14T00:00:00.0000000+00:00",
                  "date": "2006-04-11T00:00:00.0000000+00:00",
                  "price": {
                    "amount": 12413.33,
                    "currency": "USD"
                  },
                  "settlementCurrency": "USD",
                  "settlementCurrencyFxRate": 1,
                  "counterparty": "SomeCounterparty",
                  "executionIds": [
                    {
                      "scope": "MyScope",
                      "code": "EXEC00000123"
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      },
      "delete": {
        "tags": [
          "Allocations"
        ],
        "summary": "[EARLY ACCESS] DeleteAllocation: Delete allocation",
        "description": "Delete an allocation. Deletion will be valid from the allocation's creation datetime.\r\nThis means that the allocation will no longer exist at any effective datetime from the asAt datetime of deletion.",
        "operationId": "DeleteAllocation",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The allocation scope.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string"
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The allocation's code. This, together with the scope uniquely identifies the allocation to delete.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The response from deleting an allocation.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedEntityResponse"
                },
                "example": {
                  "asAt": "2018-03-05T10:10:10.0000000+00:00"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedEntityResponse"
                },
                "example": {
                  "asAt": "2018-03-05T10:10:10.0000000+00:00"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedEntityResponse"
                },
                "example": {
                  "asAt": "2018-03-05T10:10:10.0000000+00:00"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      }
    },
    "/api/blocks": {
      "get": {
        "tags": [
          "Blocks"
        ],
        "summary": "[EARLY ACCESS] ListBlocks: List Blocks",
        "description": "Fetch the last pre-AsAt date version of each block in scope (does not fetch the entire history).",
        "operationId": "ListBlocks",
        "parameters": [
          {
            "name": "asAt",
            "in": "query",
            "description": "The asAt datetime at which to retrieve the block. Defaults to return the latest version of the block if not specified.",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "x-nullable": true
          },
          {
            "name": "page",
            "in": "query",
            "description": "The pagination token to use to continue listing blocks from a previous call to list blocks.\r\n            This value is returned from the previous call. If a pagination token is provided the sortBy, filter, effectiveAt, and asAt fields\r\n            must not have changed since the original request.",
            "schema": {
              "maxLength": 500,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\+/]*={0,3}$",
              "type": "string"
            }
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "Order the results by these fields. Use use the '-' sign to denote descending order e.g. -MyFieldName.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "x-nullable": true
          },
          {
            "name": "limit",
            "in": "query",
            "description": "When paginating, limit the number of returned results to this many.",
            "schema": {
              "maximum": 5000,
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            },
            "x-nullable": true
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Expression to filter the result set. Read more about filtering results from LUSID here:\r\n            https://support.lusid.com/filtering-results-from-lusid.",
            "schema": {
              "maxLength": 16384,
              "minLength": 0,
              "pattern": "^[\\s\\S]*$",
              "type": "string"
            }
          },
          {
            "name": "propertyKeys",
            "in": "query",
            "description": "A list of property keys from the \"Block\" domain to decorate onto each block.\r\n                These take the format {domain}/{scope}/{code} e.g. \"Block/system/Name\".",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "description": "The key that uniquely identifies the property. It has the format {domain}/{scope}/{code}."
              }
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "description": "Blocks in scope.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PagedResourceListOfBlock"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagedResourceListOfBlock"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagedResourceListOfBlock"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      },
      "post": {
        "tags": [
          "Blocks"
        ],
        "summary": "[EARLY ACCESS] UpsertBlocks: Upsert Block",
        "description": "Upsert; update existing blocks with given ids, or create new blocks otherwise.",
        "operationId": "UpsertBlocks",
        "requestBody": {
          "description": "The collection of block requests.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/BlockSetRequest"
              },
              "example": {
                "requests": [
                  {
                    "id": {
                      "scope": "MyScope",
                      "code": "BLOC00000123"
                    },
                    "orderIds": [
                      {
                        "scope": "MyScope",
                        "code": "BLOC00000123"
                      }
                    ],
                    "properties": {
                      "Block/MyScope/SomeBlockProperty": {
                        "key": "Block/MyScope/SomeBlockProperty",
                        "value": {
                          "labelValue": "XYZ000034567"
                        }
                      }
                    },
                    "instrumentIdentifiers": {
                      "Instrument/default/Currency": "GBP"
                    },
                    "quantity": 100,
                    "side": "Buy",
                    "type": "Limit",
                    "timeInForce": "GoodTilCancel",
                    "createdDate": "2006-04-11T00:00:00.0000000+00:00",
                    "limitPrice": {
                      "amount": 12413.33,
                      "currency": "USD"
                    },
                    "stopPrice": {
                      "amount": 122345.33,
                      "currency": "USD"
                    }
                  }
                ]
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BlockSetRequest"
              },
              "example": {
                "requests": [
                  {
                    "id": {
                      "scope": "MyScope",
                      "code": "BLOC00000123"
                    },
                    "orderIds": [
                      {
                        "scope": "MyScope",
                        "code": "BLOC00000123"
                      }
                    ],
                    "properties": {
                      "Block/MyScope/SomeBlockProperty": {
                        "key": "Block/MyScope/SomeBlockProperty",
                        "value": {
                          "labelValue": "XYZ000034567"
                        }
                      }
                    },
                    "instrumentIdentifiers": {
                      "Instrument/default/Currency": "GBP"
                    },
                    "quantity": 100,
                    "side": "Buy",
                    "type": "Limit",
                    "timeInForce": "GoodTilCancel",
                    "createdDate": "2006-04-11T00:00:00.0000000+00:00",
                    "limitPrice": {
                      "amount": 12413.33,
                      "currency": "USD"
                    },
                    "stopPrice": {
                      "amount": 122345.33,
                      "currency": "USD"
                    }
                  }
                ]
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/BlockSetRequest"
              },
              "example": {
                "requests": [
                  {
                    "id": {
                      "scope": "MyScope",
                      "code": "BLOC00000123"
                    },
                    "orderIds": [
                      {
                        "scope": "MyScope",
                        "code": "BLOC00000123"
                      }
                    ],
                    "properties": {
                      "Block/MyScope/SomeBlockProperty": {
                        "key": "Block/MyScope/SomeBlockProperty",
                        "value": {
                          "labelValue": "XYZ000034567"
                        }
                      }
                    },
                    "instrumentIdentifiers": {
                      "Instrument/default/Currency": "GBP"
                    },
                    "quantity": 100,
                    "side": "Buy",
                    "type": "Limit",
                    "timeInForce": "GoodTilCancel",
                    "createdDate": "2006-04-11T00:00:00.0000000+00:00",
                    "limitPrice": {
                      "amount": 12413.33,
                      "currency": "USD"
                    },
                    "stopPrice": {
                      "amount": 122345.33,
                      "currency": "USD"
                    }
                  }
                ]
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/BlockSetRequest"
              },
              "example": {
                "requests": [
                  {
                    "id": {
                      "scope": "MyScope",
                      "code": "BLOC00000123"
                    },
                    "orderIds": [
                      {
                        "scope": "MyScope",
                        "code": "BLOC00000123"
                      }
                    ],
                    "properties": {
                      "Block/MyScope/SomeBlockProperty": {
                        "key": "Block/MyScope/SomeBlockProperty",
                        "value": {
                          "labelValue": "XYZ000034567"
                        }
                      }
                    },
                    "instrumentIdentifiers": {
                      "Instrument/default/Currency": "GBP"
                    },
                    "quantity": 100,
                    "side": "Buy",
                    "type": "Limit",
                    "timeInForce": "GoodTilCancel",
                    "createdDate": "2006-04-11T00:00:00.0000000+00:00",
                    "limitPrice": {
                      "amount": 12413.33,
                      "currency": "USD"
                    },
                    "stopPrice": {
                      "amount": 122345.33,
                      "currency": "USD"
                    }
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "A collection of blocks.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfBlock"
                },
                "example": {
                  "values": [
                    {
                      "id": {
                        "scope": "MyScope",
                        "code": "BLOC00000123"
                      },
                      "orderIds": [
                        {
                          "scope": "MyScope",
                          "code": "ORDER00000123"
                        }
                      ],
                      "properties": {
                        "Allocation/MyScope/SomeAllocationProperty": {
                          "key": "Allocation/MyScope/SomeAllocationProperty",
                          "value": {
                            "labelValue": "XYZ000034567"
                          }
                        }
                      },
                      "instrumentIdentifiers": {
                        "Instrument/default/Currency": "GBP"
                      },
                      "lusidInstrumentId": "LUID_1234567",
                      "quantity": 100.5,
                      "side": "Buy",
                      "type": "Limit",
                      "timeInForce": "GoodTilCancel",
                      "createdDate": "2006-04-11T00:00:00.0000000+00:00",
                      "limitPrice": {
                        "amount": 12413.33,
                        "currency": "USD"
                      },
                      "stopPrice": {
                        "amount": 12376.33,
                        "currency": "USD"
                      },
                      "version": {
                        "effectiveFrom": "2018-03-05T10:10:10.0000000+00:00",
                        "asAtDate": "2018-03-05T10:10:10.0000000+00:00",
                        "asAtCreated": "2018-03-05T10:10:10.0000000+00:00",
                        "userIdCreated": "BlockUser1",
                        "asAtModified": "2018-03-08T10:10:10.0000000+00:00",
                        "userIdModified": "BlockUser2",
                        "asAtVersionNumber": 2
                      }
                    }
                  ],
                  "links": []
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfBlock"
                },
                "example": {
                  "values": [
                    {
                      "id": {
                        "scope": "MyScope",
                        "code": "BLOC00000123"
                      },
                      "orderIds": [
                        {
                          "scope": "MyScope",
                          "code": "ORDER00000123"
                        }
                      ],
                      "properties": {
                        "Allocation/MyScope/SomeAllocationProperty": {
                          "key": "Allocation/MyScope/SomeAllocationProperty",
                          "value": {
                            "labelValue": "XYZ000034567"
                          }
                        }
                      },
                      "instrumentIdentifiers": {
                        "Instrument/default/Currency": "GBP"
                      },
                      "lusidInstrumentId": "LUID_1234567",
                      "quantity": 100.5,
                      "side": "Buy",
                      "type": "Limit",
                      "timeInForce": "GoodTilCancel",
                      "createdDate": "2006-04-11T00:00:00.0000000+00:00",
                      "limitPrice": {
                        "amount": 12413.33,
                        "currency": "USD"
                      },
                      "stopPrice": {
                        "amount": 12376.33,
                        "currency": "USD"
                      },
                      "version": {
                        "effectiveFrom": "2018-03-05T10:10:10.0000000+00:00",
                        "asAtDate": "2018-03-05T10:10:10.0000000+00:00",
                        "asAtCreated": "2018-03-05T10:10:10.0000000+00:00",
                        "userIdCreated": "BlockUser1",
                        "asAtModified": "2018-03-08T10:10:10.0000000+00:00",
                        "userIdModified": "BlockUser2",
                        "asAtVersionNumber": 2
                      }
                    }
                  ],
                  "links": []
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfBlock"
                },
                "example": {
                  "values": [
                    {
                      "id": {
                        "scope": "MyScope",
                        "code": "BLOC00000123"
                      },
                      "orderIds": [
                        {
                          "scope": "MyScope",
                          "code": "ORDER00000123"
                        }
                      ],
                      "properties": {
                        "Allocation/MyScope/SomeAllocationProperty": {
                          "key": "Allocation/MyScope/SomeAllocationProperty",
                          "value": {
                            "labelValue": "XYZ000034567"
                          }
                        }
                      },
                      "instrumentIdentifiers": {
                        "Instrument/default/Currency": "GBP"
                      },
                      "lusidInstrumentId": "LUID_1234567",
                      "quantity": 100.5,
                      "side": "Buy",
                      "type": "Limit",
                      "timeInForce": "GoodTilCancel",
                      "createdDate": "2006-04-11T00:00:00.0000000+00:00",
                      "limitPrice": {
                        "amount": 12413.33,
                        "currency": "USD"
                      },
                      "stopPrice": {
                        "amount": 12376.33,
                        "currency": "USD"
                      },
                      "version": {
                        "effectiveFrom": "2018-03-05T10:10:10.0000000+00:00",
                        "asAtDate": "2018-03-05T10:10:10.0000000+00:00",
                        "asAtCreated": "2018-03-05T10:10:10.0000000+00:00",
                        "userIdCreated": "BlockUser1",
                        "asAtModified": "2018-03-08T10:10:10.0000000+00:00",
                        "userIdModified": "BlockUser2",
                        "asAtVersionNumber": 2
                      }
                    }
                  ],
                  "links": []
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      }
    },
    "/api/blocks/{scope}/{code}": {
      "get": {
        "tags": [
          "Blocks"
        ],
        "summary": "[EARLY ACCESS] GetBlock: Get Block",
        "description": "Fetch a Block that matches the specified identifier",
        "operationId": "GetBlock",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope to which the block belongs.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string"
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The block's unique identifier.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "type": "string"
            }
          },
          {
            "name": "asAt",
            "in": "query",
            "description": "The asAt datetime at which to retrieve the block. Defaults to return the latest version of the block if not specified.",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "x-nullable": true
          },
          {
            "name": "propertyKeys",
            "in": "query",
            "description": "A list of property keys from the \"Block\" domain to decorate onto the block.\r\n            These take the format {domain}/{scope}/{code} e.g. \"Block/system/Name\".",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "description": "The key that uniquely identifies the property. It has the format {domain}/{scope}/{code}."
              }
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "description": "The block matching the given identifier.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Block"
                },
                "example": {
                  "id": {
                    "scope": "MyScope",
                    "code": "BLOC00000123"
                  },
                  "orderIds": [
                    {
                      "scope": "MyScope",
                      "code": "ORDER00000123"
                    }
                  ],
                  "properties": {
                    "Allocation/MyScope/SomeAllocationProperty": {
                      "key": "Allocation/MyScope/SomeAllocationProperty",
                      "value": {
                        "labelValue": "XYZ000034567"
                      }
                    }
                  },
                  "instrumentIdentifiers": {
                    "Instrument/default/Currency": "GBP"
                  },
                  "lusidInstrumentId": "LUID_1234567",
                  "quantity": 100.5,
                  "side": "Buy",
                  "type": "Limit",
                  "timeInForce": "GoodTilCancel",
                  "createdDate": "2006-04-11T00:00:00.0000000+00:00",
                  "limitPrice": {
                    "amount": 12413.33,
                    "currency": "USD"
                  },
                  "stopPrice": {
                    "amount": 12376.33,
                    "currency": "USD"
                  },
                  "version": {
                    "effectiveFrom": "2018-03-05T10:10:10.0000000+00:00",
                    "asAtDate": "2018-03-05T10:10:10.0000000+00:00",
                    "asAtCreated": "2018-03-05T10:10:10.0000000+00:00",
                    "userIdCreated": "BlockUser1",
                    "asAtModified": "2018-03-08T10:10:10.0000000+00:00",
                    "userIdModified": "BlockUser2",
                    "asAtVersionNumber": 2
                  }
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Block"
                },
                "example": {
                  "id": {
                    "scope": "MyScope",
                    "code": "BLOC00000123"
                  },
                  "orderIds": [
                    {
                      "scope": "MyScope",
                      "code": "ORDER00000123"
                    }
                  ],
                  "properties": {
                    "Allocation/MyScope/SomeAllocationProperty": {
                      "key": "Allocation/MyScope/SomeAllocationProperty",
                      "value": {
                        "labelValue": "XYZ000034567"
                      }
                    }
                  },
                  "instrumentIdentifiers": {
                    "Instrument/default/Currency": "GBP"
                  },
                  "lusidInstrumentId": "LUID_1234567",
                  "quantity": 100.5,
                  "side": "Buy",
                  "type": "Limit",
                  "timeInForce": "GoodTilCancel",
                  "createdDate": "2006-04-11T00:00:00.0000000+00:00",
                  "limitPrice": {
                    "amount": 12413.33,
                    "currency": "USD"
                  },
                  "stopPrice": {
                    "amount": 12376.33,
                    "currency": "USD"
                  },
                  "version": {
                    "effectiveFrom": "2018-03-05T10:10:10.0000000+00:00",
                    "asAtDate": "2018-03-05T10:10:10.0000000+00:00",
                    "asAtCreated": "2018-03-05T10:10:10.0000000+00:00",
                    "userIdCreated": "BlockUser1",
                    "asAtModified": "2018-03-08T10:10:10.0000000+00:00",
                    "userIdModified": "BlockUser2",
                    "asAtVersionNumber": 2
                  }
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Block"
                },
                "example": {
                  "id": {
                    "scope": "MyScope",
                    "code": "BLOC00000123"
                  },
                  "orderIds": [
                    {
                      "scope": "MyScope",
                      "code": "ORDER00000123"
                    }
                  ],
                  "properties": {
                    "Allocation/MyScope/SomeAllocationProperty": {
                      "key": "Allocation/MyScope/SomeAllocationProperty",
                      "value": {
                        "labelValue": "XYZ000034567"
                      }
                    }
                  },
                  "instrumentIdentifiers": {
                    "Instrument/default/Currency": "GBP"
                  },
                  "lusidInstrumentId": "LUID_1234567",
                  "quantity": 100.5,
                  "side": "Buy",
                  "type": "Limit",
                  "timeInForce": "GoodTilCancel",
                  "createdDate": "2006-04-11T00:00:00.0000000+00:00",
                  "limitPrice": {
                    "amount": 12413.33,
                    "currency": "USD"
                  },
                  "stopPrice": {
                    "amount": 12376.33,
                    "currency": "USD"
                  },
                  "version": {
                    "effectiveFrom": "2018-03-05T10:10:10.0000000+00:00",
                    "asAtDate": "2018-03-05T10:10:10.0000000+00:00",
                    "asAtCreated": "2018-03-05T10:10:10.0000000+00:00",
                    "userIdCreated": "BlockUser1",
                    "asAtModified": "2018-03-08T10:10:10.0000000+00:00",
                    "userIdModified": "BlockUser2",
                    "asAtVersionNumber": 2
                  }
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      },
      "delete": {
        "tags": [
          "Blocks"
        ],
        "summary": "[EARLY ACCESS] DeleteBlock: Delete block",
        "description": "Delete an block. Deletion will be valid from the block's creation datetime.\r\nThis means that the block will no longer exist at any effective datetime from the asAt datetime of deletion.",
        "operationId": "DeleteBlock",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The block scope.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string"
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The block's code. This, together with the scope uniquely identifies the block to delete.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The response from deleting an block.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedEntityResponse"
                },
                "example": {
                  "asAt": "2018-03-05T10:10:10.0000000+00:00"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedEntityResponse"
                },
                "example": {
                  "asAt": "2018-03-05T10:10:10.0000000+00:00"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedEntityResponse"
                },
                "example": {
                  "asAt": "2018-03-05T10:10:10.0000000+00:00"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      }
    },
    "/api/calendars/businessday/{scope}/add": {
      "post": {
        "tags": [
          "Calendars"
        ],
        "summary": "[EARLY ACCESS] AddBusinessDaysToDate: Adds the requested number of Business Days to the provided date.",
        "description": "A Business day is defined as a point in time that:\r\n    * Does not represent a day in the calendar's weekend\r\n    * Does not represent a day in the calendar's list of holidays (e.g. Christmas Day in the UK)\r\n             \r\nAll dates specified must be UTC and the upper bound of a calendar is not inclusive\r\n             \r\ne.g. From: 2020-12-24-00-00-00:\r\n     Adding 3 business days returns 2020-12-30, assuming Saturday and Sunday are weekends, and the 25th and 28th are holidays.\r\n     Adding -2 business days returns 2020-12-22 under the same assumptions.\r\n            \r\nIf the provided number of days to add is zero, returns a failure.",
        "operationId": "AddBusinessDaysToDate",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "Scope within which to search for the calendars",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Request Details: start date, number of days to add (which can be negative, but not zero), calendar codes and optionally an AsAt date for searching the calendar store",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/AddBusinessDaysToDateRequest"
              },
              "example": {
                "businessDayOffset": 5,
                "holidayCodes": [
                  "GBP"
                ],
                "startDate": "2020-02-10T00:00:00.0000000+00:00"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddBusinessDaysToDateRequest"
              },
              "example": {
                "businessDayOffset": 5,
                "holidayCodes": [
                  "GBP"
                ],
                "startDate": "2020-02-10T00:00:00.0000000+00:00"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/AddBusinessDaysToDateRequest"
              },
              "example": {
                "businessDayOffset": 5,
                "holidayCodes": [
                  "GBP"
                ],
                "startDate": "2020-02-10T00:00:00.0000000+00:00"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/AddBusinessDaysToDateRequest"
              },
              "example": {
                "businessDayOffset": 5,
                "holidayCodes": [
                  "GBP"
                ],
                "startDate": "2020-02-10T00:00:00.0000000+00:00"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The business day that is a number of business days after the given date as determined by the given calendar codes",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/AddBusinessDaysToDateResponse"
                },
                "example": {
                  "value": "2020-02-18T00:00:00.0000000+00:00"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AddBusinessDaysToDateResponse"
                },
                "example": {
                  "value": "2020-02-18T00:00:00.0000000+00:00"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/AddBusinessDaysToDateResponse"
                },
                "example": {
                  "value": "2020-02-18T00:00:00.0000000+00:00"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      }
    },
    "/api/calendars/businessday/{scope}/{code}": {
      "get": {
        "tags": [
          "Calendars"
        ],
        "summary": "[EARLY ACCESS] IsBusinessDateTime: Check whether a DateTime is a \"Business DateTime\"",
        "description": "A Business DateTime is defined as a point in time that:\r\n    * Does not represent a day that overlaps with the calendars WeekendMask\r\n    * If the calendar is a \"Holiday Calendar\" Does not overlap with any dates in the calendar\r\n    * If the calendar is a \"TradingHours Calendar\" Does overlap with a date in the calendar\r\n            \r\nAll dates specified must be UTC and the upper bound of a calendar is not inclusive \r\ne.g. From: 2020-12-25-00-00-00 \r\n     To: 2020-12-26-00-00-00\r\nIsBusinessDay(2020-12-26-00-00-00) == false",
        "operationId": "IsBusinessDateTime",
        "parameters": [
          {
            "name": "dateTime",
            "in": "query",
            "description": "DateTime to check - This DateTime must be UTC",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "x-nullable": true
          },
          {
            "name": "scope",
            "in": "path",
            "description": "Scope of the calendar",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string"
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "Code of the calendar",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string"
            }
          },
          {
            "name": "asAt",
            "in": "query",
            "description": "AsAt for the request",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "description": "Whether or not the requested DateTime is a BusinessDay or not",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/IsBusinessDayResponse"
                },
                "example": {
                  "requestedDateTime": "2020-02-12T12:00:00.0000000+00:00",
                  "isBusinessDay": true
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IsBusinessDayResponse"
                },
                "example": {
                  "requestedDateTime": "2020-02-12T12:00:00.0000000+00:00",
                  "isBusinessDay": true
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/IsBusinessDayResponse"
                },
                "example": {
                  "requestedDateTime": "2020-02-12T12:00:00.0000000+00:00",
                  "isBusinessDay": true
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      }
    },
    "/api/calendars/generic": {
      "get": {
        "tags": [
          "Calendars"
        ],
        "summary": "[EARLY ACCESS] ListCalendars: List Calendars",
        "description": "List calendars at a point in AsAt time.",
        "operationId": "ListCalendars",
        "parameters": [
          {
            "name": "asAt",
            "in": "query",
            "description": "The AsAt datetime at which to retrieve the calendars",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "x-nullable": true
          },
          {
            "name": "page",
            "in": "query",
            "description": "The pagination token to use to continue listing calendars from a previous call to list calendars.\r\n            This value is returned from the previous call. If a pagination token is provided the sortBy, filter, and asAt fields\r\n            must not have changed since the original request. Also, if set, a start value cannot be provided.",
            "schema": {
              "maxLength": 500,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\+/]*={0,3}$",
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "When paginating, limit the number of returned results to this many.",
            "schema": {
              "maximum": 5000,
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            },
            "x-nullable": true
          },
          {
            "name": "propertyKeys",
            "in": "query",
            "description": "A list of property keys from the \"Calendar\" domain to decorate onto the calendar, \r\n            These take the format {domain}/{scope}/{code} e.g. \"Calendar/System/Name\".",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "description": "The key that uniquely identifies the property. It has the format {domain}/{scope}/{code}."
              }
            },
            "x-nullable": true
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Expression to filter the result set. Read more about filtering results from LUSID here https://support.lusid.com/filtering-results-from-lusid.",
            "schema": {
              "maxLength": 16384,
              "minLength": 0,
              "pattern": "^[\\s\\S]*$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List Calendars",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PagedResourceListOfCalendar"
                },
                "example": {
                  "values": [
                    {
                      "href": "https://myco.lusid.com/api/api/calendar/testscope/testcode",
                      "id": {
                        "scope": "TestScope",
                        "code": "TestCode"
                      },
                      "type": "Holiday",
                      "weekendMask": {
                        "days": [
                          "Saturday",
                          "Sunday"
                        ],
                        "timeZone": "UTC"
                      },
                      "sourceProvider": "Finbourne-Calendar-Service",
                      "properties": [
                        {
                          "key": "Calendar/HolidayType/Statutory",
                          "value": {
                            "labelValue": "CBTR"
                          }
                        }
                      ]
                    },
                    {
                      "href": "https://myco.lusid.com/api/api/calendar/testscope/testcode2",
                      "id": {
                        "scope": "TestScope",
                        "code": "TestCode2"
                      },
                      "type": "Holiday",
                      "weekendMask": {
                        "days": [
                          "Saturday",
                          "Sunday"
                        ],
                        "timeZone": "UTC"
                      },
                      "sourceProvider": "Finbourne-Calendar-Service",
                      "properties": [
                        {
                          "key": "Calendar/HolidayType/Statutory",
                          "value": {
                            "labelValue": "CBTR"
                          }
                        }
                      ]
                    }
                  ],
                  "href": "https://myco.lusid.com/api/api/calendar/testscope",
                  "links": []
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagedResourceListOfCalendar"
                },
                "example": {
                  "values": [
                    {
                      "href": "https://myco.lusid.com/api/api/calendar/testscope/testcode",
                      "id": {
                        "scope": "TestScope",
                        "code": "TestCode"
                      },
                      "type": "Holiday",
                      "weekendMask": {
                        "days": [
                          "Saturday",
                          "Sunday"
                        ],
                        "timeZone": "UTC"
                      },
                      "sourceProvider": "Finbourne-Calendar-Service",
                      "properties": [
                        {
                          "key": "Calendar/HolidayType/Statutory",
                          "value": {
                            "labelValue": "CBTR"
                          }
                        }
                      ]
                    },
                    {
                      "href": "https://myco.lusid.com/api/api/calendar/testscope/testcode2",
                      "id": {
                        "scope": "TestScope",
                        "code": "TestCode2"
                      },
                      "type": "Holiday",
                      "weekendMask": {
                        "days": [
                          "Saturday",
                          "Sunday"
                        ],
                        "timeZone": "UTC"
                      },
                      "sourceProvider": "Finbourne-Calendar-Service",
                      "properties": [
                        {
                          "key": "Calendar/HolidayType/Statutory",
                          "value": {
                            "labelValue": "CBTR"
                          }
                        }
                      ]
                    }
                  ],
                  "href": "https://myco.lusid.com/api/api/calendar/testscope",
                  "links": []
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagedResourceListOfCalendar"
                },
                "example": {
                  "values": [
                    {
                      "href": "https://myco.lusid.com/api/api/calendar/testscope/testcode",
                      "id": {
                        "scope": "TestScope",
                        "code": "TestCode"
                      },
                      "type": "Holiday",
                      "weekendMask": {
                        "days": [
                          "Saturday",
                          "Sunday"
                        ],
                        "timeZone": "UTC"
                      },
                      "sourceProvider": "Finbourne-Calendar-Service",
                      "properties": [
                        {
                          "key": "Calendar/HolidayType/Statutory",
                          "value": {
                            "labelValue": "CBTR"
                          }
                        }
                      ]
                    },
                    {
                      "href": "https://myco.lusid.com/api/api/calendar/testscope/testcode2",
                      "id": {
                        "scope": "TestScope",
                        "code": "TestCode2"
                      },
                      "type": "Holiday",
                      "weekendMask": {
                        "days": [
                          "Saturday",
                          "Sunday"
                        ],
                        "timeZone": "UTC"
                      },
                      "sourceProvider": "Finbourne-Calendar-Service",
                      "properties": [
                        {
                          "key": "Calendar/HolidayType/Statutory",
                          "value": {
                            "labelValue": "CBTR"
                          }
                        }
                      ]
                    }
                  ],
                  "href": "https://myco.lusid.com/api/api/calendar/testscope",
                  "links": []
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      },
      "post": {
        "tags": [
          "Calendars"
        ],
        "summary": "[EARLY ACCESS] CreateCalendar: Create a calendar in its generic form",
        "description": "Create a calendar in a generic form which can be used to store date events.",
        "operationId": "CreateCalendar",
        "requestBody": {
          "description": "A request to create the calendar",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/CreateCalendarRequest"
              },
              "example": {
                "calendarId": {
                  "scope": "TestScope",
                  "code": "TestCode"
                },
                "calendarType": "Holiday",
                "weekendMask": {
                  "days": [
                    "Saturday",
                    "Sunday"
                  ],
                  "timeZone": "UTC"
                },
                "sourceProvider": "Finbourne-Calendar-Service",
                "properties": [
                  {
                    "key": "Calendar/HolidayType/Statutory",
                    "value": {
                      "labelValue": "CBTR"
                    }
                  }
                ]
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateCalendarRequest"
              },
              "example": {
                "calendarId": {
                  "scope": "TestScope",
                  "code": "TestCode"
                },
                "calendarType": "Holiday",
                "weekendMask": {
                  "days": [
                    "Saturday",
                    "Sunday"
                  ],
                  "timeZone": "UTC"
                },
                "sourceProvider": "Finbourne-Calendar-Service",
                "properties": [
                  {
                    "key": "Calendar/HolidayType/Statutory",
                    "value": {
                      "labelValue": "CBTR"
                    }
                  }
                ]
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateCalendarRequest"
              },
              "example": {
                "calendarId": {
                  "scope": "TestScope",
                  "code": "TestCode"
                },
                "calendarType": "Holiday",
                "weekendMask": {
                  "days": [
                    "Saturday",
                    "Sunday"
                  ],
                  "timeZone": "UTC"
                },
                "sourceProvider": "Finbourne-Calendar-Service",
                "properties": [
                  {
                    "key": "Calendar/HolidayType/Statutory",
                    "value": {
                      "labelValue": "CBTR"
                    }
                  }
                ]
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/CreateCalendarRequest"
              },
              "example": {
                "calendarId": {
                  "scope": "TestScope",
                  "code": "TestCode"
                },
                "calendarType": "Holiday",
                "weekendMask": {
                  "days": [
                    "Saturday",
                    "Sunday"
                  ],
                  "timeZone": "UTC"
                },
                "sourceProvider": "Finbourne-Calendar-Service",
                "properties": [
                  {
                    "key": "Calendar/HolidayType/Statutory",
                    "value": {
                      "labelValue": "CBTR"
                    }
                  }
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The created calendar",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Calendar"
                },
                "example": {
                  "href": "https://myco.lusid.com/api/api/calendar/testscope/testcode",
                  "id": {
                    "scope": "TestScope",
                    "code": "TestCode"
                  },
                  "type": "Holiday",
                  "weekendMask": {
                    "days": [
                      "Saturday",
                      "Sunday"
                    ],
                    "timeZone": "UTC"
                  },
                  "sourceProvider": "Finbourne-Calendar-Service",
                  "properties": [
                    {
                      "key": "Calendar/HolidayType/Statutory",
                      "value": {
                        "labelValue": "CBTR"
                      }
                    }
                  ]
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Calendar"
                },
                "example": {
                  "href": "https://myco.lusid.com/api/api/calendar/testscope/testcode",
                  "id": {
                    "scope": "TestScope",
                    "code": "TestCode"
                  },
                  "type": "Holiday",
                  "weekendMask": {
                    "days": [
                      "Saturday",
                      "Sunday"
                    ],
                    "timeZone": "UTC"
                  },
                  "sourceProvider": "Finbourne-Calendar-Service",
                  "properties": [
                    {
                      "key": "Calendar/HolidayType/Statutory",
                      "value": {
                        "labelValue": "CBTR"
                      }
                    }
                  ]
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Calendar"
                },
                "example": {
                  "href": "https://myco.lusid.com/api/api/calendar/testscope/testcode",
                  "id": {
                    "scope": "TestScope",
                    "code": "TestCode"
                  },
                  "type": "Holiday",
                  "weekendMask": {
                    "days": [
                      "Saturday",
                      "Sunday"
                    ],
                    "timeZone": "UTC"
                  },
                  "sourceProvider": "Finbourne-Calendar-Service",
                  "properties": [
                    {
                      "key": "Calendar/HolidayType/Statutory",
                      "value": {
                        "labelValue": "CBTR"
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      }
    },
    "/api/calendars/generic/{scope}": {
      "get": {
        "tags": [
          "Calendars"
        ],
        "summary": "[EARLY ACCESS] ListCalendarsInScope: List all calenders in a specified scope",
        "description": "List calendars in a Scope at a point in AsAt time.",
        "operationId": "ListCalendarsInScope",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "Scope of the calendars",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string"
            }
          },
          {
            "name": "asAt",
            "in": "query",
            "description": "The AsAt datetime at which to retrieve the calendars",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "x-nullable": true
          },
          {
            "name": "page",
            "in": "query",
            "description": "The pagination token to use to continue listing calendars from a previous call to list calendars.\r\n            This value is returned from the previous call. If a pagination token is provided the sortBy, filter, and asAt fields\r\n            must not have changed since the original request. Also, if set, a start value cannot be provided.",
            "schema": {
              "maxLength": 500,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\+/]*={0,3}$",
              "type": "string"
            }
          },
          {
            "name": "start",
            "in": "query",
            "description": "When paginating, skip this number of results.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-nullable": true
          },
          {
            "name": "limit",
            "in": "query",
            "description": "When paginating, limit the number of returned results to this many.",
            "schema": {
              "maximum": 5000,
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            },
            "x-nullable": true
          },
          {
            "name": "propertyKeys",
            "in": "query",
            "description": "A list of property keys from the \"Calendar\" domain to decorate onto the calendar, \r\n            These take the format {domain}/{scope}/{code} e.g. \"Calendar/System/Name\".",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "description": "The key that uniquely identifies the property. It has the format {domain}/{scope}/{code}."
              }
            },
            "x-nullable": true
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Expression to filter the result set. Read more about filtering results from LUSID here https://support.lusid.com/filtering-results-from-lusid.",
            "schema": {
              "maxLength": 16384,
              "minLength": 0,
              "pattern": "^[\\s\\S]*$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Calendars in the requested scope",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PagedResourceListOfCalendar"
                },
                "example": {
                  "values": [
                    {
                      "href": "https://myco.lusid.com/api/api/calendar/testscope/testcode",
                      "id": {
                        "scope": "TestScope",
                        "code": "TestCode"
                      },
                      "type": "Holiday",
                      "weekendMask": {
                        "days": [
                          "Saturday",
                          "Sunday"
                        ],
                        "timeZone": "UTC"
                      },
                      "sourceProvider": "Finbourne-Calendar-Service",
                      "properties": [
                        {
                          "key": "Calendar/HolidayType/Statutory",
                          "value": {
                            "labelValue": "CBTR"
                          }
                        }
                      ]
                    },
                    {
                      "href": "https://myco.lusid.com/api/api/calendar/testscope/testcode2",
                      "id": {
                        "scope": "TestScope",
                        "code": "TestCode2"
                      },
                      "type": "Holiday",
                      "weekendMask": {
                        "days": [
                          "Saturday",
                          "Sunday"
                        ],
                        "timeZone": "UTC"
                      },
                      "sourceProvider": "Finbourne-Calendar-Service",
                      "properties": [
                        {
                          "key": "Calendar/HolidayType/Statutory",
                          "value": {
                            "labelValue": "CBTR"
                          }
                        }
                      ]
                    }
                  ],
                  "href": "https://myco.lusid.com/api/api/calendar/testscope",
                  "links": []
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagedResourceListOfCalendar"
                },
                "example": {
                  "values": [
                    {
                      "href": "https://myco.lusid.com/api/api/calendar/testscope/testcode",
                      "id": {
                        "scope": "TestScope",
                        "code": "TestCode"
                      },
                      "type": "Holiday",
                      "weekendMask": {
                        "days": [
                          "Saturday",
                          "Sunday"
                        ],
                        "timeZone": "UTC"
                      },
                      "sourceProvider": "Finbourne-Calendar-Service",
                      "properties": [
                        {
                          "key": "Calendar/HolidayType/Statutory",
                          "value": {
                            "labelValue": "CBTR"
                          }
                        }
                      ]
                    },
                    {
                      "href": "https://myco.lusid.com/api/api/calendar/testscope/testcode2",
                      "id": {
                        "scope": "TestScope",
                        "code": "TestCode2"
                      },
                      "type": "Holiday",
                      "weekendMask": {
                        "days": [
                          "Saturday",
                          "Sunday"
                        ],
                        "timeZone": "UTC"
                      },
                      "sourceProvider": "Finbourne-Calendar-Service",
                      "properties": [
                        {
                          "key": "Calendar/HolidayType/Statutory",
                          "value": {
                            "labelValue": "CBTR"
                          }
                        }
                      ]
                    }
                  ],
                  "href": "https://myco.lusid.com/api/api/calendar/testscope",
                  "links": []
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagedResourceListOfCalendar"
                },
                "example": {
                  "values": [
                    {
                      "href": "https://myco.lusid.com/api/api/calendar/testscope/testcode",
                      "id": {
                        "scope": "TestScope",
                        "code": "TestCode"
                      },
                      "type": "Holiday",
                      "weekendMask": {
                        "days": [
                          "Saturday",
                          "Sunday"
                        ],
                        "timeZone": "UTC"
                      },
                      "sourceProvider": "Finbourne-Calendar-Service",
                      "properties": [
                        {
                          "key": "Calendar/HolidayType/Statutory",
                          "value": {
                            "labelValue": "CBTR"
                          }
                        }
                      ]
                    },
                    {
                      "href": "https://myco.lusid.com/api/api/calendar/testscope/testcode2",
                      "id": {
                        "scope": "TestScope",
                        "code": "TestCode2"
                      },
                      "type": "Holiday",
                      "weekendMask": {
                        "days": [
                          "Saturday",
                          "Sunday"
                        ],
                        "timeZone": "UTC"
                      },
                      "sourceProvider": "Finbourne-Calendar-Service",
                      "properties": [
                        {
                          "key": "Calendar/HolidayType/Statutory",
                          "value": {
                            "labelValue": "CBTR"
                          }
                        }
                      ]
                    }
                  ],
                  "href": "https://myco.lusid.com/api/api/calendar/testscope",
                  "links": []
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      }
    },
    "/api/calendars/generic/{scope}/{code}": {
      "get": {
        "tags": [
          "Calendars"
        ],
        "summary": "[EARLY ACCESS] GetCalendar: Get a calendar in its generic form",
        "description": "Retrieve a generic calendar by a specific ID at a point in AsAt time",
        "operationId": "GetCalendar",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "Scope of the calendar identifier",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string"
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "Code of the calendar identifier",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string"
            }
          },
          {
            "name": "propertyKeys",
            "in": "query",
            "description": "A list of property keys from the \"Calendar\" domain to decorate onto the calendar, \r\n            These take the format {domain}/{scope}/{code} e.g. \"Calendar/System/Name\".",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "description": "The key that uniquely identifies the property. It has the format {domain}/{scope}/{code}."
              }
            },
            "x-nullable": true
          },
          {
            "name": "asAt",
            "in": "query",
            "description": "The AsAt datetime at which to retrieve the calendar",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "description": "The requested calendar",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Calendar"
                },
                "example": {
                  "href": "https://myco.lusid.com/api/api/calendar/testscope/testcode",
                  "id": {
                    "scope": "TestScope",
                    "code": "TestCode"
                  },
                  "type": "Holiday",
                  "weekendMask": {
                    "days": [
                      "Saturday",
                      "Sunday"
                    ],
                    "timeZone": "UTC"
                  },
                  "sourceProvider": "Finbourne-Calendar-Service",
                  "properties": [
                    {
                      "key": "Calendar/HolidayType/Statutory",
                      "value": {
                        "labelValue": "CBTR"
                      }
                    }
                  ]
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Calendar"
                },
                "example": {
                  "href": "https://myco.lusid.com/api/api/calendar/testscope/testcode",
                  "id": {
                    "scope": "TestScope",
                    "code": "TestCode"
                  },
                  "type": "Holiday",
                  "weekendMask": {
                    "days": [
                      "Saturday",
                      "Sunday"
                    ],
                    "timeZone": "UTC"
                  },
                  "sourceProvider": "Finbourne-Calendar-Service",
                  "properties": [
                    {
                      "key": "Calendar/HolidayType/Statutory",
                      "value": {
                        "labelValue": "CBTR"
                      }
                    }
                  ]
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Calendar"
                },
                "example": {
                  "href": "https://myco.lusid.com/api/api/calendar/testscope/testcode",
                  "id": {
                    "scope": "TestScope",
                    "code": "TestCode"
                  },
                  "type": "Holiday",
                  "weekendMask": {
                    "days": [
                      "Saturday",
                      "Sunday"
                    ],
                    "timeZone": "UTC"
                  },
                  "sourceProvider": "Finbourne-Calendar-Service",
                  "properties": [
                    {
                      "key": "Calendar/HolidayType/Statutory",
                      "value": {
                        "labelValue": "CBTR"
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      },
      "post": {
        "tags": [
          "Calendars"
        ],
        "summary": "[EARLY ACCESS] UpdateCalendar: Update a calendar",
        "description": "Update the calendars WeekendMask, SourceProvider or Properties",
        "operationId": "UpdateCalendar",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "Scope of the request",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string"
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "Code of the request",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The new state of the calendar",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateCalendarRequest"
              },
              "example": {
                "weekendMask": {
                  "days": [
                    "Saturday",
                    "Sunday"
                  ],
                  "timeZone": "UTC"
                },
                "sourceProvider": "Finbourne-Calendar-Service",
                "properties": [
                  {
                    "key": "Calendar/HolidayType/Statutory",
                    "value": {
                      "labelValue": "CBTR"
                    }
                  }
                ]
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateCalendarRequest"
              },
              "example": {
                "weekendMask": {
                  "days": [
                    "Saturday",
                    "Sunday"
                  ],
                  "timeZone": "UTC"
                },
                "sourceProvider": "Finbourne-Calendar-Service",
                "properties": [
                  {
                    "key": "Calendar/HolidayType/Statutory",
                    "value": {
                      "labelValue": "CBTR"
                    }
                  }
                ]
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateCalendarRequest"
              },
              "example": {
                "weekendMask": {
                  "days": [
                    "Saturday",
                    "Sunday"
                  ],
                  "timeZone": "UTC"
                },
                "sourceProvider": "Finbourne-Calendar-Service",
                "properties": [
                  {
                    "key": "Calendar/HolidayType/Statutory",
                    "value": {
                      "labelValue": "CBTR"
                    }
                  }
                ]
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateCalendarRequest"
              },
              "example": {
                "weekendMask": {
                  "days": [
                    "Saturday",
                    "Sunday"
                  ],
                  "timeZone": "UTC"
                },
                "sourceProvider": "Finbourne-Calendar-Service",
                "properties": [
                  {
                    "key": "Calendar/HolidayType/Statutory",
                    "value": {
                      "labelValue": "CBTR"
                    }
                  }
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The updated calendar",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Calendar"
                },
                "example": {
                  "href": "https://myco.lusid.com/api/api/calendar/testscope/testcode",
                  "id": {
                    "scope": "TestScope",
                    "code": "TestCode"
                  },
                  "type": "Holiday",
                  "weekendMask": {
                    "days": [
                      "Saturday",
                      "Sunday"
                    ],
                    "timeZone": "UTC"
                  },
                  "sourceProvider": "Finbourne-Calendar-Service",
                  "properties": [
                    {
                      "key": "Calendar/HolidayType/Statutory",
                      "value": {
                        "labelValue": "CBTR"
                      }
                    }
                  ]
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Calendar"
                },
                "example": {
                  "href": "https://myco.lusid.com/api/api/calendar/testscope/testcode",
                  "id": {
                    "scope": "TestScope",
                    "code": "TestCode"
                  },
                  "type": "Holiday",
                  "weekendMask": {
                    "days": [
                      "Saturday",
                      "Sunday"
                    ],
                    "timeZone": "UTC"
                  },
                  "sourceProvider": "Finbourne-Calendar-Service",
                  "properties": [
                    {
                      "key": "Calendar/HolidayType/Statutory",
                      "value": {
                        "labelValue": "CBTR"
                      }
                    }
                  ]
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Calendar"
                },
                "example": {
                  "href": "https://myco.lusid.com/api/api/calendar/testscope/testcode",
                  "id": {
                    "scope": "TestScope",
                    "code": "TestCode"
                  },
                  "type": "Holiday",
                  "weekendMask": {
                    "days": [
                      "Saturday",
                      "Sunday"
                    ],
                    "timeZone": "UTC"
                  },
                  "sourceProvider": "Finbourne-Calendar-Service",
                  "properties": [
                    {
                      "key": "Calendar/HolidayType/Statutory",
                      "value": {
                        "labelValue": "CBTR"
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      },
      "delete": {
        "tags": [
          "Calendars"
        ],
        "summary": "[EARLY ACCESS] DeleteCalendar: Delete a calendar",
        "description": "Delete a calendar and all of its respective dates",
        "operationId": "DeleteCalendar",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "Scope of the calendar",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string"
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "Code of the calendar",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The deleted calendar",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Calendar"
                },
                "example": {
                  "href": "https://myco.lusid.com/api/api/calendar/testscope/testcode",
                  "id": {
                    "scope": "TestScope",
                    "code": "TestCode"
                  },
                  "type": "Holiday",
                  "weekendMask": {
                    "days": [
                      "Saturday",
                      "Sunday"
                    ],
                    "timeZone": "UTC"
                  },
                  "sourceProvider": "Finbourne-Calendar-Service",
                  "properties": [
                    {
                      "key": "Calendar/HolidayType/Statutory",
                      "value": {
                        "labelValue": "CBTR"
                      }
                    }
                  ]
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Calendar"
                },
                "example": {
                  "href": "https://myco.lusid.com/api/api/calendar/testscope/testcode",
                  "id": {
                    "scope": "TestScope",
                    "code": "TestCode"
                  },
                  "type": "Holiday",
                  "weekendMask": {
                    "days": [
                      "Saturday",
                      "Sunday"
                    ],
                    "timeZone": "UTC"
                  },
                  "sourceProvider": "Finbourne-Calendar-Service",
                  "properties": [
                    {
                      "key": "Calendar/HolidayType/Statutory",
                      "value": {
                        "labelValue": "CBTR"
                      }
                    }
                  ]
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Calendar"
                },
                "example": {
                  "href": "https://myco.lusid.com/api/api/calendar/testscope/testcode",
                  "id": {
                    "scope": "TestScope",
                    "code": "TestCode"
                  },
                  "type": "Holiday",
                  "weekendMask": {
                    "days": [
                      "Saturday",
                      "Sunday"
                    ],
                    "timeZone": "UTC"
                  },
                  "sourceProvider": "Finbourne-Calendar-Service",
                  "properties": [
                    {
                      "key": "Calendar/HolidayType/Statutory",
                      "value": {
                        "labelValue": "CBTR"
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      }
    },
    "/api/calendars/generic/{scope}/{code}/dates": {
      "get": {
        "tags": [
          "Calendars"
        ],
        "summary": "[EARLY ACCESS] GetDates: Get dates for a specific calendar",
        "description": "Get dates from a specific calendar within a specific window of effective time, at a point in AsAt time.\r\nProviding an id filter can further refine the results.",
        "operationId": "GetDates",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "Scope of the calendar",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string"
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "Code of the calendar",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string"
            }
          },
          {
            "name": "fromEffectiveAt",
            "in": "query",
            "description": "Where the effective window of dates should begin from",
            "schema": {
              "maxLength": 256,
              "minLength": 0,
              "pattern": "^[a-zA-Z0-9\\-_\\+:\\.]+$",
              "type": "string",
              "format": "dateorcutlabel"
            }
          },
          {
            "name": "toEffectiveAt",
            "in": "query",
            "description": "Where the effective window of dates should end",
            "schema": {
              "maxLength": 256,
              "minLength": 0,
              "pattern": "^[a-zA-Z0-9\\-_\\+:\\.]+$",
              "type": "string",
              "format": "dateorcutlabel"
            }
          },
          {
            "name": "asAt",
            "in": "query",
            "description": "AsAt the dates should be retrieved at",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "x-nullable": true
          },
          {
            "name": "idFilter",
            "in": "query",
            "description": "An additional filter that will filter dates based on their identifer",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "description": "The requested date",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfCalendarDate"
                },
                "example": {
                  "values": [
                    {
                      "href": "https://myco.lusid.com/api/api/calendar/dates",
                      "dateIdentifier": "TestDate",
                      "fromUtc": "2020-02-12T12:00:00.0000000+00:00",
                      "toUtc": "2020-02-13T12:00:00.0000000+00:00",
                      "localDate": "2020-02-02",
                      "timezone": "CET",
                      "description": "Chinese New year",
                      "type": "Holiday",
                      "sourceData": {}
                    }
                  ],
                  "links": []
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfCalendarDate"
                },
                "example": {
                  "values": [
                    {
                      "href": "https://myco.lusid.com/api/api/calendar/dates",
                      "dateIdentifier": "TestDate",
                      "fromUtc": "2020-02-12T12:00:00.0000000+00:00",
                      "toUtc": "2020-02-13T12:00:00.0000000+00:00",
                      "localDate": "2020-02-02",
                      "timezone": "CET",
                      "description": "Chinese New year",
                      "type": "Holiday",
                      "sourceData": {}
                    }
                  ],
                  "links": []
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfCalendarDate"
                },
                "example": {
                  "values": [
                    {
                      "href": "https://myco.lusid.com/api/api/calendar/dates",
                      "dateIdentifier": "TestDate",
                      "fromUtc": "2020-02-12T12:00:00.0000000+00:00",
                      "toUtc": "2020-02-13T12:00:00.0000000+00:00",
                      "localDate": "2020-02-02",
                      "timezone": "CET",
                      "description": "Chinese New year",
                      "type": "Holiday",
                      "sourceData": {}
                    }
                  ],
                  "links": []
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      },
      "put": {
        "tags": [
          "Calendars"
        ],
        "summary": "[EARLY ACCESS] AddDateToCalendar: Add a date to a calendar",
        "description": "Add an event to the calendar. These Events can be a maximum of 24 hours and must be specified in UTC.\r\nA local date will be calculated by the system and applied to the calendar before processing.",
        "operationId": "AddDateToCalendar",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "Scope of the calendar",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string"
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "Code of the calendar",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Add date to calendar request",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/CreateDateRequest"
              },
              "example": {
                "dateId": "TestDate",
                "fromUtc": "2020-02-12T12:00:00.0000000+00:00",
                "toUtc": "2020-02-13T12:00:00.0000000+00:00",
                "timeZone": "CET",
                "description": "Chinese New year",
                "type": "Holiday",
                "sourceData": {}
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateDateRequest"
              },
              "example": {
                "dateId": "TestDate",
                "fromUtc": "2020-02-12T12:00:00.0000000+00:00",
                "toUtc": "2020-02-13T12:00:00.0000000+00:00",
                "timeZone": "CET",
                "description": "Chinese New year",
                "type": "Holiday",
                "sourceData": {}
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateDateRequest"
              },
              "example": {
                "dateId": "TestDate",
                "fromUtc": "2020-02-12T12:00:00.0000000+00:00",
                "toUtc": "2020-02-13T12:00:00.0000000+00:00",
                "timeZone": "CET",
                "description": "Chinese New year",
                "type": "Holiday",
                "sourceData": {}
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/CreateDateRequest"
              },
              "example": {
                "dateId": "TestDate",
                "fromUtc": "2020-02-12T12:00:00.0000000+00:00",
                "toUtc": "2020-02-13T12:00:00.0000000+00:00",
                "timeZone": "CET",
                "description": "Chinese New year",
                "type": "Holiday",
                "sourceData": {}
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The created date",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CalendarDate"
                },
                "example": {
                  "href": "https://myco.lusid.com/api/api/calendar/dates",
                  "dateIdentifier": "TestDate",
                  "fromUtc": "2020-02-12T12:00:00.0000000+00:00",
                  "toUtc": "2020-02-13T12:00:00.0000000+00:00",
                  "localDate": "2020-02-02",
                  "timezone": "CET",
                  "description": "Chinese New year",
                  "type": "Holiday",
                  "sourceData": {}
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CalendarDate"
                },
                "example": {
                  "href": "https://myco.lusid.com/api/api/calendar/dates",
                  "dateIdentifier": "TestDate",
                  "fromUtc": "2020-02-12T12:00:00.0000000+00:00",
                  "toUtc": "2020-02-13T12:00:00.0000000+00:00",
                  "localDate": "2020-02-02",
                  "timezone": "CET",
                  "description": "Chinese New year",
                  "type": "Holiday",
                  "sourceData": {}
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CalendarDate"
                },
                "example": {
                  "href": "https://myco.lusid.com/api/api/calendar/dates",
                  "dateIdentifier": "TestDate",
                  "fromUtc": "2020-02-12T12:00:00.0000000+00:00",
                  "toUtc": "2020-02-13T12:00:00.0000000+00:00",
                  "localDate": "2020-02-02",
                  "timezone": "CET",
                  "description": "Chinese New year",
                  "type": "Holiday",
                  "sourceData": {}
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      }
    },
    "/api/calendars/generic/{scope}/{code}/dates/{dateId}": {
      "delete": {
        "tags": [
          "Calendars"
        ],
        "summary": "[EARLY ACCESS] DeleteDateFromCalendar: Remove a date from a calendar",
        "description": "Remove a date from a calendar.",
        "operationId": "DeleteDateFromCalendar",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "Scope of the calendar",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string"
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "Code of the calendar",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string"
            }
          },
          {
            "name": "dateId",
            "in": "path",
            "description": "Identifier of the date to be removed",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The deleted date",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CalendarDate"
                },
                "example": {
                  "href": "https://myco.lusid.com/api/api/calendar/dates",
                  "dateIdentifier": "TestDate",
                  "fromUtc": "2020-02-12T12:00:00.0000000+00:00",
                  "toUtc": "2020-02-13T12:00:00.0000000+00:00",
                  "localDate": "2020-02-02",
                  "timezone": "CET",
                  "description": "Chinese New year",
                  "type": "Holiday",
                  "sourceData": {}
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CalendarDate"
                },
                "example": {
                  "href": "https://myco.lusid.com/api/api/calendar/dates",
                  "dateIdentifier": "TestDate",
                  "fromUtc": "2020-02-12T12:00:00.0000000+00:00",
                  "toUtc": "2020-02-13T12:00:00.0000000+00:00",
                  "localDate": "2020-02-02",
                  "timezone": "CET",
                  "description": "Chinese New year",
                  "type": "Holiday",
                  "sourceData": {}
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CalendarDate"
                },
                "example": {
                  "href": "https://myco.lusid.com/api/api/calendar/dates",
                  "dateIdentifier": "TestDate",
                  "fromUtc": "2020-02-12T12:00:00.0000000+00:00",
                  "toUtc": "2020-02-13T12:00:00.0000000+00:00",
                  "localDate": "2020-02-02",
                  "timezone": "CET",
                  "description": "Chinese New year",
                  "type": "Holiday",
                  "sourceData": {}
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      }
    },
    "/api/calendars/schedule/{scope}": {
      "post": {
        "tags": [
          "Calendars"
        ],
        "summary": "[EARLY ACCESS] GenerateSchedule: Generate an ordered schedule of dates.",
        "description": "Returns an ordered array of dates. The dates will only fall on business\r\ndays as defined by the scope and calendar codes in the valuation schedule.\r\n            \r\nValuations are made at a frequency defined by the valuation schedule's tenor, e.g. every day (\"1D\"),\r\nevery other week (\"2W\") etc. These dates will be adjusted onto business days as defined by the schedule's\r\nrollConvention.",
        "operationId": "GenerateSchedule",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "Scope of the calendars to use",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string"
            }
          },
          {
            "name": "asAt",
            "in": "query",
            "description": "Optional AsAt for searching the calendar store. Defaults to Latest.",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "x-nullable": true
          }
        ],
        "requestBody": {
          "description": "The ValuationSchedule to generate schedule dates from",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/ValuationSchedule"
              },
              "example": {
                "effectiveFrom": "2020-01-01",
                "effectiveAt": "2021-01-01",
                "tenor": "1M",
                "rollConvention": "F",
                "holidayCalendars": [
                  "GBP",
                  "USD"
                ],
                "valuationDateTimes": []
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ValuationSchedule"
              },
              "example": {
                "effectiveFrom": "2020-01-01",
                "effectiveAt": "2021-01-01",
                "tenor": "1M",
                "rollConvention": "F",
                "holidayCalendars": [
                  "GBP",
                  "USD"
                ],
                "valuationDateTimes": []
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ValuationSchedule"
              },
              "example": {
                "effectiveFrom": "2020-01-01",
                "effectiveAt": "2021-01-01",
                "tenor": "1M",
                "rollConvention": "F",
                "holidayCalendars": [
                  "GBP",
                  "USD"
                ],
                "valuationDateTimes": []
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ValuationSchedule"
              },
              "example": {
                "effectiveFrom": "2020-01-01",
                "effectiveAt": "2021-01-01",
                "tenor": "1M",
                "rollConvention": "F",
                "holidayCalendars": [
                  "GBP",
                  "USD"
                ],
                "valuationDateTimes": []
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "An array of dates in chronological order.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "format": "date-time"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "format": "date-time"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "format": "date-time"
                  }
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      }
    },
    "/api/complexmarketdata/{scope}": {
      "post": {
        "tags": [
          "Complex Market Data"
        ],
        "summary": "[EARLY ACCESS] UpsertComplexMarketData: Upsert a set of complex market data items. This creates or updates the data in Lusid.",
        "description": "Update or insert one or more complex market data items in a single scope. An item will be updated if it already exists\r\nand inserted if it does not.\r\n            \r\nIn the request each complex market data item must be keyed by a unique correlation id. This id is ephemeral and is not stored by LUSID.\r\nIt serves only as a way to easily identify each complex market data in the response.\r\n            \r\nThe response will return both the collection of successfully updated or inserted complex market data, as well as those that failed.\r\nFor the failures a reason will be provided explaining why the item could not be updated or inserted.\r\n            \r\nIt is important to always check the failed set for any unsuccessful results.",
        "operationId": "UpsertComplexMarketData",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope to use when updating or inserting the complex market data.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The set of complex market data items to update or insert keyed by a unique correlation id.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/components/schemas/UpsertComplexMarketDataRequest"
                }
              },
              "example": {
                "first-item": {
                  "marketDataId": {
                    "provider": "DataScope",
                    "priceSource": "Some Bank Plc",
                    "effectiveAt": "2018-03-05T00:00:00.0000000+00:00",
                    "marketAsset": "USD/USDOIS"
                  },
                  "marketData": {
                    "baseDate": "1970-01-01T00:00:00.0000000+00:00",
                    "dates": [
                      "1970-01-01T00:00:00.0000000+00:00"
                    ],
                    "discountFactors": [
                      1
                    ],
                    "lineage": "SomeLineage",
                    "marketDataType": "DiscountFactorCurveData"
                  }
                },
                "second-item": {
                  "marketDataId": {
                    "provider": "Lusid",
                    "effectiveAt": "2021-01-20T00:00:00.0000000+00:00",
                    "marketAsset": "EUR/USD/FxFwdCurve"
                  },
                  "marketData": {
                    "baseDate": "2021-01-20T00:00:00.0000000+00:00",
                    "domCcy": "EUR",
                    "fgnCcy": "USD",
                    "tenors": [
                      "1D",
                      "1W",
                      "2W",
                      "3W",
                      "1M",
                      "2M",
                      "3M",
                      "4M",
                      "5M",
                      "6M",
                      "9M",
                      "1Y",
                      "15M",
                      "18M",
                      "2Y",
                      "3Y"
                    ],
                    "pipRates": [
                      0.6375,
                      1.4975,
                      3.0275,
                      4.5625,
                      6.7525,
                      19.5125,
                      27.3225,
                      34.0625,
                      41.5175,
                      49.2025,
                      74.8125,
                      104.9125,
                      141.1925,
                      176.8375,
                      260.1475,
                      453.2625
                    ],
                    "lineage": "",
                    "calendars": [],
                    "spotDaysCalculationType": "SingleCalendar",
                    "marketDataType": "FxForwardTenorPipsCurveData"
                  }
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/components/schemas/UpsertComplexMarketDataRequest"
                }
              },
              "example": {
                "first-item": {
                  "marketDataId": {
                    "provider": "DataScope",
                    "priceSource": "Some Bank Plc",
                    "effectiveAt": "2018-03-05T00:00:00.0000000+00:00",
                    "marketAsset": "USD/USDOIS"
                  },
                  "marketData": {
                    "baseDate": "1970-01-01T00:00:00.0000000+00:00",
                    "dates": [
                      "1970-01-01T00:00:00.0000000+00:00"
                    ],
                    "discountFactors": [
                      1
                    ],
                    "lineage": "SomeLineage",
                    "marketDataType": "DiscountFactorCurveData"
                  }
                },
                "second-item": {
                  "marketDataId": {
                    "provider": "Lusid",
                    "effectiveAt": "2021-01-20T00:00:00.0000000+00:00",
                    "marketAsset": "EUR/USD/FxFwdCurve"
                  },
                  "marketData": {
                    "baseDate": "2021-01-20T00:00:00.0000000+00:00",
                    "domCcy": "EUR",
                    "fgnCcy": "USD",
                    "tenors": [
                      "1D",
                      "1W",
                      "2W",
                      "3W",
                      "1M",
                      "2M",
                      "3M",
                      "4M",
                      "5M",
                      "6M",
                      "9M",
                      "1Y",
                      "15M",
                      "18M",
                      "2Y",
                      "3Y"
                    ],
                    "pipRates": [
                      0.6375,
                      1.4975,
                      3.0275,
                      4.5625,
                      6.7525,
                      19.5125,
                      27.3225,
                      34.0625,
                      41.5175,
                      49.2025,
                      74.8125,
                      104.9125,
                      141.1925,
                      176.8375,
                      260.1475,
                      453.2625
                    ],
                    "lineage": "",
                    "calendars": [],
                    "spotDaysCalculationType": "SingleCalendar",
                    "marketDataType": "FxForwardTenorPipsCurveData"
                  }
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/components/schemas/UpsertComplexMarketDataRequest"
                }
              },
              "example": {
                "first-item": {
                  "marketDataId": {
                    "provider": "DataScope",
                    "priceSource": "Some Bank Plc",
                    "effectiveAt": "2018-03-05T00:00:00.0000000+00:00",
                    "marketAsset": "USD/USDOIS"
                  },
                  "marketData": {
                    "baseDate": "1970-01-01T00:00:00.0000000+00:00",
                    "dates": [
                      "1970-01-01T00:00:00.0000000+00:00"
                    ],
                    "discountFactors": [
                      1
                    ],
                    "lineage": "SomeLineage",
                    "marketDataType": "DiscountFactorCurveData"
                  }
                },
                "second-item": {
                  "marketDataId": {
                    "provider": "Lusid",
                    "effectiveAt": "2021-01-20T00:00:00.0000000+00:00",
                    "marketAsset": "EUR/USD/FxFwdCurve"
                  },
                  "marketData": {
                    "baseDate": "2021-01-20T00:00:00.0000000+00:00",
                    "domCcy": "EUR",
                    "fgnCcy": "USD",
                    "tenors": [
                      "1D",
                      "1W",
                      "2W",
                      "3W",
                      "1M",
                      "2M",
                      "3M",
                      "4M",
                      "5M",
                      "6M",
                      "9M",
                      "1Y",
                      "15M",
                      "18M",
                      "2Y",
                      "3Y"
                    ],
                    "pipRates": [
                      0.6375,
                      1.4975,
                      3.0275,
                      4.5625,
                      6.7525,
                      19.5125,
                      27.3225,
                      34.0625,
                      41.5175,
                      49.2025,
                      74.8125,
                      104.9125,
                      141.1925,
                      176.8375,
                      260.1475,
                      453.2625
                    ],
                    "lineage": "",
                    "calendars": [],
                    "spotDaysCalculationType": "SingleCalendar",
                    "marketDataType": "FxForwardTenorPipsCurveData"
                  }
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/components/schemas/UpsertComplexMarketDataRequest"
                }
              },
              "example": {
                "first-item": {
                  "marketDataId": {
                    "provider": "DataScope",
                    "priceSource": "Some Bank Plc",
                    "effectiveAt": "2018-03-05T00:00:00.0000000+00:00",
                    "marketAsset": "USD/USDOIS"
                  },
                  "marketData": {
                    "baseDate": "1970-01-01T00:00:00.0000000+00:00",
                    "dates": [
                      "1970-01-01T00:00:00.0000000+00:00"
                    ],
                    "discountFactors": [
                      1
                    ],
                    "lineage": "SomeLineage",
                    "marketDataType": "DiscountFactorCurveData"
                  }
                },
                "second-item": {
                  "marketDataId": {
                    "provider": "Lusid",
                    "effectiveAt": "2021-01-20T00:00:00.0000000+00:00",
                    "marketAsset": "EUR/USD/FxFwdCurve"
                  },
                  "marketData": {
                    "baseDate": "2021-01-20T00:00:00.0000000+00:00",
                    "domCcy": "EUR",
                    "fgnCcy": "USD",
                    "tenors": [
                      "1D",
                      "1W",
                      "2W",
                      "3W",
                      "1M",
                      "2M",
                      "3M",
                      "4M",
                      "5M",
                      "6M",
                      "9M",
                      "1Y",
                      "15M",
                      "18M",
                      "2Y",
                      "3Y"
                    ],
                    "pipRates": [
                      0.6375,
                      1.4975,
                      3.0275,
                      4.5625,
                      6.7525,
                      19.5125,
                      27.3225,
                      34.0625,
                      41.5175,
                      49.2025,
                      74.8125,
                      104.9125,
                      141.1925,
                      176.8375,
                      260.1475,
                      453.2625
                    ],
                    "lineage": "",
                    "calendars": [],
                    "spotDaysCalculationType": "SingleCalendar",
                    "marketDataType": "FxForwardTenorPipsCurveData"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The successfully updated or inserted ComplexMarketData along with any failures",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UpsertStructuredDataResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpsertStructuredDataResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpsertStructuredDataResponse"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      }
    },
    "/api/complexmarketdata/{scope}/$delete": {
      "post": {
        "tags": [
          "Complex Market Data"
        ],
        "summary": "[EARLY ACCESS] DeleteComplexMarketData: Delete one or more items of complex market data, assuming they are present.",
        "description": "Delete one or more specified complex market data items from a single scope. Each item is identified by a unique id which includes\r\ninformation about its type as well as the exact effective datetime (to the microsecond) at which it entered the system (became valid).\r\n            \r\nIn the request each complex market data item must be keyed by a unique correlation id. This id is ephemeral and is not stored by LUSID.\r\nIt serves only as a way to easily identify each quote in the response.\r\n            \r\nThe response will return both the collection of successfully deleted  complex market data items, as well as those that failed.\r\nFor the failures a reason will be provided explaining why the it could not be deleted.\r\n            \r\nIt is important to always check the failed set for any unsuccessful results.",
        "operationId": "DeleteComplexMarketData",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the complex market data to delete.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The complex market data Ids to delete, each keyed by a unique correlation id.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/components/schemas/ComplexMarketDataId"
                }
              },
              "example": {
                "first-item": {
                  "provider": "DataScope",
                  "priceSource": "Some Bank Plc",
                  "lineage": "Swaps Desk Trader A",
                  "effectiveAt": "2018-03-05T00:00:00.0000000+00:00",
                  "marketAsset": "USDOIS"
                },
                "second-item": {
                  "provider": "DataScope",
                  "priceSource": "AN.Other Bank Plc",
                  "lineage": "Swaps Desk Trader B",
                  "effectiveAt": "2018-03-05T00:00:00.0000000+00:00",
                  "marketAsset": "RBS"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/components/schemas/ComplexMarketDataId"
                }
              },
              "example": {
                "first-item": {
                  "provider": "DataScope",
                  "priceSource": "Some Bank Plc",
                  "lineage": "Swaps Desk Trader A",
                  "effectiveAt": "2018-03-05T00:00:00.0000000+00:00",
                  "marketAsset": "USDOIS"
                },
                "second-item": {
                  "provider": "DataScope",
                  "priceSource": "AN.Other Bank Plc",
                  "lineage": "Swaps Desk Trader B",
                  "effectiveAt": "2018-03-05T00:00:00.0000000+00:00",
                  "marketAsset": "RBS"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/components/schemas/ComplexMarketDataId"
                }
              },
              "example": {
                "first-item": {
                  "provider": "DataScope",
                  "priceSource": "Some Bank Plc",
                  "lineage": "Swaps Desk Trader A",
                  "effectiveAt": "2018-03-05T00:00:00.0000000+00:00",
                  "marketAsset": "USDOIS"
                },
                "second-item": {
                  "provider": "DataScope",
                  "priceSource": "AN.Other Bank Plc",
                  "lineage": "Swaps Desk Trader B",
                  "effectiveAt": "2018-03-05T00:00:00.0000000+00:00",
                  "marketAsset": "RBS"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/components/schemas/ComplexMarketDataId"
                }
              },
              "example": {
                "first-item": {
                  "provider": "DataScope",
                  "priceSource": "Some Bank Plc",
                  "lineage": "Swaps Desk Trader A",
                  "effectiveAt": "2018-03-05T00:00:00.0000000+00:00",
                  "marketAsset": "USDOIS"
                },
                "second-item": {
                  "provider": "DataScope",
                  "priceSource": "AN.Other Bank Plc",
                  "lineage": "Swaps Desk Trader B",
                  "effectiveAt": "2018-03-05T00:00:00.0000000+00:00",
                  "marketAsset": "RBS"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The successfully deleted ComplexMarketData along with any failures",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/AnnulStructuredDataResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AnnulStructuredDataResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/AnnulStructuredDataResponse"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      }
    },
    "/api/complexmarketdata/{scope}/$get": {
      "post": {
        "tags": [
          "Complex Market Data"
        ],
        "summary": "[EARLY ACCESS] GetComplexMarketData: Get complex market data",
        "description": "Get one or more items of complex market data from a single scope.\r\n            \r\nEach item can be identified by its time invariant complex market data identifier.\r\n            \r\nFor each id LUSID will return the most recent matched item with respect to the provided (or default) effective datetime.\r\n            \r\nAn optional maximum age range window can be specified which defines how far back to look back for data from the specified effective datetime.\r\nLUSID will return the most recent item within this window.\r\n            \r\nIn the request each complex market data id must be keyed by a unique correlation id. This id is ephemeral and is not stored by LUSID.\r\nIt serves only as a way to easily identify each item in the response.\r\n            \r\nThe response will return three collections. One, the successfully retrieved complex market data. Two, those that had a\r\nvalid identifier but could not be found. Three, those that failed because LUSID could not construct a valid identifier from the request.\r\n            \r\nFor the ids that failed to resolve or could not be found a reason will be provided explaining why that is the case.\r\n            \r\nIt is important to always check the failed and not found sets for any unsuccessful results.",
        "operationId": "GetComplexMarketData",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the complex market data to retrieve.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string"
            }
          },
          {
            "name": "effectiveAt",
            "in": "query",
            "description": "The effective datetime at which to retrieve the complex market data.\r\n             Defaults to the current LUSID system datetime if not specified.\r\n             Must match the Effective at of each ComplexMarketDataId given in the request body.",
            "schema": {
              "maxLength": 256,
              "minLength": 0,
              "pattern": "^[a-zA-Z0-9\\-_\\+:\\.]+$",
              "type": "string",
              "format": "dateorcutlabel"
            }
          },
          {
            "name": "asAt",
            "in": "query",
            "description": "The asAt datetime at which to retrieve the complex market data. Defaults to return the latest version if not specified.",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "x-nullable": true
          },
          {
            "name": "maxAge",
            "in": "query",
            "description": "The duration of the look back window in an ISO8601 time interval format e.g. P1Y2M3DT4H30M (1 year, 2 months, 3 days, 4 hours and 30 minutes).\r\n             This is subtracted from the provided effectiveAt datetime to generate a effective datetime window inside which a complex market data item must exist to be retrieved.",
            "schema": {
              "type": "string",
              "format": "date-span"
            }
          }
        ],
        "requestBody": {
          "description": "The time invariant set of complex data identifiers to retrieve the data for. These need to be\r\n             keyed by a unique correlation id allowing the retrieved item to be identified in the response.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/components/schemas/ComplexMarketDataId"
                }
              },
              "example": {
                "first-item": {
                  "provider": "DataScope",
                  "priceSource": "Some Bank Plc",
                  "lineage": "Swaps Desk Trader A",
                  "effectiveAt": "2018-03-05T00:00:00.0000000+00:00",
                  "marketAsset": "USDOIS"
                },
                "second-item": {
                  "provider": "DataScope",
                  "priceSource": "AN.Other Bank Plc",
                  "lineage": "Swaps Desk Trader B",
                  "effectiveAt": "2018-03-05T00:00:00.0000000+00:00",
                  "marketAsset": "RBS"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/components/schemas/ComplexMarketDataId"
                }
              },
              "example": {
                "first-item": {
                  "provider": "DataScope",
                  "priceSource": "Some Bank Plc",
                  "lineage": "Swaps Desk Trader A",
                  "effectiveAt": "2018-03-05T00:00:00.0000000+00:00",
                  "marketAsset": "USDOIS"
                },
                "second-item": {
                  "provider": "DataScope",
                  "priceSource": "AN.Other Bank Plc",
                  "lineage": "Swaps Desk Trader B",
                  "effectiveAt": "2018-03-05T00:00:00.0000000+00:00",
                  "marketAsset": "RBS"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/components/schemas/ComplexMarketDataId"
                }
              },
              "example": {
                "first-item": {
                  "provider": "DataScope",
                  "priceSource": "Some Bank Plc",
                  "lineage": "Swaps Desk Trader A",
                  "effectiveAt": "2018-03-05T00:00:00.0000000+00:00",
                  "marketAsset": "USDOIS"
                },
                "second-item": {
                  "provider": "DataScope",
                  "priceSource": "AN.Other Bank Plc",
                  "lineage": "Swaps Desk Trader B",
                  "effectiveAt": "2018-03-05T00:00:00.0000000+00:00",
                  "marketAsset": "RBS"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/components/schemas/ComplexMarketDataId"
                }
              },
              "example": {
                "first-item": {
                  "provider": "DataScope",
                  "priceSource": "Some Bank Plc",
                  "lineage": "Swaps Desk Trader A",
                  "effectiveAt": "2018-03-05T00:00:00.0000000+00:00",
                  "marketAsset": "USDOIS"
                },
                "second-item": {
                  "provider": "DataScope",
                  "priceSource": "AN.Other Bank Plc",
                  "lineage": "Swaps Desk Trader B",
                  "effectiveAt": "2018-03-05T00:00:00.0000000+00:00",
                  "marketAsset": "RBS"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The successfully retrieved complex market data along with any failures",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/GetComplexMarketDataResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetComplexMarketDataResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetComplexMarketDataResponse"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      }
    },
    "/api/compliance/generic/rules": {
      "post": {
        "tags": [
          "Compliance - Generic"
        ],
        "summary": "[EARLY ACCESS] UpsertComplianceRule: Upsert a compliance rule.",
        "description": "PLEASE NOTE: loopback EarlyAccess endpoint for discussion only.",
        "operationId": "UpsertComplianceRule",
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/UpsertComplianceRuleRequest"
              },
              "example": {
                "id": {
                  "scope": "live",
                  "code": "exampleRule"
                },
                "name": "A friendly name.",
                "description": "A friendly description.",
                "active": true,
                "templateId": {
                  "scope": "live",
                  "code": "exampleTemplate"
                },
                "variation": "Single",
                "parameters": {
                  "UpperBound": {
                    "parameterType": "Decimal",
                    "value": 15
                  }
                },
                "properties": {
                  "Compliance/MyScope/SomeRuleProperty": {
                    "key": "Compliance/MyScope/SomeRuleProperty",
                    "value": {
                      "labelValue": "XYZ000034567"
                    }
                  }
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpsertComplianceRuleRequest"
              },
              "example": {
                "id": {
                  "scope": "live",
                  "code": "exampleRule"
                },
                "name": "A friendly name.",
                "description": "A friendly description.",
                "active": true,
                "templateId": {
                  "scope": "live",
                  "code": "exampleTemplate"
                },
                "variation": "Single",
                "parameters": {
                  "UpperBound": {
                    "parameterType": "Decimal",
                    "value": 15
                  }
                },
                "properties": {
                  "Compliance/MyScope/SomeRuleProperty": {
                    "key": "Compliance/MyScope/SomeRuleProperty",
                    "value": {
                      "labelValue": "XYZ000034567"
                    }
                  }
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/UpsertComplianceRuleRequest"
              },
              "example": {
                "id": {
                  "scope": "live",
                  "code": "exampleRule"
                },
                "name": "A friendly name.",
                "description": "A friendly description.",
                "active": true,
                "templateId": {
                  "scope": "live",
                  "code": "exampleTemplate"
                },
                "variation": "Single",
                "parameters": {
                  "UpperBound": {
                    "parameterType": "Decimal",
                    "value": 15
                  }
                },
                "properties": {
                  "Compliance/MyScope/SomeRuleProperty": {
                    "key": "Compliance/MyScope/SomeRuleProperty",
                    "value": {
                      "labelValue": "XYZ000034567"
                    }
                  }
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/UpsertComplianceRuleRequest"
              },
              "example": {
                "id": {
                  "scope": "live",
                  "code": "exampleRule"
                },
                "name": "A friendly name.",
                "description": "A friendly description.",
                "active": true,
                "templateId": {
                  "scope": "live",
                  "code": "exampleTemplate"
                },
                "variation": "Single",
                "parameters": {
                  "UpperBound": {
                    "parameterType": "Decimal",
                    "value": 15
                  }
                },
                "properties": {
                  "Compliance/MyScope/SomeRuleProperty": {
                    "key": "Compliance/MyScope/SomeRuleProperty",
                    "value": {
                      "labelValue": "XYZ000034567"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The upserted compliance rule.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ComplianceRuleResponse"
                },
                "example": {
                  "id": {
                    "scope": "examples",
                    "code": "exampleRule"
                  },
                  "name": "A friendly example rule name.",
                  "description": "An friendly description example.",
                  "active": true,
                  "templateId": {
                    "scope": "live",
                    "code": "exampleTemplate"
                  },
                  "variation": "Single",
                  "parameters": {
                    "UpperBound": {
                      "parameterType": "Decimal",
                      "value": 30
                    }
                  },
                  "properties": {
                    "Compliance/MyScope/SomeOrderProperty": {
                      "key": "Compliance/MyScope/SomeOrderProperty",
                      "value": {
                        "labelValue": "XYZ000034567"
                      }
                    }
                  },
                  "version": {
                    "effectiveFrom": "2018-03-05T10:10:10.0000000+00:00",
                    "asAtDate": "2018-03-05T10:10:10.0000000+00:00",
                    "asAtCreated": "2018-03-05T10:10:10.0000000+00:00",
                    "userIdCreated": "User1",
                    "asAtModified": "2018-03-08T10:10:10.0000000+00:00",
                    "userIdModified": "User2",
                    "asAtVersionNumber": 2
                  },
                  "links": []
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ComplianceRuleResponse"
                },
                "example": {
                  "id": {
                    "scope": "examples",
                    "code": "exampleRule"
                  },
                  "name": "A friendly example rule name.",
                  "description": "An friendly description example.",
                  "active": true,
                  "templateId": {
                    "scope": "live",
                    "code": "exampleTemplate"
                  },
                  "variation": "Single",
                  "parameters": {
                    "UpperBound": {
                      "parameterType": "Decimal",
                      "value": 30
                    }
                  },
                  "properties": {
                    "Compliance/MyScope/SomeOrderProperty": {
                      "key": "Compliance/MyScope/SomeOrderProperty",
                      "value": {
                        "labelValue": "XYZ000034567"
                      }
                    }
                  },
                  "version": {
                    "effectiveFrom": "2018-03-05T10:10:10.0000000+00:00",
                    "asAtDate": "2018-03-05T10:10:10.0000000+00:00",
                    "asAtCreated": "2018-03-05T10:10:10.0000000+00:00",
                    "userIdCreated": "User1",
                    "asAtModified": "2018-03-08T10:10:10.0000000+00:00",
                    "userIdModified": "User2",
                    "asAtVersionNumber": 2
                  },
                  "links": []
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ComplianceRuleResponse"
                },
                "example": {
                  "id": {
                    "scope": "examples",
                    "code": "exampleRule"
                  },
                  "name": "A friendly example rule name.",
                  "description": "An friendly description example.",
                  "active": true,
                  "templateId": {
                    "scope": "live",
                    "code": "exampleTemplate"
                  },
                  "variation": "Single",
                  "parameters": {
                    "UpperBound": {
                      "parameterType": "Decimal",
                      "value": 30
                    }
                  },
                  "properties": {
                    "Compliance/MyScope/SomeOrderProperty": {
                      "key": "Compliance/MyScope/SomeOrderProperty",
                      "value": {
                        "labelValue": "XYZ000034567"
                      }
                    }
                  },
                  "version": {
                    "effectiveFrom": "2018-03-05T10:10:10.0000000+00:00",
                    "asAtDate": "2018-03-05T10:10:10.0000000+00:00",
                    "asAtCreated": "2018-03-05T10:10:10.0000000+00:00",
                    "userIdCreated": "User1",
                    "asAtModified": "2018-03-08T10:10:10.0000000+00:00",
                    "userIdModified": "User2",
                    "asAtVersionNumber": 2
                  },
                  "links": []
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      },
      "get": {
        "tags": [
          "Compliance - Generic"
        ],
        "summary": "[EARLY ACCESS] ListComplianceRules2: List compliance rules.",
        "description": "PLEASE NOTE: loopback EarlyAccess endpoint for discussion only.",
        "operationId": "ListComplianceRules2",
        "parameters": [
          {
            "name": "asAt",
            "in": "query",
            "description": "Optional. Asat time.",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "x-nullable": true
          },
          {
            "name": "page",
            "in": "query",
            "description": "Optional. Pagination token.",
            "schema": {
              "maxLength": 500,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\+/]*={0,3}$",
              "type": "string"
            }
          },
          {
            "name": "start",
            "in": "query",
            "description": "Optional. Entry at which to start.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-nullable": true
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Optional. Entries per page.",
            "schema": {
              "maximum": 5000,
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            },
            "x-nullable": true
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Optional. Filter.",
            "schema": {
              "maxLength": 16384,
              "minLength": 0,
              "pattern": "^[\\s\\S]*$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The list of compliance rules.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PagedResourceListOfComplianceRuleResponse"
                },
                "example": {
                  "values": [
                    {
                      "id": {
                        "scope": "examples",
                        "code": "exampleRule"
                      },
                      "name": "A friendly example rule name.",
                      "description": "An friendly description example.",
                      "active": true,
                      "templateId": {
                        "scope": "live",
                        "code": "exampleTemplate"
                      },
                      "variation": "Single",
                      "parameters": {
                        "UpperBound": {
                          "parameterType": "Decimal",
                          "value": 30
                        }
                      },
                      "properties": {
                        "Compliance/MyScope/SomeOrderProperty": {
                          "key": "Compliance/MyScope/SomeOrderProperty",
                          "value": {
                            "labelValue": "XYZ000034567"
                          }
                        }
                      },
                      "version": {
                        "effectiveFrom": "2018-03-05T10:10:10.0000000+00:00",
                        "asAtDate": "2018-03-05T10:10:10.0000000+00:00",
                        "asAtCreated": "2018-03-05T10:10:10.0000000+00:00",
                        "userIdCreated": "User1",
                        "asAtModified": "2018-03-08T10:10:10.0000000+00:00",
                        "userIdModified": "User2",
                        "asAtVersionNumber": 2
                      },
                      "links": []
                    }
                  ],
                  "href": "https://myco.lusid.com/api/api/compliance/generic/rules",
                  "links": []
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagedResourceListOfComplianceRuleResponse"
                },
                "example": {
                  "values": [
                    {
                      "id": {
                        "scope": "examples",
                        "code": "exampleRule"
                      },
                      "name": "A friendly example rule name.",
                      "description": "An friendly description example.",
                      "active": true,
                      "templateId": {
                        "scope": "live",
                        "code": "exampleTemplate"
                      },
                      "variation": "Single",
                      "parameters": {
                        "UpperBound": {
                          "parameterType": "Decimal",
                          "value": 30
                        }
                      },
                      "properties": {
                        "Compliance/MyScope/SomeOrderProperty": {
                          "key": "Compliance/MyScope/SomeOrderProperty",
                          "value": {
                            "labelValue": "XYZ000034567"
                          }
                        }
                      },
                      "version": {
                        "effectiveFrom": "2018-03-05T10:10:10.0000000+00:00",
                        "asAtDate": "2018-03-05T10:10:10.0000000+00:00",
                        "asAtCreated": "2018-03-05T10:10:10.0000000+00:00",
                        "userIdCreated": "User1",
                        "asAtModified": "2018-03-08T10:10:10.0000000+00:00",
                        "userIdModified": "User2",
                        "asAtVersionNumber": 2
                      },
                      "links": []
                    }
                  ],
                  "href": "https://myco.lusid.com/api/api/compliance/generic/rules",
                  "links": []
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagedResourceListOfComplianceRuleResponse"
                },
                "example": {
                  "values": [
                    {
                      "id": {
                        "scope": "examples",
                        "code": "exampleRule"
                      },
                      "name": "A friendly example rule name.",
                      "description": "An friendly description example.",
                      "active": true,
                      "templateId": {
                        "scope": "live",
                        "code": "exampleTemplate"
                      },
                      "variation": "Single",
                      "parameters": {
                        "UpperBound": {
                          "parameterType": "Decimal",
                          "value": 30
                        }
                      },
                      "properties": {
                        "Compliance/MyScope/SomeOrderProperty": {
                          "key": "Compliance/MyScope/SomeOrderProperty",
                          "value": {
                            "labelValue": "XYZ000034567"
                          }
                        }
                      },
                      "version": {
                        "effectiveFrom": "2018-03-05T10:10:10.0000000+00:00",
                        "asAtDate": "2018-03-05T10:10:10.0000000+00:00",
                        "asAtCreated": "2018-03-05T10:10:10.0000000+00:00",
                        "userIdCreated": "User1",
                        "asAtModified": "2018-03-08T10:10:10.0000000+00:00",
                        "userIdModified": "User2",
                        "asAtVersionNumber": 2
                      },
                      "links": []
                    }
                  ],
                  "href": "https://myco.lusid.com/api/api/compliance/generic/rules",
                  "links": []
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      }
    },
    "/api/compliance/generic/rules/{scope}/{code}": {
      "get": {
        "tags": [
          "Compliance - Generic"
        ],
        "summary": "[EARLY ACCESS] GetComplianceRule2: Get compliance rule.",
        "description": "PLEASE NOTE: loopback EarlyAccess endpoint for discussion only.",
        "operationId": "GetComplianceRule2",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The compliance rule's scope.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string"
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The compliance rule's code.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string"
            }
          },
          {
            "name": "asAt",
            "in": "query",
            "description": "Optional. Asat time for query.",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "description": "The requested compliance rule.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ComplianceRuleResponse"
                },
                "example": {
                  "id": {
                    "scope": "examples",
                    "code": "exampleRule"
                  },
                  "name": "A friendly example rule name.",
                  "description": "An friendly description example.",
                  "active": true,
                  "templateId": {
                    "scope": "live",
                    "code": "exampleTemplate"
                  },
                  "variation": "Single",
                  "parameters": {
                    "UpperBound": {
                      "parameterType": "Decimal",
                      "value": 30
                    }
                  },
                  "properties": {
                    "Compliance/MyScope/SomeOrderProperty": {
                      "key": "Compliance/MyScope/SomeOrderProperty",
                      "value": {
                        "labelValue": "XYZ000034567"
                      }
                    }
                  },
                  "version": {
                    "effectiveFrom": "2018-03-05T10:10:10.0000000+00:00",
                    "asAtDate": "2018-03-05T10:10:10.0000000+00:00",
                    "asAtCreated": "2018-03-05T10:10:10.0000000+00:00",
                    "userIdCreated": "User1",
                    "asAtModified": "2018-03-08T10:10:10.0000000+00:00",
                    "userIdModified": "User2",
                    "asAtVersionNumber": 2
                  },
                  "links": []
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ComplianceRuleResponse"
                },
                "example": {
                  "id": {
                    "scope": "examples",
                    "code": "exampleRule"
                  },
                  "name": "A friendly example rule name.",
                  "description": "An friendly description example.",
                  "active": true,
                  "templateId": {
                    "scope": "live",
                    "code": "exampleTemplate"
                  },
                  "variation": "Single",
                  "parameters": {
                    "UpperBound": {
                      "parameterType": "Decimal",
                      "value": 30
                    }
                  },
                  "properties": {
                    "Compliance/MyScope/SomeOrderProperty": {
                      "key": "Compliance/MyScope/SomeOrderProperty",
                      "value": {
                        "labelValue": "XYZ000034567"
                      }
                    }
                  },
                  "version": {
                    "effectiveFrom": "2018-03-05T10:10:10.0000000+00:00",
                    "asAtDate": "2018-03-05T10:10:10.0000000+00:00",
                    "asAtCreated": "2018-03-05T10:10:10.0000000+00:00",
                    "userIdCreated": "User1",
                    "asAtModified": "2018-03-08T10:10:10.0000000+00:00",
                    "userIdModified": "User2",
                    "asAtVersionNumber": 2
                  },
                  "links": []
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ComplianceRuleResponse"
                },
                "example": {
                  "id": {
                    "scope": "examples",
                    "code": "exampleRule"
                  },
                  "name": "A friendly example rule name.",
                  "description": "An friendly description example.",
                  "active": true,
                  "templateId": {
                    "scope": "live",
                    "code": "exampleTemplate"
                  },
                  "variation": "Single",
                  "parameters": {
                    "UpperBound": {
                      "parameterType": "Decimal",
                      "value": 30
                    }
                  },
                  "properties": {
                    "Compliance/MyScope/SomeOrderProperty": {
                      "key": "Compliance/MyScope/SomeOrderProperty",
                      "value": {
                        "labelValue": "XYZ000034567"
                      }
                    }
                  },
                  "version": {
                    "effectiveFrom": "2018-03-05T10:10:10.0000000+00:00",
                    "asAtDate": "2018-03-05T10:10:10.0000000+00:00",
                    "asAtCreated": "2018-03-05T10:10:10.0000000+00:00",
                    "userIdCreated": "User1",
                    "asAtModified": "2018-03-08T10:10:10.0000000+00:00",
                    "userIdModified": "User2",
                    "asAtVersionNumber": 2
                  },
                  "links": []
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      },
      "delete": {
        "tags": [
          "Compliance - Generic"
        ],
        "summary": "[EARLY ACCESS] DeleteComplianceRule2: Get compliance rule.",
        "description": "PLEASE NOTE: loopback EarlyAccess endpoint for discussion only.",
        "operationId": "DeleteComplianceRule2",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The compliance rule's scope.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string"
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The compliance rule's code.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedEntityResponse"
                },
                "example": {
                  "asAt": "2018-03-05T10:10:10.0000000+00:00"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedEntityResponse"
                },
                "example": {
                  "asAt": "2018-03-05T10:10:10.0000000+00:00"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedEntityResponse"
                },
                "example": {
                  "asAt": "2018-03-05T10:10:10.0000000+00:00"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      }
    },
    "/api/compliance/templates": {
      "get": {
        "tags": [
          "Compliance - Generic"
        ],
        "summary": "[EARLY ACCESS] ListComplianceTemplates: Get a specific compliance template",
        "description": "Use this endpoint to fetch a list of all available compliance template ids.",
        "operationId": "ListComplianceTemplates",
        "parameters": [
          {
            "name": "asAt",
            "in": "query",
            "description": "Optional. The time at which to get results from. Default : latest",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "x-nullable": true
          },
          {
            "name": "page",
            "in": "query",
            "description": "Optional. The pagination token to use to continue listing compliance runs from a previous call to list compliance runs.\r\n            This value is returned from the previous call. If a pagination token is provided the sortBy, filter, and asAt fields\r\n            must not have changed since the original request. Also, if set, a start value cannot be provided.",
            "schema": {
              "maxLength": 500,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\+/]*={0,3}$",
              "type": "string"
            }
          },
          {
            "name": "start",
            "in": "query",
            "description": "Optional. When paginating, skip this number of results.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-nullable": true
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Optional. When paginating, limit the number of returned results to this many.",
            "schema": {
              "maximum": 5000,
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            },
            "x-nullable": true
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Optional. Expression to filter the result set. Read more about filtering results from LUSID here https://support.lusid.com/filtering-results-from-lusid.",
            "schema": {
              "maxLength": 16384,
              "minLength": 0,
              "pattern": "^[\\s\\S]*$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The list of compliance templates available.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PagedResourceListOfComplianceTemplate"
                },
                "example": {
                  "values": [
                    {
                      "id": {
                        "scope": "MyScope",
                        "code": "MyTemplateCode"
                      },
                      "description": "Some Description Here",
                      "tags": [
                        "tag1",
                        "tag2",
                        "tag3"
                      ],
                      "variations": [
                        {
                          "label": "Some Variation Label",
                          "description": "Some Variation Description",
                          "requiredParameters": [
                            {
                              "name": "Param1Name",
                              "description": "Parameter 1 Description",
                              "type": "string",
                              "isCheckingParameter": true
                            },
                            {
                              "name": "Param2Name",
                              "description": "Parameter 2 Description",
                              "type": "addressKey",
                              "isCheckingParameter": false
                            }
                          ],
                          "properties": {
                            "Compliance/system/ResultStructure": {
                              "key": "Compliance/system/ResultStructure",
                              "value": {
                                "labelValue": "single"
                              }
                            }
                          }
                        }
                      ],
                      "links": [
                        {
                          "relation": "Root",
                          "href": "https://myco.lusid.com/api/api/compliance/generic/myscope/mytemplatecode",
                          "method": "GET"
                        }
                      ]
                    }
                  ],
                  "href": "https://myco.lusid.com/api/api/compliance/generic/templates",
                  "links": []
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagedResourceListOfComplianceTemplate"
                },
                "example": {
                  "values": [
                    {
                      "id": {
                        "scope": "MyScope",
                        "code": "MyTemplateCode"
                      },
                      "description": "Some Description Here",
                      "tags": [
                        "tag1",
                        "tag2",
                        "tag3"
                      ],
                      "variations": [
                        {
                          "label": "Some Variation Label",
                          "description": "Some Variation Description",
                          "requiredParameters": [
                            {
                              "name": "Param1Name",
                              "description": "Parameter 1 Description",
                              "type": "string",
                              "isCheckingParameter": true
                            },
                            {
                              "name": "Param2Name",
                              "description": "Parameter 2 Description",
                              "type": "addressKey",
                              "isCheckingParameter": false
                            }
                          ],
                          "properties": {
                            "Compliance/system/ResultStructure": {
                              "key": "Compliance/system/ResultStructure",
                              "value": {
                                "labelValue": "single"
                              }
                            }
                          }
                        }
                      ],
                      "links": [
                        {
                          "relation": "Root",
                          "href": "https://myco.lusid.com/api/api/compliance/generic/myscope/mytemplatecode",
                          "method": "GET"
                        }
                      ]
                    }
                  ],
                  "href": "https://myco.lusid.com/api/api/compliance/generic/templates",
                  "links": []
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagedResourceListOfComplianceTemplate"
                },
                "example": {
                  "values": [
                    {
                      "id": {
                        "scope": "MyScope",
                        "code": "MyTemplateCode"
                      },
                      "description": "Some Description Here",
                      "tags": [
                        "tag1",
                        "tag2",
                        "tag3"
                      ],
                      "variations": [
                        {
                          "label": "Some Variation Label",
                          "description": "Some Variation Description",
                          "requiredParameters": [
                            {
                              "name": "Param1Name",
                              "description": "Parameter 1 Description",
                              "type": "string",
                              "isCheckingParameter": true
                            },
                            {
                              "name": "Param2Name",
                              "description": "Parameter 2 Description",
                              "type": "addressKey",
                              "isCheckingParameter": false
                            }
                          ],
                          "properties": {
                            "Compliance/system/ResultStructure": {
                              "key": "Compliance/system/ResultStructure",
                              "value": {
                                "labelValue": "single"
                              }
                            }
                          }
                        }
                      ],
                      "links": [
                        {
                          "relation": "Root",
                          "href": "https://myco.lusid.com/api/api/compliance/generic/myscope/mytemplatecode",
                          "method": "GET"
                        }
                      ]
                    }
                  ],
                  "href": "https://myco.lusid.com/api/api/compliance/generic/templates",
                  "links": []
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      }
    },
    "/api/compliance/templates/{scope}/{code}": {
      "get": {
        "tags": [
          "Compliance - Generic"
        ],
        "summary": "[EARLY ACCESS] GetComplianceTemplate: Get the requested compliance template.",
        "description": "Use this endpoint to fetch a specific compliance template.",
        "operationId": "GetComplianceTemplate",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "Scope of TemplateID",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string"
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "Code of TemplateID",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string"
            }
          },
          {
            "name": "asAt",
            "in": "query",
            "description": "Optional. The time at which to get results from. Default : latest",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "description": "The requested compliance template.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ComplianceTemplate"
                },
                "example": {
                  "id": {
                    "scope": "MyScope",
                    "code": "MyTemplateCode"
                  },
                  "description": "Some Description Here",
                  "tags": [
                    "tag1",
                    "tag2",
                    "tag3"
                  ],
                  "variations": [
                    {
                      "label": "Some Variation Label",
                      "description": "Some Variation Description",
                      "requiredParameters": [
                        {
                          "name": "Param1Name",
                          "description": "Parameter 1 Description",
                          "type": "string",
                          "isCheckingParameter": true
                        },
                        {
                          "name": "Param2Name",
                          "description": "Parameter 2 Description",
                          "type": "addressKey",
                          "isCheckingParameter": false
                        }
                      ],
                      "properties": {
                        "Compliance/system/ResultStructure": {
                          "key": "Compliance/system/ResultStructure",
                          "value": {
                            "labelValue": "single"
                          }
                        }
                      }
                    }
                  ],
                  "links": [
                    {
                      "relation": "Root",
                      "href": "https://myco.lusid.com/api/api/compliance/generic/myscope/mytemplatecode",
                      "method": "GET"
                    }
                  ]
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ComplianceTemplate"
                },
                "example": {
                  "id": {
                    "scope": "MyScope",
                    "code": "MyTemplateCode"
                  },
                  "description": "Some Description Here",
                  "tags": [
                    "tag1",
                    "tag2",
                    "tag3"
                  ],
                  "variations": [
                    {
                      "label": "Some Variation Label",
                      "description": "Some Variation Description",
                      "requiredParameters": [
                        {
                          "name": "Param1Name",
                          "description": "Parameter 1 Description",
                          "type": "string",
                          "isCheckingParameter": true
                        },
                        {
                          "name": "Param2Name",
                          "description": "Parameter 2 Description",
                          "type": "addressKey",
                          "isCheckingParameter": false
                        }
                      ],
                      "properties": {
                        "Compliance/system/ResultStructure": {
                          "key": "Compliance/system/ResultStructure",
                          "value": {
                            "labelValue": "single"
                          }
                        }
                      }
                    }
                  ],
                  "links": [
                    {
                      "relation": "Root",
                      "href": "https://myco.lusid.com/api/api/compliance/generic/myscope/mytemplatecode",
                      "method": "GET"
                    }
                  ]
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ComplianceTemplate"
                },
                "example": {
                  "id": {
                    "scope": "MyScope",
                    "code": "MyTemplateCode"
                  },
                  "description": "Some Description Here",
                  "tags": [
                    "tag1",
                    "tag2",
                    "tag3"
                  ],
                  "variations": [
                    {
                      "label": "Some Variation Label",
                      "description": "Some Variation Description",
                      "requiredParameters": [
                        {
                          "name": "Param1Name",
                          "description": "Parameter 1 Description",
                          "type": "string",
                          "isCheckingParameter": true
                        },
                        {
                          "name": "Param2Name",
                          "description": "Parameter 2 Description",
                          "type": "addressKey",
                          "isCheckingParameter": false
                        }
                      ],
                      "properties": {
                        "Compliance/system/ResultStructure": {
                          "key": "Compliance/system/ResultStructure",
                          "value": {
                            "labelValue": "single"
                          }
                        }
                      }
                    }
                  ],
                  "links": [
                    {
                      "relation": "Root",
                      "href": "https://myco.lusid.com/api/api/compliance/generic/myscope/mytemplatecode",
                      "method": "GET"
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      }
    },
    "/api/corporateactionsources": {
      "post": {
        "tags": [
          "Corporate Action Sources"
        ],
        "summary": "[EARLY ACCESS] CreateCorporateActionSource: Create corporate action source",
        "description": "Create a corporate action source.",
        "operationId": "CreateCorporateActionSource",
        "requestBody": {
          "description": "The corporate action source definition",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/CreateCorporateActionSourceRequest"
              },
              "example": {
                "scope": "ExampleScope",
                "code": "ExampleCode",
                "displayName": "ExampleDisplayName",
                "description": "Example Description",
                "instrumentScopes": []
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateCorporateActionSourceRequest"
              },
              "example": {
                "scope": "ExampleScope",
                "code": "ExampleCode",
                "displayName": "ExampleDisplayName",
                "description": "Example Description",
                "instrumentScopes": []
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateCorporateActionSourceRequest"
              },
              "example": {
                "scope": "ExampleScope",
                "code": "ExampleCode",
                "displayName": "ExampleDisplayName",
                "description": "Example Description",
                "instrumentScopes": []
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/CreateCorporateActionSourceRequest"
              },
              "example": {
                "scope": "ExampleScope",
                "code": "ExampleCode",
                "displayName": "ExampleDisplayName",
                "description": "Example Description",
                "instrumentScopes": []
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "The created corporate action source",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CorporateActionSource"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CorporateActionSource"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CorporateActionSource"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      },
      "get": {
        "tags": [
          "Corporate Action Sources"
        ],
        "summary": "[EARLY ACCESS] ListCorporateActionSources: List corporate action sources",
        "description": "Gets a list of all corporate action sources",
        "operationId": "ListCorporateActionSources",
        "parameters": [
          {
            "name": "asAt",
            "in": "query",
            "description": "Optional. The AsAt date of the data",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "x-nullable": true
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "Optional. Order the results by these fields. Use use the '-' sign to denote descending order e.g. -MyFieldName",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "x-nullable": true
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Optional. When paginating, limit the number of returned results to this many. If not specified, a default\r\nof 100 is used.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 100
            },
            "x-nullable": true
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Optional. Expression to filter the result set. For example, to\r\nfilter on the Display Name, use \"displayName eq 'string'\"\r\nRead more about filtering results from LUSID here https://support.lusid.com/filtering-results-from-lusid.",
            "schema": {
              "maxLength": 16384,
              "minLength": 0,
              "pattern": "^[\\s\\S]*$",
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Optional. The pagination token to use to continue listing items from a previous call. Page values are\r\nreturn from list calls, and must be supplied exactly as returned. Additionally, when specifying this\r\nvalue, the filter, asAt, and limit must not\r\nbe modified.",
            "schema": {
              "maxLength": 500,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\+/]*={0,3}$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "All Existing Corporate Action Sources",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PagedResourceListOfCorporateActionSource"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagedResourceListOfCorporateActionSource"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagedResourceListOfCorporateActionSource"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      }
    },
    "/api/corporateactionsources/{scope}/{code}/corporateactions": {
      "post": {
        "tags": [
          "Corporate Action Sources"
        ],
        "summary": "[EARLY ACCESS] BatchUpsertCorporateActions: Batch upsert corporate actions (instrument transition events) to corporate action source.",
        "description": "Create or update one or more corporate actions in a particular corporate action source. Failures are identified in the body of the response.\r\n            \r\nIf a corporate action is upserted at exactly the same effective datetime as a transaction for the same instrument, the corporate action takes precedence. Depending on the nature of the corporate action, this may mean it affects the transaction.",
        "operationId": "BatchUpsertCorporateActions",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of corporate action source",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string"
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The code of the corporate action source",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The corporate action definitions",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/UpsertCorporateActionRequest"
                }
              },
              "example": [
                {
                  "corporateActionCode": "MyStockSplitId",
                  "description": "2-for-1 stock split of instrument BBG001S6PJ31",
                  "announcementDate": "2018-03-01T00:00:00.0000000+00:00",
                  "exDate": "2018-06-01T00:00:00.0000000+00:00",
                  "recordDate": "2018-06-02T00:00:00.0000000+00:00",
                  "paymentDate": "2018-08-02T00:00:00.0000000+00:00",
                  "transitions": [
                    {
                      "inputTransition": {
                        "instrumentIdentifiers": {
                          "Instrument/default/Figi": "BBG001S6PJ31"
                        },
                        "unitsFactor": 1,
                        "costFactor": 1
                      },
                      "outputTransitions": [
                        {
                          "instrumentIdentifiers": {
                            "Instrument/default/Figi": "BBG001S6PJ31"
                          },
                          "unitsFactor": 2,
                          "costFactor": 1
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/UpsertCorporateActionRequest"
                }
              },
              "example": [
                {
                  "corporateActionCode": "MyStockSplitId",
                  "description": "2-for-1 stock split of instrument BBG001S6PJ31",
                  "announcementDate": "2018-03-01T00:00:00.0000000+00:00",
                  "exDate": "2018-06-01T00:00:00.0000000+00:00",
                  "recordDate": "2018-06-02T00:00:00.0000000+00:00",
                  "paymentDate": "2018-08-02T00:00:00.0000000+00:00",
                  "transitions": [
                    {
                      "inputTransition": {
                        "instrumentIdentifiers": {
                          "Instrument/default/Figi": "BBG001S6PJ31"
                        },
                        "unitsFactor": 1,
                        "costFactor": 1
                      },
                      "outputTransitions": [
                        {
                          "instrumentIdentifiers": {
                            "Instrument/default/Figi": "BBG001S6PJ31"
                          },
                          "unitsFactor": 2,
                          "costFactor": 1
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/UpsertCorporateActionRequest"
                }
              },
              "example": [
                {
                  "corporateActionCode": "MyStockSplitId",
                  "description": "2-for-1 stock split of instrument BBG001S6PJ31",
                  "announcementDate": "2018-03-01T00:00:00.0000000+00:00",
                  "exDate": "2018-06-01T00:00:00.0000000+00:00",
                  "recordDate": "2018-06-02T00:00:00.0000000+00:00",
                  "paymentDate": "2018-08-02T00:00:00.0000000+00:00",
                  "transitions": [
                    {
                      "inputTransition": {
                        "instrumentIdentifiers": {
                          "Instrument/default/Figi": "BBG001S6PJ31"
                        },
                        "unitsFactor": 1,
                        "costFactor": 1
                      },
                      "outputTransitions": [
                        {
                          "instrumentIdentifiers": {
                            "Instrument/default/Figi": "BBG001S6PJ31"
                          },
                          "unitsFactor": 2,
                          "costFactor": 1
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/UpsertCorporateActionRequest"
                }
              },
              "example": [
                {
                  "corporateActionCode": "MyStockSplitId",
                  "description": "2-for-1 stock split of instrument BBG001S6PJ31",
                  "announcementDate": "2018-03-01T00:00:00.0000000+00:00",
                  "exDate": "2018-06-01T00:00:00.0000000+00:00",
                  "recordDate": "2018-06-02T00:00:00.0000000+00:00",
                  "paymentDate": "2018-08-02T00:00:00.0000000+00:00",
                  "transitions": [
                    {
                      "inputTransition": {
                        "instrumentIdentifiers": {
                          "Instrument/default/Figi": "BBG001S6PJ31"
                        },
                        "unitsFactor": 1,
                        "costFactor": 1
                      },
                      "outputTransitions": [
                        {
                          "instrumentIdentifiers": {
                            "Instrument/default/Figi": "BBG001S6PJ31"
                          },
                          "unitsFactor": 2,
                          "costFactor": 1
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          }
        },
        "responses": {
          "201": {
            "description": "The created corporate actions",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UpsertCorporateActionsResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpsertCorporateActionsResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpsertCorporateActionsResponse"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      },
      "get": {
        "tags": [
          "Corporate Action Sources"
        ],
        "summary": "[EARLY ACCESS] GetCorporateActions: List corporate actions (instrument transition events) from the corporate action source.",
        "description": "Get corporate actions from a particular corporate action source.",
        "operationId": "GetCorporateActions",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the corporate action source.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string"
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The code of the corporate action source.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string"
            }
          },
          {
            "name": "fromEffectiveAt",
            "in": "query",
            "description": "Optional. The start effective date of the data range.",
            "schema": {
              "maxLength": 256,
              "minLength": 0,
              "pattern": "^[a-zA-Z0-9\\-_\\+:\\.]+$",
              "type": "string",
              "format": "dateorcutlabel"
            }
          },
          {
            "name": "toEffectiveAt",
            "in": "query",
            "description": "Optional. The end effective date of the data range.",
            "schema": {
              "maxLength": 256,
              "minLength": 0,
              "pattern": "^[a-zA-Z0-9\\-_\\+:\\.]+$",
              "type": "string",
              "format": "dateorcutlabel"
            }
          },
          {
            "name": "asAt",
            "in": "query",
            "description": "Optional. The AsAt date of the data.",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "x-nullable": true
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "Optional. Order the results by these fields. Use use the '-' sign to denote descending order e.g. -MyFieldName",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "x-nullable": true
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Optional. When paginating, limit the results to this number.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-nullable": true
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Optional. Expression to filter the result set.\r\n            For example, to filter on the Announcement Date, use \"announcementDate eq '2020-03-06'\"\r\n            Read more about filtering results from LUSID here https://support.lusid.com/filtering-results-from-lusid.",
            "schema": {
              "maxLength": 16384,
              "minLength": 0,
              "pattern": "^[\\s\\S]*$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Corporate Actions",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfCorporateAction"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfCorporateAction"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfCorporateAction"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      },
      "delete": {
        "tags": [
          "Corporate Action Sources"
        ],
        "summary": "[EARLY ACCESS] DeleteCorporateActions: Delete corporate actions",
        "description": "Delete one or more corporate actions from a particular corporate action source.",
        "operationId": "DeleteCorporateActions",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the corporate action source",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string"
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The code of the corporate action source",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string"
            }
          },
          {
            "name": "corporateActionIds",
            "in": "query",
            "description": "The IDs of the corporate actions to delete",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Corporate Actions Deleted",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedEntityResponse"
                },
                "example": {
                  "asAt": "2018-03-05T10:10:10.0000000+00:00"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedEntityResponse"
                },
                "example": {
                  "asAt": "2018-03-05T10:10:10.0000000+00:00"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedEntityResponse"
                },
                "example": {
                  "asAt": "2018-03-05T10:10:10.0000000+00:00"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      }
    },
    "/api/corporateactionsources/{scope}/{code}/instrumentevents": {
      "post": {
        "tags": [
          "Corporate Action Sources"
        ],
        "summary": "[EARLY ACCESS] UpsertInstrumentEvents: Upsert instrument events to the provided corporate actions source.",
        "description": "Batch upsert instrument events to corporate action sources.",
        "operationId": "UpsertInstrumentEvents",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the corporate action source.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string"
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The code of the corporate action source.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The instrument event definitions.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/UpsertInstrumentEventRequest"
                }
              },
              "example": [
                {
                  "instrumentEventId": "MyStockSplitId",
                  "instrumentIdentifiers": {
                    "Instrument/default/Figi": "BBG001S6PJ31"
                  },
                  "description": "2-for-1 stock split of instrument BBG001S6PJ31",
                  "instrumentEvent": {
                    "announcementDate": "2018-03-01T00:00:00.0000000+00:00",
                    "exDate": "2018-06-01T00:00:00.0000000+00:00",
                    "recordDate": "2018-06-02T00:00:00.0000000+00:00",
                    "paymentDate": "2018-08-02T00:00:00.0000000+00:00",
                    "inputTransition": {
                      "unitsFactor": 1,
                      "costFactor": 1
                    },
                    "outputTransitions": [
                      {
                        "instrumentIdentifiers": {
                          "Instrument/default/Figi": "BBG001S6PJ31"
                        },
                        "unitsFactor": 2,
                        "costFactor": 1
                      }
                    ],
                    "instrumentEventType": "TransitionEvent"
                  },
                  "properties": []
                }
              ]
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/UpsertInstrumentEventRequest"
                }
              },
              "example": [
                {
                  "instrumentEventId": "MyStockSplitId",
                  "instrumentIdentifiers": {
                    "Instrument/default/Figi": "BBG001S6PJ31"
                  },
                  "description": "2-for-1 stock split of instrument BBG001S6PJ31",
                  "instrumentEvent": {
                    "announcementDate": "2018-03-01T00:00:00.0000000+00:00",
                    "exDate": "2018-06-01T00:00:00.0000000+00:00",
                    "recordDate": "2018-06-02T00:00:00.0000000+00:00",
                    "paymentDate": "2018-08-02T00:00:00.0000000+00:00",
                    "inputTransition": {
                      "unitsFactor": 1,
                      "costFactor": 1
                    },
                    "outputTransitions": [
                      {
                        "instrumentIdentifiers": {
                          "Instrument/default/Figi": "BBG001S6PJ31"
                        },
                        "unitsFactor": 2,
                        "costFactor": 1
                      }
                    ],
                    "instrumentEventType": "TransitionEvent"
                  },
                  "properties": []
                }
              ]
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/UpsertInstrumentEventRequest"
                }
              },
              "example": [
                {
                  "instrumentEventId": "MyStockSplitId",
                  "instrumentIdentifiers": {
                    "Instrument/default/Figi": "BBG001S6PJ31"
                  },
                  "description": "2-for-1 stock split of instrument BBG001S6PJ31",
                  "instrumentEvent": {
                    "announcementDate": "2018-03-01T00:00:00.0000000+00:00",
                    "exDate": "2018-06-01T00:00:00.0000000+00:00",
                    "recordDate": "2018-06-02T00:00:00.0000000+00:00",
                    "paymentDate": "2018-08-02T00:00:00.0000000+00:00",
                    "inputTransition": {
                      "unitsFactor": 1,
                      "costFactor": 1
                    },
                    "outputTransitions": [
                      {
                        "instrumentIdentifiers": {
                          "Instrument/default/Figi": "BBG001S6PJ31"
                        },
                        "unitsFactor": 2,
                        "costFactor": 1
                      }
                    ],
                    "instrumentEventType": "TransitionEvent"
                  },
                  "properties": []
                }
              ]
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/UpsertInstrumentEventRequest"
                }
              },
              "example": [
                {
                  "instrumentEventId": "MyStockSplitId",
                  "instrumentIdentifiers": {
                    "Instrument/default/Figi": "BBG001S6PJ31"
                  },
                  "description": "2-for-1 stock split of instrument BBG001S6PJ31",
                  "instrumentEvent": {
                    "announcementDate": "2018-03-01T00:00:00.0000000+00:00",
                    "exDate": "2018-06-01T00:00:00.0000000+00:00",
                    "recordDate": "2018-06-02T00:00:00.0000000+00:00",
                    "paymentDate": "2018-08-02T00:00:00.0000000+00:00",
                    "inputTransition": {
                      "unitsFactor": 1,
                      "costFactor": 1
                    },
                    "outputTransitions": [
                      {
                        "instrumentIdentifiers": {
                          "Instrument/default/Figi": "BBG001S6PJ31"
                        },
                        "unitsFactor": 2,
                        "costFactor": 1
                      }
                    ],
                    "instrumentEventType": "TransitionEvent"
                  },
                  "properties": []
                }
              ]
            }
          }
        },
        "responses": {
          "201": {
            "description": "Instrument Events Upserted",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UpsertInstrumentEventsResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpsertInstrumentEventsResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpsertInstrumentEventsResponse"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      },
      "get": {
        "tags": [
          "Corporate Action Sources"
        ],
        "summary": "[EARLY ACCESS] GetInstrumentEvents: Get extrinsic instrument events out of a given corporate actions source.",
        "description": "Retrieves extrinsic corporate actions out of a corporate actions source",
        "operationId": "GetInstrumentEvents",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the portfolio.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string"
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The code of the portfolio.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string"
            }
          },
          {
            "name": "asAt",
            "in": "query",
            "description": "Optional. The AsAt date of the data.",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "x-nullable": true
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Optional. When paginating, limit the number of returned results to this many. If not specified, a default\r\nof 1000 is used.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 1000
            },
            "x-nullable": true
          },
          {
            "name": "page",
            "in": "query",
            "description": "Optional. The pagination token to use to continue listing items from a previous call. Page values are\r\nreturn from list calls, and must be supplied exactly as returned. Additionally, when specifying this\r\nvalue, asAt, filter and limit must not\r\nbe modified.",
            "schema": {
              "maxLength": 500,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\+/]*={0,3}$",
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Optional. Expression to filter the result set.",
            "schema": {
              "maxLength": 16384,
              "minLength": 0,
              "pattern": "^[\\s\\S]*$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Instrument Events",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PagedResourceListOfInstrumentEventHolder"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagedResourceListOfInstrumentEventHolder"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagedResourceListOfInstrumentEventHolder"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      },
      "delete": {
        "tags": [
          "Corporate Action Sources"
        ],
        "summary": "[EARLY ACCESS] DeleteInstrumentEvents: Delete corporate actions (instrument transition events) from the corporate action source.",
        "description": "Delete one or more corporate actions from a particular corporate action source.",
        "operationId": "DeleteInstrumentEvents",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the corporate action source",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string"
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The code of the corporate action source",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string"
            }
          },
          {
            "name": "instrumentEventIds",
            "in": "query",
            "description": "The IDs of the instrument events to delete",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Instrument Events Deleted",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedEntityResponse"
                },
                "example": {
                  "asAt": "2018-03-05T10:10:10.0000000+00:00"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedEntityResponse"
                },
                "example": {
                  "asAt": "2018-03-05T10:10:10.0000000+00:00"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedEntityResponse"
                },
                "example": {
                  "asAt": "2018-03-05T10:10:10.0000000+00:00"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      }
    },
    "/api/counterparties/counterpartyagreements": {
      "get": {
        "tags": [
          "Counterparties"
        ],
        "summary": "[EARLY ACCESS] ListCounterpartyAgreements: List the set of Counterparty Agreements",
        "description": "List the set of Counterparty Agreements at the specified AsAt date/time",
        "operationId": "ListCounterpartyAgreements",
        "parameters": [
          {
            "name": "asAt",
            "in": "query",
            "description": "The asAt datetime at which to list the Counterparty Agreements. Defaults to latest if not specified.",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "description": "The requested Counterparty Agreements",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfGetCounterpartyAgreementResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfGetCounterpartyAgreementResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfGetCounterpartyAgreementResponse"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      },
      "post": {
        "tags": [
          "Counterparties"
        ],
        "summary": "[EARLY ACCESS] UpsertCounterpartyAgreement: Upsert Counterparty Agreement",
        "description": "Update or insert Counterparty Agreement in a single scope. An item will be updated if it already exists and inserted if it does not.\r\n            \r\nThe response will return the successfully updated or inserted Counterparty Agreement or failure message if unsuccessful\r\n            \r\nIt is important to always check to verify success (or failure).",
        "operationId": "UpsertCounterpartyAgreement",
        "requestBody": {
          "description": "The Counterparty Agreement to update or insert",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/UpsertCounterpartyAgreementRequest"
              },
              "example": {
                "counterpartyAgreement": {
                  "displayName": "display-name",
                  "agreementType": "type",
                  "counterpartySignatory": {
                    "name": "counterparty-signatory-name",
                    "legalEntityIdentifier": {
                      "idTypeScope": "legal-identifier-idTypeScope",
                      "idTypeCode": "legal-identifier-idTypeCode",
                      "code": "legal-identifier-code"
                    }
                  },
                  "datedAsOf": "2020-01-01T01:00:00.0000000+00:00",
                  "creditSupportAnnexId": {
                    "scope": "credit-support-annex-scope",
                    "code": "credit-support-annex-code"
                  },
                  "id": {
                    "scope": "some-scope",
                    "code": "some-code"
                  }
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpsertCounterpartyAgreementRequest"
              },
              "example": {
                "counterpartyAgreement": {
                  "displayName": "display-name",
                  "agreementType": "type",
                  "counterpartySignatory": {
                    "name": "counterparty-signatory-name",
                    "legalEntityIdentifier": {
                      "idTypeScope": "legal-identifier-idTypeScope",
                      "idTypeCode": "legal-identifier-idTypeCode",
                      "code": "legal-identifier-code"
                    }
                  },
                  "datedAsOf": "2020-01-01T01:00:00.0000000+00:00",
                  "creditSupportAnnexId": {
                    "scope": "credit-support-annex-scope",
                    "code": "credit-support-annex-code"
                  },
                  "id": {
                    "scope": "some-scope",
                    "code": "some-code"
                  }
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/UpsertCounterpartyAgreementRequest"
              },
              "example": {
                "counterpartyAgreement": {
                  "displayName": "display-name",
                  "agreementType": "type",
                  "counterpartySignatory": {
                    "name": "counterparty-signatory-name",
                    "legalEntityIdentifier": {
                      "idTypeScope": "legal-identifier-idTypeScope",
                      "idTypeCode": "legal-identifier-idTypeCode",
                      "code": "legal-identifier-code"
                    }
                  },
                  "datedAsOf": "2020-01-01T01:00:00.0000000+00:00",
                  "creditSupportAnnexId": {
                    "scope": "credit-support-annex-scope",
                    "code": "credit-support-annex-code"
                  },
                  "id": {
                    "scope": "some-scope",
                    "code": "some-code"
                  }
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/UpsertCounterpartyAgreementRequest"
              },
              "example": {
                "counterpartyAgreement": {
                  "displayName": "display-name",
                  "agreementType": "type",
                  "counterpartySignatory": {
                    "name": "counterparty-signatory-name",
                    "legalEntityIdentifier": {
                      "idTypeScope": "legal-identifier-idTypeScope",
                      "idTypeCode": "legal-identifier-idTypeCode",
                      "code": "legal-identifier-code"
                    }
                  },
                  "datedAsOf": "2020-01-01T01:00:00.0000000+00:00",
                  "creditSupportAnnexId": {
                    "scope": "credit-support-annex-scope",
                    "code": "credit-support-annex-code"
                  },
                  "id": {
                    "scope": "some-scope",
                    "code": "some-code"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The successfully updated or inserted Counterparty Agreement or any failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UpsertSingleStructuredDataResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpsertSingleStructuredDataResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpsertSingleStructuredDataResponse"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      }
    },
    "/api/counterparties/counterpartyagreements/{scope}/{code}": {
      "get": {
        "tags": [
          "Counterparties"
        ],
        "summary": "[EARLY ACCESS] GetCounterpartyAgreement: Get Counterparty Agreement",
        "description": "Get a Counterparty Agreement from a single scope.\r\nThe response will return either the Counterparty Agreement that has been stored, or a failure explaining why the request was unsuccessful.\r\nIt is important to always check for any unsuccessful requests (failures).",
        "operationId": "GetCounterpartyAgreement",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the Counterparty Agreement to retrieve.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string"
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The name of the Counterparty Agreement to retrieve the data for.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string"
            }
          },
          {
            "name": "asAt",
            "in": "query",
            "description": "The asAt datetime at which to retrieve the Counterparty Agreement. Defaults to return the latest version if not specified.",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "description": "The successfully retrieved Counterparty Agreement or any failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/GetCounterpartyAgreementResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetCounterpartyAgreementResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetCounterpartyAgreementResponse"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      },
      "delete": {
        "tags": [
          "Counterparties"
        ],
        "summary": "[EARLY ACCESS] DeleteCounterpartyAgreement: Delete the Counterparty Agreement of given scope and code",
        "description": "Delete the specified Counterparty Agreement from a single scope.\r\nThe response will return either detail of the deleted item, or an explanation (failure) as to why this did not succeed.\r\n            \r\nIt is important to always check for any unsuccessful response.",
        "operationId": "DeleteCounterpartyAgreement",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the Counterparty Agreement to delete.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string"
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The Counterparty Agreement to delete.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The AsAt of deletion or failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/AnnulSingleStructuredDataResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AnnulSingleStructuredDataResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/AnnulSingleStructuredDataResponse"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      }
    },
    "/api/counterparties/creditsupportannexes": {
      "get": {
        "tags": [
          "Counterparties"
        ],
        "summary": "[EARLY ACCESS] ListCreditSupportAnnexes: List the set of Credit Support Annexes",
        "description": "List the set of Credit Support Annexes at the specified AsAt date/time",
        "operationId": "ListCreditSupportAnnexes",
        "parameters": [
          {
            "name": "asAt",
            "in": "query",
            "description": "The asAt datetime at which to list the Credit Support Annexes. Defaults to latest if not specified.",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "description": "The requested Credit Support Annexes",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfGetCreditSupportAnnexResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfGetCreditSupportAnnexResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfGetCreditSupportAnnexResponse"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      },
      "post": {
        "tags": [
          "Counterparties"
        ],
        "summary": "[EARLY ACCESS] UpsertCreditSupportAnnex: Upsert Credit Support Annex",
        "description": "Update or insert Credit Support Annex in a single scope. An item will be updated if it already exists and inserted if it does not.\r\n            \r\nThe response will return the successfully updated or inserted Credit Support Annex or failure message if unsuccessful\r\n            \r\nIt is important to always check to verify success (or failure).",
        "operationId": "UpsertCreditSupportAnnex",
        "requestBody": {
          "description": "The Credit Support Annex to update or insert",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/UpsertCreditSupportAnnexRequest"
              },
              "example": {
                "creditSupportAnnex": {
                  "referenceCurrency": "GBP",
                  "collateralCurrencies": [
                    "GBP"
                  ],
                  "isdaAgreementVersion": "ISDA2002",
                  "marginCallFrequency": "1W",
                  "valuationAgent": "Institution",
                  "thresholdAmount": 0,
                  "roundingDecimalPlaces": 2,
                  "initialMarginAmount": 100000,
                  "minimumTransferAmount": 10000,
                  "id": {
                    "scope": "some-scope",
                    "code": "some-code"
                  }
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpsertCreditSupportAnnexRequest"
              },
              "example": {
                "creditSupportAnnex": {
                  "referenceCurrency": "GBP",
                  "collateralCurrencies": [
                    "GBP"
                  ],
                  "isdaAgreementVersion": "ISDA2002",
                  "marginCallFrequency": "1W",
                  "valuationAgent": "Institution",
                  "thresholdAmount": 0,
                  "roundingDecimalPlaces": 2,
                  "initialMarginAmount": 100000,
                  "minimumTransferAmount": 10000,
                  "id": {
                    "scope": "some-scope",
                    "code": "some-code"
                  }
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/UpsertCreditSupportAnnexRequest"
              },
              "example": {
                "creditSupportAnnex": {
                  "referenceCurrency": "GBP",
                  "collateralCurrencies": [
                    "GBP"
                  ],
                  "isdaAgreementVersion": "ISDA2002",
                  "marginCallFrequency": "1W",
                  "valuationAgent": "Institution",
                  "thresholdAmount": 0,
                  "roundingDecimalPlaces": 2,
                  "initialMarginAmount": 100000,
                  "minimumTransferAmount": 10000,
                  "id": {
                    "scope": "some-scope",
                    "code": "some-code"
                  }
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/UpsertCreditSupportAnnexRequest"
              },
              "example": {
                "creditSupportAnnex": {
                  "referenceCurrency": "GBP",
                  "collateralCurrencies": [
                    "GBP"
                  ],
                  "isdaAgreementVersion": "ISDA2002",
                  "marginCallFrequency": "1W",
                  "valuationAgent": "Institution",
                  "thresholdAmount": 0,
                  "roundingDecimalPlaces": 2,
                  "initialMarginAmount": 100000,
                  "minimumTransferAmount": 10000,
                  "id": {
                    "scope": "some-scope",
                    "code": "some-code"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The successfully updated or inserted item or any failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UpsertSingleStructuredDataResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpsertSingleStructuredDataResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpsertSingleStructuredDataResponse"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      }
    },
    "/api/counterparties/creditsupportannexes/{scope}/{code}": {
      "get": {
        "tags": [
          "Counterparties"
        ],
        "summary": "[EARLY ACCESS] GetCreditSupportAnnex: Get Credit Support Annex",
        "description": "Get a Credit Support Annex from a single scope.\r\nThe response will return either the Credit Support Annex that has been stored, or a failure explaining why the request was unsuccessful.\r\nIt is important to always check for any unsuccessful requests (failures).",
        "operationId": "GetCreditSupportAnnex",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the Credit Support Annex to retrieve.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string"
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The name of the Credit Support Annex to retrieve the data for.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string"
            }
          },
          {
            "name": "asAt",
            "in": "query",
            "description": "The asAt datetime at which to retrieve the Credit Support Annex . Defaults to return the latest version if not specified.",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "description": "The successfully retrieved credit support annexes or any failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/GetCreditSupportAnnexResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetCreditSupportAnnexResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetCreditSupportAnnexResponse"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      },
      "delete": {
        "tags": [
          "Counterparties"
        ],
        "summary": "[EARLY ACCESS] DeleteCreditSupportAnnex: Delete the Credit Support Annex of given scope and code",
        "description": "Delete the specified Credit Support Annex from a single scope.\r\nThe response will return either detail of the deleted item, or an explanation (failure) as to why this did not succeed.\r\n            \r\nIt is important to always check for any unsuccessful response.",
        "operationId": "DeleteCreditSupportAnnex",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the Credit Support Annex to delete.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string"
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The Credit Support Annex to delete.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The AsAt of deletion or failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/AnnulSingleStructuredDataResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AnnulSingleStructuredDataResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/AnnulSingleStructuredDataResponse"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      }
    },
    "/api/customentities/entitytypes": {
      "post": {
        "tags": [
          "CustomEntityDefinitions"
        ],
        "summary": "[EARLY ACCESS] CreateCustomEntityDefinition: Define a new Custom Entity type.",
        "description": "The API will return a Bad Request if the Custom Entity type already exists.",
        "operationId": "CreateCustomEntityDefinition",
        "requestBody": {
          "description": "The payload containing the description of the Custom Entity type.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/CustomEntityDefinitionRequest"
              },
              "example": {
                "entityTypeName": "SupportTicket",
                "displayName": "Support Ticket",
                "description": "Support Ticket",
                "fieldSchema": [
                  {
                    "name": "clientId",
                    "lifetime": "Perpetual",
                    "type": "String",
                    "required": true
                  },
                  {
                    "name": "issueDescription",
                    "lifetime": "TimeVariant",
                    "type": "String",
                    "required": true
                  },
                  {
                    "name": "internalNotes",
                    "lifetime": "TimeVariant",
                    "type": "String",
                    "required": false
                  },
                  {
                    "name": "isResolved",
                    "lifetime": "TimeVariant",
                    "type": "Boolean",
                    "required": false
                  }
                ]
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CustomEntityDefinitionRequest"
              },
              "example": {
                "entityTypeName": "SupportTicket",
                "displayName": "Support Ticket",
                "description": "Support Ticket",
                "fieldSchema": [
                  {
                    "name": "clientId",
                    "lifetime": "Perpetual",
                    "type": "String",
                    "required": true
                  },
                  {
                    "name": "issueDescription",
                    "lifetime": "TimeVariant",
                    "type": "String",
                    "required": true
                  },
                  {
                    "name": "internalNotes",
                    "lifetime": "TimeVariant",
                    "type": "String",
                    "required": false
                  },
                  {
                    "name": "isResolved",
                    "lifetime": "TimeVariant",
                    "type": "Boolean",
                    "required": false
                  }
                ]
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/CustomEntityDefinitionRequest"
              },
              "example": {
                "entityTypeName": "SupportTicket",
                "displayName": "Support Ticket",
                "description": "Support Ticket",
                "fieldSchema": [
                  {
                    "name": "clientId",
                    "lifetime": "Perpetual",
                    "type": "String",
                    "required": true
                  },
                  {
                    "name": "issueDescription",
                    "lifetime": "TimeVariant",
                    "type": "String",
                    "required": true
                  },
                  {
                    "name": "internalNotes",
                    "lifetime": "TimeVariant",
                    "type": "String",
                    "required": false
                  },
                  {
                    "name": "isResolved",
                    "lifetime": "TimeVariant",
                    "type": "Boolean",
                    "required": false
                  }
                ]
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/CustomEntityDefinitionRequest"
              },
              "example": {
                "entityTypeName": "SupportTicket",
                "displayName": "Support Ticket",
                "description": "Support Ticket",
                "fieldSchema": [
                  {
                    "name": "clientId",
                    "lifetime": "Perpetual",
                    "type": "String",
                    "required": true
                  },
                  {
                    "name": "issueDescription",
                    "lifetime": "TimeVariant",
                    "type": "String",
                    "required": true
                  },
                  {
                    "name": "internalNotes",
                    "lifetime": "TimeVariant",
                    "type": "String",
                    "required": false
                  },
                  {
                    "name": "isResolved",
                    "lifetime": "TimeVariant",
                    "type": "Boolean",
                    "required": false
                  }
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The created Custom Entity type.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CustomEntityDefinition"
                },
                "example": {
                  "href": "https://myco.lusid.com/api/customentities/entitytypes/~SupportTicket?asAt=2022-02-28T14:27:01.2728000+00:00",
                  "entityTypeName": "SupportTicket",
                  "displayName": "Support Ticket",
                  "description": "Support Ticket",
                  "entityType": "~SupportTicket",
                  "fieldSchema": [
                    {
                      "name": "clientId",
                      "lifetime": "Perpetual",
                      "type": "String",
                      "required": true
                    },
                    {
                      "name": "issueDescription",
                      "lifetime": "TimeVariant",
                      "type": "String",
                      "required": true
                    },
                    {
                      "name": "internalNotes",
                      "lifetime": "TimeVariant",
                      "type": "String",
                      "required": false
                    },
                    {
                      "name": "isResolved",
                      "lifetime": "TimeVariant",
                      "type": "Boolean",
                      "required": false
                    }
                  ]
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomEntityDefinition"
                },
                "example": {
                  "href": "https://myco.lusid.com/api/customentities/entitytypes/~SupportTicket?asAt=2022-02-28T14:27:01.2728000+00:00",
                  "entityTypeName": "SupportTicket",
                  "displayName": "Support Ticket",
                  "description": "Support Ticket",
                  "entityType": "~SupportTicket",
                  "fieldSchema": [
                    {
                      "name": "clientId",
                      "lifetime": "Perpetual",
                      "type": "String",
                      "required": true
                    },
                    {
                      "name": "issueDescription",
                      "lifetime": "TimeVariant",
                      "type": "String",
                      "required": true
                    },
                    {
                      "name": "internalNotes",
                      "lifetime": "TimeVariant",
                      "type": "String",
                      "required": false
                    },
                    {
                      "name": "isResolved",
                      "lifetime": "TimeVariant",
                      "type": "Boolean",
                      "required": false
                    }
                  ]
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomEntityDefinition"
                },
                "example": {
                  "href": "https://myco.lusid.com/api/customentities/entitytypes/~SupportTicket?asAt=2022-02-28T14:27:01.2728000+00:00",
                  "entityTypeName": "SupportTicket",
                  "displayName": "Support Ticket",
                  "description": "Support Ticket",
                  "entityType": "~SupportTicket",
                  "fieldSchema": [
                    {
                      "name": "clientId",
                      "lifetime": "Perpetual",
                      "type": "String",
                      "required": true
                    },
                    {
                      "name": "issueDescription",
                      "lifetime": "TimeVariant",
                      "type": "String",
                      "required": true
                    },
                    {
                      "name": "internalNotes",
                      "lifetime": "TimeVariant",
                      "type": "String",
                      "required": false
                    },
                    {
                      "name": "isResolved",
                      "lifetime": "TimeVariant",
                      "type": "Boolean",
                      "required": false
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      },
      "get": {
        "tags": [
          "CustomEntityDefinitions"
        ],
        "summary": "[EARLY ACCESS] ListCustomEntityDefinitions: List the Custom Entity type definitions",
        "description": "List all Custom Entity type definitions matching particular criteria.",
        "operationId": "ListCustomEntityDefinitions",
        "parameters": [
          {
            "name": "asAt",
            "in": "query",
            "description": "The asAt datetime at which to list the entities. Defaults to returning the latest version\r\n            of each portfolio if not specified.",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "x-nullable": true
          },
          {
            "name": "limit",
            "in": "query",
            "description": "When paginating, limit the results to this number. Defaults to 100 if not specified.",
            "schema": {
              "maximum": 5000,
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            },
            "x-nullable": true
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Expression to filter the results. For more information about filtering\r\n            results, see https://support.lusid.com/knowledgebase/article/KA-01914.",
            "schema": {
              "maxLength": 16384,
              "minLength": 0,
              "pattern": "^[\\s\\S]*$",
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "The pagination token to use to continue listing entities; this\r\n            value is returned from the previous call. If a pagination token is provided, the filter, limit\r\n            and asAt fields must not have changed since the original request.",
            "schema": {
              "maxLength": 500,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\+/]*={0,3}$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List Custom Entity type definitions.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PagedResourceListOfCustomEntityDefinition"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagedResourceListOfCustomEntityDefinition"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagedResourceListOfCustomEntityDefinition"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      }
    },
    "/api/customentities/entitytypes/{entityType}": {
      "get": {
        "tags": [
          "CustomEntityDefinitions"
        ],
        "summary": "[EARLY ACCESS] GetDefinition: Get a Custom Entity type definition.",
        "description": "Retrieve a CustomEntityDefinition by a specific entityType at a point in AsAt time",
        "operationId": "GetDefinition",
        "parameters": [
          {
            "name": "entityType",
            "in": "path",
            "description": "The identifier for the Custom Entity type, derived from the \"entityTypeName\" provided on creation.",
            "required": true,
            "schema": {
              "maxLength": 65,
              "minLength": 1,
              "type": "string"
            }
          },
          {
            "name": "asAt",
            "in": "query",
            "description": "The AsAt datetime at which to retrieve the definition.",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "description": "The requested Custom Entity definition.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CustomEntityDefinition"
                },
                "example": {
                  "href": "https://myco.lusid.com/api/customentities/entitytypes/~SupportTicket?asAt=2022-02-28T14:27:01.2728000+00:00",
                  "entityTypeName": "SupportTicket",
                  "displayName": "Support Ticket",
                  "description": "Support Ticket",
                  "entityType": "~SupportTicket",
                  "fieldSchema": [
                    {
                      "name": "clientId",
                      "lifetime": "Perpetual",
                      "type": "String",
                      "required": true
                    },
                    {
                      "name": "issueDescription",
                      "lifetime": "TimeVariant",
                      "type": "String",
                      "required": true
                    },
                    {
                      "name": "internalNotes",
                      "lifetime": "TimeVariant",
                      "type": "String",
                      "required": false
                    },
                    {
                      "name": "isResolved",
                      "lifetime": "TimeVariant",
                      "type": "Boolean",
                      "required": false
                    }
                  ]
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomEntityDefinition"
                },
                "example": {
                  "href": "https://myco.lusid.com/api/customentities/entitytypes/~SupportTicket?asAt=2022-02-28T14:27:01.2728000+00:00",
                  "entityTypeName": "SupportTicket",
                  "displayName": "Support Ticket",
                  "description": "Support Ticket",
                  "entityType": "~SupportTicket",
                  "fieldSchema": [
                    {
                      "name": "clientId",
                      "lifetime": "Perpetual",
                      "type": "String",
                      "required": true
                    },
                    {
                      "name": "issueDescription",
                      "lifetime": "TimeVariant",
                      "type": "String",
                      "required": true
                    },
                    {
                      "name": "internalNotes",
                      "lifetime": "TimeVariant",
                      "type": "String",
                      "required": false
                    },
                    {
                      "name": "isResolved",
                      "lifetime": "TimeVariant",
                      "type": "Boolean",
                      "required": false
                    }
                  ]
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomEntityDefinition"
                },
                "example": {
                  "href": "https://myco.lusid.com/api/customentities/entitytypes/~SupportTicket?asAt=2022-02-28T14:27:01.2728000+00:00",
                  "entityTypeName": "SupportTicket",
                  "displayName": "Support Ticket",
                  "description": "Support Ticket",
                  "entityType": "~SupportTicket",
                  "fieldSchema": [
                    {
                      "name": "clientId",
                      "lifetime": "Perpetual",
                      "type": "String",
                      "required": true
                    },
                    {
                      "name": "issueDescription",
                      "lifetime": "TimeVariant",
                      "type": "String",
                      "required": true
                    },
                    {
                      "name": "internalNotes",
                      "lifetime": "TimeVariant",
                      "type": "String",
                      "required": false
                    },
                    {
                      "name": "isResolved",
                      "lifetime": "TimeVariant",
                      "type": "Boolean",
                      "required": false
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      },
      "put": {
        "tags": [
          "CustomEntityDefinitions"
        ],
        "summary": "[EARLY ACCESS] UpdateCustomEntityDefinition: Modify an existing Custom Entity type.",
        "description": "The API will return a Bad Request if the Custom Entity type does not exist.",
        "operationId": "UpdateCustomEntityDefinition",
        "parameters": [
          {
            "name": "entityType",
            "in": "path",
            "description": "The identifier for the Custom Entity type, derived from the \"entityTypeName\" provided on creation.",
            "required": true,
            "schema": {
              "maxLength": 65,
              "minLength": 1,
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The payload containing the description of the Custom Entity type.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateCustomEntityDefinitionRequest"
              },
              "example": {
                "displayName": "Support Ticket",
                "description": "Support Ticket",
                "fieldSchema": [
                  {
                    "name": "clientId",
                    "lifetime": "Perpetual",
                    "type": "String",
                    "required": true
                  },
                  {
                    "name": "issueDescription",
                    "lifetime": "TimeVariant",
                    "type": "String",
                    "required": true
                  },
                  {
                    "name": "internalNotes",
                    "lifetime": "TimeVariant",
                    "type": "String",
                    "required": false
                  },
                  {
                    "name": "isResolved",
                    "lifetime": "TimeVariant",
                    "type": "Boolean",
                    "required": false
                  }
                ]
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateCustomEntityDefinitionRequest"
              },
              "example": {
                "displayName": "Support Ticket",
                "description": "Support Ticket",
                "fieldSchema": [
                  {
                    "name": "clientId",
                    "lifetime": "Perpetual",
                    "type": "String",
                    "required": true
                  },
                  {
                    "name": "issueDescription",
                    "lifetime": "TimeVariant",
                    "type": "String",
                    "required": true
                  },
                  {
                    "name": "internalNotes",
                    "lifetime": "TimeVariant",
                    "type": "String",
                    "required": false
                  },
                  {
                    "name": "isResolved",
                    "lifetime": "TimeVariant",
                    "type": "Boolean",
                    "required": false
                  }
                ]
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateCustomEntityDefinitionRequest"
              },
              "example": {
                "displayName": "Support Ticket",
                "description": "Support Ticket",
                "fieldSchema": [
                  {
                    "name": "clientId",
                    "lifetime": "Perpetual",
                    "type": "String",
                    "required": true
                  },
                  {
                    "name": "issueDescription",
                    "lifetime": "TimeVariant",
                    "type": "String",
                    "required": true
                  },
                  {
                    "name": "internalNotes",
                    "lifetime": "TimeVariant",
                    "type": "String",
                    "required": false
                  },
                  {
                    "name": "isResolved",
                    "lifetime": "TimeVariant",
                    "type": "Boolean",
                    "required": false
                  }
                ]
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateCustomEntityDefinitionRequest"
              },
              "example": {
                "displayName": "Support Ticket",
                "description": "Support Ticket",
                "fieldSchema": [
                  {
                    "name": "clientId",
                    "lifetime": "Perpetual",
                    "type": "String",
                    "required": true
                  },
                  {
                    "name": "issueDescription",
                    "lifetime": "TimeVariant",
                    "type": "String",
                    "required": true
                  },
                  {
                    "name": "internalNotes",
                    "lifetime": "TimeVariant",
                    "type": "String",
                    "required": false
                  },
                  {
                    "name": "isResolved",
                    "lifetime": "TimeVariant",
                    "type": "Boolean",
                    "required": false
                  }
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The updated Custom Entity type.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CustomEntityDefinition"
                },
                "example": {
                  "href": "https://myco.lusid.com/api/customentities/entitytypes/~SupportTicket?asAt=2022-02-28T14:27:01.2728000+00:00",
                  "entityTypeName": "SupportTicket",
                  "displayName": "Support Ticket",
                  "description": "Support Ticket",
                  "entityType": "~SupportTicket",
                  "fieldSchema": [
                    {
                      "name": "clientId",
                      "lifetime": "Perpetual",
                      "type": "String",
                      "required": true
                    },
                    {
                      "name": "issueDescription",
                      "lifetime": "TimeVariant",
                      "type": "String",
                      "required": true
                    },
                    {
                      "name": "internalNotes",
                      "lifetime": "TimeVariant",
                      "type": "String",
                      "required": false
                    },
                    {
                      "name": "isResolved",
                      "lifetime": "TimeVariant",
                      "type": "Boolean",
                      "required": false
                    }
                  ]
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomEntityDefinition"
                },
                "example": {
                  "href": "https://myco.lusid.com/api/customentities/entitytypes/~SupportTicket?asAt=2022-02-28T14:27:01.2728000+00:00",
                  "entityTypeName": "SupportTicket",
                  "displayName": "Support Ticket",
                  "description": "Support Ticket",
                  "entityType": "~SupportTicket",
                  "fieldSchema": [
                    {
                      "name": "clientId",
                      "lifetime": "Perpetual",
                      "type": "String",
                      "required": true
                    },
                    {
                      "name": "issueDescription",
                      "lifetime": "TimeVariant",
                      "type": "String",
                      "required": true
                    },
                    {
                      "name": "internalNotes",
                      "lifetime": "TimeVariant",
                      "type": "String",
                      "required": false
                    },
                    {
                      "name": "isResolved",
                      "lifetime": "TimeVariant",
                      "type": "Boolean",
                      "required": false
                    }
                  ]
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomEntityDefinition"
                },
                "example": {
                  "href": "https://myco.lusid.com/api/customentities/entitytypes/~SupportTicket?asAt=2022-02-28T14:27:01.2728000+00:00",
                  "entityTypeName": "SupportTicket",
                  "displayName": "Support Ticket",
                  "description": "Support Ticket",
                  "entityType": "~SupportTicket",
                  "fieldSchema": [
                    {
                      "name": "clientId",
                      "lifetime": "Perpetual",
                      "type": "String",
                      "required": true
                    },
                    {
                      "name": "issueDescription",
                      "lifetime": "TimeVariant",
                      "type": "String",
                      "required": true
                    },
                    {
                      "name": "internalNotes",
                      "lifetime": "TimeVariant",
                      "type": "String",
                      "required": false
                    },
                    {
                      "name": "isResolved",
                      "lifetime": "TimeVariant",
                      "type": "Boolean",
                      "required": false
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      }
    },
    "/api/customentities/{entityType}": {
      "post": {
        "tags": [
          "CustomEntities"
        ],
        "summary": "[EARLY ACCESS] UpsertCustomEntity: Upsert a Custom Entity instance",
        "description": "Insert the Custom Entity if it does not exist or update the Custom Entity with the supplied state if it does exist.",
        "operationId": "UpsertCustomEntity",
        "parameters": [
          {
            "name": "entityType",
            "in": "path",
            "description": "The type of the Custom Entity to be created. An entityType can be created using the \"CreateCustomEntityDefinition\" endpoint for CustomEntityDefinitions.",
            "required": true,
            "schema": {
              "maxLength": 65,
              "minLength": 1,
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The payload describing the Custom Entity instance.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/CustomEntityRequest"
              },
              "example": {
                "displayName": "Portfolio Access Denied",
                "description": "User cannot access the portfolio",
                "identifiers": [
                  {
                    "identifierScope": "someScope",
                    "identifierType": "supportTicketId",
                    "identifierValue": "xyz123pqr"
                  }
                ],
                "fields": [
                  {
                    "name": "clientId",
                    "value": "AcmeLtd"
                  },
                  {
                    "name": "issueDescription",
                    "value": "I can't access this portfolio",
                    "effectiveFrom": "2023-03-03T09:00:00.0000000+00:00"
                  }
                ]
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CustomEntityRequest"
              },
              "example": {
                "displayName": "Portfolio Access Denied",
                "description": "User cannot access the portfolio",
                "identifiers": [
                  {
                    "identifierScope": "someScope",
                    "identifierType": "supportTicketId",
                    "identifierValue": "xyz123pqr"
                  }
                ],
                "fields": [
                  {
                    "name": "clientId",
                    "value": "AcmeLtd"
                  },
                  {
                    "name": "issueDescription",
                    "value": "I can't access this portfolio",
                    "effectiveFrom": "2023-03-03T09:00:00.0000000+00:00"
                  }
                ]
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/CustomEntityRequest"
              },
              "example": {
                "displayName": "Portfolio Access Denied",
                "description": "User cannot access the portfolio",
                "identifiers": [
                  {
                    "identifierScope": "someScope",
                    "identifierType": "supportTicketId",
                    "identifierValue": "xyz123pqr"
                  }
                ],
                "fields": [
                  {
                    "name": "clientId",
                    "value": "AcmeLtd"
                  },
                  {
                    "name": "issueDescription",
                    "value": "I can't access this portfolio",
                    "effectiveFrom": "2023-03-03T09:00:00.0000000+00:00"
                  }
                ]
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/CustomEntityRequest"
              },
              "example": {
                "displayName": "Portfolio Access Denied",
                "description": "User cannot access the portfolio",
                "identifiers": [
                  {
                    "identifierScope": "someScope",
                    "identifierType": "supportTicketId",
                    "identifierValue": "xyz123pqr"
                  }
                ],
                "fields": [
                  {
                    "name": "clientId",
                    "value": "AcmeLtd"
                  },
                  {
                    "name": "issueDescription",
                    "value": "I can't access this portfolio",
                    "effectiveFrom": "2023-03-03T09:00:00.0000000+00:00"
                  }
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The upserted custom entity instance",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CustomEntityResponse"
                },
                "example": {
                  "href": "https://myco.lusid.com/api/api/customentities/~SupportTicket",
                  "entityType": "~SupportTicket",
                  "version": {
                    "effectiveFrom": "0001-01-01T00:00:00.0000000+00:00",
                    "asAtDate": "2022-03-02T09:00:00.0000000+00:00"
                  },
                  "displayName": "Portfolio Access Denied",
                  "description": "User cannot access the portfolio",
                  "identifiers": [
                    {
                      "identifierScope": "someScope",
                      "identifierType": "supportTicketId",
                      "identifierValue": "xyz123pqr",
                      "effectiveFrom": "0001-01-01T00:00:00.0000000+00:00",
                      "effectiveUntil": "9999-12-31T23:59:59.9999999+00:00"
                    }
                  ],
                  "fields": [
                    {
                      "name": "clientId",
                      "value": "AcmeLtd",
                      "effectiveFrom": "0001-01-01T00:00:00.0000000+00:00",
                      "effectiveUntil": "9999-12-31T23:59:59.9999999+00:00"
                    },
                    {
                      "name": "issueDescription",
                      "value": "I can't access this portfolio",
                      "effectiveFrom": "2022-03-03T09:00:00.0000000+00:00",
                      "effectiveUntil": "9999-12-31T23:59:59.9999999+00:00"
                    }
                  ],
                  "relationships": []
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomEntityResponse"
                },
                "example": {
                  "href": "https://myco.lusid.com/api/api/customentities/~SupportTicket",
                  "entityType": "~SupportTicket",
                  "version": {
                    "effectiveFrom": "0001-01-01T00:00:00.0000000+00:00",
                    "asAtDate": "2022-03-02T09:00:00.0000000+00:00"
                  },
                  "displayName": "Portfolio Access Denied",
                  "description": "User cannot access the portfolio",
                  "identifiers": [
                    {
                      "identifierScope": "someScope",
                      "identifierType": "supportTicketId",
                      "identifierValue": "xyz123pqr",
                      "effectiveFrom": "0001-01-01T00:00:00.0000000+00:00",
                      "effectiveUntil": "9999-12-31T23:59:59.9999999+00:00"
                    }
                  ],
                  "fields": [
                    {
                      "name": "clientId",
                      "value": "AcmeLtd",
                      "effectiveFrom": "0001-01-01T00:00:00.0000000+00:00",
                      "effectiveUntil": "9999-12-31T23:59:59.9999999+00:00"
                    },
                    {
                      "name": "issueDescription",
                      "value": "I can't access this portfolio",
                      "effectiveFrom": "2022-03-03T09:00:00.0000000+00:00",
                      "effectiveUntil": "9999-12-31T23:59:59.9999999+00:00"
                    }
                  ],
                  "relationships": []
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomEntityResponse"
                },
                "example": {
                  "href": "https://myco.lusid.com/api/api/customentities/~SupportTicket",
                  "entityType": "~SupportTicket",
                  "version": {
                    "effectiveFrom": "0001-01-01T00:00:00.0000000+00:00",
                    "asAtDate": "2022-03-02T09:00:00.0000000+00:00"
                  },
                  "displayName": "Portfolio Access Denied",
                  "description": "User cannot access the portfolio",
                  "identifiers": [
                    {
                      "identifierScope": "someScope",
                      "identifierType": "supportTicketId",
                      "identifierValue": "xyz123pqr",
                      "effectiveFrom": "0001-01-01T00:00:00.0000000+00:00",
                      "effectiveUntil": "9999-12-31T23:59:59.9999999+00:00"
                    }
                  ],
                  "fields": [
                    {
                      "name": "clientId",
                      "value": "AcmeLtd",
                      "effectiveFrom": "0001-01-01T00:00:00.0000000+00:00",
                      "effectiveUntil": "9999-12-31T23:59:59.9999999+00:00"
                    },
                    {
                      "name": "issueDescription",
                      "value": "I can't access this portfolio",
                      "effectiveFrom": "2022-03-03T09:00:00.0000000+00:00",
                      "effectiveUntil": "9999-12-31T23:59:59.9999999+00:00"
                    }
                  ],
                  "relationships": []
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      },
      "get": {
        "tags": [
          "CustomEntities"
        ],
        "summary": "[EARLY ACCESS] ListCustomEntities: List Custom Entities of the specified entityType.",
        "description": "List all the Custom Entities matching particular criteria.",
        "operationId": "ListCustomEntities",
        "parameters": [
          {
            "name": "entityType",
            "in": "path",
            "description": "The type of Custom Entity to list.",
            "required": true,
            "schema": {
              "maxLength": 65,
              "minLength": 1,
              "type": "string"
            }
          },
          {
            "name": "effectiveAt",
            "in": "query",
            "description": "The effective datetime or cut label at which to list the entities. Defaults to the current LUSID\r\n            system datetime if not specified.",
            "schema": {
              "type": "string",
              "format": "dateorcutlabel"
            }
          },
          {
            "name": "asAt",
            "in": "query",
            "description": "The asAt datetime at which to list the entities. Defaults to returning the latest version\r\n            of each portfolio if not specified.",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "x-nullable": true
          },
          {
            "name": "limit",
            "in": "query",
            "description": "When paginating, limit the results to this number. Defaults to 100 if not specified.",
            "schema": {
              "maximum": 5000,
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            },
            "x-nullable": true
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Expression to filter the results. For more information about filtering\r\n            results, see https://support.lusid.com/knowledgebase/article/KA-01914.",
            "schema": {
              "maxLength": 16384,
              "minLength": 0,
              "pattern": "^[\\s\\S]*$",
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "The pagination token to use to continue listing entities; this\r\n            value is returned from the previous call. If a pagination token is provided, the filter, effectiveAt\r\n            and asAt fields must not have changed since the original request.",
            "schema": {
              "maxLength": 500,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\+/]*={0,3}$",
              "type": "string"
            }
          },
          {
            "name": "relatedEntityPropertyKeys",
            "in": "query",
            "description": "A list of property keys from any domain that supports relationships\r\n            to decorate onto related entities. These must take the format {domain}/{scope}/{code}, for example 'Portfolio/Manager/Id'.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "description": "The key that uniquely identifies the property. It has the format {domain}/{scope}/{code}."
              }
            },
            "x-nullable": true
          },
          {
            "name": "relationshipDefinitionIds",
            "in": "query",
            "description": "A list of relationship definitions that are used to decorate related entities\r\n            onto the entities in the response. These must take the form {relationshipDefinitionScope}/{relationshipDefinitionCode}.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "description": "Identifiers of an entity"
              }
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "description": "List custom entities of the specified entityType.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PagedResourceListOfCustomEntityResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagedResourceListOfCustomEntityResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagedResourceListOfCustomEntityResponse"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      }
    },
    "/api/customentities/{entityType}/$batchUpsert": {
      "post": {
        "tags": [
          "CustomEntities"
        ],
        "summary": "[EARLY ACCESS] UpsertCustomEntities: Batch upsert instances of Custom Entities",
        "description": "Note: If using partial failure modes, then it is important to check the response body for failures as any failures will still return a 200 status code",
        "operationId": "UpsertCustomEntities",
        "parameters": [
          {
            "name": "entityType",
            "in": "path",
            "description": "The type of the Custom Entity to be created. An entityType can be created using the \"CreateCustomEntityDefinition\" endpoint for CustomEntityDefinitions.",
            "required": true,
            "schema": {
              "maxLength": 65,
              "minLength": 1,
              "type": "string"
            }
          },
          {
            "name": "successMode",
            "in": "query",
            "description": "Whether the batch request should fail Atomically or in a Partial fashion - Allowed Values: Atomic, Partial",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The payload describing the Custom Entity instances",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/components/schemas/CustomEntityRequest"
                }
              },
              "example": {
                "CustomEntity1": {
                  "displayName": "CustomEntity1",
                  "description": "MyFirstCustomEntity",
                  "identifiers": [
                    {
                      "identifierScope": "scope1",
                      "identifierType": "supportTicketId",
                      "identifierValue": "xyz123pqr"
                    }
                  ],
                  "fields": [
                    {
                      "name": "clientId",
                      "value": "AcmeLtd",
                      "effectiveFrom": "0001-01-01T00:00:00.0000000+00:00",
                      "effectiveUntil": "9999-12-31T23:59:59.9999999+00:00"
                    },
                    {
                      "name": "issueDescription",
                      "value": "I can't access this portfolio",
                      "effectiveFrom": "2020-01-01T12:00:00.0000000+00:00",
                      "effectiveUntil": "9999-12-31T23:59:59.9999999+00:00"
                    }
                  ]
                },
                "CustomEntity2": {
                  "displayName": "CustomEntity2",
                  "description": "MyFirstCustomEntity",
                  "identifiers": [
                    {
                      "identifierScope": "scope1",
                      "identifierType": "supportTicketId",
                      "identifierValue": "yazr1531"
                    }
                  ],
                  "fields": [
                    {
                      "name": "clientId",
                      "value": "AcmeLtd",
                      "effectiveFrom": "0001-01-01T00:00:00.0000000+00:00",
                      "effectiveUntil": "9999-12-31T23:59:59.9999999+00:00"
                    },
                    {
                      "name": "issueDescription",
                      "value": "Having trouble adding identifiers",
                      "effectiveFrom": "2020-01-01T12:00:00.0000000+00:00",
                      "effectiveUntil": "9999-12-31T23:59:59.9999999+00:00"
                    }
                  ]
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/components/schemas/CustomEntityRequest"
                }
              },
              "example": {
                "CustomEntity1": {
                  "displayName": "CustomEntity1",
                  "description": "MyFirstCustomEntity",
                  "identifiers": [
                    {
                      "identifierScope": "scope1",
                      "identifierType": "supportTicketId",
                      "identifierValue": "xyz123pqr"
                    }
                  ],
                  "fields": [
                    {
                      "name": "clientId",
                      "value": "AcmeLtd",
                      "effectiveFrom": "0001-01-01T00:00:00.0000000+00:00",
                      "effectiveUntil": "9999-12-31T23:59:59.9999999+00:00"
                    },
                    {
                      "name": "issueDescription",
                      "value": "I can't access this portfolio",
                      "effectiveFrom": "2020-01-01T12:00:00.0000000+00:00",
                      "effectiveUntil": "9999-12-31T23:59:59.9999999+00:00"
                    }
                  ]
                },
                "CustomEntity2": {
                  "displayName": "CustomEntity2",
                  "description": "MyFirstCustomEntity",
                  "identifiers": [
                    {
                      "identifierScope": "scope1",
                      "identifierType": "supportTicketId",
                      "identifierValue": "yazr1531"
                    }
                  ],
                  "fields": [
                    {
                      "name": "clientId",
                      "value": "AcmeLtd",
                      "effectiveFrom": "0001-01-01T00:00:00.0000000+00:00",
                      "effectiveUntil": "9999-12-31T23:59:59.9999999+00:00"
                    },
                    {
                      "name": "issueDescription",
                      "value": "Having trouble adding identifiers",
                      "effectiveFrom": "2020-01-01T12:00:00.0000000+00:00",
                      "effectiveUntil": "9999-12-31T23:59:59.9999999+00:00"
                    }
                  ]
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/components/schemas/CustomEntityRequest"
                }
              },
              "example": {
                "CustomEntity1": {
                  "displayName": "CustomEntity1",
                  "description": "MyFirstCustomEntity",
                  "identifiers": [
                    {
                      "identifierScope": "scope1",
                      "identifierType": "supportTicketId",
                      "identifierValue": "xyz123pqr"
                    }
                  ],
                  "fields": [
                    {
                      "name": "clientId",
                      "value": "AcmeLtd",
                      "effectiveFrom": "0001-01-01T00:00:00.0000000+00:00",
                      "effectiveUntil": "9999-12-31T23:59:59.9999999+00:00"
                    },
                    {
                      "name": "issueDescription",
                      "value": "I can't access this portfolio",
                      "effectiveFrom": "2020-01-01T12:00:00.0000000+00:00",
                      "effectiveUntil": "9999-12-31T23:59:59.9999999+00:00"
                    }
                  ]
                },
                "CustomEntity2": {
                  "displayName": "CustomEntity2",
                  "description": "MyFirstCustomEntity",
                  "identifiers": [
                    {
                      "identifierScope": "scope1",
                      "identifierType": "supportTicketId",
                      "identifierValue": "yazr1531"
                    }
                  ],
                  "fields": [
                    {
                      "name": "clientId",
                      "value": "AcmeLtd",
                      "effectiveFrom": "0001-01-01T00:00:00.0000000+00:00",
                      "effectiveUntil": "9999-12-31T23:59:59.9999999+00:00"
                    },
                    {
                      "name": "issueDescription",
                      "value": "Having trouble adding identifiers",
                      "effectiveFrom": "2020-01-01T12:00:00.0000000+00:00",
                      "effectiveUntil": "9999-12-31T23:59:59.9999999+00:00"
                    }
                  ]
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/components/schemas/CustomEntityRequest"
                }
              },
              "example": {
                "CustomEntity1": {
                  "displayName": "CustomEntity1",
                  "description": "MyFirstCustomEntity",
                  "identifiers": [
                    {
                      "identifierScope": "scope1",
                      "identifierType": "supportTicketId",
                      "identifierValue": "xyz123pqr"
                    }
                  ],
                  "fields": [
                    {
                      "name": "clientId",
                      "value": "AcmeLtd",
                      "effectiveFrom": "0001-01-01T00:00:00.0000000+00:00",
                      "effectiveUntil": "9999-12-31T23:59:59.9999999+00:00"
                    },
                    {
                      "name": "issueDescription",
                      "value": "I can't access this portfolio",
                      "effectiveFrom": "2020-01-01T12:00:00.0000000+00:00",
                      "effectiveUntil": "9999-12-31T23:59:59.9999999+00:00"
                    }
                  ]
                },
                "CustomEntity2": {
                  "displayName": "CustomEntity2",
                  "description": "MyFirstCustomEntity",
                  "identifiers": [
                    {
                      "identifierScope": "scope1",
                      "identifierType": "supportTicketId",
                      "identifierValue": "yazr1531"
                    }
                  ],
                  "fields": [
                    {
                      "name": "clientId",
                      "value": "AcmeLtd",
                      "effectiveFrom": "0001-01-01T00:00:00.0000000+00:00",
                      "effectiveUntil": "9999-12-31T23:59:59.9999999+00:00"
                    },
                    {
                      "name": "issueDescription",
                      "value": "Having trouble adding identifiers",
                      "effectiveFrom": "2020-01-01T12:00:00.0000000+00:00",
                      "effectiveUntil": "9999-12-31T23:59:59.9999999+00:00"
                    }
                  ]
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The upserted custom entity instance",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UpsertCustomEntitiesResponse"
                },
                "example": {
                  "values": {
                    "CustomEntity1": {
                      "entityType": "Issue",
                      "version": {
                        "effectiveFrom": "2018-12-08T13:30:00.0000000+00:00",
                        "asAtDate": "2018-12-08T13:30:01.0000000+00:00"
                      },
                      "displayName": "CustomEntity1",
                      "description": "MyFirstCustomEntity",
                      "identifiers": [
                        {
                          "identifierScope": "scope1",
                          "identifierType": "supportTicketId",
                          "identifierValue": "xyz123pqr"
                        }
                      ],
                      "fields": [
                        {
                          "name": "clientId",
                          "value": "AcmeLtd",
                          "effectiveFrom": "0001-01-01T00:00:00.0000000+00:00",
                          "effectiveUntil": "9999-12-31T23:59:59.9999999+00:00"
                        },
                        {
                          "name": "issueDescription",
                          "value": "I can't access this portfolio",
                          "effectiveFrom": "2020-01-01T12:00:00.0000000+00:00",
                          "effectiveUntil": "9999-12-31T23:59:59.9999999+00:00"
                        }
                      ],
                      "relationships": []
                    }
                  },
                  "failed": {
                    "CustomEntity2": {
                      "id": "Error1",
                      "type": "IdentifiersNotValidFailure",
                      "detail": "One or more of the supplied identifiers was invalid"
                    }
                  }
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpsertCustomEntitiesResponse"
                },
                "example": {
                  "values": {
                    "CustomEntity1": {
                      "entityType": "Issue",
                      "version": {
                        "effectiveFrom": "2018-12-08T13:30:00.0000000+00:00",
                        "asAtDate": "2018-12-08T13:30:01.0000000+00:00"
                      },
                      "displayName": "CustomEntity1",
                      "description": "MyFirstCustomEntity",
                      "identifiers": [
                        {
                          "identifierScope": "scope1",
                          "identifierType": "supportTicketId",
                          "identifierValue": "xyz123pqr"
                        }
                      ],
                      "fields": [
                        {
                          "name": "clientId",
                          "value": "AcmeLtd",
                          "effectiveFrom": "0001-01-01T00:00:00.0000000+00:00",
                          "effectiveUntil": "9999-12-31T23:59:59.9999999+00:00"
                        },
                        {
                          "name": "issueDescription",
                          "value": "I can't access this portfolio",
                          "effectiveFrom": "2020-01-01T12:00:00.0000000+00:00",
                          "effectiveUntil": "9999-12-31T23:59:59.9999999+00:00"
                        }
                      ],
                      "relationships": []
                    }
                  },
                  "failed": {
                    "CustomEntity2": {
                      "id": "Error1",
                      "type": "IdentifiersNotValidFailure",
                      "detail": "One or more of the supplied identifiers was invalid"
                    }
                  }
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpsertCustomEntitiesResponse"
                },
                "example": {
                  "values": {
                    "CustomEntity1": {
                      "entityType": "Issue",
                      "version": {
                        "effectiveFrom": "2018-12-08T13:30:00.0000000+00:00",
                        "asAtDate": "2018-12-08T13:30:01.0000000+00:00"
                      },
                      "displayName": "CustomEntity1",
                      "description": "MyFirstCustomEntity",
                      "identifiers": [
                        {
                          "identifierScope": "scope1",
                          "identifierType": "supportTicketId",
                          "identifierValue": "xyz123pqr"
                        }
                      ],
                      "fields": [
                        {
                          "name": "clientId",
                          "value": "AcmeLtd",
                          "effectiveFrom": "0001-01-01T00:00:00.0000000+00:00",
                          "effectiveUntil": "9999-12-31T23:59:59.9999999+00:00"
                        },
                        {
                          "name": "issueDescription",
                          "value": "I can't access this portfolio",
                          "effectiveFrom": "2020-01-01T12:00:00.0000000+00:00",
                          "effectiveUntil": "9999-12-31T23:59:59.9999999+00:00"
                        }
                      ],
                      "relationships": []
                    }
                  },
                  "failed": {
                    "CustomEntity2": {
                      "id": "Error1",
                      "type": "IdentifiersNotValidFailure",
                      "detail": "One or more of the supplied identifiers was invalid"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      }
    },
    "/api/customentities/{entityType}/{identifierType}/{identifierValue}": {
      "get": {
        "tags": [
          "CustomEntities"
        ],
        "summary": "[EARLY ACCESS] GetCustomEntity: Get a Custom Entity instance.",
        "description": "Retrieve a Custom Entity instance by a specific entity type at a point in AsAt time.",
        "operationId": "GetCustomEntity",
        "parameters": [
          {
            "name": "entityType",
            "in": "path",
            "description": "The type of Custom Entity to retrieve. An entityType can be created using the \"CreateCustomEntityDefinition\" endpoint for CustomEntityDefinitions.",
            "required": true,
            "schema": {
              "maxLength": 65,
              "minLength": 1,
              "type": "string"
            }
          },
          {
            "name": "identifierType",
            "in": "path",
            "description": "An identifier type attached to the Custom Entity instance.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string"
            }
          },
          {
            "name": "identifierValue",
            "in": "path",
            "description": "The identifier value.",
            "required": true,
            "schema": {
              "maxLength": 1024,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string"
            }
          },
          {
            "name": "identifierScope",
            "in": "query",
            "description": "The identifier scope.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string"
            }
          },
          {
            "name": "asAt",
            "in": "query",
            "description": "The AsAt datetime at which to retrieve the Custom Entity instance.",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "x-nullable": true
          },
          {
            "name": "effectiveAt",
            "in": "query",
            "description": "The effective datetime or cut label at which to get the Custom Entity instance. Defaults to the current LUSID system datetime if not specified.",
            "schema": {
              "type": "string",
              "format": "dateorcutlabel"
            }
          },
          {
            "name": "relatedEntityPropertyKeys",
            "in": "query",
            "description": "A list of property keys from any domain that supports relationships\r\n            to decorate onto related entities. These must take the format {domain}/{scope}/{code}, for example 'Portfolio/Manager/Id'.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "description": "The key that uniquely identifies the property. It has the format {domain}/{scope}/{code}."
              }
            },
            "x-nullable": true
          },
          {
            "name": "relationshipDefinitionIds",
            "in": "query",
            "description": "A list of relationship definitions that are used to decorate related entities\r\n            onto the entity in the response. These must take the form {relationshipDefinitionScope}/{relationshipDefinitionCode}.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "description": "Identifiers of an entity"
              }
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "description": "Get a custom entity instance.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CustomEntityResponse"
                },
                "example": {
                  "href": "https://myco.lusid.com/api/api/customentities/~SupportTicket",
                  "entityType": "~SupportTicket",
                  "version": {
                    "effectiveFrom": "0001-01-01T00:00:00.0000000+00:00",
                    "asAtDate": "2022-03-02T09:00:00.0000000+00:00"
                  },
                  "displayName": "Portfolio Access Denied",
                  "description": "User cannot access the portfolio",
                  "identifiers": [
                    {
                      "identifierScope": "someScope",
                      "identifierType": "supportTicketId",
                      "identifierValue": "xyz123pqr",
                      "effectiveFrom": "0001-01-01T00:00:00.0000000+00:00",
                      "effectiveUntil": "9999-12-31T23:59:59.9999999+00:00"
                    }
                  ],
                  "fields": [
                    {
                      "name": "clientId",
                      "value": "AcmeLtd",
                      "effectiveFrom": "0001-01-01T00:00:00.0000000+00:00",
                      "effectiveUntil": "9999-12-31T23:59:59.9999999+00:00"
                    },
                    {
                      "name": "issueDescription",
                      "value": "I can't access this portfolio",
                      "effectiveFrom": "2022-03-03T09:00:00.0000000+00:00",
                      "effectiveUntil": "9999-12-31T23:59:59.9999999+00:00"
                    }
                  ],
                  "relationships": []
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomEntityResponse"
                },
                "example": {
                  "href": "https://myco.lusid.com/api/api/customentities/~SupportTicket",
                  "entityType": "~SupportTicket",
                  "version": {
                    "effectiveFrom": "0001-01-01T00:00:00.0000000+00:00",
                    "asAtDate": "2022-03-02T09:00:00.0000000+00:00"
                  },
                  "displayName": "Portfolio Access Denied",
                  "description": "User cannot access the portfolio",
                  "identifiers": [
                    {
                      "identifierScope": "someScope",
                      "identifierType": "supportTicketId",
                      "identifierValue": "xyz123pqr",
                      "effectiveFrom": "0001-01-01T00:00:00.0000000+00:00",
                      "effectiveUntil": "9999-12-31T23:59:59.9999999+00:00"
                    }
                  ],
                  "fields": [
                    {
                      "name": "clientId",
                      "value": "AcmeLtd",
                      "effectiveFrom": "0001-01-01T00:00:00.0000000+00:00",
                      "effectiveUntil": "9999-12-31T23:59:59.9999999+00:00"
                    },
                    {
                      "name": "issueDescription",
                      "value": "I can't access this portfolio",
                      "effectiveFrom": "2022-03-03T09:00:00.0000000+00:00",
                      "effectiveUntil": "9999-12-31T23:59:59.9999999+00:00"
                    }
                  ],
                  "relationships": []
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomEntityResponse"
                },
                "example": {
                  "href": "https://myco.lusid.com/api/api/customentities/~SupportTicket",
                  "entityType": "~SupportTicket",
                  "version": {
                    "effectiveFrom": "0001-01-01T00:00:00.0000000+00:00",
                    "asAtDate": "2022-03-02T09:00:00.0000000+00:00"
                  },
                  "displayName": "Portfolio Access Denied",
                  "description": "User cannot access the portfolio",
                  "identifiers": [
                    {
                      "identifierScope": "someScope",
                      "identifierType": "supportTicketId",
                      "identifierValue": "xyz123pqr",
                      "effectiveFrom": "0001-01-01T00:00:00.0000000+00:00",
                      "effectiveUntil": "9999-12-31T23:59:59.9999999+00:00"
                    }
                  ],
                  "fields": [
                    {
                      "name": "clientId",
                      "value": "AcmeLtd",
                      "effectiveFrom": "0001-01-01T00:00:00.0000000+00:00",
                      "effectiveUntil": "9999-12-31T23:59:59.9999999+00:00"
                    },
                    {
                      "name": "issueDescription",
                      "value": "I can't access this portfolio",
                      "effectiveFrom": "2022-03-03T09:00:00.0000000+00:00",
                      "effectiveUntil": "9999-12-31T23:59:59.9999999+00:00"
                    }
                  ],
                  "relationships": []
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      },
      "delete": {
        "tags": [
          "CustomEntities"
        ],
        "summary": "[EARLY ACCESS] DeleteCustomEntity: Delete a Custom Entity instance.",
        "description": "Delete a Custom Entity instance by a specific entity type.",
        "operationId": "DeleteCustomEntity",
        "parameters": [
          {
            "name": "entityType",
            "in": "path",
            "description": "The type of Custom Entity to remove.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "type": "string"
            }
          },
          {
            "name": "identifierType",
            "in": "path",
            "description": "An identifier type attached to the Custom Entity instance.",
            "required": true,
            "schema": {
              "maxLength": 65,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string"
            }
          },
          {
            "name": "identifierValue",
            "in": "path",
            "description": "The identifier value.",
            "required": true,
            "schema": {
              "maxLength": 1024,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string"
            }
          },
          {
            "name": "identifierScope",
            "in": "query",
            "description": "The identifier scope.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Delete a Custom Entity instance.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedEntityResponse"
                },
                "example": {
                  "asAt": "2018-03-05T10:10:10.0000000+00:00"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedEntityResponse"
                },
                "example": {
                  "asAt": "2018-03-05T10:10:10.0000000+00:00"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedEntityResponse"
                },
                "example": {
                  "asAt": "2018-03-05T10:10:10.0000000+00:00"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      }
    },
    "/api/customentities/{entityType}/{identifierType}/{identifierValue}/metadata": {
      "get": {
        "tags": [
          "CustomEntities"
        ],
        "summary": "[EARLY ACCESS] GetAllCustomEntityAccessMetadata: Get all the Access Metadata rules for a Custom Entity",
        "description": "Get all the Custom Entity access metadata for the specified identifier scope, code and value",
        "operationId": "GetAllCustomEntityAccessMetadata",
        "parameters": [
          {
            "name": "entityType",
            "in": "path",
            "description": "The type of the Custom Entity.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^~[a-zA-Z0-9\\-_]+$",
              "type": "string"
            }
          },
          {
            "name": "identifierType",
            "in": "path",
            "description": "An identifier type attached to the Custom Entity instance.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string"
            }
          },
          {
            "name": "identifierValue",
            "in": "path",
            "description": "The identifier value.",
            "required": true,
            "schema": {
              "maxLength": 1024,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string"
            }
          },
          {
            "name": "identifierScope",
            "in": "query",
            "description": "The identifier scope.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string"
            }
          },
          {
            "name": "effectiveAt",
            "in": "query",
            "description": "The effective datetime or cut label at which to get the entities. Defaults to the current LUSID system datetime if not specified.",
            "schema": {
              "type": "string",
              "format": "dateorcutlabel"
            }
          },
          {
            "name": "asAt",
            "in": "query",
            "description": "The asAt datetime at which to retrieve the Access Metadata. Defaults to returning the latest version of the metadata if not specified.",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "description": "The access metadata for the CustomEntity or any failure.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/AccessMetadataValue"
                    }
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/AccessMetadataValue"
                    }
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/AccessMetadataValue"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      },
      "patch": {
        "tags": [
          "CustomEntities"
        ],
        "summary": "[EARLY ACCESS] PatchCustomEntityAccessMetadata: Patch Access Metadata rules for a Custom Entity.",
        "description": "Patch Custom Entity Access Metadata Rules in a single scope.\r\nThe behaviour is defined by the JSON Patch specification.\r\n            \r\nCurrently only 'add' is a supported operation on the patch document\r\n\r\nCurrently only valid metadata keys are supported paths on the patch document\r\n            \r\nThe response will return any affected Custom Entity Access Metadata rules or a failure message if unsuccessful.\r\n            \r\nIt is important to always check to verify success (or failure).\r\n            \r\nMultiple rules for a metadataKey can exist with different effective at dates, when resources are accessed the rule that is active for the current time will be fetched.",
        "operationId": "PatchCustomEntityAccessMetadata",
        "parameters": [
          {
            "name": "entityType",
            "in": "path",
            "description": "The type of the Custom Entity.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^~[a-zA-Z0-9\\-_]+$",
              "type": "string"
            }
          },
          {
            "name": "identifierType",
            "in": "path",
            "description": "An identifier type attached to the Custom Entity instance.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string"
            }
          },
          {
            "name": "identifierValue",
            "in": "path",
            "description": "The identifier value.",
            "required": true,
            "schema": {
              "maxLength": 1024,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string"
            }
          },
          {
            "name": "identifierScope",
            "in": "query",
            "description": "The identifier scope.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string"
            }
          },
          {
            "name": "effectiveAt",
            "in": "query",
            "description": "The effectiveAt datetime at which the Access Metadata will be effective from",
            "schema": {
              "type": "string",
              "format": "dateorcutlabel"
            }
          },
          {
            "name": "effectiveUntil",
            "in": "query",
            "description": "The effective datetime until which the Access Metadata is valid. If not supplied this will be valid indefinitely, or until the next 'effectiveAt' datetime of the Access Metadata",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "x-nullable": true
          }
        ],
        "requestBody": {
          "description": "The Json Patch document",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/AccessMetadataOperation"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/AccessMetadataOperation"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/AccessMetadataOperation"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/AccessMetadataOperation"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The access metadata for the CustomEntity or any failure.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/AccessMetadataValue"
                    }
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/AccessMetadataValue"
                    }
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/AccessMetadataValue"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      }
    },
    "/api/customentities/{entityType}/{identifierType}/{identifierValue}/metadata/{metadataKey}": {
      "get": {
        "tags": [
          "CustomEntities"
        ],
        "summary": "[EARLY ACCESS] GetCustomEntityAccessMetadataByKey: Get an entry identified by a metadataKey in the Access Metadata of a Custom Entity",
        "description": "Get Custom Entity access metadata for the specified metadata key",
        "operationId": "GetCustomEntityAccessMetadataByKey",
        "parameters": [
          {
            "name": "entityType",
            "in": "path",
            "description": "The type of the Custom Entity.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^~[a-zA-Z0-9\\-_]+$",
              "type": "string"
            }
          },
          {
            "name": "identifierType",
            "in": "path",
            "description": "An identifier type attached to the Custom Entity instance.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string"
            }
          },
          {
            "name": "identifierValue",
            "in": "path",
            "description": "The identifier value.",
            "required": true,
            "schema": {
              "maxLength": 1024,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string"
            }
          },
          {
            "name": "metadataKey",
            "in": "path",
            "description": "Key of the metadata entry to retrieve",
            "required": true,
            "schema": {
              "maxLength": 100,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string"
            }
          },
          {
            "name": "identifierScope",
            "in": "query",
            "description": "The identifier scope.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string"
            }
          },
          {
            "name": "effectiveAt",
            "in": "query",
            "description": "The effective datetime or cut label at which to get the entities. Defaults to the current LUSID system datetime if not specified.",
            "schema": {
              "type": "string",
              "format": "dateorcutlabel"
            }
          },
          {
            "name": "asAt",
            "in": "query",
            "description": "The asAt datetime at which to retrieve the Access Metadata. Defaults to returning the latest version of the metadata if not specified.",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "description": "The access metadata for the CustomEntity or any failure.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AccessMetadataValue"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AccessMetadataValue"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AccessMetadataValue"
                  }
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      },
      "put": {
        "tags": [
          "CustomEntities"
        ],
        "summary": "[EARLY ACCESS] UpsertCustomEntityAccessMetadata: Upsert a Custom Entity Access Metadata entry associated with a specific metadataKey. This creates or updates the data in LUSID.",
        "description": "Update or insert one Custom Entity Access Metadata entry in a single scope. An item will be updated if it already exists\r\nand inserted if it does not.\r\n            \r\nThe response will return the successfully updated or inserted Custom Entity Access Metadata rule or failure message if unsuccessful.\r\n            \r\nIt is important to always check to verify success (or failure).\r\n            \r\nMultiple rules for a metadataKey can exist with different effective at dates, when resources are accessed the rule that is active for the current time will be fetched.",
        "operationId": "UpsertCustomEntityAccessMetadata",
        "parameters": [
          {
            "name": "entityType",
            "in": "path",
            "description": "The type of the Custom Entity.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^~[a-zA-Z0-9\\-_]+$",
              "type": "string"
            }
          },
          {
            "name": "identifierType",
            "in": "path",
            "description": "An identifier type attached to the Custom Entity instance.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string"
            }
          },
          {
            "name": "identifierValue",
            "in": "path",
            "description": "The identifier value.",
            "required": true,
            "schema": {
              "maxLength": 1024,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string"
            }
          },
          {
            "name": "metadataKey",
            "in": "path",
            "description": "Key of the metadata entry to retrieve",
            "required": true,
            "schema": {
              "maxLength": 100,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string"
            }
          },
          {
            "name": "identifierScope",
            "in": "query",
            "description": "The identifier scope.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string"
            }
          },
          {
            "name": "effectiveAt",
            "in": "query",
            "description": "The effectiveAt datetime at which the Access Metadata will be effective from",
            "schema": {
              "type": "string",
              "format": "dateorcutlabel"
            }
          },
          {
            "name": "effectiveUntil",
            "in": "query",
            "description": "The effective datetime until which the Access Metadata is valid. If not supplied this will be valid indefinitely, or until the next 'effectiveAt' datetime of the Access Metadata",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "x-nullable": true
          }
        ],
        "requestBody": {
          "description": "The Custom Entity Access Metadata entry to upsert",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/UpsertCustomEntityAccessMetadataRequest"
              },
              "example": {
                "metadata": [
                  {
                    "value": "SilverLicence",
                    "provider": "TestDataProvider"
                  }
                ]
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpsertCustomEntityAccessMetadataRequest"
              },
              "example": {
                "metadata": [
                  {
                    "value": "SilverLicence",
                    "provider": "TestDataProvider"
                  }
                ]
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/UpsertCustomEntityAccessMetadataRequest"
              },
              "example": {
                "metadata": [
                  {
                    "value": "SilverLicence",
                    "provider": "TestDataProvider"
                  }
                ]
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/UpsertCustomEntityAccessMetadataRequest"
              },
              "example": {
                "metadata": [
                  {
                    "value": "SilverLicence",
                    "provider": "TestDataProvider"
                  }
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The access metadata for the CustomEntity or any failure.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AccessMetadataValue"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AccessMetadataValue"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AccessMetadataValue"
                  }
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      },
      "delete": {
        "tags": [
          "CustomEntities"
        ],
        "summary": "[EARLY ACCESS] DeleteCustomEntityAccessMetadata: Delete a Custom Entity Access Metadata entry",
        "description": "Deletes the Custom Entity Access Metadata entry that exactly matches the provided identifier parts.\r\n\r\nIt is important to always check to verify success (or failure).",
        "operationId": "DeleteCustomEntityAccessMetadata",
        "parameters": [
          {
            "name": "entityType",
            "in": "path",
            "description": "The type of the Custom Entity.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^~[a-zA-Z0-9\\-_]+$",
              "type": "string"
            }
          },
          {
            "name": "identifierType",
            "in": "path",
            "description": "An identifier type attached to the Custom Entity instance.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string"
            }
          },
          {
            "name": "identifierValue",
            "in": "path",
            "description": "The identifier value.",
            "required": true,
            "schema": {
              "maxLength": 1024,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string"
            }
          },
          {
            "name": "metadataKey",
            "in": "path",
            "description": "Key of the metadata entry to delete.",
            "required": true,
            "schema": {
              "maxLength": 100,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string"
            }
          },
          {
            "name": "identifierScope",
            "in": "query",
            "description": "The identifier scope.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string"
            }
          },
          {
            "name": "effectiveAt",
            "in": "query",
            "description": "The effectiveAt datetime at which to retrieve the Access Metadata.",
            "schema": {
              "type": "string",
              "format": "dateorcutlabel"
            }
          },
          {
            "name": "effectiveUntil",
            "in": "query",
            "description": "The effective datetime until which the Access Metadata is valid. If not supplied this will be valid indefinitely, or until the next 'effectiveAt' datetime of the Access Metadata.",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "description": "The access metadata for the CustomEntity or any failure.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedEntityResponse"
                },
                "example": {
                  "asAt": "2018-03-05T10:10:10.0000000+00:00"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedEntityResponse"
                },
                "example": {
                  "asAt": "2018-03-05T10:10:10.0000000+00:00"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedEntityResponse"
                },
                "example": {
                  "asAt": "2018-03-05T10:10:10.0000000+00:00"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      }
    },
    "/api/customentities/{entityType}/{identifierType}/{identifierValue}/relationships": {
      "get": {
        "tags": [
          "CustomEntities"
        ],
        "summary": "[EARLY ACCESS] GetCustomEntityRelationships: Get Relationships for Custom Entity",
        "description": "Get relationships for the specified Custom Entity.",
        "operationId": "GetCustomEntityRelationships",
        "parameters": [
          {
            "name": "entityType",
            "in": "path",
            "description": "The type of entity get relationships for.",
            "required": true,
            "schema": {
              "maxLength": 65,
              "minLength": 1,
              "type": "string"
            }
          },
          {
            "name": "identifierScope",
            "in": "query",
            "description": "The identifier scope.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string"
            }
          },
          {
            "name": "identifierType",
            "in": "path",
            "description": "An identifier type attached to the Custom Entity.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string"
            }
          },
          {
            "name": "identifierValue",
            "in": "path",
            "description": "The identifier value.",
            "required": true,
            "schema": {
              "maxLength": 1024,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string"
            }
          },
          {
            "name": "effectiveAt",
            "in": "query",
            "description": "The effective datetime or cut label at which to get relationships. Defaults to the current LUSID system datetime if not specified.",
            "schema": {
              "maxLength": 256,
              "minLength": 0,
              "pattern": "^[a-zA-Z0-9\\-_\\+:\\.]+$",
              "type": "string",
              "format": "dateorcutlabel"
            }
          },
          {
            "name": "asAt",
            "in": "query",
            "description": "The asAt datetime at which to retrieve relationships. Defaults to return the latest LUSID AsAt time if not specified.",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "x-nullable": true
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Expression to filter relationships. Users should provide null or empty string for this field until further notice.",
            "schema": {
              "maxLength": 16384,
              "minLength": 0,
              "pattern": "^[\\s\\S]*$",
              "type": "string"
            }
          },
          {
            "name": "identifierTypes",
            "in": "query",
            "description": "Identifiers types (as property keys) used for referencing Persons or Legal Entities. These take the format\r\n            {domain}/{scope}/{code} e.g. \"Person/CompanyDetails/Role\". They must be from the \"Person\" or \"LegalEntity\" domain.\r\n            Only identifier types stated will be used to look up relevant entities in relationships. If not applicable, provide an empty array.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "description": "The key that uniquely identifies the property. It has the format {domain}/{scope}/{code}."
              }
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "description": "The relationships for the specified custom entity.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfRelationship"
                },
                "example": {
                  "values": [
                    {
                      "relationshipDefinitionId": {
                        "scope": "relationshipDefinitionScope",
                        "code": "relationshipDefinitionCode"
                      },
                      "relatedEntity": {
                        "entityType": "~entityType",
                        "entityId": {
                          "identifierScope": "idScope",
                          "identifierType": "idType",
                          "identifierValue": "idValue"
                        },
                        "displayName": "RelatedEntityDisplayName",
                        "properties": {},
                        "identifiers": [
                          {
                            "identifierScope": "idScope",
                            "identifierType": "idType",
                            "identifierValue": "idValue"
                          }
                        ]
                      },
                      "traversalDirection": "Out",
                      "traversalDescription": "Outward relationship description",
                      "effectiveFrom": "0001-01-01T00:00:00.0000000+00:00",
                      "effectiveUntil": "9999-12-31T23:59:59.9999999+00:00"
                    }
                  ],
                  "links": []
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfRelationship"
                },
                "example": {
                  "values": [
                    {
                      "relationshipDefinitionId": {
                        "scope": "relationshipDefinitionScope",
                        "code": "relationshipDefinitionCode"
                      },
                      "relatedEntity": {
                        "entityType": "~entityType",
                        "entityId": {
                          "identifierScope": "idScope",
                          "identifierType": "idType",
                          "identifierValue": "idValue"
                        },
                        "displayName": "RelatedEntityDisplayName",
                        "properties": {},
                        "identifiers": [
                          {
                            "identifierScope": "idScope",
                            "identifierType": "idType",
                            "identifierValue": "idValue"
                          }
                        ]
                      },
                      "traversalDirection": "Out",
                      "traversalDescription": "Outward relationship description",
                      "effectiveFrom": "0001-01-01T00:00:00.0000000+00:00",
                      "effectiveUntil": "9999-12-31T23:59:59.9999999+00:00"
                    }
                  ],
                  "links": []
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfRelationship"
                },
                "example": {
                  "values": [
                    {
                      "relationshipDefinitionId": {
                        "scope": "relationshipDefinitionScope",
                        "code": "relationshipDefinitionCode"
                      },
                      "relatedEntity": {
                        "entityType": "~entityType",
                        "entityId": {
                          "identifierScope": "idScope",
                          "identifierType": "idType",
                          "identifierValue": "idValue"
                        },
                        "displayName": "RelatedEntityDisplayName",
                        "properties": {},
                        "identifiers": [
                          {
                            "identifierScope": "idScope",
                            "identifierType": "idType",
                            "identifierValue": "idValue"
                          }
                        ]
                      },
                      "traversalDirection": "Out",
                      "traversalDescription": "Outward relationship description",
                      "effectiveFrom": "0001-01-01T00:00:00.0000000+00:00",
                      "effectiveUntil": "9999-12-31T23:59:59.9999999+00:00"
                    }
                  ],
                  "links": []
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      }
    },
    "/api/datatypes": {
      "post": {
        "tags": [
          "Data Types"
        ],
        "summary": "[EARLY ACCESS] CreateDataType: Create data type definition",
        "description": "Create a new data type definition\r\n\r\nData types cannot be created in either the \"default\" or \"system\" scopes.",
        "operationId": "CreateDataType",
        "requestBody": {
          "description": "The definition of the new data type",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/CreateDataTypeRequest"
              },
              "example": {
                "scope": "TestScope",
                "code": "MyType",
                "typeValueRange": "Open",
                "displayName": "My data format",
                "description": "Data type description",
                "valueType": "String",
                "unitSchema": "Basic",
                "acceptableUnits": [
                  {
                    "code": "Ap",
                    "displayName": "Apples",
                    "description": "A quantity of apples"
                  },
                  {
                    "code": "Bn",
                    "displayName": "Bananas",
                    "description": "A quantity of bananas"
                  },
                  {
                    "code": "Ch",
                    "displayName": "Cherry",
                    "description": "A quantity of cherries"
                  }
                ],
                "referenceData": {
                  "fieldDefinitions": [
                    {
                      "key": "english_short_name",
                      "isRequired": true,
                      "isUnique": true
                    },
                    {
                      "key": "continent",
                      "isRequired": true,
                      "isUnique": false
                    }
                  ],
                  "values": [
                    {
                      "value": "FRA",
                      "fields": {
                        "english_short_name": "France",
                        "continent": "Europe"
                      }
                    },
                    {
                      "value": "DEU",
                      "fields": {
                        "english_short_name": "Germany",
                        "continent": "Europe"
                      }
                    }
                  ]
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateDataTypeRequest"
              },
              "example": {
                "scope": "TestScope",
                "code": "MyType",
                "typeValueRange": "Open",
                "displayName": "My data format",
                "description": "Data type description",
                "valueType": "String",
                "unitSchema": "Basic",
                "acceptableUnits": [
                  {
                    "code": "Ap",
                    "displayName": "Apples",
                    "description": "A quantity of apples"
                  },
                  {
                    "code": "Bn",
                    "displayName": "Bananas",
                    "description": "A quantity of bananas"
                  },
                  {
                    "code": "Ch",
                    "displayName": "Cherry",
                    "description": "A quantity of cherries"
                  }
                ],
                "referenceData": {
                  "fieldDefinitions": [
                    {
                      "key": "english_short_name",
                      "isRequired": true,
                      "isUnique": true
                    },
                    {
                      "key": "continent",
                      "isRequired": true,
                      "isUnique": false
                    }
                  ],
                  "values": [
                    {
                      "value": "FRA",
                      "fields": {
                        "english_short_name": "France",
                        "continent": "Europe"
                      }
                    },
                    {
                      "value": "DEU",
                      "fields": {
                        "english_short_name": "Germany",
                        "continent": "Europe"
                      }
                    }
                  ]
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateDataTypeRequest"
              },
              "example": {
                "scope": "TestScope",
                "code": "MyType",
                "typeValueRange": "Open",
                "displayName": "My data format",
                "description": "Data type description",
                "valueType": "String",
                "unitSchema": "Basic",
                "acceptableUnits": [
                  {
                    "code": "Ap",
                    "displayName": "Apples",
                    "description": "A quantity of apples"
                  },
                  {
                    "code": "Bn",
                    "displayName": "Bananas",
                    "description": "A quantity of bananas"
                  },
                  {
                    "code": "Ch",
                    "displayName": "Cherry",
                    "description": "A quantity of cherries"
                  }
                ],
                "referenceData": {
                  "fieldDefinitions": [
                    {
                      "key": "english_short_name",
                      "isRequired": true,
                      "isUnique": true
                    },
                    {
                      "key": "continent",
                      "isRequired": true,
                      "isUnique": false
                    }
                  ],
                  "values": [
                    {
                      "value": "FRA",
                      "fields": {
                        "english_short_name": "France",
                        "continent": "Europe"
                      }
                    },
                    {
                      "value": "DEU",
                      "fields": {
                        "english_short_name": "Germany",
                        "continent": "Europe"
                      }
                    }
                  ]
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/CreateDataTypeRequest"
              },
              "example": {
                "scope": "TestScope",
                "code": "MyType",
                "typeValueRange": "Open",
                "displayName": "My data format",
                "description": "Data type description",
                "valueType": "String",
                "unitSchema": "Basic",
                "acceptableUnits": [
                  {
                    "code": "Ap",
                    "displayName": "Apples",
                    "description": "A quantity of apples"
                  },
                  {
                    "code": "Bn",
                    "displayName": "Bananas",
                    "description": "A quantity of bananas"
                  },
                  {
                    "code": "Ch",
                    "displayName": "Cherry",
                    "description": "A quantity of cherries"
                  }
                ],
                "referenceData": {
                  "fieldDefinitions": [
                    {
                      "key": "english_short_name",
                      "isRequired": true,
                      "isUnique": true
                    },
                    {
                      "key": "continent",
                      "isRequired": true,
                      "isUnique": false
                    }
                  ],
                  "values": [
                    {
                      "value": "FRA",
                      "fields": {
                        "english_short_name": "France",
                        "continent": "Europe"
                      }
                    },
                    {
                      "value": "DEU",
                      "fields": {
                        "english_short_name": "Germany",
                        "continent": "Europe"
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/DataType"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DataType"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/DataType"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      },
      "get": {
        "tags": [
          "Data Types"
        ],
        "summary": "[EARLY ACCESS] ListDataTypeSummaries: List all data type summaries, without the reference data",
        "description": "List all data type summaries",
        "operationId": "ListDataTypeSummaries",
        "parameters": [
          {
            "name": "asAt",
            "in": "query",
            "description": "The asAt datetime at which to list the data type summaries. Defaults to returning the latest version\r\n             of each summary if not specified.",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "x-nullable": true
          },
          {
            "name": "page",
            "in": "query",
            "description": "The pagination token to use to continue listing data type summaries. This\r\nvalue is returned from the previous call. If a pagination token is provided, the filter, effectiveAt\r\nand asAt fields must not have changed since the original request. Also, if set, a start value cannot be provided.",
            "schema": {
              "maxLength": 500,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\+/]*={0,3}$",
              "type": "string"
            }
          },
          {
            "name": "start",
            "in": "query",
            "description": "When paginating, skip this number of results.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-nullable": true
          },
          {
            "name": "limit",
            "in": "query",
            "description": "When paginating, limit the results to this number. Defaults to 100 if not specified.",
            "schema": {
              "maximum": 5000,
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            },
            "x-nullable": true
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Optional. Expression to filter the result set. \r\n             For example, to filter on the Scope, use \"id.scope eq 'myscope'\", to filter on Schema, use \"schema eq 'string'\",\r\n             to filter on AcceptableValues use \"acceptableValues any (~ eq 'value')\"\r\n             Read more about filtering results from LUSID here https://support.lusid.com/filtering-results-from-lusid.",
            "schema": {
              "maxLength": 16384,
              "minLength": 0,
              "pattern": "^[\\s\\S]*$",
              "type": "string"
            }
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "Sort the results by these fields. Use use the '-' sign to denote descending allocation e.g. -MyFieldName.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PagedResourceListOfDataTypeSummary"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagedResourceListOfDataTypeSummary"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagedResourceListOfDataTypeSummary"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      }
    },
    "/api/datatypes/{scope}": {
      "get": {
        "tags": [
          "Data Types"
        ],
        "summary": "ListDataTypes: List data types",
        "description": "List all data types in a specified scope",
        "operationId": "ListDataTypes",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The requested scope of the data types",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string"
            }
          },
          {
            "name": "asAt",
            "in": "query",
            "description": "The as at of the requested data types",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "x-nullable": true
          },
          {
            "name": "includeSystem",
            "in": "query",
            "description": "Whether to additionally include those data types in the \"system\" scope",
            "schema": {
              "type": "boolean"
            },
            "x-nullable": true
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "Optional. Order the results by these fields. Use use the '-' sign to denote descending order e.g. -MyFieldName",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "x-nullable": true
          },
          {
            "name": "start",
            "in": "query",
            "description": "Optional. When paginating, skip this number of results",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-nullable": true
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Optional. When paginating, limit the number of returned results to this many.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-nullable": true
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Optional. Expression to filter the result set.\r\n            For example, to filter on the Display Name, use \"displayName eq 'string'\"\r\n            Read more about filtering results from LUSID here https://support.lusid.com/filtering-results-from-lusid.",
            "schema": {
              "maxLength": 16384,
              "minLength": 0,
              "pattern": "^[\\s\\S]*$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfDataType"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfDataType"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfDataType"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Stable"
      }
    },
    "/api/datatypes/{scope}/{code}": {
      "put": {
        "tags": [
          "Data Types"
        ],
        "summary": "[EARLY ACCESS] UpdateDataType: Update data type definition",
        "description": "Update the definition of the specified existing data type\r\n\r\nNot all elements within a data type definition are modifiable due to the potential implications for data\r\nalready stored against the types",
        "operationId": "UpdateDataType",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the data type",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string"
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The code of the data type",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The updated definition of the data type",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateDataTypeRequest"
              },
              "example": {
                "displayName": "My data format",
                "description": "Data type description",
                "acceptableValues": [
                  "Apples, Bananas, Cherry"
                ]
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateDataTypeRequest"
              },
              "example": {
                "displayName": "My data format",
                "description": "Data type description",
                "acceptableValues": [
                  "Apples, Bananas, Cherry"
                ]
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateDataTypeRequest"
              },
              "example": {
                "displayName": "My data format",
                "description": "Data type description",
                "acceptableValues": [
                  "Apples, Bananas, Cherry"
                ]
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateDataTypeRequest"
              },
              "example": {
                "displayName": "My data format",
                "description": "Data type description",
                "acceptableValues": [
                  "Apples, Bananas, Cherry"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/DataType"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DataType"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/DataType"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      },
      "get": {
        "tags": [
          "Data Types"
        ],
        "summary": "GetDataType: Get data type definition",
        "description": "Get the definition of a specified data type",
        "operationId": "GetDataType",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the data type",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string"
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The code of the data type",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string"
            }
          },
          {
            "name": "asAt",
            "in": "query",
            "description": "The asAt datetime at which to retrieve the data type definition. Defaults to\r\n            return the latest version of the instrument definition if not specified.",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/DataType"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DataType"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/DataType"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Stable"
      }
    },
    "/api/datatypes/{scope}/{code}/referencedatavalues": {
      "put": {
        "tags": [
          "Data Types"
        ],
        "summary": "[EARLY ACCESS] UpdateReferenceValues: Update reference data on a data type",
        "description": "Replaces the whole set of reference values",
        "operationId": "UpdateReferenceValues",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the data type",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string"
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The code of the data type",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The updated reference values",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/FieldValue"
                }
              },
              "example": [
                {
                  "value": "FRA",
                  "fields": {
                    "english_short_name": "France",
                    "continent": "Europe"
                  }
                },
                {
                  "value": "DEU",
                  "fields": {
                    "english_short_name": "Germany",
                    "continent": "Europe"
                  }
                }
              ]
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/FieldValue"
                }
              },
              "example": [
                {
                  "value": "FRA",
                  "fields": {
                    "english_short_name": "France",
                    "continent": "Europe"
                  }
                },
                {
                  "value": "DEU",
                  "fields": {
                    "english_short_name": "Germany",
                    "continent": "Europe"
                  }
                }
              ]
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/FieldValue"
                }
              },
              "example": [
                {
                  "value": "FRA",
                  "fields": {
                    "english_short_name": "France",
                    "continent": "Europe"
                  }
                },
                {
                  "value": "DEU",
                  "fields": {
                    "english_short_name": "Germany",
                    "continent": "Europe"
                  }
                }
              ]
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/FieldValue"
                }
              },
              "example": [
                {
                  "value": "FRA",
                  "fields": {
                    "english_short_name": "France",
                    "continent": "Europe"
                  }
                },
                {
                  "value": "DEU",
                  "fields": {
                    "english_short_name": "Germany",
                    "continent": "Europe"
                  }
                }
              ]
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/DataType"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DataType"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/DataType"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      }
    },
    "/api/datatypes/{scope}/{code}/units": {
      "get": {
        "tags": [
          "Data Types"
        ],
        "summary": "[EARLY ACCESS] GetUnitsFromDataType: Get units from data type",
        "description": "Get the definitions of the specified units associated bound to a specific data type",
        "operationId": "GetUnitsFromDataType",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the data type",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string"
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The code of the data type",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string"
            }
          },
          {
            "name": "units",
            "in": "query",
            "description": "One or more unit identifiers for which the definition is being requested",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "x-nullable": true
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Optional. Expression to filter the result set. \r\n            For example, to filter on the Schema, use \"schema eq 'string'\"\r\n            Read more about filtering results from LUSID here https://support.lusid.com/filtering-results-from-lusid.",
            "schema": {
              "maxLength": 16384,
              "minLength": 0,
              "pattern": "^[\\s\\S]*$",
              "type": "string"
            }
          },
          {
            "name": "asAt",
            "in": "query",
            "description": "Optional. The as at of the requested data type",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfIUnitDefinitionDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfIUnitDefinitionDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfIUnitDefinitionDto"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      }
    },
    "/api/derivedtransactionportfolios/{scope}": {
      "post": {
        "tags": [
          "Derived Transaction Portfolios"
        ],
        "summary": "CreateDerivedPortfolio: Create derived portfolio",
        "description": "Create a derived transaction portfolio from a parent transaction portfolio (which may itself be derived).",
        "operationId": "CreateDerivedPortfolio",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope in which to create the derived transaction portfolio.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The definition of the derived transaction portfolio.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/CreateDerivedTransactionPortfolioRequest"
              },
              "example": {
                "displayName": "MyDerivedPortfolioName",
                "description": "Example long form portfolio description",
                "code": "MyDerivedPortfolioCode",
                "parentPortfolioId": {
                  "scope": "MyParentPortfolioScope",
                  "code": "MyParentPortfolioCode"
                },
                "corporateActionSourceId": {
                  "scope": "MyScope",
                  "code": "MyCorporateActionSourceId"
                },
                "accountingMethod": "FirstInFirstOut",
                "subHoldingKeys": [
                  "Transaction/MyScope/Strategy",
                  "Transaction/MyScope/SubAccount"
                ],
                "amortisationMethod": "EffectiveYield"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateDerivedTransactionPortfolioRequest"
              },
              "example": {
                "displayName": "MyDerivedPortfolioName",
                "description": "Example long form portfolio description",
                "code": "MyDerivedPortfolioCode",
                "parentPortfolioId": {
                  "scope": "MyParentPortfolioScope",
                  "code": "MyParentPortfolioCode"
                },
                "corporateActionSourceId": {
                  "scope": "MyScope",
                  "code": "MyCorporateActionSourceId"
                },
                "accountingMethod": "FirstInFirstOut",
                "subHoldingKeys": [
                  "Transaction/MyScope/Strategy",
                  "Transaction/MyScope/SubAccount"
                ],
                "amortisationMethod": "EffectiveYield"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateDerivedTransactionPortfolioRequest"
              },
              "example": {
                "displayName": "MyDerivedPortfolioName",
                "description": "Example long form portfolio description",
                "code": "MyDerivedPortfolioCode",
                "parentPortfolioId": {
                  "scope": "MyParentPortfolioScope",
                  "code": "MyParentPortfolioCode"
                },
                "corporateActionSourceId": {
                  "scope": "MyScope",
                  "code": "MyCorporateActionSourceId"
                },
                "accountingMethod": "FirstInFirstOut",
                "subHoldingKeys": [
                  "Transaction/MyScope/Strategy",
                  "Transaction/MyScope/SubAccount"
                ],
                "amortisationMethod": "EffectiveYield"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/CreateDerivedTransactionPortfolioRequest"
              },
              "example": {
                "displayName": "MyDerivedPortfolioName",
                "description": "Example long form portfolio description",
                "code": "MyDerivedPortfolioCode",
                "parentPortfolioId": {
                  "scope": "MyParentPortfolioScope",
                  "code": "MyParentPortfolioCode"
                },
                "corporateActionSourceId": {
                  "scope": "MyScope",
                  "code": "MyCorporateActionSourceId"
                },
                "accountingMethod": "FirstInFirstOut",
                "subHoldingKeys": [
                  "Transaction/MyScope/Strategy",
                  "Transaction/MyScope/SubAccount"
                ],
                "amortisationMethod": "EffectiveYield"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The created derived portfolio, with populated id",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Portfolio"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Portfolio"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Portfolio"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Stable"
      }
    },
    "/api/derivedtransactionportfolios/{scope}/{code}/details": {
      "delete": {
        "tags": [
          "Derived Transaction Portfolios"
        ],
        "summary": "[EARLY ACCESS] DeleteDerivedPortfolioDetails: Delete derived portfolio details",
        "description": "Delete all the portfolio details for a derived transaction portfolio.",
        "operationId": "DeleteDerivedPortfolioDetails",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the derived transaction portfolio.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string"
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The code of the derived transaction portfolio. Together with the scope this uniquely identifies\r\n            the derived transaction portfolio.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string"
            }
          },
          {
            "name": "effectiveAt",
            "in": "query",
            "description": "The effective date of the change.",
            "schema": {
              "maxLength": 256,
              "minLength": 0,
              "pattern": "^[a-zA-Z0-9\\-_\\+:\\.]+$",
              "type": "string",
              "format": "dateorcutlabel"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedEntityResponse"
                },
                "example": {
                  "asAt": "2018-03-05T10:10:10.0000000+00:00"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedEntityResponse"
                },
                "example": {
                  "asAt": "2018-03-05T10:10:10.0000000+00:00"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedEntityResponse"
                },
                "example": {
                  "asAt": "2018-03-05T10:10:10.0000000+00:00"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      }
    },
    "/api/entities/changes/portfolios": {
      "get": {
        "tags": [
          "Entities"
        ],
        "summary": "[EARLY ACCESS] GetPortfolioChanges: Get the next change to each portfolio in a scope.",
        "description": "Gets the time of the next (earliest effective at) modification (correction and/or amendment) to each portfolio in a scope relative to a point in bitemporal time.\r\nIncludes changes from parent portfolios in different scopes.\r\nExcludes changes from subcriptions (e.g corporate actions).",
        "operationId": "GetPortfolioChanges",
        "parameters": [
          {
            "name": "scope",
            "in": "query",
            "description": "The scope",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string"
            }
          },
          {
            "name": "effectiveAt",
            "in": "query",
            "description": "The effective date of the origin.",
            "required": true,
            "schema": {
              "maxLength": 256,
              "minLength": 0,
              "pattern": "^[a-zA-Z0-9\\-_\\+:\\.]+$",
              "type": "string",
              "format": "dateorcutlabel"
            }
          },
          {
            "name": "asAt",
            "in": "query",
            "description": "The as-at date of the origin.",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "A list of portfolio changes in the requested scope relative to the specified time.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfChange"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfChange"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfChange"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      }
    },
    "/api/executions": {
      "get": {
        "tags": [
          "Executions"
        ],
        "summary": "[EARLY ACCESS] ListExecutions: List Executions",
        "description": "Fetch the last pre-AsAt date version of each execution in scope (does not fetch the entire history).",
        "operationId": "ListExecutions",
        "parameters": [
          {
            "name": "asAt",
            "in": "query",
            "description": "The asAt datetime at which to retrieve the execution. Defaults to return the latest version of the execution if not specified.",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "x-nullable": true
          },
          {
            "name": "page",
            "in": "query",
            "description": "The pagination token to use to continue listing execution from a previous call to list executions.\r\n            This value is returned from the previous call. If a pagination token is provided the sortBy, filter, effectiveAt, and asAt fields\r\n            must not have changed since the original request.",
            "schema": {
              "maxLength": 500,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\+/]*={0,3}$",
              "type": "string"
            }
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "Order the results by these fields. Use use the '-' sign to denote descending order e.g. -MyFieldName.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "x-nullable": true
          },
          {
            "name": "limit",
            "in": "query",
            "description": "When paginating, limit the number of returned results to this many.",
            "schema": {
              "maximum": 5000,
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            },
            "x-nullable": true
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Expression to filter the result set. Read more about filtering results from LUSID here:\r\n            https://support.lusid.com/filtering-results-from-lusid.",
            "schema": {
              "maxLength": 16384,
              "minLength": 0,
              "pattern": "^[\\s\\S]*$",
              "type": "string"
            }
          },
          {
            "name": "propertyKeys",
            "in": "query",
            "description": "A list of property keys from the \"Execution\" domain to decorate onto each execution.\r\n                These take the format {domain}/{scope}/{code} e.g. \"Execution/system/Name\".",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "description": "The key that uniquely identifies the property. It has the format {domain}/{scope}/{code}."
              }
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "description": "Executions in scope.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PagedResourceListOfExecution"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagedResourceListOfExecution"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagedResourceListOfExecution"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      },
      "post": {
        "tags": [
          "Executions"
        ],
        "summary": "[EARLY ACCESS] UpsertExecutions: Upsert Execution",
        "description": "Upsert; update existing executions with given ids, or create new executions otherwise.",
        "operationId": "UpsertExecutions",
        "requestBody": {
          "description": "The collection of execution requests.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/ExecutionSetRequest"
              },
              "example": {
                "requests": [
                  {
                    "id": {
                      "scope": "MyScope",
                      "code": "EXEC00000123"
                    },
                    "placementId": {
                      "scope": "MyScope",
                      "code": "PLAC00000123"
                    },
                    "properties": {
                      "Execution/MyScope/SomeExecutionProperty": {
                        "key": "Execution/MyScope/SomeExecutionProperty",
                        "value": {
                          "labelValue": "XYZ000034567"
                        }
                      }
                    },
                    "instrumentIdentifiers": {
                      "Instrument/default/Currency": "GBP"
                    },
                    "quantity": 100,
                    "state": "New",
                    "side": "Buy",
                    "type": "Limit",
                    "createdDate": "2006-04-11T00:00:00.0000000+00:00",
                    "settlementDate": "2006-04-13T00:00:00.0000000+00:00",
                    "price": {
                      "amount": 12413.33,
                      "currency": "USD"
                    },
                    "settlementCurrency": "GBP",
                    "settlementCurrencyFxRate": 0.67,
                    "counterparty": "SomeCounterparty",
                    "averagePrice": 12419.2
                  }
                ]
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ExecutionSetRequest"
              },
              "example": {
                "requests": [
                  {
                    "id": {
                      "scope": "MyScope",
                      "code": "EXEC00000123"
                    },
                    "placementId": {
                      "scope": "MyScope",
                      "code": "PLAC00000123"
                    },
                    "properties": {
                      "Execution/MyScope/SomeExecutionProperty": {
                        "key": "Execution/MyScope/SomeExecutionProperty",
                        "value": {
                          "labelValue": "XYZ000034567"
                        }
                      }
                    },
                    "instrumentIdentifiers": {
                      "Instrument/default/Currency": "GBP"
                    },
                    "quantity": 100,
                    "state": "New",
                    "side": "Buy",
                    "type": "Limit",
                    "createdDate": "2006-04-11T00:00:00.0000000+00:00",
                    "settlementDate": "2006-04-13T00:00:00.0000000+00:00",
                    "price": {
                      "amount": 12413.33,
                      "currency": "USD"
                    },
                    "settlementCurrency": "GBP",
                    "settlementCurrencyFxRate": 0.67,
                    "counterparty": "SomeCounterparty",
                    "averagePrice": 12419.2
                  }
                ]
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ExecutionSetRequest"
              },
              "example": {
                "requests": [
                  {
                    "id": {
                      "scope": "MyScope",
                      "code": "EXEC00000123"
                    },
                    "placementId": {
                      "scope": "MyScope",
                      "code": "PLAC00000123"
                    },
                    "properties": {
                      "Execution/MyScope/SomeExecutionProperty": {
                        "key": "Execution/MyScope/SomeExecutionProperty",
                        "value": {
                          "labelValue": "XYZ000034567"
                        }
                      }
                    },
                    "instrumentIdentifiers": {
                      "Instrument/default/Currency": "GBP"
                    },
                    "quantity": 100,
                    "state": "New",
                    "side": "Buy",
                    "type": "Limit",
                    "createdDate": "2006-04-11T00:00:00.0000000+00:00",
                    "settlementDate": "2006-04-13T00:00:00.0000000+00:00",
                    "price": {
                      "amount": 12413.33,
                      "currency": "USD"
                    },
                    "settlementCurrency": "GBP",
                    "settlementCurrencyFxRate": 0.67,
                    "counterparty": "SomeCounterparty",
                    "averagePrice": 12419.2
                  }
                ]
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ExecutionSetRequest"
              },
              "example": {
                "requests": [
                  {
                    "id": {
                      "scope": "MyScope",
                      "code": "EXEC00000123"
                    },
                    "placementId": {
                      "scope": "MyScope",
                      "code": "PLAC00000123"
                    },
                    "properties": {
                      "Execution/MyScope/SomeExecutionProperty": {
                        "key": "Execution/MyScope/SomeExecutionProperty",
                        "value": {
                          "labelValue": "XYZ000034567"
                        }
                      }
                    },
                    "instrumentIdentifiers": {
                      "Instrument/default/Currency": "GBP"
                    },
                    "quantity": 100,
                    "state": "New",
                    "side": "Buy",
                    "type": "Limit",
                    "createdDate": "2006-04-11T00:00:00.0000000+00:00",
                    "settlementDate": "2006-04-13T00:00:00.0000000+00:00",
                    "price": {
                      "amount": 12413.33,
                      "currency": "USD"
                    },
                    "settlementCurrency": "GBP",
                    "settlementCurrencyFxRate": 0.67,
                    "counterparty": "SomeCounterparty",
                    "averagePrice": 12419.2
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "A collection of executions.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfExecution"
                },
                "example": {
                  "values": [
                    {
                      "id": {
                        "scope": "MyScope",
                        "code": "EXEC0000123"
                      },
                      "placementId": {
                        "scope": "MyScope",
                        "code": "PLAC00000123"
                      },
                      "properties": {
                        "Allocation/MyScope/SomeAllocationProperty": {
                          "key": "Allocation/MyScope/SomeAllocationProperty",
                          "value": {
                            "labelValue": "XYZ000034567"
                          }
                        }
                      },
                      "instrumentIdentifiers": {
                        "Instrument/default/Currency": "GBP"
                      },
                      "quantity": 100.5,
                      "state": "New",
                      "side": "Buy",
                      "type": "Limit",
                      "createdDate": "2006-04-11T00:00:00.0000000+00:00",
                      "settlementDate": "2006-04-13T00:00:00.0000000+00:00",
                      "price": {
                        "amount": 12413.33,
                        "currency": "USD"
                      },
                      "settlementCurrency": "GBP",
                      "settlementCurrencyFxRate": 0.67,
                      "counterparty": "SomeCounterparty",
                      "averagePrice": 12419.2,
                      "version": {
                        "effectiveFrom": "2018-03-05T10:10:10.0000000+00:00",
                        "asAtDate": "2018-03-05T10:10:10.0000000+00:00",
                        "asAtCreated": "2018-03-05T10:10:10.0000000+00:00",
                        "userIdCreated": "ExecutionUser1",
                        "asAtModified": "2018-03-08T10:10:10.0000000+00:00",
                        "userIdModified": "ExecutionUser2",
                        "asAtVersionNumber": 2
                      }
                    }
                  ],
                  "links": []
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfExecution"
                },
                "example": {
                  "values": [
                    {
                      "id": {
                        "scope": "MyScope",
                        "code": "EXEC0000123"
                      },
                      "placementId": {
                        "scope": "MyScope",
                        "code": "PLAC00000123"
                      },
                      "properties": {
                        "Allocation/MyScope/SomeAllocationProperty": {
                          "key": "Allocation/MyScope/SomeAllocationProperty",
                          "value": {
                            "labelValue": "XYZ000034567"
                          }
                        }
                      },
                      "instrumentIdentifiers": {
                        "Instrument/default/Currency": "GBP"
                      },
                      "quantity": 100.5,
                      "state": "New",
                      "side": "Buy",
                      "type": "Limit",
                      "createdDate": "2006-04-11T00:00:00.0000000+00:00",
                      "settlementDate": "2006-04-13T00:00:00.0000000+00:00",
                      "price": {
                        "amount": 12413.33,
                        "currency": "USD"
                      },
                      "settlementCurrency": "GBP",
                      "settlementCurrencyFxRate": 0.67,
                      "counterparty": "SomeCounterparty",
                      "averagePrice": 12419.2,
                      "version": {
                        "effectiveFrom": "2018-03-05T10:10:10.0000000+00:00",
                        "asAtDate": "2018-03-05T10:10:10.0000000+00:00",
                        "asAtCreated": "2018-03-05T10:10:10.0000000+00:00",
                        "userIdCreated": "ExecutionUser1",
                        "asAtModified": "2018-03-08T10:10:10.0000000+00:00",
                        "userIdModified": "ExecutionUser2",
                        "asAtVersionNumber": 2
                      }
                    }
                  ],
                  "links": []
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfExecution"
                },
                "example": {
                  "values": [
                    {
                      "id": {
                        "scope": "MyScope",
                        "code": "EXEC0000123"
                      },
                      "placementId": {
                        "scope": "MyScope",
                        "code": "PLAC00000123"
                      },
                      "properties": {
                        "Allocation/MyScope/SomeAllocationProperty": {
                          "key": "Allocation/MyScope/SomeAllocationProperty",
                          "value": {
                            "labelValue": "XYZ000034567"
                          }
                        }
                      },
                      "instrumentIdentifiers": {
                        "Instrument/default/Currency": "GBP"
                      },
                      "quantity": 100.5,
                      "state": "New",
                      "side": "Buy",
                      "type": "Limit",
                      "createdDate": "2006-04-11T00:00:00.0000000+00:00",
                      "settlementDate": "2006-04-13T00:00:00.0000000+00:00",
                      "price": {
                        "amount": 12413.33,
                        "currency": "USD"
                      },
                      "settlementCurrency": "GBP",
                      "settlementCurrencyFxRate": 0.67,
                      "counterparty": "SomeCounterparty",
                      "averagePrice": 12419.2,
                      "version": {
                        "effectiveFrom": "2018-03-05T10:10:10.0000000+00:00",
                        "asAtDate": "2018-03-05T10:10:10.0000000+00:00",
                        "asAtCreated": "2018-03-05T10:10:10.0000000+00:00",
                        "userIdCreated": "ExecutionUser1",
                        "asAtModified": "2018-03-08T10:10:10.0000000+00:00",
                        "userIdModified": "ExecutionUser2",
                        "asAtVersionNumber": 2
                      }
                    }
                  ],
                  "links": []
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      }
    },
    "/api/executions/{scope}/{code}": {
      "get": {
        "tags": [
          "Executions"
        ],
        "summary": "[EARLY ACCESS] GetExecution: Get Execution",
        "description": "Fetch a Execution that matches the specified identifier",
        "operationId": "GetExecution",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope to which the execution belongs.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string"
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The execution's unique identifier.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "type": "string"
            }
          },
          {
            "name": "asAt",
            "in": "query",
            "description": "The asAt datetime at which to retrieve the execution. Defaults to return the latest version of the execution if not specified.",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "x-nullable": true
          },
          {
            "name": "propertyKeys",
            "in": "query",
            "description": "A list of property keys from the \"Execution\" domain to decorate onto the execution.\r\n            These take the format {domain}/{scope}/{code} e.g. \"Execution/system/Name\".",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "description": "The key that uniquely identifies the property. It has the format {domain}/{scope}/{code}."
              }
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "description": "The execution matching the given identifier.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Execution"
                },
                "example": {
                  "id": {
                    "scope": "MyScope",
                    "code": "EXEC0000123"
                  },
                  "placementId": {
                    "scope": "MyScope",
                    "code": "PLAC00000123"
                  },
                  "properties": {
                    "Allocation/MyScope/SomeAllocationProperty": {
                      "key": "Allocation/MyScope/SomeAllocationProperty",
                      "value": {
                        "labelValue": "XYZ000034567"
                      }
                    }
                  },
                  "instrumentIdentifiers": {
                    "Instrument/default/Currency": "GBP"
                  },
                  "quantity": 100.5,
                  "state": "New",
                  "side": "Buy",
                  "type": "Limit",
                  "createdDate": "2006-04-11T00:00:00.0000000+00:00",
                  "settlementDate": "2006-04-13T00:00:00.0000000+00:00",
                  "price": {
                    "amount": 12413.33,
                    "currency": "USD"
                  },
                  "settlementCurrency": "GBP",
                  "settlementCurrencyFxRate": 0.67,
                  "counterparty": "SomeCounterparty",
                  "averagePrice": 12419.2,
                  "version": {
                    "effectiveFrom": "2018-03-05T10:10:10.0000000+00:00",
                    "asAtDate": "2018-03-05T10:10:10.0000000+00:00",
                    "asAtCreated": "2018-03-05T10:10:10.0000000+00:00",
                    "userIdCreated": "ExecutionUser1",
                    "asAtModified": "2018-03-08T10:10:10.0000000+00:00",
                    "userIdModified": "ExecutionUser2",
                    "asAtVersionNumber": 2
                  }
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Execution"
                },
                "example": {
                  "id": {
                    "scope": "MyScope",
                    "code": "EXEC0000123"
                  },
                  "placementId": {
                    "scope": "MyScope",
                    "code": "PLAC00000123"
                  },
                  "properties": {
                    "Allocation/MyScope/SomeAllocationProperty": {
                      "key": "Allocation/MyScope/SomeAllocationProperty",
                      "value": {
                        "labelValue": "XYZ000034567"
                      }
                    }
                  },
                  "instrumentIdentifiers": {
                    "Instrument/default/Currency": "GBP"
                  },
                  "quantity": 100.5,
                  "state": "New",
                  "side": "Buy",
                  "type": "Limit",
                  "createdDate": "2006-04-11T00:00:00.0000000+00:00",
                  "settlementDate": "2006-04-13T00:00:00.0000000+00:00",
                  "price": {
                    "amount": 12413.33,
                    "currency": "USD"
                  },
                  "settlementCurrency": "GBP",
                  "settlementCurrencyFxRate": 0.67,
                  "counterparty": "SomeCounterparty",
                  "averagePrice": 12419.2,
                  "version": {
                    "effectiveFrom": "2018-03-05T10:10:10.0000000+00:00",
                    "asAtDate": "2018-03-05T10:10:10.0000000+00:00",
                    "asAtCreated": "2018-03-05T10:10:10.0000000+00:00",
                    "userIdCreated": "ExecutionUser1",
                    "asAtModified": "2018-03-08T10:10:10.0000000+00:00",
                    "userIdModified": "ExecutionUser2",
                    "asAtVersionNumber": 2
                  }
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Execution"
                },
                "example": {
                  "id": {
                    "scope": "MyScope",
                    "code": "EXEC0000123"
                  },
                  "placementId": {
                    "scope": "MyScope",
                    "code": "PLAC00000123"
                  },
                  "properties": {
                    "Allocation/MyScope/SomeAllocationProperty": {
                      "key": "Allocation/MyScope/SomeAllocationProperty",
                      "value": {
                        "labelValue": "XYZ000034567"
                      }
                    }
                  },
                  "instrumentIdentifiers": {
                    "Instrument/default/Currency": "GBP"
                  },
                  "quantity": 100.5,
                  "state": "New",
                  "side": "Buy",
                  "type": "Limit",
                  "createdDate": "2006-04-11T00:00:00.0000000+00:00",
                  "settlementDate": "2006-04-13T00:00:00.0000000+00:00",
                  "price": {
                    "amount": 12413.33,
                    "currency": "USD"
                  },
                  "settlementCurrency": "GBP",
                  "settlementCurrencyFxRate": 0.67,
                  "counterparty": "SomeCounterparty",
                  "averagePrice": 12419.2,
                  "version": {
                    "effectiveFrom": "2018-03-05T10:10:10.0000000+00:00",
                    "asAtDate": "2018-03-05T10:10:10.0000000+00:00",
                    "asAtCreated": "2018-03-05T10:10:10.0000000+00:00",
                    "userIdCreated": "ExecutionUser1",
                    "asAtModified": "2018-03-08T10:10:10.0000000+00:00",
                    "userIdModified": "ExecutionUser2",
                    "asAtVersionNumber": 2
                  }
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      },
      "delete": {
        "tags": [
          "Executions"
        ],
        "summary": "[EARLY ACCESS] DeleteExecution: Delete execution",
        "description": "Delete an execution. Deletion will be valid from the execution's creation datetime.\r\nThis means that the execution will no longer exist at any effective datetime from the asAt datetime of deletion.",
        "operationId": "DeleteExecution",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The execution scope.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string"
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The execution's code. This, together with the scope uniquely identifies the execution to delete.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The response from deleting an execution.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedEntityResponse"
                },
                "example": {
                  "asAt": "2018-03-05T10:10:10.0000000+00:00"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedEntityResponse"
                },
                "example": {
                  "asAt": "2018-03-05T10:10:10.0000000+00:00"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedEntityResponse"
                },
                "example": {
                  "asAt": "2018-03-05T10:10:10.0000000+00:00"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      }
    },
    "/api/instruments": {
      "post": {
        "tags": [
          "Instruments"
        ],
        "summary": "UpsertInstruments: Upsert instruments",
        "description": "Create or update one or more instruments in the instrument master. An instrument is updated\r\nif it already exists and created if it does not.\r\n            \r\nIn the request, each instrument definition should be keyed by a unique correlation ID. This ID is ephemeral\r\nand not stored by LUSID. It serves only to easily identify each instrument in the response.\r\n            \r\nNote that an instrument must have at least one unique identifier, which is a combination of a type\r\n(such as 'Figi') and a value (such as 'BBG000BS1N49'). In addition, a random value is automatically\r\ngenerated for a LUSID Instrument ID (LUID) unique type by the system. For more information, see\r\nhttps://support.lusid.com/knowledgebase/article/KA-01862.\r\n            \r\nThe response returns both the collection of successfully created or updated instruments, as well as those\r\nthat failed. For each failure, a reason is provided. It is important to check the failed set for\r\nunsuccessful results.\n\nThe maximum number of instruments that this method can upsert per request is 2,000.",
        "operationId": "UpsertInstruments",
        "parameters": [
          {
            "name": "scope",
            "in": "query",
            "description": "The scope in which the instrument lies. When not supplied the scope is 'default'.",
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "default": "default"
            }
          }
        ],
        "requestBody": {
          "description": "The definitions of the instruments to create or update.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/components/schemas/InstrumentDefinition"
                }
              },
              "example": {
                "request_id_1": {
                  "name": "Instrument name",
                  "identifiers": {
                    "ClientInternal": {
                      "value": "some-identifier",
                      "effectiveAt": "0001-01-01T00:00:00.0000000+00:00"
                    },
                    "Figi": {
                      "value": "some-figi-code",
                      "effectiveAt": "0001-01-01T00:00:00.0000000+00:00"
                    },
                    "Isin": {
                      "value": "some-isin-code",
                      "effectiveAt": "0001-01-01T00:00:00.0000000+00:00"
                    }
                  },
                  "properties": [
                    {
                      "key": "Instrument/someScope/somePropertyName",
                      "value": {
                        "labelValue": "some-property-value"
                      },
                      "effectiveFrom": "2018-06-18T09:00:00.0000000+00:00"
                    }
                  ],
                  "lookThroughPortfolioId": {
                    "scope": "MyScope",
                    "code": "portfolio-code"
                  },
                  "definition": {
                    "instrumentFormat": {
                      "sourceSystem": "systemA",
                      "vendor": "Unknown",
                      "version": "1.0.0"
                    },
                    "content": "{\"some-key\": \"some-value\"}",
                    "instrumentType": "ExoticInstrument"
                  }
                },
                "request_id_2": {
                  "name": "Instrument name",
                  "identifiers": {
                    "ClientInternal": {
                      "value": "some-identifier-2",
                      "effectiveAt": "0001-01-01T00:00:00.0000000+00:00"
                    },
                    "Figi": {
                      "value": "some-figi-code-2",
                      "effectiveAt": "0001-01-01T00:00:00.0000000+00:00"
                    }
                  },
                  "properties": [],
                  "lookThroughPortfolioId": {
                    "scope": "MyScope",
                    "code": "portfolio-code"
                  },
                  "definition": {
                    "instrumentFormat": {
                      "sourceSystem": "systemA",
                      "vendor": "Unknown",
                      "version": "1.0.0"
                    },
                    "content": "{\"some-key\": \"some-value\"}",
                    "instrumentType": "ExoticInstrument"
                  }
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/components/schemas/InstrumentDefinition"
                }
              },
              "example": {
                "request_id_1": {
                  "name": "Instrument name",
                  "identifiers": {
                    "ClientInternal": {
                      "value": "some-identifier",
                      "effectiveAt": "0001-01-01T00:00:00.0000000+00:00"
                    },
                    "Figi": {
                      "value": "some-figi-code",
                      "effectiveAt": "0001-01-01T00:00:00.0000000+00:00"
                    },
                    "Isin": {
                      "value": "some-isin-code",
                      "effectiveAt": "0001-01-01T00:00:00.0000000+00:00"
                    }
                  },
                  "properties": [
                    {
                      "key": "Instrument/someScope/somePropertyName",
                      "value": {
                        "labelValue": "some-property-value"
                      },
                      "effectiveFrom": "2018-06-18T09:00:00.0000000+00:00"
                    }
                  ],
                  "lookThroughPortfolioId": {
                    "scope": "MyScope",
                    "code": "portfolio-code"
                  },
                  "definition": {
                    "instrumentFormat": {
                      "sourceSystem": "systemA",
                      "vendor": "Unknown",
                      "version": "1.0.0"
                    },
                    "content": "{\"some-key\": \"some-value\"}",
                    "instrumentType": "ExoticInstrument"
                  }
                },
                "request_id_2": {
                  "name": "Instrument name",
                  "identifiers": {
                    "ClientInternal": {
                      "value": "some-identifier-2",
                      "effectiveAt": "0001-01-01T00:00:00.0000000+00:00"
                    },
                    "Figi": {
                      "value": "some-figi-code-2",
                      "effectiveAt": "0001-01-01T00:00:00.0000000+00:00"
                    }
                  },
                  "properties": [],
                  "lookThroughPortfolioId": {
                    "scope": "MyScope",
                    "code": "portfolio-code"
                  },
                  "definition": {
                    "instrumentFormat": {
                      "sourceSystem": "systemA",
                      "vendor": "Unknown",
                      "version": "1.0.0"
                    },
                    "content": "{\"some-key\": \"some-value\"}",
                    "instrumentType": "ExoticInstrument"
                  }
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/components/schemas/InstrumentDefinition"
                }
              },
              "example": {
                "request_id_1": {
                  "name": "Instrument name",
                  "identifiers": {
                    "ClientInternal": {
                      "value": "some-identifier",
                      "effectiveAt": "0001-01-01T00:00:00.0000000+00:00"
                    },
                    "Figi": {
                      "value": "some-figi-code",
                      "effectiveAt": "0001-01-01T00:00:00.0000000+00:00"
                    },
                    "Isin": {
                      "value": "some-isin-code",
                      "effectiveAt": "0001-01-01T00:00:00.0000000+00:00"
                    }
                  },
                  "properties": [
                    {
                      "key": "Instrument/someScope/somePropertyName",
                      "value": {
                        "labelValue": "some-property-value"
                      },
                      "effectiveFrom": "2018-06-18T09:00:00.0000000+00:00"
                    }
                  ],
                  "lookThroughPortfolioId": {
                    "scope": "MyScope",
                    "code": "portfolio-code"
                  },
                  "definition": {
                    "instrumentFormat": {
                      "sourceSystem": "systemA",
                      "vendor": "Unknown",
                      "version": "1.0.0"
                    },
                    "content": "{\"some-key\": \"some-value\"}",
                    "instrumentType": "ExoticInstrument"
                  }
                },
                "request_id_2": {
                  "name": "Instrument name",
                  "identifiers": {
                    "ClientInternal": {
                      "value": "some-identifier-2",
                      "effectiveAt": "0001-01-01T00:00:00.0000000+00:00"
                    },
                    "Figi": {
                      "value": "some-figi-code-2",
                      "effectiveAt": "0001-01-01T00:00:00.0000000+00:00"
                    }
                  },
                  "properties": [],
                  "lookThroughPortfolioId": {
                    "scope": "MyScope",
                    "code": "portfolio-code"
                  },
                  "definition": {
                    "instrumentFormat": {
                      "sourceSystem": "systemA",
                      "vendor": "Unknown",
                      "version": "1.0.0"
                    },
                    "content": "{\"some-key\": \"some-value\"}",
                    "instrumentType": "ExoticInstrument"
                  }
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/components/schemas/InstrumentDefinition"
                }
              },
              "example": {
                "request_id_1": {
                  "name": "Instrument name",
                  "identifiers": {
                    "ClientInternal": {
                      "value": "some-identifier",
                      "effectiveAt": "0001-01-01T00:00:00.0000000+00:00"
                    },
                    "Figi": {
                      "value": "some-figi-code",
                      "effectiveAt": "0001-01-01T00:00:00.0000000+00:00"
                    },
                    "Isin": {
                      "value": "some-isin-code",
                      "effectiveAt": "0001-01-01T00:00:00.0000000+00:00"
                    }
                  },
                  "properties": [
                    {
                      "key": "Instrument/someScope/somePropertyName",
                      "value": {
                        "labelValue": "some-property-value"
                      },
                      "effectiveFrom": "2018-06-18T09:00:00.0000000+00:00"
                    }
                  ],
                  "lookThroughPortfolioId": {
                    "scope": "MyScope",
                    "code": "portfolio-code"
                  },
                  "definition": {
                    "instrumentFormat": {
                      "sourceSystem": "systemA",
                      "vendor": "Unknown",
                      "version": "1.0.0"
                    },
                    "content": "{\"some-key\": \"some-value\"}",
                    "instrumentType": "ExoticInstrument"
                  }
                },
                "request_id_2": {
                  "name": "Instrument name",
                  "identifiers": {
                    "ClientInternal": {
                      "value": "some-identifier-2",
                      "effectiveAt": "0001-01-01T00:00:00.0000000+00:00"
                    },
                    "Figi": {
                      "value": "some-figi-code-2",
                      "effectiveAt": "0001-01-01T00:00:00.0000000+00:00"
                    }
                  },
                  "properties": [],
                  "lookThroughPortfolioId": {
                    "scope": "MyScope",
                    "code": "portfolio-code"
                  },
                  "definition": {
                    "instrumentFormat": {
                      "sourceSystem": "systemA",
                      "vendor": "Unknown",
                      "version": "1.0.0"
                    },
                    "content": "{\"some-key\": \"some-value\"}",
                    "instrumentType": "ExoticInstrument"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "The successfully created or updated instruments along with any failures",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UpsertInstrumentsResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpsertInstrumentsResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpsertInstrumentsResponse"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Stable"
      },
      "get": {
        "tags": [
          "Instruments"
        ],
        "summary": "ListInstruments: List instruments",
        "description": "List all the instruments in the instrument master.\r\n            \r\nTo retrieve a particular set of instruments instead, use the Get instruments endpoint.\n\nThe maximum number of instruments that this method can list per request is 2,000.",
        "operationId": "ListInstruments",
        "parameters": [
          {
            "name": "asAt",
            "in": "query",
            "description": "The asAt datetime at which to list instruments. Defaults to returning the latest\r\n             version of each instrument if not specified.",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "x-nullable": true
          },
          {
            "name": "effectiveAt",
            "in": "query",
            "description": "The effective datetime or cut label at which to list instruments.\r\n             Defaults to the current LUSID system datetime if not specified.",
            "schema": {
              "type": "string",
              "format": "dateorcutlabel"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "The pagination token to use to continue listing instruments; this value is returned from\r\n             the previous call. If a pagination token is provided, the <i>sortBy</i>, <i>filter</i>, <i>effectiveAt</i> and\r\n             <i>asAt</i> fields must not have changed since the original request. Also, a <i>start</i> value cannot be\r\n             provided. For more information, see https://support.lusid.com/knowledgebase/article/KA-01915.",
            "schema": {
              "maxLength": 500,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\+/]*={0,3}$",
              "type": "string"
            }
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "A list of field names or properties to sort by, each suffixed by \" ASC\" or \" DESC\"",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "x-nullable": true
          },
          {
            "name": "start",
            "in": "query",
            "description": "When paginating, skip this number of results.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-nullable": true
          },
          {
            "name": "limit",
            "in": "query",
            "description": "When paginating, limit the results to this number.",
            "schema": {
              "maximum": 5000,
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            },
            "x-nullable": true
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Expression to filter the result set. Defaults to filtering out inactive instruments\r\n             (that is, those that have been deleted). For more information about filtering results,\r\n             see https://support.lusid.com/knowledgebase/article/KA-01914.",
            "schema": {
              "maxLength": 16384,
              "minLength": 0,
              "pattern": "^[\\s\\S]*$",
              "type": "string",
              "default": "State eq 'Active'"
            }
          },
          {
            "name": "instrumentPropertyKeys",
            "in": "query",
            "description": "A list of property keys from the 'Instrument' domain to decorate onto\r\n             instruments, or from any domain that supports relationships to decorate onto related entities.\r\n             These must have the format {domain}/{scope}/{code}, for example 'Instrument/system/Name'.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "description": "The key that uniquely identifies the property. It has the format {domain}/{scope}/{code}."
              }
            },
            "x-nullable": true
          },
          {
            "name": "scope",
            "in": "query",
            "description": "The scope in which the instrument lies. When not supplied the scope is 'default'.",
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "default": "default"
            }
          },
          {
            "name": "relationshipDefinitionIds",
            "in": "query",
            "description": "A list of relationship definitions that are used to decorate related entities\r\n             onto each instrument in the response. These must take the form {relationshipDefinitionScope}/{relationshipDefinitionCode}.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "description": "Identifiers of an entity"
              }
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "description": "The requested instruments",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PagedResourceListOfInstrument"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagedResourceListOfInstrument"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagedResourceListOfInstrument"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Stable"
      }
    },
    "/api/instruments/$delete": {
      "post": {
        "tags": [
          "Instruments"
        ],
        "summary": "[EARLY ACCESS] DeleteInstruments: Soft or hard delete multiple instruments",
        "description": "Deletes a number of instruments identified by LusidInstrumentId.\r\n            \r\nSoft deletion marks the instrument as inactive so it can no longer be referenced when creating or updating transactions or holdings. You can still query existing transactions and holdings related to the inactive instrument.\r\n            \r\nIn addition to the above behaviour, hard deletion: (i) completely removes all external identifiers from the instrument; (ii) marks the instrument as 'Deleted'; (iii) prepends the instrument's name with 'DELETED '; (iv) prevents the instrument from being returned in list instruments queries.\r\n            \r\nFollowing hard deletion, an instrument may only be retrieved by making a direct get instrument request for the LusidInstrumentId. Instrument deletion cannot be undone. Please note that currency instruments cannot currently be deleted.\n\nThe maximum number of instruments that this method can delete per request is 2,000.",
        "operationId": "DeleteInstruments",
        "parameters": [
          {
            "name": "deleteMode",
            "in": "query",
            "description": "The delete mode to use (defaults to 'Soft').",
            "schema": {
              "enum": [
                "Soft",
                "Hard"
              ],
              "type": "string",
              "description": "The available values are: Soft, Hard"
            },
            "x-nullable": true
          },
          {
            "name": "scope",
            "in": "query",
            "description": "The scope in which the instruments lie. When not supplied the scope is 'default'.",
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "default": "default"
            }
          }
        ],
        "requestBody": {
          "description": "The list of lusidInstrumentId's to delete.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "example": [
                "LUID_12345678",
                "LUID_87654321"
              ]
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "example": [
                "LUID_12345678",
                "LUID_87654321"
              ]
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "example": [
                "LUID_12345678",
                "LUID_87654321"
              ]
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "example": [
                "LUID_12345678",
                "LUID_87654321"
              ]
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The datetime that the instruments were deleted",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/DeleteInstrumentsResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeleteInstrumentsResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeleteInstrumentsResponse"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      }
    },
    "/api/instruments/$get": {
      "post": {
        "tags": [
          "Instruments"
        ],
        "summary": "GetInstruments: Get instruments",
        "description": "Retrieve the definition of one or more instruments, as identified by a collection of unique identifiers.\r\n            \r\nNote that to retrieve all the instruments in the instrument master, use the List instruments endpoint instead.",
        "operationId": "GetInstruments",
        "parameters": [
          {
            "name": "identifierType",
            "in": "query",
            "description": "The unique identifier type to use, for example 'Figi'.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "effectiveAt",
            "in": "query",
            "description": "The effective datetime or cut label at which to retrieve the instrument definitions.\r\n             Defaults to the current LUSID system datetime if not specified.",
            "schema": {
              "type": "string",
              "format": "dateorcutlabel"
            }
          },
          {
            "name": "asAt",
            "in": "query",
            "description": "The asAt datetime at which to retrieve the instrument definitions.\r\n             Defaults to returning the latest version of each instrument definition if not specified.",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "x-nullable": true
          },
          {
            "name": "propertyKeys",
            "in": "query",
            "description": "A list of property keys from the 'Instrument' domain to decorate onto\r\n             each instrument, or from any domain that supports relationships to decorate onto related entities.\r\n             These must have the format {domain}/{scope}/{code}, for example 'Instrument/system/Name'.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "description": "The key that uniquely identifies the property. It has the format {domain}/{scope}/{code}."
              }
            },
            "x-nullable": true
          },
          {
            "name": "scope",
            "in": "query",
            "description": "The scope in which the instrument lies. When not supplied the scope is 'default'.",
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "default": "default"
            }
          },
          {
            "name": "relationshipDefinitionIds",
            "in": "query",
            "description": "A list of relationship definitions that are used to decorate related entities\r\n             onto each instrument in the response. These must take the form {relationshipDefinitionScope}/{relationshipDefinitionCode}.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "description": "Identifiers of an entity"
              }
            },
            "x-nullable": true
          }
        ],
        "requestBody": {
          "description": "A list of one or more <i>identifierType</i> values to use to identify instruments.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "example": [
                "instrument-identifier-1",
                "instrument-identifier-2"
              ]
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "example": [
                "instrument-identifier-1",
                "instrument-identifier-2"
              ]
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "example": [
                "instrument-identifier-1",
                "instrument-identifier-2"
              ]
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "example": [
                "instrument-identifier-1",
                "instrument-identifier-2"
              ]
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The requested instruments which could be identified along with any failures",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/GetInstrumentsResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetInstrumentsResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetInstrumentsResponse"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Stable"
      }
    },
    "/api/instruments/$upsertproperties": {
      "post": {
        "tags": [
          "Instruments"
        ],
        "summary": "UpsertInstrumentsProperties: Upsert instruments properties",
        "description": "Create or update one or more properties for particular instruments.\r\n            \r\nEach instrument property is updated if it exists and created if it does not. For any failures, a reason\r\nis provided.\r\n            \r\nProperties have an <i>effectiveFrom</i> datetime from which the property is valid, and an <i>effectiveUntil</i>\r\ndatetime until which the property is valid. Not supplying an <i>effectiveUntil</i> datetime results in the property being\r\nvalid indefinitely, or until the next <i>effectiveFrom</i> datetime of the property.",
        "operationId": "UpsertInstrumentsProperties",
        "parameters": [
          {
            "name": "scope",
            "in": "query",
            "description": "The scope in which the instrument lies. When not supplied the scope is 'default'.",
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "default": "default"
            }
          }
        ],
        "requestBody": {
          "description": "A list of instruments and associated instrument properties to create or update.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/UpsertInstrumentPropertyRequest"
                }
              },
              "example": [
                {
                  "identifierType": "LusidInstrumentId",
                  "identifier": "LUID_00000000",
                  "properties": [
                    {
                      "key": "Instrument/MyScope/SomePropertyName",
                      "value": {
                        "labelValue": "SomeValue1"
                      },
                      "effectiveFrom": "2016-09-15T12:00:00.0000000+00:00"
                    },
                    {
                      "key": "Instrument/MyScope/SomePropertyName",
                      "value": {
                        "labelValue": "SomeValue2"
                      },
                      "effectiveFrom": "2017-08-10T12:00:00.0000000+00:00"
                    },
                    {
                      "key": "Instrument/MyScope/AnotherPropertyName",
                      "value": {
                        "labelValue": "AnotherValue1"
                      },
                      "effectiveFrom": "2018-03-05T12:00:00.0000000+00:00",
                      "effectiveUntil": "2019-06-01T12:00:00.0000000+00:00"
                    },
                    {
                      "key": "Instrument/MyScope/AnotherPropertyName",
                      "value": {
                        "labelValue": "AnotherValue2"
                      },
                      "effectiveFrom": "2020-03-15T12:00:00.0000000+00:00",
                      "effectiveUntil": "2021-01-15T12:00:00.0000000+00:00"
                    }
                  ]
                }
              ]
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/UpsertInstrumentPropertyRequest"
                }
              },
              "example": [
                {
                  "identifierType": "LusidInstrumentId",
                  "identifier": "LUID_00000000",
                  "properties": [
                    {
                      "key": "Instrument/MyScope/SomePropertyName",
                      "value": {
                        "labelValue": "SomeValue1"
                      },
                      "effectiveFrom": "2016-09-15T12:00:00.0000000+00:00"
                    },
                    {
                      "key": "Instrument/MyScope/SomePropertyName",
                      "value": {
                        "labelValue": "SomeValue2"
                      },
                      "effectiveFrom": "2017-08-10T12:00:00.0000000+00:00"
                    },
                    {
                      "key": "Instrument/MyScope/AnotherPropertyName",
                      "value": {
                        "labelValue": "AnotherValue1"
                      },
                      "effectiveFrom": "2018-03-05T12:00:00.0000000+00:00",
                      "effectiveUntil": "2019-06-01T12:00:00.0000000+00:00"
                    },
                    {
                      "key": "Instrument/MyScope/AnotherPropertyName",
                      "value": {
                        "labelValue": "AnotherValue2"
                      },
                      "effectiveFrom": "2020-03-15T12:00:00.0000000+00:00",
                      "effectiveUntil": "2021-01-15T12:00:00.0000000+00:00"
                    }
                  ]
                }
              ]
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/UpsertInstrumentPropertyRequest"
                }
              },
              "example": [
                {
                  "identifierType": "LusidInstrumentId",
                  "identifier": "LUID_00000000",
                  "properties": [
                    {
                      "key": "Instrument/MyScope/SomePropertyName",
                      "value": {
                        "labelValue": "SomeValue1"
                      },
                      "effectiveFrom": "2016-09-15T12:00:00.0000000+00:00"
                    },
                    {
                      "key": "Instrument/MyScope/SomePropertyName",
                      "value": {
                        "labelValue": "SomeValue2"
                      },
                      "effectiveFrom": "2017-08-10T12:00:00.0000000+00:00"
                    },
                    {
                      "key": "Instrument/MyScope/AnotherPropertyName",
                      "value": {
                        "labelValue": "AnotherValue1"
                      },
                      "effectiveFrom": "2018-03-05T12:00:00.0000000+00:00",
                      "effectiveUntil": "2019-06-01T12:00:00.0000000+00:00"
                    },
                    {
                      "key": "Instrument/MyScope/AnotherPropertyName",
                      "value": {
                        "labelValue": "AnotherValue2"
                      },
                      "effectiveFrom": "2020-03-15T12:00:00.0000000+00:00",
                      "effectiveUntil": "2021-01-15T12:00:00.0000000+00:00"
                    }
                  ]
                }
              ]
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/UpsertInstrumentPropertyRequest"
                }
              },
              "example": [
                {
                  "identifierType": "LusidInstrumentId",
                  "identifier": "LUID_00000000",
                  "properties": [
                    {
                      "key": "Instrument/MyScope/SomePropertyName",
                      "value": {
                        "labelValue": "SomeValue1"
                      },
                      "effectiveFrom": "2016-09-15T12:00:00.0000000+00:00"
                    },
                    {
                      "key": "Instrument/MyScope/SomePropertyName",
                      "value": {
                        "labelValue": "SomeValue2"
                      },
                      "effectiveFrom": "2017-08-10T12:00:00.0000000+00:00"
                    },
                    {
                      "key": "Instrument/MyScope/AnotherPropertyName",
                      "value": {
                        "labelValue": "AnotherValue1"
                      },
                      "effectiveFrom": "2018-03-05T12:00:00.0000000+00:00",
                      "effectiveUntil": "2019-06-01T12:00:00.0000000+00:00"
                    },
                    {
                      "key": "Instrument/MyScope/AnotherPropertyName",
                      "value": {
                        "labelValue": "AnotherValue2"
                      },
                      "effectiveFrom": "2020-03-15T12:00:00.0000000+00:00",
                      "effectiveUntil": "2021-01-15T12:00:00.0000000+00:00"
                    }
                  ]
                }
              ]
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "The asAt datetime at which the properties were created or updated.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UpsertInstrumentPropertiesResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpsertInstrumentPropertiesResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpsertInstrumentPropertiesResponse"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Stable"
      }
    },
    "/api/instruments/identifierTypes": {
      "get": {
        "tags": [
          "Instruments"
        ],
        "summary": "GetInstrumentIdentifierTypes: Get instrument identifier types",
        "description": "Retrieve a list of all valid instrument identifier types and whether they are unique or not.\r\n            \r\nAn instrument must have a value for at least one unique identifier type (it can have more than one unique type and value).\r\nIn addition, a value is automatically generated for a LUSID Instrument ID (LUID) unique type by the system.\r\n            \r\nAn instrument can have values for multiple non-unique identifier types (or it can have zero non-unique types and values).",
        "operationId": "GetInstrumentIdentifierTypes",
        "responses": {
          "200": {
            "description": "A list of valid instrument identifier types.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfInstrumentIdTypeDescriptor"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfInstrumentIdTypeDescriptor"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfInstrumentIdTypeDescriptor"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Stable"
      }
    },
    "/api/instruments/{identifierType}/{identifier}": {
      "get": {
        "tags": [
          "Instruments"
        ],
        "summary": "GetInstrument: Get instrument",
        "description": "Retrieve the definition of a particular instrument, as identified by a particular unique identifier.",
        "operationId": "GetInstrument",
        "parameters": [
          {
            "name": "identifierType",
            "in": "path",
            "description": "The unique identifier type to use, for example 'Figi'.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "identifier",
            "in": "path",
            "description": "An <i>identifierType</i> value to use to identify the instrument, for example 'BBG000BLNNV0'.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "effectiveAt",
            "in": "query",
            "description": "The effective datetime or cut label at which to retrieve the instrument.\r\n            Defaults to the current LUSID system datetime if not specified.",
            "schema": {
              "type": "string",
              "format": "dateorcutlabel"
            }
          },
          {
            "name": "asAt",
            "in": "query",
            "description": "The asAt datetime at which to retrieve the instrument. Defaults to\r\n            returning the latest version if not specified.",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "x-nullable": true
          },
          {
            "name": "propertyKeys",
            "in": "query",
            "description": "A list of property keys from the 'Instrument' domain to decorate onto\r\n            the instrument, or from any domain that supports relationships to decorate onto related entities.\r\n            These must have the format {domain}/{scope}/{code}, for example 'Instrument/system/Name'.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "description": "The key that uniquely identifies the property. It has the format {domain}/{scope}/{code}."
              }
            },
            "x-nullable": true
          },
          {
            "name": "scope",
            "in": "query",
            "description": "The scope in which the instrument lies. When not supplied the scope is 'default'.",
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "default": "default"
            }
          },
          {
            "name": "relationshipDefinitionIds",
            "in": "query",
            "description": "A list of relationship definitions that are used to decorate related entities\r\n            onto the instrument in the response. These must take the form {relationshipDefinitionScope}/{relationshipDefinitionCode}.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "description": "Identifiers of an entity"
              }
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "description": "The requested instrument.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Instrument"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Instrument"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Instrument"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Stable"
      },
      "post": {
        "tags": [
          "Instruments"
        ],
        "summary": "UpdateInstrumentIdentifier: Update instrument identifier",
        "description": "Create, update or delete a particular instrument identifier for an instrument.\r\n            \r\nTo delete the identifier, leave the value unspecified in the request. If not being deleted, the\r\nidentifier is updated if it exists and created if it does not.",
        "operationId": "UpdateInstrumentIdentifier",
        "parameters": [
          {
            "name": "identifierType",
            "in": "path",
            "description": "The unique identifier type to search, for example 'Figi'.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "identifier",
            "in": "path",
            "description": "An <i>identifierType</i> value to use to identify the instrument, for example 'BBG000BLNNV0'.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "scope",
            "in": "query",
            "description": "The scope in which the instrument lies. When not supplied the scope is 'default'.",
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "default": "default"
            }
          }
        ],
        "requestBody": {
          "description": "The identifier to update or delete. This need not be the same value as the\r\n             'identifier' parameter used to retrieve the instrument.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateInstrumentIdentifierRequest"
              },
              "example": {
                "type": "Figi",
                "value": "updated-figi",
                "effectiveAt": "2018-02-01T10:00:00.0000000+00:00"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateInstrumentIdentifierRequest"
              },
              "example": {
                "type": "Figi",
                "value": "updated-figi",
                "effectiveAt": "2018-02-01T10:00:00.0000000+00:00"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateInstrumentIdentifierRequest"
              },
              "example": {
                "type": "Figi",
                "value": "updated-figi",
                "effectiveAt": "2018-02-01T10:00:00.0000000+00:00"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateInstrumentIdentifierRequest"
              },
              "example": {
                "type": "Figi",
                "value": "updated-figi",
                "effectiveAt": "2018-02-01T10:00:00.0000000+00:00"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The updated instrument definition with the identifier created, updated or deleted",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Instrument"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Instrument"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Instrument"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Stable"
      },
      "delete": {
        "tags": [
          "Instruments"
        ],
        "summary": "[EARLY ACCESS] DeleteInstrument: Soft delete a single instrument",
        "description": "Soft delete a particular instrument, as identified by a particular instrument identifier.\r\n            \r\nOnce deleted, an instrument is marked as inactive and can no longer be referenced when creating or updating\r\ntransactions or holdings. You can still query existing transactions and holdings related to the\r\ndeleted instrument.",
        "operationId": "DeleteInstrument",
        "parameters": [
          {
            "name": "identifierType",
            "in": "path",
            "description": "The unique identifier type to search, for example 'Figi'.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "identifier",
            "in": "path",
            "description": "An <i>identifierType</i> value to use to identify the instrument, for example 'BBG000BLNNV0'.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "scope",
            "in": "query",
            "description": "The scope in which the instrument lies. When not supplied the scope is 'default'.",
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "default": "default"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The datetime that the instrument was deleted",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/DeleteInstrumentResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeleteInstrumentResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeleteInstrumentResponse"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      }
    },
    "/api/instruments/{identifierType}/{identifier}/properties": {
      "get": {
        "tags": [
          "Instruments"
        ],
        "summary": "[EARLY ACCESS] GetInstrumentProperties: Get instrument properties",
        "description": "List all the properties of a particular instrument, as identified by a particular unique identifier.",
        "operationId": "GetInstrumentProperties",
        "parameters": [
          {
            "name": "identifierType",
            "in": "path",
            "description": "The unique identifier type to search, for example 'Figi'.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "identifier",
            "in": "path",
            "description": "An <i>identifierType</i> value to use to identify the instrument, for example 'BBG000BLNNV0'.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "effectiveAt",
            "in": "query",
            "description": "The effective datetime or cut label at which to list the instrument's properties.\r\n            Defaults to the current LUSID system datetime if not specified.",
            "schema": {
              "type": "string",
              "format": "dateorcutlabel"
            }
          },
          {
            "name": "asAt",
            "in": "query",
            "description": "The asAt datetime at which to list the instrument's properties. Defaults to returning\r\n            the latest version of each property if not specified.",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "x-nullable": true
          },
          {
            "name": "scope",
            "in": "query",
            "description": "The scope in which the instrument lies. When not supplied the scope is 'default'.",
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "default": "default"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The properties of the specified instrument",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/InstrumentProperties"
                },
                "example": {
                  "properties": {
                    "Instrument/MyScope/SomeInstrumentProperty": {
                      "key": "Instrument/MyScope/SomeInstrumentProperty",
                      "value": {
                        "labelValue": "XYZ000034567"
                      },
                      "effectiveFrom": "2018-01-01T12:00:00.0000000+00:00"
                    },
                    "Instrument/MyScope/SomeOtherInstrumentProperty": {
                      "key": "Instrument/MyScope/SomeOtherInstrumentProperty",
                      "value": {
                        "labelValue": "XYZ00008910"
                      },
                      "effectiveFrom": "2017-01-01T12:00:00.0000000+00:00"
                    }
                  },
                  "version": {
                    "effectiveFrom": "2015-01-01T12:00:00.0000000+00:00",
                    "asAtDate": "2020-01-01T12:00:00.0000000+00:00"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InstrumentProperties"
                },
                "example": {
                  "properties": {
                    "Instrument/MyScope/SomeInstrumentProperty": {
                      "key": "Instrument/MyScope/SomeInstrumentProperty",
                      "value": {
                        "labelValue": "XYZ000034567"
                      },
                      "effectiveFrom": "2018-01-01T12:00:00.0000000+00:00"
                    },
                    "Instrument/MyScope/SomeOtherInstrumentProperty": {
                      "key": "Instrument/MyScope/SomeOtherInstrumentProperty",
                      "value": {
                        "labelValue": "XYZ00008910"
                      },
                      "effectiveFrom": "2017-01-01T12:00:00.0000000+00:00"
                    }
                  },
                  "version": {
                    "effectiveFrom": "2015-01-01T12:00:00.0000000+00:00",
                    "asAtDate": "2020-01-01T12:00:00.0000000+00:00"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InstrumentProperties"
                },
                "example": {
                  "properties": {
                    "Instrument/MyScope/SomeInstrumentProperty": {
                      "key": "Instrument/MyScope/SomeInstrumentProperty",
                      "value": {
                        "labelValue": "XYZ000034567"
                      },
                      "effectiveFrom": "2018-01-01T12:00:00.0000000+00:00"
                    },
                    "Instrument/MyScope/SomeOtherInstrumentProperty": {
                      "key": "Instrument/MyScope/SomeOtherInstrumentProperty",
                      "value": {
                        "labelValue": "XYZ00008910"
                      },
                      "effectiveFrom": "2017-01-01T12:00:00.0000000+00:00"
                    }
                  },
                  "version": {
                    "effectiveFrom": "2015-01-01T12:00:00.0000000+00:00",
                    "asAtDate": "2020-01-01T12:00:00.0000000+00:00"
                  }
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      }
    },
    "/api/instruments/{identifierType}/{identifier}/properties/$delete": {
      "post": {
        "tags": [
          "Instruments"
        ],
        "summary": "[EARLY ACCESS] DeleteInstrumentProperties: Delete instrument properties",
        "description": "Delete one or more properties from a particular instrument. If the properties are time-variant then an effective datetime from which\r\nto delete properties must be specified. If the properties are perpetual then it is invalid to specify an effective datetime for deletion.",
        "operationId": "DeleteInstrumentProperties",
        "parameters": [
          {
            "name": "identifierType",
            "in": "path",
            "description": "The unique identifier type to search, for example 'Figi'.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "identifier",
            "in": "path",
            "description": "An <i>identifierType</i> value to use to identify the instrument, for example 'BBG000BLNNV0'.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "effectiveAt",
            "in": "query",
            "description": "The effective datetime or cut label at which to delete time-variant properties from.\r\n            The property must exist at the specified 'effectiveAt' datetime. If the 'effectiveAt' is not provided or is\r\n            before the time-variant property exists then a failure is returned. Do not specify this parameter if any of\r\n            the properties to delete are perpetual.",
            "schema": {
              "type": "string",
              "format": "dateorcutlabel"
            }
          },
          {
            "name": "scope",
            "in": "query",
            "description": "The scope in which the instrument lies. When not supplied the scope is 'default'.",
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "default": "default"
            }
          }
        ],
        "requestBody": {
          "description": "A list of property keys from the 'Instruments' domain whose properties to delete.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string",
                  "description": "The key that uniquely identifies the property. It has the format {domain}/{scope}/{code}."
                }
              },
              "example": [
                "Instrument/scope/market-sector",
                "Instrument/scope/tenor"
              ]
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string",
                  "description": "The key that uniquely identifies the property. It has the format {domain}/{scope}/{code}."
                }
              },
              "example": [
                "Instrument/scope/market-sector",
                "Instrument/scope/tenor"
              ]
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string",
                  "description": "The key that uniquely identifies the property. It has the format {domain}/{scope}/{code}."
                }
              },
              "example": [
                "Instrument/scope/market-sector",
                "Instrument/scope/tenor"
              ]
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string",
                  "description": "The key that uniquely identifies the property. It has the format {domain}/{scope}/{code}."
                }
              },
              "example": [
                "Instrument/scope/market-sector",
                "Instrument/scope/tenor"
              ]
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The asAt datetime at which properties were deleted.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/DeleteInstrumentPropertiesResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeleteInstrumentPropertiesResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeleteInstrumentPropertiesResponse"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      }
    },
    "/api/instruments/{identifierType}/{identifier}/properties/list": {
      "get": {
        "tags": [
          "Instruments"
        ],
        "summary": "[EARLY ACCESS] ListInstrumentProperties: Get instrument properties (with Pagination)",
        "description": "List all the properties of a particular instrument, as identified by a particular unique identifier.",
        "operationId": "ListInstrumentProperties",
        "parameters": [
          {
            "name": "identifierType",
            "in": "path",
            "description": "The unique identifier type to search, for example 'Figi'.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "identifier",
            "in": "path",
            "description": "An <i>identifierType</i> value to use to identify the instrument, for example 'BBG000BLNNV0'.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "effectiveAt",
            "in": "query",
            "description": "The effective datetime or cut label at which to list the instrument's properties.\r\n            Defaults to the current LUSID system datetime if not specified.",
            "schema": {
              "maxLength": 256,
              "minLength": 0,
              "pattern": "^[a-zA-Z0-9\\-_\\+:\\.]+$",
              "type": "string",
              "format": "dateorcutlabel"
            }
          },
          {
            "name": "asAt",
            "in": "query",
            "description": "The asAt datetime at which to list the instrument's properties. Defaults to returning\r\n            the latest version of each property if not specified.",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "x-nullable": true
          },
          {
            "name": "page",
            "in": "query",
            "description": "The pagination token to use to continue listing commands; this value is returned from the previous call.",
            "schema": {
              "maxLength": 500,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\+/]*={0,3}$",
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "When paginating, limit the results per page to this number.",
            "schema": {
              "maximum": 5000,
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            },
            "x-nullable": true
          },
          {
            "name": "scope",
            "in": "query",
            "description": "The scope in which the instrument lies. When not supplied the scope is 'default'.",
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "default": "default"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The properties of the specified instrument",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfProperty"
                },
                "example": {
                  "values": [
                    {
                      "key": "Instrument/MyScope/SomeInstrumentProperty",
                      "value": {
                        "labelValue": "XYZ000034567"
                      },
                      "effectiveFrom": "2018-01-01T12:00:00.0000000+00:00"
                    },
                    {
                      "key": "Instrument/MyScope/SomeOtherInstrumentProperty",
                      "value": {
                        "labelValue": "XYZ00008910"
                      },
                      "effectiveFrom": "2017-01-01T12:00:00.0000000+00:00"
                    }
                  ],
                  "links": []
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfProperty"
                },
                "example": {
                  "values": [
                    {
                      "key": "Instrument/MyScope/SomeInstrumentProperty",
                      "value": {
                        "labelValue": "XYZ000034567"
                      },
                      "effectiveFrom": "2018-01-01T12:00:00.0000000+00:00"
                    },
                    {
                      "key": "Instrument/MyScope/SomeOtherInstrumentProperty",
                      "value": {
                        "labelValue": "XYZ00008910"
                      },
                      "effectiveFrom": "2017-01-01T12:00:00.0000000+00:00"
                    }
                  ],
                  "links": []
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfProperty"
                },
                "example": {
                  "values": [
                    {
                      "key": "Instrument/MyScope/SomeInstrumentProperty",
                      "value": {
                        "labelValue": "XYZ000034567"
                      },
                      "effectiveFrom": "2018-01-01T12:00:00.0000000+00:00"
                    },
                    {
                      "key": "Instrument/MyScope/SomeOtherInstrumentProperty",
                      "value": {
                        "labelValue": "XYZ00008910"
                      },
                      "effectiveFrom": "2017-01-01T12:00:00.0000000+00:00"
                    }
                  ],
                  "links": []
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      }
    },
    "/api/instruments/{identifierType}/{identifier}/properties/time-series": {
      "get": {
        "tags": [
          "Instruments"
        ],
        "summary": "[EARLY ACCESS] GetInstrumentPropertyTimeSeries: Get instrument property time series",
        "description": "Retrieve the complete time series (history) for a particular property of an instrument.",
        "operationId": "GetInstrumentPropertyTimeSeries",
        "parameters": [
          {
            "name": "identifierType",
            "in": "path",
            "description": "The unique identifier type to search, for example 'Figi'.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "identifier",
            "in": "path",
            "description": "An <i>identifierType</i> value to use to identify the instrument, for example 'BBG000BLNNV0'.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "propertyKey",
            "in": "query",
            "description": "The property key of a property from the 'Instrument' domain whose history to retrieve.\r\n            This must have the format {domain}/{scope}/{code}, for example 'Instrument/system/Name'.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The key that uniquely identifies the property. It has the format {domain}/{scope}/{code}."
            }
          },
          {
            "name": "identifierEffectiveAt",
            "in": "query",
            "description": "The effective datetime used to resolve the instrument from the identifier.\r\n            Defaults to the current LUSID system datetime if not specified.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "asAt",
            "in": "query",
            "description": "The asAt datetime at which to retrieve the instrument's property history. Defaults to\r\n            returning the current datetime if not supplied.",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "x-nullable": true
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Expression to filter the results. For more information about filtering,\r\n            see https://support.lusid.com/knowledgebase/article/KA-01914.",
            "schema": {
              "maxLength": 16384,
              "minLength": 0,
              "pattern": "^[\\s\\S]*$",
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "The pagination token to use to continue listing properties; this value is returned from\r\n            the previous call. If a pagination token is provided, the <i>filter</i>, <i>effectiveAt</i> and\r\n            <i>asAt</i> fields must not have changed since the original request. For more information, see\r\n            https://support.lusid.com/knowledgebase/article/KA-01915.",
            "schema": {
              "maxLength": 500,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\+/]*={0,3}$",
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "When paginating, limit the results to this number.",
            "schema": {
              "maximum": 5000,
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            },
            "x-nullable": true
          },
          {
            "name": "scope",
            "in": "query",
            "description": "The scope in which the instrument lies. When not supplied the scope is 'default'.",
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "default": "default"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The time series of the property",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfPropertyInterval"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfPropertyInterval"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfPropertyInterval"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      }
    },
    "/api/instruments/{identifierType}/{identifier}/relationships": {
      "get": {
        "tags": [
          "Instruments"
        ],
        "summary": "[EARLY ACCESS] GetInstrumentRelationships: Get Instrument relationships",
        "description": "Get relationships for a particular Instrument.",
        "operationId": "GetInstrumentRelationships",
        "parameters": [
          {
            "name": "identifierType",
            "in": "path",
            "description": "An identifier type attached to the Instrument.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string"
            }
          },
          {
            "name": "identifier",
            "in": "path",
            "description": "The identifier value.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string"
            }
          },
          {
            "name": "effectiveAt",
            "in": "query",
            "description": "The effective datetime or cut label at which to get relationships. Defaults to the current LUSID system datetime if not specified.",
            "schema": {
              "maxLength": 256,
              "minLength": 0,
              "pattern": "^[a-zA-Z0-9\\-_\\+:\\.]+$",
              "type": "string",
              "format": "dateorcutlabel"
            }
          },
          {
            "name": "asAt",
            "in": "query",
            "description": "The asAt datetime at which to retrieve relationships. Defaults to return the latest LUSID AsAt time if not specified.",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "x-nullable": true
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Expression to filter relationships. Users should provide null or empty string for this field until further notice.",
            "schema": {
              "maxLength": 16384,
              "minLength": 0,
              "pattern": "^[\\s\\S]*$",
              "type": "string"
            }
          },
          {
            "name": "identifierTypes",
            "in": "query",
            "description": "Identifier types (as property keys) used for referencing Persons or Legal Entities.\r\n            These can be specified from the 'Person' or 'LegalEntity' domains and have the format {domain}/{scope}/{code}, for example\r\n            'Person/CompanyDetails/Role'. An Empty array may be used to return all related Entities.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "description": "The key that uniquely identifies the property. It has the format {domain}/{scope}/{code}."
              }
            },
            "x-nullable": true
          },
          {
            "name": "scope",
            "in": "query",
            "description": "The entity scope in which the instrument lies. When not supplied the scope is 'default'.",
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "default": "default"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The relationships for the specified instrument.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfRelationship"
                },
                "example": {
                  "values": [
                    {
                      "relationshipDefinitionId": {
                        "scope": "securityReferenceData",
                        "code": "issuer"
                      },
                      "relatedEntity": {
                        "entityType": "LegalEntity",
                        "entityId": {
                          "identifierScope": "public",
                          "identifierType": "LEI",
                          "identifierValue": "HWUPKR0MPOU8FGXBT394"
                        },
                        "displayName": "APPLE INC",
                        "properties": {},
                        "scope": "uat",
                        "identifiers": [
                          {
                            "identifierType": "LEI",
                            "identifierValue": "HWUPKR0MPOU8FGXBT394"
                          }
                        ]
                      },
                      "traversalDirection": "In",
                      "traversalDescription": "issued by",
                      "effectiveFrom": "2019-01-01T12:00:00.0000000+00:00",
                      "effectiveUntil": "2022-01-01T12:00:00.0000000+00:00"
                    }
                  ],
                  "links": []
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfRelationship"
                },
                "example": {
                  "values": [
                    {
                      "relationshipDefinitionId": {
                        "scope": "securityReferenceData",
                        "code": "issuer"
                      },
                      "relatedEntity": {
                        "entityType": "LegalEntity",
                        "entityId": {
                          "identifierScope": "public",
                          "identifierType": "LEI",
                          "identifierValue": "HWUPKR0MPOU8FGXBT394"
                        },
                        "displayName": "APPLE INC",
                        "properties": {},
                        "scope": "uat",
                        "identifiers": [
                          {
                            "identifierType": "LEI",
                            "identifierValue": "HWUPKR0MPOU8FGXBT394"
                          }
                        ]
                      },
                      "traversalDirection": "In",
                      "traversalDescription": "issued by",
                      "effectiveFrom": "2019-01-01T12:00:00.0000000+00:00",
                      "effectiveUntil": "2022-01-01T12:00:00.0000000+00:00"
                    }
                  ],
                  "links": []
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfRelationship"
                },
                "example": {
                  "values": [
                    {
                      "relationshipDefinitionId": {
                        "scope": "securityReferenceData",
                        "code": "issuer"
                      },
                      "relatedEntity": {
                        "entityType": "LegalEntity",
                        "entityId": {
                          "identifierScope": "public",
                          "identifierType": "LEI",
                          "identifierValue": "HWUPKR0MPOU8FGXBT394"
                        },
                        "displayName": "APPLE INC",
                        "properties": {},
                        "scope": "uat",
                        "identifiers": [
                          {
                            "identifierType": "LEI",
                            "identifierValue": "HWUPKR0MPOU8FGXBT394"
                          }
                        ]
                      },
                      "traversalDirection": "In",
                      "traversalDescription": "issued by",
                      "effectiveFrom": "2019-01-01T12:00:00.0000000+00:00",
                      "effectiveUntil": "2022-01-01T12:00:00.0000000+00:00"
                    }
                  ],
                  "links": []
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      }
    },
    "/api/instruments/{identifier}/models": {
      "get": {
        "tags": [
          "Instruments"
        ],
        "summary": "GetExistingInstrumentModels: Retrieve supported pricing models for an existing instrument identified by LUID.",
        "description": "Get the supported pricing models of a single instrument.",
        "operationId": "GetExistingInstrumentModels",
        "parameters": [
          {
            "name": "identifier",
            "in": "path",
            "description": "A lusid instrument id identifying the instrument.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string"
            }
          },
          {
            "name": "effectiveAt",
            "in": "query",
            "description": "The effective datetime or cut label at which to retrieve the instrument.\r\n            Defaults to the current LUSID system datetime if not specified.",
            "schema": {
              "type": "string",
              "format": "dateorcutlabel"
            }
          },
          {
            "name": "asAt",
            "in": "query",
            "description": "The asAt datetime at which to retrieve the instrument. Defaults to\r\n            returning the latest version if not specified.",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "x-nullable": true
          },
          {
            "name": "instrumentScope",
            "in": "query",
            "description": "The scope in which the instrument lies. When not supplied the scope is 'default'.",
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "default": "default"
            }
          },
          {
            "name": "recipeScope",
            "in": "query",
            "description": "The scope in which the recipe lies. When not supplied the scope is 'default'.",
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "default": "default"
            }
          },
          {
            "name": "recipeCode",
            "in": "query",
            "description": "A unique identifier for an entity, used to obtain configuration recipe details. Default configuration recipe is used if not provided.",
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Models which can be used to value a given instrument.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/InstrumentModels"
                },
                "example": {
                  "instrumentId": "LUID_00003D4X",
                  "supportedModels": [
                    "SimpleStatic",
                    "Discounting",
                    "VendorDefault",
                    "ConstantTimeValueOfMoney"
                  ]
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InstrumentModels"
                },
                "example": {
                  "instrumentId": "LUID_00003D4X",
                  "supportedModels": [
                    "SimpleStatic",
                    "Discounting",
                    "VendorDefault",
                    "ConstantTimeValueOfMoney"
                  ]
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InstrumentModels"
                },
                "example": {
                  "instrumentId": "LUID_00003D4X",
                  "supportedModels": [
                    "SimpleStatic",
                    "Discounting",
                    "VendorDefault",
                    "ConstantTimeValueOfMoney"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Stable"
      }
    },
    "/api/legalentities": {
      "post": {
        "tags": [
          "Legal Entities"
        ],
        "summary": "[EARLY ACCESS] UpsertLegalEntity: Upsert Legal Entity",
        "description": "Create or update a legal entity",
        "operationId": "UpsertLegalEntity",
        "requestBody": {
          "description": "Request to create or update a legal entity.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/UpsertLegalEntityRequest"
              },
              "example": {
                "identifiers": {
                  "LegalEntity/ExternalIdentifier/LEI": {
                    "key": "LegalEntity/ExternalIdentifier/LEI",
                    "value": {
                      "labelValue": "LEI_12345678"
                    }
                  },
                  "LegalEntity/InternalIdentifier/InternalLeiId": {
                    "key": "LegalEntity/InternalIdentifier/InternalLeiId",
                    "value": {
                      "labelValue": "Internal_XHSP2038"
                    }
                  }
                },
                "properties": {
                  "LegalEntity/Details/Name": {
                    "key": "LegalEntity/Details/Name",
                    "value": {
                      "labelValue": "Legal Entity Inc."
                    }
                  },
                  "LegalEntity/Details/Country": {
                    "key": "LegalEntity/Details/Country",
                    "value": {
                      "labelValue": "United Kingdom"
                    },
                    "effectiveFrom": "2016-01-01T00:00:00.0000000+00:00"
                  },
                  "LegalEntity/Status/Active": {
                    "key": "LegalEntity/Status/Active",
                    "value": {
                      "labelValue": "Active"
                    },
                    "effectiveFrom": "2016-07-01T00:00:00.0000000+00:00"
                  }
                },
                "displayName": "LegalEntity1DisplayName",
                "description": "LegalEntity1Description",
                "counterpartyRiskInformation": {
                  "countryOfRisk": "UnitedKingdom",
                  "creditRatings": [
                    {
                      "ratingSource": "StandardAndPoors",
                      "rating": "AA+"
                    }
                  ],
                  "industryClassifiers": [
                    {
                      "classificationSystemName": "GICS2018",
                      "classificationCode": "10101010"
                    }
                  ]
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpsertLegalEntityRequest"
              },
              "example": {
                "identifiers": {
                  "LegalEntity/ExternalIdentifier/LEI": {
                    "key": "LegalEntity/ExternalIdentifier/LEI",
                    "value": {
                      "labelValue": "LEI_12345678"
                    }
                  },
                  "LegalEntity/InternalIdentifier/InternalLeiId": {
                    "key": "LegalEntity/InternalIdentifier/InternalLeiId",
                    "value": {
                      "labelValue": "Internal_XHSP2038"
                    }
                  }
                },
                "properties": {
                  "LegalEntity/Details/Name": {
                    "key": "LegalEntity/Details/Name",
                    "value": {
                      "labelValue": "Legal Entity Inc."
                    }
                  },
                  "LegalEntity/Details/Country": {
                    "key": "LegalEntity/Details/Country",
                    "value": {
                      "labelValue": "United Kingdom"
                    },
                    "effectiveFrom": "2016-01-01T00:00:00.0000000+00:00"
                  },
                  "LegalEntity/Status/Active": {
                    "key": "LegalEntity/Status/Active",
                    "value": {
                      "labelValue": "Active"
                    },
                    "effectiveFrom": "2016-07-01T00:00:00.0000000+00:00"
                  }
                },
                "displayName": "LegalEntity1DisplayName",
                "description": "LegalEntity1Description",
                "counterpartyRiskInformation": {
                  "countryOfRisk": "UnitedKingdom",
                  "creditRatings": [
                    {
                      "ratingSource": "StandardAndPoors",
                      "rating": "AA+"
                    }
                  ],
                  "industryClassifiers": [
                    {
                      "classificationSystemName": "GICS2018",
                      "classificationCode": "10101010"
                    }
                  ]
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/UpsertLegalEntityRequest"
              },
              "example": {
                "identifiers": {
                  "LegalEntity/ExternalIdentifier/LEI": {
                    "key": "LegalEntity/ExternalIdentifier/LEI",
                    "value": {
                      "labelValue": "LEI_12345678"
                    }
                  },
                  "LegalEntity/InternalIdentifier/InternalLeiId": {
                    "key": "LegalEntity/InternalIdentifier/InternalLeiId",
                    "value": {
                      "labelValue": "Internal_XHSP2038"
                    }
                  }
                },
                "properties": {
                  "LegalEntity/Details/Name": {
                    "key": "LegalEntity/Details/Name",
                    "value": {
                      "labelValue": "Legal Entity Inc."
                    }
                  },
                  "LegalEntity/Details/Country": {
                    "key": "LegalEntity/Details/Country",
                    "value": {
                      "labelValue": "United Kingdom"
                    },
                    "effectiveFrom": "2016-01-01T00:00:00.0000000+00:00"
                  },
                  "LegalEntity/Status/Active": {
                    "key": "LegalEntity/Status/Active",
                    "value": {
                      "labelValue": "Active"
                    },
                    "effectiveFrom": "2016-07-01T00:00:00.0000000+00:00"
                  }
                },
                "displayName": "LegalEntity1DisplayName",
                "description": "LegalEntity1Description",
                "counterpartyRiskInformation": {
                  "countryOfRisk": "UnitedKingdom",
                  "creditRatings": [
                    {
                      "ratingSource": "StandardAndPoors",
                      "rating": "AA+"
                    }
                  ],
                  "industryClassifiers": [
                    {
                      "classificationSystemName": "GICS2018",
                      "classificationCode": "10101010"
                    }
                  ]
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/UpsertLegalEntityRequest"
              },
              "example": {
                "identifiers": {
                  "LegalEntity/ExternalIdentifier/LEI": {
                    "key": "LegalEntity/ExternalIdentifier/LEI",
                    "value": {
                      "labelValue": "LEI_12345678"
                    }
                  },
                  "LegalEntity/InternalIdentifier/InternalLeiId": {
                    "key": "LegalEntity/InternalIdentifier/InternalLeiId",
                    "value": {
                      "labelValue": "Internal_XHSP2038"
                    }
                  }
                },
                "properties": {
                  "LegalEntity/Details/Name": {
                    "key": "LegalEntity/Details/Name",
                    "value": {
                      "labelValue": "Legal Entity Inc."
                    }
                  },
                  "LegalEntity/Details/Country": {
                    "key": "LegalEntity/Details/Country",
                    "value": {
                      "labelValue": "United Kingdom"
                    },
                    "effectiveFrom": "2016-01-01T00:00:00.0000000+00:00"
                  },
                  "LegalEntity/Status/Active": {
                    "key": "LegalEntity/Status/Active",
                    "value": {
                      "labelValue": "Active"
                    },
                    "effectiveFrom": "2016-07-01T00:00:00.0000000+00:00"
                  }
                },
                "displayName": "LegalEntity1DisplayName",
                "description": "LegalEntity1Description",
                "counterpartyRiskInformation": {
                  "countryOfRisk": "UnitedKingdom",
                  "creditRatings": [
                    {
                      "ratingSource": "StandardAndPoors",
                      "rating": "AA+"
                    }
                  ],
                  "industryClassifiers": [
                    {
                      "classificationSystemName": "GICS2018",
                      "classificationCode": "10101010"
                    }
                  ]
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "The newly created or updated legal entity",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LegalEntity"
                },
                "example": {
                  "displayName": "LegalEntity1DisplayName",
                  "description": "LegalEntity1Description",
                  "href": "https://example.com",
                  "lusidLegalEntityId": "LUID_00003D4V",
                  "identifiers": {
                    "LegalEntity/ExternalIdentifier/LEI": {
                      "key": "LegalEntity/ExternalIdentifier/LEI",
                      "value": {
                        "labelValue": "LEI_12345678"
                      }
                    },
                    "LegalEntity/InternalIdentifier/InternalLeiId": {
                      "key": "LegalEntity/InternalIdentifier/InternalLeiId",
                      "value": {
                        "labelValue": "Internal_XHSP2038"
                      }
                    }
                  },
                  "properties": {
                    "LegalEntity/Details/Name": {
                      "key": "LegalEntity/Details/Name",
                      "value": {
                        "labelValue": "Legal Entity Inc."
                      }
                    },
                    "LegalEntity/Details/Country": {
                      "key": "LegalEntity/Details/Country",
                      "value": {
                        "labelValue": "United Kingdom"
                      },
                      "effectiveFrom": "2016-01-01T00:00:00.0000000+00:00"
                    },
                    "LegalEntity/Status/Active": {
                      "key": "LegalEntity/Status/Active",
                      "value": {
                        "labelValue": "Active"
                      },
                      "effectiveFrom": "2016-07-01T00:00:00.0000000+00:00"
                    }
                  },
                  "relationships": [],
                  "counterpartyRiskInformation": {
                    "countryOfRisk": "UnitedKingdom",
                    "creditRatings": [
                      {
                        "ratingSource": "StandardAndPoors",
                        "rating": "AA+"
                      }
                    ],
                    "industryClassifiers": [
                      {
                        "classificationSystemName": "GICS2018",
                        "classificationCode": "10101010"
                      }
                    ]
                  },
                  "version": {
                    "effectiveFrom": "2019-01-01T12:00:00.0000000+00:00",
                    "asAtDate": "2019-01-01T12:00:00.0100000+00:00",
                    "asAtCreated": "2019-01-01T12:00:00.0000000+00:00",
                    "userIdCreated": "UserId1",
                    "asAtModified": "2019-01-01T12:00:00.0100000+00:00",
                    "userIdModified": "UserId2",
                    "asAtVersionNumber": 3
                  }
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LegalEntity"
                },
                "example": {
                  "displayName": "LegalEntity1DisplayName",
                  "description": "LegalEntity1Description",
                  "href": "https://example.com",
                  "lusidLegalEntityId": "LUID_00003D4V",
                  "identifiers": {
                    "LegalEntity/ExternalIdentifier/LEI": {
                      "key": "LegalEntity/ExternalIdentifier/LEI",
                      "value": {
                        "labelValue": "LEI_12345678"
                      }
                    },
                    "LegalEntity/InternalIdentifier/InternalLeiId": {
                      "key": "LegalEntity/InternalIdentifier/InternalLeiId",
                      "value": {
                        "labelValue": "Internal_XHSP2038"
                      }
                    }
                  },
                  "properties": {
                    "LegalEntity/Details/Name": {
                      "key": "LegalEntity/Details/Name",
                      "value": {
                        "labelValue": "Legal Entity Inc."
                      }
                    },
                    "LegalEntity/Details/Country": {
                      "key": "LegalEntity/Details/Country",
                      "value": {
                        "labelValue": "United Kingdom"
                      },
                      "effectiveFrom": "2016-01-01T00:00:00.0000000+00:00"
                    },
                    "LegalEntity/Status/Active": {
                      "key": "LegalEntity/Status/Active",
                      "value": {
                        "labelValue": "Active"
                      },
                      "effectiveFrom": "2016-07-01T00:00:00.0000000+00:00"
                    }
                  },
                  "relationships": [],
                  "counterpartyRiskInformation": {
                    "countryOfRisk": "UnitedKingdom",
                    "creditRatings": [
                      {
                        "ratingSource": "StandardAndPoors",
                        "rating": "AA+"
                      }
                    ],
                    "industryClassifiers": [
                      {
                        "classificationSystemName": "GICS2018",
                        "classificationCode": "10101010"
                      }
                    ]
                  },
                  "version": {
                    "effectiveFrom": "2019-01-01T12:00:00.0000000+00:00",
                    "asAtDate": "2019-01-01T12:00:00.0100000+00:00",
                    "asAtCreated": "2019-01-01T12:00:00.0000000+00:00",
                    "userIdCreated": "UserId1",
                    "asAtModified": "2019-01-01T12:00:00.0100000+00:00",
                    "userIdModified": "UserId2",
                    "asAtVersionNumber": 3
                  }
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LegalEntity"
                },
                "example": {
                  "displayName": "LegalEntity1DisplayName",
                  "description": "LegalEntity1Description",
                  "href": "https://example.com",
                  "lusidLegalEntityId": "LUID_00003D4V",
                  "identifiers": {
                    "LegalEntity/ExternalIdentifier/LEI": {
                      "key": "LegalEntity/ExternalIdentifier/LEI",
                      "value": {
                        "labelValue": "LEI_12345678"
                      }
                    },
                    "LegalEntity/InternalIdentifier/InternalLeiId": {
                      "key": "LegalEntity/InternalIdentifier/InternalLeiId",
                      "value": {
                        "labelValue": "Internal_XHSP2038"
                      }
                    }
                  },
                  "properties": {
                    "LegalEntity/Details/Name": {
                      "key": "LegalEntity/Details/Name",
                      "value": {
                        "labelValue": "Legal Entity Inc."
                      }
                    },
                    "LegalEntity/Details/Country": {
                      "key": "LegalEntity/Details/Country",
                      "value": {
                        "labelValue": "United Kingdom"
                      },
                      "effectiveFrom": "2016-01-01T00:00:00.0000000+00:00"
                    },
                    "LegalEntity/Status/Active": {
                      "key": "LegalEntity/Status/Active",
                      "value": {
                        "labelValue": "Active"
                      },
                      "effectiveFrom": "2016-07-01T00:00:00.0000000+00:00"
                    }
                  },
                  "relationships": [],
                  "counterpartyRiskInformation": {
                    "countryOfRisk": "UnitedKingdom",
                    "creditRatings": [
                      {
                        "ratingSource": "StandardAndPoors",
                        "rating": "AA+"
                      }
                    ],
                    "industryClassifiers": [
                      {
                        "classificationSystemName": "GICS2018",
                        "classificationCode": "10101010"
                      }
                    ]
                  },
                  "version": {
                    "effectiveFrom": "2019-01-01T12:00:00.0000000+00:00",
                    "asAtDate": "2019-01-01T12:00:00.0100000+00:00",
                    "asAtCreated": "2019-01-01T12:00:00.0000000+00:00",
                    "userIdCreated": "UserId1",
                    "asAtModified": "2019-01-01T12:00:00.0100000+00:00",
                    "userIdModified": "UserId2",
                    "asAtVersionNumber": 3
                  }
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      },
      "get": {
        "tags": [
          "Legal Entities"
        ],
        "summary": "[EARLY ACCESS] ListAllLegalEntities: List Legal Entities",
        "description": "List all legal entities which the user is entitled to see.",
        "operationId": "ListAllLegalEntities",
        "parameters": [
          {
            "name": "effectiveAt",
            "in": "query",
            "description": "The effective datetime or cut label at which to list the legal entities. Defaults to the current LUSID\r\n            system datetime if not specified.",
            "schema": {
              "type": "string",
              "format": "dateorcutlabel"
            }
          },
          {
            "name": "asAt",
            "in": "query",
            "description": "The asAt datetime at which to list the legal entities. Defaults to return the latest version\r\n            of each legal entities if not specified.",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "x-nullable": true
          },
          {
            "name": "page",
            "in": "query",
            "description": "The pagination token to use to continue listing legal entities from a previous call to list legal entities. This\r\nvalue is returned from the previous call. If a pagination token is provided the filter, effectiveAt\r\nand asAt fields must not have changed since the original request.",
            "schema": {
              "maxLength": 500,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\+/]*={0,3}$",
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "When paginating, limit the number of returned results to this many. Defaults to 5000 if not specified.",
            "schema": {
              "maximum": 5000,
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            },
            "x-nullable": true
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Expression to filter the result set. \r\n            Read more about filtering results from LUSID here https://support.lusid.com/filtering-results-from-lusid.",
            "schema": {
              "maxLength": 16384,
              "minLength": 0,
              "pattern": "^[\\s\\S]*$",
              "type": "string"
            }
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "A list of field names or properties to sort by, each suffixed by \" ASC\" or \" DESC\"",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "x-nullable": true
          },
          {
            "name": "propertyKeys",
            "in": "query",
            "description": "A list of property keys or identifier types (as property keys) from the \"LegalEntity\" domain\r\n            to include for each legal entity, or from any domain that supports relationships to decorate onto related entities.\r\n            These take the format {domain}/{scope}/{code} e.g. \"LegalEntity/ContactDetails/Address\".",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "description": "The key that uniquely identifies the property. It has the format {domain}/{scope}/{code}."
              }
            },
            "x-nullable": true
          },
          {
            "name": "relationshipDefinitionIds",
            "in": "query",
            "description": "A list of relationship definitions that are used to decorate related entities\r\n            onto each portfolio in the response. These must take the form {relationshipDefinitionScope}/{relationshipDefinitionCode}.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "description": "Identifiers of an entity"
              }
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "description": "All existing Legal Entities",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfLegalEntity"
                },
                "example": {
                  "values": [
                    {
                      "displayName": "LegalEntity1DisplayName",
                      "description": "LegalEntity1Description",
                      "href": "https://example.com",
                      "lusidLegalEntityId": "LUID_00003D4V",
                      "identifiers": {
                        "LegalEntity/ExternalIdentifier/LEI": {
                          "key": "LegalEntity/ExternalIdentifier/LEI",
                          "value": {
                            "labelValue": "LEI_12345678"
                          }
                        },
                        "LegalEntity/InternalIdentifier/InternalLeiId": {
                          "key": "LegalEntity/InternalIdentifier/InternalLeiId",
                          "value": {
                            "labelValue": "Internal_XHSP2038"
                          }
                        }
                      },
                      "properties": {
                        "LegalEntity/Details/Name": {
                          "key": "LegalEntity/Details/Name",
                          "value": {
                            "labelValue": "Legal Entity Inc."
                          }
                        },
                        "LegalEntity/Details/Country": {
                          "key": "LegalEntity/Details/Country",
                          "value": {
                            "labelValue": "United Kingdom"
                          },
                          "effectiveFrom": "2016-01-01T00:00:00.0000000+00:00"
                        },
                        "LegalEntity/Status/Active": {
                          "key": "LegalEntity/Status/Active",
                          "value": {
                            "labelValue": "Active"
                          },
                          "effectiveFrom": "2016-07-01T00:00:00.0000000+00:00"
                        }
                      },
                      "relationships": [],
                      "counterpartyRiskInformation": {
                        "countryOfRisk": "UnitedKingdom",
                        "creditRatings": [
                          {
                            "ratingSource": "StandardAndPoors",
                            "rating": "AA+"
                          }
                        ],
                        "industryClassifiers": [
                          {
                            "classificationSystemName": "GICS2018",
                            "classificationCode": "10101010"
                          }
                        ]
                      },
                      "version": {
                        "effectiveFrom": "2019-01-01T12:00:00.0000000+00:00",
                        "asAtDate": "2019-01-01T12:00:00.0100000+00:00",
                        "asAtCreated": "2019-01-01T12:00:00.0000000+00:00",
                        "userIdCreated": "UserId1",
                        "asAtModified": "2019-01-01T12:00:00.0100000+00:00",
                        "userIdModified": "UserId2",
                        "asAtVersionNumber": 3
                      }
                    },
                    {
                      "displayName": "LegalEntity2DisplayName",
                      "description": "LegalEntity2Description",
                      "href": "https://example.com",
                      "lusidLegalEntityId": "LUID_00003D55",
                      "identifiers": {
                        "LegalEntity/ExternalIdentifier/LEI": {
                          "key": "LegalEntity/ExternalIdentifier/LEI",
                          "value": {
                            "labelValue": "LEI_22345678"
                          }
                        },
                        "LegalEntity/InternalIdentifier/InternalLeiId": {
                          "key": "LegalEntity/InternalIdentifier/InternalLeiId",
                          "value": {
                            "labelValue": "Internal_XHSP2038"
                          }
                        }
                      },
                      "properties": {
                        "LegalEntity/Details/Name": {
                          "key": "LegalEntity/Details/Name",
                          "value": {
                            "labelValue": "Legal Entity 2 Inc."
                          }
                        },
                        "LegalEntity/Details/Country": {
                          "key": "LegalEntity/Details/Country",
                          "value": {
                            "labelValue": "Germany"
                          },
                          "effectiveFrom": "2016-01-01T00:00:00.0000000+00:00"
                        },
                        "LegalEntity/Status/Active": {
                          "key": "LegalEntity/Status/Active",
                          "value": {
                            "labelValue": "Active"
                          },
                          "effectiveFrom": "2016-04-01T00:00:00.0000000+00:00"
                        }
                      },
                      "relationships": [],
                      "version": {
                        "effectiveFrom": "2019-01-01T12:00:00.0000000+00:00",
                        "asAtDate": "2019-01-01T12:00:00.0100000+00:00",
                        "asAtCreated": "2019-01-01T12:00:00.0000000+00:00",
                        "userIdCreated": "UserId1",
                        "asAtModified": "2019-01-01T12:00:00.0100000+00:00",
                        "userIdModified": "UserId2",
                        "asAtVersionNumber": 3
                      }
                    }
                  ],
                  "href": "http://example.com",
                  "links": []
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfLegalEntity"
                },
                "example": {
                  "values": [
                    {
                      "displayName": "LegalEntity1DisplayName",
                      "description": "LegalEntity1Description",
                      "href": "https://example.com",
                      "lusidLegalEntityId": "LUID_00003D4V",
                      "identifiers": {
                        "LegalEntity/ExternalIdentifier/LEI": {
                          "key": "LegalEntity/ExternalIdentifier/LEI",
                          "value": {
                            "labelValue": "LEI_12345678"
                          }
                        },
                        "LegalEntity/InternalIdentifier/InternalLeiId": {
                          "key": "LegalEntity/InternalIdentifier/InternalLeiId",
                          "value": {
                            "labelValue": "Internal_XHSP2038"
                          }
                        }
                      },
                      "properties": {
                        "LegalEntity/Details/Name": {
                          "key": "LegalEntity/Details/Name",
                          "value": {
                            "labelValue": "Legal Entity Inc."
                          }
                        },
                        "LegalEntity/Details/Country": {
                          "key": "LegalEntity/Details/Country",
                          "value": {
                            "labelValue": "United Kingdom"
                          },
                          "effectiveFrom": "2016-01-01T00:00:00.0000000+00:00"
                        },
                        "LegalEntity/Status/Active": {
                          "key": "LegalEntity/Status/Active",
                          "value": {
                            "labelValue": "Active"
                          },
                          "effectiveFrom": "2016-07-01T00:00:00.0000000+00:00"
                        }
                      },
                      "relationships": [],
                      "counterpartyRiskInformation": {
                        "countryOfRisk": "UnitedKingdom",
                        "creditRatings": [
                          {
                            "ratingSource": "StandardAndPoors",
                            "rating": "AA+"
                          }
                        ],
                        "industryClassifiers": [
                          {
                            "classificationSystemName": "GICS2018",
                            "classificationCode": "10101010"
                          }
                        ]
                      },
                      "version": {
                        "effectiveFrom": "2019-01-01T12:00:00.0000000+00:00",
                        "asAtDate": "2019-01-01T12:00:00.0100000+00:00",
                        "asAtCreated": "2019-01-01T12:00:00.0000000+00:00",
                        "userIdCreated": "UserId1",
                        "asAtModified": "2019-01-01T12:00:00.0100000+00:00",
                        "userIdModified": "UserId2",
                        "asAtVersionNumber": 3
                      }
                    },
                    {
                      "displayName": "LegalEntity2DisplayName",
                      "description": "LegalEntity2Description",
                      "href": "https://example.com",
                      "lusidLegalEntityId": "LUID_00003D55",
                      "identifiers": {
                        "LegalEntity/ExternalIdentifier/LEI": {
                          "key": "LegalEntity/ExternalIdentifier/LEI",
                          "value": {
                            "labelValue": "LEI_22345678"
                          }
                        },
                        "LegalEntity/InternalIdentifier/InternalLeiId": {
                          "key": "LegalEntity/InternalIdentifier/InternalLeiId",
                          "value": {
                            "labelValue": "Internal_XHSP2038"
                          }
                        }
                      },
                      "properties": {
                        "LegalEntity/Details/Name": {
                          "key": "LegalEntity/Details/Name",
                          "value": {
                            "labelValue": "Legal Entity 2 Inc."
                          }
                        },
                        "LegalEntity/Details/Country": {
                          "key": "LegalEntity/Details/Country",
                          "value": {
                            "labelValue": "Germany"
                          },
                          "effectiveFrom": "2016-01-01T00:00:00.0000000+00:00"
                        },
                        "LegalEntity/Status/Active": {
                          "key": "LegalEntity/Status/Active",
                          "value": {
                            "labelValue": "Active"
                          },
                          "effectiveFrom": "2016-04-01T00:00:00.0000000+00:00"
                        }
                      },
                      "relationships": [],
                      "version": {
                        "effectiveFrom": "2019-01-01T12:00:00.0000000+00:00",
                        "asAtDate": "2019-01-01T12:00:00.0100000+00:00",
                        "asAtCreated": "2019-01-01T12:00:00.0000000+00:00",
                        "userIdCreated": "UserId1",
                        "asAtModified": "2019-01-01T12:00:00.0100000+00:00",
                        "userIdModified": "UserId2",
                        "asAtVersionNumber": 3
                      }
                    }
                  ],
                  "href": "http://example.com",
                  "links": []
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfLegalEntity"
                },
                "example": {
                  "values": [
                    {
                      "displayName": "LegalEntity1DisplayName",
                      "description": "LegalEntity1Description",
                      "href": "https://example.com",
                      "lusidLegalEntityId": "LUID_00003D4V",
                      "identifiers": {
                        "LegalEntity/ExternalIdentifier/LEI": {
                          "key": "LegalEntity/ExternalIdentifier/LEI",
                          "value": {
                            "labelValue": "LEI_12345678"
                          }
                        },
                        "LegalEntity/InternalIdentifier/InternalLeiId": {
                          "key": "LegalEntity/InternalIdentifier/InternalLeiId",
                          "value": {
                            "labelValue": "Internal_XHSP2038"
                          }
                        }
                      },
                      "properties": {
                        "LegalEntity/Details/Name": {
                          "key": "LegalEntity/Details/Name",
                          "value": {
                            "labelValue": "Legal Entity Inc."
                          }
                        },
                        "LegalEntity/Details/Country": {
                          "key": "LegalEntity/Details/Country",
                          "value": {
                            "labelValue": "United Kingdom"
                          },
                          "effectiveFrom": "2016-01-01T00:00:00.0000000+00:00"
                        },
                        "LegalEntity/Status/Active": {
                          "key": "LegalEntity/Status/Active",
                          "value": {
                            "labelValue": "Active"
                          },
                          "effectiveFrom": "2016-07-01T00:00:00.0000000+00:00"
                        }
                      },
                      "relationships": [],
                      "counterpartyRiskInformation": {
                        "countryOfRisk": "UnitedKingdom",
                        "creditRatings": [
                          {
                            "ratingSource": "StandardAndPoors",
                            "rating": "AA+"
                          }
                        ],
                        "industryClassifiers": [
                          {
                            "classificationSystemName": "GICS2018",
                            "classificationCode": "10101010"
                          }
                        ]
                      },
                      "version": {
                        "effectiveFrom": "2019-01-01T12:00:00.0000000+00:00",
                        "asAtDate": "2019-01-01T12:00:00.0100000+00:00",
                        "asAtCreated": "2019-01-01T12:00:00.0000000+00:00",
                        "userIdCreated": "UserId1",
                        "asAtModified": "2019-01-01T12:00:00.0100000+00:00",
                        "userIdModified": "UserId2",
                        "asAtVersionNumber": 3
                      }
                    },
                    {
                      "displayName": "LegalEntity2DisplayName",
                      "description": "LegalEntity2Description",
                      "href": "https://example.com",
                      "lusidLegalEntityId": "LUID_00003D55",
                      "identifiers": {
                        "LegalEntity/ExternalIdentifier/LEI": {
                          "key": "LegalEntity/ExternalIdentifier/LEI",
                          "value": {
                            "labelValue": "LEI_22345678"
                          }
                        },
                        "LegalEntity/InternalIdentifier/InternalLeiId": {
                          "key": "LegalEntity/InternalIdentifier/InternalLeiId",
                          "value": {
                            "labelValue": "Internal_XHSP2038"
                          }
                        }
                      },
                      "properties": {
                        "LegalEntity/Details/Name": {
                          "key": "LegalEntity/Details/Name",
                          "value": {
                            "labelValue": "Legal Entity 2 Inc."
                          }
                        },
                        "LegalEntity/Details/Country": {
                          "key": "LegalEntity/Details/Country",
                          "value": {
                            "labelValue": "Germany"
                          },
                          "effectiveFrom": "2016-01-01T00:00:00.0000000+00:00"
                        },
                        "LegalEntity/Status/Active": {
                          "key": "LegalEntity/Status/Active",
                          "value": {
                            "labelValue": "Active"
                          },
                          "effectiveFrom": "2016-04-01T00:00:00.0000000+00:00"
                        }
                      },
                      "relationships": [],
                      "version": {
                        "effectiveFrom": "2019-01-01T12:00:00.0000000+00:00",
                        "asAtDate": "2019-01-01T12:00:00.0100000+00:00",
                        "asAtCreated": "2019-01-01T12:00:00.0000000+00:00",
                        "userIdCreated": "UserId1",
                        "asAtModified": "2019-01-01T12:00:00.0100000+00:00",
                        "userIdModified": "UserId2",
                        "asAtVersionNumber": 3
                      }
                    }
                  ],
                  "href": "http://example.com",
                  "links": []
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      }
    },
    "/api/legalentities/$batchUpsert": {
      "post": {
        "tags": [
          "Legal Entities"
        ],
        "summary": "[EARLY ACCESS] UpsertLegalEntities: Pluralised upsert of Legal Entities",
        "description": "Creates or updates a collection of Legal Entities",
        "operationId": "UpsertLegalEntities",
        "parameters": [
          {
            "name": "successMode",
            "in": "query",
            "description": "Whether the batch request should fail Atomically or in a Partial fashion - Allowed Values: Atomic, Partial",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "A collection of requests to create or update Legal Entities.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/components/schemas/UpsertLegalEntityRequest"
                }
              },
              "example": {
                "firstExampleRequest": {
                  "identifiers": {
                    "LegalEntity/ExternalIdentifier/LEI": {
                      "key": "LegalEntity/ExternalIdentifier/LEI",
                      "value": {
                        "labelValue": "LEI_12345678"
                      }
                    },
                    "LegalEntity/InternalIdentifier/InternalLeiId": {
                      "key": "LegalEntity/InternalIdentifier/InternalLeiId",
                      "value": {
                        "labelValue": "Internal_XHSP2038"
                      }
                    }
                  },
                  "properties": {
                    "LegalEntity/Details/Name": {
                      "key": "LegalEntity/Details/Name",
                      "value": {
                        "labelValue": "Legal Entity Inc."
                      }
                    },
                    "LegalEntity/Details/Country": {
                      "key": "LegalEntity/Details/Country",
                      "value": {
                        "labelValue": "United Kingdom"
                      },
                      "effectiveFrom": "2016-01-01T00:00:00.0000000+00:00"
                    },
                    "LegalEntity/Status/Active": {
                      "key": "LegalEntity/Status/Active",
                      "value": {
                        "labelValue": "Active"
                      },
                      "effectiveFrom": "2016-07-01T00:00:00.0000000+00:00"
                    }
                  },
                  "displayName": "LegalEntity1DisplayName",
                  "description": "LegalEntity1Description",
                  "counterpartyRiskInformation": {
                    "countryOfRisk": "UnitedKingdom",
                    "creditRatings": [
                      {
                        "ratingSource": "StandardAndPoors",
                        "rating": "AA+"
                      }
                    ],
                    "industryClassifiers": [
                      {
                        "classificationSystemName": "GICS2018",
                        "classificationCode": "10101010"
                      }
                    ]
                  }
                },
                "secondExampleRequest": {
                  "identifiers": {
                    "LegalEntity/ExternalIdentifier/LEI": {
                      "key": "LegalEntity/ExternalIdentifier/LEI",
                      "value": {
                        "labelValue": "LEI_22345678"
                      }
                    },
                    "LegalEntity/InternalIdentifier/InternalLeiId": {
                      "key": "LegalEntity/InternalIdentifier/InternalLeiId",
                      "value": {
                        "labelValue": "Internal_XHSP2038"
                      }
                    }
                  },
                  "properties": {
                    "LegalEntity/Details/Name": {
                      "key": "LegalEntity/Details/Name",
                      "value": {
                        "labelValue": "Legal Entity 2 Inc."
                      }
                    },
                    "LegalEntity/Details/Country": {
                      "key": "LegalEntity/Details/Country",
                      "value": {
                        "labelValue": "Germany"
                      },
                      "effectiveFrom": "2016-01-01T00:00:00.0000000+00:00"
                    },
                    "LegalEntity/Status/Active": {
                      "key": "LegalEntity/Status/Active",
                      "value": {
                        "labelValue": "Active"
                      },
                      "effectiveFrom": "2016-04-01T00:00:00.0000000+00:00"
                    }
                  },
                  "displayName": "LegalEntity2DisplayName",
                  "description": "LegalEntity2Description"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/components/schemas/UpsertLegalEntityRequest"
                }
              },
              "example": {
                "firstExampleRequest": {
                  "identifiers": {
                    "LegalEntity/ExternalIdentifier/LEI": {
                      "key": "LegalEntity/ExternalIdentifier/LEI",
                      "value": {
                        "labelValue": "LEI_12345678"
                      }
                    },
                    "LegalEntity/InternalIdentifier/InternalLeiId": {
                      "key": "LegalEntity/InternalIdentifier/InternalLeiId",
                      "value": {
                        "labelValue": "Internal_XHSP2038"
                      }
                    }
                  },
                  "properties": {
                    "LegalEntity/Details/Name": {
                      "key": "LegalEntity/Details/Name",
                      "value": {
                        "labelValue": "Legal Entity Inc."
                      }
                    },
                    "LegalEntity/Details/Country": {
                      "key": "LegalEntity/Details/Country",
                      "value": {
                        "labelValue": "United Kingdom"
                      },
                      "effectiveFrom": "2016-01-01T00:00:00.0000000+00:00"
                    },
                    "LegalEntity/Status/Active": {
                      "key": "LegalEntity/Status/Active",
                      "value": {
                        "labelValue": "Active"
                      },
                      "effectiveFrom": "2016-07-01T00:00:00.0000000+00:00"
                    }
                  },
                  "displayName": "LegalEntity1DisplayName",
                  "description": "LegalEntity1Description",
                  "counterpartyRiskInformation": {
                    "countryOfRisk": "UnitedKingdom",
                    "creditRatings": [
                      {
                        "ratingSource": "StandardAndPoors",
                        "rating": "AA+"
                      }
                    ],
                    "industryClassifiers": [
                      {
                        "classificationSystemName": "GICS2018",
                        "classificationCode": "10101010"
                      }
                    ]
                  }
                },
                "secondExampleRequest": {
                  "identifiers": {
                    "LegalEntity/ExternalIdentifier/LEI": {
                      "key": "LegalEntity/ExternalIdentifier/LEI",
                      "value": {
                        "labelValue": "LEI_22345678"
                      }
                    },
                    "LegalEntity/InternalIdentifier/InternalLeiId": {
                      "key": "LegalEntity/InternalIdentifier/InternalLeiId",
                      "value": {
                        "labelValue": "Internal_XHSP2038"
                      }
                    }
                  },
                  "properties": {
                    "LegalEntity/Details/Name": {
                      "key": "LegalEntity/Details/Name",
                      "value": {
                        "labelValue": "Legal Entity 2 Inc."
                      }
                    },
                    "LegalEntity/Details/Country": {
                      "key": "LegalEntity/Details/Country",
                      "value": {
                        "labelValue": "Germany"
                      },
                      "effectiveFrom": "2016-01-01T00:00:00.0000000+00:00"
                    },
                    "LegalEntity/Status/Active": {
                      "key": "LegalEntity/Status/Active",
                      "value": {
                        "labelValue": "Active"
                      },
                      "effectiveFrom": "2016-04-01T00:00:00.0000000+00:00"
                    }
                  },
                  "displayName": "LegalEntity2DisplayName",
                  "description": "LegalEntity2Description"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/components/schemas/UpsertLegalEntityRequest"
                }
              },
              "example": {
                "firstExampleRequest": {
                  "identifiers": {
                    "LegalEntity/ExternalIdentifier/LEI": {
                      "key": "LegalEntity/ExternalIdentifier/LEI",
                      "value": {
                        "labelValue": "LEI_12345678"
                      }
                    },
                    "LegalEntity/InternalIdentifier/InternalLeiId": {
                      "key": "LegalEntity/InternalIdentifier/InternalLeiId",
                      "value": {
                        "labelValue": "Internal_XHSP2038"
                      }
                    }
                  },
                  "properties": {
                    "LegalEntity/Details/Name": {
                      "key": "LegalEntity/Details/Name",
                      "value": {
                        "labelValue": "Legal Entity Inc."
                      }
                    },
                    "LegalEntity/Details/Country": {
                      "key": "LegalEntity/Details/Country",
                      "value": {
                        "labelValue": "United Kingdom"
                      },
                      "effectiveFrom": "2016-01-01T00:00:00.0000000+00:00"
                    },
                    "LegalEntity/Status/Active": {
                      "key": "LegalEntity/Status/Active",
                      "value": {
                        "labelValue": "Active"
                      },
                      "effectiveFrom": "2016-07-01T00:00:00.0000000+00:00"
                    }
                  },
                  "displayName": "LegalEntity1DisplayName",
                  "description": "LegalEntity1Description",
                  "counterpartyRiskInformation": {
                    "countryOfRisk": "UnitedKingdom",
                    "creditRatings": [
                      {
                        "ratingSource": "StandardAndPoors",
                        "rating": "AA+"
                      }
                    ],
                    "industryClassifiers": [
                      {
                        "classificationSystemName": "GICS2018",
                        "classificationCode": "10101010"
                      }
                    ]
                  }
                },
                "secondExampleRequest": {
                  "identifiers": {
                    "LegalEntity/ExternalIdentifier/LEI": {
                      "key": "LegalEntity/ExternalIdentifier/LEI",
                      "value": {
                        "labelValue": "LEI_22345678"
                      }
                    },
                    "LegalEntity/InternalIdentifier/InternalLeiId": {
                      "key": "LegalEntity/InternalIdentifier/InternalLeiId",
                      "value": {
                        "labelValue": "Internal_XHSP2038"
                      }
                    }
                  },
                  "properties": {
                    "LegalEntity/Details/Name": {
                      "key": "LegalEntity/Details/Name",
                      "value": {
                        "labelValue": "Legal Entity 2 Inc."
                      }
                    },
                    "LegalEntity/Details/Country": {
                      "key": "LegalEntity/Details/Country",
                      "value": {
                        "labelValue": "Germany"
                      },
                      "effectiveFrom": "2016-01-01T00:00:00.0000000+00:00"
                    },
                    "LegalEntity/Status/Active": {
                      "key": "LegalEntity/Status/Active",
                      "value": {
                        "labelValue": "Active"
                      },
                      "effectiveFrom": "2016-04-01T00:00:00.0000000+00:00"
                    }
                  },
                  "displayName": "LegalEntity2DisplayName",
                  "description": "LegalEntity2Description"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/components/schemas/UpsertLegalEntityRequest"
                }
              },
              "example": {
                "firstExampleRequest": {
                  "identifiers": {
                    "LegalEntity/ExternalIdentifier/LEI": {
                      "key": "LegalEntity/ExternalIdentifier/LEI",
                      "value": {
                        "labelValue": "LEI_12345678"
                      }
                    },
                    "LegalEntity/InternalIdentifier/InternalLeiId": {
                      "key": "LegalEntity/InternalIdentifier/InternalLeiId",
                      "value": {
                        "labelValue": "Internal_XHSP2038"
                      }
                    }
                  },
                  "properties": {
                    "LegalEntity/Details/Name": {
                      "key": "LegalEntity/Details/Name",
                      "value": {
                        "labelValue": "Legal Entity Inc."
                      }
                    },
                    "LegalEntity/Details/Country": {
                      "key": "LegalEntity/Details/Country",
                      "value": {
                        "labelValue": "United Kingdom"
                      },
                      "effectiveFrom": "2016-01-01T00:00:00.0000000+00:00"
                    },
                    "LegalEntity/Status/Active": {
                      "key": "LegalEntity/Status/Active",
                      "value": {
                        "labelValue": "Active"
                      },
                      "effectiveFrom": "2016-07-01T00:00:00.0000000+00:00"
                    }
                  },
                  "displayName": "LegalEntity1DisplayName",
                  "description": "LegalEntity1Description",
                  "counterpartyRiskInformation": {
                    "countryOfRisk": "UnitedKingdom",
                    "creditRatings": [
                      {
                        "ratingSource": "StandardAndPoors",
                        "rating": "AA+"
                      }
                    ],
                    "industryClassifiers": [
                      {
                        "classificationSystemName": "GICS2018",
                        "classificationCode": "10101010"
                      }
                    ]
                  }
                },
                "secondExampleRequest": {
                  "identifiers": {
                    "LegalEntity/ExternalIdentifier/LEI": {
                      "key": "LegalEntity/ExternalIdentifier/LEI",
                      "value": {
                        "labelValue": "LEI_22345678"
                      }
                    },
                    "LegalEntity/InternalIdentifier/InternalLeiId": {
                      "key": "LegalEntity/InternalIdentifier/InternalLeiId",
                      "value": {
                        "labelValue": "Internal_XHSP2038"
                      }
                    }
                  },
                  "properties": {
                    "LegalEntity/Details/Name": {
                      "key": "LegalEntity/Details/Name",
                      "value": {
                        "labelValue": "Legal Entity 2 Inc."
                      }
                    },
                    "LegalEntity/Details/Country": {
                      "key": "LegalEntity/Details/Country",
                      "value": {
                        "labelValue": "Germany"
                      },
                      "effectiveFrom": "2016-01-01T00:00:00.0000000+00:00"
                    },
                    "LegalEntity/Status/Active": {
                      "key": "LegalEntity/Status/Active",
                      "value": {
                        "labelValue": "Active"
                      },
                      "effectiveFrom": "2016-04-01T00:00:00.0000000+00:00"
                    }
                  },
                  "displayName": "LegalEntity2DisplayName",
                  "description": "LegalEntity2Description"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "The successfully created or updated legal entities along with any failures",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UpsertLegalEntitiesResponse"
                },
                "example": {
                  "href": "https://example.com",
                  "values": {
                    "firstLegalEntity": {
                      "displayName": "LegalEntity1DisplayName",
                      "description": "LegalEntity1Description",
                      "href": "https://example.com",
                      "lusidLegalEntityId": "LUID_00003D4V",
                      "identifiers": {
                        "LegalEntity/ExternalIdentifier/LEI": {
                          "key": "LegalEntity/ExternalIdentifier/LEI",
                          "value": {
                            "labelValue": "LEI_12345678"
                          }
                        },
                        "LegalEntity/InternalIdentifier/InternalLeiId": {
                          "key": "LegalEntity/InternalIdentifier/InternalLeiId",
                          "value": {
                            "labelValue": "Internal_XHSP2038"
                          }
                        }
                      },
                      "properties": {
                        "LegalEntity/Details/Name": {
                          "key": "LegalEntity/Details/Name",
                          "value": {
                            "labelValue": "Legal Entity Inc."
                          }
                        },
                        "LegalEntity/Details/Country": {
                          "key": "LegalEntity/Details/Country",
                          "value": {
                            "labelValue": "United Kingdom"
                          },
                          "effectiveFrom": "2016-01-01T00:00:00.0000000+00:00"
                        },
                        "LegalEntity/Status/Active": {
                          "key": "LegalEntity/Status/Active",
                          "value": {
                            "labelValue": "Active"
                          },
                          "effectiveFrom": "2016-07-01T00:00:00.0000000+00:00"
                        }
                      },
                      "relationships": [],
                      "counterpartyRiskInformation": {
                        "countryOfRisk": "UnitedKingdom",
                        "creditRatings": [
                          {
                            "ratingSource": "StandardAndPoors",
                            "rating": "AA+"
                          }
                        ],
                        "industryClassifiers": [
                          {
                            "classificationSystemName": "GICS2018",
                            "classificationCode": "10101010"
                          }
                        ]
                      },
                      "version": {
                        "effectiveFrom": "2019-01-01T12:00:00.0000000+00:00",
                        "asAtDate": "2019-01-01T12:00:00.0100000+00:00",
                        "asAtCreated": "2019-01-01T12:00:00.0000000+00:00",
                        "userIdCreated": "UserId1",
                        "asAtModified": "2019-01-01T12:00:00.0100000+00:00",
                        "userIdModified": "UserId2",
                        "asAtVersionNumber": 3
                      }
                    },
                    "secondLegalEntity": {
                      "displayName": "LegalEntity2DisplayName",
                      "description": "LegalEntity2Description",
                      "href": "https://example.com",
                      "lusidLegalEntityId": "LUID_00003D55",
                      "identifiers": {
                        "LegalEntity/ExternalIdentifier/LEI": {
                          "key": "LegalEntity/ExternalIdentifier/LEI",
                          "value": {
                            "labelValue": "LEI_22345678"
                          }
                        },
                        "LegalEntity/InternalIdentifier/InternalLeiId": {
                          "key": "LegalEntity/InternalIdentifier/InternalLeiId",
                          "value": {
                            "labelValue": "Internal_XHSP2038"
                          }
                        }
                      },
                      "properties": {
                        "LegalEntity/Details/Name": {
                          "key": "LegalEntity/Details/Name",
                          "value": {
                            "labelValue": "Legal Entity 2 Inc."
                          }
                        },
                        "LegalEntity/Details/Country": {
                          "key": "LegalEntity/Details/Country",
                          "value": {
                            "labelValue": "Germany"
                          },
                          "effectiveFrom": "2016-01-01T00:00:00.0000000+00:00"
                        },
                        "LegalEntity/Status/Active": {
                          "key": "LegalEntity/Status/Active",
                          "value": {
                            "labelValue": "Active"
                          },
                          "effectiveFrom": "2016-04-01T00:00:00.0000000+00:00"
                        }
                      },
                      "relationships": [],
                      "version": {
                        "effectiveFrom": "2019-01-01T12:00:00.0000000+00:00",
                        "asAtDate": "2019-01-01T12:00:00.0100000+00:00",
                        "asAtCreated": "2019-01-01T12:00:00.0000000+00:00",
                        "userIdCreated": "UserId1",
                        "asAtModified": "2019-01-01T12:00:00.0100000+00:00",
                        "userIdModified": "UserId2",
                        "asAtVersionNumber": 3
                      }
                    }
                  },
                  "failed": {}
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpsertLegalEntitiesResponse"
                },
                "example": {
                  "href": "https://example.com",
                  "values": {
                    "firstLegalEntity": {
                      "displayName": "LegalEntity1DisplayName",
                      "description": "LegalEntity1Description",
                      "href": "https://example.com",
                      "lusidLegalEntityId": "LUID_00003D4V",
                      "identifiers": {
                        "LegalEntity/ExternalIdentifier/LEI": {
                          "key": "LegalEntity/ExternalIdentifier/LEI",
                          "value": {
                            "labelValue": "LEI_12345678"
                          }
                        },
                        "LegalEntity/InternalIdentifier/InternalLeiId": {
                          "key": "LegalEntity/InternalIdentifier/InternalLeiId",
                          "value": {
                            "labelValue": "Internal_XHSP2038"
                          }
                        }
                      },
                      "properties": {
                        "LegalEntity/Details/Name": {
                          "key": "LegalEntity/Details/Name",
                          "value": {
                            "labelValue": "Legal Entity Inc."
                          }
                        },
                        "LegalEntity/Details/Country": {
                          "key": "LegalEntity/Details/Country",
                          "value": {
                            "labelValue": "United Kingdom"
                          },
                          "effectiveFrom": "2016-01-01T00:00:00.0000000+00:00"
                        },
                        "LegalEntity/Status/Active": {
                          "key": "LegalEntity/Status/Active",
                          "value": {
                            "labelValue": "Active"
                          },
                          "effectiveFrom": "2016-07-01T00:00:00.0000000+00:00"
                        }
                      },
                      "relationships": [],
                      "counterpartyRiskInformation": {
                        "countryOfRisk": "UnitedKingdom",
                        "creditRatings": [
                          {
                            "ratingSource": "StandardAndPoors",
                            "rating": "AA+"
                          }
                        ],
                        "industryClassifiers": [
                          {
                            "classificationSystemName": "GICS2018",
                            "classificationCode": "10101010"
                          }
                        ]
                      },
                      "version": {
                        "effectiveFrom": "2019-01-01T12:00:00.0000000+00:00",
                        "asAtDate": "2019-01-01T12:00:00.0100000+00:00",
                        "asAtCreated": "2019-01-01T12:00:00.0000000+00:00",
                        "userIdCreated": "UserId1",
                        "asAtModified": "2019-01-01T12:00:00.0100000+00:00",
                        "userIdModified": "UserId2",
                        "asAtVersionNumber": 3
                      }
                    },
                    "secondLegalEntity": {
                      "displayName": "LegalEntity2DisplayName",
                      "description": "LegalEntity2Description",
                      "href": "https://example.com",
                      "lusidLegalEntityId": "LUID_00003D55",
                      "identifiers": {
                        "LegalEntity/ExternalIdentifier/LEI": {
                          "key": "LegalEntity/ExternalIdentifier/LEI",
                          "value": {
                            "labelValue": "LEI_22345678"
                          }
                        },
                        "LegalEntity/InternalIdentifier/InternalLeiId": {
                          "key": "LegalEntity/InternalIdentifier/InternalLeiId",
                          "value": {
                            "labelValue": "Internal_XHSP2038"
                          }
                        }
                      },
                      "properties": {
                        "LegalEntity/Details/Name": {
                          "key": "LegalEntity/Details/Name",
                          "value": {
                            "labelValue": "Legal Entity 2 Inc."
                          }
                        },
                        "LegalEntity/Details/Country": {
                          "key": "LegalEntity/Details/Country",
                          "value": {
                            "labelValue": "Germany"
                          },
                          "effectiveFrom": "2016-01-01T00:00:00.0000000+00:00"
                        },
                        "LegalEntity/Status/Active": {
                          "key": "LegalEntity/Status/Active",
                          "value": {
                            "labelValue": "Active"
                          },
                          "effectiveFrom": "2016-04-01T00:00:00.0000000+00:00"
                        }
                      },
                      "relationships": [],
                      "version": {
                        "effectiveFrom": "2019-01-01T12:00:00.0000000+00:00",
                        "asAtDate": "2019-01-01T12:00:00.0100000+00:00",
                        "asAtCreated": "2019-01-01T12:00:00.0000000+00:00",
                        "userIdCreated": "UserId1",
                        "asAtModified": "2019-01-01T12:00:00.0100000+00:00",
                        "userIdModified": "UserId2",
                        "asAtVersionNumber": 3
                      }
                    }
                  },
                  "failed": {}
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpsertLegalEntitiesResponse"
                },
                "example": {
                  "href": "https://example.com",
                  "values": {
                    "firstLegalEntity": {
                      "displayName": "LegalEntity1DisplayName",
                      "description": "LegalEntity1Description",
                      "href": "https://example.com",
                      "lusidLegalEntityId": "LUID_00003D4V",
                      "identifiers": {
                        "LegalEntity/ExternalIdentifier/LEI": {
                          "key": "LegalEntity/ExternalIdentifier/LEI",
                          "value": {
                            "labelValue": "LEI_12345678"
                          }
                        },
                        "LegalEntity/InternalIdentifier/InternalLeiId": {
                          "key": "LegalEntity/InternalIdentifier/InternalLeiId",
                          "value": {
                            "labelValue": "Internal_XHSP2038"
                          }
                        }
                      },
                      "properties": {
                        "LegalEntity/Details/Name": {
                          "key": "LegalEntity/Details/Name",
                          "value": {
                            "labelValue": "Legal Entity Inc."
                          }
                        },
                        "LegalEntity/Details/Country": {
                          "key": "LegalEntity/Details/Country",
                          "value": {
                            "labelValue": "United Kingdom"
                          },
                          "effectiveFrom": "2016-01-01T00:00:00.0000000+00:00"
                        },
                        "LegalEntity/Status/Active": {
                          "key": "LegalEntity/Status/Active",
                          "value": {
                            "labelValue": "Active"
                          },
                          "effectiveFrom": "2016-07-01T00:00:00.0000000+00:00"
                        }
                      },
                      "relationships": [],
                      "counterpartyRiskInformation": {
                        "countryOfRisk": "UnitedKingdom",
                        "creditRatings": [
                          {
                            "ratingSource": "StandardAndPoors",
                            "rating": "AA+"
                          }
                        ],
                        "industryClassifiers": [
                          {
                            "classificationSystemName": "GICS2018",
                            "classificationCode": "10101010"
                          }
                        ]
                      },
                      "version": {
                        "effectiveFrom": "2019-01-01T12:00:00.0000000+00:00",
                        "asAtDate": "2019-01-01T12:00:00.0100000+00:00",
                        "asAtCreated": "2019-01-01T12:00:00.0000000+00:00",
                        "userIdCreated": "UserId1",
                        "asAtModified": "2019-01-01T12:00:00.0100000+00:00",
                        "userIdModified": "UserId2",
                        "asAtVersionNumber": 3
                      }
                    },
                    "secondLegalEntity": {
                      "displayName": "LegalEntity2DisplayName",
                      "description": "LegalEntity2Description",
                      "href": "https://example.com",
                      "lusidLegalEntityId": "LUID_00003D55",
                      "identifiers": {
                        "LegalEntity/ExternalIdentifier/LEI": {
                          "key": "LegalEntity/ExternalIdentifier/LEI",
                          "value": {
                            "labelValue": "LEI_22345678"
                          }
                        },
                        "LegalEntity/InternalIdentifier/InternalLeiId": {
                          "key": "LegalEntity/InternalIdentifier/InternalLeiId",
                          "value": {
                            "labelValue": "Internal_XHSP2038"
                          }
                        }
                      },
                      "properties": {
                        "LegalEntity/Details/Name": {
                          "key": "LegalEntity/Details/Name",
                          "value": {
                            "labelValue": "Legal Entity 2 Inc."
                          }
                        },
                        "LegalEntity/Details/Country": {
                          "key": "LegalEntity/Details/Country",
                          "value": {
                            "labelValue": "Germany"
                          },
                          "effectiveFrom": "2016-01-01T00:00:00.0000000+00:00"
                        },
                        "LegalEntity/Status/Active": {
                          "key": "LegalEntity/Status/Active",
                          "value": {
                            "labelValue": "Active"
                          },
                          "effectiveFrom": "2016-04-01T00:00:00.0000000+00:00"
                        }
                      },
                      "relationships": [],
                      "version": {
                        "effectiveFrom": "2019-01-01T12:00:00.0000000+00:00",
                        "asAtDate": "2019-01-01T12:00:00.0100000+00:00",
                        "asAtCreated": "2019-01-01T12:00:00.0000000+00:00",
                        "userIdCreated": "UserId1",
                        "asAtModified": "2019-01-01T12:00:00.0100000+00:00",
                        "userIdModified": "UserId2",
                        "asAtVersionNumber": 3
                      }
                    }
                  },
                  "failed": {}
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      }
    },
    "/api/legalentities/{idTypeScope}/{idTypeCode}": {
      "get": {
        "tags": [
          "Legal Entities"
        ],
        "summary": "[EARLY ACCESS] ListLegalEntities: List Legal Entities",
        "description": "List legal entities which has identifier of specific identifier type's scope and code, and satisfies filter criteria.",
        "operationId": "ListLegalEntities",
        "parameters": [
          {
            "name": "idTypeScope",
            "in": "path",
            "description": "Scope of the legal entity identifier type.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string"
            }
          },
          {
            "name": "idTypeCode",
            "in": "path",
            "description": "Code of the legal entity identifier type.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string"
            }
          },
          {
            "name": "effectiveAt",
            "in": "query",
            "description": "The effective datetime or cut label at which to list the people. Defaults to the current LUSID\r\n            system datetime if not specified.",
            "schema": {
              "maxLength": 256,
              "minLength": 0,
              "pattern": "^[a-zA-Z0-9\\-_\\+:\\.]+$",
              "type": "string",
              "format": "dateorcutlabel"
            }
          },
          {
            "name": "asAt",
            "in": "query",
            "description": "The asAt datetime at which to list the people. Defaults to return the latest version\r\n            of each people if not specified.",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "x-nullable": true
          },
          {
            "name": "page",
            "in": "query",
            "description": "The pagination token to use to continue listing legal entities from a previous call to list legal entities. This\r\nvalue is returned from the previous call. If a pagination token is provided the filter, effectiveAt\r\nand asAt fields must not have changed since the original request.",
            "schema": {
              "maxLength": 500,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\+/]*={0,3}$",
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "When paginating, limit the number of returned results to this many. Defaults to 100 if not specified.",
            "schema": {
              "maximum": 5000,
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            },
            "x-nullable": true
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Expression to filter the result set. \r\n            Read more about filtering results from LUSID here https://support.lusid.com/filtering-results-from-lusid.",
            "schema": {
              "maxLength": 16384,
              "minLength": 0,
              "pattern": "^[\\s\\S]*$",
              "type": "string"
            }
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "A list of field names or properties to sort by, each suffixed by \" ASC\" or \" DESC\"",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "x-nullable": true
          },
          {
            "name": "propertyKeys",
            "in": "query",
            "description": "A list of property keys or identifier types (as property keys) from the \"LegalEntity\" domain\r\n            to include for each legal entity, or from any domain that supports relationships to decorate onto related entities.\r\n            These take the format {domain}/{scope}/{code} e.g. \"LegalEntity/ContactDetails/Address\".",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "description": "The key that uniquely identifies the property. It has the format {domain}/{scope}/{code}."
              }
            },
            "x-nullable": true
          },
          {
            "name": "relationshipDefinitionIds",
            "in": "query",
            "description": "A list of relationship definitions that are used to decorate related entities\r\n            onto each portfolio in the response. These must take the form {relationshipDefinitionScope}/{relationshipDefinitionCode}.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "description": "Identifiers of an entity"
              }
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "description": "Legal Entities with specified identifier type",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PagedResourceListOfLegalEntity"
                },
                "example": {
                  "values": [
                    {
                      "displayName": "LegalEntity1DisplayName",
                      "description": "LegalEntity1Description",
                      "href": "https://example.com",
                      "lusidLegalEntityId": "LUID_00003D4V",
                      "identifiers": {
                        "LegalEntity/ExternalIdentifier/LEI": {
                          "key": "LegalEntity/ExternalIdentifier/LEI",
                          "value": {
                            "labelValue": "LEI_12345678"
                          }
                        },
                        "LegalEntity/InternalIdentifier/InternalLeiId": {
                          "key": "LegalEntity/InternalIdentifier/InternalLeiId",
                          "value": {
                            "labelValue": "Internal_XHSP2038"
                          }
                        }
                      },
                      "properties": {
                        "LegalEntity/Details/Name": {
                          "key": "LegalEntity/Details/Name",
                          "value": {
                            "labelValue": "Legal Entity Inc."
                          }
                        },
                        "LegalEntity/Details/Country": {
                          "key": "LegalEntity/Details/Country",
                          "value": {
                            "labelValue": "United Kingdom"
                          },
                          "effectiveFrom": "2016-01-01T00:00:00.0000000+00:00"
                        },
                        "LegalEntity/Status/Active": {
                          "key": "LegalEntity/Status/Active",
                          "value": {
                            "labelValue": "Active"
                          },
                          "effectiveFrom": "2016-07-01T00:00:00.0000000+00:00"
                        }
                      },
                      "relationships": [],
                      "counterpartyRiskInformation": {
                        "countryOfRisk": "UnitedKingdom",
                        "creditRatings": [
                          {
                            "ratingSource": "StandardAndPoors",
                            "rating": "AA+"
                          }
                        ],
                        "industryClassifiers": [
                          {
                            "classificationSystemName": "GICS2018",
                            "classificationCode": "10101010"
                          }
                        ]
                      },
                      "version": {
                        "effectiveFrom": "2019-01-01T12:00:00.0000000+00:00",
                        "asAtDate": "2019-01-01T12:00:00.0100000+00:00",
                        "asAtCreated": "2019-01-01T12:00:00.0000000+00:00",
                        "userIdCreated": "UserId1",
                        "asAtModified": "2019-01-01T12:00:00.0100000+00:00",
                        "userIdModified": "UserId2",
                        "asAtVersionNumber": 3
                      }
                    },
                    {
                      "displayName": "LegalEntity2DisplayName",
                      "description": "LegalEntity2Description",
                      "href": "https://example.com",
                      "lusidLegalEntityId": "LUID_00003D55",
                      "identifiers": {
                        "LegalEntity/ExternalIdentifier/LEI": {
                          "key": "LegalEntity/ExternalIdentifier/LEI",
                          "value": {
                            "labelValue": "LEI_22345678"
                          }
                        },
                        "LegalEntity/InternalIdentifier/InternalLeiId": {
                          "key": "LegalEntity/InternalIdentifier/InternalLeiId",
                          "value": {
                            "labelValue": "Internal_XHSP2038"
                          }
                        }
                      },
                      "properties": {
                        "LegalEntity/Details/Name": {
                          "key": "LegalEntity/Details/Name",
                          "value": {
                            "labelValue": "Legal Entity 2 Inc."
                          }
                        },
                        "LegalEntity/Details/Country": {
                          "key": "LegalEntity/Details/Country",
                          "value": {
                            "labelValue": "Germany"
                          },
                          "effectiveFrom": "2016-01-01T00:00:00.0000000+00:00"
                        },
                        "LegalEntity/Status/Active": {
                          "key": "LegalEntity/Status/Active",
                          "value": {
                            "labelValue": "Active"
                          },
                          "effectiveFrom": "2016-04-01T00:00:00.0000000+00:00"
                        }
                      },
                      "relationships": [],
                      "version": {
                        "effectiveFrom": "2019-01-01T12:00:00.0000000+00:00",
                        "asAtDate": "2019-01-01T12:00:00.0100000+00:00",
                        "asAtCreated": "2019-01-01T12:00:00.0000000+00:00",
                        "userIdCreated": "UserId1",
                        "asAtModified": "2019-01-01T12:00:00.0100000+00:00",
                        "userIdModified": "UserId2",
                        "asAtVersionNumber": 3
                      }
                    }
                  ],
                  "href": "http://example.com",
                  "links": []
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagedResourceListOfLegalEntity"
                },
                "example": {
                  "values": [
                    {
                      "displayName": "LegalEntity1DisplayName",
                      "description": "LegalEntity1Description",
                      "href": "https://example.com",
                      "lusidLegalEntityId": "LUID_00003D4V",
                      "identifiers": {
                        "LegalEntity/ExternalIdentifier/LEI": {
                          "key": "LegalEntity/ExternalIdentifier/LEI",
                          "value": {
                            "labelValue": "LEI_12345678"
                          }
                        },
                        "LegalEntity/InternalIdentifier/InternalLeiId": {
                          "key": "LegalEntity/InternalIdentifier/InternalLeiId",
                          "value": {
                            "labelValue": "Internal_XHSP2038"
                          }
                        }
                      },
                      "properties": {
                        "LegalEntity/Details/Name": {
                          "key": "LegalEntity/Details/Name",
                          "value": {
                            "labelValue": "Legal Entity Inc."
                          }
                        },
                        "LegalEntity/Details/Country": {
                          "key": "LegalEntity/Details/Country",
                          "value": {
                            "labelValue": "United Kingdom"
                          },
                          "effectiveFrom": "2016-01-01T00:00:00.0000000+00:00"
                        },
                        "LegalEntity/Status/Active": {
                          "key": "LegalEntity/Status/Active",
                          "value": {
                            "labelValue": "Active"
                          },
                          "effectiveFrom": "2016-07-01T00:00:00.0000000+00:00"
                        }
                      },
                      "relationships": [],
                      "counterpartyRiskInformation": {
                        "countryOfRisk": "UnitedKingdom",
                        "creditRatings": [
                          {
                            "ratingSource": "StandardAndPoors",
                            "rating": "AA+"
                          }
                        ],
                        "industryClassifiers": [
                          {
                            "classificationSystemName": "GICS2018",
                            "classificationCode": "10101010"
                          }
                        ]
                      },
                      "version": {
                        "effectiveFrom": "2019-01-01T12:00:00.0000000+00:00",
                        "asAtDate": "2019-01-01T12:00:00.0100000+00:00",
                        "asAtCreated": "2019-01-01T12:00:00.0000000+00:00",
                        "userIdCreated": "UserId1",
                        "asAtModified": "2019-01-01T12:00:00.0100000+00:00",
                        "userIdModified": "UserId2",
                        "asAtVersionNumber": 3
                      }
                    },
                    {
                      "displayName": "LegalEntity2DisplayName",
                      "description": "LegalEntity2Description",
                      "href": "https://example.com",
                      "lusidLegalEntityId": "LUID_00003D55",
                      "identifiers": {
                        "LegalEntity/ExternalIdentifier/LEI": {
                          "key": "LegalEntity/ExternalIdentifier/LEI",
                          "value": {
                            "labelValue": "LEI_22345678"
                          }
                        },
                        "LegalEntity/InternalIdentifier/InternalLeiId": {
                          "key": "LegalEntity/InternalIdentifier/InternalLeiId",
                          "value": {
                            "labelValue": "Internal_XHSP2038"
                          }
                        }
                      },
                      "properties": {
                        "LegalEntity/Details/Name": {
                          "key": "LegalEntity/Details/Name",
                          "value": {
                            "labelValue": "Legal Entity 2 Inc."
                          }
                        },
                        "LegalEntity/Details/Country": {
                          "key": "LegalEntity/Details/Country",
                          "value": {
                            "labelValue": "Germany"
                          },
                          "effectiveFrom": "2016-01-01T00:00:00.0000000+00:00"
                        },
                        "LegalEntity/Status/Active": {
                          "key": "LegalEntity/Status/Active",
                          "value": {
                            "labelValue": "Active"
                          },
                          "effectiveFrom": "2016-04-01T00:00:00.0000000+00:00"
                        }
                      },
                      "relationships": [],
                      "version": {
                        "effectiveFrom": "2019-01-01T12:00:00.0000000+00:00",
                        "asAtDate": "2019-01-01T12:00:00.0100000+00:00",
                        "asAtCreated": "2019-01-01T12:00:00.0000000+00:00",
                        "userIdCreated": "UserId1",
                        "asAtModified": "2019-01-01T12:00:00.0100000+00:00",
                        "userIdModified": "UserId2",
                        "asAtVersionNumber": 3
                      }
                    }
                  ],
                  "href": "http://example.com",
                  "links": []
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagedResourceListOfLegalEntity"
                },
                "example": {
                  "values": [
                    {
                      "displayName": "LegalEntity1DisplayName",
                      "description": "LegalEntity1Description",
                      "href": "https://example.com",
                      "lusidLegalEntityId": "LUID_00003D4V",
                      "identifiers": {
                        "LegalEntity/ExternalIdentifier/LEI": {
                          "key": "LegalEntity/ExternalIdentifier/LEI",
                          "value": {
                            "labelValue": "LEI_12345678"
                          }
                        },
                        "LegalEntity/InternalIdentifier/InternalLeiId": {
                          "key": "LegalEntity/InternalIdentifier/InternalLeiId",
                          "value": {
                            "labelValue": "Internal_XHSP2038"
                          }
                        }
                      },
                      "properties": {
                        "LegalEntity/Details/Name": {
                          "key": "LegalEntity/Details/Name",
                          "value": {
                            "labelValue": "Legal Entity Inc."
                          }
                        },
                        "LegalEntity/Details/Country": {
                          "key": "LegalEntity/Details/Country",
                          "value": {
                            "labelValue": "United Kingdom"
                          },
                          "effectiveFrom": "2016-01-01T00:00:00.0000000+00:00"
                        },
                        "LegalEntity/Status/Active": {
                          "key": "LegalEntity/Status/Active",
                          "value": {
                            "labelValue": "Active"
                          },
                          "effectiveFrom": "2016-07-01T00:00:00.0000000+00:00"
                        }
                      },
                      "relationships": [],
                      "counterpartyRiskInformation": {
                        "countryOfRisk": "UnitedKingdom",
                        "creditRatings": [
                          {
                            "ratingSource": "StandardAndPoors",
                            "rating": "AA+"
                          }
                        ],
                        "industryClassifiers": [
                          {
                            "classificationSystemName": "GICS2018",
                            "classificationCode": "10101010"
                          }
                        ]
                      },
                      "version": {
                        "effectiveFrom": "2019-01-01T12:00:00.0000000+00:00",
                        "asAtDate": "2019-01-01T12:00:00.0100000+00:00",
                        "asAtCreated": "2019-01-01T12:00:00.0000000+00:00",
                        "userIdCreated": "UserId1",
                        "asAtModified": "2019-01-01T12:00:00.0100000+00:00",
                        "userIdModified": "UserId2",
                        "asAtVersionNumber": 3
                      }
                    },
                    {
                      "displayName": "LegalEntity2DisplayName",
                      "description": "LegalEntity2Description",
                      "href": "https://example.com",
                      "lusidLegalEntityId": "LUID_00003D55",
                      "identifiers": {
                        "LegalEntity/ExternalIdentifier/LEI": {
                          "key": "LegalEntity/ExternalIdentifier/LEI",
                          "value": {
                            "labelValue": "LEI_22345678"
                          }
                        },
                        "LegalEntity/InternalIdentifier/InternalLeiId": {
                          "key": "LegalEntity/InternalIdentifier/InternalLeiId",
                          "value": {
                            "labelValue": "Internal_XHSP2038"
                          }
                        }
                      },
                      "properties": {
                        "LegalEntity/Details/Name": {
                          "key": "LegalEntity/Details/Name",
                          "value": {
                            "labelValue": "Legal Entity 2 Inc."
                          }
                        },
                        "LegalEntity/Details/Country": {
                          "key": "LegalEntity/Details/Country",
                          "value": {
                            "labelValue": "Germany"
                          },
                          "effectiveFrom": "2016-01-01T00:00:00.0000000+00:00"
                        },
                        "LegalEntity/Status/Active": {
                          "key": "LegalEntity/Status/Active",
                          "value": {
                            "labelValue": "Active"
                          },
                          "effectiveFrom": "2016-04-01T00:00:00.0000000+00:00"
                        }
                      },
                      "relationships": [],
                      "version": {
                        "effectiveFrom": "2019-01-01T12:00:00.0000000+00:00",
                        "asAtDate": "2019-01-01T12:00:00.0100000+00:00",
                        "asAtCreated": "2019-01-01T12:00:00.0000000+00:00",
                        "userIdCreated": "UserId1",
                        "asAtModified": "2019-01-01T12:00:00.0100000+00:00",
                        "userIdModified": "UserId2",
                        "asAtVersionNumber": 3
                      }
                    }
                  ],
                  "href": "http://example.com",
                  "links": []
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      }
    },
    "/api/legalentities/{idTypeScope}/{idTypeCode}/{code}": {
      "get": {
        "tags": [
          "Legal Entities"
        ],
        "summary": "[EARLY ACCESS] GetLegalEntity: Get Legal Entity",
        "description": "Retrieve the definition of a legal entity.",
        "operationId": "GetLegalEntity",
        "parameters": [
          {
            "name": "idTypeScope",
            "in": "path",
            "description": "Scope of the legal entity identifier type.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string"
            }
          },
          {
            "name": "idTypeCode",
            "in": "path",
            "description": "Code of the legal entity identifier type.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string"
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "Code of the legal entity under specified identifier type's scope and code. This together with stated identifier type uniquely\r\n            identifies the legal entity.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "type": "string"
            }
          },
          {
            "name": "propertyKeys",
            "in": "query",
            "description": "A list of property keys or identifier types (as property keys) from the \"LegalEntity\" domain\r\n            to include for found legal entity, or from any domain that supports relationships to decorate onto related entities.\r\n            These take the format {domain}/{scope}/{code} e.g. \"LegalEntity/ContactDetails/Address\".",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "description": "The key that uniquely identifies the property. It has the format {domain}/{scope}/{code}."
              }
            },
            "x-nullable": true
          },
          {
            "name": "effectiveAt",
            "in": "query",
            "description": "The effective datetime or cut label at which to retrieve the legal entity. Defaults to the current LUSID system datetime if not specified.",
            "schema": {
              "maxLength": 256,
              "minLength": 0,
              "pattern": "^[a-zA-Z0-9\\-_\\+:\\.]+$",
              "type": "string",
              "format": "dateorcutlabel"
            }
          },
          {
            "name": "asAt",
            "in": "query",
            "description": "The asAt datetime at which to retrieve the legal entity. Defaults to return the latest version of the legal entity if not specified.",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "x-nullable": true
          },
          {
            "name": "relationshipDefinitionIds",
            "in": "query",
            "description": "A list of relationship definitions that are used to decorate related entities\r\n            onto the legal entity in the response. These must take the form {relationshipDefinitionScope}/{relationshipDefinitionCode}.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "description": "Identifiers of an entity"
              }
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "description": "The requested legal entity",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LegalEntity"
                },
                "example": {
                  "displayName": "LegalEntity1DisplayName",
                  "description": "LegalEntity1Description",
                  "href": "https://example.com",
                  "lusidLegalEntityId": "LUID_00003D4V",
                  "identifiers": {
                    "LegalEntity/ExternalIdentifier/LEI": {
                      "key": "LegalEntity/ExternalIdentifier/LEI",
                      "value": {
                        "labelValue": "LEI_12345678"
                      }
                    },
                    "LegalEntity/InternalIdentifier/InternalLeiId": {
                      "key": "LegalEntity/InternalIdentifier/InternalLeiId",
                      "value": {
                        "labelValue": "Internal_XHSP2038"
                      }
                    }
                  },
                  "properties": {
                    "LegalEntity/Details/Name": {
                      "key": "LegalEntity/Details/Name",
                      "value": {
                        "labelValue": "Legal Entity Inc."
                      }
                    },
                    "LegalEntity/Details/Country": {
                      "key": "LegalEntity/Details/Country",
                      "value": {
                        "labelValue": "United Kingdom"
                      },
                      "effectiveFrom": "2016-01-01T00:00:00.0000000+00:00"
                    },
                    "LegalEntity/Status/Active": {
                      "key": "LegalEntity/Status/Active",
                      "value": {
                        "labelValue": "Active"
                      },
                      "effectiveFrom": "2016-07-01T00:00:00.0000000+00:00"
                    }
                  },
                  "relationships": [],
                  "counterpartyRiskInformation": {
                    "countryOfRisk": "UnitedKingdom",
                    "creditRatings": [
                      {
                        "ratingSource": "StandardAndPoors",
                        "rating": "AA+"
                      }
                    ],
                    "industryClassifiers": [
                      {
                        "classificationSystemName": "GICS2018",
                        "classificationCode": "10101010"
                      }
                    ]
                  },
                  "version": {
                    "effectiveFrom": "2019-01-01T12:00:00.0000000+00:00",
                    "asAtDate": "2019-01-01T12:00:00.0100000+00:00",
                    "asAtCreated": "2019-01-01T12:00:00.0000000+00:00",
                    "userIdCreated": "UserId1",
                    "asAtModified": "2019-01-01T12:00:00.0100000+00:00",
                    "userIdModified": "UserId2",
                    "asAtVersionNumber": 3
                  }
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LegalEntity"
                },
                "example": {
                  "displayName": "LegalEntity1DisplayName",
                  "description": "LegalEntity1Description",
                  "href": "https://example.com",
                  "lusidLegalEntityId": "LUID_00003D4V",
                  "identifiers": {
                    "LegalEntity/ExternalIdentifier/LEI": {
                      "key": "LegalEntity/ExternalIdentifier/LEI",
                      "value": {
                        "labelValue": "LEI_12345678"
                      }
                    },
                    "LegalEntity/InternalIdentifier/InternalLeiId": {
                      "key": "LegalEntity/InternalIdentifier/InternalLeiId",
                      "value": {
                        "labelValue": "Internal_XHSP2038"
                      }
                    }
                  },
                  "properties": {
                    "LegalEntity/Details/Name": {
                      "key": "LegalEntity/Details/Name",
                      "value": {
                        "labelValue": "Legal Entity Inc."
                      }
                    },
                    "LegalEntity/Details/Country": {
                      "key": "LegalEntity/Details/Country",
                      "value": {
                        "labelValue": "United Kingdom"
                      },
                      "effectiveFrom": "2016-01-01T00:00:00.0000000+00:00"
                    },
                    "LegalEntity/Status/Active": {
                      "key": "LegalEntity/Status/Active",
                      "value": {
                        "labelValue": "Active"
                      },
                      "effectiveFrom": "2016-07-01T00:00:00.0000000+00:00"
                    }
                  },
                  "relationships": [],
                  "counterpartyRiskInformation": {
                    "countryOfRisk": "UnitedKingdom",
                    "creditRatings": [
                      {
                        "ratingSource": "StandardAndPoors",
                        "rating": "AA+"
                      }
                    ],
                    "industryClassifiers": [
                      {
                        "classificationSystemName": "GICS2018",
                        "classificationCode": "10101010"
                      }
                    ]
                  },
                  "version": {
                    "effectiveFrom": "2019-01-01T12:00:00.0000000+00:00",
                    "asAtDate": "2019-01-01T12:00:00.0100000+00:00",
                    "asAtCreated": "2019-01-01T12:00:00.0000000+00:00",
                    "userIdCreated": "UserId1",
                    "asAtModified": "2019-01-01T12:00:00.0100000+00:00",
                    "userIdModified": "UserId2",
                    "asAtVersionNumber": 3
                  }
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LegalEntity"
                },
                "example": {
                  "displayName": "LegalEntity1DisplayName",
                  "description": "LegalEntity1Description",
                  "href": "https://example.com",
                  "lusidLegalEntityId": "LUID_00003D4V",
                  "identifiers": {
                    "LegalEntity/ExternalIdentifier/LEI": {
                      "key": "LegalEntity/ExternalIdentifier/LEI",
                      "value": {
                        "labelValue": "LEI_12345678"
                      }
                    },
                    "LegalEntity/InternalIdentifier/InternalLeiId": {
                      "key": "LegalEntity/InternalIdentifier/InternalLeiId",
                      "value": {
                        "labelValue": "Internal_XHSP2038"
                      }
                    }
                  },
                  "properties": {
                    "LegalEntity/Details/Name": {
                      "key": "LegalEntity/Details/Name",
                      "value": {
                        "labelValue": "Legal Entity Inc."
                      }
                    },
                    "LegalEntity/Details/Country": {
                      "key": "LegalEntity/Details/Country",
                      "value": {
                        "labelValue": "United Kingdom"
                      },
                      "effectiveFrom": "2016-01-01T00:00:00.0000000+00:00"
                    },
                    "LegalEntity/Status/Active": {
                      "key": "LegalEntity/Status/Active",
                      "value": {
                        "labelValue": "Active"
                      },
                      "effectiveFrom": "2016-07-01T00:00:00.0000000+00:00"
                    }
                  },
                  "relationships": [],
                  "counterpartyRiskInformation": {
                    "countryOfRisk": "UnitedKingdom",
                    "creditRatings": [
                      {
                        "ratingSource": "StandardAndPoors",
                        "rating": "AA+"
                      }
                    ],
                    "industryClassifiers": [
                      {
                        "classificationSystemName": "GICS2018",
                        "classificationCode": "10101010"
                      }
                    ]
                  },
                  "version": {
                    "effectiveFrom": "2019-01-01T12:00:00.0000000+00:00",
                    "asAtDate": "2019-01-01T12:00:00.0100000+00:00",
                    "asAtCreated": "2019-01-01T12:00:00.0000000+00:00",
                    "userIdCreated": "UserId1",
                    "asAtModified": "2019-01-01T12:00:00.0100000+00:00",
                    "userIdModified": "UserId2",
                    "asAtVersionNumber": 3
                  }
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      },
      "delete": {
        "tags": [
          "Legal Entities"
        ],
        "summary": "[EARLY ACCESS] DeleteLegalEntity: Delete Legal Entity",
        "description": "Delete a legal entity. Deletion will be valid from the legal entity's creation datetime.\r\nThis means that the legal entity will no longer exist at any effective datetime from the asAt datetime of deletion.",
        "operationId": "DeleteLegalEntity",
        "parameters": [
          {
            "name": "idTypeScope",
            "in": "path",
            "description": "The scope of the legal entity identifier type.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_.]*$",
              "type": "string"
            }
          },
          {
            "name": "idTypeCode",
            "in": "path",
            "description": "The code of the legal entity identifier type.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_.]*$",
              "type": "string"
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "Code of the legal entity under specified identifier type's scope and code. This together with defined\r\n            identifier type uniquely identifies the legal entity to delete.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The response from deleting legal entity.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedEntityResponse"
                },
                "example": {
                  "asAt": "2018-03-05T10:10:10.0000000+00:00"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedEntityResponse"
                },
                "example": {
                  "asAt": "2018-03-05T10:10:10.0000000+00:00"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedEntityResponse"
                },
                "example": {
                  "asAt": "2018-03-05T10:10:10.0000000+00:00"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      }
    },
    "/api/legalentities/{idTypeScope}/{idTypeCode}/{code}/identifiers": {
      "delete": {
        "tags": [
          "Legal Entities"
        ],
        "summary": "[EARLY ACCESS] DeleteLegalEntityIdentifiers: Delete Legal Entity Identifiers",
        "description": "Delete identifiers that belong to the given property keys of the legal entity.",
        "operationId": "DeleteLegalEntityIdentifiers",
        "parameters": [
          {
            "name": "idTypeScope",
            "in": "path",
            "description": "Scope of the legal entity identifier type.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string"
            }
          },
          {
            "name": "idTypeCode",
            "in": "path",
            "description": "Code of the legal entity identifier type.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string"
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "Code of the legal entity under specified identifier type's scope and code. This together with stated identifier type uniquely\r\n            identifies the legal entity.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "type": "string"
            }
          },
          {
            "name": "propertyKeys",
            "in": "query",
            "description": "The property keys of the identifiers to delete. These take the format\r\n            {domain}/{scope}/{code} e.g. \"LegalEntity/CreditAgency/Identifier\". Each property must be from the \"LegalEntity\" domain. Identifiers or identifiers not specified in request will not be changed.",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "description": "The key that uniquely identifies the property. It has the format {domain}/{scope}/{code}."
              }
            }
          },
          {
            "name": "effectiveAt",
            "in": "query",
            "description": "The effective datetime or cut label at which to delete the identifiers. Defaults to the current LUSID system datetime if not specified.\r\n            Must not include an effective datetime if identifiers are perpetual.",
            "schema": {
              "type": "string",
              "format": "dateorcutlabel"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The datetime that the identifiers were deleted from the specified legal entity",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedEntityResponse"
                },
                "example": {
                  "asAt": "2018-03-05T10:10:10.0000000+00:00"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedEntityResponse"
                },
                "example": {
                  "asAt": "2018-03-05T10:10:10.0000000+00:00"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedEntityResponse"
                },
                "example": {
                  "asAt": "2018-03-05T10:10:10.0000000+00:00"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      },
      "post": {
        "tags": [
          "Legal Entities"
        ],
        "summary": "[EARLY ACCESS] SetLegalEntityIdentifiers: Set Legal Entity Identifiers",
        "description": "Set identifiers of the Legal Entity.",
        "operationId": "SetLegalEntityIdentifiers",
        "parameters": [
          {
            "name": "idTypeScope",
            "in": "path",
            "description": "Scope of the legal entity identifier type.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string"
            }
          },
          {
            "name": "idTypeCode",
            "in": "path",
            "description": "Code of the legal entity identifier type.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string"
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "Code of the legal entity under specified identifier type's scope and code. This together with stated identifier type uniquely\r\n            identifies the legal entity.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Request containing identifiers to set for the legal entity. Identifiers not specified in request will not be changed.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SetLegalEntityIdentifiersRequest"
              },
              "example": {
                "identifiers": {
                  "LegalEntity/ExternalIdentifier/LEI": {
                    "key": "LegalEntity/ExternalIdentifier/LEI",
                    "value": {
                      "labelValue": "LEI_12345678"
                    }
                  },
                  "LegalEntity/InternalIdentifier/InternalLeiId": {
                    "key": "LegalEntity/InternalIdentifier/InternalLeiId",
                    "value": {
                      "labelValue": "Internal_XHSP2038"
                    }
                  }
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SetLegalEntityIdentifiersRequest"
              },
              "example": {
                "identifiers": {
                  "LegalEntity/ExternalIdentifier/LEI": {
                    "key": "LegalEntity/ExternalIdentifier/LEI",
                    "value": {
                      "labelValue": "LEI_12345678"
                    }
                  },
                  "LegalEntity/InternalIdentifier/InternalLeiId": {
                    "key": "LegalEntity/InternalIdentifier/InternalLeiId",
                    "value": {
                      "labelValue": "Internal_XHSP2038"
                    }
                  }
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SetLegalEntityIdentifiersRequest"
              },
              "example": {
                "identifiers": {
                  "LegalEntity/ExternalIdentifier/LEI": {
                    "key": "LegalEntity/ExternalIdentifier/LEI",
                    "value": {
                      "labelValue": "LEI_12345678"
                    }
                  },
                  "LegalEntity/InternalIdentifier/InternalLeiId": {
                    "key": "LegalEntity/InternalIdentifier/InternalLeiId",
                    "value": {
                      "labelValue": "Internal_XHSP2038"
                    }
                  }
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SetLegalEntityIdentifiersRequest"
              },
              "example": {
                "identifiers": {
                  "LegalEntity/ExternalIdentifier/LEI": {
                    "key": "LegalEntity/ExternalIdentifier/LEI",
                    "value": {
                      "labelValue": "LEI_12345678"
                    }
                  },
                  "LegalEntity/InternalIdentifier/InternalLeiId": {
                    "key": "LegalEntity/InternalIdentifier/InternalLeiId",
                    "value": {
                      "labelValue": "Internal_XHSP2038"
                    }
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The Legal Entity with updated identifiers",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LegalEntity"
                },
                "example": {
                  "displayName": "LegalEntity1DisplayName",
                  "description": "LegalEntity1Description",
                  "href": "https://example.com",
                  "lusidLegalEntityId": "LUID_00003D4V",
                  "identifiers": {
                    "LegalEntity/ExternalIdentifier/LEI": {
                      "key": "LegalEntity/ExternalIdentifier/LEI",
                      "value": {
                        "labelValue": "LEI_12345678"
                      }
                    },
                    "LegalEntity/InternalIdentifier/InternalLeiId": {
                      "key": "LegalEntity/InternalIdentifier/InternalLeiId",
                      "value": {
                        "labelValue": "Internal_XHSP2038"
                      }
                    },
                    "LegalEntity/Details/Name": {
                      "key": "LegalEntity/Details/Name",
                      "value": {
                        "labelValue": "John Smith"
                      }
                    }
                  },
                  "properties": {
                    "LegalEntity/Details/Name": {
                      "key": "LegalEntity/Details/Name",
                      "value": {
                        "labelValue": "John Smith"
                      },
                      "effectiveFrom": "2016-07-01T00:00:00.0000000+00:00"
                    },
                    "LegalEntity/Details/Country": {
                      "key": "LegalEntity/Details/Country",
                      "value": {
                        "labelValue": "United Kingdom"
                      },
                      "effectiveFrom": "2016-07-01T00:00:00.0000000+00:00"
                    }
                  },
                  "relationships": [],
                  "counterpartyRiskInformation": {
                    "countryOfRisk": "UnitedKingdom",
                    "creditRatings": [
                      {
                        "ratingSource": "StandardAndPoors",
                        "rating": "AA+"
                      }
                    ],
                    "industryClassifiers": [
                      {
                        "classificationSystemName": "GICS2018",
                        "classificationCode": "10101010"
                      }
                    ]
                  },
                  "version": {
                    "effectiveFrom": "2019-01-01T12:00:00.0000000+00:00",
                    "asAtDate": "2019-01-01T12:00:00.0100000+00:00",
                    "asAtCreated": "2019-01-01T12:00:00.0000000+00:00",
                    "userIdCreated": "UserId1",
                    "asAtModified": "2019-01-01T12:00:00.0100000+00:00",
                    "userIdModified": "UserId2",
                    "asAtVersionNumber": 3
                  }
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LegalEntity"
                },
                "example": {
                  "displayName": "LegalEntity1DisplayName",
                  "description": "LegalEntity1Description",
                  "href": "https://example.com",
                  "lusidLegalEntityId": "LUID_00003D4V",
                  "identifiers": {
                    "LegalEntity/ExternalIdentifier/LEI": {
                      "key": "LegalEntity/ExternalIdentifier/LEI",
                      "value": {
                        "labelValue": "LEI_12345678"
                      }
                    },
                    "LegalEntity/InternalIdentifier/InternalLeiId": {
                      "key": "LegalEntity/InternalIdentifier/InternalLeiId",
                      "value": {
                        "labelValue": "Internal_XHSP2038"
                      }
                    },
                    "LegalEntity/Details/Name": {
                      "key": "LegalEntity/Details/Name",
                      "value": {
                        "labelValue": "John Smith"
                      }
                    }
                  },
                  "properties": {
                    "LegalEntity/Details/Name": {
                      "key": "LegalEntity/Details/Name",
                      "value": {
                        "labelValue": "John Smith"
                      },
                      "effectiveFrom": "2016-07-01T00:00:00.0000000+00:00"
                    },
                    "LegalEntity/Details/Country": {
                      "key": "LegalEntity/Details/Country",
                      "value": {
                        "labelValue": "United Kingdom"
                      },
                      "effectiveFrom": "2016-07-01T00:00:00.0000000+00:00"
                    }
                  },
                  "relationships": [],
                  "counterpartyRiskInformation": {
                    "countryOfRisk": "UnitedKingdom",
                    "creditRatings": [
                      {
                        "ratingSource": "StandardAndPoors",
                        "rating": "AA+"
                      }
                    ],
                    "industryClassifiers": [
                      {
                        "classificationSystemName": "GICS2018",
                        "classificationCode": "10101010"
                      }
                    ]
                  },
                  "version": {
                    "effectiveFrom": "2019-01-01T12:00:00.0000000+00:00",
                    "asAtDate": "2019-01-01T12:00:00.0100000+00:00",
                    "asAtCreated": "2019-01-01T12:00:00.0000000+00:00",
                    "userIdCreated": "UserId1",
                    "asAtModified": "2019-01-01T12:00:00.0100000+00:00",
                    "userIdModified": "UserId2",
                    "asAtVersionNumber": 3
                  }
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LegalEntity"
                },
                "example": {
                  "displayName": "LegalEntity1DisplayName",
                  "description": "LegalEntity1Description",
                  "href": "https://example.com",
                  "lusidLegalEntityId": "LUID_00003D4V",
                  "identifiers": {
                    "LegalEntity/ExternalIdentifier/LEI": {
                      "key": "LegalEntity/ExternalIdentifier/LEI",
                      "value": {
                        "labelValue": "LEI_12345678"
                      }
                    },
                    "LegalEntity/InternalIdentifier/InternalLeiId": {
                      "key": "LegalEntity/InternalIdentifier/InternalLeiId",
                      "value": {
                        "labelValue": "Internal_XHSP2038"
                      }
                    },
                    "LegalEntity/Details/Name": {
                      "key": "LegalEntity/Details/Name",
                      "value": {
                        "labelValue": "John Smith"
                      }
                    }
                  },
                  "properties": {
                    "LegalEntity/Details/Name": {
                      "key": "LegalEntity/Details/Name",
                      "value": {
                        "labelValue": "John Smith"
                      },
                      "effectiveFrom": "2016-07-01T00:00:00.0000000+00:00"
                    },
                    "LegalEntity/Details/Country": {
                      "key": "LegalEntity/Details/Country",
                      "value": {
                        "labelValue": "United Kingdom"
                      },
                      "effectiveFrom": "2016-07-01T00:00:00.0000000+00:00"
                    }
                  },
                  "relationships": [],
                  "counterpartyRiskInformation": {
                    "countryOfRisk": "UnitedKingdom",
                    "creditRatings": [
                      {
                        "ratingSource": "StandardAndPoors",
                        "rating": "AA+"
                      }
                    ],
                    "industryClassifiers": [
                      {
                        "classificationSystemName": "GICS2018",
                        "classificationCode": "10101010"
                      }
                    ]
                  },
                  "version": {
                    "effectiveFrom": "2019-01-01T12:00:00.0000000+00:00",
                    "asAtDate": "2019-01-01T12:00:00.0100000+00:00",
                    "asAtCreated": "2019-01-01T12:00:00.0000000+00:00",
                    "userIdCreated": "UserId1",
                    "asAtModified": "2019-01-01T12:00:00.0100000+00:00",
                    "userIdModified": "UserId2",
                    "asAtVersionNumber": 3
                  }
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      }
    },
    "/api/legalentities/{idTypeScope}/{idTypeCode}/{code}/metadata": {
      "get": {
        "tags": [
          "Legal Entities"
        ],
        "summary": "[EARLY ACCESS] GetAllLegalEntityAccessMetadata: Get Access Metadata rules for a Legal Entity",
        "description": "Pass the Scope and Code of the Legal Entity identifier along with the Legal Entity code parameter to retrieve the associated Access Metadata",
        "operationId": "GetAllLegalEntityAccessMetadata",
        "parameters": [
          {
            "name": "idTypeScope",
            "in": "path",
            "description": "Scope of the Legal Entity identifier.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string"
            }
          },
          {
            "name": "idTypeCode",
            "in": "path",
            "description": "Code of the Legal Entity identifier.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string"
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "Code of the Legal Entity under specified identifier type's scope and code.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string"
            }
          },
          {
            "name": "effectiveAt",
            "in": "query",
            "description": "The effectiveAt datetime at which to retrieve the Access Metadata",
            "schema": {
              "type": "string",
              "format": "dateorcutlabel"
            }
          },
          {
            "name": "asAt",
            "in": "query",
            "description": "The asAt datetime at which to retrieve the Access Metadata",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "description": "The access metadata for the Legal Entity or any failure.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/AccessMetadataValue"
                    }
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/AccessMetadataValue"
                    }
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/AccessMetadataValue"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      },
      "patch": {
        "tags": [
          "Legal Entities"
        ],
        "summary": "[EARLY ACCESS] PatchLegalEntityAccessMetadata: Patch Access Metadata rules for a Legal Entity.",
        "description": "Patch Legal Entity Access Metadata Rules in a single scope.\r\nThe behaviour is defined by the JSON Patch specification.\r\n            \r\nCurrently only 'add' is a supported operation on the patch document\r\n\r\nCurrently only valid metadata keys are supported paths on the patch document\r\n            \r\nThe response will return any affected Legal Entity Access Metadata rules or a failure message if unsuccessful.\r\n            \r\nIt is important to always check to verify success (or failure).\r\n            \r\nMultiple rules for a metadataKey can exist with different effective at dates, when resources are accessed the rule that is active for the current time will be fetched.",
        "operationId": "PatchLegalEntityAccessMetadata",
        "parameters": [
          {
            "name": "idTypeScope",
            "in": "path",
            "description": "Scope of the Legal Entity identifier.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string"
            }
          },
          {
            "name": "idTypeCode",
            "in": "path",
            "description": "Code of the Legal Entity identifier.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string"
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "Code of the Legal Entity under specified identifier type's scope and code.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string"
            }
          },
          {
            "name": "effectiveAt",
            "in": "query",
            "description": "The effectiveAt datetime at which to upsert the Access Metadata",
            "schema": {
              "type": "string",
              "format": "dateorcutlabel"
            }
          },
          {
            "name": "effectiveUntil",
            "in": "query",
            "description": "The effective datetime until which the Access Metadata is valid. If not supplied this will be valid indefinitely, or until the next 'effectiveAt' datetime of the Access Metadata",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "x-nullable": true
          }
        ],
        "requestBody": {
          "description": "The Json Patch document",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/AccessMetadataOperation"
                }
              },
              "example": [
                {
                  "value": [
                    {
                      "value": "SilverLicence",
                      "provider": "TestDataProvider"
                    }
                  ],
                  "path": "/exampleMetadataKey",
                  "op": "add"
                }
              ]
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/AccessMetadataOperation"
                }
              },
              "example": [
                {
                  "value": [
                    {
                      "value": "SilverLicence",
                      "provider": "TestDataProvider"
                    }
                  ],
                  "path": "/exampleMetadataKey",
                  "op": "add"
                }
              ]
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/AccessMetadataOperation"
                }
              },
              "example": [
                {
                  "value": [
                    {
                      "value": "SilverLicence",
                      "provider": "TestDataProvider"
                    }
                  ],
                  "path": "/exampleMetadataKey",
                  "op": "add"
                }
              ]
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/AccessMetadataOperation"
                }
              },
              "example": [
                {
                  "value": [
                    {
                      "value": "SilverLicence",
                      "provider": "TestDataProvider"
                    }
                  ],
                  "path": "/exampleMetadataKey",
                  "op": "add"
                }
              ]
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The successfully patched items.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/AccessMetadataValue"
                    }
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/AccessMetadataValue"
                    }
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/AccessMetadataValue"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      }
    },
    "/api/legalentities/{idTypeScope}/{idTypeCode}/{code}/metadata/{metadataKey}": {
      "put": {
        "tags": [
          "Legal Entities"
        ],
        "summary": "[EARLY ACCESS] UpsertLegalEntityAccessMetadata: Upsert a Legal Entity Access Metadata entry associated with a specific metadataKey. This creates or updates the data in LUSID.",
        "description": "Update or insert one Legal Entity Access Metadata entry in a single scope. An item will be updated if it already exists\r\nand inserted if it does not.\r\n            \r\nThe response will return the successfully updated or inserted Legal Entity Access Metadata rule or failure message if unsuccessful.\r\n            \r\nIt is important to always check to verify success (or failure).\r\n            \r\nMultiple rules for a metadataKey can exist with different effective at dates, when resources are accessed the rule that is active for the current time will be fetched.",
        "operationId": "UpsertLegalEntityAccessMetadata",
        "parameters": [
          {
            "name": "idTypeScope",
            "in": "path",
            "description": "Scope of the Legal Entity identifier.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string"
            }
          },
          {
            "name": "idTypeCode",
            "in": "path",
            "description": "Code of the Legal Entity identifier.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string"
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "Code of the Legal Entity under specified identifier type's scope and code.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string"
            }
          },
          {
            "name": "metadataKey",
            "in": "path",
            "description": "Key of the metadata entry to retrieve",
            "required": true,
            "schema": {
              "maxLength": 100,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string"
            }
          },
          {
            "name": "effectiveAt",
            "in": "query",
            "description": "The effectiveAt datetime at which to upsert the Access Metadata",
            "schema": {
              "type": "string",
              "format": "dateorcutlabel"
            }
          },
          {
            "name": "effectiveUntil",
            "in": "query",
            "description": "The effective datetime until which the Access Metadata is valid. If not supplied this will be valid indefinitely, or until the next 'effectiveAt' datetime of the Access Metadata",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "x-nullable": true
          }
        ],
        "requestBody": {
          "description": "The Legal Entity Access Metadata entry to upsert",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/UpsertLegalEntityAccessMetadataRequest"
              },
              "example": {
                "metadata": [
                  {
                    "value": "SilverLicence",
                    "provider": "TestDataProvider"
                  }
                ]
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpsertLegalEntityAccessMetadataRequest"
              },
              "example": {
                "metadata": [
                  {
                    "value": "SilverLicence",
                    "provider": "TestDataProvider"
                  }
                ]
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/UpsertLegalEntityAccessMetadataRequest"
              },
              "example": {
                "metadata": [
                  {
                    "value": "SilverLicence",
                    "provider": "TestDataProvider"
                  }
                ]
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/UpsertLegalEntityAccessMetadataRequest"
              },
              "example": {
                "metadata": [
                  {
                    "value": "SilverLicence",
                    "provider": "TestDataProvider"
                  }
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The successfully updated or inserted item or any failure.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfAccessMetadataValueOf"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfAccessMetadataValueOf"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfAccessMetadataValueOf"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      },
      "get": {
        "tags": [
          "Legal Entities"
        ],
        "summary": "[EARLY ACCESS] GetLegalEntityAccessMetadataByKey: Get an entry identified by a metadataKey in the Access Metadata of a Legal Entity",
        "description": "Get a specific Legal Entity Access Metadata by specifying the corresponding identifier parts and Legal Entity code\r\n            \r\nNo matching will be performed through this endpoint. To retrieve an entry, it is necessary to specify, exactly, the identifier of the entry",
        "operationId": "GetLegalEntityAccessMetadataByKey",
        "parameters": [
          {
            "name": "idTypeScope",
            "in": "path",
            "description": "Scope of the Legal Entity identifier.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string"
            }
          },
          {
            "name": "idTypeCode",
            "in": "path",
            "description": "Code of the Legal Entity identifier.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string"
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "Code of the Legal Entity under specified identifier type's scope and code.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string"
            }
          },
          {
            "name": "metadataKey",
            "in": "path",
            "description": "Key of the metadata entry to retrieve",
            "required": true,
            "schema": {
              "maxLength": 100,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string"
            }
          },
          {
            "name": "effectiveAt",
            "in": "query",
            "description": "The effectiveAt datetime at which to retrieve the Access Metadata",
            "schema": {
              "type": "string",
              "format": "dateorcutlabel"
            }
          },
          {
            "name": "asAt",
            "in": "query",
            "description": "The asAt datetime at which to retrieve the Access Metadata",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "description": "The successfully retrieved Legal Entity access metadata filtered by metadataKey or any failure.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AccessMetadataValue"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AccessMetadataValue"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AccessMetadataValue"
                  }
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      },
      "delete": {
        "tags": [
          "Legal Entities"
        ],
        "summary": "[EARLY ACCESS] DeleteLegalEntityAccessMetadata: Delete a Legal Entity Access Metadata entry",
        "description": "Deletes the Legal Entity Access Metadata entry that exactly matches the provided identifier parts.\r\n\r\nIt is important to always check to verify success (or failure).",
        "operationId": "DeleteLegalEntityAccessMetadata",
        "parameters": [
          {
            "name": "idTypeScope",
            "in": "path",
            "description": "Scope of the Legal Entity identifier.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string"
            }
          },
          {
            "name": "idTypeCode",
            "in": "path",
            "description": "Code of the Legal Entity identifier.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string"
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "Code of the Legal Entity under specified identifier type's scope and code.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string"
            }
          },
          {
            "name": "metadataKey",
            "in": "path",
            "description": "Key of the metadata entry to retrieve",
            "required": true,
            "schema": {
              "maxLength": 100,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string"
            }
          },
          {
            "name": "effectiveAt",
            "in": "query",
            "description": "The effective date to delete at, if this is not supplied, it will delete all data found",
            "schema": {
              "type": "string",
              "format": "dateorcutlabel"
            }
          },
          {
            "name": "effectiveUntil",
            "in": "query",
            "description": "The effective date until which the delete is valid. If not supplied this will be valid indefinitely, or until the next 'effectiveAt' date of the Access Metadata",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "description": "The Access Metadata with the given metadataKey has been deleted",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedEntityResponse"
                },
                "example": {
                  "asAt": "2018-03-05T10:10:10.0000000+00:00"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedEntityResponse"
                },
                "example": {
                  "asAt": "2018-03-05T10:10:10.0000000+00:00"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedEntityResponse"
                },
                "example": {
                  "asAt": "2018-03-05T10:10:10.0000000+00:00"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      }
    },
    "/api/legalentities/{idTypeScope}/{idTypeCode}/{code}/properties": {
      "delete": {
        "tags": [
          "Legal Entities"
        ],
        "summary": "[EARLY ACCESS] DeleteLegalEntityProperties: Delete Legal Entity Properties",
        "description": "Delete all properties that belong to the given property keys of the legal entity.",
        "operationId": "DeleteLegalEntityProperties",
        "parameters": [
          {
            "name": "idTypeScope",
            "in": "path",
            "description": "Scope of the legal entity identifier type.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string"
            }
          },
          {
            "name": "idTypeCode",
            "in": "path",
            "description": "Code of the legal entity identifier type.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string"
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "Code of the legal entity under specified identifier type's scope and code. This together with stated identifier type uniquely\r\n            identifies the legal entity.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "type": "string"
            }
          },
          {
            "name": "propertyKeys",
            "in": "query",
            "description": "The property keys of the legal entities properties to delete. These take the format\r\n            {domain}/{scope}/{code} e.g. \"LegalEntity/CompanyDetails/Role\". Each property must be from the \"LegalEntity\" domain. Properties or identifiers not specified in request will not be changed.",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "description": "The key that uniquely identifies the property. It has the format {domain}/{scope}/{code}."
              }
            }
          },
          {
            "name": "effectiveAt",
            "in": "query",
            "description": "The effective datetime or cut label at which to delete time-variant properties from.\r\n            The property must exist at the specified 'effectiveAt' datetime. If the 'effectiveAt' is not provided or is\r\n            before the time-variant property exists then a failure is returned. Do not specify this parameter if any of\r\n            the properties to delete are perpetual.",
            "schema": {
              "type": "string",
              "format": "dateorcutlabel"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The datetime that the properties were deleted from the specified legal entity",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedEntityResponse"
                },
                "example": {
                  "asAt": "2018-03-05T10:10:10.0000000+00:00"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedEntityResponse"
                },
                "example": {
                  "asAt": "2018-03-05T10:10:10.0000000+00:00"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedEntityResponse"
                },
                "example": {
                  "asAt": "2018-03-05T10:10:10.0000000+00:00"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      },
      "post": {
        "tags": [
          "Legal Entities"
        ],
        "summary": "[EARLY ACCESS] SetLegalEntityProperties: Set Legal Entity Properties",
        "description": "Set properties of the legal entity.",
        "operationId": "SetLegalEntityProperties",
        "parameters": [
          {
            "name": "idTypeScope",
            "in": "path",
            "description": "Scope of the legal entity identifier type.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string"
            }
          },
          {
            "name": "idTypeCode",
            "in": "path",
            "description": "Code of the legal entity identifier type.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string"
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "Code of the legal entity under specified identifier type's scope and code. This together with stated identifier type uniquely\r\n            identifies the legal entity.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Request containing properties to set for the legal entity. Properties not specified in request will not be changed.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SetLegalEntityPropertiesRequest"
              },
              "example": {
                "properties": {
                  "LegalEntity/Details/Name": {
                    "key": "LegalEntity/Details/Name",
                    "value": {
                      "labelValue": "John Smith"
                    },
                    "effectiveFrom": "2016-07-01T00:00:00.0000000+00:00"
                  },
                  "LegalEntity/Details/Country": {
                    "key": "LegalEntity/Details/Country",
                    "value": {
                      "labelValue": "United Kingdom"
                    },
                    "effectiveFrom": "2016-07-01T00:00:00.0000000+00:00"
                  }
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SetLegalEntityPropertiesRequest"
              },
              "example": {
                "properties": {
                  "LegalEntity/Details/Name": {
                    "key": "LegalEntity/Details/Name",
                    "value": {
                      "labelValue": "John Smith"
                    },
                    "effectiveFrom": "2016-07-01T00:00:00.0000000+00:00"
                  },
                  "LegalEntity/Details/Country": {
                    "key": "LegalEntity/Details/Country",
                    "value": {
                      "labelValue": "United Kingdom"
                    },
                    "effectiveFrom": "2016-07-01T00:00:00.0000000+00:00"
                  }
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SetLegalEntityPropertiesRequest"
              },
              "example": {
                "properties": {
                  "LegalEntity/Details/Name": {
                    "key": "LegalEntity/Details/Name",
                    "value": {
                      "labelValue": "John Smith"
                    },
                    "effectiveFrom": "2016-07-01T00:00:00.0000000+00:00"
                  },
                  "LegalEntity/Details/Country": {
                    "key": "LegalEntity/Details/Country",
                    "value": {
                      "labelValue": "United Kingdom"
                    },
                    "effectiveFrom": "2016-07-01T00:00:00.0000000+00:00"
                  }
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SetLegalEntityPropertiesRequest"
              },
              "example": {
                "properties": {
                  "LegalEntity/Details/Name": {
                    "key": "LegalEntity/Details/Name",
                    "value": {
                      "labelValue": "John Smith"
                    },
                    "effectiveFrom": "2016-07-01T00:00:00.0000000+00:00"
                  },
                  "LegalEntity/Details/Country": {
                    "key": "LegalEntity/Details/Country",
                    "value": {
                      "labelValue": "United Kingdom"
                    },
                    "effectiveFrom": "2016-07-01T00:00:00.0000000+00:00"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The Legal Entity with updated properties",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LegalEntity"
                },
                "example": {
                  "displayName": "LegalEntity1Description",
                  "description": "LegalEntity1DisplayName",
                  "lusidLegalEntityId": "LUID_00003D4V",
                  "identifiers": {
                    "LegalEntity/ExternalIdentifier/LEI": {
                      "key": "LegalEntity/ExternalIdentifier/LEI",
                      "value": {
                        "labelValue": "LEI_12345678"
                      }
                    },
                    "LegalEntity/InternalIdentifier/InternalLeiId": {
                      "key": "LegalEntity/InternalIdentifier/InternalLeiId",
                      "value": {
                        "labelValue": "Internal_XHSP2038"
                      }
                    }
                  },
                  "properties": {
                    "LegalEntity/Details/Name": {
                      "key": "LegalEntity/Details/Name",
                      "value": {
                        "labelValue": "John Smith"
                      },
                      "effectiveFrom": "2016-07-01T00:00:00.0000000+00:00"
                    },
                    "LegalEntity/Details/Country": {
                      "key": "LegalEntity/Details/Country",
                      "value": {
                        "labelValue": "United Kingdom"
                      },
                      "effectiveFrom": "2016-07-01T00:00:00.0000000+00:00"
                    }
                  },
                  "relationships": [],
                  "counterpartyRiskInformation": {
                    "countryOfRisk": "UnitedKingdom",
                    "creditRatings": [
                      {
                        "ratingSource": "StandardAndPoors",
                        "rating": "AA+"
                      }
                    ],
                    "industryClassifiers": [
                      {
                        "classificationSystemName": "GICS2018",
                        "classificationCode": "10101010"
                      }
                    ]
                  },
                  "version": {
                    "effectiveFrom": "2019-01-01T12:00:00.0000000+00:00",
                    "asAtDate": "2019-01-01T12:00:00.0100000+00:00",
                    "asAtCreated": "2019-01-01T12:00:00.0000000+00:00",
                    "userIdCreated": "UserId1",
                    "asAtModified": "2019-01-01T12:00:00.0100000+00:00",
                    "userIdModified": "UserId2",
                    "asAtVersionNumber": 3
                  }
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LegalEntity"
                },
                "example": {
                  "displayName": "LegalEntity1Description",
                  "description": "LegalEntity1DisplayName",
                  "lusidLegalEntityId": "LUID_00003D4V",
                  "identifiers": {
                    "LegalEntity/ExternalIdentifier/LEI": {
                      "key": "LegalEntity/ExternalIdentifier/LEI",
                      "value": {
                        "labelValue": "LEI_12345678"
                      }
                    },
                    "LegalEntity/InternalIdentifier/InternalLeiId": {
                      "key": "LegalEntity/InternalIdentifier/InternalLeiId",
                      "value": {
                        "labelValue": "Internal_XHSP2038"
                      }
                    }
                  },
                  "properties": {
                    "LegalEntity/Details/Name": {
                      "key": "LegalEntity/Details/Name",
                      "value": {
                        "labelValue": "John Smith"
                      },
                      "effectiveFrom": "2016-07-01T00:00:00.0000000+00:00"
                    },
                    "LegalEntity/Details/Country": {
                      "key": "LegalEntity/Details/Country",
                      "value": {
                        "labelValue": "United Kingdom"
                      },
                      "effectiveFrom": "2016-07-01T00:00:00.0000000+00:00"
                    }
                  },
                  "relationships": [],
                  "counterpartyRiskInformation": {
                    "countryOfRisk": "UnitedKingdom",
                    "creditRatings": [
                      {
                        "ratingSource": "StandardAndPoors",
                        "rating": "AA+"
                      }
                    ],
                    "industryClassifiers": [
                      {
                        "classificationSystemName": "GICS2018",
                        "classificationCode": "10101010"
                      }
                    ]
                  },
                  "version": {
                    "effectiveFrom": "2019-01-01T12:00:00.0000000+00:00",
                    "asAtDate": "2019-01-01T12:00:00.0100000+00:00",
                    "asAtCreated": "2019-01-01T12:00:00.0000000+00:00",
                    "userIdCreated": "UserId1",
                    "asAtModified": "2019-01-01T12:00:00.0100000+00:00",
                    "userIdModified": "UserId2",
                    "asAtVersionNumber": 3
                  }
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LegalEntity"
                },
                "example": {
                  "displayName": "LegalEntity1Description",
                  "description": "LegalEntity1DisplayName",
                  "lusidLegalEntityId": "LUID_00003D4V",
                  "identifiers": {
                    "LegalEntity/ExternalIdentifier/LEI": {
                      "key": "LegalEntity/ExternalIdentifier/LEI",
                      "value": {
                        "labelValue": "LEI_12345678"
                      }
                    },
                    "LegalEntity/InternalIdentifier/InternalLeiId": {
                      "key": "LegalEntity/InternalIdentifier/InternalLeiId",
                      "value": {
                        "labelValue": "Internal_XHSP2038"
                      }
                    }
                  },
                  "properties": {
                    "LegalEntity/Details/Name": {
                      "key": "LegalEntity/Details/Name",
                      "value": {
                        "labelValue": "John Smith"
                      },
                      "effectiveFrom": "2016-07-01T00:00:00.0000000+00:00"
                    },
                    "LegalEntity/Details/Country": {
                      "key": "LegalEntity/Details/Country",
                      "value": {
                        "labelValue": "United Kingdom"
                      },
                      "effectiveFrom": "2016-07-01T00:00:00.0000000+00:00"
                    }
                  },
                  "relationships": [],
                  "counterpartyRiskInformation": {
                    "countryOfRisk": "UnitedKingdom",
                    "creditRatings": [
                      {
                        "ratingSource": "StandardAndPoors",
                        "rating": "AA+"
                      }
                    ],
                    "industryClassifiers": [
                      {
                        "classificationSystemName": "GICS2018",
                        "classificationCode": "10101010"
                      }
                    ]
                  },
                  "version": {
                    "effectiveFrom": "2019-01-01T12:00:00.0000000+00:00",
                    "asAtDate": "2019-01-01T12:00:00.0100000+00:00",
                    "asAtCreated": "2019-01-01T12:00:00.0000000+00:00",
                    "userIdCreated": "UserId1",
                    "asAtModified": "2019-01-01T12:00:00.0100000+00:00",
                    "userIdModified": "UserId2",
                    "asAtVersionNumber": 3
                  }
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      }
    },
    "/api/legalentities/{idTypeScope}/{idTypeCode}/{code}/properties/time-series": {
      "get": {
        "tags": [
          "Legal Entities"
        ],
        "summary": "[EARLY ACCESS] GetLegalEntityPropertyTimeSeries: Get Legal Entity Property Time Series",
        "description": "List the complete time series of a legal entity property.",
        "operationId": "GetLegalEntityPropertyTimeSeries",
        "parameters": [
          {
            "name": "idTypeScope",
            "in": "path",
            "description": "Scope of the legal entity identifier type.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string"
            }
          },
          {
            "name": "idTypeCode",
            "in": "path",
            "description": "Code of the legal entity identifier type.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string"
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "Code of the legal entity under specified identifier type's scope and code. This together with stated identifier type uniquely identifies the legal entity.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "type": "string"
            }
          },
          {
            "name": "propertyKey",
            "in": "query",
            "description": "The property key of the property that will have its history shown. These must be in the format {domain}/{scope}/{code} e.g. \"LegalEntity/ContactDetails/Address\".\r\n            Each property must be from the \"LegalEntity\" domain.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The key that uniquely identifies the property. It has the format {domain}/{scope}/{code}."
            }
          },
          {
            "name": "asAt",
            "in": "query",
            "description": "The asAt datetime at which to list the person's property history. Defaults to return the current datetime if not supplied.",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "x-nullable": true
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Expression to filter the result set. Read more about filtering results from LUSID here https://support.lusid.com/filtering-results-from-lusid.",
            "schema": {
              "maxLength": 16384,
              "minLength": 0,
              "pattern": "^[\\s\\S]*$",
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "The pagination token to use to continue listing properties from a previous call to get property time series.\r\n            This value is returned from the previous call. If a pagination token is provided the filter and asAt fields\r\n            must not have changed since the original request.",
            "schema": {
              "maxLength": 500,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\+/]*={0,3}$",
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "When paginating, limit the number of returned results to this many.",
            "schema": {
              "maximum": 5000,
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "description": "The time series of the property",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfPropertyInterval"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfPropertyInterval"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfPropertyInterval"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      }
    },
    "/api/legalentities/{idTypeScope}/{idTypeCode}/{code}/relationships": {
      "get": {
        "tags": [
          "Legal Entities"
        ],
        "summary": "[EARLY ACCESS] GetLegalEntityRelationships: Get Relationships for Legal Entity",
        "description": "Get Relationships for the specified Legal Entity",
        "operationId": "GetLegalEntityRelationships",
        "parameters": [
          {
            "name": "idTypeScope",
            "in": "path",
            "description": "Scope of the legal entity's identifier type.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string"
            }
          },
          {
            "name": "idTypeCode",
            "in": "path",
            "description": "Code of the legal entity's identifier type.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string"
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "Code of the legal entity under specified identifier type's scope and code. This together with stated identifier type uniquely\r\n            identifies the legal entity.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "type": "string"
            }
          },
          {
            "name": "effectiveAt",
            "in": "query",
            "description": "The effective datetime or cut label at which to get relationships. Defaults to the current LUSID system datetime if not specified.",
            "schema": {
              "maxLength": 256,
              "minLength": 0,
              "pattern": "^[a-zA-Z0-9\\-_\\+:\\.]+$",
              "type": "string",
              "format": "dateorcutlabel"
            }
          },
          {
            "name": "asAt",
            "in": "query",
            "description": "The asAt datetime at which to retrieve relationships. Defaults to return the latest LUSID AsAt time if not specified.",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "x-nullable": true
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Expression to filter relationships. Users should provide null or empty string for this field until further notice.",
            "schema": {
              "maxLength": 16384,
              "minLength": 0,
              "pattern": "^[\\s\\S]*$",
              "type": "string"
            }
          },
          {
            "name": "identifierTypes",
            "in": "query",
            "description": "Identifier types (as property keys) used for referencing Persons or Legal Entities.\r\n            These can be specified from the 'Person' or 'LegalEntity' domains and have the format {domain}/{scope}/{code}, for example\r\n            'Person/CompanyDetails/Role'. An Empty array may be used to return all related Entities.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "description": "The key that uniquely identifies the property. It has the format {domain}/{scope}/{code}."
              }
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "description": "The relationships for the specified legal entity.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfRelationship"
                },
                "example": {
                  "values": [
                    {
                      "relationshipDefinitionId": {
                        "scope": "PortfolioManagementTeam",
                        "code": "Traders"
                      },
                      "relatedEntity": {
                        "entityType": "LegalEntity",
                        "entityId": {
                          "idTypeScope": "HrSystem1",
                          "idTypeCode": "InternalId",
                          "code": "XY10001111"
                        },
                        "displayName": "James Smith",
                        "properties": {},
                        "identifiers": [
                          {
                            "identifierScope": "HrSystem1",
                            "identifierType": "InternalId",
                            "identifierValue": "XY10001111"
                          }
                        ]
                      },
                      "traversalDirection": "Out",
                      "traversalDescription": "is legal representative for",
                      "effectiveFrom": "2019-01-01T12:00:00.0000000+00:00",
                      "effectiveUntil": "2022-01-01T12:00:00.0000000+00:00"
                    }
                  ],
                  "href": "https://example.com",
                  "links": []
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfRelationship"
                },
                "example": {
                  "values": [
                    {
                      "relationshipDefinitionId": {
                        "scope": "PortfolioManagementTeam",
                        "code": "Traders"
                      },
                      "relatedEntity": {
                        "entityType": "LegalEntity",
                        "entityId": {
                          "idTypeScope": "HrSystem1",
                          "idTypeCode": "InternalId",
                          "code": "XY10001111"
                        },
                        "displayName": "James Smith",
                        "properties": {},
                        "identifiers": [
                          {
                            "identifierScope": "HrSystem1",
                            "identifierType": "InternalId",
                            "identifierValue": "XY10001111"
                          }
                        ]
                      },
                      "traversalDirection": "Out",
                      "traversalDescription": "is legal representative for",
                      "effectiveFrom": "2019-01-01T12:00:00.0000000+00:00",
                      "effectiveUntil": "2022-01-01T12:00:00.0000000+00:00"
                    }
                  ],
                  "href": "https://example.com",
                  "links": []
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfRelationship"
                },
                "example": {
                  "values": [
                    {
                      "relationshipDefinitionId": {
                        "scope": "PortfolioManagementTeam",
                        "code": "Traders"
                      },
                      "relatedEntity": {
                        "entityType": "LegalEntity",
                        "entityId": {
                          "idTypeScope": "HrSystem1",
                          "idTypeCode": "InternalId",
                          "code": "XY10001111"
                        },
                        "displayName": "James Smith",
                        "properties": {},
                        "identifiers": [
                          {
                            "identifierScope": "HrSystem1",
                            "identifierType": "InternalId",
                            "identifierValue": "XY10001111"
                          }
                        ]
                      },
                      "traversalDirection": "Out",
                      "traversalDescription": "is legal representative for",
                      "effectiveFrom": "2019-01-01T12:00:00.0000000+00:00",
                      "effectiveUntil": "2022-01-01T12:00:00.0000000+00:00"
                    }
                  ],
                  "href": "https://example.com",
                  "links": []
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      }
    },
    "/api/metadata/access/resources": {
      "get": {
        "tags": [
          "Application Metadata"
        ],
        "summary": "ListAccessControlledResources: Get resources available for access control",
        "description": "Get the comprehensive set of resources that are available for access control",
        "operationId": "ListAccessControlledResources",
        "parameters": [
          {
            "name": "filter",
            "in": "query",
            "description": "Optional. Expression to filter the result set. \r\n            For example, to filter on the Application, use \"application eq 'string'\"\r\n            Read more about filtering results from LUSID here https://support.lusid.com/filtering-results-from-lusid.",
            "schema": {
              "maxLength": 16384,
              "minLength": 0,
              "pattern": "^[\\s\\S]*$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfAccessControlledResource"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfAccessControlledResource"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfAccessControlledResource"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Stable"
      }
    },
    "/api/metadata/downloads/exceladdin": {
      "get": {
        "tags": [
          "Application Metadata"
        ],
        "summary": "GetExcelAddin: Download Excel Addin",
        "description": "Download the LUSID Excel Addin for Microsoft Excel. Not providing a specific value will return the latest version being returned",
        "operationId": "GetExcelAddin",
        "parameters": [
          {
            "name": "version",
            "in": "query",
            "description": "The requested version of the Excel plugin",
            "schema": {
              "maxLength": 30,
              "minLength": 1,
              "pattern": "^\\d+\\.\\d+(\\.\\d+)?(-[a-zA-Z0-9\\.-]{1,30})?$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/FileResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FileResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/FileResponse"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Stable"
      }
    },
    "/api/metadata/versions": {
      "get": {
        "tags": [
          "Application Metadata"
        ],
        "summary": "GetLusidVersions: Get LUSID versions",
        "description": "Get the semantic versions associated with LUSID and its ecosystem",
        "operationId": "GetLusidVersions",
        "responses": {
          "200": {
            "description": "Collection of versions associated with LUSID",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/VersionSummaryDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VersionSummaryDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/VersionSummaryDto"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Stable"
      }
    },
    "/api/orders": {
      "get": {
        "tags": [
          "Orders"
        ],
        "summary": "[EARLY ACCESS] ListOrders: List Orders",
        "description": "Fetch the last pre-AsAt date version of each order in scope (does not fetch the entire history).",
        "operationId": "ListOrders",
        "parameters": [
          {
            "name": "asAt",
            "in": "query",
            "description": "The asAt datetime at which to retrieve the order. Defaults to return the latest version of the order if not specified.",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "x-nullable": true
          },
          {
            "name": "page",
            "in": "query",
            "description": "The pagination token to use to continue listing orders from a previous call to list orders.\r\n            This value is returned from the previous call. If a pagination token is provided the sortBy, filter, effectiveAt, and asAt fields\r\n            must not have changed since the original request. Also, if set, a start value cannot be provided.",
            "schema": {
              "maxLength": 500,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\+/]*={0,3}$",
              "type": "string"
            }
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "Order the results by these fields. Use use the '-' sign to denote descending order e.g. -MyFieldName.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "x-nullable": true
          },
          {
            "name": "start",
            "in": "query",
            "description": "When paginating, skip this number of results.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-nullable": true
          },
          {
            "name": "limit",
            "in": "query",
            "description": "When paginating, limit the number of returned results to this many.",
            "schema": {
              "maximum": 5000,
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            },
            "x-nullable": true
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Expression to filter the result set. Read more about filtering results from LUSID here:\r\n            https://support.lusid.com/filtering-results-from-lusid.",
            "schema": {
              "maxLength": 16384,
              "minLength": 0,
              "pattern": "^[\\s\\S]*$",
              "type": "string"
            }
          },
          {
            "name": "propertyKeys",
            "in": "query",
            "description": "A list of property keys from the \"Orders\" domain to decorate onto each order.\r\n                These take the format {domain}/{scope}/{code} e.g. \"Orders/system/Name\".",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "description": "The key that uniquely identifies the property. It has the format {domain}/{scope}/{code}."
              }
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "description": "Orders in scope.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PagedResourceListOfOrder"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagedResourceListOfOrder"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagedResourceListOfOrder"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      },
      "post": {
        "tags": [
          "Orders"
        ],
        "summary": "[EARLY ACCESS] UpsertOrders: Upsert Order",
        "description": "Upsert; update existing orders with given ids, or create new orders otherwise.",
        "operationId": "UpsertOrders",
        "requestBody": {
          "description": "The collection of order requests.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/OrderSetRequest"
              },
              "example": {
                "orderRequests": [
                  {
                    "properties": {
                      "Order/MyScope/SomeOrderProperty": {
                        "key": "Order/MyScope/SomeOrderProperty",
                        "value": {
                          "labelValue": "XYZ000034567"
                        }
                      }
                    },
                    "instrumentIdentifiers": {
                      "Instrument/default/Currency": "GBP"
                    },
                    "quantity": 100,
                    "side": "Buy",
                    "orderBookId": {
                      "scope": "MyScope",
                      "code": "UKEQ-Orders"
                    },
                    "portfolioId": {
                      "scope": "MyScope",
                      "code": "UK-Equity"
                    },
                    "id": {
                      "scope": "MyScope",
                      "code": "ORD00000123"
                    },
                    "state": "New",
                    "type": "Limit",
                    "timeInForce": "GoodTilCancel",
                    "date": "2023-05-02T00:00:00.0000000+00:00",
                    "price": {
                      "amount": 534,
                      "currency": "USD"
                    },
                    "orderInstruction": {
                      "scope": "MyScope",
                      "code": "Instruction-06"
                    },
                    "package": {
                      "scope": "MyScope",
                      "code": "UKEQ-Package"
                    }
                  }
                ]
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OrderSetRequest"
              },
              "example": {
                "orderRequests": [
                  {
                    "properties": {
                      "Order/MyScope/SomeOrderProperty": {
                        "key": "Order/MyScope/SomeOrderProperty",
                        "value": {
                          "labelValue": "XYZ000034567"
                        }
                      }
                    },
                    "instrumentIdentifiers": {
                      "Instrument/default/Currency": "GBP"
                    },
                    "quantity": 100,
                    "side": "Buy",
                    "orderBookId": {
                      "scope": "MyScope",
                      "code": "UKEQ-Orders"
                    },
                    "portfolioId": {
                      "scope": "MyScope",
                      "code": "UK-Equity"
                    },
                    "id": {
                      "scope": "MyScope",
                      "code": "ORD00000123"
                    },
                    "state": "New",
                    "type": "Limit",
                    "timeInForce": "GoodTilCancel",
                    "date": "2023-05-02T00:00:00.0000000+00:00",
                    "price": {
                      "amount": 534,
                      "currency": "USD"
                    },
                    "orderInstruction": {
                      "scope": "MyScope",
                      "code": "Instruction-06"
                    },
                    "package": {
                      "scope": "MyScope",
                      "code": "UKEQ-Package"
                    }
                  }
                ]
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/OrderSetRequest"
              },
              "example": {
                "orderRequests": [
                  {
                    "properties": {
                      "Order/MyScope/SomeOrderProperty": {
                        "key": "Order/MyScope/SomeOrderProperty",
                        "value": {
                          "labelValue": "XYZ000034567"
                        }
                      }
                    },
                    "instrumentIdentifiers": {
                      "Instrument/default/Currency": "GBP"
                    },
                    "quantity": 100,
                    "side": "Buy",
                    "orderBookId": {
                      "scope": "MyScope",
                      "code": "UKEQ-Orders"
                    },
                    "portfolioId": {
                      "scope": "MyScope",
                      "code": "UK-Equity"
                    },
                    "id": {
                      "scope": "MyScope",
                      "code": "ORD00000123"
                    },
                    "state": "New",
                    "type": "Limit",
                    "timeInForce": "GoodTilCancel",
                    "date": "2023-05-02T00:00:00.0000000+00:00",
                    "price": {
                      "amount": 534,
                      "currency": "USD"
                    },
                    "orderInstruction": {
                      "scope": "MyScope",
                      "code": "Instruction-06"
                    },
                    "package": {
                      "scope": "MyScope",
                      "code": "UKEQ-Package"
                    }
                  }
                ]
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/OrderSetRequest"
              },
              "example": {
                "orderRequests": [
                  {
                    "properties": {
                      "Order/MyScope/SomeOrderProperty": {
                        "key": "Order/MyScope/SomeOrderProperty",
                        "value": {
                          "labelValue": "XYZ000034567"
                        }
                      }
                    },
                    "instrumentIdentifiers": {
                      "Instrument/default/Currency": "GBP"
                    },
                    "quantity": 100,
                    "side": "Buy",
                    "orderBookId": {
                      "scope": "MyScope",
                      "code": "UKEQ-Orders"
                    },
                    "portfolioId": {
                      "scope": "MyScope",
                      "code": "UK-Equity"
                    },
                    "id": {
                      "scope": "MyScope",
                      "code": "ORD00000123"
                    },
                    "state": "New",
                    "type": "Limit",
                    "timeInForce": "GoodTilCancel",
                    "date": "2023-05-02T00:00:00.0000000+00:00",
                    "price": {
                      "amount": 534,
                      "currency": "USD"
                    },
                    "orderInstruction": {
                      "scope": "MyScope",
                      "code": "Instruction-06"
                    },
                    "package": {
                      "scope": "MyScope",
                      "code": "UKEQ-Package"
                    }
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "A collection of orders.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfOrder"
                },
                "example": {
                  "values": [
                    {
                      "properties": {
                        "Order/MyScope/SomeOrderProperty": {
                          "key": "Order/MyScope/SomeOrderProperty",
                          "value": {
                            "labelValue": "XYZ000034567"
                          }
                        }
                      },
                      "version": {
                        "effectiveFrom": "2018-03-05T10:10:10.0000000+00:00",
                        "asAtDate": "2018-03-05T10:10:10.0000000+00:00"
                      },
                      "instrumentIdentifiers": {
                        "Instrument/default/Currency": "GBP"
                      },
                      "quantity": 100,
                      "side": "Buy",
                      "orderBookId": {
                        "scope": "MyScope",
                        "code": "UKEQ-Orders"
                      },
                      "portfolioId": {
                        "scope": "MyScope",
                        "code": "testPortfolio"
                      },
                      "id": {
                        "scope": "MyScope",
                        "code": "ORD00000123"
                      },
                      "state": "New",
                      "type": "Limit",
                      "timeInForce": "GoodTilCancel",
                      "date": "1999-06-05T00:00:00.0000000+00:00",
                      "stopPrice": {
                        "amount": 534,
                        "currency": "USD"
                      },
                      "orderInstructionId": {
                        "scope": "MyScope",
                        "code": "Instruction-06"
                      },
                      "packageId": {
                        "scope": "MyScope",
                        "code": "UKEQ-Package"
                      }
                    }
                  ],
                  "links": []
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfOrder"
                },
                "example": {
                  "values": [
                    {
                      "properties": {
                        "Order/MyScope/SomeOrderProperty": {
                          "key": "Order/MyScope/SomeOrderProperty",
                          "value": {
                            "labelValue": "XYZ000034567"
                          }
                        }
                      },
                      "version": {
                        "effectiveFrom": "2018-03-05T10:10:10.0000000+00:00",
                        "asAtDate": "2018-03-05T10:10:10.0000000+00:00"
                      },
                      "instrumentIdentifiers": {
                        "Instrument/default/Currency": "GBP"
                      },
                      "quantity": 100,
                      "side": "Buy",
                      "orderBookId": {
                        "scope": "MyScope",
                        "code": "UKEQ-Orders"
                      },
                      "portfolioId": {
                        "scope": "MyScope",
                        "code": "testPortfolio"
                      },
                      "id": {
                        "scope": "MyScope",
                        "code": "ORD00000123"
                      },
                      "state": "New",
                      "type": "Limit",
                      "timeInForce": "GoodTilCancel",
                      "date": "1999-06-05T00:00:00.0000000+00:00",
                      "stopPrice": {
                        "amount": 534,
                        "currency": "USD"
                      },
                      "orderInstructionId": {
                        "scope": "MyScope",
                        "code": "Instruction-06"
                      },
                      "packageId": {
                        "scope": "MyScope",
                        "code": "UKEQ-Package"
                      }
                    }
                  ],
                  "links": []
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfOrder"
                },
                "example": {
                  "values": [
                    {
                      "properties": {
                        "Order/MyScope/SomeOrderProperty": {
                          "key": "Order/MyScope/SomeOrderProperty",
                          "value": {
                            "labelValue": "XYZ000034567"
                          }
                        }
                      },
                      "version": {
                        "effectiveFrom": "2018-03-05T10:10:10.0000000+00:00",
                        "asAtDate": "2018-03-05T10:10:10.0000000+00:00"
                      },
                      "instrumentIdentifiers": {
                        "Instrument/default/Currency": "GBP"
                      },
                      "quantity": 100,
                      "side": "Buy",
                      "orderBookId": {
                        "scope": "MyScope",
                        "code": "UKEQ-Orders"
                      },
                      "portfolioId": {
                        "scope": "MyScope",
                        "code": "testPortfolio"
                      },
                      "id": {
                        "scope": "MyScope",
                        "code": "ORD00000123"
                      },
                      "state": "New",
                      "type": "Limit",
                      "timeInForce": "GoodTilCancel",
                      "date": "1999-06-05T00:00:00.0000000+00:00",
                      "stopPrice": {
                        "amount": 534,
                        "currency": "USD"
                      },
                      "orderInstructionId": {
                        "scope": "MyScope",
                        "code": "Instruction-06"
                      },
                      "packageId": {
                        "scope": "MyScope",
                        "code": "UKEQ-Package"
                      }
                    }
                  ],
                  "links": []
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      }
    },
    "/api/orders/{scope}/{code}": {
      "get": {
        "tags": [
          "Orders"
        ],
        "summary": "[EARLY ACCESS] GetOrder: Get Order",
        "description": "Fetch an Order that matches the specified identifier",
        "operationId": "GetOrder",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope to which the order belongs.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string"
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The order's unique identifier.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "type": "string"
            }
          },
          {
            "name": "asAt",
            "in": "query",
            "description": "The asAt datetime at which to retrieve the order. Defaults to return the latest version of the order if not specified.",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "x-nullable": true
          },
          {
            "name": "propertyKeys",
            "in": "query",
            "description": "A list of property keys from the \"Orders\" domain to decorate onto the order.\r\n            These take the format {domain}/{scope}/{code} e.g. \"Orders/system/Name\".",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "description": "The key that uniquely identifies the property. It has the format {domain}/{scope}/{code}."
              }
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "description": "The order matching the given identifier.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                },
                "example": {
                  "properties": {
                    "Order/MyScope/SomeOrderProperty": {
                      "key": "Order/MyScope/SomeOrderProperty",
                      "value": {
                        "labelValue": "XYZ000034567"
                      }
                    }
                  },
                  "version": {
                    "effectiveFrom": "2018-03-05T10:10:10.0000000+00:00",
                    "asAtDate": "2018-03-05T10:10:10.0000000+00:00",
                    "asAtCreated": "2018-03-05T10:10:10.0000000+00:00",
                    "userIdCreated": "OrderUser1",
                    "asAtModified": "2018-03-08T10:10:10.0000000+00:00",
                    "userIdModified": "OrderUser2",
                    "asAtVersionNumber": 2
                  },
                  "instrumentIdentifiers": {
                    "Instrument/default/Currency": "GBP"
                  },
                  "quantity": 100,
                  "side": "Buy",
                  "orderBookId": {
                    "scope": "MyScope",
                    "code": "UKEQ-Orders"
                  },
                  "portfolioId": {
                    "scope": "MyScope",
                    "code": "testPortfolio"
                  },
                  "id": {
                    "scope": "MyScope",
                    "code": "ORD00000123"
                  },
                  "state": "New",
                  "type": "Limit",
                  "timeInForce": "GoodTilCancel",
                  "date": "1999-06-05T00:00:00.0000000+00:00",
                  "limitPrice": {
                    "amount": 534,
                    "currency": "USD"
                  },
                  "orderInstructionId": {
                    "scope": "MyScope",
                    "code": "Instruction-06"
                  },
                  "packageId": {
                    "scope": "MyScope",
                    "code": "UKEQ-Package"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                },
                "example": {
                  "properties": {
                    "Order/MyScope/SomeOrderProperty": {
                      "key": "Order/MyScope/SomeOrderProperty",
                      "value": {
                        "labelValue": "XYZ000034567"
                      }
                    }
                  },
                  "version": {
                    "effectiveFrom": "2018-03-05T10:10:10.0000000+00:00",
                    "asAtDate": "2018-03-05T10:10:10.0000000+00:00",
                    "asAtCreated": "2018-03-05T10:10:10.0000000+00:00",
                    "userIdCreated": "OrderUser1",
                    "asAtModified": "2018-03-08T10:10:10.0000000+00:00",
                    "userIdModified": "OrderUser2",
                    "asAtVersionNumber": 2
                  },
                  "instrumentIdentifiers": {
                    "Instrument/default/Currency": "GBP"
                  },
                  "quantity": 100,
                  "side": "Buy",
                  "orderBookId": {
                    "scope": "MyScope",
                    "code": "UKEQ-Orders"
                  },
                  "portfolioId": {
                    "scope": "MyScope",
                    "code": "testPortfolio"
                  },
                  "id": {
                    "scope": "MyScope",
                    "code": "ORD00000123"
                  },
                  "state": "New",
                  "type": "Limit",
                  "timeInForce": "GoodTilCancel",
                  "date": "1999-06-05T00:00:00.0000000+00:00",
                  "limitPrice": {
                    "amount": 534,
                    "currency": "USD"
                  },
                  "orderInstructionId": {
                    "scope": "MyScope",
                    "code": "Instruction-06"
                  },
                  "packageId": {
                    "scope": "MyScope",
                    "code": "UKEQ-Package"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                },
                "example": {
                  "properties": {
                    "Order/MyScope/SomeOrderProperty": {
                      "key": "Order/MyScope/SomeOrderProperty",
                      "value": {
                        "labelValue": "XYZ000034567"
                      }
                    }
                  },
                  "version": {
                    "effectiveFrom": "2018-03-05T10:10:10.0000000+00:00",
                    "asAtDate": "2018-03-05T10:10:10.0000000+00:00",
                    "asAtCreated": "2018-03-05T10:10:10.0000000+00:00",
                    "userIdCreated": "OrderUser1",
                    "asAtModified": "2018-03-08T10:10:10.0000000+00:00",
                    "userIdModified": "OrderUser2",
                    "asAtVersionNumber": 2
                  },
                  "instrumentIdentifiers": {
                    "Instrument/default/Currency": "GBP"
                  },
                  "quantity": 100,
                  "side": "Buy",
                  "orderBookId": {
                    "scope": "MyScope",
                    "code": "UKEQ-Orders"
                  },
                  "portfolioId": {
                    "scope": "MyScope",
                    "code": "testPortfolio"
                  },
                  "id": {
                    "scope": "MyScope",
                    "code": "ORD00000123"
                  },
                  "state": "New",
                  "type": "Limit",
                  "timeInForce": "GoodTilCancel",
                  "date": "1999-06-05T00:00:00.0000000+00:00",
                  "limitPrice": {
                    "amount": 534,
                    "currency": "USD"
                  },
                  "orderInstructionId": {
                    "scope": "MyScope",
                    "code": "Instruction-06"
                  },
                  "packageId": {
                    "scope": "MyScope",
                    "code": "UKEQ-Package"
                  }
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      },
      "delete": {
        "tags": [
          "Orders"
        ],
        "summary": "[EARLY ACCESS] DeleteOrder: Delete order",
        "description": "Delete an order. Deletion will be valid from the order's creation datetime.\r\nThis means that the order will no longer exist at any effective datetime from the asAt datetime of deletion.",
        "operationId": "DeleteOrder",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The order scope.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string"
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The order's code. This, together with the scope uniquely identifies the order to delete.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The response from deleting an order.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedEntityResponse"
                },
                "example": {
                  "asAt": "2018-03-05T10:10:10.0000000+00:00"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedEntityResponse"
                },
                "example": {
                  "asAt": "2018-03-05T10:10:10.0000000+00:00"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedEntityResponse"
                },
                "example": {
                  "asAt": "2018-03-05T10:10:10.0000000+00:00"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      }
    },
    "/api/participations": {
      "get": {
        "tags": [
          "Participations"
        ],
        "summary": "[EARLY ACCESS] ListParticipations: List Participations",
        "description": "Fetch the last pre-AsAt date version of each Participation in scope (does not fetch the entire history).",
        "operationId": "ListParticipations",
        "parameters": [
          {
            "name": "asAt",
            "in": "query",
            "description": "The asAt datetime at which to retrieve the participation. Defaults to return the latest version of the participation if not specified.",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "x-nullable": true
          },
          {
            "name": "page",
            "in": "query",
            "description": "The pagination token to use to continue listing participations from a previous call to list participations.\r\n            This value is returned from the previous call. If a pagination token is provided the sortBy, filter, effectiveAt, and asAt fields\r\n            must not have changed since the original request.",
            "schema": {
              "maxLength": 500,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\+/]*={0,3}$",
              "type": "string"
            }
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "Order the results by these fields. Use use the '-' sign to denote descending order e.g. -MyFieldName.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "x-nullable": true
          },
          {
            "name": "limit",
            "in": "query",
            "description": "When paginating, limit the number of returned results to this many.",
            "schema": {
              "maximum": 5000,
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            },
            "x-nullable": true
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Expression to filter the result set. Read more about filtering results from LUSID here:\r\n            https://support.lusid.com/filtering-results-from-lusid.",
            "schema": {
              "maxLength": 16384,
              "minLength": 0,
              "pattern": "^[\\s\\S]*$",
              "type": "string"
            }
          },
          {
            "name": "propertyKeys",
            "in": "query",
            "description": "A list of property keys from the \"Participation\" domain to decorate onto each participation.\r\n                These take the format {domain}/{scope}/{code} e.g. \"Participation/system/Name\".",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "description": "The key that uniquely identifies the property. It has the format {domain}/{scope}/{code}."
              }
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "description": "Participations in scope.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PagedResourceListOfParticipation"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagedResourceListOfParticipation"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagedResourceListOfParticipation"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      },
      "post": {
        "tags": [
          "Participations"
        ],
        "summary": "[EARLY ACCESS] UpsertParticipations: Upsert Participation",
        "description": "Upsert; update existing participations with given ids, or create new participations otherwise.",
        "operationId": "UpsertParticipations",
        "requestBody": {
          "description": "The collection of participation requests.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/ParticipationSetRequest"
              },
              "example": {
                "requests": [
                  {
                    "id": {
                      "scope": "MyScope",
                      "code": "PART00000123"
                    },
                    "placementId": {
                      "scope": "MyScope",
                      "code": "PLAC00000123"
                    },
                    "orderId": {
                      "scope": "MyScope",
                      "code": "ORDER00000123"
                    }
                  }
                ]
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ParticipationSetRequest"
              },
              "example": {
                "requests": [
                  {
                    "id": {
                      "scope": "MyScope",
                      "code": "PART00000123"
                    },
                    "placementId": {
                      "scope": "MyScope",
                      "code": "PLAC00000123"
                    },
                    "orderId": {
                      "scope": "MyScope",
                      "code": "ORDER00000123"
                    }
                  }
                ]
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ParticipationSetRequest"
              },
              "example": {
                "requests": [
                  {
                    "id": {
                      "scope": "MyScope",
                      "code": "PART00000123"
                    },
                    "placementId": {
                      "scope": "MyScope",
                      "code": "PLAC00000123"
                    },
                    "orderId": {
                      "scope": "MyScope",
                      "code": "ORDER00000123"
                    }
                  }
                ]
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ParticipationSetRequest"
              },
              "example": {
                "requests": [
                  {
                    "id": {
                      "scope": "MyScope",
                      "code": "PART00000123"
                    },
                    "placementId": {
                      "scope": "MyScope",
                      "code": "PLAC00000123"
                    },
                    "orderId": {
                      "scope": "MyScope",
                      "code": "ORDER00000123"
                    }
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "A collection of participations.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfParticipation"
                },
                "example": {
                  "values": [
                    {
                      "id": {
                        "scope": "MyScope",
                        "code": "BLOC00000123"
                      },
                      "placementId": {
                        "scope": "MyScope",
                        "code": "PLAC00000123"
                      },
                      "orderId": {
                        "scope": "MyScope",
                        "code": "ORD00000123"
                      },
                      "version": {
                        "effectiveFrom": "2018-03-05T10:10:10.0000000+00:00",
                        "asAtDate": "2018-03-05T10:10:10.0000000+00:00",
                        "asAtCreated": "2018-03-05T10:10:10.0000000+00:00",
                        "userIdCreated": "ParticipationUser1",
                        "asAtModified": "2018-03-08T10:10:10.0000000+00:00",
                        "userIdModified": "ParticipationUser2",
                        "asAtVersionNumber": 2
                      }
                    }
                  ],
                  "links": []
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfParticipation"
                },
                "example": {
                  "values": [
                    {
                      "id": {
                        "scope": "MyScope",
                        "code": "BLOC00000123"
                      },
                      "placementId": {
                        "scope": "MyScope",
                        "code": "PLAC00000123"
                      },
                      "orderId": {
                        "scope": "MyScope",
                        "code": "ORD00000123"
                      },
                      "version": {
                        "effectiveFrom": "2018-03-05T10:10:10.0000000+00:00",
                        "asAtDate": "2018-03-05T10:10:10.0000000+00:00",
                        "asAtCreated": "2018-03-05T10:10:10.0000000+00:00",
                        "userIdCreated": "ParticipationUser1",
                        "asAtModified": "2018-03-08T10:10:10.0000000+00:00",
                        "userIdModified": "ParticipationUser2",
                        "asAtVersionNumber": 2
                      }
                    }
                  ],
                  "links": []
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfParticipation"
                },
                "example": {
                  "values": [
                    {
                      "id": {
                        "scope": "MyScope",
                        "code": "BLOC00000123"
                      },
                      "placementId": {
                        "scope": "MyScope",
                        "code": "PLAC00000123"
                      },
                      "orderId": {
                        "scope": "MyScope",
                        "code": "ORD00000123"
                      },
                      "version": {
                        "effectiveFrom": "2018-03-05T10:10:10.0000000+00:00",
                        "asAtDate": "2018-03-05T10:10:10.0000000+00:00",
                        "asAtCreated": "2018-03-05T10:10:10.0000000+00:00",
                        "userIdCreated": "ParticipationUser1",
                        "asAtModified": "2018-03-08T10:10:10.0000000+00:00",
                        "userIdModified": "ParticipationUser2",
                        "asAtVersionNumber": 2
                      }
                    }
                  ],
                  "links": []
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      }
    },
    "/api/participations/{scope}/{code}": {
      "get": {
        "tags": [
          "Participations"
        ],
        "summary": "[EARLY ACCESS] GetParticipation: Get Participation",
        "description": "Fetch a Participation that matches the specified identifier",
        "operationId": "GetParticipation",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope to which the participation belongs.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string"
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The participation's unique identifier.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "type": "string"
            }
          },
          {
            "name": "asAt",
            "in": "query",
            "description": "The asAt datetime at which to retrieve the participation. Defaults to return the latest version of the participation if not specified.",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "x-nullable": true
          },
          {
            "name": "propertyKeys",
            "in": "query",
            "description": "A list of property keys from the \"Participation\" domain to decorate onto the participation.\r\n            These take the format {domain}/{scope}/{code} e.g. \"Participation/system/Name\".",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "description": "The key that uniquely identifies the property. It has the format {domain}/{scope}/{code}."
              }
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "description": "The participation matching the given identifier.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Participation"
                },
                "example": {
                  "id": {
                    "scope": "MyScope",
                    "code": "BLOC00000123"
                  },
                  "placementId": {
                    "scope": "MyScope",
                    "code": "PLAC00000123"
                  },
                  "orderId": {
                    "scope": "MyScope",
                    "code": "ORD00000123"
                  },
                  "version": {
                    "effectiveFrom": "2018-03-05T10:10:10.0000000+00:00",
                    "asAtDate": "2018-03-05T10:10:10.0000000+00:00",
                    "asAtCreated": "2018-03-05T10:10:10.0000000+00:00",
                    "userIdCreated": "ParticipationUser1",
                    "asAtModified": "2018-03-08T10:10:10.0000000+00:00",
                    "userIdModified": "ParticipationUser2",
                    "asAtVersionNumber": 2
                  }
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Participation"
                },
                "example": {
                  "id": {
                    "scope": "MyScope",
                    "code": "BLOC00000123"
                  },
                  "placementId": {
                    "scope": "MyScope",
                    "code": "PLAC00000123"
                  },
                  "orderId": {
                    "scope": "MyScope",
                    "code": "ORD00000123"
                  },
                  "version": {
                    "effectiveFrom": "2018-03-05T10:10:10.0000000+00:00",
                    "asAtDate": "2018-03-05T10:10:10.0000000+00:00",
                    "asAtCreated": "2018-03-05T10:10:10.0000000+00:00",
                    "userIdCreated": "ParticipationUser1",
                    "asAtModified": "2018-03-08T10:10:10.0000000+00:00",
                    "userIdModified": "ParticipationUser2",
                    "asAtVersionNumber": 2
                  }
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Participation"
                },
                "example": {
                  "id": {
                    "scope": "MyScope",
                    "code": "BLOC00000123"
                  },
                  "placementId": {
                    "scope": "MyScope",
                    "code": "PLAC00000123"
                  },
                  "orderId": {
                    "scope": "MyScope",
                    "code": "ORD00000123"
                  },
                  "version": {
                    "effectiveFrom": "2018-03-05T10:10:10.0000000+00:00",
                    "asAtDate": "2018-03-05T10:10:10.0000000+00:00",
                    "asAtCreated": "2018-03-05T10:10:10.0000000+00:00",
                    "userIdCreated": "ParticipationUser1",
                    "asAtModified": "2018-03-08T10:10:10.0000000+00:00",
                    "userIdModified": "ParticipationUser2",
                    "asAtVersionNumber": 2
                  }
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      },
      "delete": {
        "tags": [
          "Participations"
        ],
        "summary": "[EARLY ACCESS] DeleteParticipation: Delete participation",
        "description": "Delete an participation. Deletion will be valid from the participation's creation datetime.\r\nThis means that the participation will no longer exist at any effective datetime from the asAt datetime of deletion.",
        "operationId": "DeleteParticipation",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The participation scope.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string"
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The participation's code. This, together with the scope uniquely identifies the participation to delete.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The response from deleting an participation.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedEntityResponse"
                },
                "example": {
                  "asAt": "2018-03-05T10:10:10.0000000+00:00"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedEntityResponse"
                },
                "example": {
                  "asAt": "2018-03-05T10:10:10.0000000+00:00"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedEntityResponse"
                },
                "example": {
                  "asAt": "2018-03-05T10:10:10.0000000+00:00"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      }
    },
    "/api/persons": {
      "post": {
        "tags": [
          "Persons"
        ],
        "summary": "[EARLY ACCESS] UpsertPerson: Upsert Person",
        "description": "Create or update a new person under the specified scope.",
        "operationId": "UpsertPerson",
        "requestBody": {
          "description": "Request to create or update a person.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/UpsertPersonRequest"
              },
              "example": {
                "identifiers": {
                  "Person/HrSystem1/InternalId": {
                    "key": "Person/HrSystem1/InternalId",
                    "value": {
                      "labelValue": "XY10001111"
                    }
                  },
                  "Person/PayrollSystem1/Id": {
                    "key": "Person/PayrollSystem1/Id",
                    "value": {
                      "labelValue": "HSI3453456"
                    }
                  },
                  "Person/CompanyIntranet/LoginId": {
                    "key": "Person/CompanyIntranet/LoginId",
                    "value": {
                      "labelValue": "johnsmith001"
                    }
                  }
                },
                "properties": {
                  "Person/PersonalDetails/Name": {
                    "key": "Person/PersonalDetails/Name",
                    "value": {
                      "labelValue": "John Smith"
                    }
                  },
                  "Person/CompanyDetails/Role": {
                    "key": "Person/CompanyDetails/Role",
                    "value": {
                      "labelValueSet": {
                        "values": [
                          "CustomerServiceRepresentative",
                          "SalesRepresentative"
                        ]
                      }
                    },
                    "effectiveFrom": "2016-07-01T00:00:00.0000000+00:00"
                  }
                },
                "displayName": "Person1DisplayName",
                "description": "Person1Description"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpsertPersonRequest"
              },
              "example": {
                "identifiers": {
                  "Person/HrSystem1/InternalId": {
                    "key": "Person/HrSystem1/InternalId",
                    "value": {
                      "labelValue": "XY10001111"
                    }
                  },
                  "Person/PayrollSystem1/Id": {
                    "key": "Person/PayrollSystem1/Id",
                    "value": {
                      "labelValue": "HSI3453456"
                    }
                  },
                  "Person/CompanyIntranet/LoginId": {
                    "key": "Person/CompanyIntranet/LoginId",
                    "value": {
                      "labelValue": "johnsmith001"
                    }
                  }
                },
                "properties": {
                  "Person/PersonalDetails/Name": {
                    "key": "Person/PersonalDetails/Name",
                    "value": {
                      "labelValue": "John Smith"
                    }
                  },
                  "Person/CompanyDetails/Role": {
                    "key": "Person/CompanyDetails/Role",
                    "value": {
                      "labelValueSet": {
                        "values": [
                          "CustomerServiceRepresentative",
                          "SalesRepresentative"
                        ]
                      }
                    },
                    "effectiveFrom": "2016-07-01T00:00:00.0000000+00:00"
                  }
                },
                "displayName": "Person1DisplayName",
                "description": "Person1Description"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/UpsertPersonRequest"
              },
              "example": {
                "identifiers": {
                  "Person/HrSystem1/InternalId": {
                    "key": "Person/HrSystem1/InternalId",
                    "value": {
                      "labelValue": "XY10001111"
                    }
                  },
                  "Person/PayrollSystem1/Id": {
                    "key": "Person/PayrollSystem1/Id",
                    "value": {
                      "labelValue": "HSI3453456"
                    }
                  },
                  "Person/CompanyIntranet/LoginId": {
                    "key": "Person/CompanyIntranet/LoginId",
                    "value": {
                      "labelValue": "johnsmith001"
                    }
                  }
                },
                "properties": {
                  "Person/PersonalDetails/Name": {
                    "key": "Person/PersonalDetails/Name",
                    "value": {
                      "labelValue": "John Smith"
                    }
                  },
                  "Person/CompanyDetails/Role": {
                    "key": "Person/CompanyDetails/Role",
                    "value": {
                      "labelValueSet": {
                        "values": [
                          "CustomerServiceRepresentative",
                          "SalesRepresentative"
                        ]
                      }
                    },
                    "effectiveFrom": "2016-07-01T00:00:00.0000000+00:00"
                  }
                },
                "displayName": "Person1DisplayName",
                "description": "Person1Description"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/UpsertPersonRequest"
              },
              "example": {
                "identifiers": {
                  "Person/HrSystem1/InternalId": {
                    "key": "Person/HrSystem1/InternalId",
                    "value": {
                      "labelValue": "XY10001111"
                    }
                  },
                  "Person/PayrollSystem1/Id": {
                    "key": "Person/PayrollSystem1/Id",
                    "value": {
                      "labelValue": "HSI3453456"
                    }
                  },
                  "Person/CompanyIntranet/LoginId": {
                    "key": "Person/CompanyIntranet/LoginId",
                    "value": {
                      "labelValue": "johnsmith001"
                    }
                  }
                },
                "properties": {
                  "Person/PersonalDetails/Name": {
                    "key": "Person/PersonalDetails/Name",
                    "value": {
                      "labelValue": "John Smith"
                    }
                  },
                  "Person/CompanyDetails/Role": {
                    "key": "Person/CompanyDetails/Role",
                    "value": {
                      "labelValueSet": {
                        "values": [
                          "CustomerServiceRepresentative",
                          "SalesRepresentative"
                        ]
                      }
                    },
                    "effectiveFrom": "2016-07-01T00:00:00.0000000+00:00"
                  }
                },
                "displayName": "Person1DisplayName",
                "description": "Person1Description"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "The newly created or updated person",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Person"
                },
                "example": {
                  "displayName": "Person1DisplayName",
                  "description": "Person1Description",
                  "href": "https://example.com",
                  "lusidPersonId": "LUID_00003D4V",
                  "identifiers": {
                    "Person/HrSystem1/InternalId": {
                      "key": "Person/HrSystem1/InternalId",
                      "value": {
                        "labelValue": "XY10001111"
                      }
                    },
                    "Person/PayrollSystem1/Id": {
                      "key": "Person/PayrollSystem1/Id",
                      "value": {
                        "labelValue": "HSI3453456"
                      }
                    },
                    "Person/CompanyIntranet/LoginId": {
                      "key": "Person/CompanyIntranet/LoginId",
                      "value": {
                        "labelValue": "johnsmith001"
                      }
                    }
                  },
                  "properties": {
                    "Person/PersonalDetails/Name": {
                      "key": "Person/PersonalDetails/Name",
                      "value": {
                        "labelValue": "John Smith"
                      }
                    },
                    "Person/CompanyDetails/Role": {
                      "key": "Person/CompanyDetails/Role",
                      "value": {
                        "labelValueSet": {
                          "values": [
                            "CustomerServiceRepresentative",
                            "SalesRepresentative"
                          ]
                        }
                      },
                      "effectiveFrom": "2016-07-01T00:00:00.0000000+00:00"
                    }
                  },
                  "relationships": [],
                  "version": {
                    "effectiveFrom": "2019-01-01T12:00:00.0000000+00:00",
                    "asAtDate": "2019-01-01T12:00:00.0100000+00:00",
                    "asAtCreated": "2019-01-01T12:00:00.0100000+00:00",
                    "userIdCreated": "UserId1",
                    "asAtModified": "2019-01-01T12:00:00.0100000+00:00",
                    "userIdModified": "UserId1",
                    "asAtVersionNumber": 1
                  }
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Person"
                },
                "example": {
                  "displayName": "Person1DisplayName",
                  "description": "Person1Description",
                  "href": "https://example.com",
                  "lusidPersonId": "LUID_00003D4V",
                  "identifiers": {
                    "Person/HrSystem1/InternalId": {
                      "key": "Person/HrSystem1/InternalId",
                      "value": {
                        "labelValue": "XY10001111"
                      }
                    },
                    "Person/PayrollSystem1/Id": {
                      "key": "Person/PayrollSystem1/Id",
                      "value": {
                        "labelValue": "HSI3453456"
                      }
                    },
                    "Person/CompanyIntranet/LoginId": {
                      "key": "Person/CompanyIntranet/LoginId",
                      "value": {
                        "labelValue": "johnsmith001"
                      }
                    }
                  },
                  "properties": {
                    "Person/PersonalDetails/Name": {
                      "key": "Person/PersonalDetails/Name",
                      "value": {
                        "labelValue": "John Smith"
                      }
                    },
                    "Person/CompanyDetails/Role": {
                      "key": "Person/CompanyDetails/Role",
                      "value": {
                        "labelValueSet": {
                          "values": [
                            "CustomerServiceRepresentative",
                            "SalesRepresentative"
                          ]
                        }
                      },
                      "effectiveFrom": "2016-07-01T00:00:00.0000000+00:00"
                    }
                  },
                  "relationships": [],
                  "version": {
                    "effectiveFrom": "2019-01-01T12:00:00.0000000+00:00",
                    "asAtDate": "2019-01-01T12:00:00.0100000+00:00",
                    "asAtCreated": "2019-01-01T12:00:00.0100000+00:00",
                    "userIdCreated": "UserId1",
                    "asAtModified": "2019-01-01T12:00:00.0100000+00:00",
                    "userIdModified": "UserId1",
                    "asAtVersionNumber": 1
                  }
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Person"
                },
                "example": {
                  "displayName": "Person1DisplayName",
                  "description": "Person1Description",
                  "href": "https://example.com",
                  "lusidPersonId": "LUID_00003D4V",
                  "identifiers": {
                    "Person/HrSystem1/InternalId": {
                      "key": "Person/HrSystem1/InternalId",
                      "value": {
                        "labelValue": "XY10001111"
                      }
                    },
                    "Person/PayrollSystem1/Id": {
                      "key": "Person/PayrollSystem1/Id",
                      "value": {
                        "labelValue": "HSI3453456"
                      }
                    },
                    "Person/CompanyIntranet/LoginId": {
                      "key": "Person/CompanyIntranet/LoginId",
                      "value": {
                        "labelValue": "johnsmith001"
                      }
                    }
                  },
                  "properties": {
                    "Person/PersonalDetails/Name": {
                      "key": "Person/PersonalDetails/Name",
                      "value": {
                        "labelValue": "John Smith"
                      }
                    },
                    "Person/CompanyDetails/Role": {
                      "key": "Person/CompanyDetails/Role",
                      "value": {
                        "labelValueSet": {
                          "values": [
                            "CustomerServiceRepresentative",
                            "SalesRepresentative"
                          ]
                        }
                      },
                      "effectiveFrom": "2016-07-01T00:00:00.0000000+00:00"
                    }
                  },
                  "relationships": [],
                  "version": {
                    "effectiveFrom": "2019-01-01T12:00:00.0000000+00:00",
                    "asAtDate": "2019-01-01T12:00:00.0100000+00:00",
                    "asAtCreated": "2019-01-01T12:00:00.0100000+00:00",
                    "userIdCreated": "UserId1",
                    "asAtModified": "2019-01-01T12:00:00.0100000+00:00",
                    "userIdModified": "UserId1",
                    "asAtVersionNumber": 1
                  }
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      },
      "get": {
        "tags": [
          "Persons"
        ],
        "summary": "[EARLY ACCESS] ListAllPersons: List All Persons",
        "description": "List all persons which the user is entitled to see.",
        "operationId": "ListAllPersons",
        "parameters": [
          {
            "name": "effectiveAt",
            "in": "query",
            "description": "The effective datetime or cut label at which to list the people. Defaults to the current LUSID\r\n            system datetime if not specified.",
            "schema": {
              "type": "string",
              "format": "dateorcutlabel"
            }
          },
          {
            "name": "asAt",
            "in": "query",
            "description": "The asAt datetime at which to list the people. Defaults to return the latest version\r\n            of each people if not specified.",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "x-nullable": true
          },
          {
            "name": "page",
            "in": "query",
            "description": "The pagination token to use to continue listing persons from a previous call to list persons. This\r\n            value is returned from the previous call. If a pagination token is provided the filter, effectiveAt\r\n            and asAt fields must not have changed since the original request. Also, if set, a start value cannot be provided.",
            "schema": {
              "maxLength": 500,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\+/]*={0,3}$",
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "When paginating, limit the number of returned results to this many. Defaults to 5000 if not specified.",
            "schema": {
              "maximum": 5000,
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            },
            "x-nullable": true
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Expression to filter the result set. \r\n            For example, to filter on the display name, use \"displayName eq 'John'\"\r\n            Read more about filtering results from LUSID here https://support.lusid.com/filtering-results-from-lusid.",
            "schema": {
              "maxLength": 16384,
              "minLength": 0,
              "pattern": "^[\\s\\S]*$",
              "type": "string"
            }
          },
          {
            "name": "propertyKeys",
            "in": "query",
            "description": "A list of property keys from the \"Person\" domain to decorate onto each person, \r\n            or from any domain that supports relationships to decorate onto related entities.\r\n            These take the format {domain}/{scope}/{code} e.g. \"Person/ContactDetails/Address\".",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "description": "The key that uniquely identifies the property. It has the format {domain}/{scope}/{code}."
              }
            },
            "x-nullable": true
          },
          {
            "name": "relationshipDefinitionIds",
            "in": "query",
            "description": "A list of relationship definitions that are used to decorate related entities\r\n            onto the persons in the response. These must take the form {relationshipDefinitionScope}/{relationshipDefinitionCode}.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "description": "Identifiers of an entity"
              }
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "description": "Existing people",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfPerson"
                },
                "example": {
                  "values": [
                    {
                      "displayName": "Person1DisplayName",
                      "description": "Person1Description",
                      "href": "https://example.com",
                      "lusidPersonId": "LUID_00003D4V",
                      "identifiers": {
                        "Person/HrSystem1/InternalId": {
                          "key": "Person/HrSystem1/InternalId",
                          "value": {
                            "labelValue": "XY10001111"
                          }
                        },
                        "Person/PayrollSystem1/Id": {
                          "key": "Person/PayrollSystem1/Id",
                          "value": {
                            "labelValue": "HSI3453456"
                          }
                        },
                        "Person/CompanyIntranet/LoginId": {
                          "key": "Person/CompanyIntranet/LoginId",
                          "value": {
                            "labelValue": "johnsmith001"
                          }
                        }
                      },
                      "properties": {
                        "Person/PersonalDetails/Name": {
                          "key": "Person/PersonalDetails/Name",
                          "value": {
                            "labelValue": "John Smith"
                          }
                        },
                        "Person/CompanyDetails/Role": {
                          "key": "Person/CompanyDetails/Role",
                          "value": {
                            "labelValueSet": {
                              "values": [
                                "CustomerServiceRepresentative",
                                "SalesRepresentative"
                              ]
                            }
                          },
                          "effectiveFrom": "2016-07-01T00:00:00.0000000+00:00"
                        }
                      },
                      "relationships": [],
                      "version": {
                        "effectiveFrom": "2019-01-01T12:00:00.0000000+00:00",
                        "asAtDate": "2019-01-01T12:00:00.0100000+00:00",
                        "asAtCreated": "2019-01-01T12:00:00.0100000+00:00",
                        "userIdCreated": "UserId1",
                        "asAtModified": "2019-01-01T12:00:00.0100000+00:00",
                        "userIdModified": "UserId1",
                        "asAtVersionNumber": 1
                      }
                    },
                    {
                      "displayName": "Person2DisplayName",
                      "description": "Person2Description",
                      "href": "https://example.com",
                      "lusidPersonId": "LUID_00003D55",
                      "identifiers": {
                        "Person/HrSystem1/InternalId": {
                          "key": "Person/HrSystem1/InternalId",
                          "value": {
                            "labelValue": "XY10008377"
                          }
                        },
                        "Person/PayrollSystem1/Id": {
                          "key": "Person/PayrollSystem1/Id",
                          "value": {
                            "labelValue": "LFK9172001"
                          }
                        },
                        "Person/CompanyIntranet/LoginId": {
                          "key": "Person/CompanyIntranet/LoginId",
                          "value": {
                            "labelValue": "emilyevans002"
                          }
                        }
                      },
                      "properties": {
                        "Person/PersonalDetails/Name": {
                          "key": "Person/PersonalDetails/Name",
                          "value": {
                            "labelValue": "Emily Evans"
                          }
                        },
                        "Person/ContactDetails/Phone": {
                          "key": "Person/ContactDetails/Phone",
                          "value": {
                            "labelValue": "01005675678"
                          }
                        },
                        "Person/CompanyDetails/Role": {
                          "key": "Person/CompanyDetails/Role",
                          "value": {
                            "labelValue": "Manager"
                          },
                          "effectiveFrom": "2018-04-01T00:00:00.0000000+00:00"
                        }
                      },
                      "relationships": [],
                      "version": {
                        "effectiveFrom": "2019-01-01T12:00:00.0000000+00:00",
                        "asAtDate": "2019-01-01T12:00:00.0100000+00:00",
                        "asAtCreated": "2019-01-01T12:00:00.0100000+00:00",
                        "userIdCreated": "UserId1",
                        "asAtModified": "2019-01-01T12:00:00.0100000+00:00",
                        "userIdModified": "UserId1",
                        "asAtVersionNumber": 1
                      }
                    }
                  ],
                  "href": "http://example.com",
                  "links": []
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfPerson"
                },
                "example": {
                  "values": [
                    {
                      "displayName": "Person1DisplayName",
                      "description": "Person1Description",
                      "href": "https://example.com",
                      "lusidPersonId": "LUID_00003D4V",
                      "identifiers": {
                        "Person/HrSystem1/InternalId": {
                          "key": "Person/HrSystem1/InternalId",
                          "value": {
                            "labelValue": "XY10001111"
                          }
                        },
                        "Person/PayrollSystem1/Id": {
                          "key": "Person/PayrollSystem1/Id",
                          "value": {
                            "labelValue": "HSI3453456"
                          }
                        },
                        "Person/CompanyIntranet/LoginId": {
                          "key": "Person/CompanyIntranet/LoginId",
                          "value": {
                            "labelValue": "johnsmith001"
                          }
                        }
                      },
                      "properties": {
                        "Person/PersonalDetails/Name": {
                          "key": "Person/PersonalDetails/Name",
                          "value": {
                            "labelValue": "John Smith"
                          }
                        },
                        "Person/CompanyDetails/Role": {
                          "key": "Person/CompanyDetails/Role",
                          "value": {
                            "labelValueSet": {
                              "values": [
                                "CustomerServiceRepresentative",
                                "SalesRepresentative"
                              ]
                            }
                          },
                          "effectiveFrom": "2016-07-01T00:00:00.0000000+00:00"
                        }
                      },
                      "relationships": [],
                      "version": {
                        "effectiveFrom": "2019-01-01T12:00:00.0000000+00:00",
                        "asAtDate": "2019-01-01T12:00:00.0100000+00:00",
                        "asAtCreated": "2019-01-01T12:00:00.0100000+00:00",
                        "userIdCreated": "UserId1",
                        "asAtModified": "2019-01-01T12:00:00.0100000+00:00",
                        "userIdModified": "UserId1",
                        "asAtVersionNumber": 1
                      }
                    },
                    {
                      "displayName": "Person2DisplayName",
                      "description": "Person2Description",
                      "href": "https://example.com",
                      "lusidPersonId": "LUID_00003D55",
                      "identifiers": {
                        "Person/HrSystem1/InternalId": {
                          "key": "Person/HrSystem1/InternalId",
                          "value": {
                            "labelValue": "XY10008377"
                          }
                        },
                        "Person/PayrollSystem1/Id": {
                          "key": "Person/PayrollSystem1/Id",
                          "value": {
                            "labelValue": "LFK9172001"
                          }
                        },
                        "Person/CompanyIntranet/LoginId": {
                          "key": "Person/CompanyIntranet/LoginId",
                          "value": {
                            "labelValue": "emilyevans002"
                          }
                        }
                      },
                      "properties": {
                        "Person/PersonalDetails/Name": {
                          "key": "Person/PersonalDetails/Name",
                          "value": {
                            "labelValue": "Emily Evans"
                          }
                        },
                        "Person/ContactDetails/Phone": {
                          "key": "Person/ContactDetails/Phone",
                          "value": {
                            "labelValue": "01005675678"
                          }
                        },
                        "Person/CompanyDetails/Role": {
                          "key": "Person/CompanyDetails/Role",
                          "value": {
                            "labelValue": "Manager"
                          },
                          "effectiveFrom": "2018-04-01T00:00:00.0000000+00:00"
                        }
                      },
                      "relationships": [],
                      "version": {
                        "effectiveFrom": "2019-01-01T12:00:00.0000000+00:00",
                        "asAtDate": "2019-01-01T12:00:00.0100000+00:00",
                        "asAtCreated": "2019-01-01T12:00:00.0100000+00:00",
                        "userIdCreated": "UserId1",
                        "asAtModified": "2019-01-01T12:00:00.0100000+00:00",
                        "userIdModified": "UserId1",
                        "asAtVersionNumber": 1
                      }
                    }
                  ],
                  "href": "http://example.com",
                  "links": []
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfPerson"
                },
                "example": {
                  "values": [
                    {
                      "displayName": "Person1DisplayName",
                      "description": "Person1Description",
                      "href": "https://example.com",
                      "lusidPersonId": "LUID_00003D4V",
                      "identifiers": {
                        "Person/HrSystem1/InternalId": {
                          "key": "Person/HrSystem1/InternalId",
                          "value": {
                            "labelValue": "XY10001111"
                          }
                        },
                        "Person/PayrollSystem1/Id": {
                          "key": "Person/PayrollSystem1/Id",
                          "value": {
                            "labelValue": "HSI3453456"
                          }
                        },
                        "Person/CompanyIntranet/LoginId": {
                          "key": "Person/CompanyIntranet/LoginId",
                          "value": {
                            "labelValue": "johnsmith001"
                          }
                        }
                      },
                      "properties": {
                        "Person/PersonalDetails/Name": {
                          "key": "Person/PersonalDetails/Name",
                          "value": {
                            "labelValue": "John Smith"
                          }
                        },
                        "Person/CompanyDetails/Role": {
                          "key": "Person/CompanyDetails/Role",
                          "value": {
                            "labelValueSet": {
                              "values": [
                                "CustomerServiceRepresentative",
                                "SalesRepresentative"
                              ]
                            }
                          },
                          "effectiveFrom": "2016-07-01T00:00:00.0000000+00:00"
                        }
                      },
                      "relationships": [],
                      "version": {
                        "effectiveFrom": "2019-01-01T12:00:00.0000000+00:00",
                        "asAtDate": "2019-01-01T12:00:00.0100000+00:00",
                        "asAtCreated": "2019-01-01T12:00:00.0100000+00:00",
                        "userIdCreated": "UserId1",
                        "asAtModified": "2019-01-01T12:00:00.0100000+00:00",
                        "userIdModified": "UserId1",
                        "asAtVersionNumber": 1
                      }
                    },
                    {
                      "displayName": "Person2DisplayName",
                      "description": "Person2Description",
                      "href": "https://example.com",
                      "lusidPersonId": "LUID_00003D55",
                      "identifiers": {
                        "Person/HrSystem1/InternalId": {
                          "key": "Person/HrSystem1/InternalId",
                          "value": {
                            "labelValue": "XY10008377"
                          }
                        },
                        "Person/PayrollSystem1/Id": {
                          "key": "Person/PayrollSystem1/Id",
                          "value": {
                            "labelValue": "LFK9172001"
                          }
                        },
                        "Person/CompanyIntranet/LoginId": {
                          "key": "Person/CompanyIntranet/LoginId",
                          "value": {
                            "labelValue": "emilyevans002"
                          }
                        }
                      },
                      "properties": {
                        "Person/PersonalDetails/Name": {
                          "key": "Person/PersonalDetails/Name",
                          "value": {
                            "labelValue": "Emily Evans"
                          }
                        },
                        "Person/ContactDetails/Phone": {
                          "key": "Person/ContactDetails/Phone",
                          "value": {
                            "labelValue": "01005675678"
                          }
                        },
                        "Person/CompanyDetails/Role": {
                          "key": "Person/CompanyDetails/Role",
                          "value": {
                            "labelValue": "Manager"
                          },
                          "effectiveFrom": "2018-04-01T00:00:00.0000000+00:00"
                        }
                      },
                      "relationships": [],
                      "version": {
                        "effectiveFrom": "2019-01-01T12:00:00.0000000+00:00",
                        "asAtDate": "2019-01-01T12:00:00.0100000+00:00",
                        "asAtCreated": "2019-01-01T12:00:00.0100000+00:00",
                        "userIdCreated": "UserId1",
                        "asAtModified": "2019-01-01T12:00:00.0100000+00:00",
                        "userIdModified": "UserId1",
                        "asAtVersionNumber": 1
                      }
                    }
                  ],
                  "href": "http://example.com",
                  "links": []
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      }
    },
    "/api/persons/{idTypeScope}/{idTypeCode}": {
      "get": {
        "tags": [
          "Persons"
        ],
        "summary": "[EARLY ACCESS] ListPersons: List Persons",
        "description": "List persons which have identifiers of a specific identifier type's scope and code, and satisfies filter criteria.",
        "operationId": "ListPersons",
        "parameters": [
          {
            "name": "idTypeScope",
            "in": "path",
            "description": "Scope of the person identifier type.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "idTypeCode",
            "in": "path",
            "description": "Code of the person identifier type.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "effectiveAt",
            "in": "query",
            "description": "The effective datetime or cut label at which to list the people. Defaults to the current LUSID\r\n            system datetime if not specified.",
            "schema": {
              "type": "string",
              "format": "dateorcutlabel"
            }
          },
          {
            "name": "asAt",
            "in": "query",
            "description": "The asAt datetime at which to list the people. Defaults to return the latest version\r\n            of each people if not specified.",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "x-nullable": true
          },
          {
            "name": "page",
            "in": "query",
            "description": "The pagination token to use to continue listing persons from a previous call to list persons. This\r\n            value is returned from the previous call. If a pagination token is provided the filter, effectiveAt\r\n            and asAt fields must not have changed since the original request. Also, if set, a start value cannot be provided.",
            "schema": {
              "maxLength": 500,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\+/]*={0,3}$",
              "type": "string"
            }
          },
          {
            "name": "start",
            "in": "query",
            "description": "When paginating, skip this number of results.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-nullable": true
          },
          {
            "name": "limit",
            "in": "query",
            "description": "When paginating, limit the number of returned results to this many. Defaults to 100 if not specified.",
            "schema": {
              "maximum": 5000,
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            },
            "x-nullable": true
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Expression to filter the result set. \r\n            For example, to filter on the LUPID, use \"lusidPersonId eq 'string'\"\r\n            Read more about filtering results from LUSID here https://support.lusid.com/filtering-results-from-lusid.",
            "schema": {
              "maxLength": 16384,
              "minLength": 0,
              "pattern": "^[\\s\\S]*$",
              "type": "string"
            }
          },
          {
            "name": "propertyKeys",
            "in": "query",
            "description": "A list of property keys from the \"Person\" domain to decorate onto each person, \r\n            or from any domain that supports relationships to decorate onto related entities.\r\n            These take the format {domain}/{scope}/{code} e.g. \"Person/ContactDetails/Address\".",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "description": "The key that uniquely identifies the property. It has the format {domain}/{scope}/{code}."
              }
            },
            "x-nullable": true
          },
          {
            "name": "relationshipDefinitionIds",
            "in": "query",
            "description": "A list of relationship definitions that are used to decorate related entities\r\n            onto the persons in the response. These must take the form {relationshipDefinitionScope}/{relationshipDefinitionCode}.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "description": "Identifiers of an entity"
              }
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "description": "People in specified scope",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PagedResourceListOfPerson"
                },
                "example": {
                  "values": [
                    {
                      "displayName": "Person1DisplayName",
                      "description": "Person1Description",
                      "href": "https://example.com",
                      "lusidPersonId": "LUID_00003D4V",
                      "identifiers": {
                        "Person/HrSystem1/InternalId": {
                          "key": "Person/HrSystem1/InternalId",
                          "value": {
                            "labelValue": "XY10001111"
                          }
                        },
                        "Person/PayrollSystem1/Id": {
                          "key": "Person/PayrollSystem1/Id",
                          "value": {
                            "labelValue": "HSI3453456"
                          }
                        },
                        "Person/CompanyIntranet/LoginId": {
                          "key": "Person/CompanyIntranet/LoginId",
                          "value": {
                            "labelValue": "johnsmith001"
                          }
                        }
                      },
                      "properties": {
                        "Person/PersonalDetails/Name": {
                          "key": "Person/PersonalDetails/Name",
                          "value": {
                            "labelValue": "John Smith"
                          }
                        },
                        "Person/CompanyDetails/Role": {
                          "key": "Person/CompanyDetails/Role",
                          "value": {
                            "labelValueSet": {
                              "values": [
                                "CustomerServiceRepresentative",
                                "SalesRepresentative"
                              ]
                            }
                          },
                          "effectiveFrom": "2016-07-01T00:00:00.0000000+00:00"
                        }
                      },
                      "relationships": [],
                      "version": {
                        "effectiveFrom": "2019-01-01T12:00:00.0000000+00:00",
                        "asAtDate": "2019-01-01T12:00:00.0100000+00:00",
                        "asAtCreated": "2019-01-01T12:00:00.0100000+00:00",
                        "userIdCreated": "UserId1",
                        "asAtModified": "2019-01-01T12:00:00.0100000+00:00",
                        "userIdModified": "UserId1",
                        "asAtVersionNumber": 1
                      }
                    },
                    {
                      "displayName": "Person2DisplayName",
                      "description": "Person2Description",
                      "href": "https://example.com",
                      "lusidPersonId": "LUID_00003D55",
                      "identifiers": {
                        "Person/HrSystem1/InternalId": {
                          "key": "Person/HrSystem1/InternalId",
                          "value": {
                            "labelValue": "XY10008377"
                          }
                        },
                        "Person/PayrollSystem1/Id": {
                          "key": "Person/PayrollSystem1/Id",
                          "value": {
                            "labelValue": "LFK9172001"
                          }
                        },
                        "Person/CompanyIntranet/LoginId": {
                          "key": "Person/CompanyIntranet/LoginId",
                          "value": {
                            "labelValue": "emilyevans002"
                          }
                        }
                      },
                      "properties": {
                        "Person/PersonalDetails/Name": {
                          "key": "Person/PersonalDetails/Name",
                          "value": {
                            "labelValue": "Emily Evans"
                          }
                        },
                        "Person/ContactDetails/Phone": {
                          "key": "Person/ContactDetails/Phone",
                          "value": {
                            "labelValue": "01005675678"
                          }
                        },
                        "Person/CompanyDetails/Role": {
                          "key": "Person/CompanyDetails/Role",
                          "value": {
                            "labelValue": "Manager"
                          },
                          "effectiveFrom": "2018-04-01T00:00:00.0000000+00:00"
                        }
                      },
                      "relationships": [],
                      "version": {
                        "effectiveFrom": "2019-01-01T12:00:00.0000000+00:00",
                        "asAtDate": "2019-01-01T12:00:00.0100000+00:00",
                        "asAtCreated": "2019-01-01T12:00:00.0100000+00:00",
                        "userIdCreated": "UserId1",
                        "asAtModified": "2019-01-01T12:00:00.0100000+00:00",
                        "userIdModified": "UserId1",
                        "asAtVersionNumber": 1
                      }
                    }
                  ],
                  "href": "http://example.com",
                  "links": []
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagedResourceListOfPerson"
                },
                "example": {
                  "values": [
                    {
                      "displayName": "Person1DisplayName",
                      "description": "Person1Description",
                      "href": "https://example.com",
                      "lusidPersonId": "LUID_00003D4V",
                      "identifiers": {
                        "Person/HrSystem1/InternalId": {
                          "key": "Person/HrSystem1/InternalId",
                          "value": {
                            "labelValue": "XY10001111"
                          }
                        },
                        "Person/PayrollSystem1/Id": {
                          "key": "Person/PayrollSystem1/Id",
                          "value": {
                            "labelValue": "HSI3453456"
                          }
                        },
                        "Person/CompanyIntranet/LoginId": {
                          "key": "Person/CompanyIntranet/LoginId",
                          "value": {
                            "labelValue": "johnsmith001"
                          }
                        }
                      },
                      "properties": {
                        "Person/PersonalDetails/Name": {
                          "key": "Person/PersonalDetails/Name",
                          "value": {
                            "labelValue": "John Smith"
                          }
                        },
                        "Person/CompanyDetails/Role": {
                          "key": "Person/CompanyDetails/Role",
                          "value": {
                            "labelValueSet": {
                              "values": [
                                "CustomerServiceRepresentative",
                                "SalesRepresentative"
                              ]
                            }
                          },
                          "effectiveFrom": "2016-07-01T00:00:00.0000000+00:00"
                        }
                      },
                      "relationships": [],
                      "version": {
                        "effectiveFrom": "2019-01-01T12:00:00.0000000+00:00",
                        "asAtDate": "2019-01-01T12:00:00.0100000+00:00",
                        "asAtCreated": "2019-01-01T12:00:00.0100000+00:00",
                        "userIdCreated": "UserId1",
                        "asAtModified": "2019-01-01T12:00:00.0100000+00:00",
                        "userIdModified": "UserId1",
                        "asAtVersionNumber": 1
                      }
                    },
                    {
                      "displayName": "Person2DisplayName",
                      "description": "Person2Description",
                      "href": "https://example.com",
                      "lusidPersonId": "LUID_00003D55",
                      "identifiers": {
                        "Person/HrSystem1/InternalId": {
                          "key": "Person/HrSystem1/InternalId",
                          "value": {
                            "labelValue": "XY10008377"
                          }
                        },
                        "Person/PayrollSystem1/Id": {
                          "key": "Person/PayrollSystem1/Id",
                          "value": {
                            "labelValue": "LFK9172001"
                          }
                        },
                        "Person/CompanyIntranet/LoginId": {
                          "key": "Person/CompanyIntranet/LoginId",
                          "value": {
                            "labelValue": "emilyevans002"
                          }
                        }
                      },
                      "properties": {
                        "Person/PersonalDetails/Name": {
                          "key": "Person/PersonalDetails/Name",
                          "value": {
                            "labelValue": "Emily Evans"
                          }
                        },
                        "Person/ContactDetails/Phone": {
                          "key": "Person/ContactDetails/Phone",
                          "value": {
                            "labelValue": "01005675678"
                          }
                        },
                        "Person/CompanyDetails/Role": {
                          "key": "Person/CompanyDetails/Role",
                          "value": {
                            "labelValue": "Manager"
                          },
                          "effectiveFrom": "2018-04-01T00:00:00.0000000+00:00"
                        }
                      },
                      "relationships": [],
                      "version": {
                        "effectiveFrom": "2019-01-01T12:00:00.0000000+00:00",
                        "asAtDate": "2019-01-01T12:00:00.0100000+00:00",
                        "asAtCreated": "2019-01-01T12:00:00.0100000+00:00",
                        "userIdCreated": "UserId1",
                        "asAtModified": "2019-01-01T12:00:00.0100000+00:00",
                        "userIdModified": "UserId1",
                        "asAtVersionNumber": 1
                      }
                    }
                  ],
                  "href": "http://example.com",
                  "links": []
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagedResourceListOfPerson"
                },
                "example": {
                  "values": [
                    {
                      "displayName": "Person1DisplayName",
                      "description": "Person1Description",
                      "href": "https://example.com",
                      "lusidPersonId": "LUID_00003D4V",
                      "identifiers": {
                        "Person/HrSystem1/InternalId": {
                          "key": "Person/HrSystem1/InternalId",
                          "value": {
                            "labelValue": "XY10001111"
                          }
                        },
                        "Person/PayrollSystem1/Id": {
                          "key": "Person/PayrollSystem1/Id",
                          "value": {
                            "labelValue": "HSI3453456"
                          }
                        },
                        "Person/CompanyIntranet/LoginId": {
                          "key": "Person/CompanyIntranet/LoginId",
                          "value": {
                            "labelValue": "johnsmith001"
                          }
                        }
                      },
                      "properties": {
                        "Person/PersonalDetails/Name": {
                          "key": "Person/PersonalDetails/Name",
                          "value": {
                            "labelValue": "John Smith"
                          }
                        },
                        "Person/CompanyDetails/Role": {
                          "key": "Person/CompanyDetails/Role",
                          "value": {
                            "labelValueSet": {
                              "values": [
                                "CustomerServiceRepresentative",
                                "SalesRepresentative"
                              ]
                            }
                          },
                          "effectiveFrom": "2016-07-01T00:00:00.0000000+00:00"
                        }
                      },
                      "relationships": [],
                      "version": {
                        "effectiveFrom": "2019-01-01T12:00:00.0000000+00:00",
                        "asAtDate": "2019-01-01T12:00:00.0100000+00:00",
                        "asAtCreated": "2019-01-01T12:00:00.0100000+00:00",
                        "userIdCreated": "UserId1",
                        "asAtModified": "2019-01-01T12:00:00.0100000+00:00",
                        "userIdModified": "UserId1",
                        "asAtVersionNumber": 1
                      }
                    },
                    {
                      "displayName": "Person2DisplayName",
                      "description": "Person2Description",
                      "href": "https://example.com",
                      "lusidPersonId": "LUID_00003D55",
                      "identifiers": {
                        "Person/HrSystem1/InternalId": {
                          "key": "Person/HrSystem1/InternalId",
                          "value": {
                            "labelValue": "XY10008377"
                          }
                        },
                        "Person/PayrollSystem1/Id": {
                          "key": "Person/PayrollSystem1/Id",
                          "value": {
                            "labelValue": "LFK9172001"
                          }
                        },
                        "Person/CompanyIntranet/LoginId": {
                          "key": "Person/CompanyIntranet/LoginId",
                          "value": {
                            "labelValue": "emilyevans002"
                          }
                        }
                      },
                      "properties": {
                        "Person/PersonalDetails/Name": {
                          "key": "Person/PersonalDetails/Name",
                          "value": {
                            "labelValue": "Emily Evans"
                          }
                        },
                        "Person/ContactDetails/Phone": {
                          "key": "Person/ContactDetails/Phone",
                          "value": {
                            "labelValue": "01005675678"
                          }
                        },
                        "Person/CompanyDetails/Role": {
                          "key": "Person/CompanyDetails/Role",
                          "value": {
                            "labelValue": "Manager"
                          },
                          "effectiveFrom": "2018-04-01T00:00:00.0000000+00:00"
                        }
                      },
                      "relationships": [],
                      "version": {
                        "effectiveFrom": "2019-01-01T12:00:00.0000000+00:00",
                        "asAtDate": "2019-01-01T12:00:00.0100000+00:00",
                        "asAtCreated": "2019-01-01T12:00:00.0100000+00:00",
                        "userIdCreated": "UserId1",
                        "asAtModified": "2019-01-01T12:00:00.0100000+00:00",
                        "userIdModified": "UserId1",
                        "asAtVersionNumber": 1
                      }
                    }
                  ],
                  "href": "http://example.com",
                  "links": []
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      }
    },
    "/api/persons/{idTypeScope}/{idTypeCode}/{code}": {
      "get": {
        "tags": [
          "Persons"
        ],
        "summary": "[EARLY ACCESS] GetPerson: Get Person",
        "description": "Retrieve the definition of a person.",
        "operationId": "GetPerson",
        "parameters": [
          {
            "name": "idTypeScope",
            "in": "path",
            "description": "Scope of the person identifier type.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "idTypeCode",
            "in": "path",
            "description": "Code of the person identifier type.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "Code of the person under specified scope and code. This together with stated identifier type uniquely\r\n            identifies the person.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string"
            }
          },
          {
            "name": "propertyKeys",
            "in": "query",
            "description": "A list of property keys from the \"Person\" domain to decorate onto the person, \r\n            or from any domain that supports relationships to decorate onto related entities.\r\n            These take the format {domain}/{scope}/{code} e.g. \"Person/ContactDetails/Address\".",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "description": "The key that uniquely identifies the property. It has the format {domain}/{scope}/{code}."
              }
            },
            "x-nullable": true
          },
          {
            "name": "effectiveAt",
            "in": "query",
            "description": "The effective datetime or cut label at which to retrieve the person. Defaults to the current LUSID system datetime if not specified.",
            "schema": {
              "type": "string",
              "format": "dateorcutlabel"
            }
          },
          {
            "name": "asAt",
            "in": "query",
            "description": "The asAt datetime at which to retrieve the person. Defaults to return the latest version of the person if not specified.",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "x-nullable": true
          },
          {
            "name": "relationshipDefinitionIds",
            "in": "query",
            "description": "A list of relationship definitions that are used to decorate related entities\r\n            onto the person in the response. These must take the form {relationshipDefinitionScope}/{relationshipDefinitionCode}.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "description": "Identifiers of an entity"
              }
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "description": "The requested person definition",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Person"
                },
                "example": {
                  "displayName": "Person1DisplayName",
                  "description": "Person1Description",
                  "href": "https://example.com",
                  "lusidPersonId": "LUID_00003D4V",
                  "identifiers": {
                    "Person/HrSystem1/InternalId": {
                      "key": "Person/HrSystem1/InternalId",
                      "value": {
                        "labelValue": "XY10001111"
                      }
                    },
                    "Person/PayrollSystem1/Id": {
                      "key": "Person/PayrollSystem1/Id",
                      "value": {
                        "labelValue": "HSI3453456"
                      }
                    },
                    "Person/CompanyIntranet/LoginId": {
                      "key": "Person/CompanyIntranet/LoginId",
                      "value": {
                        "labelValue": "johnsmith001"
                      }
                    }
                  },
                  "properties": {
                    "Person/PersonalDetails/Name": {
                      "key": "Person/PersonalDetails/Name",
                      "value": {
                        "labelValue": "John Smith"
                      }
                    },
                    "Person/CompanyDetails/Role": {
                      "key": "Person/CompanyDetails/Role",
                      "value": {
                        "labelValueSet": {
                          "values": [
                            "CustomerServiceRepresentative",
                            "SalesRepresentative"
                          ]
                        }
                      },
                      "effectiveFrom": "2016-07-01T00:00:00.0000000+00:00"
                    }
                  },
                  "relationships": [],
                  "version": {
                    "effectiveFrom": "2019-01-01T12:00:00.0000000+00:00",
                    "asAtDate": "2019-01-01T12:00:00.0100000+00:00",
                    "asAtCreated": "2019-01-01T12:00:00.0100000+00:00",
                    "userIdCreated": "UserId1",
                    "asAtModified": "2019-01-01T12:00:00.0100000+00:00",
                    "userIdModified": "UserId1",
                    "asAtVersionNumber": 1
                  }
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Person"
                },
                "example": {
                  "displayName": "Person1DisplayName",
                  "description": "Person1Description",
                  "href": "https://example.com",
                  "lusidPersonId": "LUID_00003D4V",
                  "identifiers": {
                    "Person/HrSystem1/InternalId": {
                      "key": "Person/HrSystem1/InternalId",
                      "value": {
                        "labelValue": "XY10001111"
                      }
                    },
                    "Person/PayrollSystem1/Id": {
                      "key": "Person/PayrollSystem1/Id",
                      "value": {
                        "labelValue": "HSI3453456"
                      }
                    },
                    "Person/CompanyIntranet/LoginId": {
                      "key": "Person/CompanyIntranet/LoginId",
                      "value": {
                        "labelValue": "johnsmith001"
                      }
                    }
                  },
                  "properties": {
                    "Person/PersonalDetails/Name": {
                      "key": "Person/PersonalDetails/Name",
                      "value": {
                        "labelValue": "John Smith"
                      }
                    },
                    "Person/CompanyDetails/Role": {
                      "key": "Person/CompanyDetails/Role",
                      "value": {
                        "labelValueSet": {
                          "values": [
                            "CustomerServiceRepresentative",
                            "SalesRepresentative"
                          ]
                        }
                      },
                      "effectiveFrom": "2016-07-01T00:00:00.0000000+00:00"
                    }
                  },
                  "relationships": [],
                  "version": {
                    "effectiveFrom": "2019-01-01T12:00:00.0000000+00:00",
                    "asAtDate": "2019-01-01T12:00:00.0100000+00:00",
                    "asAtCreated": "2019-01-01T12:00:00.0100000+00:00",
                    "userIdCreated": "UserId1",
                    "asAtModified": "2019-01-01T12:00:00.0100000+00:00",
                    "userIdModified": "UserId1",
                    "asAtVersionNumber": 1
                  }
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Person"
                },
                "example": {
                  "displayName": "Person1DisplayName",
                  "description": "Person1Description",
                  "href": "https://example.com",
                  "lusidPersonId": "LUID_00003D4V",
                  "identifiers": {
                    "Person/HrSystem1/InternalId": {
                      "key": "Person/HrSystem1/InternalId",
                      "value": {
                        "labelValue": "XY10001111"
                      }
                    },
                    "Person/PayrollSystem1/Id": {
                      "key": "Person/PayrollSystem1/Id",
                      "value": {
                        "labelValue": "HSI3453456"
                      }
                    },
                    "Person/CompanyIntranet/LoginId": {
                      "key": "Person/CompanyIntranet/LoginId",
                      "value": {
                        "labelValue": "johnsmith001"
                      }
                    }
                  },
                  "properties": {
                    "Person/PersonalDetails/Name": {
                      "key": "Person/PersonalDetails/Name",
                      "value": {
                        "labelValue": "John Smith"
                      }
                    },
                    "Person/CompanyDetails/Role": {
                      "key": "Person/CompanyDetails/Role",
                      "value": {
                        "labelValueSet": {
                          "values": [
                            "CustomerServiceRepresentative",
                            "SalesRepresentative"
                          ]
                        }
                      },
                      "effectiveFrom": "2016-07-01T00:00:00.0000000+00:00"
                    }
                  },
                  "relationships": [],
                  "version": {
                    "effectiveFrom": "2019-01-01T12:00:00.0000000+00:00",
                    "asAtDate": "2019-01-01T12:00:00.0100000+00:00",
                    "asAtCreated": "2019-01-01T12:00:00.0100000+00:00",
                    "userIdCreated": "UserId1",
                    "asAtModified": "2019-01-01T12:00:00.0100000+00:00",
                    "userIdModified": "UserId1",
                    "asAtVersionNumber": 1
                  }
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      },
      "delete": {
        "tags": [
          "Persons"
        ],
        "summary": "[EARLY ACCESS] DeletePerson: Delete person",
        "description": "Delete a person. Deletion will be valid from the person's creation datetime.\r\nThis means that the person will no longer exist at any effective datetime from the asAt datetime of deletion.",
        "operationId": "DeletePerson",
        "parameters": [
          {
            "name": "idTypeScope",
            "in": "path",
            "description": "The scope of the person identifier type.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_.]*$",
              "type": "string"
            }
          },
          {
            "name": "idTypeCode",
            "in": "path",
            "description": "The code of the person identifier type.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_.]*$",
              "type": "string"
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "Code of the person under specified identifier type scope and code. This together with defined\r\n            identifier type uniquely identifies the person to delete.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_.]*$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The response from deleting person.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedEntityResponse"
                },
                "example": {
                  "asAt": "2018-03-05T10:10:10.0000000+00:00"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedEntityResponse"
                },
                "example": {
                  "asAt": "2018-03-05T10:10:10.0000000+00:00"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedEntityResponse"
                },
                "example": {
                  "asAt": "2018-03-05T10:10:10.0000000+00:00"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      }
    },
    "/api/persons/{idTypeScope}/{idTypeCode}/{code}/identifiers": {
      "post": {
        "tags": [
          "Persons"
        ],
        "summary": "[EARLY ACCESS] SetPersonIdentifiers: Set Person Identifiers",
        "description": "Set identifiers of the person.",
        "operationId": "SetPersonIdentifiers",
        "parameters": [
          {
            "name": "idTypeScope",
            "in": "path",
            "description": "Scope of the person identifier type.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "idTypeCode",
            "in": "path",
            "description": "Code of the person identifier type.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "Code of the person under specified identifier type's scope and code. This together with stated identifier type uniquely\r\n            identifies the person.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Request containing identifiers to set for the person. Identifiers not specified in request will not be changed.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SetPersonIdentifiersRequest"
              },
              "example": {
                "identifiers": {
                  "Person/PayrollSystem1/Id": {
                    "key": "Person/PayrollSystem1/Id",
                    "value": {
                      "labelValue": "HSI3453333"
                    }
                  }
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SetPersonIdentifiersRequest"
              },
              "example": {
                "identifiers": {
                  "Person/PayrollSystem1/Id": {
                    "key": "Person/PayrollSystem1/Id",
                    "value": {
                      "labelValue": "HSI3453333"
                    }
                  }
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SetPersonIdentifiersRequest"
              },
              "example": {
                "identifiers": {
                  "Person/PayrollSystem1/Id": {
                    "key": "Person/PayrollSystem1/Id",
                    "value": {
                      "labelValue": "HSI3453333"
                    }
                  }
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SetPersonIdentifiersRequest"
              },
              "example": {
                "identifiers": {
                  "Person/PayrollSystem1/Id": {
                    "key": "Person/PayrollSystem1/Id",
                    "value": {
                      "labelValue": "HSI3453333"
                    }
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The Person with updated identifiers.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Person"
                },
                "example": {
                  "displayName": "Person1DisplayName",
                  "description": "Person1Description",
                  "href": "https://example.com",
                  "lusidPersonId": "LUID_00003D4V",
                  "identifiers": {
                    "Person/HrSystem1/InternalId": {
                      "key": "Person/HrSystem1/InternalId",
                      "value": {
                        "labelValue": "XY10001111"
                      }
                    },
                    "Person/PayrollSystem1/Id": {
                      "key": "Person/PayrollSystem1/Id",
                      "value": {
                        "labelValue": "HSI3453333"
                      }
                    },
                    "Person/CompanyIntranet/LoginId": {
                      "key": "Person/CompanyIntranet/LoginId",
                      "value": {
                        "labelValue": "johnsmith001"
                      }
                    }
                  },
                  "properties": {
                    "Person/ContactDetails/Phone": {
                      "key": "Person/ContactDetails/Phone",
                      "value": {
                        "labelValue": "01156786789"
                      },
                      "effectiveFrom": "2019-07-01T00:00:00.0000000+00:00"
                    }
                  },
                  "relationships": [],
                  "version": {
                    "effectiveFrom": "2019-01-01T12:00:00.0000000+00:00",
                    "asAtDate": "2019-01-01T12:00:00.0100000+00:00",
                    "asAtCreated": "2019-01-01T12:00:00.0100000+00:00",
                    "userIdCreated": "UserId1",
                    "asAtModified": "2019-01-01T12:00:00.0100000+00:00",
                    "userIdModified": "UserId1",
                    "asAtVersionNumber": 1
                  }
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Person"
                },
                "example": {
                  "displayName": "Person1DisplayName",
                  "description": "Person1Description",
                  "href": "https://example.com",
                  "lusidPersonId": "LUID_00003D4V",
                  "identifiers": {
                    "Person/HrSystem1/InternalId": {
                      "key": "Person/HrSystem1/InternalId",
                      "value": {
                        "labelValue": "XY10001111"
                      }
                    },
                    "Person/PayrollSystem1/Id": {
                      "key": "Person/PayrollSystem1/Id",
                      "value": {
                        "labelValue": "HSI3453333"
                      }
                    },
                    "Person/CompanyIntranet/LoginId": {
                      "key": "Person/CompanyIntranet/LoginId",
                      "value": {
                        "labelValue": "johnsmith001"
                      }
                    }
                  },
                  "properties": {
                    "Person/ContactDetails/Phone": {
                      "key": "Person/ContactDetails/Phone",
                      "value": {
                        "labelValue": "01156786789"
                      },
                      "effectiveFrom": "2019-07-01T00:00:00.0000000+00:00"
                    }
                  },
                  "relationships": [],
                  "version": {
                    "effectiveFrom": "2019-01-01T12:00:00.0000000+00:00",
                    "asAtDate": "2019-01-01T12:00:00.0100000+00:00",
                    "asAtCreated": "2019-01-01T12:00:00.0100000+00:00",
                    "userIdCreated": "UserId1",
                    "asAtModified": "2019-01-01T12:00:00.0100000+00:00",
                    "userIdModified": "UserId1",
                    "asAtVersionNumber": 1
                  }
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Person"
                },
                "example": {
                  "displayName": "Person1DisplayName",
                  "description": "Person1Description",
                  "href": "https://example.com",
                  "lusidPersonId": "LUID_00003D4V",
                  "identifiers": {
                    "Person/HrSystem1/InternalId": {
                      "key": "Person/HrSystem1/InternalId",
                      "value": {
                        "labelValue": "XY10001111"
                      }
                    },
                    "Person/PayrollSystem1/Id": {
                      "key": "Person/PayrollSystem1/Id",
                      "value": {
                        "labelValue": "HSI3453333"
                      }
                    },
                    "Person/CompanyIntranet/LoginId": {
                      "key": "Person/CompanyIntranet/LoginId",
                      "value": {
                        "labelValue": "johnsmith001"
                      }
                    }
                  },
                  "properties": {
                    "Person/ContactDetails/Phone": {
                      "key": "Person/ContactDetails/Phone",
                      "value": {
                        "labelValue": "01156786789"
                      },
                      "effectiveFrom": "2019-07-01T00:00:00.0000000+00:00"
                    }
                  },
                  "relationships": [],
                  "version": {
                    "effectiveFrom": "2019-01-01T12:00:00.0000000+00:00",
                    "asAtDate": "2019-01-01T12:00:00.0100000+00:00",
                    "asAtCreated": "2019-01-01T12:00:00.0100000+00:00",
                    "userIdCreated": "UserId1",
                    "asAtModified": "2019-01-01T12:00:00.0100000+00:00",
                    "userIdModified": "UserId1",
                    "asAtVersionNumber": 1
                  }
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      },
      "delete": {
        "tags": [
          "Persons"
        ],
        "summary": "[EARLY ACCESS] DeletePersonIdentifiers: Delete Person Identifiers",
        "description": "Delete identifiers that belong to the given property keys of the person.",
        "operationId": "DeletePersonIdentifiers",
        "parameters": [
          {
            "name": "idTypeScope",
            "in": "path",
            "description": "Scope of the person identifier type.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string"
            }
          },
          {
            "name": "idTypeCode",
            "in": "path",
            "description": "Code of the person identifier type.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string"
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "Code of the person under specified identifier type's scope and code. This together with stated identifier type uniquely\r\n            identifies the person.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string"
            }
          },
          {
            "name": "propertyKeys",
            "in": "query",
            "description": "The property keys of the identifiers to delete. These take the format\r\n            {domain}/{scope}/{code} e.g. \"Person/CompanyDetails/Role\". Each property must be from the \"Person\" domain. Identifiers or identifiers not specified in request will not be changed.",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "description": "The key that uniquely identifies the property. It has the format {domain}/{scope}/{code}."
              }
            }
          },
          {
            "name": "effectiveAt",
            "in": "query",
            "description": "The effective datetime or cut label at which to delete the identifiers. Defaults to the current LUSID system datetime if not specified.\r\n            Must not include an effective datetime if identifiers are perpetual.",
            "schema": {
              "type": "string",
              "format": "dateorcutlabel"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The datetime that the identifiers were deleted from the specified person",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedEntityResponse"
                },
                "example": {
                  "asAt": "2018-03-05T10:10:10.0000000+00:00"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedEntityResponse"
                },
                "example": {
                  "asAt": "2018-03-05T10:10:10.0000000+00:00"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedEntityResponse"
                },
                "example": {
                  "asAt": "2018-03-05T10:10:10.0000000+00:00"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      }
    },
    "/api/persons/{idTypeScope}/{idTypeCode}/{code}/metadata": {
      "get": {
        "tags": [
          "Persons"
        ],
        "summary": "[EARLY ACCESS] GetAllPersonAccessMetadata: Get Access Metadata rules for a Person",
        "description": "Pass the Scope and Code of the Person identifier along with the person code parameter to retrieve the associated Access Metadata",
        "operationId": "GetAllPersonAccessMetadata",
        "parameters": [
          {
            "name": "idTypeScope",
            "in": "path",
            "description": "Scope of the person identifier.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "idTypeCode",
            "in": "path",
            "description": "Code of the person identifier.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "Code of the person under specified identifier type's scope and code.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string"
            }
          },
          {
            "name": "effectiveAt",
            "in": "query",
            "description": "The effectiveAt datetime at which to retrieve the Access Metadata",
            "schema": {
              "type": "string",
              "format": "dateorcutlabel"
            }
          },
          {
            "name": "asAt",
            "in": "query",
            "description": "The asAt datetime at which to retrieve the Access Metadata",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "description": "The access metadata for the Person or any failure.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/AccessMetadataValue"
                    }
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/AccessMetadataValue"
                    }
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/AccessMetadataValue"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      },
      "patch": {
        "tags": [
          "Persons"
        ],
        "summary": "[EARLY ACCESS] PatchPersonAccessMetadata: Patch Access Metadata rules for a Person.",
        "description": "Patch Person Access Metadata Rules in a single scope.\r\nThe behaviour is defined by the JSON Patch specification.\r\n            \r\nCurrently only 'add' is a supported operation on the patch document.\r\n\r\nCurrently only valid metadata keys are supported paths on the patch document.\r\n            \r\nThe response will return any affected Person Access Metadata rules or a failure message if unsuccessful.\r\n            \r\nIt is important to always check to verify success (or failure).\r\n            \r\nMultiple rules for a metadataKey can exist with different effective at dates, when resources are accessed the rule that is active for the current time will be fetched.",
        "operationId": "PatchPersonAccessMetadata",
        "parameters": [
          {
            "name": "idTypeScope",
            "in": "path",
            "description": "Scope of the person identifier.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "idTypeCode",
            "in": "path",
            "description": "Code of the person identifier.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "Code of the person under specified identifier type's scope and code.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string"
            }
          },
          {
            "name": "effectiveAt",
            "in": "query",
            "description": "The effectiveAt datetime at which to upsert the Access Metadata",
            "schema": {
              "type": "string",
              "format": "dateorcutlabel"
            }
          },
          {
            "name": "effectiveUntil",
            "in": "query",
            "description": "The effective datetime until which the Access Metadata is valid. If not supplied this will be valid indefinitely, or until the next 'effectiveAt' datetime of the Access Metadata",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "x-nullable": true
          }
        ],
        "requestBody": {
          "description": "The Json Patch document",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/AccessMetadataOperation"
                }
              },
              "example": [
                {
                  "value": [
                    {
                      "value": "SilverLicence",
                      "provider": "TestDataProvider"
                    }
                  ],
                  "path": "/exampleMetadataKey",
                  "op": "add"
                }
              ]
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/AccessMetadataOperation"
                }
              },
              "example": [
                {
                  "value": [
                    {
                      "value": "SilverLicence",
                      "provider": "TestDataProvider"
                    }
                  ],
                  "path": "/exampleMetadataKey",
                  "op": "add"
                }
              ]
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/AccessMetadataOperation"
                }
              },
              "example": [
                {
                  "value": [
                    {
                      "value": "SilverLicence",
                      "provider": "TestDataProvider"
                    }
                  ],
                  "path": "/exampleMetadataKey",
                  "op": "add"
                }
              ]
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/AccessMetadataOperation"
                }
              },
              "example": [
                {
                  "value": [
                    {
                      "value": "SilverLicence",
                      "provider": "TestDataProvider"
                    }
                  ],
                  "path": "/exampleMetadataKey",
                  "op": "add"
                }
              ]
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The successfully patched items.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/AccessMetadataValue"
                    }
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/AccessMetadataValue"
                    }
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/AccessMetadataValue"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      }
    },
    "/api/persons/{idTypeScope}/{idTypeCode}/{code}/metadata/{metadataKey}": {
      "put": {
        "tags": [
          "Persons"
        ],
        "summary": "[EARLY ACCESS] UpsertPersonAccessMetadata: Upsert a Person Access Metadata entry associated with a specific metadataKey. This creates or updates the data in LUSID.",
        "description": "Update or insert one Person Access Metadata entry in a single scope. An item will be updated if it already exists\r\nand inserted if it does not.\r\n            \r\nThe response will return the successfully updated or inserted Person Access Metadata rule or failure message if unsuccessful.\r\n            \r\nIt is important to always check to verify success (or failure).\r\n            \r\nMultiple rules for a metadataKey can exist with different effective at dates, when resources are accessed the rule that is active for the current time will be fetched.",
        "operationId": "UpsertPersonAccessMetadata",
        "parameters": [
          {
            "name": "idTypeScope",
            "in": "path",
            "description": "Scope of the person identifier.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "idTypeCode",
            "in": "path",
            "description": "Code of the person identifier.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "Code of the person under specified identifier type's scope and code.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string"
            }
          },
          {
            "name": "metadataKey",
            "in": "path",
            "description": "Key of the metadata entry to retrieve",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "effectiveAt",
            "in": "query",
            "description": "The effectiveAt datetime at which to upsert the Access Metadata",
            "schema": {
              "type": "string",
              "format": "dateorcutlabel"
            }
          },
          {
            "name": "effectiveUntil",
            "in": "query",
            "description": "The effective datetime until which the Access Metadata is valid. If not supplied this will be valid indefinitely, or until the next 'effectiveAt' datetime of the Access Metadata",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "x-nullable": true
          }
        ],
        "requestBody": {
          "description": "The Person Access Metadata entry to upsert",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/UpsertPersonAccessMetadataRequest"
              },
              "example": {
                "metadata": [
                  {
                    "value": "SilverLicence",
                    "provider": "TestDataProvider"
                  }
                ]
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpsertPersonAccessMetadataRequest"
              },
              "example": {
                "metadata": [
                  {
                    "value": "SilverLicence",
                    "provider": "TestDataProvider"
                  }
                ]
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/UpsertPersonAccessMetadataRequest"
              },
              "example": {
                "metadata": [
                  {
                    "value": "SilverLicence",
                    "provider": "TestDataProvider"
                  }
                ]
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/UpsertPersonAccessMetadataRequest"
              },
              "example": {
                "metadata": [
                  {
                    "value": "SilverLicence",
                    "provider": "TestDataProvider"
                  }
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The successfully updated or inserted item or any failure.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfAccessMetadataValueOf"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfAccessMetadataValueOf"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfAccessMetadataValueOf"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      },
      "get": {
        "tags": [
          "Persons"
        ],
        "summary": "[EARLY ACCESS] GetPersonAccessMetadataByKey: Get an entry identified by a metadataKey in the Access Metadata of a Person",
        "description": "Get a specific Person Access Metadata by specifying the corresponding identifier parts and Person code\r\n            \r\nNo matching will be performed through this endpoint. To retrieve an entry, it is necessary to specify, exactly, the identifier of the entry",
        "operationId": "GetPersonAccessMetadataByKey",
        "parameters": [
          {
            "name": "idTypeScope",
            "in": "path",
            "description": "Scope of the person identifier.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "idTypeCode",
            "in": "path",
            "description": "Code of the person identifier.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "Code of the person under specified identifier type's scope and code.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string"
            }
          },
          {
            "name": "metadataKey",
            "in": "path",
            "description": "Key of the metadata entry to retrieve",
            "required": true,
            "schema": {
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string"
            }
          },
          {
            "name": "effectiveAt",
            "in": "query",
            "description": "The effectiveAt datetime at which to retrieve the Access Metadata",
            "schema": {
              "type": "string",
              "format": "dateorcutlabel"
            }
          },
          {
            "name": "asAt",
            "in": "query",
            "description": "The asAt datetime at which to retrieve the Access Metadata",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "description": "The successfully retrieved Person access metadata filtered by metadataKey or any failure.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AccessMetadataValue"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AccessMetadataValue"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AccessMetadataValue"
                  }
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      },
      "delete": {
        "tags": [
          "Persons"
        ],
        "summary": "[EARLY ACCESS] DeletePersonAccessMetadata: Delete a Person Access Metadata entry",
        "description": "Deletes the Person Access Metadata entry that exactly matches the provided identifier parts.\r\n\r\nIt is important to always check to verify success (or failure).",
        "operationId": "DeletePersonAccessMetadata",
        "parameters": [
          {
            "name": "idTypeScope",
            "in": "path",
            "description": "Scope of the person identifier.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "idTypeCode",
            "in": "path",
            "description": "Code of the person identifier.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "Code of the person under specified identifier type's scope and code.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string"
            }
          },
          {
            "name": "metadataKey",
            "in": "path",
            "description": "Key of the metadata entry to retrieve",
            "required": true,
            "schema": {
              "maxLength": 256,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string"
            }
          },
          {
            "name": "effectiveAt",
            "in": "query",
            "description": "The effective date to delete at, if this is not supplied, it will delete all data found",
            "schema": {
              "type": "string",
              "format": "dateorcutlabel"
            }
          },
          {
            "name": "effectiveUntil",
            "in": "query",
            "description": "The effective date until which the delete is valid. If not supplied this will be valid indefinitely, or until the next 'effectiveAt' date of the Access Metadata",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "description": "The Access Metadata with the given metadataKey has been deleted",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedEntityResponse"
                },
                "example": {
                  "asAt": "2018-03-05T10:10:10.0000000+00:00"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedEntityResponse"
                },
                "example": {
                  "asAt": "2018-03-05T10:10:10.0000000+00:00"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedEntityResponse"
                },
                "example": {
                  "asAt": "2018-03-05T10:10:10.0000000+00:00"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      }
    },
    "/api/persons/{idTypeScope}/{idTypeCode}/{code}/properties": {
      "post": {
        "tags": [
          "Persons"
        ],
        "summary": "[EARLY ACCESS] SetPersonProperties: Set Person Properties",
        "description": "Set properties of the person.",
        "operationId": "SetPersonProperties",
        "parameters": [
          {
            "name": "idTypeScope",
            "in": "path",
            "description": "Scope of the person identifier type.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "idTypeCode",
            "in": "path",
            "description": "Code of the person identifier type.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "Code of the person under specified identifier type's scope and code. This together with stated identifier type uniquely\r\n            identifies the person.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Request containing properties to set for the person. Properties not specified in request will not be changed.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SetPersonPropertiesRequest"
              },
              "example": {
                "properties": {
                  "Person/ContactDetails/Phone": {
                    "key": "Person/ContactDetails/Phone",
                    "value": {
                      "labelValue": "01156786789"
                    },
                    "effectiveFrom": "2019-07-01T00:00:00.0000000+00:00"
                  }
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SetPersonPropertiesRequest"
              },
              "example": {
                "properties": {
                  "Person/ContactDetails/Phone": {
                    "key": "Person/ContactDetails/Phone",
                    "value": {
                      "labelValue": "01156786789"
                    },
                    "effectiveFrom": "2019-07-01T00:00:00.0000000+00:00"
                  }
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SetPersonPropertiesRequest"
              },
              "example": {
                "properties": {
                  "Person/ContactDetails/Phone": {
                    "key": "Person/ContactDetails/Phone",
                    "value": {
                      "labelValue": "01156786789"
                    },
                    "effectiveFrom": "2019-07-01T00:00:00.0000000+00:00"
                  }
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SetPersonPropertiesRequest"
              },
              "example": {
                "properties": {
                  "Person/ContactDetails/Phone": {
                    "key": "Person/ContactDetails/Phone",
                    "value": {
                      "labelValue": "01156786789"
                    },
                    "effectiveFrom": "2019-07-01T00:00:00.0000000+00:00"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The Person with updated properties or identifiers.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Person"
                },
                "example": {
                  "displayName": "Person1Description",
                  "description": "Person1DisplayName",
                  "href": "https://example.com",
                  "lusidPersonId": "LUID_00003D4V",
                  "identifiers": {
                    "Person/HrSystem1/InternalId": {
                      "key": "Person/HrSystem1/InternalId",
                      "value": {
                        "labelValue": "XY10001111"
                      }
                    },
                    "Person/PayrollSystem1/Id": {
                      "key": "Person/PayrollSystem1/Id",
                      "value": {
                        "labelValue": "HSI3453456"
                      }
                    },
                    "Person/CompanyIntranet/LoginId": {
                      "key": "Person/CompanyIntranet/LoginId",
                      "value": {
                        "labelValue": "johnsmith001"
                      }
                    }
                  },
                  "properties": {
                    "Person/ContactDetails/Phone": {
                      "key": "Person/ContactDetails/Phone",
                      "value": {
                        "labelValue": "01156786789"
                      },
                      "effectiveFrom": "2019-07-01T00:00:00.0000000+00:00"
                    }
                  },
                  "relationships": [],
                  "version": {
                    "effectiveFrom": "2019-07-01T00:00:00.0000000+00:00",
                    "asAtDate": "2019-01-01T12:00:00.0100000+00:00",
                    "asAtCreated": "2019-01-01T12:00:00.0100000+00:00",
                    "userIdCreated": "UserId1",
                    "asAtModified": "2019-01-01T12:00:00.0100000+00:00",
                    "userIdModified": "UserId1",
                    "asAtVersionNumber": 1
                  }
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Person"
                },
                "example": {
                  "displayName": "Person1Description",
                  "description": "Person1DisplayName",
                  "href": "https://example.com",
                  "lusidPersonId": "LUID_00003D4V",
                  "identifiers": {
                    "Person/HrSystem1/InternalId": {
                      "key": "Person/HrSystem1/InternalId",
                      "value": {
                        "labelValue": "XY10001111"
                      }
                    },
                    "Person/PayrollSystem1/Id": {
                      "key": "Person/PayrollSystem1/Id",
                      "value": {
                        "labelValue": "HSI3453456"
                      }
                    },
                    "Person/CompanyIntranet/LoginId": {
                      "key": "Person/CompanyIntranet/LoginId",
                      "value": {
                        "labelValue": "johnsmith001"
                      }
                    }
                  },
                  "properties": {
                    "Person/ContactDetails/Phone": {
                      "key": "Person/ContactDetails/Phone",
                      "value": {
                        "labelValue": "01156786789"
                      },
                      "effectiveFrom": "2019-07-01T00:00:00.0000000+00:00"
                    }
                  },
                  "relationships": [],
                  "version": {
                    "effectiveFrom": "2019-07-01T00:00:00.0000000+00:00",
                    "asAtDate": "2019-01-01T12:00:00.0100000+00:00",
                    "asAtCreated": "2019-01-01T12:00:00.0100000+00:00",
                    "userIdCreated": "UserId1",
                    "asAtModified": "2019-01-01T12:00:00.0100000+00:00",
                    "userIdModified": "UserId1",
                    "asAtVersionNumber": 1
                  }
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Person"
                },
                "example": {
                  "displayName": "Person1Description",
                  "description": "Person1DisplayName",
                  "href": "https://example.com",
                  "lusidPersonId": "LUID_00003D4V",
                  "identifiers": {
                    "Person/HrSystem1/InternalId": {
                      "key": "Person/HrSystem1/InternalId",
                      "value": {
                        "labelValue": "XY10001111"
                      }
                    },
                    "Person/PayrollSystem1/Id": {
                      "key": "Person/PayrollSystem1/Id",
                      "value": {
                        "labelValue": "HSI3453456"
                      }
                    },
                    "Person/CompanyIntranet/LoginId": {
                      "key": "Person/CompanyIntranet/LoginId",
                      "value": {
                        "labelValue": "johnsmith001"
                      }
                    }
                  },
                  "properties": {
                    "Person/ContactDetails/Phone": {
                      "key": "Person/ContactDetails/Phone",
                      "value": {
                        "labelValue": "01156786789"
                      },
                      "effectiveFrom": "2019-07-01T00:00:00.0000000+00:00"
                    }
                  },
                  "relationships": [],
                  "version": {
                    "effectiveFrom": "2019-07-01T00:00:00.0000000+00:00",
                    "asAtDate": "2019-01-01T12:00:00.0100000+00:00",
                    "asAtCreated": "2019-01-01T12:00:00.0100000+00:00",
                    "userIdCreated": "UserId1",
                    "asAtModified": "2019-01-01T12:00:00.0100000+00:00",
                    "userIdModified": "UserId1",
                    "asAtVersionNumber": 1
                  }
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      },
      "delete": {
        "tags": [
          "Persons"
        ],
        "summary": "[EARLY ACCESS] DeletePersonProperties: Delete Person Properties",
        "description": "Delete all properties that belong to the given property keys of the person.",
        "operationId": "DeletePersonProperties",
        "parameters": [
          {
            "name": "idTypeScope",
            "in": "path",
            "description": "Scope of the person identifier type.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string"
            }
          },
          {
            "name": "idTypeCode",
            "in": "path",
            "description": "Code of the person identifier type.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string"
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "Code of the person under specified identifier type's scope and code. This together with stated identifier type uniquely\r\n            identifies the person.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string"
            }
          },
          {
            "name": "propertyKeys",
            "in": "query",
            "description": "The property keys of the person's properties to delete. These take the format\r\n            {domain}/{scope}/{code} e.g. \"Person/CompanyDetails/Role\". Each property must be from the \"Person\" domain. Properties or identifiers not specified in request will not be changed.",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "description": "The key that uniquely identifies the property. It has the format {domain}/{scope}/{code}."
              }
            }
          },
          {
            "name": "effectiveAt",
            "in": "query",
            "description": "The effective datetime or cut label at which to delete time-variant properties from.\r\n            The property must exist at the specified 'effectiveAt' datetime. If the 'effectiveAt' is not provided or is\r\n            before the time-variant property exists then a failure is returned. Do not specify this parameter if any of\r\n            the properties to delete are perpetual.",
            "schema": {
              "type": "string",
              "format": "dateorcutlabel"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The datetime that the properties were deleted from the specified person",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedEntityResponse"
                },
                "example": {
                  "asAt": "2018-03-05T10:10:10.0000000+00:00"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedEntityResponse"
                },
                "example": {
                  "asAt": "2018-03-05T10:10:10.0000000+00:00"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedEntityResponse"
                },
                "example": {
                  "asAt": "2018-03-05T10:10:10.0000000+00:00"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      }
    },
    "/api/persons/{idTypeScope}/{idTypeCode}/{code}/properties/time-series": {
      "get": {
        "tags": [
          "Persons"
        ],
        "summary": "[EARLY ACCESS] GetPersonPropertyTimeSeries: Get Person Property Time Series",
        "description": "List the complete time series of a person property.",
        "operationId": "GetPersonPropertyTimeSeries",
        "parameters": [
          {
            "name": "idTypeScope",
            "in": "path",
            "description": "Scope of the person identifier type.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "idTypeCode",
            "in": "path",
            "description": "Code of the person identifier type.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "Code of the person under specified identifier type's scope and code. This together with stated identifier type uniquely identifies the person.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string"
            }
          },
          {
            "name": "propertyKey",
            "in": "query",
            "description": "The property key of the property that will have its history shown. These must be in the format {domain}/{scope}/{code} e.g. \"Person/CompanyDetails/Role\".\r\n            Each property must be from the \"Person\" domain.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The key that uniquely identifies the property. It has the format {domain}/{scope}/{code}."
            }
          },
          {
            "name": "asAt",
            "in": "query",
            "description": "The asAt datetime at which to list the person's property history. Defaults to return the current datetime if not supplied.",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "x-nullable": true
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Expression to filter the result set. Read more about filtering results from LUSID here https://support.lusid.com/filtering-results-from-lusid.",
            "schema": {
              "maxLength": 16384,
              "minLength": 0,
              "pattern": "^[\\s\\S]*$",
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "The pagination token to use to continue listing properties from a previous call to get property time series.\r\n            This value is returned from the previous call. If a pagination token is provided the filter and asAt fields\r\n            must not have changed since the original request.",
            "schema": {
              "maxLength": 16384,
              "minLength": 0,
              "pattern": "^[\\s\\S]*$",
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "When paginating, limit the number of returned results to this many.",
            "schema": {
              "maximum": 5000,
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "description": "The time series of the property",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfPropertyInterval"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfPropertyInterval"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfPropertyInterval"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      }
    },
    "/api/persons/{idTypeScope}/{idTypeCode}/{code}/relations": {
      "get": {
        "tags": [
          "Persons"
        ],
        "summary": "[EARLY ACCESS] GetPersonRelations: Get Relations for Person",
        "description": "Get relations for the specified person.",
        "operationId": "GetPersonRelations",
        "parameters": [
          {
            "name": "idTypeScope",
            "in": "path",
            "description": "Scope of the person identifier type.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "idTypeCode",
            "in": "path",
            "description": "Code of the person identifier type.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "Code of the person under specified identifier type's scope and code. This together with stated identifier type uniquely\r\n            identifies the person.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string"
            }
          },
          {
            "name": "effectiveAt",
            "in": "query",
            "description": "The effective datetime or cut label at which to get relations. Defaults to the current LUSID system datetime if not specified.",
            "schema": {
              "type": "string",
              "format": "dateorcutlabel"
            }
          },
          {
            "name": "asAt",
            "in": "query",
            "description": "The asAt datetime at which to retrieve the person's relations. Defaults to return the latest LUSID AsAt time if not specified.",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "x-nullable": true
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Expression to filter the relations. Users should provide null or empty string for this field until further notice.",
            "schema": {
              "maxLength": 16384,
              "minLength": 0,
              "pattern": "^[\\s\\S]*$",
              "type": "string"
            }
          },
          {
            "name": "identifierTypes",
            "in": "query",
            "description": "Identifiers types (as property keys) used for referencing Persons or Legal Entities. These take the format\r\n            {domain}/{scope}/{code} e.g. \"Person/CompanyDetails/Role\". They must be from the \"Person\" or \"LegalEntity\" domain.\r\n            Only identifier types stated will be used to look up relevant entities in relations. If not applicable, provide an empty array.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "description": "The key that uniquely identifies the property. It has the format {domain}/{scope}/{code}."
              }
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "description": "The relations for the specified person.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfRelation"
                },
                "example": {
                  "values": [
                    {
                      "relationDefinitionId": {
                        "scope": "PortfolioManagementTeam",
                        "code": "Traders"
                      },
                      "relatedEntityId": {
                        "Scope": "UkPortfolio",
                        "Code": "PortfolioId-148176"
                      },
                      "traversalDirection": "In",
                      "traversalDescription": "can trade with portfolio",
                      "effectiveFrom": "2019-01-01T12:00:00.0000000+00:00"
                    }
                  ],
                  "links": []
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfRelation"
                },
                "example": {
                  "values": [
                    {
                      "relationDefinitionId": {
                        "scope": "PortfolioManagementTeam",
                        "code": "Traders"
                      },
                      "relatedEntityId": {
                        "Scope": "UkPortfolio",
                        "Code": "PortfolioId-148176"
                      },
                      "traversalDirection": "In",
                      "traversalDescription": "can trade with portfolio",
                      "effectiveFrom": "2019-01-01T12:00:00.0000000+00:00"
                    }
                  ],
                  "links": []
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfRelation"
                },
                "example": {
                  "values": [
                    {
                      "relationDefinitionId": {
                        "scope": "PortfolioManagementTeam",
                        "code": "Traders"
                      },
                      "relatedEntityId": {
                        "Scope": "UkPortfolio",
                        "Code": "PortfolioId-148176"
                      },
                      "traversalDirection": "In",
                      "traversalDescription": "can trade with portfolio",
                      "effectiveFrom": "2019-01-01T12:00:00.0000000+00:00"
                    }
                  ],
                  "links": []
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      }
    },
    "/api/persons/{idTypeScope}/{idTypeCode}/{code}/relationships": {
      "get": {
        "tags": [
          "Persons"
        ],
        "summary": "[EARLY ACCESS] GetPersonRelationships: Get Relationships for Person",
        "description": "Get relationships for the specified person.",
        "operationId": "GetPersonRelationships",
        "parameters": [
          {
            "name": "idTypeScope",
            "in": "path",
            "description": "Scope of the person's identifier type.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string"
            }
          },
          {
            "name": "idTypeCode",
            "in": "path",
            "description": "Code of the person's identifier type.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string"
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "Code of the person under specified identifier type's scope and code. This together with stated identifier type uniquely\r\n            identifies the person.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string"
            }
          },
          {
            "name": "effectiveAt",
            "in": "query",
            "description": "The effective datetime or cut label at which to get relationships. Defaults to the current LUSID system datetime if not specified.",
            "schema": {
              "maxLength": 256,
              "minLength": 0,
              "pattern": "^[a-zA-Z0-9\\-_\\+:\\.]+$",
              "type": "string",
              "format": "dateorcutlabel"
            }
          },
          {
            "name": "asAt",
            "in": "query",
            "description": "The asAt datetime at which to retrieve relationships. Defaults to return the latest LUSID AsAt time if not specified.",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "x-nullable": true
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Expression to filter relationships. Users should provide null or empty string for this field until further notice.",
            "schema": {
              "maxLength": 16384,
              "minLength": 0,
              "pattern": "^[\\s\\S]*$",
              "type": "string"
            }
          },
          {
            "name": "identifierTypes",
            "in": "query",
            "description": "Identifier types (as property keys) used for referencing Persons or Legal Entities.\r\n            These can be specified from the 'Person' or 'LegalEntity' domains and have the format {domain}/{scope}/{code}, for example\r\n            'Person/CompanyDetails/Role'. An Empty array may be used to return all related Entities.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "description": "The key that uniquely identifies the property. It has the format {domain}/{scope}/{code}."
              }
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "description": "The relationships for the specified person.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfRelationship"
                },
                "example": {
                  "values": [
                    {
                      "relationshipDefinitionId": {
                        "scope": "PortfolioManagementTeam",
                        "code": "Traders"
                      },
                      "relatedEntity": {
                        "entityType": "Person",
                        "entityId": {
                          "scope": "UkPortfolio",
                          "code": "PortfolioId-148176"
                        },
                        "displayName": "James Smith",
                        "properties": {},
                        "scope": "UkPortfolio",
                        "identifiers": [
                          {
                            "identifierType": "code",
                            "identifierValue": "PortfolioId-148176"
                          }
                        ]
                      },
                      "traversalDirection": "In",
                      "traversalDescription": "can trade with portfolio",
                      "effectiveFrom": "2019-01-01T12:00:00.0000000+00:00",
                      "effectiveUntil": "2022-01-01T12:00:00.0000000+00:00"
                    }
                  ],
                  "links": []
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfRelationship"
                },
                "example": {
                  "values": [
                    {
                      "relationshipDefinitionId": {
                        "scope": "PortfolioManagementTeam",
                        "code": "Traders"
                      },
                      "relatedEntity": {
                        "entityType": "Person",
                        "entityId": {
                          "scope": "UkPortfolio",
                          "code": "PortfolioId-148176"
                        },
                        "displayName": "James Smith",
                        "properties": {},
                        "scope": "UkPortfolio",
                        "identifiers": [
                          {
                            "identifierType": "code",
                            "identifierValue": "PortfolioId-148176"
                          }
                        ]
                      },
                      "traversalDirection": "In",
                      "traversalDescription": "can trade with portfolio",
                      "effectiveFrom": "2019-01-01T12:00:00.0000000+00:00",
                      "effectiveUntil": "2022-01-01T12:00:00.0000000+00:00"
                    }
                  ],
                  "links": []
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfRelationship"
                },
                "example": {
                  "values": [
                    {
                      "relationshipDefinitionId": {
                        "scope": "PortfolioManagementTeam",
                        "code": "Traders"
                      },
                      "relatedEntity": {
                        "entityType": "Person",
                        "entityId": {
                          "scope": "UkPortfolio",
                          "code": "PortfolioId-148176"
                        },
                        "displayName": "James Smith",
                        "properties": {},
                        "scope": "UkPortfolio",
                        "identifiers": [
                          {
                            "identifierType": "code",
                            "identifierValue": "PortfolioId-148176"
                          }
                        ]
                      },
                      "traversalDirection": "In",
                      "traversalDescription": "can trade with portfolio",
                      "effectiveFrom": "2019-01-01T12:00:00.0000000+00:00",
                      "effectiveUntil": "2022-01-01T12:00:00.0000000+00:00"
                    }
                  ],
                  "links": []
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      }
    },
    "/api/placements": {
      "get": {
        "tags": [
          "Placements"
        ],
        "summary": "[EARLY ACCESS] ListPlacements: List Placements",
        "description": "Fetch the last pre-AsAt date version of each placement in scope (does not fetch the entire history).",
        "operationId": "ListPlacements",
        "parameters": [
          {
            "name": "asAt",
            "in": "query",
            "description": "The asAt datetime at which to retrieve the placement. Defaults to return the latest version of the placement if not specified.",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "x-nullable": true
          },
          {
            "name": "page",
            "in": "query",
            "description": "The pagination token to use to continue listing placements from a previous call to list placements.\r\n            This value is returned from the previous call. If a pagination token is provided the sortBy, filter, effectiveAt, and asAt fields\r\n            must not have changed since the original request.",
            "schema": {
              "maxLength": 500,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\+/]*={0,3}$",
              "type": "string"
            }
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "Order the results by these fields. Use use the '-' sign to denote descending order e.g. -MyFieldName.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "x-nullable": true
          },
          {
            "name": "limit",
            "in": "query",
            "description": "When paginating, limit the number of returned results to this many.",
            "schema": {
              "maximum": 5000,
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            },
            "x-nullable": true
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Expression to filter the result set. Read more about filtering results from LUSID here:\r\n            https://support.lusid.com/filtering-results-from-lusid.",
            "schema": {
              "maxLength": 16384,
              "minLength": 0,
              "pattern": "^[\\s\\S]*$",
              "type": "string"
            }
          },
          {
            "name": "propertyKeys",
            "in": "query",
            "description": "A list of property keys from the \"Placement\" domain to decorate onto each placement.\r\n                These take the format {domain}/{scope}/{code} e.g. \"Placement/system/Name\".",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "description": "The key that uniquely identifies the property. It has the format {domain}/{scope}/{code}."
              }
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "description": "Placements in scope.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PagedResourceListOfPlacement"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagedResourceListOfPlacement"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagedResourceListOfPlacement"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      },
      "post": {
        "tags": [
          "Placements"
        ],
        "summary": "[EARLY ACCESS] UpsertPlacements: Upsert Placement",
        "description": "Upsert; update existing placements with given ids, or create new placements otherwise.",
        "operationId": "UpsertPlacements",
        "requestBody": {
          "description": "The collection of placement requests.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/PlacementSetRequest"
              },
              "example": {
                "requests": [
                  {
                    "id": {
                      "scope": "MyScope",
                      "code": "PLAC00000123"
                    },
                    "blockIds": [
                      {
                        "scope": "MyScope",
                        "code": "BLOCK00000123"
                      }
                    ],
                    "properties": {
                      "Placement/MyScope/SomePlacementProperty": {
                        "key": "Placement/MyScope/SomePlacementProperty",
                        "value": {
                          "labelValue": "XYZ000034567"
                        }
                      }
                    },
                    "instrumentIdentifiers": {
                      "Instrument/default/Currency": "GBP"
                    },
                    "quantity": 100,
                    "state": "New",
                    "side": "Buy",
                    "timeInForce": "GoodTilCancel",
                    "type": "Limit",
                    "createdDate": "2006-04-11T00:00:00.0000000+00:00",
                    "limitPrice": {
                      "amount": 12413.33,
                      "currency": "USD"
                    },
                    "stopPrice": {
                      "amount": 124335.33,
                      "currency": "USD"
                    },
                    "counterparty": "SomeCounterparty"
                  }
                ]
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PlacementSetRequest"
              },
              "example": {
                "requests": [
                  {
                    "id": {
                      "scope": "MyScope",
                      "code": "PLAC00000123"
                    },
                    "blockIds": [
                      {
                        "scope": "MyScope",
                        "code": "BLOCK00000123"
                      }
                    ],
                    "properties": {
                      "Placement/MyScope/SomePlacementProperty": {
                        "key": "Placement/MyScope/SomePlacementProperty",
                        "value": {
                          "labelValue": "XYZ000034567"
                        }
                      }
                    },
                    "instrumentIdentifiers": {
                      "Instrument/default/Currency": "GBP"
                    },
                    "quantity": 100,
                    "state": "New",
                    "side": "Buy",
                    "timeInForce": "GoodTilCancel",
                    "type": "Limit",
                    "createdDate": "2006-04-11T00:00:00.0000000+00:00",
                    "limitPrice": {
                      "amount": 12413.33,
                      "currency": "USD"
                    },
                    "stopPrice": {
                      "amount": 124335.33,
                      "currency": "USD"
                    },
                    "counterparty": "SomeCounterparty"
                  }
                ]
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/PlacementSetRequest"
              },
              "example": {
                "requests": [
                  {
                    "id": {
                      "scope": "MyScope",
                      "code": "PLAC00000123"
                    },
                    "blockIds": [
                      {
                        "scope": "MyScope",
                        "code": "BLOCK00000123"
                      }
                    ],
                    "properties": {
                      "Placement/MyScope/SomePlacementProperty": {
                        "key": "Placement/MyScope/SomePlacementProperty",
                        "value": {
                          "labelValue": "XYZ000034567"
                        }
                      }
                    },
                    "instrumentIdentifiers": {
                      "Instrument/default/Currency": "GBP"
                    },
                    "quantity": 100,
                    "state": "New",
                    "side": "Buy",
                    "timeInForce": "GoodTilCancel",
                    "type": "Limit",
                    "createdDate": "2006-04-11T00:00:00.0000000+00:00",
                    "limitPrice": {
                      "amount": 12413.33,
                      "currency": "USD"
                    },
                    "stopPrice": {
                      "amount": 124335.33,
                      "currency": "USD"
                    },
                    "counterparty": "SomeCounterparty"
                  }
                ]
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/PlacementSetRequest"
              },
              "example": {
                "requests": [
                  {
                    "id": {
                      "scope": "MyScope",
                      "code": "PLAC00000123"
                    },
                    "blockIds": [
                      {
                        "scope": "MyScope",
                        "code": "BLOCK00000123"
                      }
                    ],
                    "properties": {
                      "Placement/MyScope/SomePlacementProperty": {
                        "key": "Placement/MyScope/SomePlacementProperty",
                        "value": {
                          "labelValue": "XYZ000034567"
                        }
                      }
                    },
                    "instrumentIdentifiers": {
                      "Instrument/default/Currency": "GBP"
                    },
                    "quantity": 100,
                    "state": "New",
                    "side": "Buy",
                    "timeInForce": "GoodTilCancel",
                    "type": "Limit",
                    "createdDate": "2006-04-11T00:00:00.0000000+00:00",
                    "limitPrice": {
                      "amount": 12413.33,
                      "currency": "USD"
                    },
                    "stopPrice": {
                      "amount": 124335.33,
                      "currency": "USD"
                    },
                    "counterparty": "SomeCounterparty"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "A collection of placements.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfPlacement"
                },
                "example": {
                  "values": [
                    {
                      "id": {
                        "scope": "MyScope",
                        "code": "PLAC00000123"
                      },
                      "blockIds": [
                        {
                          "scope": "MyScope",
                          "code": "BLOC00000123"
                        }
                      ],
                      "properties": {
                        "Allocation/MyScope/SomeAllocationProperty": {
                          "key": "Allocation/MyScope/SomeAllocationProperty",
                          "value": {
                            "labelValue": "XYZ000034567"
                          }
                        }
                      },
                      "instrumentIdentifiers": {
                        "Instrument/default/Currency": "GBP"
                      },
                      "quantity": 100.5,
                      "state": "New",
                      "side": "Buy",
                      "timeInForce": "GoodTilCancel",
                      "type": "Limit",
                      "createdDate": "2006-04-11T00:00:00.0000000+00:00",
                      "limitPrice": {
                        "amount": 12413.33,
                        "currency": "USD"
                      },
                      "stopPrice": {
                        "amount": 51244.33,
                        "currency": "USD"
                      },
                      "counterparty": "SomeCounterparty",
                      "version": {
                        "effectiveFrom": "2018-03-05T10:10:10.0000000+00:00",
                        "asAtDate": "2018-03-05T10:10:10.0000000+00:00",
                        "asAtCreated": "2018-03-05T10:10:10.0000000+00:00",
                        "userIdCreated": "PlacementUser1",
                        "asAtModified": "2018-03-08T10:10:10.0000000+00:00",
                        "userIdModified": "PlacementUser2",
                        "asAtVersionNumber": 2
                      }
                    }
                  ],
                  "links": []
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfPlacement"
                },
                "example": {
                  "values": [
                    {
                      "id": {
                        "scope": "MyScope",
                        "code": "PLAC00000123"
                      },
                      "blockIds": [
                        {
                          "scope": "MyScope",
                          "code": "BLOC00000123"
                        }
                      ],
                      "properties": {
                        "Allocation/MyScope/SomeAllocationProperty": {
                          "key": "Allocation/MyScope/SomeAllocationProperty",
                          "value": {
                            "labelValue": "XYZ000034567"
                          }
                        }
                      },
                      "instrumentIdentifiers": {
                        "Instrument/default/Currency": "GBP"
                      },
                      "quantity": 100.5,
                      "state": "New",
                      "side": "Buy",
                      "timeInForce": "GoodTilCancel",
                      "type": "Limit",
                      "createdDate": "2006-04-11T00:00:00.0000000+00:00",
                      "limitPrice": {
                        "amount": 12413.33,
                        "currency": "USD"
                      },
                      "stopPrice": {
                        "amount": 51244.33,
                        "currency": "USD"
                      },
                      "counterparty": "SomeCounterparty",
                      "version": {
                        "effectiveFrom": "2018-03-05T10:10:10.0000000+00:00",
                        "asAtDate": "2018-03-05T10:10:10.0000000+00:00",
                        "asAtCreated": "2018-03-05T10:10:10.0000000+00:00",
                        "userIdCreated": "PlacementUser1",
                        "asAtModified": "2018-03-08T10:10:10.0000000+00:00",
                        "userIdModified": "PlacementUser2",
                        "asAtVersionNumber": 2
                      }
                    }
                  ],
                  "links": []
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfPlacement"
                },
                "example": {
                  "values": [
                    {
                      "id": {
                        "scope": "MyScope",
                        "code": "PLAC00000123"
                      },
                      "blockIds": [
                        {
                          "scope": "MyScope",
                          "code": "BLOC00000123"
                        }
                      ],
                      "properties": {
                        "Allocation/MyScope/SomeAllocationProperty": {
                          "key": "Allocation/MyScope/SomeAllocationProperty",
                          "value": {
                            "labelValue": "XYZ000034567"
                          }
                        }
                      },
                      "instrumentIdentifiers": {
                        "Instrument/default/Currency": "GBP"
                      },
                      "quantity": 100.5,
                      "state": "New",
                      "side": "Buy",
                      "timeInForce": "GoodTilCancel",
                      "type": "Limit",
                      "createdDate": "2006-04-11T00:00:00.0000000+00:00",
                      "limitPrice": {
                        "amount": 12413.33,
                        "currency": "USD"
                      },
                      "stopPrice": {
                        "amount": 51244.33,
                        "currency": "USD"
                      },
                      "counterparty": "SomeCounterparty",
                      "version": {
                        "effectiveFrom": "2018-03-05T10:10:10.0000000+00:00",
                        "asAtDate": "2018-03-05T10:10:10.0000000+00:00",
                        "asAtCreated": "2018-03-05T10:10:10.0000000+00:00",
                        "userIdCreated": "PlacementUser1",
                        "asAtModified": "2018-03-08T10:10:10.0000000+00:00",
                        "userIdModified": "PlacementUser2",
                        "asAtVersionNumber": 2
                      }
                    }
                  ],
                  "links": []
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      }
    },
    "/api/placements/{scope}/{code}": {
      "get": {
        "tags": [
          "Placements"
        ],
        "summary": "[EARLY ACCESS] GetPlacement: Get Placement",
        "description": "Fetch a Placement that matches the specified identifier",
        "operationId": "GetPlacement",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope to which the placement belongs.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string"
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The placement's unique identifier.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "type": "string"
            }
          },
          {
            "name": "asAt",
            "in": "query",
            "description": "The asAt datetime at which to retrieve the placement. Defaults to return the latest version of the placement if not specified.",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "x-nullable": true
          },
          {
            "name": "propertyKeys",
            "in": "query",
            "description": "A list of property keys from the \"Placement\" domain to decorate onto the placement.\r\n            These take the format {domain}/{scope}/{code} e.g. \"Placement/system/Name\".",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "description": "The key that uniquely identifies the property. It has the format {domain}/{scope}/{code}."
              }
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "description": "The placement matching the given identifier.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Placement"
                },
                "example": {
                  "id": {
                    "scope": "MyScope",
                    "code": "PLAC00000123"
                  },
                  "blockIds": [
                    {
                      "scope": "MyScope",
                      "code": "BLOC00000123"
                    }
                  ],
                  "properties": {
                    "Allocation/MyScope/SomeAllocationProperty": {
                      "key": "Allocation/MyScope/SomeAllocationProperty",
                      "value": {
                        "labelValue": "XYZ000034567"
                      }
                    }
                  },
                  "instrumentIdentifiers": {
                    "Instrument/default/Currency": "GBP"
                  },
                  "quantity": 100.5,
                  "state": "New",
                  "side": "Buy",
                  "timeInForce": "GoodTilCancel",
                  "type": "Limit",
                  "createdDate": "2006-04-11T00:00:00.0000000+00:00",
                  "limitPrice": {
                    "amount": 12413.33,
                    "currency": "USD"
                  },
                  "stopPrice": {
                    "amount": 51244.33,
                    "currency": "USD"
                  },
                  "counterparty": "SomeCounterparty",
                  "version": {
                    "effectiveFrom": "2018-03-05T10:10:10.0000000+00:00",
                    "asAtDate": "2018-03-05T10:10:10.0000000+00:00",
                    "asAtCreated": "2018-03-05T10:10:10.0000000+00:00",
                    "userIdCreated": "PlacementUser1",
                    "asAtModified": "2018-03-08T10:10:10.0000000+00:00",
                    "userIdModified": "PlacementUser2",
                    "asAtVersionNumber": 2
                  }
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Placement"
                },
                "example": {
                  "id": {
                    "scope": "MyScope",
                    "code": "PLAC00000123"
                  },
                  "blockIds": [
                    {
                      "scope": "MyScope",
                      "code": "BLOC00000123"
                    }
                  ],
                  "properties": {
                    "Allocation/MyScope/SomeAllocationProperty": {
                      "key": "Allocation/MyScope/SomeAllocationProperty",
                      "value": {
                        "labelValue": "XYZ000034567"
                      }
                    }
                  },
                  "instrumentIdentifiers": {
                    "Instrument/default/Currency": "GBP"
                  },
                  "quantity": 100.5,
                  "state": "New",
                  "side": "Buy",
                  "timeInForce": "GoodTilCancel",
                  "type": "Limit",
                  "createdDate": "2006-04-11T00:00:00.0000000+00:00",
                  "limitPrice": {
                    "amount": 12413.33,
                    "currency": "USD"
                  },
                  "stopPrice": {
                    "amount": 51244.33,
                    "currency": "USD"
                  },
                  "counterparty": "SomeCounterparty",
                  "version": {
                    "effectiveFrom": "2018-03-05T10:10:10.0000000+00:00",
                    "asAtDate": "2018-03-05T10:10:10.0000000+00:00",
                    "asAtCreated": "2018-03-05T10:10:10.0000000+00:00",
                    "userIdCreated": "PlacementUser1",
                    "asAtModified": "2018-03-08T10:10:10.0000000+00:00",
                    "userIdModified": "PlacementUser2",
                    "asAtVersionNumber": 2
                  }
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Placement"
                },
                "example": {
                  "id": {
                    "scope": "MyScope",
                    "code": "PLAC00000123"
                  },
                  "blockIds": [
                    {
                      "scope": "MyScope",
                      "code": "BLOC00000123"
                    }
                  ],
                  "properties": {
                    "Allocation/MyScope/SomeAllocationProperty": {
                      "key": "Allocation/MyScope/SomeAllocationProperty",
                      "value": {
                        "labelValue": "XYZ000034567"
                      }
                    }
                  },
                  "instrumentIdentifiers": {
                    "Instrument/default/Currency": "GBP"
                  },
                  "quantity": 100.5,
                  "state": "New",
                  "side": "Buy",
                  "timeInForce": "GoodTilCancel",
                  "type": "Limit",
                  "createdDate": "2006-04-11T00:00:00.0000000+00:00",
                  "limitPrice": {
                    "amount": 12413.33,
                    "currency": "USD"
                  },
                  "stopPrice": {
                    "amount": 51244.33,
                    "currency": "USD"
                  },
                  "counterparty": "SomeCounterparty",
                  "version": {
                    "effectiveFrom": "2018-03-05T10:10:10.0000000+00:00",
                    "asAtDate": "2018-03-05T10:10:10.0000000+00:00",
                    "asAtCreated": "2018-03-05T10:10:10.0000000+00:00",
                    "userIdCreated": "PlacementUser1",
                    "asAtModified": "2018-03-08T10:10:10.0000000+00:00",
                    "userIdModified": "PlacementUser2",
                    "asAtVersionNumber": 2
                  }
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      },
      "delete": {
        "tags": [
          "Placements"
        ],
        "summary": "[EARLY ACCESS] DeletePlacement: Delete placement",
        "description": "Delete an placement. Deletion will be valid from the placement's creation datetime.\r\nThis means that the placement will no longer exist at any effective datetime from the asAt datetime of deletion.",
        "operationId": "DeletePlacement",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The placement scope.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string"
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The placement's code. This, together with the scope uniquely identifies the placement to delete.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The response from deleting an placement.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedEntityResponse"
                },
                "example": {
                  "asAt": "2018-03-05T10:10:10.0000000+00:00"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedEntityResponse"
                },
                "example": {
                  "asAt": "2018-03-05T10:10:10.0000000+00:00"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedEntityResponse"
                },
                "example": {
                  "asAt": "2018-03-05T10:10:10.0000000+00:00"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      }
    },
    "/api/portfoliogroups/{scope}": {
      "post": {
        "tags": [
          "Portfolio Groups"
        ],
        "summary": "CreatePortfolioGroup: Create portfolio group",
        "description": "Create a portfolio group in a specific scope.",
        "operationId": "CreatePortfolioGroup",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope that the portfolio group will be created in.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The definition and details of the portfolio group.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/CreatePortfolioGroupRequest"
              },
              "example": {
                "code": "MyGroupCode",
                "created": "2019-10-04T00:00:00.0000000+00:00",
                "values": [
                  {
                    "scope": "MyScope",
                    "code": "MyPortfolioCode1"
                  },
                  {
                    "scope": "MyScope",
                    "code": "MyPortfolioCode2"
                  }
                ],
                "subGroups": [
                  {
                    "scope": "MyScope",
                    "code": "MySubGroupCode"
                  }
                ],
                "properties": {},
                "displayName": "MyGroupName",
                "description": "My group description"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreatePortfolioGroupRequest"
              },
              "example": {
                "code": "MyGroupCode",
                "created": "2019-10-04T00:00:00.0000000+00:00",
                "values": [
                  {
                    "scope": "MyScope",
                    "code": "MyPortfolioCode1"
                  },
                  {
                    "scope": "MyScope",
                    "code": "MyPortfolioCode2"
                  }
                ],
                "subGroups": [
                  {
                    "scope": "MyScope",
                    "code": "MySubGroupCode"
                  }
                ],
                "properties": {},
                "displayName": "MyGroupName",
                "description": "My group description"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/CreatePortfolioGroupRequest"
              },
              "example": {
                "code": "MyGroupCode",
                "created": "2019-10-04T00:00:00.0000000+00:00",
                "values": [
                  {
                    "scope": "MyScope",
                    "code": "MyPortfolioCode1"
                  },
                  {
                    "scope": "MyScope",
                    "code": "MyPortfolioCode2"
                  }
                ],
                "subGroups": [
                  {
                    "scope": "MyScope",
                    "code": "MySubGroupCode"
                  }
                ],
                "properties": {},
                "displayName": "MyGroupName",
                "description": "My group description"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/CreatePortfolioGroupRequest"
              },
              "example": {
                "code": "MyGroupCode",
                "created": "2019-10-04T00:00:00.0000000+00:00",
                "values": [
                  {
                    "scope": "MyScope",
                    "code": "MyPortfolioCode1"
                  },
                  {
                    "scope": "MyScope",
                    "code": "MyPortfolioCode2"
                  }
                ],
                "subGroups": [
                  {
                    "scope": "MyScope",
                    "code": "MySubGroupCode"
                  }
                ],
                "properties": {},
                "displayName": "MyGroupName",
                "description": "My group description"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The newly created portfolio group",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PortfolioGroup"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortfolioGroup"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortfolioGroup"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Stable"
      },
      "get": {
        "tags": [
          "Portfolio Groups"
        ],
        "summary": "[EARLY ACCESS] ListPortfolioGroups: List portfolio groups",
        "description": "List all the portfolio groups in a single scope.",
        "operationId": "ListPortfolioGroups",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope to list the portfolio groups in.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string"
            }
          },
          {
            "name": "effectiveAt",
            "in": "query",
            "description": "The effective datetime or cut label at which to list the portfolio groups. Defaults to the current LUSID system datetime if not specified.",
            "schema": {
              "maxLength": 256,
              "minLength": 0,
              "pattern": "^[a-zA-Z0-9\\-_\\+:\\.]+$",
              "type": "string",
              "format": "dateorcutlabel"
            }
          },
          {
            "name": "asAt",
            "in": "query",
            "description": "The asAt datetime at which to list the portfolio groups. Defaults to return the latest version of each portfolio group if not specified.",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "x-nullable": true
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Expression to filter the result set.\r\n            For example, to filter on the Display Name, use \"displayName eq 'string'\"\r\n            Read more about filtering results from LUSID here https://support.lusid.com/filtering-results-from-lusid.",
            "schema": {
              "maxLength": 16384,
              "minLength": 0,
              "pattern": "^[\\s\\S]*$",
              "type": "string"
            }
          },
          {
            "name": "relatedEntityPropertyKeys",
            "in": "query",
            "description": "A list of property keys from any domain that supports relationships\r\n            to decorate onto related entities. These must take the format {domain}/{scope}/{code}, for example 'Portfolio/Manager/Id'.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "description": "The key that uniquely identifies the property. It has the format {domain}/{scope}/{code}."
              }
            },
            "x-nullable": true
          },
          {
            "name": "relationshipDefinitionIds",
            "in": "query",
            "description": "A list of relationship definitions that are used to decorate related entities\r\n            onto the portfolio groups in the response. These must take the form {relationshipDefinitionScope}/{relationshipDefinitionCode}.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "description": "Identifiers of an entity"
              }
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "description": "The portfolio groups in the specified scope",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfPortfolioGroup"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfPortfolioGroup"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfPortfolioGroup"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      }
    },
    "/api/portfoliogroups/{scope}/{code}": {
      "put": {
        "tags": [
          "Portfolio Groups"
        ],
        "summary": "[EARLY ACCESS] UpdatePortfolioGroup: Update portfolio group",
        "description": "Update the definition of a single portfolio group. Not all elements within a portfolio group definition are modifiable\r\ndue to the potential implications for data already stored against the portfolio group.",
        "operationId": "UpdatePortfolioGroup",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the portfolio group to update the definition for.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string"
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The code of the portfolio group to update the definition for. Together with the scope this uniquely identifies the portfolio group.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string"
            }
          },
          {
            "name": "effectiveAt",
            "in": "query",
            "description": "The effective datetime or cut label at which to update the definition.",
            "schema": {
              "maxLength": 256,
              "minLength": 0,
              "pattern": "^[a-zA-Z0-9\\-_\\+:\\.]+$",
              "type": "string",
              "format": "dateorcutlabel"
            }
          }
        ],
        "requestBody": {
          "description": "The updated portfolio group definition.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/UpdatePortfolioGroupRequest"
              },
              "example": {
                "displayName": "MyGroupName",
                "description": "My Group Description"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdatePortfolioGroupRequest"
              },
              "example": {
                "displayName": "MyGroupName",
                "description": "My Group Description"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdatePortfolioGroupRequest"
              },
              "example": {
                "displayName": "MyGroupName",
                "description": "My Group Description"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/UpdatePortfolioGroupRequest"
              },
              "example": {
                "displayName": "MyGroupName",
                "description": "My Group Description"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The updated definition of the portfolio group",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PortfolioGroup"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortfolioGroup"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortfolioGroup"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      },
      "delete": {
        "tags": [
          "Portfolio Groups"
        ],
        "summary": "[EARLY ACCESS] DeletePortfolioGroup: Delete portfolio group",
        "description": "Delete a single portfolio group. A portfolio group can be deleted while it still contains portfolios or sub groups.\r\nIn this case any portfolios or sub groups contained in this group will not be deleted, however they will no longer be grouped together by this portfolio group.\r\nThe deletion will be valid from the portfolio group's creation datetime, ie. the portfolio group will no longer exist at any effective datetime from the asAt datetime of deletion.",
        "operationId": "DeletePortfolioGroup",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the portfolio group to delete.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string"
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The code of the portfolio group to delete. Together with the scope this uniquely identifies the portfolio group to delete.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The datetime that the portfolio group was deleted",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedEntityResponse"
                },
                "example": {
                  "asAt": "2018-03-05T10:10:10.0000000+00:00"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedEntityResponse"
                },
                "example": {
                  "asAt": "2018-03-05T10:10:10.0000000+00:00"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedEntityResponse"
                },
                "example": {
                  "asAt": "2018-03-05T10:10:10.0000000+00:00"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      },
      "get": {
        "tags": [
          "Portfolio Groups"
        ],
        "summary": "GetPortfolioGroup: Get portfolio group",
        "description": "Retrieve the definition of a single portfolio group.",
        "operationId": "GetPortfolioGroup",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the portfolio group to retrieve the definition for.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string"
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The code of the portfolio group to retrieve the definition for. Together with the scope\r\n            this uniquely identifies the portfolio group.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string"
            }
          },
          {
            "name": "effectiveAt",
            "in": "query",
            "description": "The effective datetime or cut label at which to retrieve the portfolio group definition. Defaults to the current LUSID system datetime if not specified.",
            "schema": {
              "maxLength": 256,
              "minLength": 0,
              "pattern": "^[a-zA-Z0-9\\-_\\+:\\.]+$",
              "type": "string",
              "format": "dateorcutlabel"
            }
          },
          {
            "name": "asAt",
            "in": "query",
            "description": "The asAt datetime at which to retrieve the portfolio group definition. Defaults to return\r\n            the latest version of the portfolio group definition if not specified.",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "x-nullable": true
          },
          {
            "name": "relatedEntityPropertyKeys",
            "in": "query",
            "description": "A list of property keys from any domain that supports relationships\r\n            to decorate onto related entities. These must take the format {domain}/{scope}/{code}, for example 'Portfolio/Manager/Id'.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "description": "The key that uniquely identifies the property. It has the format {domain}/{scope}/{code}."
              }
            },
            "x-nullable": true
          },
          {
            "name": "relationshipDefinitionIds",
            "in": "query",
            "description": "A list of relationship definitions that are used to decorate related entities\r\n            onto the portfolio group in the response. These must take the form {relationshipDefinitionScope}/{relationshipDefinitionCode}.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "description": "Identifiers of an entity"
              }
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "description": "The requested portfolio group definition",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PortfolioGroup"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortfolioGroup"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortfolioGroup"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Stable"
      }
    },
    "/api/portfoliogroups/{scope}/{code}/a2b": {
      "get": {
        "tags": [
          "Portfolio Groups"
        ],
        "summary": "[EARLY ACCESS] GetA2BDataForPortfolioGroup: Get A2B data for a Portfolio Group",
        "description": "Get an A2B report for all Transaction Portfolios within the given portfolio group.",
        "operationId": "GetA2BDataForPortfolioGroup",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the group to retrieve the A2B report for.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string"
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The code of the group to retrieve the A2B report for. Together with the scope this\r\n            uniquely identifies the portfolio group.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string"
            }
          },
          {
            "name": "fromEffectiveAt",
            "in": "query",
            "description": "The lower bound effective datetime or cut label (inclusive) from which to retrieve the data.\r\n            There is no lower bound if this is not specified.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "dateorcutlabel"
            }
          },
          {
            "name": "toEffectiveAt",
            "in": "query",
            "description": "The upper bound effective datetime or cut label (inclusive) from which to retrieve the data.\r\n            There is no upper bound if this is not specified.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "dateorcutlabel"
            }
          },
          {
            "name": "asAt",
            "in": "query",
            "description": "The asAt datetime at which to retrieve the portfolio. Defaults to return the latest version\r\n            of each transaction if not specified.",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "x-nullable": true
          },
          {
            "name": "recipeIdScope",
            "in": "query",
            "description": "The scope of the given recipeId",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "recipeIdCode",
            "in": "query",
            "description": "The code of the given recipeId",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "propertyKeys",
            "in": "query",
            "description": "A list of property keys from the \"Instrument\" domain to decorate onto\r\n            the results. These take the format {domain}/{scope}/{code} e.g. \"Instrument/system/Name\".",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "description": "The key that uniquely identifies the property. It has the format {domain}/{scope}/{code}."
              }
            },
            "x-nullable": true
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Expression to filter the result set.\r\n            Read more about filtering results from LUSID here https://support.lusid.com/filtering-results-from-lusid.",
            "schema": {
              "maxLength": 16384,
              "minLength": 0,
              "pattern": "^[\\s\\S]*$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The requested group A2B data",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/VersionedResourceListOfA2BDataRecord"
                },
                "example": {
                  "version": {
                    "effectiveFrom": "2020-10-31T00:00:00.0000000+00:00",
                    "asAtDate": "2021-10-31T00:00:00.0000000+00:00"
                  },
                  "values": [
                    {
                      "portfolioId": {
                        "scope": "Example",
                        "code": "Portfolio"
                      },
                      "holdingType": "B",
                      "instrumentScope": "default",
                      "instrumentUid": "CCY_EUR",
                      "subHoldingKeys": {
                        "Transaction/Algo/Name": {
                          "key": "Transaction/Algo/Name",
                          "value": {
                            "labelValue": "CASH"
                          }
                        }
                      },
                      "currency": "EUR",
                      "start": {
                        "holdingCurrency": {
                          "total": 20000,
                          "currency": "EUR",
                          "components": {
                            "Cost": 20000
                          }
                        },
                        "portfolioCurrency": {
                          "total": 17400,
                          "currency": "GBP",
                          "components": {
                            "Cost": 16720,
                            "CurrencyGain": 680
                          }
                        }
                      },
                      "flows": {
                        "holdingCurrency": {
                          "total": -10415,
                          "currency": "EUR",
                          "components": {
                            "In": 192548,
                            "Out": -202963
                          }
                        },
                        "portfolioCurrency": {
                          "total": -9424.94,
                          "currency": "GBP",
                          "components": {
                            "In": 163473.25,
                            "Out": -172898.19
                          }
                        }
                      },
                      "gains": {
                        "portfolioCurrency": {
                          "total": -19.51,
                          "currency": "GBP",
                          "components": {
                            "RealCurrencyGain": 830.88,
                            "DeltaCurrencyGain": -850.39
                          }
                        }
                      },
                      "end": {
                        "holdingCurrency": {
                          "total": 9585,
                          "currency": "EUR",
                          "components": {
                            "Cost": 9585
                          }
                        },
                        "portfolioCurrency": {
                          "total": 7955.55,
                          "currency": "GBP",
                          "components": {
                            "Cost": 8125.94,
                            "CurrencyGain": -170.39
                          }
                        }
                      },
                      "properties": {
                        "Instrument/default/Name": {
                          "key": "Instrument/default/Name",
                          "value": {
                            "labelValue": "EURO"
                          }
                        },
                        "Instrument/default/Currency": {
                          "key": "Instrument/default/Currency",
                          "value": {
                            "labelValue": "EUR"
                          }
                        }
                      },
                      "groupId": "Grp1",
                      "errors": []
                    },
                    {
                      "portfolioId": {
                        "scope": "Example",
                        "code": "Portfolio"
                      },
                      "holdingType": "B",
                      "instrumentScope": "default",
                      "instrumentUid": "CCY_GBP",
                      "subHoldingKeys": {
                        "Transaction/Algo/Name": {
                          "key": "Transaction/Algo/Name",
                          "value": {
                            "labelValue": "CASH"
                          }
                        }
                      },
                      "currency": "GBP",
                      "start": {
                        "holdingCurrency": {
                          "total": 50000,
                          "currency": "GBP",
                          "components": {
                            "Cost": 50000
                          }
                        },
                        "portfolioCurrency": {
                          "total": 50000,
                          "currency": "GBP",
                          "components": {
                            "Cost": 50000
                          }
                        }
                      },
                      "end": {
                        "holdingCurrency": {
                          "total": 50000,
                          "currency": "GBP",
                          "components": {
                            "Cost": 50000
                          }
                        },
                        "portfolioCurrency": {
                          "total": 50000,
                          "currency": "GBP",
                          "components": {
                            "Cost": 50000
                          }
                        }
                      },
                      "properties": {
                        "Instrument/default/Name": {
                          "key": "Instrument/default/Name",
                          "value": {
                            "labelValue": "BRITISH POUND STERLING"
                          }
                        },
                        "Instrument/default/Currency": {
                          "key": "Instrument/default/Currency",
                          "value": {
                            "labelValue": "GBP"
                          }
                        }
                      },
                      "groupId": "Grp2",
                      "errors": []
                    },
                    {
                      "portfolioId": {
                        "scope": "Example",
                        "code": "Portfolio"
                      },
                      "holdingType": "B",
                      "instrumentScope": "default",
                      "instrumentUid": "CCY_USD",
                      "subHoldingKeys": {
                        "Transaction/Algo/Name": {
                          "key": "Transaction/Algo/Name",
                          "value": {
                            "labelValue": "CASH"
                          }
                        }
                      },
                      "currency": "USD",
                      "flows": {
                        "holdingCurrency": {
                          "total": 3525865,
                          "currency": "USD",
                          "components": {
                            "In": 3525865
                          }
                        },
                        "portfolioCurrency": {
                          "total": 2525548.82,
                          "currency": "GBP",
                          "components": {
                            "In": 2525548.82
                          }
                        }
                      },
                      "gains": {
                        "portfolioCurrency": {
                          "total": 13073.98,
                          "currency": "GBP",
                          "components": {
                            "DeltaCurrencyGain": 13073.98
                          }
                        }
                      },
                      "end": {
                        "holdingCurrency": {
                          "total": 3525865,
                          "currency": "USD",
                          "components": {
                            "Cost": 3525865
                          }
                        },
                        "portfolioCurrency": {
                          "total": 2538622.8,
                          "currency": "GBP",
                          "components": {
                            "Cost": 2525548.82,
                            "CurrencyGain": 13073.98
                          }
                        }
                      },
                      "properties": {
                        "Instrument/default/Name": {
                          "key": "Instrument/default/Name",
                          "value": {
                            "labelValue": "UNITED STATES DOLLAR"
                          }
                        },
                        "Instrument/default/Currency": {
                          "key": "Instrument/default/Currency",
                          "value": {
                            "labelValue": "USD"
                          }
                        }
                      },
                      "groupId": "Grp3",
                      "errors": []
                    },
                    {
                      "portfolioId": {
                        "scope": "AnotherExample",
                        "code": "AnotherPortfolio"
                      },
                      "holdingType": "B",
                      "instrumentScope": "default",
                      "instrumentUid": "CCY_ZAR",
                      "subHoldingKeys": {
                        "Transaction/Algo/Name": {
                          "key": "Transaction/Algo/Name",
                          "value": {
                            "labelValue": "CASH"
                          }
                        }
                      },
                      "currency": "ZAR",
                      "flows": {
                        "holdingCurrency": {
                          "total": 454975.26,
                          "currency": "ZAR",
                          "components": {
                            "Out": -1271770.65,
                            "In": 1726745.91
                          }
                        },
                        "portfolioCurrency": {
                          "total": 24155.02,
                          "currency": "GBP",
                          "components": {
                            "Out": -66256.57,
                            "In": 90411.59
                          }
                        }
                      },
                      "gains": {
                        "portfolioCurrency": {
                          "total": -951.28,
                          "currency": "GBP",
                          "components": {
                            "RealCurrencyGain": -132.33,
                            "DeltaCurrencyGain": -818.95
                          }
                        }
                      },
                      "end": {
                        "holdingCurrency": {
                          "total": 454975.26,
                          "currency": "ZAR",
                          "components": {
                            "Cost": 454975.26
                          }
                        },
                        "portfolioCurrency": {
                          "total": 23203.74,
                          "currency": "GBP",
                          "components": {
                            "Cost": 24022.69,
                            "CurrencyGain": -818.95
                          }
                        }
                      },
                      "properties": {
                        "Instrument/default/Name": {
                          "key": "Instrument/default/Name",
                          "value": {
                            "labelValue": "SOUTH AFRICAN RAND"
                          }
                        },
                        "Instrument/default/Currency": {
                          "key": "Instrument/default/Currency",
                          "value": {
                            "labelValue": "ZAR"
                          }
                        }
                      },
                      "groupId": "Grp4",
                      "errors": []
                    },
                    {
                      "portfolioId": {
                        "scope": "AnotherExample",
                        "code": "AnotherPortfolio"
                      },
                      "holdingType": "P",
                      "instrumentScope": "default",
                      "instrumentUid": "LUID_DF10C5QL",
                      "subHoldingKeys": {
                        "Transaction/Algo/Name": {
                          "key": "Transaction/Algo/Name",
                          "value": {
                            "labelValue": "Algo1"
                          }
                        }
                      },
                      "currency": "EUR",
                      "start": {
                        "holdingCurrency": {
                          "total": -142482.23,
                          "currency": "EUR",
                          "components": {
                            "Cost": -133842.94,
                            "MarketGain": -8639.29
                          }
                        },
                        "portfolioCurrency": {
                          "total": -123959.54,
                          "currency": "GBP",
                          "components": {
                            "Cost": -111625.01,
                            "MarketGain": -7516.18,
                            "CurrencyGain": -4818.35
                          }
                        }
                      },
                      "flows": {
                        "holdingCurrency": {
                          "total": 41349.22,
                          "currency": "EUR",
                          "components": {
                            "In": 41349.22
                          }
                        },
                        "portfolioCurrency": {
                          "total": 35436.28,
                          "currency": "GBP",
                          "components": {
                            "In": 35436.28
                          }
                        }
                      },
                      "gains": {
                        "holdingCurrency": {
                          "total": -12655.79,
                          "currency": "EUR",
                          "components": {
                            "RealMarketGain": -4846.6,
                            "Carry": 144.22,
                            "DeltaMarketGain": -7953.41
                          }
                        },
                        "portfolioCurrency": {
                          "total": -5917.55,
                          "currency": "GBP",
                          "components": {
                            "RealMarketGain": -4153.54,
                            "RealCurrencyGain": -839.56,
                            "Carry": 123.6,
                            "DeltaMarketGain": -6255.76,
                            "DeltaCurrencyGain": 5207.71
                          }
                        }
                      },
                      "carry": {
                        "holdingCurrency": {
                          "total": -144.22,
                          "currency": "EUR",
                          "components": {
                            "CoverWithCommission": -144.22
                          }
                        },
                        "portfolioCurrency": {
                          "total": -123.6,
                          "currency": "GBP",
                          "components": {
                            "CoverWithCommission": -123.6
                          }
                        }
                      },
                      "end": {
                        "holdingCurrency": {
                          "total": -113933.02,
                          "currency": "EUR",
                          "components": {
                            "Cost": -97340.32,
                            "MarketGain": -16592.7
                          }
                        },
                        "portfolioCurrency": {
                          "total": -94564.41,
                          "currency": "GBP",
                          "components": {
                            "Cost": -81181.83,
                            "MarketGain": -13771.94,
                            "CurrencyGain": 389.36
                          }
                        }
                      },
                      "properties": {
                        "Instrument/default/Name": {
                          "key": "Instrument/default/Name",
                          "value": {
                            "labelValue": "Eur CFD #3"
                          }
                        },
                        "Instrument/default/ClientInternal": {
                          "key": "Instrument/default/ClientInternal",
                          "value": {
                            "labelValue": "SAMPLE03"
                          }
                        }
                      },
                      "groupId": "Grp5",
                      "errors": []
                    }
                  ],
                  "links": []
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VersionedResourceListOfA2BDataRecord"
                },
                "example": {
                  "version": {
                    "effectiveFrom": "2020-10-31T00:00:00.0000000+00:00",
                    "asAtDate": "2021-10-31T00:00:00.0000000+00:00"
                  },
                  "values": [
                    {
                      "portfolioId": {
                        "scope": "Example",
                        "code": "Portfolio"
                      },
                      "holdingType": "B",
                      "instrumentScope": "default",
                      "instrumentUid": "CCY_EUR",
                      "subHoldingKeys": {
                        "Transaction/Algo/Name": {
                          "key": "Transaction/Algo/Name",
                          "value": {
                            "labelValue": "CASH"
                          }
                        }
                      },
                      "currency": "EUR",
                      "start": {
                        "holdingCurrency": {
                          "total": 20000,
                          "currency": "EUR",
                          "components": {
                            "Cost": 20000
                          }
                        },
                        "portfolioCurrency": {
                          "total": 17400,
                          "currency": "GBP",
                          "components": {
                            "Cost": 16720,
                            "CurrencyGain": 680
                          }
                        }
                      },
                      "flows": {
                        "holdingCurrency": {
                          "total": -10415,
                          "currency": "EUR",
                          "components": {
                            "In": 192548,
                            "Out": -202963
                          }
                        },
                        "portfolioCurrency": {
                          "total": -9424.94,
                          "currency": "GBP",
                          "components": {
                            "In": 163473.25,
                            "Out": -172898.19
                          }
                        }
                      },
                      "gains": {
                        "portfolioCurrency": {
                          "total": -19.51,
                          "currency": "GBP",
                          "components": {
                            "RealCurrencyGain": 830.88,
                            "DeltaCurrencyGain": -850.39
                          }
                        }
                      },
                      "end": {
                        "holdingCurrency": {
                          "total": 9585,
                          "currency": "EUR",
                          "components": {
                            "Cost": 9585
                          }
                        },
                        "portfolioCurrency": {
                          "total": 7955.55,
                          "currency": "GBP",
                          "components": {
                            "Cost": 8125.94,
                            "CurrencyGain": -170.39
                          }
                        }
                      },
                      "properties": {
                        "Instrument/default/Name": {
                          "key": "Instrument/default/Name",
                          "value": {
                            "labelValue": "EURO"
                          }
                        },
                        "Instrument/default/Currency": {
                          "key": "Instrument/default/Currency",
                          "value": {
                            "labelValue": "EUR"
                          }
                        }
                      },
                      "groupId": "Grp1",
                      "errors": []
                    },
                    {
                      "portfolioId": {
                        "scope": "Example",
                        "code": "Portfolio"
                      },
                      "holdingType": "B",
                      "instrumentScope": "default",
                      "instrumentUid": "CCY_GBP",
                      "subHoldingKeys": {
                        "Transaction/Algo/Name": {
                          "key": "Transaction/Algo/Name",
                          "value": {
                            "labelValue": "CASH"
                          }
                        }
                      },
                      "currency": "GBP",
                      "start": {
                        "holdingCurrency": {
                          "total": 50000,
                          "currency": "GBP",
                          "components": {
                            "Cost": 50000
                          }
                        },
                        "portfolioCurrency": {
                          "total": 50000,
                          "currency": "GBP",
                          "components": {
                            "Cost": 50000
                          }
                        }
                      },
                      "end": {
                        "holdingCurrency": {
                          "total": 50000,
                          "currency": "GBP",
                          "components": {
                            "Cost": 50000
                          }
                        },
                        "portfolioCurrency": {
                          "total": 50000,
                          "currency": "GBP",
                          "components": {
                            "Cost": 50000
                          }
                        }
                      },
                      "properties": {
                        "Instrument/default/Name": {
                          "key": "Instrument/default/Name",
                          "value": {
                            "labelValue": "BRITISH POUND STERLING"
                          }
                        },
                        "Instrument/default/Currency": {
                          "key": "Instrument/default/Currency",
                          "value": {
                            "labelValue": "GBP"
                          }
                        }
                      },
                      "groupId": "Grp2",
                      "errors": []
                    },
                    {
                      "portfolioId": {
                        "scope": "Example",
                        "code": "Portfolio"
                      },
                      "holdingType": "B",
                      "instrumentScope": "default",
                      "instrumentUid": "CCY_USD",
                      "subHoldingKeys": {
                        "Transaction/Algo/Name": {
                          "key": "Transaction/Algo/Name",
                          "value": {
                            "labelValue": "CASH"
                          }
                        }
                      },
                      "currency": "USD",
                      "flows": {
                        "holdingCurrency": {
                          "total": 3525865,
                          "currency": "USD",
                          "components": {
                            "In": 3525865
                          }
                        },
                        "portfolioCurrency": {
                          "total": 2525548.82,
                          "currency": "GBP",
                          "components": {
                            "In": 2525548.82
                          }
                        }
                      },
                      "gains": {
                        "portfolioCurrency": {
                          "total": 13073.98,
                          "currency": "GBP",
                          "components": {
                            "DeltaCurrencyGain": 13073.98
                          }
                        }
                      },
                      "end": {
                        "holdingCurrency": {
                          "total": 3525865,
                          "currency": "USD",
                          "components": {
                            "Cost": 3525865
                          }
                        },
                        "portfolioCurrency": {
                          "total": 2538622.8,
                          "currency": "GBP",
                          "components": {
                            "Cost": 2525548.82,
                            "CurrencyGain": 13073.98
                          }
                        }
                      },
                      "properties": {
                        "Instrument/default/Name": {
                          "key": "Instrument/default/Name",
                          "value": {
                            "labelValue": "UNITED STATES DOLLAR"
                          }
                        },
                        "Instrument/default/Currency": {
                          "key": "Instrument/default/Currency",
                          "value": {
                            "labelValue": "USD"
                          }
                        }
                      },
                      "groupId": "Grp3",
                      "errors": []
                    },
                    {
                      "portfolioId": {
                        "scope": "AnotherExample",
                        "code": "AnotherPortfolio"
                      },
                      "holdingType": "B",
                      "instrumentScope": "default",
                      "instrumentUid": "CCY_ZAR",
                      "subHoldingKeys": {
                        "Transaction/Algo/Name": {
                          "key": "Transaction/Algo/Name",
                          "value": {
                            "labelValue": "CASH"
                          }
                        }
                      },
                      "currency": "ZAR",
                      "flows": {
                        "holdingCurrency": {
                          "total": 454975.26,
                          "currency": "ZAR",
                          "components": {
                            "Out": -1271770.65,
                            "In": 1726745.91
                          }
                        },
                        "portfolioCurrency": {
                          "total": 24155.02,
                          "currency": "GBP",
                          "components": {
                            "Out": -66256.57,
                            "In": 90411.59
                          }
                        }
                      },
                      "gains": {
                        "portfolioCurrency": {
                          "total": -951.28,
                          "currency": "GBP",
                          "components": {
                            "RealCurrencyGain": -132.33,
                            "DeltaCurrencyGain": -818.95
                          }
                        }
                      },
                      "end": {
                        "holdingCurrency": {
                          "total": 454975.26,
                          "currency": "ZAR",
                          "components": {
                            "Cost": 454975.26
                          }
                        },
                        "portfolioCurrency": {
                          "total": 23203.74,
                          "currency": "GBP",
                          "components": {
                            "Cost": 24022.69,
                            "CurrencyGain": -818.95
                          }
                        }
                      },
                      "properties": {
                        "Instrument/default/Name": {
                          "key": "Instrument/default/Name",
                          "value": {
                            "labelValue": "SOUTH AFRICAN RAND"
                          }
                        },
                        "Instrument/default/Currency": {
                          "key": "Instrument/default/Currency",
                          "value": {
                            "labelValue": "ZAR"
                          }
                        }
                      },
                      "groupId": "Grp4",
                      "errors": []
                    },
                    {
                      "portfolioId": {
                        "scope": "AnotherExample",
                        "code": "AnotherPortfolio"
                      },
                      "holdingType": "P",
                      "instrumentScope": "default",
                      "instrumentUid": "LUID_DF10C5QL",
                      "subHoldingKeys": {
                        "Transaction/Algo/Name": {
                          "key": "Transaction/Algo/Name",
                          "value": {
                            "labelValue": "Algo1"
                          }
                        }
                      },
                      "currency": "EUR",
                      "start": {
                        "holdingCurrency": {
                          "total": -142482.23,
                          "currency": "EUR",
                          "components": {
                            "Cost": -133842.94,
                            "MarketGain": -8639.29
                          }
                        },
                        "portfolioCurrency": {
                          "total": -123959.54,
                          "currency": "GBP",
                          "components": {
                            "Cost": -111625.01,
                            "MarketGain": -7516.18,
                            "CurrencyGain": -4818.35
                          }
                        }
                      },
                      "flows": {
                        "holdingCurrency": {
                          "total": 41349.22,
                          "currency": "EUR",
                          "components": {
                            "In": 41349.22
                          }
                        },
                        "portfolioCurrency": {
                          "total": 35436.28,
                          "currency": "GBP",
                          "components": {
                            "In": 35436.28
                          }
                        }
                      },
                      "gains": {
                        "holdingCurrency": {
                          "total": -12655.79,
                          "currency": "EUR",
                          "components": {
                            "RealMarketGain": -4846.6,
                            "Carry": 144.22,
                            "DeltaMarketGain": -7953.41
                          }
                        },
                        "portfolioCurrency": {
                          "total": -5917.55,
                          "currency": "GBP",
                          "components": {
                            "RealMarketGain": -4153.54,
                            "RealCurrencyGain": -839.56,
                            "Carry": 123.6,
                            "DeltaMarketGain": -6255.76,
                            "DeltaCurrencyGain": 5207.71
                          }
                        }
                      },
                      "carry": {
                        "holdingCurrency": {
                          "total": -144.22,
                          "currency": "EUR",
                          "components": {
                            "CoverWithCommission": -144.22
                          }
                        },
                        "portfolioCurrency": {
                          "total": -123.6,
                          "currency": "GBP",
                          "components": {
                            "CoverWithCommission": -123.6
                          }
                        }
                      },
                      "end": {
                        "holdingCurrency": {
                          "total": -113933.02,
                          "currency": "EUR",
                          "components": {
                            "Cost": -97340.32,
                            "MarketGain": -16592.7
                          }
                        },
                        "portfolioCurrency": {
                          "total": -94564.41,
                          "currency": "GBP",
                          "components": {
                            "Cost": -81181.83,
                            "MarketGain": -13771.94,
                            "CurrencyGain": 389.36
                          }
                        }
                      },
                      "properties": {
                        "Instrument/default/Name": {
                          "key": "Instrument/default/Name",
                          "value": {
                            "labelValue": "Eur CFD #3"
                          }
                        },
                        "Instrument/default/ClientInternal": {
                          "key": "Instrument/default/ClientInternal",
                          "value": {
                            "labelValue": "SAMPLE03"
                          }
                        }
                      },
                      "groupId": "Grp5",
                      "errors": []
                    }
                  ],
                  "links": []
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/VersionedResourceListOfA2BDataRecord"
                },
                "example": {
                  "version": {
                    "effectiveFrom": "2020-10-31T00:00:00.0000000+00:00",
                    "asAtDate": "2021-10-31T00:00:00.0000000+00:00"
                  },
                  "values": [
                    {
                      "portfolioId": {
                        "scope": "Example",
                        "code": "Portfolio"
                      },
                      "holdingType": "B",
                      "instrumentScope": "default",
                      "instrumentUid": "CCY_EUR",
                      "subHoldingKeys": {
                        "Transaction/Algo/Name": {
                          "key": "Transaction/Algo/Name",
                          "value": {
                            "labelValue": "CASH"
                          }
                        }
                      },
                      "currency": "EUR",
                      "start": {
                        "holdingCurrency": {
                          "total": 20000,
                          "currency": "EUR",
                          "components": {
                            "Cost": 20000
                          }
                        },
                        "portfolioCurrency": {
                          "total": 17400,
                          "currency": "GBP",
                          "components": {
                            "Cost": 16720,
                            "CurrencyGain": 680
                          }
                        }
                      },
                      "flows": {
                        "holdingCurrency": {
                          "total": -10415,
                          "currency": "EUR",
                          "components": {
                            "In": 192548,
                            "Out": -202963
                          }
                        },
                        "portfolioCurrency": {
                          "total": -9424.94,
                          "currency": "GBP",
                          "components": {
                            "In": 163473.25,
                            "Out": -172898.19
                          }
                        }
                      },
                      "gains": {
                        "portfolioCurrency": {
                          "total": -19.51,
                          "currency": "GBP",
                          "components": {
                            "RealCurrencyGain": 830.88,
                            "DeltaCurrencyGain": -850.39
                          }
                        }
                      },
                      "end": {
                        "holdingCurrency": {
                          "total": 9585,
                          "currency": "EUR",
                          "components": {
                            "Cost": 9585
                          }
                        },
                        "portfolioCurrency": {
                          "total": 7955.55,
                          "currency": "GBP",
                          "components": {
                            "Cost": 8125.94,
                            "CurrencyGain": -170.39
                          }
                        }
                      },
                      "properties": {
                        "Instrument/default/Name": {
                          "key": "Instrument/default/Name",
                          "value": {
                            "labelValue": "EURO"
                          }
                        },
                        "Instrument/default/Currency": {
                          "key": "Instrument/default/Currency",
                          "value": {
                            "labelValue": "EUR"
                          }
                        }
                      },
                      "groupId": "Grp1",
                      "errors": []
                    },
                    {
                      "portfolioId": {
                        "scope": "Example",
                        "code": "Portfolio"
                      },
                      "holdingType": "B",
                      "instrumentScope": "default",
                      "instrumentUid": "CCY_GBP",
                      "subHoldingKeys": {
                        "Transaction/Algo/Name": {
                          "key": "Transaction/Algo/Name",
                          "value": {
                            "labelValue": "CASH"
                          }
                        }
                      },
                      "currency": "GBP",
                      "start": {
                        "holdingCurrency": {
                          "total": 50000,
                          "currency": "GBP",
                          "components": {
                            "Cost": 50000
                          }
                        },
                        "portfolioCurrency": {
                          "total": 50000,
                          "currency": "GBP",
                          "components": {
                            "Cost": 50000
                          }
                        }
                      },
                      "end": {
                        "holdingCurrency": {
                          "total": 50000,
                          "currency": "GBP",
                          "components": {
                            "Cost": 50000
                          }
                        },
                        "portfolioCurrency": {
                          "total": 50000,
                          "currency": "GBP",
                          "components": {
                            "Cost": 50000
                          }
                        }
                      },
                      "properties": {
                        "Instrument/default/Name": {
                          "key": "Instrument/default/Name",
                          "value": {
                            "labelValue": "BRITISH POUND STERLING"
                          }
                        },
                        "Instrument/default/Currency": {
                          "key": "Instrument/default/Currency",
                          "value": {
                            "labelValue": "GBP"
                          }
                        }
                      },
                      "groupId": "Grp2",
                      "errors": []
                    },
                    {
                      "portfolioId": {
                        "scope": "Example",
                        "code": "Portfolio"
                      },
                      "holdingType": "B",
                      "instrumentScope": "default",
                      "instrumentUid": "CCY_USD",
                      "subHoldingKeys": {
                        "Transaction/Algo/Name": {
                          "key": "Transaction/Algo/Name",
                          "value": {
                            "labelValue": "CASH"
                          }
                        }
                      },
                      "currency": "USD",
                      "flows": {
                        "holdingCurrency": {
                          "total": 3525865,
                          "currency": "USD",
                          "components": {
                            "In": 3525865
                          }
                        },
                        "portfolioCurrency": {
                          "total": 2525548.82,
                          "currency": "GBP",
                          "components": {
                            "In": 2525548.82
                          }
                        }
                      },
                      "gains": {
                        "portfolioCurrency": {
                          "total": 13073.98,
                          "currency": "GBP",
                          "components": {
                            "DeltaCurrencyGain": 13073.98
                          }
                        }
                      },
                      "end": {
                        "holdingCurrency": {
                          "total": 3525865,
                          "currency": "USD",
                          "components": {
                            "Cost": 3525865
                          }
                        },
                        "portfolioCurrency": {
                          "total": 2538622.8,
                          "currency": "GBP",
                          "components": {
                            "Cost": 2525548.82,
                            "CurrencyGain": 13073.98
                          }
                        }
                      },
                      "properties": {
                        "Instrument/default/Name": {
                          "key": "Instrument/default/Name",
                          "value": {
                            "labelValue": "UNITED STATES DOLLAR"
                          }
                        },
                        "Instrument/default/Currency": {
                          "key": "Instrument/default/Currency",
                          "value": {
                            "labelValue": "USD"
                          }
                        }
                      },
                      "groupId": "Grp3",
                      "errors": []
                    },
                    {
                      "portfolioId": {
                        "scope": "AnotherExample",
                        "code": "AnotherPortfolio"
                      },
                      "holdingType": "B",
                      "instrumentScope": "default",
                      "instrumentUid": "CCY_ZAR",
                      "subHoldingKeys": {
                        "Transaction/Algo/Name": {
                          "key": "Transaction/Algo/Name",
                          "value": {
                            "labelValue": "CASH"
                          }
                        }
                      },
                      "currency": "ZAR",
                      "flows": {
                        "holdingCurrency": {
                          "total": 454975.26,
                          "currency": "ZAR",
                          "components": {
                            "Out": -1271770.65,
                            "In": 1726745.91
                          }
                        },
                        "portfolioCurrency": {
                          "total": 24155.02,
                          "currency": "GBP",
                          "components": {
                            "Out": -66256.57,
                            "In": 90411.59
                          }
                        }
                      },
                      "gains": {
                        "portfolioCurrency": {
                          "total": -951.28,
                          "currency": "GBP",
                          "components": {
                            "RealCurrencyGain": -132.33,
                            "DeltaCurrencyGain": -818.95
                          }
                        }
                      },
                      "end": {
                        "holdingCurrency": {
                          "total": 454975.26,
                          "currency": "ZAR",
                          "components": {
                            "Cost": 454975.26
                          }
                        },
                        "portfolioCurrency": {
                          "total": 23203.74,
                          "currency": "GBP",
                          "components": {
                            "Cost": 24022.69,
                            "CurrencyGain": -818.95
                          }
                        }
                      },
                      "properties": {
                        "Instrument/default/Name": {
                          "key": "Instrument/default/Name",
                          "value": {
                            "labelValue": "SOUTH AFRICAN RAND"
                          }
                        },
                        "Instrument/default/Currency": {
                          "key": "Instrument/default/Currency",
                          "value": {
                            "labelValue": "ZAR"
                          }
                        }
                      },
                      "groupId": "Grp4",
                      "errors": []
                    },
                    {
                      "portfolioId": {
                        "scope": "AnotherExample",
                        "code": "AnotherPortfolio"
                      },
                      "holdingType": "P",
                      "instrumentScope": "default",
                      "instrumentUid": "LUID_DF10C5QL",
                      "subHoldingKeys": {
                        "Transaction/Algo/Name": {
                          "key": "Transaction/Algo/Name",
                          "value": {
                            "labelValue": "Algo1"
                          }
                        }
                      },
                      "currency": "EUR",
                      "start": {
                        "holdingCurrency": {
                          "total": -142482.23,
                          "currency": "EUR",
                          "components": {
                            "Cost": -133842.94,
                            "MarketGain": -8639.29
                          }
                        },
                        "portfolioCurrency": {
                          "total": -123959.54,
                          "currency": "GBP",
                          "components": {
                            "Cost": -111625.01,
                            "MarketGain": -7516.18,
                            "CurrencyGain": -4818.35
                          }
                        }
                      },
                      "flows": {
                        "holdingCurrency": {
                          "total": 41349.22,
                          "currency": "EUR",
                          "components": {
                            "In": 41349.22
                          }
                        },
                        "portfolioCurrency": {
                          "total": 35436.28,
                          "currency": "GBP",
                          "components": {
                            "In": 35436.28
                          }
                        }
                      },
                      "gains": {
                        "holdingCurrency": {
                          "total": -12655.79,
                          "currency": "EUR",
                          "components": {
                            "RealMarketGain": -4846.6,
                            "Carry": 144.22,
                            "DeltaMarketGain": -7953.41
                          }
                        },
                        "portfolioCurrency": {
                          "total": -5917.55,
                          "currency": "GBP",
                          "components": {
                            "RealMarketGain": -4153.54,
                            "RealCurrencyGain": -839.56,
                            "Carry": 123.6,
                            "DeltaMarketGain": -6255.76,
                            "DeltaCurrencyGain": 5207.71
                          }
                        }
                      },
                      "carry": {
                        "holdingCurrency": {
                          "total": -144.22,
                          "currency": "EUR",
                          "components": {
                            "CoverWithCommission": -144.22
                          }
                        },
                        "portfolioCurrency": {
                          "total": -123.6,
                          "currency": "GBP",
                          "components": {
                            "CoverWithCommission": -123.6
                          }
                        }
                      },
                      "end": {
                        "holdingCurrency": {
                          "total": -113933.02,
                          "currency": "EUR",
                          "components": {
                            "Cost": -97340.32,
                            "MarketGain": -16592.7
                          }
                        },
                        "portfolioCurrency": {
                          "total": -94564.41,
                          "currency": "GBP",
                          "components": {
                            "Cost": -81181.83,
                            "MarketGain": -13771.94,
                            "CurrencyGain": 389.36
                          }
                        }
                      },
                      "properties": {
                        "Instrument/default/Name": {
                          "key": "Instrument/default/Name",
                          "value": {
                            "labelValue": "Eur CFD #3"
                          }
                        },
                        "Instrument/default/ClientInternal": {
                          "key": "Instrument/default/ClientInternal",
                          "value": {
                            "labelValue": "SAMPLE03"
                          }
                        }
                      },
                      "groupId": "Grp5",
                      "errors": []
                    }
                  ],
                  "links": []
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      }
    },
    "/api/portfoliogroups/{scope}/{code}/commands": {
      "get": {
        "tags": [
          "Portfolio Groups"
        ],
        "summary": "GetPortfolioGroupCommands: Get portfolio group commands",
        "description": "Gets all the commands that modified a single portfolio group.",
        "operationId": "GetPortfolioGroupCommands",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the portfolio group to retrieve the commands for.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string"
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The code of the portfolio group to retrieve the commands for. Together with the scope this uniquely identifies the portfolio group.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string"
            }
          },
          {
            "name": "fromAsAt",
            "in": "query",
            "description": "The lower bound asAt datetime (inclusive) from which to retrieve commands. There is no lower bound if this is not specified.",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "x-nullable": true
          },
          {
            "name": "toAsAt",
            "in": "query",
            "description": "The upper bound asAt datetime (inclusive) from which to retrieve commands. There is no upper bound if this is not specified.",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "x-nullable": true
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Expression to filter the result set.\r\n             For example, to filter on the User ID, use \"userId.id eq 'string'\"\r\n            Read more about filtering results from LUSID here https://support.lusid.com/filtering-results-from-lusid.",
            "schema": {
              "maxLength": 16384,
              "minLength": 0,
              "pattern": "^[\\s\\S]*$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The commands that modified the specified portfolio group",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfProcessedCommand"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfProcessedCommand"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfProcessedCommand"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Stable"
      }
    },
    "/api/portfoliogroups/{scope}/{code}/expansion": {
      "get": {
        "tags": [
          "Portfolio Groups"
        ],
        "summary": "[EARLY ACCESS] GetPortfolioGroupExpansion: Get portfolio group expansion",
        "description": "List all the portfolios in a group, including all portfolios within sub groups in the group. Each portfolio will be decorated with all of its properties unless a property filter is specified.",
        "operationId": "GetPortfolioGroupExpansion",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the portfolio group to expand.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string"
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The code of the portfolio group to expand. Together with the scope this uniquely identifies the portfolio\r\n            group to expand.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string"
            }
          },
          {
            "name": "effectiveAt",
            "in": "query",
            "description": "The effective datetime or cut label at which to expand the portfolio group. Defaults to the current LUSID system datetime if not specified.",
            "schema": {
              "maxLength": 256,
              "minLength": 0,
              "pattern": "^[a-zA-Z0-9\\-_\\+:\\.]+$",
              "type": "string",
              "format": "dateorcutlabel"
            }
          },
          {
            "name": "asAt",
            "in": "query",
            "description": "The asAt datetime at which to expand the portfolio group. Defaults to return the latest version of each portfolio in the group if not specified.",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "x-nullable": true
          },
          {
            "name": "propertyFilter",
            "in": "query",
            "description": "The restricted list of property keys from the \"Portfolio\" domain which will be decorated onto each portfolio. These take the format {domain}/{scope}/{code} e.g. \"Portfolio/Manager/Id\".",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "description": "The key that uniquely identifies the property. It has the format {domain}/{scope}/{code}."
              }
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "description": "The expanded portfolio group",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ExpandedGroup"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExpandedGroup"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExpandedGroup"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      }
    },
    "/api/portfoliogroups/{scope}/{code}/holdings": {
      "get": {
        "tags": [
          "Portfolio Groups"
        ],
        "summary": "GetHoldingsForPortfolioGroup: Get holdings for transaction portfolios in portfolio group",
        "description": "Get the holdings of transaction portfolios in specified portfolio group.",
        "operationId": "GetHoldingsForPortfolioGroup",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the portfolio group.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string"
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The code of the portfolio group. Together with the scope this uniquely identifies\r\n            the portfolio group.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string"
            }
          },
          {
            "name": "effectiveAt",
            "in": "query",
            "description": "The effective datetime or cut label at which to retrieve the holdings of transaction\r\n            portfolios in the portfolio group. Defaults to the current LUSID system datetime if not specified.",
            "schema": {
              "type": "string",
              "format": "dateorcutlabel"
            }
          },
          {
            "name": "asAt",
            "in": "query",
            "description": "The asAt datetime at which to retrieve the holdings of transaction portfolios in the portfolio group. Defaults\r\n            to return the latest version of the holdings if not specified.",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "x-nullable": true
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Expression to filter the result set. Read more about filtering results from LUSID here https://support.lusid.com/filtering-results-from-lusid.",
            "schema": {
              "maxLength": 16384,
              "minLength": 0,
              "pattern": "^[\\s\\S]*$",
              "type": "string"
            }
          },
          {
            "name": "propertyKeys",
            "in": "query",
            "description": "A list of property keys from the \"Instrument\", \"Holding\" or \"Portfolio\" domain to decorate onto\r\n            the holdings. These take the format {domain}/{scope}/{code} e.g. \"Instrument/system/Name\" or \"Holding/system/Cost\".",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "description": "The key that uniquely identifies the property. It has the format {domain}/{scope}/{code}."
              }
            },
            "x-nullable": true
          },
          {
            "name": "byTaxlots",
            "in": "query",
            "description": "Whether or not to expand the holdings to return the underlying tax-lots. Defaults to\r\n            False.",
            "schema": {
              "type": "boolean"
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "description": "The holdings of transaction portfolios in a specific version of portfolio group",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/VersionedResourceListOfPortfolioHolding"
                },
                "example": {
                  "version": {
                    "effectiveFrom": "2019-03-05T12:00:00.0000000+00:00",
                    "asAtDate": "2019-03-05T12:00:00.0000000+00:00"
                  },
                  "values": [
                    {
                      "instrumentScope": "default",
                      "instrumentUid": "LUID_XH4GNUEX",
                      "subHoldingKeys": {
                        "Transaction/Algo/Name": {
                          "key": "Transaction/Algo/Name",
                          "value": {
                            "labelValue": "Algo1"
                          }
                        }
                      },
                      "properties": {
                        "Instrument/default/Name": {
                          "key": "Instrument/default/Name",
                          "value": {
                            "labelValue": "Example Instrument 1"
                          },
                          "effectiveFrom": "2010-01-01T00:00:00.0000000+00:00"
                        }
                      },
                      "holdingType": "P",
                      "units": 10,
                      "settledUnits": 10,
                      "cost": {
                        "amount": 2.5,
                        "currency": "GBP"
                      },
                      "costPortfolioCcy": {
                        "amount": 2.5,
                        "currency": "GBP"
                      },
                      "currency": "ZZZ",
                      "holdingTypeName": "Position"
                    }
                  ],
                  "links": []
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VersionedResourceListOfPortfolioHolding"
                },
                "example": {
                  "version": {
                    "effectiveFrom": "2019-03-05T12:00:00.0000000+00:00",
                    "asAtDate": "2019-03-05T12:00:00.0000000+00:00"
                  },
                  "values": [
                    {
                      "instrumentScope": "default",
                      "instrumentUid": "LUID_XH4GNUEX",
                      "subHoldingKeys": {
                        "Transaction/Algo/Name": {
                          "key": "Transaction/Algo/Name",
                          "value": {
                            "labelValue": "Algo1"
                          }
                        }
                      },
                      "properties": {
                        "Instrument/default/Name": {
                          "key": "Instrument/default/Name",
                          "value": {
                            "labelValue": "Example Instrument 1"
                          },
                          "effectiveFrom": "2010-01-01T00:00:00.0000000+00:00"
                        }
                      },
                      "holdingType": "P",
                      "units": 10,
                      "settledUnits": 10,
                      "cost": {
                        "amount": 2.5,
                        "currency": "GBP"
                      },
                      "costPortfolioCcy": {
                        "amount": 2.5,
                        "currency": "GBP"
                      },
                      "currency": "ZZZ",
                      "holdingTypeName": "Position"
                    }
                  ],
                  "links": []
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/VersionedResourceListOfPortfolioHolding"
                },
                "example": {
                  "version": {
                    "effectiveFrom": "2019-03-05T12:00:00.0000000+00:00",
                    "asAtDate": "2019-03-05T12:00:00.0000000+00:00"
                  },
                  "values": [
                    {
                      "instrumentScope": "default",
                      "instrumentUid": "LUID_XH4GNUEX",
                      "subHoldingKeys": {
                        "Transaction/Algo/Name": {
                          "key": "Transaction/Algo/Name",
                          "value": {
                            "labelValue": "Algo1"
                          }
                        }
                      },
                      "properties": {
                        "Instrument/default/Name": {
                          "key": "Instrument/default/Name",
                          "value": {
                            "labelValue": "Example Instrument 1"
                          },
                          "effectiveFrom": "2010-01-01T00:00:00.0000000+00:00"
                        }
                      },
                      "holdingType": "P",
                      "units": 10,
                      "settledUnits": 10,
                      "cost": {
                        "amount": 2.5,
                        "currency": "GBP"
                      },
                      "costPortfolioCcy": {
                        "amount": 2.5,
                        "currency": "GBP"
                      },
                      "currency": "ZZZ",
                      "holdingTypeName": "Position"
                    }
                  ],
                  "links": []
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Stable"
      }
    },
    "/api/portfoliogroups/{scope}/{code}/metadata": {
      "get": {
        "tags": [
          "Portfolio Groups"
        ],
        "summary": "[EARLY ACCESS] GetPortfolioGroupMetadata: Get Access Metadata rules for Portfolio Group",
        "description": "Pass the scope and Portfolio Group code parameters to retrieve the associated Access Metadata",
        "operationId": "GetPortfolioGroupMetadata",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the Portfolio Group",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string"
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The Portfolio Group code",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string"
            }
          },
          {
            "name": "effectiveAt",
            "in": "query",
            "description": "The effectiveAt datetime at which to retrieve the Access Metadata",
            "schema": {
              "type": "string",
              "format": "dateorcutlabel"
            }
          },
          {
            "name": "asAt",
            "in": "query",
            "description": "The asAt datetime at which to retrieve the Access Metadata",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "description": "The access metadata for the portfolio group or any failure.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/AccessMetadataValue"
                    }
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/AccessMetadataValue"
                    }
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/AccessMetadataValue"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      },
      "patch": {
        "tags": [
          "Portfolio Groups"
        ],
        "summary": "[EARLY ACCESS] PatchPortfolioGroupAccessMetadata: Patch Access Metadata rules for a Portfolio Group.",
        "description": "Patch Portfolio Group Access Metadata Rules in a single scope.\r\nThe behaviour is defined by the JSON Patch specification.\r\n            \r\nCurrently only 'add' is a supported operation on the patch document.\r\n\r\nCurrently only valid metadata keys are supported paths on the patch document.\r\n            \r\nThe response will return any affected Portfolio Group Access Metadata rules or a failure message if unsuccessful.\r\n            \r\nIt is important to always check to verify success (or failure).\r\n            \r\nMultiple rules for a metadataKey can exist with different effective at dates, when resources are accessed the rule that is active for the current time will be fetched.",
        "operationId": "PatchPortfolioGroupAccessMetadata",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the Portfolio Group",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string"
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The Portfolio Group code",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string"
            }
          },
          {
            "name": "effectiveAt",
            "in": "query",
            "description": "The date this rule will be effective from",
            "schema": {
              "type": "string",
              "format": "dateorcutlabel"
            }
          },
          {
            "name": "effectiveUntil",
            "in": "query",
            "description": "The effective date until which the Access Metadata is valid. If not supplied this will be valid indefinitely, or until the next 'effectiveAt' date of the Access Metadata",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "x-nullable": true
          }
        ],
        "requestBody": {
          "description": "The Json patch document",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/AccessMetadataOperation"
                }
              },
              "example": [
                {
                  "value": [
                    {
                      "value": "SilverLicence",
                      "provider": "TestDataProvider"
                    }
                  ],
                  "path": "/exampleMetadataKey",
                  "op": "add"
                }
              ]
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/AccessMetadataOperation"
                }
              },
              "example": [
                {
                  "value": [
                    {
                      "value": "SilverLicence",
                      "provider": "TestDataProvider"
                    }
                  ],
                  "path": "/exampleMetadataKey",
                  "op": "add"
                }
              ]
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/AccessMetadataOperation"
                }
              },
              "example": [
                {
                  "value": [
                    {
                      "value": "SilverLicence",
                      "provider": "TestDataProvider"
                    }
                  ],
                  "path": "/exampleMetadataKey",
                  "op": "add"
                }
              ]
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/AccessMetadataOperation"
                }
              },
              "example": [
                {
                  "value": [
                    {
                      "value": "SilverLicence",
                      "provider": "TestDataProvider"
                    }
                  ],
                  "path": "/exampleMetadataKey",
                  "op": "add"
                }
              ]
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The successfully patched items.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/AccessMetadataValue"
                    }
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/AccessMetadataValue"
                    }
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/AccessMetadataValue"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      }
    },
    "/api/portfoliogroups/{scope}/{code}/metadata/{metadataKey}": {
      "get": {
        "tags": [
          "Portfolio Groups"
        ],
        "summary": "[EARLY ACCESS] GetPortfolioGroupAccessMetadataByKey: Get an entry identified by a metadataKey in the Access Metadata of a Portfolio Group",
        "description": "Get a specific Portfolio Group access metadata by specifying the corresponding identifier parts\r\n            \r\nNo matching will be performed through this endpoint. To retrieve a rule, it is necessary to specify, exactly, the identifier of the rule",
        "operationId": "GetPortfolioGroupAccessMetadataByKey",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the Portfolio Group",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string"
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The Portfolio Group code",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string"
            }
          },
          {
            "name": "metadataKey",
            "in": "path",
            "description": "Key of the metadata entry to retrieve",
            "required": true,
            "schema": {
              "maxLength": 256,
              "minLength": 1,
              "type": "string"
            }
          },
          {
            "name": "effectiveAt",
            "in": "query",
            "description": "The effectiveAt datetime at which to retrieve the access metadata",
            "schema": {
              "type": "string",
              "format": "dateorcutlabel"
            }
          },
          {
            "name": "asAt",
            "in": "query",
            "description": "The asAt datetime at which to retrieve the access metadata",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "description": "The successfully retrieved Portfolio group access metadata filtered by metadataKey or any failure.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AccessMetadataValue"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AccessMetadataValue"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AccessMetadataValue"
                  }
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      },
      "put": {
        "tags": [
          "Portfolio Groups"
        ],
        "summary": "[EARLY ACCESS] UpsertPortfolioGroupAccessMetadata: Upsert a Portfolio Group Access Metadata entry associated with a specific metadataKey. This creates or updates the data in LUSID.",
        "description": "Update or insert one Portfolio Group Access Metadata Entry in a single scope. An item will be updated if it already exists\r\nand inserted if it does not.\r\n            \r\nThe response will return the successfully updated or inserted Portfolio Group Access Metadata rule or failure message if unsuccessful.\r\n            \r\nIt is important to always check to verify success (or failure).\r\n            \r\nMultiple rules for a metadataKey can exist with different effective at dates, when resources are accessed the rule that is active for the current time will be fetched.",
        "operationId": "UpsertPortfolioGroupAccessMetadata",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the Portfolio Group",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string"
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The Portfolio Group code",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string"
            }
          },
          {
            "name": "metadataKey",
            "in": "path",
            "description": "Key of the access metadata entry to upsert",
            "required": true,
            "schema": {
              "maxLength": 256,
              "minLength": 1,
              "type": "string"
            }
          },
          {
            "name": "effectiveAt",
            "in": "query",
            "description": "The date this rule will be effective from",
            "schema": {
              "type": "string",
              "format": "dateorcutlabel"
            }
          },
          {
            "name": "effectiveUntil",
            "in": "query",
            "description": "The effective date until which the Access Metadata is valid. If not supplied this will be valid indefinitely, or until the next 'effectiveAt' date of the Access Metadata",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "x-nullable": true
          }
        ],
        "requestBody": {
          "description": "The Portfolio Group Access Metadata rule to upsert",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/UpsertPortfolioGroupAccessMetadataRequest"
              },
              "example": {
                "metadata": [
                  {
                    "value": "SilverLicence",
                    "provider": "TestDataProvider"
                  }
                ]
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpsertPortfolioGroupAccessMetadataRequest"
              },
              "example": {
                "metadata": [
                  {
                    "value": "SilverLicence",
                    "provider": "TestDataProvider"
                  }
                ]
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/UpsertPortfolioGroupAccessMetadataRequest"
              },
              "example": {
                "metadata": [
                  {
                    "value": "SilverLicence",
                    "provider": "TestDataProvider"
                  }
                ]
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/UpsertPortfolioGroupAccessMetadataRequest"
              },
              "example": {
                "metadata": [
                  {
                    "value": "SilverLicence",
                    "provider": "TestDataProvider"
                  }
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The successfully updated or inserted item or any failure.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfAccessMetadataValueOf"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfAccessMetadataValueOf"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfAccessMetadataValueOf"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      },
      "delete": {
        "tags": [
          "Portfolio Groups"
        ],
        "summary": "[EARLY ACCESS] DeleteKeyFromPortfolioGroupAccessMetadata: Delete a Portfolio Group Access Metadata entry",
        "description": "Deletes the Portfolio Group Access Metadata entry that exactly matches the provided identifier parts.\r\n\r\nIt is important to always check to verify success (or failure).",
        "operationId": "DeleteKeyFromPortfolioGroupAccessMetadata",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the Portfolio Group",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string"
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The Portfolio Group code",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string"
            }
          },
          {
            "name": "metadataKey",
            "in": "path",
            "description": "Key of the Access Metadata entry to delete",
            "required": true,
            "schema": {
              "maxLength": 256,
              "minLength": 1,
              "type": "string"
            }
          },
          {
            "name": "effectiveAt",
            "in": "query",
            "description": "The effective date to delete at, if this is not supplied, it will delete all data found",
            "schema": {
              "type": "string",
              "format": "dateorcutlabel"
            }
          },
          {
            "name": "effectiveUntil",
            "in": "query",
            "description": "The effective date until which the delete is valid. If not supplied this will be valid indefinitely, or until the next 'effectiveAt' date of the Access Metadata",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "description": "The has been deleted",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedEntityResponse"
                },
                "example": {
                  "asAt": "2018-03-05T10:10:10.0000000+00:00"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedEntityResponse"
                },
                "example": {
                  "asAt": "2018-03-05T10:10:10.0000000+00:00"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedEntityResponse"
                },
                "example": {
                  "asAt": "2018-03-05T10:10:10.0000000+00:00"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      }
    },
    "/api/portfoliogroups/{scope}/{code}/portfolios": {
      "post": {
        "tags": [
          "Portfolio Groups"
        ],
        "summary": "[EARLY ACCESS] AddPortfolioToGroup: Add portfolio to group",
        "description": "Add a single portfolio to a portfolio group.",
        "operationId": "AddPortfolioToGroup",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the portfolio group to add a portfolio to.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string"
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The code of the portfolio group to add a portfolio to. Together with the scope this uniquely identifies the portfolio group.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string"
            }
          },
          {
            "name": "effectiveAt",
            "in": "query",
            "description": "The effective datetime or cut label from which the portfolio will be added to the group.",
            "schema": {
              "maxLength": 256,
              "minLength": 0,
              "pattern": "^[a-zA-Z0-9\\-_\\+:\\.]+$",
              "type": "string",
              "format": "dateorcutlabel"
            }
          }
        ],
        "requestBody": {
          "description": "The resource identifier of the portfolio to add to the portfolio group.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/ResourceId"
              },
              "example": {
                "scope": "MyScope",
                "code": "MyCode"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ResourceId"
              },
              "example": {
                "scope": "MyScope",
                "code": "MyCode"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ResourceId"
              },
              "example": {
                "scope": "MyScope",
                "code": "MyCode"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ResourceId"
              },
              "example": {
                "scope": "MyScope",
                "code": "MyCode"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The portfolio group containing the newly added portfolio",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PortfolioGroup"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortfolioGroup"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortfolioGroup"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      }
    },
    "/api/portfoliogroups/{scope}/{code}/portfolios/{portfolioScope}/{portfolioCode}": {
      "delete": {
        "tags": [
          "Portfolio Groups"
        ],
        "summary": "[EARLY ACCESS] DeletePortfolioFromGroup: Delete portfolio from group",
        "description": "Remove a single portfolio from a portfolio group.",
        "operationId": "DeletePortfolioFromGroup",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the portfolio group to remove the portfolio from.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string"
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The code of the portfolio group to remove the portfolio from. Together with the scope this uniquely identifies the portfolio group.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string"
            }
          },
          {
            "name": "portfolioScope",
            "in": "path",
            "description": "The scope of the portfolio being removed from the portfolio group.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string"
            }
          },
          {
            "name": "portfolioCode",
            "in": "path",
            "description": "The code of the portfolio being removed from the portfolio group. Together with the scope this uniquely identifies the portfolio to remove.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string"
            }
          },
          {
            "name": "effectiveAt",
            "in": "query",
            "description": "The effective datetime or cut label from which the portfolio will be removed from the portfolio group.",
            "schema": {
              "maxLength": 256,
              "minLength": 0,
              "pattern": "^[a-zA-Z0-9\\-_\\+:\\.]+$",
              "type": "string",
              "format": "dateorcutlabel"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The portfolio group with the portfolio removed from the group",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PortfolioGroup"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortfolioGroup"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortfolioGroup"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      }
    },
    "/api/portfoliogroups/{scope}/{code}/properties": {
      "get": {
        "tags": [
          "Portfolio Groups"
        ],
        "summary": "[EARLY ACCESS] GetGroupProperties: Get group properties",
        "description": "List all the properties of a single portfolio group.",
        "operationId": "GetGroupProperties",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the group to list the properties for.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string"
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The code of the group to list the properties for. Together with the scope this uniquely identifies the group.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string"
            }
          },
          {
            "name": "effectiveAt",
            "in": "query",
            "description": "The effective date time or cut label at which to list the group's properties. Defaults to the current LUSID system datetime if not specified.",
            "schema": {
              "type": "string",
              "format": "dateorcutlabel"
            }
          },
          {
            "name": "asAt",
            "in": "query",
            "description": "The asAt date time at which to list the group's properties. Defaults to return the latest version of each property if not specified.",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "description": "The properties of the specified group",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PortfolioGroupProperties"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortfolioGroupProperties"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortfolioGroupProperties"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      }
    },
    "/api/portfoliogroups/{scope}/{code}/properties/$delete": {
      "post": {
        "tags": [
          "Portfolio Groups"
        ],
        "summary": "[EARLY ACCESS] DeleteGroupProperties: Delete group properties",
        "description": "Delete one or more properties from a single portfolio group. If the properties are time variant then an effective date time from which the properties\r\nwill be deleted must be specified. If the properties are perpetual then it is invalid to specify an effective date time for deletion.",
        "operationId": "DeleteGroupProperties",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the group to delete properties from.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string"
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The code of the group to delete properties from. Together with the scope this uniquely identifies the group.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string"
            }
          },
          {
            "name": "effectiveAt",
            "in": "query",
            "description": "The effective datetime or cut label at which to delete time-variant properties from.\r\n            The property must exist at the specified 'effectiveAt' datetime. If the 'effectiveAt' is not provided or is\r\n            before the time-variant property exists then a failure is returned. Do not specify this parameter if any of\r\n            the properties to delete are perpetual.",
            "schema": {
              "type": "string",
              "format": "dateorcutlabel"
            }
          }
        ],
        "requestBody": {
          "description": "The property keys of the properties to delete. These take the format\r\n            {domain}/{scope}/{code} e.g. \"PortfolioGroup/Manager/Id\". Each property must be from the \"PortfolioGroup\" domain.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string",
                  "description": "The key that uniquely identifies the property. It has the format {domain}/{scope}/{code}."
                }
              },
              "example": [
                "PortfolioGroup/MyScope/MyPropertyName",
                "PortfolioGroup/MyScope/MyPropertyName2"
              ]
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string",
                  "description": "The key that uniquely identifies the property. It has the format {domain}/{scope}/{code}."
                }
              },
              "example": [
                "PortfolioGroup/MyScope/MyPropertyName",
                "PortfolioGroup/MyScope/MyPropertyName2"
              ]
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string",
                  "description": "The key that uniquely identifies the property. It has the format {domain}/{scope}/{code}."
                }
              },
              "example": [
                "PortfolioGroup/MyScope/MyPropertyName",
                "PortfolioGroup/MyScope/MyPropertyName2"
              ]
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string",
                  "description": "The key that uniquely identifies the property. It has the format {domain}/{scope}/{code}."
                }
              },
              "example": [
                "PortfolioGroup/MyScope/MyPropertyName",
                "PortfolioGroup/MyScope/MyPropertyName2"
              ]
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The datetime that the properties were deleted from the specified group",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedEntityResponse"
                },
                "example": {
                  "asAt": "2018-03-05T10:10:10.0000000+00:00"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedEntityResponse"
                },
                "example": {
                  "asAt": "2018-03-05T10:10:10.0000000+00:00"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedEntityResponse"
                },
                "example": {
                  "asAt": "2018-03-05T10:10:10.0000000+00:00"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      }
    },
    "/api/portfoliogroups/{scope}/{code}/properties/$upsert": {
      "post": {
        "tags": [
          "Portfolio Groups"
        ],
        "summary": "[EARLY ACCESS] UpsertGroupProperties: Upsert group properties",
        "description": "Update or insert one or more properties onto a single group. A property will be updated if it\r\nalready exists and inserted if it does not. All properties must be of the domain 'PortfolioGroup'.\r\n            \r\nUpserting a property that exists for a group, with a null value, will delete the instance of the property for that group.\r\n            \r\nProperties have an <i>effectiveFrom</i> datetime for which the property is valid, and an <i>effectiveUntil</i>\r\ndatetime until which the property is valid. Not supplying an <i>effectiveUntil</i> datetime results in the property being\r\nvalid indefinitely, or until the next <i>effectiveFrom</i> datetime of the property.",
        "operationId": "UpsertGroupProperties",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the group to update or insert the properties onto.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string"
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The code of the group to update or insert the properties onto. Together with the scope this uniquely identifies the group.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The properties to be updated or inserted onto the group. Each property in\r\n             the request must be keyed by its unique property key. This has the format {domain}/{scope}/{code} e.g. \"PortfolioGroup/Manager/Id\".",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/components/schemas/Property"
                }
              },
              "example": {
                "PortfolioGroup/MyScope/FundManagerName": {
                  "key": "PortfolioGroup/MyScope/FundManagerName",
                  "value": {
                    "labelValue": "Smith"
                  },
                  "effectiveFrom": "2018-03-05T00:00:00.0000000+00:00"
                },
                "PortfolioGroup/MyScope/SomeProperty": {
                  "key": "PortfolioGroup/MyScope/SomeProperty",
                  "value": {
                    "labelValue": "SomeValue"
                  },
                  "effectiveFrom": "2016-01-01T00:00:00.0000000+00:00"
                },
                "PortfolioGroup/MyScope/AnotherProperty": {
                  "key": "PortfolioGroup/MyScope/AnotherProperty",
                  "value": {
                    "labelValue": "AnotherValue"
                  },
                  "effectiveFrom": "2018-03-05T00:00:00.0000000+00:00",
                  "effectiveUntil": "2020-01-01T00:00:00.0000000+00:00"
                },
                "PortfolioGroup/MyScope/ReBalanceInterval": {
                  "key": "PortfolioGroup/MyScope/ReBalanceInterval",
                  "value": {
                    "metricValue": {
                      "value": 30,
                      "unit": "Days"
                    }
                  }
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/components/schemas/Property"
                }
              },
              "example": {
                "PortfolioGroup/MyScope/FundManagerName": {
                  "key": "PortfolioGroup/MyScope/FundManagerName",
                  "value": {
                    "labelValue": "Smith"
                  },
                  "effectiveFrom": "2018-03-05T00:00:00.0000000+00:00"
                },
                "PortfolioGroup/MyScope/SomeProperty": {
                  "key": "PortfolioGroup/MyScope/SomeProperty",
                  "value": {
                    "labelValue": "SomeValue"
                  },
                  "effectiveFrom": "2016-01-01T00:00:00.0000000+00:00"
                },
                "PortfolioGroup/MyScope/AnotherProperty": {
                  "key": "PortfolioGroup/MyScope/AnotherProperty",
                  "value": {
                    "labelValue": "AnotherValue"
                  },
                  "effectiveFrom": "2018-03-05T00:00:00.0000000+00:00",
                  "effectiveUntil": "2020-01-01T00:00:00.0000000+00:00"
                },
                "PortfolioGroup/MyScope/ReBalanceInterval": {
                  "key": "PortfolioGroup/MyScope/ReBalanceInterval",
                  "value": {
                    "metricValue": {
                      "value": 30,
                      "unit": "Days"
                    }
                  }
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/components/schemas/Property"
                }
              },
              "example": {
                "PortfolioGroup/MyScope/FundManagerName": {
                  "key": "PortfolioGroup/MyScope/FundManagerName",
                  "value": {
                    "labelValue": "Smith"
                  },
                  "effectiveFrom": "2018-03-05T00:00:00.0000000+00:00"
                },
                "PortfolioGroup/MyScope/SomeProperty": {
                  "key": "PortfolioGroup/MyScope/SomeProperty",
                  "value": {
                    "labelValue": "SomeValue"
                  },
                  "effectiveFrom": "2016-01-01T00:00:00.0000000+00:00"
                },
                "PortfolioGroup/MyScope/AnotherProperty": {
                  "key": "PortfolioGroup/MyScope/AnotherProperty",
                  "value": {
                    "labelValue": "AnotherValue"
                  },
                  "effectiveFrom": "2018-03-05T00:00:00.0000000+00:00",
                  "effectiveUntil": "2020-01-01T00:00:00.0000000+00:00"
                },
                "PortfolioGroup/MyScope/ReBalanceInterval": {
                  "key": "PortfolioGroup/MyScope/ReBalanceInterval",
                  "value": {
                    "metricValue": {
                      "value": 30,
                      "unit": "Days"
                    }
                  }
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/components/schemas/Property"
                }
              },
              "example": {
                "PortfolioGroup/MyScope/FundManagerName": {
                  "key": "PortfolioGroup/MyScope/FundManagerName",
                  "value": {
                    "labelValue": "Smith"
                  },
                  "effectiveFrom": "2018-03-05T00:00:00.0000000+00:00"
                },
                "PortfolioGroup/MyScope/SomeProperty": {
                  "key": "PortfolioGroup/MyScope/SomeProperty",
                  "value": {
                    "labelValue": "SomeValue"
                  },
                  "effectiveFrom": "2016-01-01T00:00:00.0000000+00:00"
                },
                "PortfolioGroup/MyScope/AnotherProperty": {
                  "key": "PortfolioGroup/MyScope/AnotherProperty",
                  "value": {
                    "labelValue": "AnotherValue"
                  },
                  "effectiveFrom": "2018-03-05T00:00:00.0000000+00:00",
                  "effectiveUntil": "2020-01-01T00:00:00.0000000+00:00"
                },
                "PortfolioGroup/MyScope/ReBalanceInterval": {
                  "key": "PortfolioGroup/MyScope/ReBalanceInterval",
                  "value": {
                    "metricValue": {
                      "value": 30,
                      "unit": "Days"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The updated or inserted properties",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PortfolioGroupProperties"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortfolioGroupProperties"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortfolioGroupProperties"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      }
    },
    "/api/portfoliogroups/{scope}/{code}/properties/time-series": {
      "get": {
        "tags": [
          "Portfolio Groups"
        ],
        "summary": "[EARLY ACCESS] GetPortfolioGroupPropertyTimeSeries: Get the time series of a portfolio group property",
        "description": "List the complete time series of a portfolio group property.",
        "operationId": "GetPortfolioGroupPropertyTimeSeries",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the group.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string"
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The code of the group. Together with the scope this uniquely identifies\r\n            the portfolio group.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string"
            }
          },
          {
            "name": "propertyKey",
            "in": "query",
            "description": "The property key of the property that will have its history shown. These must be in the format {domain}/{scope}/{code} e.g. \"PortfolioGroup/Manager/Id\".\r\n            Each property must be from the \"PortfolioGroup\" domain.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The key that uniquely identifies the property. It has the format {domain}/{scope}/{code}."
            }
          },
          {
            "name": "portfolioGroupEffectiveAt",
            "in": "query",
            "description": "The effective datetime used to resolve the portfolio group. Defaults to the current LUSID system datetime if not specified.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "asAt",
            "in": "query",
            "description": "The asAt datetime at which to list the portfolio group's property history. Defaults to return the current datetime if not supplied.",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "x-nullable": true
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Expression to filter the result set. Read more about filtering results from LUSID here https://support.lusid.com/filtering-results-from-lusid.",
            "schema": {
              "maxLength": 16384,
              "minLength": 0,
              "pattern": "^[\\s\\S]*$",
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "The pagination token to use to continue listing properties from a previous call to get property time series.\r\n            This value is returned from the previous call. If a pagination token is provided the filter, effectiveAt, and asAt fields\r\n            must not have changed since the original request.",
            "schema": {
              "maxLength": 500,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\+/]*={0,3}$",
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "When paginating, limit the number of returned results to this many.",
            "schema": {
              "maximum": 5000,
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "description": "The time series of the property",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfPropertyInterval"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfPropertyInterval"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfPropertyInterval"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      }
    },
    "/api/portfoliogroups/{scope}/{code}/relationships": {
      "get": {
        "tags": [
          "Portfolio Groups"
        ],
        "summary": "[EARLY ACCESS] GetPortfolioGroupRelationships: Get Relationships for Portfolio Group",
        "description": "Get relationships for the specified Portfolio Group",
        "operationId": "GetPortfolioGroupRelationships",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the portfolio group.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string"
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The code of the portfolio group. Together with the scope this uniquely identifies\r\n            the portfolio group.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string"
            }
          },
          {
            "name": "effectiveAt",
            "in": "query",
            "description": "The effective datetime or cut label at which to retrieve relationship. Defaults to the current LUSID system datetime if not specified.",
            "schema": {
              "maxLength": 256,
              "minLength": 0,
              "pattern": "^[a-zA-Z0-9\\-_\\+:\\.]+$",
              "type": "string",
              "format": "dateorcutlabel"
            }
          },
          {
            "name": "asAt",
            "in": "query",
            "description": "The asAt datetime at which to retrieve relationships. Defaults to return the latest LUSID AsAt time if not specified.",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "x-nullable": true
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Expression to filter relationships. Users should provide null or empty string for this field until further notice.",
            "schema": {
              "maxLength": 16384,
              "minLength": 0,
              "pattern": "^[\\s\\S]*$",
              "type": "string"
            }
          },
          {
            "name": "identifierTypes",
            "in": "query",
            "description": "Identifier types (as property keys) used for referencing Persons or Legal Entities.\r\n            These can be specified from the 'Person' or 'LegalEntity' domains and have the format {domain}/{scope}/{code}, for example\r\n            'Person/CompanyDetails/Role'. An Empty array may be used to return all related Entities.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "description": "The key that uniquely identifies the property. It has the format {domain}/{scope}/{code}."
              }
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "description": "The relationships for the specific portfolio group.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfRelationship"
                },
                "example": {
                  "values": [
                    {
                      "relationshipDefinitionId": {
                        "scope": "PortfolioManagementTeam",
                        "code": "Traders"
                      },
                      "relatedEntity": {
                        "entityType": "Person",
                        "entityId": {
                          "idTypeScope": "HrSystem1",
                          "idTypeCode": "InternalId",
                          "code": "XY10001111"
                        },
                        "displayName": "James Smith",
                        "properties": {},
                        "identifiers": [
                          {
                            "identifierScope": "HrSystem1",
                            "identifierType": "InternalId",
                            "identifierValue": "XY10001111"
                          }
                        ]
                      },
                      "traversalDirection": "Out",
                      "traversalDescription": "can be traded by",
                      "effectiveFrom": "2019-01-01T12:00:00.0000000+00:00",
                      "effectiveUntil": "2022-01-01T12:00:00.0000000+00:00"
                    }
                  ],
                  "links": []
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfRelationship"
                },
                "example": {
                  "values": [
                    {
                      "relationshipDefinitionId": {
                        "scope": "PortfolioManagementTeam",
                        "code": "Traders"
                      },
                      "relatedEntity": {
                        "entityType": "Person",
                        "entityId": {
                          "idTypeScope": "HrSystem1",
                          "idTypeCode": "InternalId",
                          "code": "XY10001111"
                        },
                        "displayName": "James Smith",
                        "properties": {},
                        "identifiers": [
                          {
                            "identifierScope": "HrSystem1",
                            "identifierType": "InternalId",
                            "identifierValue": "XY10001111"
                          }
                        ]
                      },
                      "traversalDirection": "Out",
                      "traversalDescription": "can be traded by",
                      "effectiveFrom": "2019-01-01T12:00:00.0000000+00:00",
                      "effectiveUntil": "2022-01-01T12:00:00.0000000+00:00"
                    }
                  ],
                  "links": []
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfRelationship"
                },
                "example": {
                  "values": [
                    {
                      "relationshipDefinitionId": {
                        "scope": "PortfolioManagementTeam",
                        "code": "Traders"
                      },
                      "relatedEntity": {
                        "entityType": "Person",
                        "entityId": {
                          "idTypeScope": "HrSystem1",
                          "idTypeCode": "InternalId",
                          "code": "XY10001111"
                        },
                        "displayName": "James Smith",
                        "properties": {},
                        "identifiers": [
                          {
                            "identifierScope": "HrSystem1",
                            "identifierType": "InternalId",
                            "identifierValue": "XY10001111"
                          }
                        ]
                      },
                      "traversalDirection": "Out",
                      "traversalDescription": "can be traded by",
                      "effectiveFrom": "2019-01-01T12:00:00.0000000+00:00",
                      "effectiveUntil": "2022-01-01T12:00:00.0000000+00:00"
                    }
                  ],
                  "links": []
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      }
    },
    "/api/portfoliogroups/{scope}/{code}/subgroups": {
      "post": {
        "tags": [
          "Portfolio Groups"
        ],
        "summary": "[EARLY ACCESS] AddSubGroupToGroup: Add sub group to group",
        "description": "Add a portfolio group to a portfolio group as a sub group.",
        "operationId": "AddSubGroupToGroup",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the portfolio group to add a portfolio group to.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string"
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The code of the portfolio group to add a portfolio group to. Together with the scope this uniquely identifies the portfolio group.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string"
            }
          },
          {
            "name": "effectiveAt",
            "in": "query",
            "description": "The effective datetime or cut label from which the sub group will be added to the group.",
            "schema": {
              "maxLength": 256,
              "minLength": 0,
              "pattern": "^[a-zA-Z0-9\\-_\\+:\\.]+$",
              "type": "string",
              "format": "dateorcutlabel"
            }
          }
        ],
        "requestBody": {
          "description": "The resource identifier of the portfolio group to add to the portfolio group as a sub group.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/ResourceId"
              },
              "example": {
                "scope": "MyScope",
                "code": "MyCode"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ResourceId"
              },
              "example": {
                "scope": "MyScope",
                "code": "MyCode"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ResourceId"
              },
              "example": {
                "scope": "MyScope",
                "code": "MyCode"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ResourceId"
              },
              "example": {
                "scope": "MyScope",
                "code": "MyCode"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The portfolio group containing the newly added portfolio group as a sub group",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PortfolioGroup"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortfolioGroup"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortfolioGroup"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      }
    },
    "/api/portfoliogroups/{scope}/{code}/subgroups/{subgroupScope}/{subgroupCode}": {
      "delete": {
        "tags": [
          "Portfolio Groups"
        ],
        "summary": "[EARLY ACCESS] DeleteSubGroupFromGroup: Delete sub group from group",
        "description": "Remove a single portfolio group (sub group) from a portfolio group.",
        "operationId": "DeleteSubGroupFromGroup",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the portfolio group to remove the sub group from.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string"
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The code of the portfolio group to remove the sub group from. Together with the scope this uniquely identifies the portfolio group.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string"
            }
          },
          {
            "name": "subgroupScope",
            "in": "path",
            "description": "The scope of the sub group to remove from the portfolio group.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "subgroupCode",
            "in": "path",
            "description": "The code of the sub group to remove from the portfolio group. Together with the scope this uniquely identifies the sub group.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "effectiveAt",
            "in": "query",
            "description": "The effective datetime or cut label from which the sub group will be removed from the portfolio group.",
            "schema": {
              "maxLength": 256,
              "minLength": 0,
              "pattern": "^[a-zA-Z0-9\\-_\\+:\\.]+$",
              "type": "string",
              "format": "dateorcutlabel"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The portfolio group with the sub group removed from the group",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PortfolioGroup"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortfolioGroup"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortfolioGroup"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      }
    },
    "/api/portfoliogroups/{scope}/{code}/transactions": {
      "get": {
        "tags": [
          "Portfolio Groups"
        ],
        "summary": "GetTransactionsForPortfolioGroup: Get transactions for transaction portfolios in a portfolio group",
        "description": "Get transactions for transaction portfolios in a portfolio group over a given interval of effective time.\r\n            \r\nWhen the specified portfolio in a portfolio group is a derived transaction portfolio, the returned set of transactions is the\r\nunion set of all transactions of the parent (and any grandparents etc.) and the specified derived transaction portfolio itself.",
        "operationId": "GetTransactionsForPortfolioGroup",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the portfolio group.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string"
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The code of the portfolio group. Together with the scope this uniquely identifies\r\n             the portfolio group.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string"
            }
          },
          {
            "name": "fromTransactionDate",
            "in": "query",
            "description": "The lower bound effective datetime or cut label (inclusive) from which to retrieve the transactions.\r\n             There is no lower bound if this is not specified.",
            "schema": {
              "type": "string",
              "format": "dateorcutlabel"
            }
          },
          {
            "name": "toTransactionDate",
            "in": "query",
            "description": "The upper bound effective datetime or cut label (inclusive) from which to retrieve transactions.\r\n             There is no upper bound if this is not specified.",
            "schema": {
              "type": "string",
              "format": "dateorcutlabel"
            }
          },
          {
            "name": "asAt",
            "in": "query",
            "description": "The asAt datetime at which to retrieve the transactions. Defaults to return the latest version\r\n             of each transaction if not specified.",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "x-nullable": true
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Expression to filter the result set.\r\n             For example, to filter on the Transaction Type, use \"type eq 'Buy'\"\r\n             Read more about filtering results from LUSID here https://support.lusid.com/filtering-results-from-lusid.",
            "schema": {
              "maxLength": 16384,
              "minLength": 0,
              "pattern": "^[\\s\\S]*$",
              "type": "string"
            }
          },
          {
            "name": "propertyKeys",
            "in": "query",
            "description": "A list of property keys from the \"Instrument\", \"Transaction\", \"LegalEntity\" or \"CustodianAccount\" domain to decorate onto\r\n             the transactions. These take the format {domain}/{scope}/{code} e.g. \"Instrument/system/Name\" or\r\n             \"Transaction/strategy/quantsignal\".",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "description": "The key that uniquely identifies the property. It has the format {domain}/{scope}/{code}."
              }
            },
            "x-nullable": true
          },
          {
            "name": "limit",
            "in": "query",
            "description": "When paginating, limit the number of returned results to this many. Defaults to 100 if not specified.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-nullable": true
          },
          {
            "name": "page",
            "in": "query",
            "description": "The pagination token to use to continue listing transactions from a previous call to GetTransactions.",
            "schema": {
              "maxLength": 500,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\+/]*={0,3}$",
              "type": "string"
            }
          },
          {
            "name": "showCancelledTransactions",
            "in": "query",
            "description": "Option to specify whether or not to include cancelled transactions,\r\n             including previous versions of transactions which have since been amended.\r\n             Defaults to False if not specified.",
            "schema": {
              "type": "boolean"
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "description": "The requested transactions from transaction portfolios in the specified portfolio group",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/VersionedResourceListOfTransaction"
                },
                "example": {
                  "version": {
                    "effectiveFrom": "2018-03-05T00:00:00.0000000+00:00",
                    "asAtDate": "2018-03-04T23:50:00.0000000+00:00"
                  },
                  "values": [
                    {
                      "transactionId": "TXN-00001",
                      "type": "Buy",
                      "instrumentIdentifiers": {
                        "Instrument/default/RIC": "RIC.L"
                      },
                      "instrumentScope": "default",
                      "instrumentUid": "LUID_1C7YTL5M",
                      "transactionDate": "2018-08-04T00:00:00.0000000+00:00",
                      "settlementDate": "2018-08-06T00:00:00.0000000+00:00",
                      "units": 1000,
                      "transactionPrice": {
                        "price": 88.8,
                        "type": "Price"
                      },
                      "totalConsideration": {
                        "amount": 88800,
                        "currency": "USD"
                      },
                      "properties": {
                        "Transaction/default/TradeToPortfolioRate": {
                          "key": "Transaction/default/TradeToPortfolioRate",
                          "value": {
                            "metricValue": {
                              "value": 0.765
                            }
                          }
                        },
                        "Transaction/default/SourcePortfolioId": {
                          "key": "Transaction/default/SourcePortfolioId",
                          "value": {
                            "labelValue": "DEMO-PORTFOLIO-ID"
                          }
                        },
                        "Transaction/default/SourcePortfolioScope": {
                          "key": "Transaction/default/SourcePortfolioScope",
                          "value": {
                            "labelValue": "DEMO-SCOPE"
                          }
                        }
                      },
                      "source": "",
                      "entryDateTime": "2018-03-04T23:50:00.0000000+00:00",
                      "transactionStatus": "Active",
                      "orderId": {
                        "scope": "someScope",
                        "code": "ORD001"
                      },
                      "allocationId": {
                        "scope": "someScope",
                        "code": "ALLOC001"
                      }
                    }
                  ],
                  "href": "http://example.com",
                  "links": []
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VersionedResourceListOfTransaction"
                },
                "example": {
                  "version": {
                    "effectiveFrom": "2018-03-05T00:00:00.0000000+00:00",
                    "asAtDate": "2018-03-04T23:50:00.0000000+00:00"
                  },
                  "values": [
                    {
                      "transactionId": "TXN-00001",
                      "type": "Buy",
                      "instrumentIdentifiers": {
                        "Instrument/default/RIC": "RIC.L"
                      },
                      "instrumentScope": "default",
                      "instrumentUid": "LUID_1C7YTL5M",
                      "transactionDate": "2018-08-04T00:00:00.0000000+00:00",
                      "settlementDate": "2018-08-06T00:00:00.0000000+00:00",
                      "units": 1000,
                      "transactionPrice": {
                        "price": 88.8,
                        "type": "Price"
                      },
                      "totalConsideration": {
                        "amount": 88800,
                        "currency": "USD"
                      },
                      "properties": {
                        "Transaction/default/TradeToPortfolioRate": {
                          "key": "Transaction/default/TradeToPortfolioRate",
                          "value": {
                            "metricValue": {
                              "value": 0.765
                            }
                          }
                        },
                        "Transaction/default/SourcePortfolioId": {
                          "key": "Transaction/default/SourcePortfolioId",
                          "value": {
                            "labelValue": "DEMO-PORTFOLIO-ID"
                          }
                        },
                        "Transaction/default/SourcePortfolioScope": {
                          "key": "Transaction/default/SourcePortfolioScope",
                          "value": {
                            "labelValue": "DEMO-SCOPE"
                          }
                        }
                      },
                      "source": "",
                      "entryDateTime": "2018-03-04T23:50:00.0000000+00:00",
                      "transactionStatus": "Active",
                      "orderId": {
                        "scope": "someScope",
                        "code": "ORD001"
                      },
                      "allocationId": {
                        "scope": "someScope",
                        "code": "ALLOC001"
                      }
                    }
                  ],
                  "href": "http://example.com",
                  "links": []
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/VersionedResourceListOfTransaction"
                },
                "example": {
                  "version": {
                    "effectiveFrom": "2018-03-05T00:00:00.0000000+00:00",
                    "asAtDate": "2018-03-04T23:50:00.0000000+00:00"
                  },
                  "values": [
                    {
                      "transactionId": "TXN-00001",
                      "type": "Buy",
                      "instrumentIdentifiers": {
                        "Instrument/default/RIC": "RIC.L"
                      },
                      "instrumentScope": "default",
                      "instrumentUid": "LUID_1C7YTL5M",
                      "transactionDate": "2018-08-04T00:00:00.0000000+00:00",
                      "settlementDate": "2018-08-06T00:00:00.0000000+00:00",
                      "units": 1000,
                      "transactionPrice": {
                        "price": 88.8,
                        "type": "Price"
                      },
                      "totalConsideration": {
                        "amount": 88800,
                        "currency": "USD"
                      },
                      "properties": {
                        "Transaction/default/TradeToPortfolioRate": {
                          "key": "Transaction/default/TradeToPortfolioRate",
                          "value": {
                            "metricValue": {
                              "value": 0.765
                            }
                          }
                        },
                        "Transaction/default/SourcePortfolioId": {
                          "key": "Transaction/default/SourcePortfolioId",
                          "value": {
                            "labelValue": "DEMO-PORTFOLIO-ID"
                          }
                        },
                        "Transaction/default/SourcePortfolioScope": {
                          "key": "Transaction/default/SourcePortfolioScope",
                          "value": {
                            "labelValue": "DEMO-SCOPE"
                          }
                        }
                      },
                      "source": "",
                      "entryDateTime": "2018-03-04T23:50:00.0000000+00:00",
                      "transactionStatus": "Active",
                      "orderId": {
                        "scope": "someScope",
                        "code": "ORD001"
                      },
                      "allocationId": {
                        "scope": "someScope",
                        "code": "ALLOC001"
                      }
                    }
                  ],
                  "href": "http://example.com",
                  "links": []
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Stable"
      }
    },
    "/api/portfoliogroups/{scope}/{code}/transactions/$build": {
      "post": {
        "tags": [
          "Portfolio Groups"
        ],
        "summary": "BuildTransactionsForPortfolioGroup: Build transactions for transaction portfolios in a portfolio group",
        "description": "Build transactions for transaction portfolios in a portfolio group over a given interval of effective time.\r\n            \r\nWhen the specified portfolio in a portfolio group is a derived transaction portfolio, the returned set of transactions is the\r\nunion set of all transactions of the parent (and any grandparents etc.) and the specified derived transaction portfolio itself.",
        "operationId": "BuildTransactionsForPortfolioGroup",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the portfolio group.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string"
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The code of the portfolio group. Together with the scope this uniquely identifies\r\n             the portfolio group.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string"
            }
          },
          {
            "name": "asAt",
            "in": "query",
            "description": "The asAt datetime at which to build the transactions. Defaults to return the latest\r\n             version of each transaction if not specified.",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "x-nullable": true
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Expression to filter the result set.\r\n             For example, to filter on the Transaction Type, use \"type eq 'Buy'\"\r\n             Read more about filtering results from LUSID here https://support.lusid.com/filtering-results-from-lusid.",
            "schema": {
              "maxLength": 16384,
              "minLength": 0,
              "pattern": "^[\\s\\S]*$",
              "type": "string"
            }
          },
          {
            "name": "propertyKeys",
            "in": "query",
            "description": "A list of property keys from the \"Instrument\" or \"Transaction\" domain to decorate onto\r\n             the transactions. These take the format {domain}/{scope}/{code} e.g. \"Instrument/system/Name\" or\r\n             \"Transaction/strategy/quantsignal\".",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "description": "The key that uniquely identifies the property. It has the format {domain}/{scope}/{code}."
              }
            },
            "x-nullable": true
          },
          {
            "name": "limit",
            "in": "query",
            "description": "When paginating, limit the number of returned results to this many. Defaults to 100 if not specified.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-nullable": true
          },
          {
            "name": "page",
            "in": "query",
            "description": "The pagination token to use to continue listing transactions from a previous call to BuildTransactions.",
            "schema": {
              "maxLength": 500,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\+/]*={0,3}$",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The query queryParameters which control how the output transactions are built.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/TransactionQueryParameters"
              },
              "example": {
                "startDate": "2018-03-05T00:00:00.0000000+00:00",
                "endDate": "2018-03-19T00:00:00.0000000+00:00",
                "queryMode": "TradeDate",
                "showCancelledTransactions": false
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TransactionQueryParameters"
              },
              "example": {
                "startDate": "2018-03-05T00:00:00.0000000+00:00",
                "endDate": "2018-03-19T00:00:00.0000000+00:00",
                "queryMode": "TradeDate",
                "showCancelledTransactions": false
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/TransactionQueryParameters"
              },
              "example": {
                "startDate": "2018-03-05T00:00:00.0000000+00:00",
                "endDate": "2018-03-19T00:00:00.0000000+00:00",
                "queryMode": "TradeDate",
                "showCancelledTransactions": false
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/TransactionQueryParameters"
              },
              "example": {
                "startDate": "2018-03-05T00:00:00.0000000+00:00",
                "endDate": "2018-03-19T00:00:00.0000000+00:00",
                "queryMode": "TradeDate",
                "showCancelledTransactions": false
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The requested transactions from transaction portfolios in the specified portfolio group",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/VersionedResourceListOfOutputTransaction"
                },
                "example": {
                  "version": {
                    "effectiveFrom": "2018-03-05T00:00:00.0000000+00:00",
                    "asAtDate": "2018-03-04T23:50:00.0000000+00:00"
                  },
                  "values": [
                    {
                      "transactionId": "TXN-00001",
                      "type": "Buy",
                      "description": "Purchase",
                      "instrumentIdentifiers": {
                        "Instrument/default/RIC": "RIC.L"
                      },
                      "instrumentScope": "default",
                      "instrumentUid": "LUID_JLH24106",
                      "transactionDate": "2018-08-04T00:00:00.0000000+00:00",
                      "settlementDate": "2018-08-06T00:00:00.0000000+00:00",
                      "units": 1000,
                      "transactionAmount": 88800,
                      "transactionPrice": {
                        "price": 88.8,
                        "type": "Price"
                      },
                      "totalConsideration": {
                        "amount": 88800,
                        "currency": "USD"
                      },
                      "exchangeRate": 1,
                      "transactionToPortfolioRate": 0.7648,
                      "transactionCurrency": "USD",
                      "properties": {
                        "Transaction/default/TradeToPortfolioRate": {
                          "key": "Transaction/default/TradeToPortfolioRate",
                          "value": {
                            "metricValue": {
                              "value": 0.765
                            }
                          }
                        },
                        "Transaction/default/SourcePortfolioId": {
                          "key": "Transaction/default/SourcePortfolioId",
                          "value": {
                            "labelValue": "DEMO-PORTFOLIO-ID"
                          }
                        },
                        "Transaction/default/SourcePortfolioScope": {
                          "key": "Transaction/default/SourcePortfolioScope",
                          "value": {
                            "labelValue": "DEMO-SCOPE"
                          }
                        }
                      },
                      "source": "",
                      "transactionStatus": "Cancelled",
                      "entryDateTime": "2018-08-04T12:22:06.0000000+00:00",
                      "cancelDateTime": "2018-08-04T12:25:14.0000000+00:00"
                    },
                    {
                      "transactionId": "TXN-00002",
                      "type": "Sell",
                      "description": "Sale",
                      "instrumentIdentifiers": {
                        "Instrument/default/ClientInternal": "INT:00024106"
                      },
                      "instrumentScope": "default",
                      "instrumentUid": "LUID_OI5JX1V7",
                      "transactionDate": "2018-08-07T00:00:00.0000000+00:00",
                      "settlementDate": "2018-08-10T00:00:00.0000000+00:00",
                      "units": 10000,
                      "transactionAmount": 1470100,
                      "transactionPrice": {
                        "price": 147.01,
                        "type": "Price"
                      },
                      "totalConsideration": {
                        "amount": 1470100,
                        "currency": "USD"
                      },
                      "exchangeRate": 1,
                      "transactionToPortfolioRate": 0.772,
                      "transactionCurrency": "USD",
                      "properties": {
                        "Transaction/default/TradeToPortfolioRate": {
                          "key": "Transaction/default/TradeToPortfolioRate",
                          "value": {
                            "metricValue": {
                              "value": 0.772
                            }
                          }
                        },
                        "Transaction/default/SourcePortfolioId": {
                          "key": "Transaction/default/SourcePortfolioId",
                          "value": {
                            "labelValue": "DEMO-PORTFOLIO-ID"
                          }
                        },
                        "Transaction/default/SourcePortfolioScope": {
                          "key": "Transaction/default/SourcePortfolioScope",
                          "value": {
                            "labelValue": "DEMO-SCOPE"
                          }
                        },
                        "Transaction/default/ResultantHolding": {
                          "key": "Transaction/default/ResultantHolding",
                          "value": {
                            "metricValue": {
                              "value": 3500
                            }
                          }
                        }
                      },
                      "source": "",
                      "transactionStatus": "Active",
                      "entryDateTime": "2018-08-07T10:30:12.0000000+00:00",
                      "realisedGainLoss": [
                        {
                          "instrumentScope": "default",
                          "instrumentUid": "LUID_OI5JX1V7",
                          "units": 4500,
                          "purchaseTradeDate": "2018-08-02T00:00:00.0000000+00:00",
                          "purchaseSettlementDate": "2018-08-05T00:00:00.0000000+00:00",
                          "purchasePrice": 142.96,
                          "costTradeCcy": {
                            "amount": 643320,
                            "currency": "USD"
                          },
                          "costPortfolioCcy": {
                            "amount": 493619.44,
                            "currency": "GBP"
                          },
                          "realisedTradeCcy": {
                            "amount": 18225,
                            "currency": "USD"
                          },
                          "realisedTotal": {
                            "amount": 17093.3,
                            "currency": "GBP"
                          },
                          "realisedMarket": {
                            "amount": 14069.7,
                            "currency": "GBP"
                          },
                          "realisedCurrency": {
                            "amount": 3023.6,
                            "currency": "GBP"
                          }
                        },
                        {
                          "instrumentScope": "default",
                          "instrumentUid": "LUID_OI5JX1V7",
                          "units": 4500,
                          "purchaseTradeDate": "2018-08-03T00:00:00.0000000+00:00",
                          "purchaseSettlementDate": "2018-08-06T00:00:00.0000000+00:00",
                          "purchasePrice": 147.7,
                          "costTradeCcy": {
                            "amount": 664650,
                            "currency": "USD"
                          },
                          "costPortfolioCcy": {
                            "amount": 510517.67,
                            "currency": "GBP"
                          },
                          "realisedTradeCcy": {
                            "amount": -3105,
                            "currency": "USD"
                          },
                          "realisedTotal": {
                            "amount": 195.07,
                            "currency": "GBP"
                          },
                          "realisedMarket": {
                            "amount": -2397.06,
                            "currency": "GBP"
                          },
                          "realisedCurrency": {
                            "amount": 2592.13,
                            "currency": "GBP"
                          }
                        },
                        {
                          "instrumentScope": "default",
                          "instrumentUid": "LUID_OI5JX1V7",
                          "units": 1000,
                          "purchaseTradeDate": "2018-08-06T00:00:00.0000000+00:00",
                          "purchaseSettlementDate": "2018-08-08T00:00:00.0000000+00:00",
                          "purchasePrice": 146.03,
                          "costTradeCcy": {
                            "amount": 146030,
                            "currency": "USD"
                          },
                          "costPortfolioCcy": {
                            "amount": 112851.98,
                            "currency": "GBP"
                          },
                          "realisedTradeCcy": {
                            "amount": 980,
                            "currency": "USD"
                          },
                          "realisedTotal": {
                            "amount": 639.74,
                            "currency": "GBP"
                          },
                          "realisedMarket": {
                            "amount": 756.56,
                            "currency": "GBP"
                          },
                          "realisedCurrency": {
                            "amount": -116.82,
                            "currency": "GBP"
                          }
                        }
                      ]
                    }
                  ],
                  "href": "http://example.com",
                  "links": []
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VersionedResourceListOfOutputTransaction"
                },
                "example": {
                  "version": {
                    "effectiveFrom": "2018-03-05T00:00:00.0000000+00:00",
                    "asAtDate": "2018-03-04T23:50:00.0000000+00:00"
                  },
                  "values": [
                    {
                      "transactionId": "TXN-00001",
                      "type": "Buy",
                      "description": "Purchase",
                      "instrumentIdentifiers": {
                        "Instrument/default/RIC": "RIC.L"
                      },
                      "instrumentScope": "default",
                      "instrumentUid": "LUID_JLH24106",
                      "transactionDate": "2018-08-04T00:00:00.0000000+00:00",
                      "settlementDate": "2018-08-06T00:00:00.0000000+00:00",
                      "units": 1000,
                      "transactionAmount": 88800,
                      "transactionPrice": {
                        "price": 88.8,
                        "type": "Price"
                      },
                      "totalConsideration": {
                        "amount": 88800,
                        "currency": "USD"
                      },
                      "exchangeRate": 1,
                      "transactionToPortfolioRate": 0.7648,
                      "transactionCurrency": "USD",
                      "properties": {
                        "Transaction/default/TradeToPortfolioRate": {
                          "key": "Transaction/default/TradeToPortfolioRate",
                          "value": {
                            "metricValue": {
                              "value": 0.765
                            }
                          }
                        },
                        "Transaction/default/SourcePortfolioId": {
                          "key": "Transaction/default/SourcePortfolioId",
                          "value": {
                            "labelValue": "DEMO-PORTFOLIO-ID"
                          }
                        },
                        "Transaction/default/SourcePortfolioScope": {
                          "key": "Transaction/default/SourcePortfolioScope",
                          "value": {
                            "labelValue": "DEMO-SCOPE"
                          }
                        }
                      },
                      "source": "",
                      "transactionStatus": "Cancelled",
                      "entryDateTime": "2018-08-04T12:22:06.0000000+00:00",
                      "cancelDateTime": "2018-08-04T12:25:14.0000000+00:00"
                    },
                    {
                      "transactionId": "TXN-00002",
                      "type": "Sell",
                      "description": "Sale",
                      "instrumentIdentifiers": {
                        "Instrument/default/ClientInternal": "INT:00024106"
                      },
                      "instrumentScope": "default",
                      "instrumentUid": "LUID_OI5JX1V7",
                      "transactionDate": "2018-08-07T00:00:00.0000000+00:00",
                      "settlementDate": "2018-08-10T00:00:00.0000000+00:00",
                      "units": 10000,
                      "transactionAmount": 1470100,
                      "transactionPrice": {
                        "price": 147.01,
                        "type": "Price"
                      },
                      "totalConsideration": {
                        "amount": 1470100,
                        "currency": "USD"
                      },
                      "exchangeRate": 1,
                      "transactionToPortfolioRate": 0.772,
                      "transactionCurrency": "USD",
                      "properties": {
                        "Transaction/default/TradeToPortfolioRate": {
                          "key": "Transaction/default/TradeToPortfolioRate",
                          "value": {
                            "metricValue": {
                              "value": 0.772
                            }
                          }
                        },
                        "Transaction/default/SourcePortfolioId": {
                          "key": "Transaction/default/SourcePortfolioId",
                          "value": {
                            "labelValue": "DEMO-PORTFOLIO-ID"
                          }
                        },
                        "Transaction/default/SourcePortfolioScope": {
                          "key": "Transaction/default/SourcePortfolioScope",
                          "value": {
                            "labelValue": "DEMO-SCOPE"
                          }
                        },
                        "Transaction/default/ResultantHolding": {
                          "key": "Transaction/default/ResultantHolding",
                          "value": {
                            "metricValue": {
                              "value": 3500
                            }
                          }
                        }
                      },
                      "source": "",
                      "transactionStatus": "Active",
                      "entryDateTime": "2018-08-07T10:30:12.0000000+00:00",
                      "realisedGainLoss": [
                        {
                          "instrumentScope": "default",
                          "instrumentUid": "LUID_OI5JX1V7",
                          "units": 4500,
                          "purchaseTradeDate": "2018-08-02T00:00:00.0000000+00:00",
                          "purchaseSettlementDate": "2018-08-05T00:00:00.0000000+00:00",
                          "purchasePrice": 142.96,
                          "costTradeCcy": {
                            "amount": 643320,
                            "currency": "USD"
                          },
                          "costPortfolioCcy": {
                            "amount": 493619.44,
                            "currency": "GBP"
                          },
                          "realisedTradeCcy": {
                            "amount": 18225,
                            "currency": "USD"
                          },
                          "realisedTotal": {
                            "amount": 17093.3,
                            "currency": "GBP"
                          },
                          "realisedMarket": {
                            "amount": 14069.7,
                            "currency": "GBP"
                          },
                          "realisedCurrency": {
                            "amount": 3023.6,
                            "currency": "GBP"
                          }
                        },
                        {
                          "instrumentScope": "default",
                          "instrumentUid": "LUID_OI5JX1V7",
                          "units": 4500,
                          "purchaseTradeDate": "2018-08-03T00:00:00.0000000+00:00",
                          "purchaseSettlementDate": "2018-08-06T00:00:00.0000000+00:00",
                          "purchasePrice": 147.7,
                          "costTradeCcy": {
                            "amount": 664650,
                            "currency": "USD"
                          },
                          "costPortfolioCcy": {
                            "amount": 510517.67,
                            "currency": "GBP"
                          },
                          "realisedTradeCcy": {
                            "amount": -3105,
                            "currency": "USD"
                          },
                          "realisedTotal": {
                            "amount": 195.07,
                            "currency": "GBP"
                          },
                          "realisedMarket": {
                            "amount": -2397.06,
                            "currency": "GBP"
                          },
                          "realisedCurrency": {
                            "amount": 2592.13,
                            "currency": "GBP"
                          }
                        },
                        {
                          "instrumentScope": "default",
                          "instrumentUid": "LUID_OI5JX1V7",
                          "units": 1000,
                          "purchaseTradeDate": "2018-08-06T00:00:00.0000000+00:00",
                          "purchaseSettlementDate": "2018-08-08T00:00:00.0000000+00:00",
                          "purchasePrice": 146.03,
                          "costTradeCcy": {
                            "amount": 146030,
                            "currency": "USD"
                          },
                          "costPortfolioCcy": {
                            "amount": 112851.98,
                            "currency": "GBP"
                          },
                          "realisedTradeCcy": {
                            "amount": 980,
                            "currency": "USD"
                          },
                          "realisedTotal": {
                            "amount": 639.74,
                            "currency": "GBP"
                          },
                          "realisedMarket": {
                            "amount": 756.56,
                            "currency": "GBP"
                          },
                          "realisedCurrency": {
                            "amount": -116.82,
                            "currency": "GBP"
                          }
                        }
                      ]
                    }
                  ],
                  "href": "http://example.com",
                  "links": []
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/VersionedResourceListOfOutputTransaction"
                },
                "example": {
                  "version": {
                    "effectiveFrom": "2018-03-05T00:00:00.0000000+00:00",
                    "asAtDate": "2018-03-04T23:50:00.0000000+00:00"
                  },
                  "values": [
                    {
                      "transactionId": "TXN-00001",
                      "type": "Buy",
                      "description": "Purchase",
                      "instrumentIdentifiers": {
                        "Instrument/default/RIC": "RIC.L"
                      },
                      "instrumentScope": "default",
                      "instrumentUid": "LUID_JLH24106",
                      "transactionDate": "2018-08-04T00:00:00.0000000+00:00",
                      "settlementDate": "2018-08-06T00:00:00.0000000+00:00",
                      "units": 1000,
                      "transactionAmount": 88800,
                      "transactionPrice": {
                        "price": 88.8,
                        "type": "Price"
                      },
                      "totalConsideration": {
                        "amount": 88800,
                        "currency": "USD"
                      },
                      "exchangeRate": 1,
                      "transactionToPortfolioRate": 0.7648,
                      "transactionCurrency": "USD",
                      "properties": {
                        "Transaction/default/TradeToPortfolioRate": {
                          "key": "Transaction/default/TradeToPortfolioRate",
                          "value": {
                            "metricValue": {
                              "value": 0.765
                            }
                          }
                        },
                        "Transaction/default/SourcePortfolioId": {
                          "key": "Transaction/default/SourcePortfolioId",
                          "value": {
                            "labelValue": "DEMO-PORTFOLIO-ID"
                          }
                        },
                        "Transaction/default/SourcePortfolioScope": {
                          "key": "Transaction/default/SourcePortfolioScope",
                          "value": {
                            "labelValue": "DEMO-SCOPE"
                          }
                        }
                      },
                      "source": "",
                      "transactionStatus": "Cancelled",
                      "entryDateTime": "2018-08-04T12:22:06.0000000+00:00",
                      "cancelDateTime": "2018-08-04T12:25:14.0000000+00:00"
                    },
                    {
                      "transactionId": "TXN-00002",
                      "type": "Sell",
                      "description": "Sale",
                      "instrumentIdentifiers": {
                        "Instrument/default/ClientInternal": "INT:00024106"
                      },
                      "instrumentScope": "default",
                      "instrumentUid": "LUID_OI5JX1V7",
                      "transactionDate": "2018-08-07T00:00:00.0000000+00:00",
                      "settlementDate": "2018-08-10T00:00:00.0000000+00:00",
                      "units": 10000,
                      "transactionAmount": 1470100,
                      "transactionPrice": {
                        "price": 147.01,
                        "type": "Price"
                      },
                      "totalConsideration": {
                        "amount": 1470100,
                        "currency": "USD"
                      },
                      "exchangeRate": 1,
                      "transactionToPortfolioRate": 0.772,
                      "transactionCurrency": "USD",
                      "properties": {
                        "Transaction/default/TradeToPortfolioRate": {
                          "key": "Transaction/default/TradeToPortfolioRate",
                          "value": {
                            "metricValue": {
                              "value": 0.772
                            }
                          }
                        },
                        "Transaction/default/SourcePortfolioId": {
                          "key": "Transaction/default/SourcePortfolioId",
                          "value": {
                            "labelValue": "DEMO-PORTFOLIO-ID"
                          }
                        },
                        "Transaction/default/SourcePortfolioScope": {
                          "key": "Transaction/default/SourcePortfolioScope",
                          "value": {
                            "labelValue": "DEMO-SCOPE"
                          }
                        },
                        "Transaction/default/ResultantHolding": {
                          "key": "Transaction/default/ResultantHolding",
                          "value": {
                            "metricValue": {
                              "value": 3500
                            }
                          }
                        }
                      },
                      "source": "",
                      "transactionStatus": "Active",
                      "entryDateTime": "2018-08-07T10:30:12.0000000+00:00",
                      "realisedGainLoss": [
                        {
                          "instrumentScope": "default",
                          "instrumentUid": "LUID_OI5JX1V7",
                          "units": 4500,
                          "purchaseTradeDate": "2018-08-02T00:00:00.0000000+00:00",
                          "purchaseSettlementDate": "2018-08-05T00:00:00.0000000+00:00",
                          "purchasePrice": 142.96,
                          "costTradeCcy": {
                            "amount": 643320,
                            "currency": "USD"
                          },
                          "costPortfolioCcy": {
                            "amount": 493619.44,
                            "currency": "GBP"
                          },
                          "realisedTradeCcy": {
                            "amount": 18225,
                            "currency": "USD"
                          },
                          "realisedTotal": {
                            "amount": 17093.3,
                            "currency": "GBP"
                          },
                          "realisedMarket": {
                            "amount": 14069.7,
                            "currency": "GBP"
                          },
                          "realisedCurrency": {
                            "amount": 3023.6,
                            "currency": "GBP"
                          }
                        },
                        {
                          "instrumentScope": "default",
                          "instrumentUid": "LUID_OI5JX1V7",
                          "units": 4500,
                          "purchaseTradeDate": "2018-08-03T00:00:00.0000000+00:00",
                          "purchaseSettlementDate": "2018-08-06T00:00:00.0000000+00:00",
                          "purchasePrice": 147.7,
                          "costTradeCcy": {
                            "amount": 664650,
                            "currency": "USD"
                          },
                          "costPortfolioCcy": {
                            "amount": 510517.67,
                            "currency": "GBP"
                          },
                          "realisedTradeCcy": {
                            "amount": -3105,
                            "currency": "USD"
                          },
                          "realisedTotal": {
                            "amount": 195.07,
                            "currency": "GBP"
                          },
                          "realisedMarket": {
                            "amount": -2397.06,
                            "currency": "GBP"
                          },
                          "realisedCurrency": {
                            "amount": 2592.13,
                            "currency": "GBP"
                          }
                        },
                        {
                          "instrumentScope": "default",
                          "instrumentUid": "LUID_OI5JX1V7",
                          "units": 1000,
                          "purchaseTradeDate": "2018-08-06T00:00:00.0000000+00:00",
                          "purchaseSettlementDate": "2018-08-08T00:00:00.0000000+00:00",
                          "purchasePrice": 146.03,
                          "costTradeCcy": {
                            "amount": 146030,
                            "currency": "USD"
                          },
                          "costPortfolioCcy": {
                            "amount": 112851.98,
                            "currency": "GBP"
                          },
                          "realisedTradeCcy": {
                            "amount": 980,
                            "currency": "USD"
                          },
                          "realisedTotal": {
                            "amount": 639.74,
                            "currency": "GBP"
                          },
                          "realisedMarket": {
                            "amount": 756.56,
                            "currency": "GBP"
                          },
                          "realisedCurrency": {
                            "amount": -116.82,
                            "currency": "GBP"
                          }
                        }
                      ]
                    }
                  ],
                  "href": "http://example.com",
                  "links": []
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Stable"
      }
    },
    "/api/portfolios": {
      "get": {
        "tags": [
          "Portfolios"
        ],
        "summary": "ListPortfolios: List portfolios",
        "description": "List all the portfolios matching particular criteria.",
        "operationId": "ListPortfolios",
        "parameters": [
          {
            "name": "effectiveAt",
            "in": "query",
            "description": "The effective datetime or cut label at which to list the portfolios. Defaults to the current LUSID\r\n            system datetime if not specified.",
            "schema": {
              "type": "string",
              "format": "dateorcutlabel"
            }
          },
          {
            "name": "asAt",
            "in": "query",
            "description": "The asAt datetime at which to list the portfolios. Defaults to returning the latest version\r\n            of each portfolio if not specified.",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "x-nullable": true
          },
          {
            "name": "page",
            "in": "query",
            "description": "The pagination token to use to continue listing portfolios; this\r\n            value is returned from the previous call. If a pagination token is provided, the filter, effectiveAt\r\n            and asAt fields must not have changed since the original request. Also, if set, a start value cannot be provided.",
            "schema": {
              "maxLength": 500,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\+/]*={0,3}$",
              "type": "string"
            }
          },
          {
            "name": "start",
            "in": "query",
            "description": "When paginating, skip this number of results.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-nullable": true
          },
          {
            "name": "limit",
            "in": "query",
            "description": "When paginating, limit the results to this number. Defaults to 100 if not specified.",
            "schema": {
              "maximum": 5000,
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            },
            "x-nullable": true
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Expression to filter the results.\r\n            For example, to filter on the transaction type, specify \"type eq 'Transaction'\". For more information about filtering\r\n            results, see https://support.lusid.com/knowledgebase/article/KA-01914.",
            "schema": {
              "maxLength": 16384,
              "minLength": 0,
              "pattern": "^[\\s\\S]*$",
              "type": "string"
            }
          },
          {
            "name": "query",
            "in": "query",
            "description": "Expression specifying the criteria that the returned portfolios must meet. For example, to see which\r\n            portfolios have holdings in instruments with a LusidInstrumentId (LUID) of 'LUID_PPA8HI6M' or a Figi of 'BBG000BLNNH6',\r\n            specify \"instrument.identifiers in (('LusidInstrumentId', 'LUID_PPA8HI6M'), ('Figi', 'BBG000BLNNH6'))\".",
            "schema": {
              "maxLength": 16384,
              "minLength": 0,
              "pattern": "^[\\s\\S]*$",
              "type": "string"
            }
          },
          {
            "name": "propertyKeys",
            "in": "query",
            "description": "A list of property keys from the 'Portfolio' domain to decorate onto each portfolio,\r\n            or from any domain that supports relationships to decorate onto related entities. These must take the\r\n            format {domain}/{scope}/{code}, for example 'Portfolio/Manager/Id'.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "description": "The key that uniquely identifies the property. It has the format {domain}/{scope}/{code}."
              }
            },
            "x-nullable": true
          },
          {
            "name": "relationshipDefinitionIds",
            "in": "query",
            "description": "A list of relationship definitions that are used to decorate related entities\r\n            onto the portfolios in the response. These must take the form {relationshipDefinitionScope}/{relationshipDefinitionCode}.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "description": "Identifiers of an entity"
              }
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "description": "The requested portfolios",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfPortfolio"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfPortfolio"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfPortfolio"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Stable"
      }
    },
    "/api/portfolios/$reconcileGeneric": {
      "post": {
        "tags": [
          "Reconciliations"
        ],
        "summary": "ReconcileGeneric: Reconcile either holdings or valuations performed on one or two sets of holdings using one or two configuration recipes.\r\n            \r\nThe output is configurable for various types of comparisons, to allow tolerances on numerical and date-time data or case-insensitivity on strings,\r\nand elision of resulting differences where they are 'empty' or null or zero.",
        "description": "Perform evaluation of one or two set of holdings (a portfolio of instruments) using one or two (potentially different) configuration recipes.\r\nProduce a breakdown of the resulting differences in evaluation that can be iterated through.",
        "operationId": "ReconcileGeneric",
        "requestBody": {
          "description": "The specifications of the inputs to the reconciliation",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/ReconciliationRequest"
              },
              "example": {
                "left": {
                  "recipeId": {
                    "scope": "MySourceScope",
                    "code": "MySourcePortfolioCode"
                  },
                  "asAt": "2018-03-05T00:00:00.0000000+00:00",
                  "metrics": [
                    {
                      "key": "Instrument/default/Name",
                      "op": "Value",
                      "options": {}
                    },
                    {
                      "key": "Holding/default/PV",
                      "op": "Sum",
                      "options": {}
                    }
                  ],
                  "groupBy": [
                    "Instrument/default/Name"
                  ],
                  "sort": [],
                  "reportCurrency": "USD",
                  "equipWithSubtotals": false,
                  "returnResultAsExpandedTypes": false,
                  "portfolioEntityIds": [
                    {
                      "scope": "PortfolioScope1",
                      "code": "MyPortfolioAbC",
                      "portfolioEntityType": "SinglePortfolio"
                    },
                    {
                      "scope": "PortfolioScope2",
                      "code": "MyPortfolioDeF",
                      "portfolioEntityType": "SinglePortfolio"
                    }
                  ],
                  "valuationSchedule": {
                    "effectiveFrom": "2018-03-05T00:00:00.0000000+00:00",
                    "effectiveAt": "2018-03-05T00:00:00.0000000+00:00",
                    "tenor": "1D",
                    "rollConvention": "F",
                    "holidayCalendars": [],
                    "valuationDateTimes": []
                  }
                },
                "right": {
                  "recipeId": {
                    "scope": "MyTargetScope",
                    "code": "MyTargetPortfolioCode"
                  },
                  "asAt": "2018-03-05T00:00:00.0000000+00:00",
                  "metrics": [
                    {
                      "key": "Instrument/default/Name",
                      "op": "Value",
                      "options": {}
                    },
                    {
                      "key": "Holding/default/PV",
                      "op": "Sum",
                      "options": {}
                    }
                  ],
                  "groupBy": [
                    "Instrument/default/Name"
                  ],
                  "sort": [],
                  "reportCurrency": "USD",
                  "equipWithSubtotals": false,
                  "returnResultAsExpandedTypes": false,
                  "portfolioEntityIds": [
                    {
                      "scope": "PortfolioScope1",
                      "code": "MyPortfolioAbC",
                      "portfolioEntityType": "SinglePortfolio"
                    },
                    {
                      "scope": "PortfolioScope2",
                      "code": "MyPortfolioDeF",
                      "portfolioEntityType": "SinglePortfolio"
                    }
                  ],
                  "valuationSchedule": {
                    "effectiveFrom": "2018-03-05T00:00:00.0000000+00:00",
                    "effectiveAt": "2018-03-05T00:00:00.0000000+00:00",
                    "tenor": "1D",
                    "rollConvention": "F",
                    "holidayCalendars": [],
                    "valuationDateTimes": []
                  }
                },
                "leftToRightMapping": [],
                "comparisonRules": [
                  {
                    "comparisonType": "AbsoluteDifference",
                    "tolerance": 1.2345,
                    "appliesTo": {
                      "key": "Holding/default/PV",
                      "op": "Sum",
                      "options": {}
                    },
                    "ruleType": "ReconcileNumericRule"
                  }
                ],
                "preserveKeys": [
                  "Instrument/default/Name"
                ]
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ReconciliationRequest"
              },
              "example": {
                "left": {
                  "recipeId": {
                    "scope": "MySourceScope",
                    "code": "MySourcePortfolioCode"
                  },
                  "asAt": "2018-03-05T00:00:00.0000000+00:00",
                  "metrics": [
                    {
                      "key": "Instrument/default/Name",
                      "op": "Value",
                      "options": {}
                    },
                    {
                      "key": "Holding/default/PV",
                      "op": "Sum",
                      "options": {}
                    }
                  ],
                  "groupBy": [
                    "Instrument/default/Name"
                  ],
                  "sort": [],
                  "reportCurrency": "USD",
                  "equipWithSubtotals": false,
                  "returnResultAsExpandedTypes": false,
                  "portfolioEntityIds": [
                    {
                      "scope": "PortfolioScope1",
                      "code": "MyPortfolioAbC",
                      "portfolioEntityType": "SinglePortfolio"
                    },
                    {
                      "scope": "PortfolioScope2",
                      "code": "MyPortfolioDeF",
                      "portfolioEntityType": "SinglePortfolio"
                    }
                  ],
                  "valuationSchedule": {
                    "effectiveFrom": "2018-03-05T00:00:00.0000000+00:00",
                    "effectiveAt": "2018-03-05T00:00:00.0000000+00:00",
                    "tenor": "1D",
                    "rollConvention": "F",
                    "holidayCalendars": [],
                    "valuationDateTimes": []
                  }
                },
                "right": {
                  "recipeId": {
                    "scope": "MyTargetScope",
                    "code": "MyTargetPortfolioCode"
                  },
                  "asAt": "2018-03-05T00:00:00.0000000+00:00",
                  "metrics": [
                    {
                      "key": "Instrument/default/Name",
                      "op": "Value",
                      "options": {}
                    },
                    {
                      "key": "Holding/default/PV",
                      "op": "Sum",
                      "options": {}
                    }
                  ],
                  "groupBy": [
                    "Instrument/default/Name"
                  ],
                  "sort": [],
                  "reportCurrency": "USD",
                  "equipWithSubtotals": false,
                  "returnResultAsExpandedTypes": false,
                  "portfolioEntityIds": [
                    {
                      "scope": "PortfolioScope1",
                      "code": "MyPortfolioAbC",
                      "portfolioEntityType": "SinglePortfolio"
                    },
                    {
                      "scope": "PortfolioScope2",
                      "code": "MyPortfolioDeF",
                      "portfolioEntityType": "SinglePortfolio"
                    }
                  ],
                  "valuationSchedule": {
                    "effectiveFrom": "2018-03-05T00:00:00.0000000+00:00",
                    "effectiveAt": "2018-03-05T00:00:00.0000000+00:00",
                    "tenor": "1D",
                    "rollConvention": "F",
                    "holidayCalendars": [],
                    "valuationDateTimes": []
                  }
                },
                "leftToRightMapping": [],
                "comparisonRules": [
                  {
                    "comparisonType": "AbsoluteDifference",
                    "tolerance": 1.2345,
                    "appliesTo": {
                      "key": "Holding/default/PV",
                      "op": "Sum",
                      "options": {}
                    },
                    "ruleType": "ReconcileNumericRule"
                  }
                ],
                "preserveKeys": [
                  "Instrument/default/Name"
                ]
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ReconciliationRequest"
              },
              "example": {
                "left": {
                  "recipeId": {
                    "scope": "MySourceScope",
                    "code": "MySourcePortfolioCode"
                  },
                  "asAt": "2018-03-05T00:00:00.0000000+00:00",
                  "metrics": [
                    {
                      "key": "Instrument/default/Name",
                      "op": "Value",
                      "options": {}
                    },
                    {
                      "key": "Holding/default/PV",
                      "op": "Sum",
                      "options": {}
                    }
                  ],
                  "groupBy": [
                    "Instrument/default/Name"
                  ],
                  "sort": [],
                  "reportCurrency": "USD",
                  "equipWithSubtotals": false,
                  "returnResultAsExpandedTypes": false,
                  "portfolioEntityIds": [
                    {
                      "scope": "PortfolioScope1",
                      "code": "MyPortfolioAbC",
                      "portfolioEntityType": "SinglePortfolio"
                    },
                    {
                      "scope": "PortfolioScope2",
                      "code": "MyPortfolioDeF",
                      "portfolioEntityType": "SinglePortfolio"
                    }
                  ],
                  "valuationSchedule": {
                    "effectiveFrom": "2018-03-05T00:00:00.0000000+00:00",
                    "effectiveAt": "2018-03-05T00:00:00.0000000+00:00",
                    "tenor": "1D",
                    "rollConvention": "F",
                    "holidayCalendars": [],
                    "valuationDateTimes": []
                  }
                },
                "right": {
                  "recipeId": {
                    "scope": "MyTargetScope",
                    "code": "MyTargetPortfolioCode"
                  },
                  "asAt": "2018-03-05T00:00:00.0000000+00:00",
                  "metrics": [
                    {
                      "key": "Instrument/default/Name",
                      "op": "Value",
                      "options": {}
                    },
                    {
                      "key": "Holding/default/PV",
                      "op": "Sum",
                      "options": {}
                    }
                  ],
                  "groupBy": [
                    "Instrument/default/Name"
                  ],
                  "sort": [],
                  "reportCurrency": "USD",
                  "equipWithSubtotals": false,
                  "returnResultAsExpandedTypes": false,
                  "portfolioEntityIds": [
                    {
                      "scope": "PortfolioScope1",
                      "code": "MyPortfolioAbC",
                      "portfolioEntityType": "SinglePortfolio"
                    },
                    {
                      "scope": "PortfolioScope2",
                      "code": "MyPortfolioDeF",
                      "portfolioEntityType": "SinglePortfolio"
                    }
                  ],
                  "valuationSchedule": {
                    "effectiveFrom": "2018-03-05T00:00:00.0000000+00:00",
                    "effectiveAt": "2018-03-05T00:00:00.0000000+00:00",
                    "tenor": "1D",
                    "rollConvention": "F",
                    "holidayCalendars": [],
                    "valuationDateTimes": []
                  }
                },
                "leftToRightMapping": [],
                "comparisonRules": [
                  {
                    "comparisonType": "AbsoluteDifference",
                    "tolerance": 1.2345,
                    "appliesTo": {
                      "key": "Holding/default/PV",
                      "op": "Sum",
                      "options": {}
                    },
                    "ruleType": "ReconcileNumericRule"
                  }
                ],
                "preserveKeys": [
                  "Instrument/default/Name"
                ]
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ReconciliationRequest"
              },
              "example": {
                "left": {
                  "recipeId": {
                    "scope": "MySourceScope",
                    "code": "MySourcePortfolioCode"
                  },
                  "asAt": "2018-03-05T00:00:00.0000000+00:00",
                  "metrics": [
                    {
                      "key": "Instrument/default/Name",
                      "op": "Value",
                      "options": {}
                    },
                    {
                      "key": "Holding/default/PV",
                      "op": "Sum",
                      "options": {}
                    }
                  ],
                  "groupBy": [
                    "Instrument/default/Name"
                  ],
                  "sort": [],
                  "reportCurrency": "USD",
                  "equipWithSubtotals": false,
                  "returnResultAsExpandedTypes": false,
                  "portfolioEntityIds": [
                    {
                      "scope": "PortfolioScope1",
                      "code": "MyPortfolioAbC",
                      "portfolioEntityType": "SinglePortfolio"
                    },
                    {
                      "scope": "PortfolioScope2",
                      "code": "MyPortfolioDeF",
                      "portfolioEntityType": "SinglePortfolio"
                    }
                  ],
                  "valuationSchedule": {
                    "effectiveFrom": "2018-03-05T00:00:00.0000000+00:00",
                    "effectiveAt": "2018-03-05T00:00:00.0000000+00:00",
                    "tenor": "1D",
                    "rollConvention": "F",
                    "holidayCalendars": [],
                    "valuationDateTimes": []
                  }
                },
                "right": {
                  "recipeId": {
                    "scope": "MyTargetScope",
                    "code": "MyTargetPortfolioCode"
                  },
                  "asAt": "2018-03-05T00:00:00.0000000+00:00",
                  "metrics": [
                    {
                      "key": "Instrument/default/Name",
                      "op": "Value",
                      "options": {}
                    },
                    {
                      "key": "Holding/default/PV",
                      "op": "Sum",
                      "options": {}
                    }
                  ],
                  "groupBy": [
                    "Instrument/default/Name"
                  ],
                  "sort": [],
                  "reportCurrency": "USD",
                  "equipWithSubtotals": false,
                  "returnResultAsExpandedTypes": false,
                  "portfolioEntityIds": [
                    {
                      "scope": "PortfolioScope1",
                      "code": "MyPortfolioAbC",
                      "portfolioEntityType": "SinglePortfolio"
                    },
                    {
                      "scope": "PortfolioScope2",
                      "code": "MyPortfolioDeF",
                      "portfolioEntityType": "SinglePortfolio"
                    }
                  ],
                  "valuationSchedule": {
                    "effectiveFrom": "2018-03-05T00:00:00.0000000+00:00",
                    "effectiveAt": "2018-03-05T00:00:00.0000000+00:00",
                    "tenor": "1D",
                    "rollConvention": "F",
                    "holidayCalendars": [],
                    "valuationDateTimes": []
                  }
                },
                "leftToRightMapping": [],
                "comparisonRules": [
                  {
                    "comparisonType": "AbsoluteDifference",
                    "tolerance": 1.2345,
                    "appliesTo": {
                      "key": "Holding/default/PV",
                      "op": "Sum",
                      "options": {}
                    },
                    "ruleType": "ReconcileNumericRule"
                  }
                ],
                "preserveKeys": [
                  "Instrument/default/Name"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The requested reconciliation",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ReconciliationResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReconciliationResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReconciliationResponse"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Stable"
      }
    },
    "/api/portfolios/$reconcileholdings": {
      "post": {
        "tags": [
          "Reconciliations"
        ],
        "summary": "[EARLY ACCESS] ReconcileHoldings: Reconcile portfolio holdings",
        "description": "Reconcile the holdings of two portfolios.",
        "operationId": "ReconcileHoldings",
        "parameters": [
          {
            "name": "sortBy",
            "in": "query",
            "description": "Optional. Order the results by these fields. Use use the '-' sign to denote descending order e.g. -MyFieldName",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "x-nullable": true
          },
          {
            "name": "start",
            "in": "query",
            "description": "Optional. When paginating, skip this number of results",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-nullable": true
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Optional. When paginating, limit the number of returned results to this many.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-nullable": true
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Optional. Expression to filter the result set.\r\n            For example, to filter on the left portfolio Code, use \"left.portfolioId.code eq 'string'\"\r\n            Read more about filtering results from LUSID here https://support.lusid.com/filtering-results-from-lusid.",
            "schema": {
              "maxLength": 16384,
              "minLength": 0,
              "pattern": "^[\\s\\S]*$",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The specifications of the inputs to the reconciliation",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/PortfoliosReconciliationRequest"
              },
              "example": {
                "left": {
                  "portfolioId": {
                    "scope": "MySourceScope",
                    "code": "MySourcePortfolioCode"
                  },
                  "effectiveAt": "2018-03-05T00:00:00.0000000+00:00",
                  "asAt": "2018-03-05T00:00:00.0000000+00:00"
                },
                "right": {
                  "portfolioId": {
                    "scope": "MyTargetScope",
                    "code": "MyTargetPortfolioCode"
                  },
                  "effectiveAt": "2018-03-05T00:00:00.0000000+00:00",
                  "asAt": "2018-03-05T00:00:00.0000000+00:00"
                },
                "instrumentPropertyKeys": [
                  "Instrument/default/Name"
                ]
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PortfoliosReconciliationRequest"
              },
              "example": {
                "left": {
                  "portfolioId": {
                    "scope": "MySourceScope",
                    "code": "MySourcePortfolioCode"
                  },
                  "effectiveAt": "2018-03-05T00:00:00.0000000+00:00",
                  "asAt": "2018-03-05T00:00:00.0000000+00:00"
                },
                "right": {
                  "portfolioId": {
                    "scope": "MyTargetScope",
                    "code": "MyTargetPortfolioCode"
                  },
                  "effectiveAt": "2018-03-05T00:00:00.0000000+00:00",
                  "asAt": "2018-03-05T00:00:00.0000000+00:00"
                },
                "instrumentPropertyKeys": [
                  "Instrument/default/Name"
                ]
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/PortfoliosReconciliationRequest"
              },
              "example": {
                "left": {
                  "portfolioId": {
                    "scope": "MySourceScope",
                    "code": "MySourcePortfolioCode"
                  },
                  "effectiveAt": "2018-03-05T00:00:00.0000000+00:00",
                  "asAt": "2018-03-05T00:00:00.0000000+00:00"
                },
                "right": {
                  "portfolioId": {
                    "scope": "MyTargetScope",
                    "code": "MyTargetPortfolioCode"
                  },
                  "effectiveAt": "2018-03-05T00:00:00.0000000+00:00",
                  "asAt": "2018-03-05T00:00:00.0000000+00:00"
                },
                "instrumentPropertyKeys": [
                  "Instrument/default/Name"
                ]
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/PortfoliosReconciliationRequest"
              },
              "example": {
                "left": {
                  "portfolioId": {
                    "scope": "MySourceScope",
                    "code": "MySourcePortfolioCode"
                  },
                  "effectiveAt": "2018-03-05T00:00:00.0000000+00:00",
                  "asAt": "2018-03-05T00:00:00.0000000+00:00"
                },
                "right": {
                  "portfolioId": {
                    "scope": "MyTargetScope",
                    "code": "MyTargetPortfolioCode"
                  },
                  "effectiveAt": "2018-03-05T00:00:00.0000000+00:00",
                  "asAt": "2018-03-05T00:00:00.0000000+00:00"
                },
                "instrumentPropertyKeys": [
                  "Instrument/default/Name"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The requested reconciliation",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfReconciliationBreak"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfReconciliationBreak"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfReconciliationBreak"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      }
    },
    "/api/portfolios/$reconcileInline": {
      "post": {
        "tags": [
          "Reconciliations"
        ],
        "summary": "ReconcileInline: Reconcile valuations performed on one or two sets of inline instruments using one or two configuration recipes.",
        "description": "Perform valuation of one or two set of inline instruments using different one or two configuration recipes. Produce a breakdown of the resulting differences in valuation.",
        "operationId": "ReconcileInline",
        "requestBody": {
          "description": "The specifications of the inputs to the reconciliation",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/InlineValuationsReconciliationRequest"
              },
              "example": {
                "left": {
                  "recipeId": {
                    "scope": "MyScope",
                    "code": "default"
                  },
                  "asAt": "2018-03-05T00:00:00.0000000+00:00",
                  "metrics": [
                    {
                      "key": "Instrument/default/Name",
                      "op": "Value",
                      "options": {}
                    },
                    {
                      "key": "Holding/default/PV",
                      "op": "Value",
                      "options": {}
                    }
                  ],
                  "groupBy": [
                    "Instrument/default/Name"
                  ],
                  "reportCurrency": "USD",
                  "equipWithSubtotals": false,
                  "returnResultAsExpandedTypes": false,
                  "valuationSchedule": {
                    "effectiveFrom": "2018-03-05T00:00:00.0000000+00:00",
                    "effectiveAt": "2018-03-05T00:00:00.0000000+00:00",
                    "tenor": "1D",
                    "rollConvention": "F",
                    "holidayCalendars": [],
                    "valuationDateTimes": []
                  },
                  "instruments": [
                    {
                      "quantity": 10000,
                      "holdingIdentifier": "fx-fwd-GBPUSD",
                      "instrument": {
                        "startDate": "2018-03-01T00:00:00.0000000+00:00",
                        "maturityDate": "2018-03-30T00:00:00.0000000+00:00",
                        "domAmount": 100,
                        "domCcy": "GBP",
                        "fgnAmount": -150,
                        "fgnCcy": "USD",
                        "refSpotRate": 1.5,
                        "isNdf": false,
                        "fixingDate": "0001-01-01T00:00:00.0000000+00:00",
                        "instrumentType": "FxForward"
                      }
                    }
                  ]
                },
                "right": {
                  "recipeId": {
                    "scope": "MyScope",
                    "code": "default"
                  },
                  "asAt": "2018-03-05T00:00:00.0000000+00:00",
                  "metrics": [
                    {
                      "key": "Instrument/default/Name",
                      "op": "Value",
                      "options": {}
                    },
                    {
                      "key": "Holding/default/PV",
                      "op": "Value",
                      "options": {}
                    }
                  ],
                  "groupBy": [
                    "Instrument/default/Name"
                  ],
                  "reportCurrency": "USD",
                  "equipWithSubtotals": false,
                  "returnResultAsExpandedTypes": false,
                  "valuationSchedule": {
                    "effectiveFrom": "2018-03-05T00:00:00.0000000+00:00",
                    "effectiveAt": "2018-03-05T00:00:00.0000000+00:00",
                    "tenor": "1D",
                    "rollConvention": "F",
                    "holidayCalendars": [],
                    "valuationDateTimes": []
                  },
                  "instruments": [
                    {
                      "quantity": 10000,
                      "holdingIdentifier": "fx-fwd-GBPJPY",
                      "instrument": {
                        "startDate": "2018-03-01T00:00:00.0000000+00:00",
                        "maturityDate": "2018-03-30T00:00:00.0000000+00:00",
                        "domAmount": 100,
                        "domCcy": "GBP",
                        "fgnAmount": -150,
                        "fgnCcy": "JPY",
                        "refSpotRate": 132,
                        "isNdf": false,
                        "fixingDate": "0001-01-01T00:00:00.0000000+00:00",
                        "instrumentType": "FxForward"
                      }
                    }
                  ]
                },
                "leftToRightMapping": [],
                "preserveKeys": []
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InlineValuationsReconciliationRequest"
              },
              "example": {
                "left": {
                  "recipeId": {
                    "scope": "MyScope",
                    "code": "default"
                  },
                  "asAt": "2018-03-05T00:00:00.0000000+00:00",
                  "metrics": [
                    {
                      "key": "Instrument/default/Name",
                      "op": "Value",
                      "options": {}
                    },
                    {
                      "key": "Holding/default/PV",
                      "op": "Value",
                      "options": {}
                    }
                  ],
                  "groupBy": [
                    "Instrument/default/Name"
                  ],
                  "reportCurrency": "USD",
                  "equipWithSubtotals": false,
                  "returnResultAsExpandedTypes": false,
                  "valuationSchedule": {
                    "effectiveFrom": "2018-03-05T00:00:00.0000000+00:00",
                    "effectiveAt": "2018-03-05T00:00:00.0000000+00:00",
                    "tenor": "1D",
                    "rollConvention": "F",
                    "holidayCalendars": [],
                    "valuationDateTimes": []
                  },
                  "instruments": [
                    {
                      "quantity": 10000,
                      "holdingIdentifier": "fx-fwd-GBPUSD",
                      "instrument": {
                        "startDate": "2018-03-01T00:00:00.0000000+00:00",
                        "maturityDate": "2018-03-30T00:00:00.0000000+00:00",
                        "domAmount": 100,
                        "domCcy": "GBP",
                        "fgnAmount": -150,
                        "fgnCcy": "USD",
                        "refSpotRate": 1.5,
                        "isNdf": false,
                        "fixingDate": "0001-01-01T00:00:00.0000000+00:00",
                        "instrumentType": "FxForward"
                      }
                    }
                  ]
                },
                "right": {
                  "recipeId": {
                    "scope": "MyScope",
                    "code": "default"
                  },
                  "asAt": "2018-03-05T00:00:00.0000000+00:00",
                  "metrics": [
                    {
                      "key": "Instrument/default/Name",
                      "op": "Value",
                      "options": {}
                    },
                    {
                      "key": "Holding/default/PV",
                      "op": "Value",
                      "options": {}
                    }
                  ],
                  "groupBy": [
                    "Instrument/default/Name"
                  ],
                  "reportCurrency": "USD",
                  "equipWithSubtotals": false,
                  "returnResultAsExpandedTypes": false,
                  "valuationSchedule": {
                    "effectiveFrom": "2018-03-05T00:00:00.0000000+00:00",
                    "effectiveAt": "2018-03-05T00:00:00.0000000+00:00",
                    "tenor": "1D",
                    "rollConvention": "F",
                    "holidayCalendars": [],
                    "valuationDateTimes": []
                  },
                  "instruments": [
                    {
                      "quantity": 10000,
                      "holdingIdentifier": "fx-fwd-GBPJPY",
                      "instrument": {
                        "startDate": "2018-03-01T00:00:00.0000000+00:00",
                        "maturityDate": "2018-03-30T00:00:00.0000000+00:00",
                        "domAmount": 100,
                        "domCcy": "GBP",
                        "fgnAmount": -150,
                        "fgnCcy": "JPY",
                        "refSpotRate": 132,
                        "isNdf": false,
                        "fixingDate": "0001-01-01T00:00:00.0000000+00:00",
                        "instrumentType": "FxForward"
                      }
                    }
                  ]
                },
                "leftToRightMapping": [],
                "preserveKeys": []
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/InlineValuationsReconciliationRequest"
              },
              "example": {
                "left": {
                  "recipeId": {
                    "scope": "MyScope",
                    "code": "default"
                  },
                  "asAt": "2018-03-05T00:00:00.0000000+00:00",
                  "metrics": [
                    {
                      "key": "Instrument/default/Name",
                      "op": "Value",
                      "options": {}
                    },
                    {
                      "key": "Holding/default/PV",
                      "op": "Value",
                      "options": {}
                    }
                  ],
                  "groupBy": [
                    "Instrument/default/Name"
                  ],
                  "reportCurrency": "USD",
                  "equipWithSubtotals": false,
                  "returnResultAsExpandedTypes": false,
                  "valuationSchedule": {
                    "effectiveFrom": "2018-03-05T00:00:00.0000000+00:00",
                    "effectiveAt": "2018-03-05T00:00:00.0000000+00:00",
                    "tenor": "1D",
                    "rollConvention": "F",
                    "holidayCalendars": [],
                    "valuationDateTimes": []
                  },
                  "instruments": [
                    {
                      "quantity": 10000,
                      "holdingIdentifier": "fx-fwd-GBPUSD",
                      "instrument": {
                        "startDate": "2018-03-01T00:00:00.0000000+00:00",
                        "maturityDate": "2018-03-30T00:00:00.0000000+00:00",
                        "domAmount": 100,
                        "domCcy": "GBP",
                        "fgnAmount": -150,
                        "fgnCcy": "USD",
                        "refSpotRate": 1.5,
                        "isNdf": false,
                        "fixingDate": "0001-01-01T00:00:00.0000000+00:00",
                        "instrumentType": "FxForward"
                      }
                    }
                  ]
                },
                "right": {
                  "recipeId": {
                    "scope": "MyScope",
                    "code": "default"
                  },
                  "asAt": "2018-03-05T00:00:00.0000000+00:00",
                  "metrics": [
                    {
                      "key": "Instrument/default/Name",
                      "op": "Value",
                      "options": {}
                    },
                    {
                      "key": "Holding/default/PV",
                      "op": "Value",
                      "options": {}
                    }
                  ],
                  "groupBy": [
                    "Instrument/default/Name"
                  ],
                  "reportCurrency": "USD",
                  "equipWithSubtotals": false,
                  "returnResultAsExpandedTypes": false,
                  "valuationSchedule": {
                    "effectiveFrom": "2018-03-05T00:00:00.0000000+00:00",
                    "effectiveAt": "2018-03-05T00:00:00.0000000+00:00",
                    "tenor": "1D",
                    "rollConvention": "F",
                    "holidayCalendars": [],
                    "valuationDateTimes": []
                  },
                  "instruments": [
                    {
                      "quantity": 10000,
                      "holdingIdentifier": "fx-fwd-GBPJPY",
                      "instrument": {
                        "startDate": "2018-03-01T00:00:00.0000000+00:00",
                        "maturityDate": "2018-03-30T00:00:00.0000000+00:00",
                        "domAmount": 100,
                        "domCcy": "GBP",
                        "fgnAmount": -150,
                        "fgnCcy": "JPY",
                        "refSpotRate": 132,
                        "isNdf": false,
                        "fixingDate": "0001-01-01T00:00:00.0000000+00:00",
                        "instrumentType": "FxForward"
                      }
                    }
                  ]
                },
                "leftToRightMapping": [],
                "preserveKeys": []
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/InlineValuationsReconciliationRequest"
              },
              "example": {
                "left": {
                  "recipeId": {
                    "scope": "MyScope",
                    "code": "default"
                  },
                  "asAt": "2018-03-05T00:00:00.0000000+00:00",
                  "metrics": [
                    {
                      "key": "Instrument/default/Name",
                      "op": "Value",
                      "options": {}
                    },
                    {
                      "key": "Holding/default/PV",
                      "op": "Value",
                      "options": {}
                    }
                  ],
                  "groupBy": [
                    "Instrument/default/Name"
                  ],
                  "reportCurrency": "USD",
                  "equipWithSubtotals": false,
                  "returnResultAsExpandedTypes": false,
                  "valuationSchedule": {
                    "effectiveFrom": "2018-03-05T00:00:00.0000000+00:00",
                    "effectiveAt": "2018-03-05T00:00:00.0000000+00:00",
                    "tenor": "1D",
                    "rollConvention": "F",
                    "holidayCalendars": [],
                    "valuationDateTimes": []
                  },
                  "instruments": [
                    {
                      "quantity": 10000,
                      "holdingIdentifier": "fx-fwd-GBPUSD",
                      "instrument": {
                        "startDate": "2018-03-01T00:00:00.0000000+00:00",
                        "maturityDate": "2018-03-30T00:00:00.0000000+00:00",
                        "domAmount": 100,
                        "domCcy": "GBP",
                        "fgnAmount": -150,
                        "fgnCcy": "USD",
                        "refSpotRate": 1.5,
                        "isNdf": false,
                        "fixingDate": "0001-01-01T00:00:00.0000000+00:00",
                        "instrumentType": "FxForward"
                      }
                    }
                  ]
                },
                "right": {
                  "recipeId": {
                    "scope": "MyScope",
                    "code": "default"
                  },
                  "asAt": "2018-03-05T00:00:00.0000000+00:00",
                  "metrics": [
                    {
                      "key": "Instrument/default/Name",
                      "op": "Value",
                      "options": {}
                    },
                    {
                      "key": "Holding/default/PV",
                      "op": "Value",
                      "options": {}
                    }
                  ],
                  "groupBy": [
                    "Instrument/default/Name"
                  ],
                  "reportCurrency": "USD",
                  "equipWithSubtotals": false,
                  "returnResultAsExpandedTypes": false,
                  "valuationSchedule": {
                    "effectiveFrom": "2018-03-05T00:00:00.0000000+00:00",
                    "effectiveAt": "2018-03-05T00:00:00.0000000+00:00",
                    "tenor": "1D",
                    "rollConvention": "F",
                    "holidayCalendars": [],
                    "valuationDateTimes": []
                  },
                  "instruments": [
                    {
                      "quantity": 10000,
                      "holdingIdentifier": "fx-fwd-GBPJPY",
                      "instrument": {
                        "startDate": "2018-03-01T00:00:00.0000000+00:00",
                        "maturityDate": "2018-03-30T00:00:00.0000000+00:00",
                        "domAmount": 100,
                        "domCcy": "GBP",
                        "fgnAmount": -150,
                        "fgnCcy": "JPY",
                        "refSpotRate": 132,
                        "isNdf": false,
                        "fixingDate": "0001-01-01T00:00:00.0000000+00:00",
                        "instrumentType": "FxForward"
                      }
                    }
                  ]
                },
                "leftToRightMapping": [],
                "preserveKeys": []
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The requested reconciliation",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ListAggregationReconciliation"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListAggregationReconciliation"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListAggregationReconciliation"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Stable"
      }
    },
    "/api/portfolios/$reconcileTransactions": {
      "post": {
        "tags": [
          "Reconciliations"
        ],
        "summary": "[EARLY ACCESS] ReconcileTransactions: Perform a Transactions Reconciliation.",
        "description": "Evaluates two sets of transactions to determine which transactions from each set likely match\r\nusing the rules of a specified mapping.",
        "operationId": "ReconcileTransactions",
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/TransactionReconciliationRequest"
              },
              "example": {
                "leftPortfolioId": {
                  "scope": "street",
                  "code": "Global-Equity"
                },
                "rightPortfolioId": {
                  "scope": "custodian",
                  "code": "Global-Equity"
                },
                "fromTransactionDate": "2019-04-01T12:00:00.0000000+00:00",
                "toTransactionDate": "2019-05-01T12:00:00.0000000+00:00",
                "propertyKeys": [
                  "Instrument/default/Name",
                  "Transaction/common/Strategy"
                ]
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TransactionReconciliationRequest"
              },
              "example": {
                "leftPortfolioId": {
                  "scope": "street",
                  "code": "Global-Equity"
                },
                "rightPortfolioId": {
                  "scope": "custodian",
                  "code": "Global-Equity"
                },
                "fromTransactionDate": "2019-04-01T12:00:00.0000000+00:00",
                "toTransactionDate": "2019-05-01T12:00:00.0000000+00:00",
                "propertyKeys": [
                  "Instrument/default/Name",
                  "Transaction/common/Strategy"
                ]
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/TransactionReconciliationRequest"
              },
              "example": {
                "leftPortfolioId": {
                  "scope": "street",
                  "code": "Global-Equity"
                },
                "rightPortfolioId": {
                  "scope": "custodian",
                  "code": "Global-Equity"
                },
                "fromTransactionDate": "2019-04-01T12:00:00.0000000+00:00",
                "toTransactionDate": "2019-05-01T12:00:00.0000000+00:00",
                "propertyKeys": [
                  "Instrument/default/Name",
                  "Transaction/common/Strategy"
                ]
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/TransactionReconciliationRequest"
              },
              "example": {
                "leftPortfolioId": {
                  "scope": "street",
                  "code": "Global-Equity"
                },
                "rightPortfolioId": {
                  "scope": "custodian",
                  "code": "Global-Equity"
                },
                "fromTransactionDate": "2019-04-01T12:00:00.0000000+00:00",
                "toTransactionDate": "2019-05-01T12:00:00.0000000+00:00",
                "propertyKeys": [
                  "Instrument/default/Name",
                  "Transaction/common/Strategy"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The transaction reconciliation data for the supplied portfolios.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/TransactionsReconciliationsResponse"
                },
                "example": {
                  "mapping": {
                    "scope": "default",
                    "code": "TransactionReconciliationMapping",
                    "name": "Mapping Name",
                    "reconciliationType": "Transaction",
                    "rules": [
                      {
                        "left": "TransactionId",
                        "right": "TransactionId",
                        "comparisonType": "Equals",
                        "weight": 10,
                        "isCaseSensitive": false
                      },
                      {
                        "left": "InstrumentUid",
                        "right": "InstrumentUid",
                        "comparisonType": "Equals",
                        "weight": 5,
                        "isCaseSensitive": false
                      },
                      {
                        "left": "TransactionPrice",
                        "right": "TransactionPrice",
                        "comparisonType": "Equals",
                        "weight": 1,
                        "isCaseSensitive": false
                      },
                      {
                        "left": "TransactionCurrency",
                        "right": "TransactionCurrency",
                        "comparisonType": "Equals",
                        "weight": 1,
                        "isCaseSensitive": false
                      },
                      {
                        "left": "TransactionDate",
                        "right": "TransactionDate",
                        "comparisonType": "SameDate",
                        "weight": 1,
                        "isCaseSensitive": false
                      },
                      {
                        "left": "SettlementDate",
                        "right": "SettlementDate",
                        "comparisonType": "SameDate",
                        "weight": 1,
                        "isCaseSensitive": false
                      },
                      {
                        "left": "CounterpartyId",
                        "right": "CounterpartyId",
                        "comparisonType": "Equals",
                        "weight": 1,
                        "isCaseSensitive": false
                      },
                      {
                        "left": "ExchangeRate",
                        "right": "ExchangeRate",
                        "comparisonType": "WithinPercentage",
                        "comparisonValue": 0.5,
                        "weight": 1,
                        "isCaseSensitive": false
                      }
                    ]
                  },
                  "data": [
                    {
                      "left": {
                        "transactionId": "TXN-001",
                        "type": "BUY",
                        "instrumentIdentifiers": {
                          "Instrument/default/Figi": "BBG000B9XRY4"
                        },
                        "instrumentScope": "default",
                        "instrumentUid": "LUID_008XGQ1D",
                        "transactionDate": "2019-04-02T12:00:00.0000000+00:00",
                        "settlementDate": "2019-04-05T12:00:00.0000000+00:00",
                        "units": 100,
                        "transactionPrice": {
                          "price": 199.23,
                          "type": "Price"
                        },
                        "totalConsideration": {
                          "amount": 20000,
                          "currency": "USD"
                        },
                        "exchangeRate": 1.31,
                        "transactionCurrency": "USD",
                        "properties": {
                          "Instrument/default/Name": {
                            "key": "Instrument/default/Name",
                            "value": {
                              "labelValue": "APPLE INC"
                            }
                          },
                          "Transaction/common/Strategy": {
                            "key": "Transaction/common/Strategy",
                            "value": {
                              "labelValue": "Strategy 1"
                            }
                          }
                        },
                        "source": "",
                        "entryDateTime": "2019-04-02T16:30:15.0000000+00:00",
                        "transactionStatus": "Active"
                      },
                      "right": {
                        "transactionId": "TXN-001",
                        "type": "BUY",
                        "instrumentIdentifiers": {
                          "Instrument/default/Figi": "BBG000B9XRY4"
                        },
                        "instrumentScope": "default",
                        "instrumentUid": "LUID_008XGQ1D",
                        "transactionDate": "2019-04-02T12:00:00.0000000+00:00",
                        "settlementDate": "2019-04-05T12:00:00.0000000+00:00",
                        "units": 100,
                        "transactionPrice": {
                          "price": 199.23,
                          "type": "Price"
                        },
                        "totalConsideration": {
                          "amount": 20000,
                          "currency": "USD"
                        },
                        "exchangeRate": 1.31,
                        "transactionCurrency": "USD",
                        "properties": {
                          "Instrument/default/Name": {
                            "key": "Instrument/default/Name",
                            "value": {
                              "labelValue": "APPLE INC"
                            }
                          },
                          "Transaction/common/Strategy": {
                            "key": "Transaction/common/Strategy",
                            "value": {
                              "labelValue": "Strategy 1"
                            }
                          }
                        },
                        "source": "custodian file /var/data/xyz",
                        "entryDateTime": "2019-04-02T16:30:15.0000000+00:00",
                        "transactionStatus": "Active"
                      },
                      "percentageMatch": 100,
                      "mappingRuleSetResults": [
                        true,
                        true,
                        true,
                        true,
                        true,
                        true,
                        true,
                        true
                      ]
                    }
                  ]
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TransactionsReconciliationsResponse"
                },
                "example": {
                  "mapping": {
                    "scope": "default",
                    "code": "TransactionReconciliationMapping",
                    "name": "Mapping Name",
                    "reconciliationType": "Transaction",
                    "rules": [
                      {
                        "left": "TransactionId",
                        "right": "TransactionId",
                        "comparisonType": "Equals",
                        "weight": 10,
                        "isCaseSensitive": false
                      },
                      {
                        "left": "InstrumentUid",
                        "right": "InstrumentUid",
                        "comparisonType": "Equals",
                        "weight": 5,
                        "isCaseSensitive": false
                      },
                      {
                        "left": "TransactionPrice",
                        "right": "TransactionPrice",
                        "comparisonType": "Equals",
                        "weight": 1,
                        "isCaseSensitive": false
                      },
                      {
                        "left": "TransactionCurrency",
                        "right": "TransactionCurrency",
                        "comparisonType": "Equals",
                        "weight": 1,
                        "isCaseSensitive": false
                      },
                      {
                        "left": "TransactionDate",
                        "right": "TransactionDate",
                        "comparisonType": "SameDate",
                        "weight": 1,
                        "isCaseSensitive": false
                      },
                      {
                        "left": "SettlementDate",
                        "right": "SettlementDate",
                        "comparisonType": "SameDate",
                        "weight": 1,
                        "isCaseSensitive": false
                      },
                      {
                        "left": "CounterpartyId",
                        "right": "CounterpartyId",
                        "comparisonType": "Equals",
                        "weight": 1,
                        "isCaseSensitive": false
                      },
                      {
                        "left": "ExchangeRate",
                        "right": "ExchangeRate",
                        "comparisonType": "WithinPercentage",
                        "comparisonValue": 0.5,
                        "weight": 1,
                        "isCaseSensitive": false
                      }
                    ]
                  },
                  "data": [
                    {
                      "left": {
                        "transactionId": "TXN-001",
                        "type": "BUY",
                        "instrumentIdentifiers": {
                          "Instrument/default/Figi": "BBG000B9XRY4"
                        },
                        "instrumentScope": "default",
                        "instrumentUid": "LUID_008XGQ1D",
                        "transactionDate": "2019-04-02T12:00:00.0000000+00:00",
                        "settlementDate": "2019-04-05T12:00:00.0000000+00:00",
                        "units": 100,
                        "transactionPrice": {
                          "price": 199.23,
                          "type": "Price"
                        },
                        "totalConsideration": {
                          "amount": 20000,
                          "currency": "USD"
                        },
                        "exchangeRate": 1.31,
                        "transactionCurrency": "USD",
                        "properties": {
                          "Instrument/default/Name": {
                            "key": "Instrument/default/Name",
                            "value": {
                              "labelValue": "APPLE INC"
                            }
                          },
                          "Transaction/common/Strategy": {
                            "key": "Transaction/common/Strategy",
                            "value": {
                              "labelValue": "Strategy 1"
                            }
                          }
                        },
                        "source": "",
                        "entryDateTime": "2019-04-02T16:30:15.0000000+00:00",
                        "transactionStatus": "Active"
                      },
                      "right": {
                        "transactionId": "TXN-001",
                        "type": "BUY",
                        "instrumentIdentifiers": {
                          "Instrument/default/Figi": "BBG000B9XRY4"
                        },
                        "instrumentScope": "default",
                        "instrumentUid": "LUID_008XGQ1D",
                        "transactionDate": "2019-04-02T12:00:00.0000000+00:00",
                        "settlementDate": "2019-04-05T12:00:00.0000000+00:00",
                        "units": 100,
                        "transactionPrice": {
                          "price": 199.23,
                          "type": "Price"
                        },
                        "totalConsideration": {
                          "amount": 20000,
                          "currency": "USD"
                        },
                        "exchangeRate": 1.31,
                        "transactionCurrency": "USD",
                        "properties": {
                          "Instrument/default/Name": {
                            "key": "Instrument/default/Name",
                            "value": {
                              "labelValue": "APPLE INC"
                            }
                          },
                          "Transaction/common/Strategy": {
                            "key": "Transaction/common/Strategy",
                            "value": {
                              "labelValue": "Strategy 1"
                            }
                          }
                        },
                        "source": "custodian file /var/data/xyz",
                        "entryDateTime": "2019-04-02T16:30:15.0000000+00:00",
                        "transactionStatus": "Active"
                      },
                      "percentageMatch": 100,
                      "mappingRuleSetResults": [
                        true,
                        true,
                        true,
                        true,
                        true,
                        true,
                        true,
                        true
                      ]
                    }
                  ]
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/TransactionsReconciliationsResponse"
                },
                "example": {
                  "mapping": {
                    "scope": "default",
                    "code": "TransactionReconciliationMapping",
                    "name": "Mapping Name",
                    "reconciliationType": "Transaction",
                    "rules": [
                      {
                        "left": "TransactionId",
                        "right": "TransactionId",
                        "comparisonType": "Equals",
                        "weight": 10,
                        "isCaseSensitive": false
                      },
                      {
                        "left": "InstrumentUid",
                        "right": "InstrumentUid",
                        "comparisonType": "Equals",
                        "weight": 5,
                        "isCaseSensitive": false
                      },
                      {
                        "left": "TransactionPrice",
                        "right": "TransactionPrice",
                        "comparisonType": "Equals",
                        "weight": 1,
                        "isCaseSensitive": false
                      },
                      {
                        "left": "TransactionCurrency",
                        "right": "TransactionCurrency",
                        "comparisonType": "Equals",
                        "weight": 1,
                        "isCaseSensitive": false
                      },
                      {
                        "left": "TransactionDate",
                        "right": "TransactionDate",
                        "comparisonType": "SameDate",
                        "weight": 1,
                        "isCaseSensitive": false
                      },
                      {
                        "left": "SettlementDate",
                        "right": "SettlementDate",
                        "comparisonType": "SameDate",
                        "weight": 1,
                        "isCaseSensitive": false
                      },
                      {
                        "left": "CounterpartyId",
                        "right": "CounterpartyId",
                        "comparisonType": "Equals",
                        "weight": 1,
                        "isCaseSensitive": false
                      },
                      {
                        "left": "ExchangeRate",
                        "right": "ExchangeRate",
                        "comparisonType": "WithinPercentage",
                        "comparisonValue": 0.5,
                        "weight": 1,
                        "isCaseSensitive": false
                      }
                    ]
                  },
                  "data": [
                    {
                      "left": {
                        "transactionId": "TXN-001",
                        "type": "BUY",
                        "instrumentIdentifiers": {
                          "Instrument/default/Figi": "BBG000B9XRY4"
                        },
                        "instrumentScope": "default",
                        "instrumentUid": "LUID_008XGQ1D",
                        "transactionDate": "2019-04-02T12:00:00.0000000+00:00",
                        "settlementDate": "2019-04-05T12:00:00.0000000+00:00",
                        "units": 100,
                        "transactionPrice": {
                          "price": 199.23,
                          "type": "Price"
                        },
                        "totalConsideration": {
                          "amount": 20000,
                          "currency": "USD"
                        },
                        "exchangeRate": 1.31,
                        "transactionCurrency": "USD",
                        "properties": {
                          "Instrument/default/Name": {
                            "key": "Instrument/default/Name",
                            "value": {
                              "labelValue": "APPLE INC"
                            }
                          },
                          "Transaction/common/Strategy": {
                            "key": "Transaction/common/Strategy",
                            "value": {
                              "labelValue": "Strategy 1"
                            }
                          }
                        },
                        "source": "",
                        "entryDateTime": "2019-04-02T16:30:15.0000000+00:00",
                        "transactionStatus": "Active"
                      },
                      "right": {
                        "transactionId": "TXN-001",
                        "type": "BUY",
                        "instrumentIdentifiers": {
                          "Instrument/default/Figi": "BBG000B9XRY4"
                        },
                        "instrumentScope": "default",
                        "instrumentUid": "LUID_008XGQ1D",
                        "transactionDate": "2019-04-02T12:00:00.0000000+00:00",
                        "settlementDate": "2019-04-05T12:00:00.0000000+00:00",
                        "units": 100,
                        "transactionPrice": {
                          "price": 199.23,
                          "type": "Price"
                        },
                        "totalConsideration": {
                          "amount": 20000,
                          "currency": "USD"
                        },
                        "exchangeRate": 1.31,
                        "transactionCurrency": "USD",
                        "properties": {
                          "Instrument/default/Name": {
                            "key": "Instrument/default/Name",
                            "value": {
                              "labelValue": "APPLE INC"
                            }
                          },
                          "Transaction/common/Strategy": {
                            "key": "Transaction/common/Strategy",
                            "value": {
                              "labelValue": "Strategy 1"
                            }
                          }
                        },
                        "source": "custodian file /var/data/xyz",
                        "entryDateTime": "2019-04-02T16:30:15.0000000+00:00",
                        "transactionStatus": "Active"
                      },
                      "percentageMatch": 100,
                      "mappingRuleSetResults": [
                        true,
                        true,
                        true,
                        true,
                        true,
                        true,
                        true,
                        true
                      ]
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      }
    },
    "/api/portfolios/$reconcileValuation": {
      "post": {
        "tags": [
          "Reconciliations"
        ],
        "summary": "ReconcileValuation: Reconcile valuations performed on one or two sets of holdings using one or two configuration recipes.",
        "description": "Perform valuation of one or two set of holdings using different one or two configuration recipes. Produce a breakdown of the resulting differences in valuation.",
        "operationId": "ReconcileValuation",
        "requestBody": {
          "description": "The specifications of the inputs to the reconciliation",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/ValuationsReconciliationRequest"
              },
              "example": {
                "left": {
                  "recipeId": {
                    "scope": "MySourceScope",
                    "code": "MySourcePortfolioCode"
                  },
                  "asAt": "2018-03-05T00:00:00.0000000+00:00",
                  "metrics": [
                    {
                      "key": "Instrument/default/Name",
                      "op": "Value",
                      "options": {}
                    },
                    {
                      "key": "Holding/default/PV",
                      "op": "Sum",
                      "options": {}
                    }
                  ],
                  "groupBy": [
                    "Instrument/default/Name"
                  ],
                  "sort": [],
                  "reportCurrency": "USD",
                  "equipWithSubtotals": false,
                  "returnResultAsExpandedTypes": false,
                  "portfolioEntityIds": [
                    {
                      "scope": "PortfolioScope1",
                      "code": "MyPortfolioAbC",
                      "portfolioEntityType": "SinglePortfolio"
                    },
                    {
                      "scope": "PortfolioScope2",
                      "code": "MyPortfolioDeF",
                      "portfolioEntityType": "SinglePortfolio"
                    }
                  ],
                  "valuationSchedule": {
                    "effectiveFrom": "2018-03-05T00:00:00.0000000+00:00",
                    "effectiveAt": "2018-03-05T00:00:00.0000000+00:00",
                    "tenor": "1D",
                    "rollConvention": "F",
                    "holidayCalendars": [],
                    "valuationDateTimes": []
                  }
                },
                "right": {
                  "recipeId": {
                    "scope": "MyTargetScope",
                    "code": "MyTargetPortfolioCode"
                  },
                  "asAt": "2018-03-05T00:00:00.0000000+00:00",
                  "metrics": [
                    {
                      "key": "Instrument/default/Name",
                      "op": "Value",
                      "options": {}
                    },
                    {
                      "key": "Holding/default/PV",
                      "op": "Sum",
                      "options": {}
                    }
                  ],
                  "groupBy": [
                    "Instrument/default/Name"
                  ],
                  "sort": [],
                  "reportCurrency": "USD",
                  "equipWithSubtotals": false,
                  "returnResultAsExpandedTypes": false,
                  "portfolioEntityIds": [
                    {
                      "scope": "PortfolioScope1",
                      "code": "MyPortfolioAbC",
                      "portfolioEntityType": "SinglePortfolio"
                    },
                    {
                      "scope": "PortfolioScope2",
                      "code": "MyPortfolioDeF",
                      "portfolioEntityType": "SinglePortfolio"
                    }
                  ],
                  "valuationSchedule": {
                    "effectiveFrom": "2018-03-05T00:00:00.0000000+00:00",
                    "effectiveAt": "2018-03-05T00:00:00.0000000+00:00",
                    "tenor": "1D",
                    "rollConvention": "F",
                    "holidayCalendars": [],
                    "valuationDateTimes": []
                  }
                },
                "leftToRightMapping": [],
                "preserveKeys": [
                  "Instrument/default/Name"
                ]
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ValuationsReconciliationRequest"
              },
              "example": {
                "left": {
                  "recipeId": {
                    "scope": "MySourceScope",
                    "code": "MySourcePortfolioCode"
                  },
                  "asAt": "2018-03-05T00:00:00.0000000+00:00",
                  "metrics": [
                    {
                      "key": "Instrument/default/Name",
                      "op": "Value",
                      "options": {}
                    },
                    {
                      "key": "Holding/default/PV",
                      "op": "Sum",
                      "options": {}
                    }
                  ],
                  "groupBy": [
                    "Instrument/default/Name"
                  ],
                  "sort": [],
                  "reportCurrency": "USD",
                  "equipWithSubtotals": false,
                  "returnResultAsExpandedTypes": false,
                  "portfolioEntityIds": [
                    {
                      "scope": "PortfolioScope1",
                      "code": "MyPortfolioAbC",
                      "portfolioEntityType": "SinglePortfolio"
                    },
                    {
                      "scope": "PortfolioScope2",
                      "code": "MyPortfolioDeF",
                      "portfolioEntityType": "SinglePortfolio"
                    }
                  ],
                  "valuationSchedule": {
                    "effectiveFrom": "2018-03-05T00:00:00.0000000+00:00",
                    "effectiveAt": "2018-03-05T00:00:00.0000000+00:00",
                    "tenor": "1D",
                    "rollConvention": "F",
                    "holidayCalendars": [],
                    "valuationDateTimes": []
                  }
                },
                "right": {
                  "recipeId": {
                    "scope": "MyTargetScope",
                    "code": "MyTargetPortfolioCode"
                  },
                  "asAt": "2018-03-05T00:00:00.0000000+00:00",
                  "metrics": [
                    {
                      "key": "Instrument/default/Name",
                      "op": "Value",
                      "options": {}
                    },
                    {
                      "key": "Holding/default/PV",
                      "op": "Sum",
                      "options": {}
                    }
                  ],
                  "groupBy": [
                    "Instrument/default/Name"
                  ],
                  "sort": [],
                  "reportCurrency": "USD",
                  "equipWithSubtotals": false,
                  "returnResultAsExpandedTypes": false,
                  "portfolioEntityIds": [
                    {
                      "scope": "PortfolioScope1",
                      "code": "MyPortfolioAbC",
                      "portfolioEntityType": "SinglePortfolio"
                    },
                    {
                      "scope": "PortfolioScope2",
                      "code": "MyPortfolioDeF",
                      "portfolioEntityType": "SinglePortfolio"
                    }
                  ],
                  "valuationSchedule": {
                    "effectiveFrom": "2018-03-05T00:00:00.0000000+00:00",
                    "effectiveAt": "2018-03-05T00:00:00.0000000+00:00",
                    "tenor": "1D",
                    "rollConvention": "F",
                    "holidayCalendars": [],
                    "valuationDateTimes": []
                  }
                },
                "leftToRightMapping": [],
                "preserveKeys": [
                  "Instrument/default/Name"
                ]
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ValuationsReconciliationRequest"
              },
              "example": {
                "left": {
                  "recipeId": {
                    "scope": "MySourceScope",
                    "code": "MySourcePortfolioCode"
                  },
                  "asAt": "2018-03-05T00:00:00.0000000+00:00",
                  "metrics": [
                    {
                      "key": "Instrument/default/Name",
                      "op": "Value",
                      "options": {}
                    },
                    {
                      "key": "Holding/default/PV",
                      "op": "Sum",
                      "options": {}
                    }
                  ],
                  "groupBy": [
                    "Instrument/default/Name"
                  ],
                  "sort": [],
                  "reportCurrency": "USD",
                  "equipWithSubtotals": false,
                  "returnResultAsExpandedTypes": false,
                  "portfolioEntityIds": [
                    {
                      "scope": "PortfolioScope1",
                      "code": "MyPortfolioAbC",
                      "portfolioEntityType": "SinglePortfolio"
                    },
                    {
                      "scope": "PortfolioScope2",
                      "code": "MyPortfolioDeF",
                      "portfolioEntityType": "SinglePortfolio"
                    }
                  ],
                  "valuationSchedule": {
                    "effectiveFrom": "2018-03-05T00:00:00.0000000+00:00",
                    "effectiveAt": "2018-03-05T00:00:00.0000000+00:00",
                    "tenor": "1D",
                    "rollConvention": "F",
                    "holidayCalendars": [],
                    "valuationDateTimes": []
                  }
                },
                "right": {
                  "recipeId": {
                    "scope": "MyTargetScope",
                    "code": "MyTargetPortfolioCode"
                  },
                  "asAt": "2018-03-05T00:00:00.0000000+00:00",
                  "metrics": [
                    {
                      "key": "Instrument/default/Name",
                      "op": "Value",
                      "options": {}
                    },
                    {
                      "key": "Holding/default/PV",
                      "op": "Sum",
                      "options": {}
                    }
                  ],
                  "groupBy": [
                    "Instrument/default/Name"
                  ],
                  "sort": [],
                  "reportCurrency": "USD",
                  "equipWithSubtotals": false,
                  "returnResultAsExpandedTypes": false,
                  "portfolioEntityIds": [
                    {
                      "scope": "PortfolioScope1",
                      "code": "MyPortfolioAbC",
                      "portfolioEntityType": "SinglePortfolio"
                    },
                    {
                      "scope": "PortfolioScope2",
                      "code": "MyPortfolioDeF",
                      "portfolioEntityType": "SinglePortfolio"
                    }
                  ],
                  "valuationSchedule": {
                    "effectiveFrom": "2018-03-05T00:00:00.0000000+00:00",
                    "effectiveAt": "2018-03-05T00:00:00.0000000+00:00",
                    "tenor": "1D",
                    "rollConvention": "F",
                    "holidayCalendars": [],
                    "valuationDateTimes": []
                  }
                },
                "leftToRightMapping": [],
                "preserveKeys": [
                  "Instrument/default/Name"
                ]
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ValuationsReconciliationRequest"
              },
              "example": {
                "left": {
                  "recipeId": {
                    "scope": "MySourceScope",
                    "code": "MySourcePortfolioCode"
                  },
                  "asAt": "2018-03-05T00:00:00.0000000+00:00",
                  "metrics": [
                    {
                      "key": "Instrument/default/Name",
                      "op": "Value",
                      "options": {}
                    },
                    {
                      "key": "Holding/default/PV",
                      "op": "Sum",
                      "options": {}
                    }
                  ],
                  "groupBy": [
                    "Instrument/default/Name"
                  ],
                  "sort": [],
                  "reportCurrency": "USD",
                  "equipWithSubtotals": false,
                  "returnResultAsExpandedTypes": false,
                  "portfolioEntityIds": [
                    {
                      "scope": "PortfolioScope1",
                      "code": "MyPortfolioAbC",
                      "portfolioEntityType": "SinglePortfolio"
                    },
                    {
                      "scope": "PortfolioScope2",
                      "code": "MyPortfolioDeF",
                      "portfolioEntityType": "SinglePortfolio"
                    }
                  ],
                  "valuationSchedule": {
                    "effectiveFrom": "2018-03-05T00:00:00.0000000+00:00",
                    "effectiveAt": "2018-03-05T00:00:00.0000000+00:00",
                    "tenor": "1D",
                    "rollConvention": "F",
                    "holidayCalendars": [],
                    "valuationDateTimes": []
                  }
                },
                "right": {
                  "recipeId": {
                    "scope": "MyTargetScope",
                    "code": "MyTargetPortfolioCode"
                  },
                  "asAt": "2018-03-05T00:00:00.0000000+00:00",
                  "metrics": [
                    {
                      "key": "Instrument/default/Name",
                      "op": "Value",
                      "options": {}
                    },
                    {
                      "key": "Holding/default/PV",
                      "op": "Sum",
                      "options": {}
                    }
                  ],
                  "groupBy": [
                    "Instrument/default/Name"
                  ],
                  "sort": [],
                  "reportCurrency": "USD",
                  "equipWithSubtotals": false,
                  "returnResultAsExpandedTypes": false,
                  "portfolioEntityIds": [
                    {
                      "scope": "PortfolioScope1",
                      "code": "MyPortfolioAbC",
                      "portfolioEntityType": "SinglePortfolio"
                    },
                    {
                      "scope": "PortfolioScope2",
                      "code": "MyPortfolioDeF",
                      "portfolioEntityType": "SinglePortfolio"
                    }
                  ],
                  "valuationSchedule": {
                    "effectiveFrom": "2018-03-05T00:00:00.0000000+00:00",
                    "effectiveAt": "2018-03-05T00:00:00.0000000+00:00",
                    "tenor": "1D",
                    "rollConvention": "F",
                    "holidayCalendars": [],
                    "valuationDateTimes": []
                  }
                },
                "leftToRightMapping": [],
                "preserveKeys": [
                  "Instrument/default/Name"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The requested reconciliation",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ListAggregationReconciliation"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListAggregationReconciliation"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListAggregationReconciliation"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Stable"
      }
    },
    "/api/portfolios/mapping": {
      "post": {
        "tags": [
          "Reconciliations"
        ],
        "summary": "[EARLY ACCESS] UpsertReconciliationMapping: Create or update a mapping",
        "description": "If no mapping exists with the specified scope and code will create a new one.\r\nElse will update the existing mapping",
        "operationId": "UpsertReconciliationMapping",
        "requestBody": {
          "description": "The mapping to be created / updated.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/Mapping"
              },
              "example": {
                "scope": "default",
                "code": "TransactionReconciliationMapping",
                "name": "Mapping Name",
                "reconciliationType": "Transaction",
                "rules": [
                  {
                    "left": "TransactionId",
                    "right": "TransactionId",
                    "comparisonType": "Equals",
                    "weight": 10,
                    "isCaseSensitive": false
                  },
                  {
                    "left": "InstrumentUid",
                    "right": "InstrumentUid",
                    "comparisonType": "Equals",
                    "weight": 5,
                    "isCaseSensitive": false
                  },
                  {
                    "left": "TransactionPrice",
                    "right": "TransactionPrice",
                    "comparisonType": "Equals",
                    "weight": 1,
                    "isCaseSensitive": false
                  },
                  {
                    "left": "TransactionCurrency",
                    "right": "TransactionCurrency",
                    "comparisonType": "Equals",
                    "weight": 1,
                    "isCaseSensitive": false
                  },
                  {
                    "left": "TransactionDate",
                    "right": "TransactionDate",
                    "comparisonType": "SameDate",
                    "weight": 1,
                    "isCaseSensitive": false
                  },
                  {
                    "left": "SettlementDate",
                    "right": "SettlementDate",
                    "comparisonType": "SameDate",
                    "weight": 1,
                    "isCaseSensitive": false
                  },
                  {
                    "left": "CounterpartyId",
                    "right": "CounterpartyId",
                    "comparisonType": "Equals",
                    "weight": 1,
                    "isCaseSensitive": false
                  },
                  {
                    "left": "ExchangeRate",
                    "right": "ExchangeRate",
                    "comparisonType": "WithinPercentage",
                    "comparisonValue": 0.5,
                    "weight": 1,
                    "isCaseSensitive": false
                  },
                  {
                    "left": "Type",
                    "right": "Type",
                    "comparisonType": "MappedString",
                    "weight": 1,
                    "mappedStrings": [
                      {
                        "leftValue": "Buy",
                        "rightValue": "Purchase",
                        "mappingDirection": "BothWays",
                        "isCaseSensitive": false
                      }
                    ],
                    "isCaseSensitive": false
                  }
                ]
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Mapping"
              },
              "example": {
                "scope": "default",
                "code": "TransactionReconciliationMapping",
                "name": "Mapping Name",
                "reconciliationType": "Transaction",
                "rules": [
                  {
                    "left": "TransactionId",
                    "right": "TransactionId",
                    "comparisonType": "Equals",
                    "weight": 10,
                    "isCaseSensitive": false
                  },
                  {
                    "left": "InstrumentUid",
                    "right": "InstrumentUid",
                    "comparisonType": "Equals",
                    "weight": 5,
                    "isCaseSensitive": false
                  },
                  {
                    "left": "TransactionPrice",
                    "right": "TransactionPrice",
                    "comparisonType": "Equals",
                    "weight": 1,
                    "isCaseSensitive": false
                  },
                  {
                    "left": "TransactionCurrency",
                    "right": "TransactionCurrency",
                    "comparisonType": "Equals",
                    "weight": 1,
                    "isCaseSensitive": false
                  },
                  {
                    "left": "TransactionDate",
                    "right": "TransactionDate",
                    "comparisonType": "SameDate",
                    "weight": 1,
                    "isCaseSensitive": false
                  },
                  {
                    "left": "SettlementDate",
                    "right": "SettlementDate",
                    "comparisonType": "SameDate",
                    "weight": 1,
                    "isCaseSensitive": false
                  },
                  {
                    "left": "CounterpartyId",
                    "right": "CounterpartyId",
                    "comparisonType": "Equals",
                    "weight": 1,
                    "isCaseSensitive": false
                  },
                  {
                    "left": "ExchangeRate",
                    "right": "ExchangeRate",
                    "comparisonType": "WithinPercentage",
                    "comparisonValue": 0.5,
                    "weight": 1,
                    "isCaseSensitive": false
                  },
                  {
                    "left": "Type",
                    "right": "Type",
                    "comparisonType": "MappedString",
                    "weight": 1,
                    "mappedStrings": [
                      {
                        "leftValue": "Buy",
                        "rightValue": "Purchase",
                        "mappingDirection": "BothWays",
                        "isCaseSensitive": false
                      }
                    ],
                    "isCaseSensitive": false
                  }
                ]
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Mapping"
              },
              "example": {
                "scope": "default",
                "code": "TransactionReconciliationMapping",
                "name": "Mapping Name",
                "reconciliationType": "Transaction",
                "rules": [
                  {
                    "left": "TransactionId",
                    "right": "TransactionId",
                    "comparisonType": "Equals",
                    "weight": 10,
                    "isCaseSensitive": false
                  },
                  {
                    "left": "InstrumentUid",
                    "right": "InstrumentUid",
                    "comparisonType": "Equals",
                    "weight": 5,
                    "isCaseSensitive": false
                  },
                  {
                    "left": "TransactionPrice",
                    "right": "TransactionPrice",
                    "comparisonType": "Equals",
                    "weight": 1,
                    "isCaseSensitive": false
                  },
                  {
                    "left": "TransactionCurrency",
                    "right": "TransactionCurrency",
                    "comparisonType": "Equals",
                    "weight": 1,
                    "isCaseSensitive": false
                  },
                  {
                    "left": "TransactionDate",
                    "right": "TransactionDate",
                    "comparisonType": "SameDate",
                    "weight": 1,
                    "isCaseSensitive": false
                  },
                  {
                    "left": "SettlementDate",
                    "right": "SettlementDate",
                    "comparisonType": "SameDate",
                    "weight": 1,
                    "isCaseSensitive": false
                  },
                  {
                    "left": "CounterpartyId",
                    "right": "CounterpartyId",
                    "comparisonType": "Equals",
                    "weight": 1,
                    "isCaseSensitive": false
                  },
                  {
                    "left": "ExchangeRate",
                    "right": "ExchangeRate",
                    "comparisonType": "WithinPercentage",
                    "comparisonValue": 0.5,
                    "weight": 1,
                    "isCaseSensitive": false
                  },
                  {
                    "left": "Type",
                    "right": "Type",
                    "comparisonType": "MappedString",
                    "weight": 1,
                    "mappedStrings": [
                      {
                        "leftValue": "Buy",
                        "rightValue": "Purchase",
                        "mappingDirection": "BothWays",
                        "isCaseSensitive": false
                      }
                    ],
                    "isCaseSensitive": false
                  }
                ]
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Mapping"
              },
              "example": {
                "scope": "default",
                "code": "TransactionReconciliationMapping",
                "name": "Mapping Name",
                "reconciliationType": "Transaction",
                "rules": [
                  {
                    "left": "TransactionId",
                    "right": "TransactionId",
                    "comparisonType": "Equals",
                    "weight": 10,
                    "isCaseSensitive": false
                  },
                  {
                    "left": "InstrumentUid",
                    "right": "InstrumentUid",
                    "comparisonType": "Equals",
                    "weight": 5,
                    "isCaseSensitive": false
                  },
                  {
                    "left": "TransactionPrice",
                    "right": "TransactionPrice",
                    "comparisonType": "Equals",
                    "weight": 1,
                    "isCaseSensitive": false
                  },
                  {
                    "left": "TransactionCurrency",
                    "right": "TransactionCurrency",
                    "comparisonType": "Equals",
                    "weight": 1,
                    "isCaseSensitive": false
                  },
                  {
                    "left": "TransactionDate",
                    "right": "TransactionDate",
                    "comparisonType": "SameDate",
                    "weight": 1,
                    "isCaseSensitive": false
                  },
                  {
                    "left": "SettlementDate",
                    "right": "SettlementDate",
                    "comparisonType": "SameDate",
                    "weight": 1,
                    "isCaseSensitive": false
                  },
                  {
                    "left": "CounterpartyId",
                    "right": "CounterpartyId",
                    "comparisonType": "Equals",
                    "weight": 1,
                    "isCaseSensitive": false
                  },
                  {
                    "left": "ExchangeRate",
                    "right": "ExchangeRate",
                    "comparisonType": "WithinPercentage",
                    "comparisonValue": 0.5,
                    "weight": 1,
                    "isCaseSensitive": false
                  },
                  {
                    "left": "Type",
                    "right": "Type",
                    "comparisonType": "MappedString",
                    "weight": 1,
                    "mappedStrings": [
                      {
                        "leftValue": "Buy",
                        "rightValue": "Purchase",
                        "mappingDirection": "BothWays",
                        "isCaseSensitive": false
                      }
                    ],
                    "isCaseSensitive": false
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The created / updated mapping.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Mapping"
                },
                "example": {
                  "scope": "default",
                  "code": "TransactionReconciliationMapping",
                  "name": "Mapping Name",
                  "reconciliationType": "Transaction",
                  "rules": [
                    {
                      "left": "TransactionId",
                      "right": "TransactionId",
                      "comparisonType": "Equals",
                      "weight": 10,
                      "isCaseSensitive": false
                    },
                    {
                      "left": "InstrumentUid",
                      "right": "InstrumentUid",
                      "comparisonType": "Equals",
                      "weight": 5,
                      "isCaseSensitive": false
                    },
                    {
                      "left": "TransactionPrice",
                      "right": "TransactionPrice",
                      "comparisonType": "Equals",
                      "weight": 1,
                      "isCaseSensitive": false
                    },
                    {
                      "left": "TransactionCurrency",
                      "right": "TransactionCurrency",
                      "comparisonType": "Equals",
                      "weight": 1,
                      "isCaseSensitive": false
                    },
                    {
                      "left": "TransactionDate",
                      "right": "TransactionDate",
                      "comparisonType": "SameDate",
                      "weight": 1,
                      "isCaseSensitive": false
                    },
                    {
                      "left": "SettlementDate",
                      "right": "SettlementDate",
                      "comparisonType": "SameDate",
                      "weight": 1,
                      "isCaseSensitive": false
                    },
                    {
                      "left": "CounterpartyId",
                      "right": "CounterpartyId",
                      "comparisonType": "Equals",
                      "weight": 1,
                      "isCaseSensitive": false
                    },
                    {
                      "left": "ExchangeRate",
                      "right": "ExchangeRate",
                      "comparisonType": "WithinPercentage",
                      "comparisonValue": 0.5,
                      "weight": 1,
                      "isCaseSensitive": false
                    },
                    {
                      "left": "Type",
                      "right": "Type",
                      "comparisonType": "MappedString",
                      "weight": 1,
                      "mappedStrings": [
                        {
                          "leftValue": "Buy",
                          "rightValue": "Purchase",
                          "mappingDirection": "BothWays",
                          "isCaseSensitive": false
                        }
                      ],
                      "isCaseSensitive": false
                    }
                  ]
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Mapping"
                },
                "example": {
                  "scope": "default",
                  "code": "TransactionReconciliationMapping",
                  "name": "Mapping Name",
                  "reconciliationType": "Transaction",
                  "rules": [
                    {
                      "left": "TransactionId",
                      "right": "TransactionId",
                      "comparisonType": "Equals",
                      "weight": 10,
                      "isCaseSensitive": false
                    },
                    {
                      "left": "InstrumentUid",
                      "right": "InstrumentUid",
                      "comparisonType": "Equals",
                      "weight": 5,
                      "isCaseSensitive": false
                    },
                    {
                      "left": "TransactionPrice",
                      "right": "TransactionPrice",
                      "comparisonType": "Equals",
                      "weight": 1,
                      "isCaseSensitive": false
                    },
                    {
                      "left": "TransactionCurrency",
                      "right": "TransactionCurrency",
                      "comparisonType": "Equals",
                      "weight": 1,
                      "isCaseSensitive": false
                    },
                    {
                      "left": "TransactionDate",
                      "right": "TransactionDate",
                      "comparisonType": "SameDate",
                      "weight": 1,
                      "isCaseSensitive": false
                    },
                    {
                      "left": "SettlementDate",
                      "right": "SettlementDate",
                      "comparisonType": "SameDate",
                      "weight": 1,
                      "isCaseSensitive": false
                    },
                    {
                      "left": "CounterpartyId",
                      "right": "CounterpartyId",
                      "comparisonType": "Equals",
                      "weight": 1,
                      "isCaseSensitive": false
                    },
                    {
                      "left": "ExchangeRate",
                      "right": "ExchangeRate",
                      "comparisonType": "WithinPercentage",
                      "comparisonValue": 0.5,
                      "weight": 1,
                      "isCaseSensitive": false
                    },
                    {
                      "left": "Type",
                      "right": "Type",
                      "comparisonType": "MappedString",
                      "weight": 1,
                      "mappedStrings": [
                        {
                          "leftValue": "Buy",
                          "rightValue": "Purchase",
                          "mappingDirection": "BothWays",
                          "isCaseSensitive": false
                        }
                      ],
                      "isCaseSensitive": false
                    }
                  ]
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Mapping"
                },
                "example": {
                  "scope": "default",
                  "code": "TransactionReconciliationMapping",
                  "name": "Mapping Name",
                  "reconciliationType": "Transaction",
                  "rules": [
                    {
                      "left": "TransactionId",
                      "right": "TransactionId",
                      "comparisonType": "Equals",
                      "weight": 10,
                      "isCaseSensitive": false
                    },
                    {
                      "left": "InstrumentUid",
                      "right": "InstrumentUid",
                      "comparisonType": "Equals",
                      "weight": 5,
                      "isCaseSensitive": false
                    },
                    {
                      "left": "TransactionPrice",
                      "right": "TransactionPrice",
                      "comparisonType": "Equals",
                      "weight": 1,
                      "isCaseSensitive": false
                    },
                    {
                      "left": "TransactionCurrency",
                      "right": "TransactionCurrency",
                      "comparisonType": "Equals",
                      "weight": 1,
                      "isCaseSensitive": false
                    },
                    {
                      "left": "TransactionDate",
                      "right": "TransactionDate",
                      "comparisonType": "SameDate",
                      "weight": 1,
                      "isCaseSensitive": false
                    },
                    {
                      "left": "SettlementDate",
                      "right": "SettlementDate",
                      "comparisonType": "SameDate",
                      "weight": 1,
                      "isCaseSensitive": false
                    },
                    {
                      "left": "CounterpartyId",
                      "right": "CounterpartyId",
                      "comparisonType": "Equals",
                      "weight": 1,
                      "isCaseSensitive": false
                    },
                    {
                      "left": "ExchangeRate",
                      "right": "ExchangeRate",
                      "comparisonType": "WithinPercentage",
                      "comparisonValue": 0.5,
                      "weight": 1,
                      "isCaseSensitive": false
                    },
                    {
                      "left": "Type",
                      "right": "Type",
                      "comparisonType": "MappedString",
                      "weight": 1,
                      "mappedStrings": [
                        {
                          "leftValue": "Buy",
                          "rightValue": "Purchase",
                          "mappingDirection": "BothWays",
                          "isCaseSensitive": false
                        }
                      ],
                      "isCaseSensitive": false
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      },
      "get": {
        "tags": [
          "Reconciliations"
        ],
        "summary": "[EARLY ACCESS] ListReconciliationMappings: List the reconciliation mappings",
        "description": "Lists all mappings this user is entitled to see",
        "operationId": "ListReconciliationMappings",
        "parameters": [
          {
            "name": "reconciliationType",
            "in": "query",
            "description": "Optional parameter to specify which type of mappings should be returned.\r\nDefaults to Transaction if not provided.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The mappings that the caller has access to.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfMapping"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfMapping"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfMapping"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      }
    },
    "/api/portfolios/mapping/{scope}/{code}": {
      "get": {
        "tags": [
          "Reconciliations"
        ],
        "summary": "[EARLY ACCESS] GetReconciliationMapping: Get a mapping",
        "description": "Gets a mapping identified by the given scope and code",
        "operationId": "GetReconciliationMapping",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the mapping.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string"
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The code of the mapping.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The mapping with the specified scope/code.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Mapping"
                },
                "example": {
                  "scope": "default",
                  "code": "TransactionReconciliationMapping",
                  "name": "Mapping Name",
                  "reconciliationType": "Transaction",
                  "rules": [
                    {
                      "left": "TransactionId",
                      "right": "TransactionId",
                      "comparisonType": "Equals",
                      "weight": 10,
                      "isCaseSensitive": false
                    },
                    {
                      "left": "InstrumentUid",
                      "right": "InstrumentUid",
                      "comparisonType": "Equals",
                      "weight": 5,
                      "isCaseSensitive": false
                    },
                    {
                      "left": "TransactionPrice",
                      "right": "TransactionPrice",
                      "comparisonType": "Equals",
                      "weight": 1,
                      "isCaseSensitive": false
                    },
                    {
                      "left": "TransactionCurrency",
                      "right": "TransactionCurrency",
                      "comparisonType": "Equals",
                      "weight": 1,
                      "isCaseSensitive": false
                    },
                    {
                      "left": "TransactionDate",
                      "right": "TransactionDate",
                      "comparisonType": "SameDate",
                      "weight": 1,
                      "isCaseSensitive": false
                    },
                    {
                      "left": "SettlementDate",
                      "right": "SettlementDate",
                      "comparisonType": "SameDate",
                      "weight": 1,
                      "isCaseSensitive": false
                    },
                    {
                      "left": "CounterpartyId",
                      "right": "CounterpartyId",
                      "comparisonType": "Equals",
                      "weight": 1,
                      "isCaseSensitive": false
                    },
                    {
                      "left": "ExchangeRate",
                      "right": "ExchangeRate",
                      "comparisonType": "WithinPercentage",
                      "comparisonValue": 0.5,
                      "weight": 1,
                      "isCaseSensitive": false
                    },
                    {
                      "left": "Type",
                      "right": "Type",
                      "comparisonType": "MappedString",
                      "weight": 1,
                      "mappedStrings": [
                        {
                          "leftValue": "Buy",
                          "rightValue": "Purchase",
                          "mappingDirection": "BothWays",
                          "isCaseSensitive": false
                        }
                      ],
                      "isCaseSensitive": false
                    }
                  ]
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Mapping"
                },
                "example": {
                  "scope": "default",
                  "code": "TransactionReconciliationMapping",
                  "name": "Mapping Name",
                  "reconciliationType": "Transaction",
                  "rules": [
                    {
                      "left": "TransactionId",
                      "right": "TransactionId",
                      "comparisonType": "Equals",
                      "weight": 10,
                      "isCaseSensitive": false
                    },
                    {
                      "left": "InstrumentUid",
                      "right": "InstrumentUid",
                      "comparisonType": "Equals",
                      "weight": 5,
                      "isCaseSensitive": false
                    },
                    {
                      "left": "TransactionPrice",
                      "right": "TransactionPrice",
                      "comparisonType": "Equals",
                      "weight": 1,
                      "isCaseSensitive": false
                    },
                    {
                      "left": "TransactionCurrency",
                      "right": "TransactionCurrency",
                      "comparisonType": "Equals",
                      "weight": 1,
                      "isCaseSensitive": false
                    },
                    {
                      "left": "TransactionDate",
                      "right": "TransactionDate",
                      "comparisonType": "SameDate",
                      "weight": 1,
                      "isCaseSensitive": false
                    },
                    {
                      "left": "SettlementDate",
                      "right": "SettlementDate",
                      "comparisonType": "SameDate",
                      "weight": 1,
                      "isCaseSensitive": false
                    },
                    {
                      "left": "CounterpartyId",
                      "right": "CounterpartyId",
                      "comparisonType": "Equals",
                      "weight": 1,
                      "isCaseSensitive": false
                    },
                    {
                      "left": "ExchangeRate",
                      "right": "ExchangeRate",
                      "comparisonType": "WithinPercentage",
                      "comparisonValue": 0.5,
                      "weight": 1,
                      "isCaseSensitive": false
                    },
                    {
                      "left": "Type",
                      "right": "Type",
                      "comparisonType": "MappedString",
                      "weight": 1,
                      "mappedStrings": [
                        {
                          "leftValue": "Buy",
                          "rightValue": "Purchase",
                          "mappingDirection": "BothWays",
                          "isCaseSensitive": false
                        }
                      ],
                      "isCaseSensitive": false
                    }
                  ]
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Mapping"
                },
                "example": {
                  "scope": "default",
                  "code": "TransactionReconciliationMapping",
                  "name": "Mapping Name",
                  "reconciliationType": "Transaction",
                  "rules": [
                    {
                      "left": "TransactionId",
                      "right": "TransactionId",
                      "comparisonType": "Equals",
                      "weight": 10,
                      "isCaseSensitive": false
                    },
                    {
                      "left": "InstrumentUid",
                      "right": "InstrumentUid",
                      "comparisonType": "Equals",
                      "weight": 5,
                      "isCaseSensitive": false
                    },
                    {
                      "left": "TransactionPrice",
                      "right": "TransactionPrice",
                      "comparisonType": "Equals",
                      "weight": 1,
                      "isCaseSensitive": false
                    },
                    {
                      "left": "TransactionCurrency",
                      "right": "TransactionCurrency",
                      "comparisonType": "Equals",
                      "weight": 1,
                      "isCaseSensitive": false
                    },
                    {
                      "left": "TransactionDate",
                      "right": "TransactionDate",
                      "comparisonType": "SameDate",
                      "weight": 1,
                      "isCaseSensitive": false
                    },
                    {
                      "left": "SettlementDate",
                      "right": "SettlementDate",
                      "comparisonType": "SameDate",
                      "weight": 1,
                      "isCaseSensitive": false
                    },
                    {
                      "left": "CounterpartyId",
                      "right": "CounterpartyId",
                      "comparisonType": "Equals",
                      "weight": 1,
                      "isCaseSensitive": false
                    },
                    {
                      "left": "ExchangeRate",
                      "right": "ExchangeRate",
                      "comparisonType": "WithinPercentage",
                      "comparisonValue": 0.5,
                      "weight": 1,
                      "isCaseSensitive": false
                    },
                    {
                      "left": "Type",
                      "right": "Type",
                      "comparisonType": "MappedString",
                      "weight": 1,
                      "mappedStrings": [
                        {
                          "leftValue": "Buy",
                          "rightValue": "Purchase",
                          "mappingDirection": "BothWays",
                          "isCaseSensitive": false
                        }
                      ],
                      "isCaseSensitive": false
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      },
      "delete": {
        "tags": [
          "Reconciliations"
        ],
        "summary": "[EARLY ACCESS] DeleteReconciliationMapping: Delete a mapping",
        "description": "Deletes the mapping identified by the scope and code",
        "operationId": "DeleteReconciliationMapping",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the mapping.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string"
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The code fof the mapping.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A string specifying the scope and code that were deleted",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      }
    },
    "/api/portfolios/{scope}": {
      "get": {
        "tags": [
          "Portfolios"
        ],
        "summary": "ListPortfoliosForScope: List portfolios for scope",
        "description": "List all the portfolios in a particular scope.",
        "operationId": "ListPortfoliosForScope",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope whose portfolios to list.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string"
            }
          },
          {
            "name": "effectiveAt",
            "in": "query",
            "description": "The effective datetime or cut label at which to list the portfolios. Defaults to the current LUSID\r\n            system datetime if not specified.",
            "schema": {
              "type": "string",
              "format": "dateorcutlabel"
            }
          },
          {
            "name": "asAt",
            "in": "query",
            "description": "The asAt datetime at which to list the portfolios. Defaults to returning the latest version\r\n            of each portfolio if not specified.",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "x-nullable": true
          },
          {
            "name": "page",
            "in": "query",
            "description": "The pagination token to use to continue listing portfolios. This\r\nvalue is returned from the previous call. If a pagination token is provided, the filter, effectiveAt\r\nand asAt fields must not have changed since the original request. Also, if set, a start value cannot be provided.",
            "schema": {
              "maxLength": 500,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\+/]*={0,3}$",
              "type": "string"
            }
          },
          {
            "name": "start",
            "in": "query",
            "description": "When paginating, skip this number of results.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-nullable": true
          },
          {
            "name": "limit",
            "in": "query",
            "description": "When paginating, limit the results to this number. Defaults to 100 if not specified.",
            "schema": {
              "maximum": 5000,
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            },
            "x-nullable": true
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Expression to filter the results.\r\n            For example, to return only transactions with a transaction type of 'Buy', specify \"type eq 'Buy'\".\r\n            For more information about filtering results, see https://support.lusid.com/knowledgebase/article/KA-01914.",
            "schema": {
              "maxLength": 16384,
              "minLength": 0,
              "pattern": "^[\\s\\S]*$",
              "type": "string"
            }
          },
          {
            "name": "propertyKeys",
            "in": "query",
            "description": "A list of property keys from the 'Portfolio' domain to decorate onto each portfolio,\r\n            or from any domain that supports relationships to decorate onto related entities. These must take the\r\n            format {domain}/{scope}/{code}, for example 'Portfolio/Manager/Id'.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "description": "The key that uniquely identifies the property. It has the format {domain}/{scope}/{code}."
              }
            },
            "x-nullable": true
          },
          {
            "name": "relationshipDefinitionIds",
            "in": "query",
            "description": "A list of relationship definitions that are used to decorate related entities\r\n            onto the portfolios in the response. These must take the form {relationshipDefinitionScope}/{relationshipDefinitionCode}.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "description": "Identifiers of an entity"
              }
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "description": "The portfolios in the specified scope",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfPortfolio"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfPortfolio"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfPortfolio"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Stable"
      }
    },
    "/api/portfolios/{scope}/{code}": {
      "get": {
        "tags": [
          "Portfolios"
        ],
        "summary": "GetPortfolio: Get portfolio",
        "description": "Retrieve the definition of a particular portfolio.",
        "operationId": "GetPortfolio",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the portfolio.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string"
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The code of the portfolio. Together with the scope this uniquely identifies the portfolio.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string"
            }
          },
          {
            "name": "effectiveAt",
            "in": "query",
            "description": "The effective datetime or cut label at which to retrieve the portfolio definition. Defaults to the current LUSID system datetime if not specified.",
            "schema": {
              "type": "string",
              "format": "dateorcutlabel"
            }
          },
          {
            "name": "asAt",
            "in": "query",
            "description": "The asAt datetime at which to retrieve the portfolio definition. Defaults to returning the latest version of the portfolio definition if not specified.",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "x-nullable": true
          },
          {
            "name": "propertyKeys",
            "in": "query",
            "description": "A list of property keys from the 'Portfolio' domain to decorate onto the portfolio,\r\n            or from any domain that supports relationships to decorate onto related entities. These must take the format\r\n            {domain}/{scope}/{code}, for example 'Portfolio/Manager/Id'.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "description": "The key that uniquely identifies the property. It has the format {domain}/{scope}/{code}."
              }
            },
            "x-nullable": true
          },
          {
            "name": "relationshipDefinitionIds",
            "in": "query",
            "description": "A list of relationship definitions that are used to decorate related entities\r\n            onto the portfolio in the response. These must take the form {relationshipDefinitionScope}/{relationshipDefinitionCode}.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "description": "Identifiers of an entity"
              }
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "description": "The requested portfolio definition",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Portfolio"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Portfolio"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Portfolio"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Stable"
      },
      "delete": {
        "tags": [
          "Portfolios"
        ],
        "summary": "DeletePortfolio: Delete portfolio",
        "description": "Delete a particular portfolio.\r\n            \r\nThe deletion will take effect from the portfolio's creation datetime. This means that the portfolio will no longer exist at any effective datetime, as per the asAt datetime of deletion.",
        "operationId": "DeletePortfolio",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the portfolio.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string"
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The code of the portfolio. Together with the scope this uniquely identifies the portfolio.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The datetime that the portfolio was deleted",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedEntityResponse"
                },
                "example": {
                  "asAt": "2018-03-05T10:10:10.0000000+00:00"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedEntityResponse"
                },
                "example": {
                  "asAt": "2018-03-05T10:10:10.0000000+00:00"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedEntityResponse"
                },
                "example": {
                  "asAt": "2018-03-05T10:10:10.0000000+00:00"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Stable"
      },
      "put": {
        "tags": [
          "Portfolios"
        ],
        "summary": "UpdatePortfolio: Update portfolio",
        "description": "Update the definition of a particular portfolio.\r\n            \r\nNote that not all elements of a portfolio definition are\r\nmodifiable due to the potential implications for data already stored.",
        "operationId": "UpdatePortfolio",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the portfolio.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string"
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The code of the portfolio. Together with the scope this uniquely identifies the portfolio.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string"
            }
          },
          {
            "name": "effectiveAt",
            "in": "query",
            "description": "The effective datetime or cut label at which to update the definition. Defaults to the current\r\n             LUSID system datetime if not specified.",
            "schema": {
              "type": "string",
              "format": "dateorcutlabel"
            }
          }
        ],
        "requestBody": {
          "description": "The updated portfolio definition.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/UpdatePortfolioRequest"
              },
              "example": {
                "displayName": "MyPortfolioName",
                "description": "Long form description of portfolio"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdatePortfolioRequest"
              },
              "example": {
                "displayName": "MyPortfolioName",
                "description": "Long form description of portfolio"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdatePortfolioRequest"
              },
              "example": {
                "displayName": "MyPortfolioName",
                "description": "Long form description of portfolio"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/UpdatePortfolioRequest"
              },
              "example": {
                "displayName": "MyPortfolioName",
                "description": "Long form description of portfolio"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The updated definition of the portfolio",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Portfolio"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Portfolio"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Portfolio"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Stable"
      },
      "patch": {
        "tags": [
          "Portfolios"
        ],
        "summary": "[EARLY ACCESS] PatchPortfolio: Patch portfolio.",
        "description": "Create or update certain fields for a particular  portfolio.\r\nThe behaviour is defined by the JSON Patch specification.\r\n            \r\nCurrently supported are: CreationDate, InstrumentScopes.",
        "operationId": "PatchPortfolio",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the portfolio.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string"
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The code of the portfolio. Together with the\r\n             scope this uniquely identifies the portfolio.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The json patch document. For more check: https://datatracker.ietf.org/doc/html/rfc6902.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Operation"
                }
              },
              "example": [
                {
                  "value": "2020-01-01",
                  "path": "/creationDate",
                  "op": "add"
                }
              ]
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Operation"
                }
              },
              "example": [
                {
                  "value": "2020-01-01",
                  "path": "/creationDate",
                  "op": "add"
                }
              ]
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Operation"
                }
              },
              "example": [
                {
                  "value": "2020-01-01",
                  "path": "/creationDate",
                  "op": "add"
                }
              ]
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Operation"
                }
              },
              "example": [
                {
                  "value": "2020-01-01",
                  "path": "/creationDate",
                  "op": "add"
                }
              ]
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The newly patched portfolio",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ActionResultOfPortfolio"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActionResultOfPortfolio"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActionResultOfPortfolio"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      }
    },
    "/api/portfolios/{scope}/{code}/commands": {
      "get": {
        "tags": [
          "Portfolios"
        ],
        "summary": "GetPortfolioCommands: Get portfolio commands",
        "description": "Get all the commands that modified a particular portfolio, including any input transactions.",
        "operationId": "GetPortfolioCommands",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the portfolio.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string"
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The code of the portfolio. Together with the scope this uniquely identifies the portfolio.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string"
            }
          },
          {
            "name": "fromAsAt",
            "in": "query",
            "description": "The lower bound asAt datetime (inclusive) from which to retrieve commands. There is no lower bound if this is not specified.",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "x-nullable": true
          },
          {
            "name": "toAsAt",
            "in": "query",
            "description": "The upper bound asAt datetime (inclusive) from which to retrieve commands. There is no upper bound if this is not specified.",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "x-nullable": true
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Expression to filter the results.\r\n            For example, to filter on the User ID, specify \"userId.id eq 'string'\".\r\n            For more information about filtering, see https://support.lusid.com/knowledgebase/article/KA-01914.",
            "schema": {
              "maxLength": 16384,
              "minLength": 0,
              "pattern": "^[\\s\\S]*$",
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "The pagination token to use to continue listing commands; this value is returned from the previous call.",
            "schema": {
              "maxLength": 500,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\+/]*={0,3}$",
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "When paginating, limit the results to this number. Defaults to 500 if not specified.",
            "schema": {
              "maximum": 5000,
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "description": "The commands that modified the specified portfolio.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfProcessedCommand"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfProcessedCommand"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfProcessedCommand"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Stable"
      }
    },
    "/api/portfolios/{scope}/{code}/metadata": {
      "get": {
        "tags": [
          "Portfolios"
        ],
        "summary": "[EARLY ACCESS] GetPortfolioMetadata: Get access metadata rules for a portfolio",
        "description": "Pass the scope and portfolio code parameters to retrieve the AccessMetadata associated with a portfolio",
        "operationId": "GetPortfolioMetadata",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the Portfolio Access Metadata Rule to retrieve.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string"
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "Portfolio code",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string"
            }
          },
          {
            "name": "effectiveAt",
            "in": "query",
            "description": "The effectiveAt datetime at which to retrieve the access metadata rule.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "asAt",
            "in": "query",
            "description": "The asAt datetime at which to retrieve the portfolio access metadata.",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "description": "The filtered list of results",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/AccessMetadataValue"
                    }
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/AccessMetadataValue"
                    }
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/AccessMetadataValue"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      },
      "patch": {
        "tags": [
          "Portfolios"
        ],
        "summary": "[EARLY ACCESS] PatchPortfolioAccessMetadata: Patch Access Metadata rules for a Portfolio.",
        "description": "Patch Portfolio Access Metadata Rules in a single scope.\r\nThe behaviour is defined by the JSON Patch specification.\r\n            \r\nCurrently only 'add' is a supported operation on the patch document.\r\n\r\nCurrently only valid metadata keys are supported paths on the patch document.\r\n\r\nThe response will return any affected Portfolio Access Metadata rules or a failure message if unsuccessful.\r\n\r\nIt is important to always check to verify success (or failure).\r\n            \r\nMultiple rules for a metadataKey can exist with different effective at dates, when resources are accessed the rule that is active for the current time will be fetched.",
        "operationId": "PatchPortfolioAccessMetadata",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the Portfolio Access Metadata Rule.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string"
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "Portfolio code",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string"
            }
          },
          {
            "name": "effectiveAt",
            "in": "query",
            "description": "The date this rule will effective from",
            "schema": {
              "type": "string",
              "format": "dateorcutlabel"
            }
          },
          {
            "name": "effectiveUntil",
            "in": "query",
            "description": "The effective date until which the Access Metadata is valid. If not supplied this will be valid indefinitely, or until the next 'effectiveAt' date of the Access Metadata",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "x-nullable": true
          }
        ],
        "requestBody": {
          "description": "The Json Patch document",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/AccessMetadataOperation"
                }
              },
              "example": [
                {
                  "value": [
                    {
                      "value": "SilverLicence",
                      "provider": "TestDataProvider"
                    }
                  ],
                  "path": "/exampleMetadataKey",
                  "op": "add"
                }
              ]
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/AccessMetadataOperation"
                }
              },
              "example": [
                {
                  "value": [
                    {
                      "value": "SilverLicence",
                      "provider": "TestDataProvider"
                    }
                  ],
                  "path": "/exampleMetadataKey",
                  "op": "add"
                }
              ]
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/AccessMetadataOperation"
                }
              },
              "example": [
                {
                  "value": [
                    {
                      "value": "SilverLicence",
                      "provider": "TestDataProvider"
                    }
                  ],
                  "path": "/exampleMetadataKey",
                  "op": "add"
                }
              ]
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/AccessMetadataOperation"
                }
              },
              "example": [
                {
                  "value": [
                    {
                      "value": "SilverLicence",
                      "provider": "TestDataProvider"
                    }
                  ],
                  "path": "/exampleMetadataKey",
                  "op": "add"
                }
              ]
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The successfully patched items.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/AccessMetadataValue"
                    }
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/AccessMetadataValue"
                    }
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/AccessMetadataValue"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      }
    },
    "/api/portfolios/{scope}/{code}/metadata/{metadataKey}": {
      "get": {
        "tags": [
          "Portfolios"
        ],
        "summary": "[EARLY ACCESS] GetPortfoliosAccessMetadataByKey: Get an entry identified by a metadataKey in the access metadata object",
        "description": "Get a specific portfolio access metadata rule by specifying the corresponding identifier parts\r\n            \r\nNo matching will be performed through this endpoint. To retrieve a rule, it is necessary to specify, exactly, the identifier of the rule",
        "operationId": "GetPortfoliosAccessMetadataByKey",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the Portfolio Access Metadata Rule to retrieve.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string"
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The code of the portfolio",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string"
            }
          },
          {
            "name": "metadataKey",
            "in": "path",
            "description": "Key of the metadata to retrieve",
            "required": true,
            "schema": {
              "maxLength": 256,
              "minLength": 1,
              "type": "string"
            }
          },
          {
            "name": "effectiveAt",
            "in": "query",
            "description": "The effective date of the rule",
            "schema": {
              "type": "string",
              "format": "dateorcutlabel"
            }
          },
          {
            "name": "asAt",
            "in": "query",
            "description": "The asAt datetime at which to retrieve the portfolio access metadata.",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "description": "The successfully retrieved Portfolio Access Metadata Rule or any failure",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AccessMetadataValue"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AccessMetadataValue"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AccessMetadataValue"
                  }
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      },
      "put": {
        "tags": [
          "Portfolios"
        ],
        "summary": "[EARLY ACCESS] UpsertPortfolioAccessMetadata: Upsert a Portfolio Access Metadata Rule associated with specific metadataKey. This creates or updates the data in LUSID.",
        "description": "Update or insert one Portfolio Access Metadata Rule in a single scope. An item will be updated if it already exists\r\nand inserted if it does not.\r\n\r\nThe response will return the successfully updated or inserted Portfolio Access Metadata Rule or failure message if unsuccessful\r\n\r\nIt is important to always check to verify success (or failure).\r\n            \r\nMultiple rules for a metadataKey can exists with different effective at dates, when resources are accessed the rule that is active for the current time will be fetched",
        "operationId": "UpsertPortfolioAccessMetadata",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope to use when updating or inserting the Portfolio Access Metadata Rule.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string"
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "Portfolio code",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string"
            }
          },
          {
            "name": "metadataKey",
            "in": "path",
            "description": "Key of the access metadata to upsert",
            "required": true,
            "schema": {
              "maxLength": 256,
              "minLength": 1,
              "type": "string"
            }
          },
          {
            "name": "effectiveAt",
            "in": "query",
            "description": "The date this rule will effective from",
            "schema": {
              "type": "string",
              "format": "dateorcutlabel"
            }
          },
          {
            "name": "effectiveUntil",
            "in": "query",
            "description": "The effective date until which the Access Metadata is valid. If not supplied this will be valid indefinitely, or until the next 'effectiveAt' date of the Access Metadata",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "x-nullable": true
          }
        ],
        "requestBody": {
          "description": "The Portfolio Access Metadata Rule to update or insert",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/UpsertPortfolioAccessMetadataRequest"
              },
              "example": {
                "metadata": [
                  {
                    "value": "SilverLicence",
                    "provider": "TestDataProvider"
                  }
                ]
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpsertPortfolioAccessMetadataRequest"
              },
              "example": {
                "metadata": [
                  {
                    "value": "SilverLicence",
                    "provider": "TestDataProvider"
                  }
                ]
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/UpsertPortfolioAccessMetadataRequest"
              },
              "example": {
                "metadata": [
                  {
                    "value": "SilverLicence",
                    "provider": "TestDataProvider"
                  }
                ]
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/UpsertPortfolioAccessMetadataRequest"
              },
              "example": {
                "metadata": [
                  {
                    "value": "SilverLicence",
                    "provider": "TestDataProvider"
                  }
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The successfully updated or inserted item or any failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfAccessMetadataValueOf"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfAccessMetadataValueOf"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfAccessMetadataValueOf"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      },
      "delete": {
        "tags": [
          "Portfolios"
        ],
        "summary": "[EARLY ACCESS] DeleteKeyFromPortfolioAccessMetadata: Delete a Portfolio Access Metadata Rule",
        "description": "Delete the Portfolio Access Metadata Rule that exactly matches the provided identifier parts",
        "operationId": "DeleteKeyFromPortfolioAccessMetadata",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the Quote Access Metadata Rule to retrieve.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string"
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "Portfolio code",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string"
            }
          },
          {
            "name": "metadataKey",
            "in": "path",
            "description": "The metadataKey identifying the access metadata entry to delete",
            "required": true,
            "schema": {
              "maxLength": 256,
              "minLength": 1,
              "type": "string"
            }
          },
          {
            "name": "effectiveAt",
            "in": "query",
            "description": "The effective date to delete at, if this is not supplied, it will delete all data found",
            "schema": {
              "type": "string",
              "format": "dateorcutlabel"
            }
          },
          {
            "name": "effectiveUntil",
            "in": "query",
            "description": "The effective date until which the delete is valid. If not supplied this will be valid indefinitely, or until the next 'effectiveAt' date of the Access Metadata",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "description": "The rule that has been deleted",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedEntityResponse"
                },
                "example": {
                  "asAt": "2018-03-05T10:10:10.0000000+00:00"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedEntityResponse"
                },
                "example": {
                  "asAt": "2018-03-05T10:10:10.0000000+00:00"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedEntityResponse"
                },
                "example": {
                  "asAt": "2018-03-05T10:10:10.0000000+00:00"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      }
    },
    "/api/portfolios/{scope}/{code}/properties": {
      "get": {
        "tags": [
          "Portfolios"
        ],
        "summary": "GetPortfolioProperties: Get portfolio properties",
        "description": "List all the properties of a particular portfolio.",
        "operationId": "GetPortfolioProperties",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the portfolio.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string"
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The code of the portfolio. Together with the scope this uniquely identifies the portfolio.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string"
            }
          },
          {
            "name": "effectiveAt",
            "in": "query",
            "description": "The effective datetime or cut label at which to list the portfolio's properties. Defaults to the current LUSID system datetime if not specified.",
            "schema": {
              "type": "string",
              "format": "dateorcutlabel"
            }
          },
          {
            "name": "asAt",
            "in": "query",
            "description": "The asAt datetime at which to list the portfolio's properties. Defaults to returning the latest version of each property if not specified.",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "description": "The properties of the specified portfolio",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PortfolioProperties"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortfolioProperties"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortfolioProperties"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Stable"
      },
      "delete": {
        "tags": [
          "Portfolios"
        ],
        "summary": "DeletePortfolioProperties: Delete portfolio properties",
        "description": "Delete one or more properties from a particular portfolio. If the properties are time-variant then an effective datetime from which\r\nto delete properties must be specified. If the properties are perpetual then it is invalid to specify an effective datetime for deletion.",
        "operationId": "DeletePortfolioProperties",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the portfolio.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string"
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The code of the portfolio. Together with the scope this uniquely identifies the portfolio.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string"
            }
          },
          {
            "name": "effectiveAt",
            "in": "query",
            "description": "The effective datetime or cut label at which to delete time-variant properties from.\r\n            The property must exist at the specified 'effectiveAt' datetime. If the 'effectiveAt' is not provided or is\r\n            before the time-variant property exists then a failure is returned. Do not specify this parameter if any of\r\n            the properties to delete are perpetual.",
            "schema": {
              "type": "string",
              "format": "dateorcutlabel"
            }
          },
          {
            "name": "propertyKeys",
            "in": "query",
            "description": "The property keys of the properties to delete. These must take the format\r\n            {domain}/{scope}/{code}, for example 'Portfolio/Manager/Id'. Each property must be from the 'Portfolio' domain.",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "description": "The key that uniquely identifies the property. It has the format {domain}/{scope}/{code}."
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The datetime that the properties were deleted from the specified portfolio",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedEntityResponse"
                },
                "example": {
                  "asAt": "2018-03-05T10:10:10.0000000+00:00"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedEntityResponse"
                },
                "example": {
                  "asAt": "2018-03-05T10:10:10.0000000+00:00"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedEntityResponse"
                },
                "example": {
                  "asAt": "2018-03-05T10:10:10.0000000+00:00"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Stable"
      },
      "post": {
        "tags": [
          "Portfolios"
        ],
        "summary": "UpsertPortfolioProperties: Upsert portfolio properties",
        "description": "Create or update one or more properties for a particular portfolio. A property is updated if it\r\nalready exists and created if it does not. All properties must be from the 'Portfolio' domain.\r\n            \r\nProperties have an <i>effectiveFrom</i> datetime from which the property is valid, and an <i>effectiveUntil</i>\r\ndatetime until which it is valid. Not supplying an <i>effectiveUntil</i> datetime results in the property being\r\nvalid indefinitely, or until the next <i>effectiveFrom</i> datetime of the property.",
        "operationId": "UpsertPortfolioProperties",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the portfolio.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string"
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The code of the portfolio. Together with the scope this uniquely identifies the portfolio.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The properties to be created or updated. Each property in\r\n             the request must be keyed by its unique property key. This has the format {domain}/{scope}/{code}, for example\r\n             'Portfolio/Manager/Id'.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/components/schemas/Property"
                }
              },
              "example": {
                "Portfolio/MyScope/FundManagerName": {
                  "key": "Portfolio/MyScope/FundManagerName",
                  "value": {
                    "labelValue": "Smith"
                  },
                  "effectiveFrom": "2018-03-05T00:00:00.0000000+00:00"
                },
                "Portfolio/MyScope/SomeProperty": {
                  "key": "Portfolio/MyScope/SomeProperty",
                  "value": {
                    "labelValue": "SomeValue"
                  },
                  "effectiveFrom": "2016-01-01T00:00:00.0000000+00:00"
                },
                "Portfolio/MyScope/AnotherProperty": {
                  "key": "Portfolio/MyScope/AnotherProperty",
                  "value": {
                    "labelValue": "AnotherValue"
                  },
                  "effectiveFrom": "2018-03-05T00:00:00.0000000+00:00",
                  "effectiveUntil": "2020-01-01T00:00:00.0000000+00:00"
                },
                "Portfolio/MyScope/ReBalanceInterval": {
                  "key": "Portfolio/MyScope/ReBalanceInterval",
                  "value": {
                    "metricValue": {
                      "value": 30,
                      "unit": "Days"
                    }
                  }
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/components/schemas/Property"
                }
              },
              "example": {
                "Portfolio/MyScope/FundManagerName": {
                  "key": "Portfolio/MyScope/FundManagerName",
                  "value": {
                    "labelValue": "Smith"
                  },
                  "effectiveFrom": "2018-03-05T00:00:00.0000000+00:00"
                },
                "Portfolio/MyScope/SomeProperty": {
                  "key": "Portfolio/MyScope/SomeProperty",
                  "value": {
                    "labelValue": "SomeValue"
                  },
                  "effectiveFrom": "2016-01-01T00:00:00.0000000+00:00"
                },
                "Portfolio/MyScope/AnotherProperty": {
                  "key": "Portfolio/MyScope/AnotherProperty",
                  "value": {
                    "labelValue": "AnotherValue"
                  },
                  "effectiveFrom": "2018-03-05T00:00:00.0000000+00:00",
                  "effectiveUntil": "2020-01-01T00:00:00.0000000+00:00"
                },
                "Portfolio/MyScope/ReBalanceInterval": {
                  "key": "Portfolio/MyScope/ReBalanceInterval",
                  "value": {
                    "metricValue": {
                      "value": 30,
                      "unit": "Days"
                    }
                  }
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/components/schemas/Property"
                }
              },
              "example": {
                "Portfolio/MyScope/FundManagerName": {
                  "key": "Portfolio/MyScope/FundManagerName",
                  "value": {
                    "labelValue": "Smith"
                  },
                  "effectiveFrom": "2018-03-05T00:00:00.0000000+00:00"
                },
                "Portfolio/MyScope/SomeProperty": {
                  "key": "Portfolio/MyScope/SomeProperty",
                  "value": {
                    "labelValue": "SomeValue"
                  },
                  "effectiveFrom": "2016-01-01T00:00:00.0000000+00:00"
                },
                "Portfolio/MyScope/AnotherProperty": {
                  "key": "Portfolio/MyScope/AnotherProperty",
                  "value": {
                    "labelValue": "AnotherValue"
                  },
                  "effectiveFrom": "2018-03-05T00:00:00.0000000+00:00",
                  "effectiveUntil": "2020-01-01T00:00:00.0000000+00:00"
                },
                "Portfolio/MyScope/ReBalanceInterval": {
                  "key": "Portfolio/MyScope/ReBalanceInterval",
                  "value": {
                    "metricValue": {
                      "value": 30,
                      "unit": "Days"
                    }
                  }
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/components/schemas/Property"
                }
              },
              "example": {
                "Portfolio/MyScope/FundManagerName": {
                  "key": "Portfolio/MyScope/FundManagerName",
                  "value": {
                    "labelValue": "Smith"
                  },
                  "effectiveFrom": "2018-03-05T00:00:00.0000000+00:00"
                },
                "Portfolio/MyScope/SomeProperty": {
                  "key": "Portfolio/MyScope/SomeProperty",
                  "value": {
                    "labelValue": "SomeValue"
                  },
                  "effectiveFrom": "2016-01-01T00:00:00.0000000+00:00"
                },
                "Portfolio/MyScope/AnotherProperty": {
                  "key": "Portfolio/MyScope/AnotherProperty",
                  "value": {
                    "labelValue": "AnotherValue"
                  },
                  "effectiveFrom": "2018-03-05T00:00:00.0000000+00:00",
                  "effectiveUntil": "2020-01-01T00:00:00.0000000+00:00"
                },
                "Portfolio/MyScope/ReBalanceInterval": {
                  "key": "Portfolio/MyScope/ReBalanceInterval",
                  "value": {
                    "metricValue": {
                      "value": 30,
                      "unit": "Days"
                    }
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The updated or inserted properties",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PortfolioProperties"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortfolioProperties"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortfolioProperties"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Stable"
      }
    },
    "/api/portfolios/{scope}/{code}/properties/list": {
      "get": {
        "tags": [
          "Portfolios"
        ],
        "summary": "[EARLY ACCESS] ListPortfolioProperties: Get portfolio properties",
        "description": "List all the properties of a particular portfolio.",
        "operationId": "ListPortfolioProperties",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the portfolio.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string"
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The code of the portfolio. Together with the scope this uniquely identifies the portfolio.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string"
            }
          },
          {
            "name": "effectiveAt",
            "in": "query",
            "description": "The effective datetime or cut label at which to list the portfolio's properties. Defaults to the current LUSID system datetime if not specified.",
            "schema": {
              "maxLength": 256,
              "minLength": 0,
              "pattern": "^[a-zA-Z0-9\\-_\\+:\\.]+$",
              "type": "string",
              "format": "dateorcutlabel"
            }
          },
          {
            "name": "asAt",
            "in": "query",
            "description": "The asAt datetime at which to list the portfolio's properties. Defaults to returning the latest version of each property if not specified.",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "x-nullable": true
          },
          {
            "name": "page",
            "in": "query",
            "description": "The pagination token to use to continue listing commands; this value is returned from the previous call.",
            "schema": {
              "maxLength": 500,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\+/]*={0,3}$",
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "When paginating, limit the results per page to this number.",
            "schema": {
              "maximum": 5000,
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "description": "The properties of the specified portfolio",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfProperty"
                },
                "example": {
                  "values": [
                    {
                      "key": "Portfolio/MyScope/SomePortfolioProperty",
                      "value": {
                        "labelValue": "XYZ000034567"
                      },
                      "effectiveFrom": "2018-01-01T12:00:00.0000000+00:00"
                    },
                    {
                      "key": "Portfolio/MyScope/SomeOtherPortfolioProperty",
                      "value": {
                        "labelValue": "XYZ00008910"
                      },
                      "effectiveFrom": "2017-01-01T12:00:00.0000000+00:00"
                    }
                  ],
                  "links": []
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfProperty"
                },
                "example": {
                  "values": [
                    {
                      "key": "Portfolio/MyScope/SomePortfolioProperty",
                      "value": {
                        "labelValue": "XYZ000034567"
                      },
                      "effectiveFrom": "2018-01-01T12:00:00.0000000+00:00"
                    },
                    {
                      "key": "Portfolio/MyScope/SomeOtherPortfolioProperty",
                      "value": {
                        "labelValue": "XYZ00008910"
                      },
                      "effectiveFrom": "2017-01-01T12:00:00.0000000+00:00"
                    }
                  ],
                  "links": []
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfProperty"
                },
                "example": {
                  "values": [
                    {
                      "key": "Portfolio/MyScope/SomePortfolioProperty",
                      "value": {
                        "labelValue": "XYZ000034567"
                      },
                      "effectiveFrom": "2018-01-01T12:00:00.0000000+00:00"
                    },
                    {
                      "key": "Portfolio/MyScope/SomeOtherPortfolioProperty",
                      "value": {
                        "labelValue": "XYZ00008910"
                      },
                      "effectiveFrom": "2017-01-01T12:00:00.0000000+00:00"
                    }
                  ],
                  "links": []
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      }
    },
    "/api/portfolios/{scope}/{code}/properties/time-series": {
      "get": {
        "tags": [
          "Portfolios"
        ],
        "summary": "[EARLY ACCESS] GetPortfolioPropertyTimeSeries: Get portfolio property time series",
        "description": "Show the complete time series (history) for a particular portfolio property.",
        "operationId": "GetPortfolioPropertyTimeSeries",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the portfolio.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string"
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The code of the portfolio. Together with the scope this uniquely identifies the portfolio.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string"
            }
          },
          {
            "name": "propertyKey",
            "in": "query",
            "description": "The property key of the property whose history to show.\r\n            This must be from the 'Portfolio' domain and in the format {domain}/{scope}/{code}, for example 'Portfolio/Manager/Id'.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The key that uniquely identifies the property. It has the format {domain}/{scope}/{code}."
            }
          },
          {
            "name": "portfolioEffectiveAt",
            "in": "query",
            "description": "The effective datetime used to resolve the portfolio. Defaults to the current LUSID system datetime if not specified.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "asAt",
            "in": "query",
            "description": "The asAt datetime at which to show the history. Defaults to returning the current datetime if not supplied.",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "x-nullable": true
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Expression to filter the results. For more information about filtering,\r\n            see https://support.lusid.com/knowledgebase/article/KA-01914.",
            "schema": {
              "maxLength": 16384,
              "minLength": 0,
              "pattern": "^[\\s\\S]*$",
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "The pagination token to use to continue listing properties; this value is returned from\r\n            the previous call. If a pagination token is provided, the filter, portfolioEffectiveAt, and asAt fields\r\n            must not have changed since the original request.",
            "schema": {
              "maxLength": 500,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\+/]*={0,3}$",
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "When paginating, limit the results to this number.",
            "schema": {
              "maximum": 5000,
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "description": "The time series of the property",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfPropertyInterval"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfPropertyInterval"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfPropertyInterval"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      }
    },
    "/api/portfolios/{scope}/{code}/relationships": {
      "get": {
        "tags": [
          "Portfolios"
        ],
        "summary": "[EARLY ACCESS] GetPortfolioRelationships: Get portfolio relationships",
        "description": "Get relationships for a particular portfolio.",
        "operationId": "GetPortfolioRelationships",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the portfolio.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string"
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The code of the portfolio. Together with the scope this uniquely identifies the portfolio.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string"
            }
          },
          {
            "name": "effectiveAt",
            "in": "query",
            "description": "The effective datetime or cut label at which to retrieve relationships. Defaults to the current LUSID system datetime if not specified.",
            "schema": {
              "maxLength": 256,
              "minLength": 0,
              "pattern": "^[a-zA-Z0-9\\-_\\+:\\.]+$",
              "type": "string",
              "format": "dateorcutlabel"
            }
          },
          {
            "name": "asAt",
            "in": "query",
            "description": "The asAt datetime at which to retrieve relationships. Defaults to returning the latest LUSID AsAt time if not specified.",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "x-nullable": true
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Expression to filter the relationships. Provide a null or empty string for this field until further notice.",
            "schema": {
              "maxLength": 16384,
              "minLength": 0,
              "pattern": "^[\\s\\S]*$",
              "type": "string"
            }
          },
          {
            "name": "identifierTypes",
            "in": "query",
            "description": "Identifier types (as property keys) used for referencing Persons or Legal Entities.\r\n            These can be specified from the 'Person' or 'LegalEntity' domains and have the format {domain}/{scope}/{code}, for example\r\n            'Person/CompanyDetails/Role'. An Empty array may be used to return all related Entities.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "description": "The key that uniquely identifies the property. It has the format {domain}/{scope}/{code}."
              }
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "description": "The relationships for the specified portfolio.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfRelationship"
                },
                "example": {
                  "values": [
                    {
                      "relationshipDefinitionId": {
                        "scope": "PortfolioManagementTeam",
                        "code": "Traders"
                      },
                      "relatedEntity": {
                        "entityType": "Person",
                        "entityId": {
                          "idTypeScope": "HrSystem1",
                          "idTypeCode": "InternalId",
                          "code": "XY10001111"
                        },
                        "displayName": "James Smith",
                        "properties": {},
                        "identifiers": [
                          {
                            "identifierScope": "HrSystem1",
                            "identifierType": "InternalId",
                            "identifierValue": "XY10001111"
                          }
                        ]
                      },
                      "traversalDirection": "Out",
                      "traversalDescription": "can be traded by",
                      "effectiveFrom": "2019-01-01T12:00:00.0000000+00:00",
                      "effectiveUntil": "2022-01-01T12:00:00.0000000+00:00"
                    },
                    {
                      "relationshipDefinitionId": {
                        "scope": "PortfolioManagementTeam",
                        "code": "Traders"
                      },
                      "relatedEntity": {
                        "entityType": "PortfolioGroup",
                        "entityId": {
                          "scope": "PortfolioGroupEmea",
                          "code": "PortfolioGroupId-867312"
                        },
                        "displayName": "UK Portfolios",
                        "properties": {},
                        "scope": "PortfolioGroupEmea",
                        "identifiers": [
                          {
                            "identifierType": "code",
                            "identifierValue": "PortfolioGroupId-867312"
                          }
                        ]
                      },
                      "traversalDirection": "In",
                      "traversalDescription": "can trade with portfolio",
                      "effectiveFrom": "2019-01-01T12:00:00.0000000+00:00",
                      "effectiveUntil": "2022-01-01T12:00:00.0000000+00:00"
                    }
                  ],
                  "links": []
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfRelationship"
                },
                "example": {
                  "values": [
                    {
                      "relationshipDefinitionId": {
                        "scope": "PortfolioManagementTeam",
                        "code": "Traders"
                      },
                      "relatedEntity": {
                        "entityType": "Person",
                        "entityId": {
                          "idTypeScope": "HrSystem1",
                          "idTypeCode": "InternalId",
                          "code": "XY10001111"
                        },
                        "displayName": "James Smith",
                        "properties": {},
                        "identifiers": [
                          {
                            "identifierScope": "HrSystem1",
                            "identifierType": "InternalId",
                            "identifierValue": "XY10001111"
                          }
                        ]
                      },
                      "traversalDirection": "Out",
                      "traversalDescription": "can be traded by",
                      "effectiveFrom": "2019-01-01T12:00:00.0000000+00:00",
                      "effectiveUntil": "2022-01-01T12:00:00.0000000+00:00"
                    },
                    {
                      "relationshipDefinitionId": {
                        "scope": "PortfolioManagementTeam",
                        "code": "Traders"
                      },
                      "relatedEntity": {
                        "entityType": "PortfolioGroup",
                        "entityId": {
                          "scope": "PortfolioGroupEmea",
                          "code": "PortfolioGroupId-867312"
                        },
                        "displayName": "UK Portfolios",
                        "properties": {},
                        "scope": "PortfolioGroupEmea",
                        "identifiers": [
                          {
                            "identifierType": "code",
                            "identifierValue": "PortfolioGroupId-867312"
                          }
                        ]
                      },
                      "traversalDirection": "In",
                      "traversalDescription": "can trade with portfolio",
                      "effectiveFrom": "2019-01-01T12:00:00.0000000+00:00",
                      "effectiveUntil": "2022-01-01T12:00:00.0000000+00:00"
                    }
                  ],
                  "links": []
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfRelationship"
                },
                "example": {
                  "values": [
                    {
                      "relationshipDefinitionId": {
                        "scope": "PortfolioManagementTeam",
                        "code": "Traders"
                      },
                      "relatedEntity": {
                        "entityType": "Person",
                        "entityId": {
                          "idTypeScope": "HrSystem1",
                          "idTypeCode": "InternalId",
                          "code": "XY10001111"
                        },
                        "displayName": "James Smith",
                        "properties": {},
                        "identifiers": [
                          {
                            "identifierScope": "HrSystem1",
                            "identifierType": "InternalId",
                            "identifierValue": "XY10001111"
                          }
                        ]
                      },
                      "traversalDirection": "Out",
                      "traversalDescription": "can be traded by",
                      "effectiveFrom": "2019-01-01T12:00:00.0000000+00:00",
                      "effectiveUntil": "2022-01-01T12:00:00.0000000+00:00"
                    },
                    {
                      "relationshipDefinitionId": {
                        "scope": "PortfolioManagementTeam",
                        "code": "Traders"
                      },
                      "relatedEntity": {
                        "entityType": "PortfolioGroup",
                        "entityId": {
                          "scope": "PortfolioGroupEmea",
                          "code": "PortfolioGroupId-867312"
                        },
                        "displayName": "UK Portfolios",
                        "properties": {},
                        "scope": "PortfolioGroupEmea",
                        "identifiers": [
                          {
                            "identifierType": "code",
                            "identifierValue": "PortfolioGroupId-867312"
                          }
                        ]
                      },
                      "traversalDirection": "In",
                      "traversalDescription": "can trade with portfolio",
                      "effectiveFrom": "2019-01-01T12:00:00.0000000+00:00",
                      "effectiveUntil": "2022-01-01T12:00:00.0000000+00:00"
                    }
                  ],
                  "links": []
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      }
    },
    "/api/portfolios/{scope}/{code}/returns/$aggregated": {
      "post": {
        "tags": [
          "Portfolios"
        ],
        "summary": "[EARLY ACCESS] GetPortfolioAggregatedReturns: Aggregated Returns",
        "description": "Aggregate Returns which are on the specified portfolio.",
        "operationId": "GetPortfolioAggregatedReturns",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the Portfolio.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string"
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The code of the  Portfolio.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string"
            }
          },
          {
            "name": "fromEffectiveAt",
            "in": "query",
            "description": "The start date from which to calculate the Returns.",
            "schema": {
              "type": "string",
              "format": "dateorcutlabel"
            }
          },
          {
            "name": "toEffectiveAt",
            "in": "query",
            "description": "The end date for which to calculate the Returns.",
            "schema": {
              "type": "string",
              "format": "dateorcutlabel"
            }
          },
          {
            "name": "asAt",
            "in": "query",
            "description": "The asAt datetime at which to retrieve the Returns. Defaults to the latest.",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "x-nullable": true
          }
        ],
        "requestBody": {
          "description": "The request used in the AggregatedReturns.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/AggregatedReturnsRequest"
              },
              "example": {
                "metrics": [
                  {
                    "type": "Return",
                    "window": "1Y",
                    "allowPartial": false,
                    "annualised": false,
                    "withFee": true,
                    "alias": "1M"
                  }
                ],
                "returnIds": [
                  {
                    "scope": "TestScope",
                    "code": "default"
                  }
                ],
                "recipeId": {
                  "scope": "ReturnsScope",
                  "code": "ReturnCode"
                },
                "compositeMethod": "Asset",
                "period": "Daily",
                "outputFrequency": "Daily",
                "alternativeInceptionDate": "2020-01-01",
                "holidayCalendars": []
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AggregatedReturnsRequest"
              },
              "example": {
                "metrics": [
                  {
                    "type": "Return",
                    "window": "1Y",
                    "allowPartial": false,
                    "annualised": false,
                    "withFee": true,
                    "alias": "1M"
                  }
                ],
                "returnIds": [
                  {
                    "scope": "TestScope",
                    "code": "default"
                  }
                ],
                "recipeId": {
                  "scope": "ReturnsScope",
                  "code": "ReturnCode"
                },
                "compositeMethod": "Asset",
                "period": "Daily",
                "outputFrequency": "Daily",
                "alternativeInceptionDate": "2020-01-01",
                "holidayCalendars": []
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/AggregatedReturnsRequest"
              },
              "example": {
                "metrics": [
                  {
                    "type": "Return",
                    "window": "1Y",
                    "allowPartial": false,
                    "annualised": false,
                    "withFee": true,
                    "alias": "1M"
                  }
                ],
                "returnIds": [
                  {
                    "scope": "TestScope",
                    "code": "default"
                  }
                ],
                "recipeId": {
                  "scope": "ReturnsScope",
                  "code": "ReturnCode"
                },
                "compositeMethod": "Asset",
                "period": "Daily",
                "outputFrequency": "Daily",
                "alternativeInceptionDate": "2020-01-01",
                "holidayCalendars": []
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/AggregatedReturnsRequest"
              },
              "example": {
                "metrics": [
                  {
                    "type": "Return",
                    "window": "1Y",
                    "allowPartial": false,
                    "annualised": false,
                    "withFee": true,
                    "alias": "1M"
                  }
                ],
                "returnIds": [
                  {
                    "scope": "TestScope",
                    "code": "default"
                  }
                ],
                "recipeId": {
                  "scope": "ReturnsScope",
                  "code": "ReturnCode"
                },
                "compositeMethod": "Asset",
                "period": "Daily",
                "outputFrequency": "Daily",
                "alternativeInceptionDate": "2020-01-01",
                "holidayCalendars": []
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The aggregated returns grouped by return stream.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/AggregatedReturnsResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AggregatedReturnsResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/AggregatedReturnsResponse"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      }
    },
    "/api/portfolios/{scope}/{code}/returns/dispersion/$aggregated": {
      "post": {
        "tags": [
          "Portfolios"
        ],
        "summary": "[EARLY ACCESS] GetAggregatedReturnsDispersionMetrics: Get the Aggregated Returns Dispersion metric",
        "description": "Calculate the dispersion metric with the Aggregate Returns which are on the specified portfolio.\r\n           This works only for composites which have at least 6 constituents for a full year in.",
        "operationId": "GetAggregatedReturnsDispersionMetrics",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the Portfolio.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string"
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The code of the  Portfolio.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string"
            }
          },
          {
            "name": "asAt",
            "in": "query",
            "description": "The asAt datetime at which to retrieve the Returns. Defaults to the latest.",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "x-nullable": true
          }
        ],
        "requestBody": {
          "description": "The request used in the AggregatedReturnsDispersionMetric.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/AggregatedReturnsDispersionRequest"
              },
              "example": {
                "toEffectiveAt": "2023-01-01",
                "yearsCount": 10,
                "returnIds": [
                  {
                    "scope": "TestScope",
                    "code": "default"
                  }
                ],
                "recipeId": {
                  "scope": "ReturnsScope",
                  "code": "ReturnCode"
                },
                "compositeMethod": "Asset",
                "alternativeInceptionDate": "2020-01-01"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AggregatedReturnsDispersionRequest"
              },
              "example": {
                "toEffectiveAt": "2023-01-01",
                "yearsCount": 10,
                "returnIds": [
                  {
                    "scope": "TestScope",
                    "code": "default"
                  }
                ],
                "recipeId": {
                  "scope": "ReturnsScope",
                  "code": "ReturnCode"
                },
                "compositeMethod": "Asset",
                "alternativeInceptionDate": "2020-01-01"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/AggregatedReturnsDispersionRequest"
              },
              "example": {
                "toEffectiveAt": "2023-01-01",
                "yearsCount": 10,
                "returnIds": [
                  {
                    "scope": "TestScope",
                    "code": "default"
                  }
                ],
                "recipeId": {
                  "scope": "ReturnsScope",
                  "code": "ReturnCode"
                },
                "compositeMethod": "Asset",
                "alternativeInceptionDate": "2020-01-01"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/AggregatedReturnsDispersionRequest"
              },
              "example": {
                "toEffectiveAt": "2023-01-01",
                "yearsCount": 10,
                "returnIds": [
                  {
                    "scope": "TestScope",
                    "code": "default"
                  }
                ],
                "recipeId": {
                  "scope": "ReturnsScope",
                  "code": "ReturnCode"
                },
                "compositeMethod": "Asset",
                "alternativeInceptionDate": "2020-01-01"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The aggregated returns grouped by return stream.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CompositeDispersionResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CompositeDispersionResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CompositeDispersionResponse"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      }
    },
    "/api/portfolios/{scope}/{code}/returns/{returnScope}/{returnCode}": {
      "post": {
        "tags": [
          "Portfolios"
        ],
        "summary": "[EARLY ACCESS] UpsertPortfolioReturns: Upsert Returns",
        "description": "Update or insert returns into the specified portfolio.",
        "operationId": "UpsertPortfolioReturns",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the Portfolio.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string"
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The code of the  Portfolio.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string"
            }
          },
          {
            "name": "returnScope",
            "in": "path",
            "description": "The scope of the Returns.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string"
            }
          },
          {
            "name": "returnCode",
            "in": "path",
            "description": "The code of the Returns.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "This contains the Returns which need to be upsert.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/PerformanceReturn"
                }
              },
              "example": [
                {
                  "effectiveAt": "2019-11-28T00:00:00.0000000+00:00",
                  "rateOfReturn": 0.1,
                  "openingMarketValue": 500,
                  "closingMarketValue": 550,
                  "period": "Daily"
                },
                {
                  "effectiveAt": "2019-11-29T00:00:00.0000000+00:00",
                  "rateOfReturn": -0.2,
                  "openingMarketValue": 550,
                  "closingMarketValue": 440,
                  "period": "Daily"
                }
              ]
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/PerformanceReturn"
                }
              },
              "example": [
                {
                  "effectiveAt": "2019-11-28T00:00:00.0000000+00:00",
                  "rateOfReturn": 0.1,
                  "openingMarketValue": 500,
                  "closingMarketValue": 550,
                  "period": "Daily"
                },
                {
                  "effectiveAt": "2019-11-29T00:00:00.0000000+00:00",
                  "rateOfReturn": -0.2,
                  "openingMarketValue": 550,
                  "closingMarketValue": 440,
                  "period": "Daily"
                }
              ]
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/PerformanceReturn"
                }
              },
              "example": [
                {
                  "effectiveAt": "2019-11-28T00:00:00.0000000+00:00",
                  "rateOfReturn": 0.1,
                  "openingMarketValue": 500,
                  "closingMarketValue": 550,
                  "period": "Daily"
                },
                {
                  "effectiveAt": "2019-11-29T00:00:00.0000000+00:00",
                  "rateOfReturn": -0.2,
                  "openingMarketValue": 550,
                  "closingMarketValue": 440,
                  "period": "Daily"
                }
              ]
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/PerformanceReturn"
                }
              },
              "example": [
                {
                  "effectiveAt": "2019-11-28T00:00:00.0000000+00:00",
                  "rateOfReturn": 0.1,
                  "openingMarketValue": 500,
                  "closingMarketValue": 550,
                  "period": "Daily"
                },
                {
                  "effectiveAt": "2019-11-29T00:00:00.0000000+00:00",
                  "rateOfReturn": -0.2,
                  "openingMarketValue": 550,
                  "closingMarketValue": 440,
                  "period": "Daily"
                }
              ]
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The version of the portfolio that contains the newly updated or inserted Returns.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UpsertReturnsResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpsertReturnsResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpsertReturnsResponse"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      },
      "get": {
        "tags": [
          "Portfolios"
        ],
        "summary": "[EARLY ACCESS] GetPortfolioReturns: Get Returns",
        "description": "Get Returns which are on the specified portfolio.",
        "operationId": "GetPortfolioReturns",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the Portfolio.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string"
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The code of the  Portfolio.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string"
            }
          },
          {
            "name": "returnScope",
            "in": "path",
            "description": "The scope of the Returns.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string"
            }
          },
          {
            "name": "returnCode",
            "in": "path",
            "description": "The code of the Returns.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string"
            }
          },
          {
            "name": "fromEffectiveAt",
            "in": "query",
            "description": "The start date from which to get the Returns.",
            "schema": {
              "type": "string",
              "format": "dateorcutlabel"
            }
          },
          {
            "name": "toEffectiveAt",
            "in": "query",
            "description": "The end date from which to get the Returns.",
            "schema": {
              "type": "string",
              "format": "dateorcutlabel"
            }
          },
          {
            "name": "period",
            "in": "query",
            "description": "Show the Returns on a Daily or Monthly period. Defaults to Daily.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "asAt",
            "in": "query",
            "description": "The asAt datetime at which to retrieve the Returns. Defaults to the latest.",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "description": "The Returns on the given time period.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfPerformanceReturn"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfPerformanceReturn"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfPerformanceReturn"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      }
    },
    "/api/portfolios/{scope}/{code}/returns/{returnScope}/{returnCode}/$delete": {
      "delete": {
        "tags": [
          "Portfolios"
        ],
        "summary": "[EARLY ACCESS] DeletePortfolioReturns: Delete Returns",
        "description": "Cancel one or more Returns which exist into the specified portfolio.",
        "operationId": "DeletePortfolioReturns",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the Portfolio.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string"
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The code of the  Portfolio.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string"
            }
          },
          {
            "name": "returnScope",
            "in": "path",
            "description": "The scope of the Returns.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string"
            }
          },
          {
            "name": "returnCode",
            "in": "path",
            "description": "The code of the Returns.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string"
            }
          },
          {
            "name": "fromEffectiveAt",
            "in": "query",
            "description": "The start date from which to delete the Returns.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "dateorcutlabel"
            }
          },
          {
            "name": "toEffectiveAt",
            "in": "query",
            "description": "The end date from which to delete the Returns.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "dateorcutlabel"
            }
          },
          {
            "name": "period",
            "in": "query",
            "description": "The Period (Daily or Monthly) of the Returns to be deleted. Defaults to Daily.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The successfully deleted Returns data along with any failures",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedEntityResponse"
                },
                "example": {
                  "asAt": "2018-03-05T10:10:10.0000000+00:00"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedEntityResponse"
                },
                "example": {
                  "asAt": "2018-03-05T10:10:10.0000000+00:00"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedEntityResponse"
                },
                "example": {
                  "asAt": "2018-03-05T10:10:10.0000000+00:00"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      }
    },
    "/api/propertydefinitions": {
      "post": {
        "tags": [
          "Property Definitions"
        ],
        "summary": "CreatePropertyDefinition: Create property definition",
        "description": "Define a new property.",
        "operationId": "CreatePropertyDefinition",
        "requestBody": {
          "description": "The definition of the new property.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/CreatePropertyDefinitionRequest"
              },
              "example": {
                "domain": "Portfolio",
                "scope": "MyScope",
                "code": "MyPropertyName",
                "valueRequired": false,
                "displayName": "My Property Display Name",
                "dataTypeId": {
                  "scope": "system",
                  "code": "string"
                },
                "lifeTime": "Perpetual",
                "constraintStyle": "Property",
                "propertyDescription": "Optional property description"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreatePropertyDefinitionRequest"
              },
              "example": {
                "domain": "Portfolio",
                "scope": "MyScope",
                "code": "MyPropertyName",
                "valueRequired": false,
                "displayName": "My Property Display Name",
                "dataTypeId": {
                  "scope": "system",
                  "code": "string"
                },
                "lifeTime": "Perpetual",
                "constraintStyle": "Property",
                "propertyDescription": "Optional property description"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/CreatePropertyDefinitionRequest"
              },
              "example": {
                "domain": "Portfolio",
                "scope": "MyScope",
                "code": "MyPropertyName",
                "valueRequired": false,
                "displayName": "My Property Display Name",
                "dataTypeId": {
                  "scope": "system",
                  "code": "string"
                },
                "lifeTime": "Perpetual",
                "constraintStyle": "Property",
                "propertyDescription": "Optional property description"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/CreatePropertyDefinitionRequest"
              },
              "example": {
                "domain": "Portfolio",
                "scope": "MyScope",
                "code": "MyPropertyName",
                "valueRequired": false,
                "displayName": "My Property Display Name",
                "dataTypeId": {
                  "scope": "system",
                  "code": "string"
                },
                "lifeTime": "Perpetual",
                "constraintStyle": "Property",
                "propertyDescription": "Optional property description"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "The newly created property definition",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PropertyDefinition"
                },
                "example": {
                  "href": "https://example.lusid.com/api/properties/demo-scope/demo-code",
                  "key": "Instrument/default/MyDerivedPropertyName",
                  "valueType": "String",
                  "displayName": "Value",
                  "dataTypeId": {
                    "scope": "system",
                    "code": "number"
                  },
                  "type": "Label",
                  "unitSchema": "NoUnits",
                  "domain": "Instrument",
                  "scope": "default",
                  "code": "MyDerivedPropertyName",
                  "valueRequired": true,
                  "lifeTime": "Perpetual",
                  "constraintStyle": "Property",
                  "propertyDefinitionType": "ValueProperty",
                  "propertyDescription": "A demonstration property definition",
                  "derivationFormula": "(Properties[Instrument/default/Price] * Properties[Instrument/default/Cost]) / Properties[Instrument/default/Shares]"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PropertyDefinition"
                },
                "example": {
                  "href": "https://example.lusid.com/api/properties/demo-scope/demo-code",
                  "key": "Instrument/default/MyDerivedPropertyName",
                  "valueType": "String",
                  "displayName": "Value",
                  "dataTypeId": {
                    "scope": "system",
                    "code": "number"
                  },
                  "type": "Label",
                  "unitSchema": "NoUnits",
                  "domain": "Instrument",
                  "scope": "default",
                  "code": "MyDerivedPropertyName",
                  "valueRequired": true,
                  "lifeTime": "Perpetual",
                  "constraintStyle": "Property",
                  "propertyDefinitionType": "ValueProperty",
                  "propertyDescription": "A demonstration property definition",
                  "derivationFormula": "(Properties[Instrument/default/Price] * Properties[Instrument/default/Cost]) / Properties[Instrument/default/Shares]"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PropertyDefinition"
                },
                "example": {
                  "href": "https://example.lusid.com/api/properties/demo-scope/demo-code",
                  "key": "Instrument/default/MyDerivedPropertyName",
                  "valueType": "String",
                  "displayName": "Value",
                  "dataTypeId": {
                    "scope": "system",
                    "code": "number"
                  },
                  "type": "Label",
                  "unitSchema": "NoUnits",
                  "domain": "Instrument",
                  "scope": "default",
                  "code": "MyDerivedPropertyName",
                  "valueRequired": true,
                  "lifeTime": "Perpetual",
                  "constraintStyle": "Property",
                  "propertyDefinitionType": "ValueProperty",
                  "propertyDescription": "A demonstration property definition",
                  "derivationFormula": "(Properties[Instrument/default/Price] * Properties[Instrument/default/Cost]) / Properties[Instrument/default/Shares]"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Stable"
      },
      "get": {
        "tags": [
          "Property Definitions"
        ],
        "summary": "GetMultiplePropertyDefinitions: Get multiple property definitions",
        "description": "Retrieve the definition of one or more specified properties.",
        "operationId": "GetMultiplePropertyDefinitions",
        "parameters": [
          {
            "name": "asAt",
            "in": "query",
            "description": "The asAt datetime at which to retrieve the property definitions. Defaults to return\r\n            the latest version of each definition if not specified.",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "x-nullable": true
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Expression to filter the result set. \r\n            For example, to filter on the Lifetime, use \"lifeTime eq 'Perpetual'\"\r\n            Read more about filtering results from LUSID here https://support.lusid.com/filtering-results-from-lusid.",
            "schema": {
              "maxLength": 16384,
              "minLength": 0,
              "pattern": "^[\\s\\S]*$",
              "type": "string"
            }
          },
          {
            "name": "propertyKeys",
            "in": "query",
            "description": "One or more property keys which identify each property that a definition should\r\n            be retrieved for. The format for each property key is {domain}/{scope}/{code}, e.g. 'Portfolio/Manager/Id'.",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "description": "The key that uniquely identifies the property. It has the format {domain}/{scope}/{code}."
              }
            }
          },
          {
            "name": "effectiveAt",
            "in": "query",
            "description": "The effective datetime or cut label at which to list properties attached to the Property Definition.\r\n            Defaults to the current LUSID system datetime if not specified.",
            "schema": {
              "type": "string",
              "format": "dateorcutlabel"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The requested property definitions",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfPropertyDefinition"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfPropertyDefinition"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfPropertyDefinition"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Stable"
      }
    },
    "/api/propertydefinitions/derived": {
      "post": {
        "tags": [
          "Property Definitions"
        ],
        "summary": "[EARLY ACCESS] CreateDerivedPropertyDefinition: Create derived property definition",
        "description": "Define a new derived property.",
        "operationId": "CreateDerivedPropertyDefinition",
        "requestBody": {
          "description": "The definition of the new derived property.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/CreateDerivedPropertyDefinitionRequest"
              },
              "example": {
                "domain": "Instrument",
                "scope": "MyScope",
                "code": "MyDerivedPropertyName",
                "displayName": "My Property Display Name",
                "dataTypeId": {
                  "scope": "system",
                  "code": "number"
                },
                "propertyDescription": "My Property Description",
                "derivationFormula": "(Properties[Instrument/default/Price] * Properties[Instrument/default/Cost]) / Properties[Instrument/default/Shares]"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateDerivedPropertyDefinitionRequest"
              },
              "example": {
                "domain": "Instrument",
                "scope": "MyScope",
                "code": "MyDerivedPropertyName",
                "displayName": "My Property Display Name",
                "dataTypeId": {
                  "scope": "system",
                  "code": "number"
                },
                "propertyDescription": "My Property Description",
                "derivationFormula": "(Properties[Instrument/default/Price] * Properties[Instrument/default/Cost]) / Properties[Instrument/default/Shares]"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateDerivedPropertyDefinitionRequest"
              },
              "example": {
                "domain": "Instrument",
                "scope": "MyScope",
                "code": "MyDerivedPropertyName",
                "displayName": "My Property Display Name",
                "dataTypeId": {
                  "scope": "system",
                  "code": "number"
                },
                "propertyDescription": "My Property Description",
                "derivationFormula": "(Properties[Instrument/default/Price] * Properties[Instrument/default/Cost]) / Properties[Instrument/default/Shares]"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/CreateDerivedPropertyDefinitionRequest"
              },
              "example": {
                "domain": "Instrument",
                "scope": "MyScope",
                "code": "MyDerivedPropertyName",
                "displayName": "My Property Display Name",
                "dataTypeId": {
                  "scope": "system",
                  "code": "number"
                },
                "propertyDescription": "My Property Description",
                "derivationFormula": "(Properties[Instrument/default/Price] * Properties[Instrument/default/Cost]) / Properties[Instrument/default/Shares]"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "The newly created derived property definition",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PropertyDefinition"
                },
                "example": {
                  "href": "https://example.lusid.com/api/properties/demo-scope/demo-code",
                  "key": "Instrument/default/MyDerivedPropertyName",
                  "valueType": "String",
                  "displayName": "Value",
                  "dataTypeId": {
                    "scope": "system",
                    "code": "number"
                  },
                  "type": "Label",
                  "unitSchema": "NoUnits",
                  "domain": "Instrument",
                  "scope": "default",
                  "code": "MyDerivedPropertyName",
                  "valueRequired": true,
                  "lifeTime": "Perpetual",
                  "constraintStyle": "Property",
                  "propertyDefinitionType": "ValueProperty",
                  "propertyDescription": "A demonstration property definition",
                  "derivationFormula": "(Properties[Instrument/default/Price] * Properties[Instrument/default/Cost]) / Properties[Instrument/default/Shares]"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PropertyDefinition"
                },
                "example": {
                  "href": "https://example.lusid.com/api/properties/demo-scope/demo-code",
                  "key": "Instrument/default/MyDerivedPropertyName",
                  "valueType": "String",
                  "displayName": "Value",
                  "dataTypeId": {
                    "scope": "system",
                    "code": "number"
                  },
                  "type": "Label",
                  "unitSchema": "NoUnits",
                  "domain": "Instrument",
                  "scope": "default",
                  "code": "MyDerivedPropertyName",
                  "valueRequired": true,
                  "lifeTime": "Perpetual",
                  "constraintStyle": "Property",
                  "propertyDefinitionType": "ValueProperty",
                  "propertyDescription": "A demonstration property definition",
                  "derivationFormula": "(Properties[Instrument/default/Price] * Properties[Instrument/default/Cost]) / Properties[Instrument/default/Shares]"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PropertyDefinition"
                },
                "example": {
                  "href": "https://example.lusid.com/api/properties/demo-scope/demo-code",
                  "key": "Instrument/default/MyDerivedPropertyName",
                  "valueType": "String",
                  "displayName": "Value",
                  "dataTypeId": {
                    "scope": "system",
                    "code": "number"
                  },
                  "type": "Label",
                  "unitSchema": "NoUnits",
                  "domain": "Instrument",
                  "scope": "default",
                  "code": "MyDerivedPropertyName",
                  "valueRequired": true,
                  "lifeTime": "Perpetual",
                  "constraintStyle": "Property",
                  "propertyDefinitionType": "ValueProperty",
                  "propertyDescription": "A demonstration property definition",
                  "derivationFormula": "(Properties[Instrument/default/Price] * Properties[Instrument/default/Cost]) / Properties[Instrument/default/Shares]"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      }
    },
    "/api/propertydefinitions/derived/{domain}/{scope}/{code}": {
      "put": {
        "tags": [
          "Property Definitions"
        ],
        "summary": "[EARLY ACCESS] UpdateDerivedPropertyDefinition: Update a pre-existing derived property definition",
        "description": "This will fail if the property definition does not exist",
        "operationId": "UpdateDerivedPropertyDefinition",
        "parameters": [
          {
            "name": "domain",
            "in": "path",
            "description": "Domain of the property definition",
            "required": true,
            "schema": {
              "enum": [
                "NotDefined",
                "Transaction",
                "Portfolio",
                "Holding",
                "ReferenceHolding",
                "TransactionConfiguration",
                "Instrument",
                "CutLabelDefinition",
                "Analytic",
                "PortfolioGroup",
                "Person",
                "AccessMetadata",
                "Order",
                "UnitResult",
                "MarketData",
                "ConfigurationRecipe",
                "Allocation",
                "Calendar",
                "LegalEntity",
                "Placement",
                "Execution",
                "Block",
                "Participation",
                "Package",
                "OrderInstruction",
                "NextBestAction",
                "CustomEntity",
                "InstrumentEvent",
                "Account",
                "ChartOfAccounts",
                "CustodianAccount",
                "Abor",
                "AborConfiguration",
                "Reconciliation",
                "PropertyDefinition",
                "Compliance"
              ],
              "type": "string",
              "description": "The available values are: NotDefined, Transaction, Portfolio, Holding, ReferenceHolding, TransactionConfiguration, Instrument, CutLabelDefinition, Analytic, PortfolioGroup, Person, AccessMetadata, Order, UnitResult, MarketData, ConfigurationRecipe, Allocation, Calendar, LegalEntity, Placement, Execution, Block, Participation, Package, OrderInstruction, NextBestAction, CustomEntity, InstrumentEvent, Account, ChartOfAccounts, CustodianAccount, Abor, AborConfiguration, Reconciliation, PropertyDefinition, Compliance"
            }
          },
          {
            "name": "scope",
            "in": "path",
            "description": "Scope of the property definition",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9@+\\-_&]+$",
              "type": "string"
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "Code of the property definition",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9@+\\-_&]+$",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Information about the derived property definition being updated",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateDerivedPropertyDefinitionRequest"
              },
              "example": {
                "displayName": "My Property Display Name",
                "dataTypeId": {
                  "scope": "system",
                  "code": "number"
                },
                "propertyDescription": "My Property Description",
                "derivationFormula": "(Properties[Instrument/default/Price] * Properties[Instrument/default/Cost]) / Properties[Instrument/default/Shares]"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateDerivedPropertyDefinitionRequest"
              },
              "example": {
                "displayName": "My Property Display Name",
                "dataTypeId": {
                  "scope": "system",
                  "code": "number"
                },
                "propertyDescription": "My Property Description",
                "derivationFormula": "(Properties[Instrument/default/Price] * Properties[Instrument/default/Cost]) / Properties[Instrument/default/Shares]"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateDerivedPropertyDefinitionRequest"
              },
              "example": {
                "displayName": "My Property Display Name",
                "dataTypeId": {
                  "scope": "system",
                  "code": "number"
                },
                "propertyDescription": "My Property Description",
                "derivationFormula": "(Properties[Instrument/default/Price] * Properties[Instrument/default/Cost]) / Properties[Instrument/default/Shares]"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateDerivedPropertyDefinitionRequest"
              },
              "example": {
                "displayName": "My Property Display Name",
                "dataTypeId": {
                  "scope": "system",
                  "code": "number"
                },
                "propertyDescription": "My Property Description",
                "derivationFormula": "(Properties[Instrument/default/Price] * Properties[Instrument/default/Cost]) / Properties[Instrument/default/Shares]"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The updated derived property definition",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PropertyDefinition"
                },
                "example": {
                  "href": "https://example.lusid.com/api/properties/demo-scope/demo-code",
                  "key": "Instrument/default/MyDerivedPropertyName",
                  "valueType": "String",
                  "displayName": "Value",
                  "dataTypeId": {
                    "scope": "system",
                    "code": "number"
                  },
                  "type": "Label",
                  "unitSchema": "NoUnits",
                  "domain": "Instrument",
                  "scope": "default",
                  "code": "MyDerivedPropertyName",
                  "valueRequired": true,
                  "lifeTime": "Perpetual",
                  "constraintStyle": "Property",
                  "propertyDefinitionType": "ValueProperty",
                  "propertyDescription": "A demonstration property definition",
                  "derivationFormula": "(Properties[Instrument/default/Price] * Properties[Instrument/default/Cost]) / Properties[Instrument/default/Shares]"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PropertyDefinition"
                },
                "example": {
                  "href": "https://example.lusid.com/api/properties/demo-scope/demo-code",
                  "key": "Instrument/default/MyDerivedPropertyName",
                  "valueType": "String",
                  "displayName": "Value",
                  "dataTypeId": {
                    "scope": "system",
                    "code": "number"
                  },
                  "type": "Label",
                  "unitSchema": "NoUnits",
                  "domain": "Instrument",
                  "scope": "default",
                  "code": "MyDerivedPropertyName",
                  "valueRequired": true,
                  "lifeTime": "Perpetual",
                  "constraintStyle": "Property",
                  "propertyDefinitionType": "ValueProperty",
                  "propertyDescription": "A demonstration property definition",
                  "derivationFormula": "(Properties[Instrument/default/Price] * Properties[Instrument/default/Cost]) / Properties[Instrument/default/Shares]"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PropertyDefinition"
                },
                "example": {
                  "href": "https://example.lusid.com/api/properties/demo-scope/demo-code",
                  "key": "Instrument/default/MyDerivedPropertyName",
                  "valueType": "String",
                  "displayName": "Value",
                  "dataTypeId": {
                    "scope": "system",
                    "code": "number"
                  },
                  "type": "Label",
                  "unitSchema": "NoUnits",
                  "domain": "Instrument",
                  "scope": "default",
                  "code": "MyDerivedPropertyName",
                  "valueRequired": true,
                  "lifeTime": "Perpetual",
                  "constraintStyle": "Property",
                  "propertyDefinitionType": "ValueProperty",
                  "propertyDescription": "A demonstration property definition",
                  "derivationFormula": "(Properties[Instrument/default/Price] * Properties[Instrument/default/Cost]) / Properties[Instrument/default/Shares]"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      }
    },
    "/api/propertydefinitions/{domain}/{scope}/{code}": {
      "put": {
        "tags": [
          "Property Definitions"
        ],
        "summary": "UpdatePropertyDefinition: Update property definition",
        "description": "Update the definition of a specified existing property. Not all elements within a property definition\r\nare modifiable due to the potential implications for values already stored against the property.",
        "operationId": "UpdatePropertyDefinition",
        "parameters": [
          {
            "name": "domain",
            "in": "path",
            "description": "The domain of the property being updated.",
            "required": true,
            "schema": {
              "enum": [
                "NotDefined",
                "Transaction",
                "Portfolio",
                "Holding",
                "ReferenceHolding",
                "TransactionConfiguration",
                "Instrument",
                "CutLabelDefinition",
                "Analytic",
                "PortfolioGroup",
                "Person",
                "AccessMetadata",
                "Order",
                "UnitResult",
                "MarketData",
                "ConfigurationRecipe",
                "Allocation",
                "Calendar",
                "LegalEntity",
                "Placement",
                "Execution",
                "Block",
                "Participation",
                "Package",
                "OrderInstruction",
                "NextBestAction",
                "CustomEntity",
                "InstrumentEvent",
                "Account",
                "ChartOfAccounts",
                "CustodianAccount",
                "Abor",
                "AborConfiguration",
                "Reconciliation",
                "PropertyDefinition",
                "Compliance"
              ],
              "type": "string",
              "description": "The available values are: NotDefined, Transaction, Portfolio, Holding, ReferenceHolding, TransactionConfiguration, Instrument, CutLabelDefinition, Analytic, PortfolioGroup, Person, AccessMetadata, Order, UnitResult, MarketData, ConfigurationRecipe, Allocation, Calendar, LegalEntity, Placement, Execution, Block, Participation, Package, OrderInstruction, NextBestAction, CustomEntity, InstrumentEvent, Account, ChartOfAccounts, CustodianAccount, Abor, AborConfiguration, Reconciliation, PropertyDefinition, Compliance"
            }
          },
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the property being updated.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9@+\\-_&]+$",
              "type": "string"
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The code of the property being updated. Together with the domain and scope this uniquely\r\n            identifies the property.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9@+\\-_&]+$",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The updated definition of the property.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/UpdatePropertyDefinitionRequest"
              },
              "example": {
                "displayName": "MyPropertyName",
                "propertyDescription": "Option Property description"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdatePropertyDefinitionRequest"
              },
              "example": {
                "displayName": "MyPropertyName",
                "propertyDescription": "Option Property description"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdatePropertyDefinitionRequest"
              },
              "example": {
                "displayName": "MyPropertyName",
                "propertyDescription": "Option Property description"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/UpdatePropertyDefinitionRequest"
              },
              "example": {
                "displayName": "MyPropertyName",
                "propertyDescription": "Option Property description"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The updated property definition",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PropertyDefinition"
                },
                "example": {
                  "href": "https://example.lusid.com/api/properties/demo-scope/demo-code",
                  "key": "Instrument/default/MyDerivedPropertyName",
                  "valueType": "String",
                  "displayName": "Value",
                  "dataTypeId": {
                    "scope": "system",
                    "code": "number"
                  },
                  "type": "Label",
                  "unitSchema": "NoUnits",
                  "domain": "Instrument",
                  "scope": "default",
                  "code": "MyDerivedPropertyName",
                  "valueRequired": true,
                  "lifeTime": "Perpetual",
                  "constraintStyle": "Property",
                  "propertyDefinitionType": "ValueProperty",
                  "propertyDescription": "A demonstration property definition",
                  "derivationFormula": "(Properties[Instrument/default/Price] * Properties[Instrument/default/Cost]) / Properties[Instrument/default/Shares]"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PropertyDefinition"
                },
                "example": {
                  "href": "https://example.lusid.com/api/properties/demo-scope/demo-code",
                  "key": "Instrument/default/MyDerivedPropertyName",
                  "valueType": "String",
                  "displayName": "Value",
                  "dataTypeId": {
                    "scope": "system",
                    "code": "number"
                  },
                  "type": "Label",
                  "unitSchema": "NoUnits",
                  "domain": "Instrument",
                  "scope": "default",
                  "code": "MyDerivedPropertyName",
                  "valueRequired": true,
                  "lifeTime": "Perpetual",
                  "constraintStyle": "Property",
                  "propertyDefinitionType": "ValueProperty",
                  "propertyDescription": "A demonstration property definition",
                  "derivationFormula": "(Properties[Instrument/default/Price] * Properties[Instrument/default/Cost]) / Properties[Instrument/default/Shares]"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PropertyDefinition"
                },
                "example": {
                  "href": "https://example.lusid.com/api/properties/demo-scope/demo-code",
                  "key": "Instrument/default/MyDerivedPropertyName",
                  "valueType": "String",
                  "displayName": "Value",
                  "dataTypeId": {
                    "scope": "system",
                    "code": "number"
                  },
                  "type": "Label",
                  "unitSchema": "NoUnits",
                  "domain": "Instrument",
                  "scope": "default",
                  "code": "MyDerivedPropertyName",
                  "valueRequired": true,
                  "lifeTime": "Perpetual",
                  "constraintStyle": "Property",
                  "propertyDefinitionType": "ValueProperty",
                  "propertyDescription": "A demonstration property definition",
                  "derivationFormula": "(Properties[Instrument/default/Price] * Properties[Instrument/default/Cost]) / Properties[Instrument/default/Shares]"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Stable"
      },
      "delete": {
        "tags": [
          "Property Definitions"
        ],
        "summary": "DeletePropertyDefinition: Delete property definition",
        "description": "Delete the definition of the specified property.",
        "operationId": "DeletePropertyDefinition",
        "parameters": [
          {
            "name": "domain",
            "in": "path",
            "description": "The domain of the property to be deleted.",
            "required": true,
            "schema": {
              "enum": [
                "NotDefined",
                "Transaction",
                "Portfolio",
                "Holding",
                "ReferenceHolding",
                "TransactionConfiguration",
                "Instrument",
                "CutLabelDefinition",
                "Analytic",
                "PortfolioGroup",
                "Person",
                "AccessMetadata",
                "Order",
                "UnitResult",
                "MarketData",
                "ConfigurationRecipe",
                "Allocation",
                "Calendar",
                "LegalEntity",
                "Placement",
                "Execution",
                "Block",
                "Participation",
                "Package",
                "OrderInstruction",
                "NextBestAction",
                "CustomEntity",
                "InstrumentEvent",
                "Account",
                "ChartOfAccounts",
                "CustodianAccount",
                "Abor",
                "AborConfiguration",
                "Reconciliation",
                "PropertyDefinition",
                "Compliance"
              ],
              "type": "string",
              "description": "The available values are: NotDefined, Transaction, Portfolio, Holding, ReferenceHolding, TransactionConfiguration, Instrument, CutLabelDefinition, Analytic, PortfolioGroup, Person, AccessMetadata, Order, UnitResult, MarketData, ConfigurationRecipe, Allocation, Calendar, LegalEntity, Placement, Execution, Block, Participation, Package, OrderInstruction, NextBestAction, CustomEntity, InstrumentEvent, Account, ChartOfAccounts, CustodianAccount, Abor, AborConfiguration, Reconciliation, PropertyDefinition, Compliance"
            }
          },
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the property to be deleted.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9@+\\-_&]+$",
              "type": "string"
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The code of the property to be deleted. Together with the domain and scope this uniquely\r\n            identifies the property.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9@+\\-_&]+$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The time that the property definition was deleted",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedEntityResponse"
                },
                "example": {
                  "asAt": "2018-03-05T10:10:10.0000000+00:00"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedEntityResponse"
                },
                "example": {
                  "asAt": "2018-03-05T10:10:10.0000000+00:00"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedEntityResponse"
                },
                "example": {
                  "asAt": "2018-03-05T10:10:10.0000000+00:00"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Stable"
      },
      "get": {
        "tags": [
          "Property Definitions"
        ],
        "summary": "GetPropertyDefinition: Get property definition",
        "description": "Retrieve the definition of a specified property.",
        "operationId": "GetPropertyDefinition",
        "parameters": [
          {
            "name": "domain",
            "in": "path",
            "description": "The domain of the specified property.",
            "required": true,
            "schema": {
              "enum": [
                "NotDefined",
                "Transaction",
                "Portfolio",
                "Holding",
                "ReferenceHolding",
                "TransactionConfiguration",
                "Instrument",
                "CutLabelDefinition",
                "Analytic",
                "PortfolioGroup",
                "Person",
                "AccessMetadata",
                "Order",
                "UnitResult",
                "MarketData",
                "ConfigurationRecipe",
                "Allocation",
                "Calendar",
                "LegalEntity",
                "Placement",
                "Execution",
                "Block",
                "Participation",
                "Package",
                "OrderInstruction",
                "NextBestAction",
                "CustomEntity",
                "InstrumentEvent",
                "Account",
                "ChartOfAccounts",
                "CustodianAccount",
                "Abor",
                "AborConfiguration",
                "Reconciliation",
                "PropertyDefinition",
                "Compliance"
              ],
              "type": "string",
              "description": "The available values are: NotDefined, Transaction, Portfolio, Holding, ReferenceHolding, TransactionConfiguration, Instrument, CutLabelDefinition, Analytic, PortfolioGroup, Person, AccessMetadata, Order, UnitResult, MarketData, ConfigurationRecipe, Allocation, Calendar, LegalEntity, Placement, Execution, Block, Participation, Package, OrderInstruction, NextBestAction, CustomEntity, InstrumentEvent, Account, ChartOfAccounts, CustodianAccount, Abor, AborConfiguration, Reconciliation, PropertyDefinition, Compliance"
            }
          },
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the specified property.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9@+\\-_&]+$",
              "type": "string"
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The code of the specified property. Together with the domain and scope this uniquely\r\n            identifies the property.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9@+\\-_&]+$",
              "type": "string"
            }
          },
          {
            "name": "asAt",
            "in": "query",
            "description": "The asAt datetime at which to retrieve the property definition. Defaults to return\r\n            the latest version of the definition if not specified.",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "x-nullable": true
          },
          {
            "name": "effectiveAt",
            "in": "query",
            "description": "The effective datetime or cut label at which to list properties attached to the Property Definition.\r\n            Defaults to the current LUSID system datetime if not specified.",
            "schema": {
              "type": "string",
              "format": "dateorcutlabel"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The requested property definition",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PropertyDefinition"
                },
                "example": {
                  "href": "https://example.lusid.com/api/properties/demo-scope/demo-code",
                  "key": "Instrument/default/MyDerivedPropertyName",
                  "valueType": "String",
                  "displayName": "Value",
                  "dataTypeId": {
                    "scope": "system",
                    "code": "number"
                  },
                  "type": "Label",
                  "unitSchema": "NoUnits",
                  "domain": "Instrument",
                  "scope": "default",
                  "code": "MyDerivedPropertyName",
                  "valueRequired": true,
                  "lifeTime": "Perpetual",
                  "constraintStyle": "Property",
                  "propertyDefinitionType": "ValueProperty",
                  "propertyDescription": "A demonstration property definition",
                  "derivationFormula": "(Properties[Instrument/default/Price] * Properties[Instrument/default/Cost]) / Properties[Instrument/default/Shares]"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PropertyDefinition"
                },
                "example": {
                  "href": "https://example.lusid.com/api/properties/demo-scope/demo-code",
                  "key": "Instrument/default/MyDerivedPropertyName",
                  "valueType": "String",
                  "displayName": "Value",
                  "dataTypeId": {
                    "scope": "system",
                    "code": "number"
                  },
                  "type": "Label",
                  "unitSchema": "NoUnits",
                  "domain": "Instrument",
                  "scope": "default",
                  "code": "MyDerivedPropertyName",
                  "valueRequired": true,
                  "lifeTime": "Perpetual",
                  "constraintStyle": "Property",
                  "propertyDefinitionType": "ValueProperty",
                  "propertyDescription": "A demonstration property definition",
                  "derivationFormula": "(Properties[Instrument/default/Price] * Properties[Instrument/default/Cost]) / Properties[Instrument/default/Shares]"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PropertyDefinition"
                },
                "example": {
                  "href": "https://example.lusid.com/api/properties/demo-scope/demo-code",
                  "key": "Instrument/default/MyDerivedPropertyName",
                  "valueType": "String",
                  "displayName": "Value",
                  "dataTypeId": {
                    "scope": "system",
                    "code": "number"
                  },
                  "type": "Label",
                  "unitSchema": "NoUnits",
                  "domain": "Instrument",
                  "scope": "default",
                  "code": "MyDerivedPropertyName",
                  "valueRequired": true,
                  "lifeTime": "Perpetual",
                  "constraintStyle": "Property",
                  "propertyDefinitionType": "ValueProperty",
                  "propertyDescription": "A demonstration property definition",
                  "derivationFormula": "(Properties[Instrument/default/Price] * Properties[Instrument/default/Cost]) / Properties[Instrument/default/Shares]"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Stable"
      }
    },
    "/api/propertydefinitions/{domain}/{scope}/{code}/properties": {
      "post": {
        "tags": [
          "Property Definitions"
        ],
        "summary": "[EARLY ACCESS] UpsertPropertyDefinitionProperties: Upsert properties to a property definition",
        "description": "Create or update properties for a particular property definition",
        "operationId": "UpsertPropertyDefinitionProperties",
        "parameters": [
          {
            "name": "domain",
            "in": "path",
            "description": "The domain of the specified property.",
            "required": true,
            "schema": {
              "enum": [
                "NotDefined",
                "Transaction",
                "Portfolio",
                "Holding",
                "ReferenceHolding",
                "TransactionConfiguration",
                "Instrument",
                "CutLabelDefinition",
                "Analytic",
                "PortfolioGroup",
                "Person",
                "AccessMetadata",
                "Order",
                "UnitResult",
                "MarketData",
                "ConfigurationRecipe",
                "Allocation",
                "Calendar",
                "LegalEntity",
                "Placement",
                "Execution",
                "Block",
                "Participation",
                "Package",
                "OrderInstruction",
                "NextBestAction",
                "CustomEntity",
                "InstrumentEvent",
                "Account",
                "ChartOfAccounts",
                "CustodianAccount",
                "Abor",
                "AborConfiguration",
                "Reconciliation",
                "PropertyDefinition",
                "Compliance"
              ],
              "type": "string",
              "description": "The available values are: NotDefined, Transaction, Portfolio, Holding, ReferenceHolding, TransactionConfiguration, Instrument, CutLabelDefinition, Analytic, PortfolioGroup, Person, AccessMetadata, Order, UnitResult, MarketData, ConfigurationRecipe, Allocation, Calendar, LegalEntity, Placement, Execution, Block, Participation, Package, OrderInstruction, NextBestAction, CustomEntity, InstrumentEvent, Account, ChartOfAccounts, CustodianAccount, Abor, AborConfiguration, Reconciliation, PropertyDefinition, Compliance"
            }
          },
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the specified property.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9@+\\-_&]+$",
              "type": "string"
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The code of the specified property. Together with the domain and scope this uniquely",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9@+\\-_&]+$",
              "type": "string"
            }
          },
          {
            "name": "successMode",
            "in": "query",
            "description": "Whether the batch request should fail Atomically or in a Partial fashion - Allowed Values: Atomic, Partial.",
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "type": "string",
              "default": "Partial"
            }
          }
        ],
        "requestBody": {
          "description": "The properties to be created or updated. Each property in\r\n            the request must be keyed by its unique property key. This has the format {domain}/{scope}/{code}, for example\r\n            'PropertyDefinition/Manager/Id'.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/components/schemas/Property"
                }
              },
              "example": {
                "PropertyDefinition/MyScope/FundManagerName": {
                  "key": "PropertyDefinition/MyScope/FundManagerName",
                  "value": {
                    "labelValue": "Smith"
                  },
                  "effectiveFrom": "2018-03-05T00:00:00.0000000+00:00"
                },
                "PropertyDefinition/MyScope/SomeProperty": {
                  "key": "PropertyDefinition/MyScope/SomeProperty",
                  "value": {
                    "labelValue": "SomeValue"
                  },
                  "effectiveFrom": "2016-01-01T00:00:00.0000000+00:00"
                },
                "PropertyDefinition/MyScope/AnotherProperty": {
                  "key": "PropertyDefinition/MyScope/AnotherProperty",
                  "value": {
                    "labelValue": "AnotherValue"
                  },
                  "effectiveFrom": "2018-03-05T00:00:00.0000000+00:00",
                  "effectiveUntil": "2020-01-01T00:00:00.0000000+00:00"
                },
                "PropertyDefinition/MyScope/ReBalanceInterval": {
                  "key": "PropertyDefinition/MyScope/ReBalanceInterval",
                  "value": {
                    "metricValue": {
                      "value": 30,
                      "unit": "Days"
                    }
                  }
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/components/schemas/Property"
                }
              },
              "example": {
                "PropertyDefinition/MyScope/FundManagerName": {
                  "key": "PropertyDefinition/MyScope/FundManagerName",
                  "value": {
                    "labelValue": "Smith"
                  },
                  "effectiveFrom": "2018-03-05T00:00:00.0000000+00:00"
                },
                "PropertyDefinition/MyScope/SomeProperty": {
                  "key": "PropertyDefinition/MyScope/SomeProperty",
                  "value": {
                    "labelValue": "SomeValue"
                  },
                  "effectiveFrom": "2016-01-01T00:00:00.0000000+00:00"
                },
                "PropertyDefinition/MyScope/AnotherProperty": {
                  "key": "PropertyDefinition/MyScope/AnotherProperty",
                  "value": {
                    "labelValue": "AnotherValue"
                  },
                  "effectiveFrom": "2018-03-05T00:00:00.0000000+00:00",
                  "effectiveUntil": "2020-01-01T00:00:00.0000000+00:00"
                },
                "PropertyDefinition/MyScope/ReBalanceInterval": {
                  "key": "PropertyDefinition/MyScope/ReBalanceInterval",
                  "value": {
                    "metricValue": {
                      "value": 30,
                      "unit": "Days"
                    }
                  }
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/components/schemas/Property"
                }
              },
              "example": {
                "PropertyDefinition/MyScope/FundManagerName": {
                  "key": "PropertyDefinition/MyScope/FundManagerName",
                  "value": {
                    "labelValue": "Smith"
                  },
                  "effectiveFrom": "2018-03-05T00:00:00.0000000+00:00"
                },
                "PropertyDefinition/MyScope/SomeProperty": {
                  "key": "PropertyDefinition/MyScope/SomeProperty",
                  "value": {
                    "labelValue": "SomeValue"
                  },
                  "effectiveFrom": "2016-01-01T00:00:00.0000000+00:00"
                },
                "PropertyDefinition/MyScope/AnotherProperty": {
                  "key": "PropertyDefinition/MyScope/AnotherProperty",
                  "value": {
                    "labelValue": "AnotherValue"
                  },
                  "effectiveFrom": "2018-03-05T00:00:00.0000000+00:00",
                  "effectiveUntil": "2020-01-01T00:00:00.0000000+00:00"
                },
                "PropertyDefinition/MyScope/ReBalanceInterval": {
                  "key": "PropertyDefinition/MyScope/ReBalanceInterval",
                  "value": {
                    "metricValue": {
                      "value": 30,
                      "unit": "Days"
                    }
                  }
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/components/schemas/Property"
                }
              },
              "example": {
                "PropertyDefinition/MyScope/FundManagerName": {
                  "key": "PropertyDefinition/MyScope/FundManagerName",
                  "value": {
                    "labelValue": "Smith"
                  },
                  "effectiveFrom": "2018-03-05T00:00:00.0000000+00:00"
                },
                "PropertyDefinition/MyScope/SomeProperty": {
                  "key": "PropertyDefinition/MyScope/SomeProperty",
                  "value": {
                    "labelValue": "SomeValue"
                  },
                  "effectiveFrom": "2016-01-01T00:00:00.0000000+00:00"
                },
                "PropertyDefinition/MyScope/AnotherProperty": {
                  "key": "PropertyDefinition/MyScope/AnotherProperty",
                  "value": {
                    "labelValue": "AnotherValue"
                  },
                  "effectiveFrom": "2018-03-05T00:00:00.0000000+00:00",
                  "effectiveUntil": "2020-01-01T00:00:00.0000000+00:00"
                },
                "PropertyDefinition/MyScope/ReBalanceInterval": {
                  "key": "PropertyDefinition/MyScope/ReBalanceInterval",
                  "value": {
                    "metricValue": {
                      "value": 30,
                      "unit": "Days"
                    }
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The asAt datetime at which the properties were updated or created.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/BatchUpsertPropertyDefinitionPropertiesResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BatchUpsertPropertyDefinitionPropertiesResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/BatchUpsertPropertyDefinitionPropertiesResponse"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      }
    },
    "/api/propertydefinitions/{domain}/{scope}/{code}/properties/$delete": {
      "post": {
        "tags": [
          "Property Definitions"
        ],
        "summary": "[EARLY ACCESS] DeletePropertyDefinitionProperties: Delete property definition properties",
        "description": "Delete one or more properties from a single property definition. If the properties are time-variant then an effective date time from which the\r\nproperties will be deleted must be specified. If the properties are perpetual then it is invalid to specify an effective date time for deletion.",
        "operationId": "DeletePropertyDefinitionProperties",
        "parameters": [
          {
            "name": "domain",
            "in": "path",
            "description": "The domain of the property definition to delete properties from.",
            "required": true,
            "schema": {
              "enum": [
                "NotDefined",
                "Transaction",
                "Portfolio",
                "Holding",
                "ReferenceHolding",
                "TransactionConfiguration",
                "Instrument",
                "CutLabelDefinition",
                "Analytic",
                "PortfolioGroup",
                "Person",
                "AccessMetadata",
                "Order",
                "UnitResult",
                "MarketData",
                "ConfigurationRecipe",
                "Allocation",
                "Calendar",
                "LegalEntity",
                "Placement",
                "Execution",
                "Block",
                "Participation",
                "Package",
                "OrderInstruction",
                "NextBestAction",
                "CustomEntity",
                "InstrumentEvent",
                "Account",
                "ChartOfAccounts",
                "CustodianAccount",
                "Abor",
                "AborConfiguration",
                "Reconciliation",
                "PropertyDefinition",
                "Compliance"
              ],
              "type": "string",
              "description": "The available values are: NotDefined, Transaction, Portfolio, Holding, ReferenceHolding, TransactionConfiguration, Instrument, CutLabelDefinition, Analytic, PortfolioGroup, Person, AccessMetadata, Order, UnitResult, MarketData, ConfigurationRecipe, Allocation, Calendar, LegalEntity, Placement, Execution, Block, Participation, Package, OrderInstruction, NextBestAction, CustomEntity, InstrumentEvent, Account, ChartOfAccounts, CustodianAccount, Abor, AborConfiguration, Reconciliation, PropertyDefinition, Compliance"
            }
          },
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the property definition to delete properties from.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9@+\\-_&]+$",
              "type": "string"
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The code of the property definition to delete properties from.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9@+\\-_&]+$",
              "type": "string"
            }
          },
          {
            "name": "effectiveAt",
            "in": "query",
            "description": "The effective datetime or cut label at which to delete time-variant properties from.\r\n            The property must exist at the specified 'effectiveAt' datetime. If the 'effectiveAt' is not provided or is before\r\n            the time-variant property exists then a failure is returned. Do not specify this parameter if an of the properties to delete are perpetual.",
            "schema": {
              "type": "string",
              "format": "dateorcutlabel"
            }
          }
        ],
        "requestBody": {
          "description": "The property keys of the properties to delete. These must take the format\r\n            {domain}/{scope}/{code} e.g \"PropertyDefinition/myScope/someAttributeKey\". Each property must be from the \"PropertyDefinition\" domain.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string",
                  "description": "The key that uniquely identifies the property. It has the format {domain}/{scope}/{code}."
                }
              },
              "example": [
                "PropertyDefinition/MyScope/MyPropertyName",
                "PropertyDefinition/MyScope/MyPropertyName2"
              ]
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string",
                  "description": "The key that uniquely identifies the property. It has the format {domain}/{scope}/{code}."
                }
              },
              "example": [
                "PropertyDefinition/MyScope/MyPropertyName",
                "PropertyDefinition/MyScope/MyPropertyName2"
              ]
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string",
                  "description": "The key that uniquely identifies the property. It has the format {domain}/{scope}/{code}."
                }
              },
              "example": [
                "PropertyDefinition/MyScope/MyPropertyName",
                "PropertyDefinition/MyScope/MyPropertyName2"
              ]
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string",
                  "description": "The key that uniquely identifies the property. It has the format {domain}/{scope}/{code}."
                }
              },
              "example": [
                "PropertyDefinition/MyScope/MyPropertyName",
                "PropertyDefinition/MyScope/MyPropertyName2"
              ]
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The datetime that the properties were deleted from the specified definition",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedEntityResponse"
                },
                "example": {
                  "asAt": "2018-03-05T10:10:10.0000000+00:00"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedEntityResponse"
                },
                "example": {
                  "asAt": "2018-03-05T10:10:10.0000000+00:00"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedEntityResponse"
                },
                "example": {
                  "asAt": "2018-03-05T10:10:10.0000000+00:00"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      }
    },
    "/api/propertydefinitions/{domain}/{scope}/{code}/properties/time-series": {
      "get": {
        "tags": [
          "Property Definitions"
        ],
        "summary": "[EARLY ACCESS] GetPropertyDefinitionPropertyTimeSeries: Get Property Definition Property Time Series",
        "description": "List the complete time series of a property definition property.",
        "operationId": "GetPropertyDefinitionPropertyTimeSeries",
        "parameters": [
          {
            "name": "domain",
            "in": "path",
            "description": "The domain of the property definition to which the property is attached",
            "required": true,
            "schema": {
              "enum": [
                "NotDefined",
                "Transaction",
                "Portfolio",
                "Holding",
                "ReferenceHolding",
                "TransactionConfiguration",
                "Instrument",
                "CutLabelDefinition",
                "Analytic",
                "PortfolioGroup",
                "Person",
                "AccessMetadata",
                "Order",
                "UnitResult",
                "MarketData",
                "ConfigurationRecipe",
                "Allocation",
                "Calendar",
                "LegalEntity",
                "Placement",
                "Execution",
                "Block",
                "Participation",
                "Package",
                "OrderInstruction",
                "NextBestAction",
                "CustomEntity",
                "InstrumentEvent",
                "Account",
                "ChartOfAccounts",
                "CustodianAccount",
                "Abor",
                "AborConfiguration",
                "Reconciliation",
                "PropertyDefinition",
                "Compliance"
              ],
              "type": "string",
              "description": "The available values are: NotDefined, Transaction, Portfolio, Holding, ReferenceHolding, TransactionConfiguration, Instrument, CutLabelDefinition, Analytic, PortfolioGroup, Person, AccessMetadata, Order, UnitResult, MarketData, ConfigurationRecipe, Allocation, Calendar, LegalEntity, Placement, Execution, Block, Participation, Package, OrderInstruction, NextBestAction, CustomEntity, InstrumentEvent, Account, ChartOfAccounts, CustodianAccount, Abor, AborConfiguration, Reconciliation, PropertyDefinition, Compliance"
            }
          },
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the property definition to which the property is attached",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9@+\\-_&]+$",
              "type": "string"
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The code of the property definition to which the property is attached",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9@+\\-_&]+$",
              "type": "string"
            }
          },
          {
            "name": "propertyKey",
            "in": "query",
            "description": "The property key of the property whose history to show. This must be from the \"Property Definition\" domain and in the format\r\n            {domain}/{scope}/{code}, for example \"PropertyDefinition/myScope/someAttributeKey\".",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The key that uniquely identifies the property. It has the format {domain}/{scope}/{code}."
            }
          },
          {
            "name": "asAt",
            "in": "query",
            "description": "The asAt datetime at which to show the history. Defaults to the current datetime if not specified.",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "x-nullable": true
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Expression to filter the results. Read more about filtering results from LUSID here https://support.lusid.com/filtering-results-from-lusid.",
            "schema": {
              "maxLength": 16384,
              "minLength": 0,
              "pattern": "^[\\s\\S]*$",
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "The pagination token to use to continue listing properties from a previous call to get property time series.\r\n            This value is returned from the previous call. If a pagination token is provided the filter and asAt fields\r\n            must not have changed since the original request.",
            "schema": {
              "maxLength": 500,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\+/]*={0,3}$",
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "When paginating, limit the number of returned results to this many.",
            "schema": {
              "maximum": 5000,
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "description": "The time series of the property",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfPropertyInterval"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfPropertyInterval"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfPropertyInterval"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      }
    },
    "/api/quotes/{scope}": {
      "post": {
        "tags": [
          "Quotes"
        ],
        "summary": "UpsertQuotes: Upsert quotes",
        "description": "Update or insert one or more quotes in a single scope. A quote will be updated if it already exists\r\nand inserted if it does not.\r\n            \r\nIn the request each quote must be keyed by a unique correlation id. This id is ephemeral and is not stored by LUSID.\r\nIt serves only as a way to easily identify each quote in the response.\r\n            \r\nThe response will return both the collection of successfully updated or inserted quotes, as well as those that failed.\r\nFor the failures a reason will be provided explaining why the quote could not be updated or inserted.\r\n            \r\nIt is important to always check the failed set for any unsuccessful results.\n\nThe maximum number of quotes that this method can upsert per request is 2,000.",
        "operationId": "UpsertQuotes",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope to use when updating or inserting the quotes.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The quotes to update or insert keyed by a unique correlation id.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/components/schemas/UpsertQuoteRequest"
                }
              },
              "example": {
                "DS-VOD-PRICE-MID": {
                  "quoteId": {
                    "quoteSeriesId": {
                      "provider": "DataScope",
                      "priceSource": "",
                      "instrumentId": "GB00BH4HKS39",
                      "instrumentIdType": "Isin",
                      "quoteType": "Price",
                      "field": "mid"
                    },
                    "effectiveAt": "2018-03-05T00:00:00.0000000+00:00"
                  },
                  "metricValue": {
                    "value": 1460,
                    "unit": "CNY"
                  }
                },
                "O-C-EURUSD-PRICE-BID": {
                  "quoteId": {
                    "quoteSeriesId": {
                      "provider": "Oanda",
                      "priceSource": "Citi",
                      "instrumentId": "EUR/USD",
                      "instrumentIdType": "CurrencyPair",
                      "quoteType": "Price",
                      "field": "bid"
                    },
                    "effectiveAt": "2018-03-05T00:00:00.0000000+00:00"
                  },
                  "metricValue": {
                    "value": 1.367,
                    "unit": "EUR/USD"
                  },
                  "lineage": "Oanda/FxRates_2018-10-22T00:00:00.0000000+00:00.csv"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/components/schemas/UpsertQuoteRequest"
                }
              },
              "example": {
                "DS-VOD-PRICE-MID": {
                  "quoteId": {
                    "quoteSeriesId": {
                      "provider": "DataScope",
                      "priceSource": "",
                      "instrumentId": "GB00BH4HKS39",
                      "instrumentIdType": "Isin",
                      "quoteType": "Price",
                      "field": "mid"
                    },
                    "effectiveAt": "2018-03-05T00:00:00.0000000+00:00"
                  },
                  "metricValue": {
                    "value": 1460,
                    "unit": "CNY"
                  }
                },
                "O-C-EURUSD-PRICE-BID": {
                  "quoteId": {
                    "quoteSeriesId": {
                      "provider": "Oanda",
                      "priceSource": "Citi",
                      "instrumentId": "EUR/USD",
                      "instrumentIdType": "CurrencyPair",
                      "quoteType": "Price",
                      "field": "bid"
                    },
                    "effectiveAt": "2018-03-05T00:00:00.0000000+00:00"
                  },
                  "metricValue": {
                    "value": 1.367,
                    "unit": "EUR/USD"
                  },
                  "lineage": "Oanda/FxRates_2018-10-22T00:00:00.0000000+00:00.csv"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/components/schemas/UpsertQuoteRequest"
                }
              },
              "example": {
                "DS-VOD-PRICE-MID": {
                  "quoteId": {
                    "quoteSeriesId": {
                      "provider": "DataScope",
                      "priceSource": "",
                      "instrumentId": "GB00BH4HKS39",
                      "instrumentIdType": "Isin",
                      "quoteType": "Price",
                      "field": "mid"
                    },
                    "effectiveAt": "2018-03-05T00:00:00.0000000+00:00"
                  },
                  "metricValue": {
                    "value": 1460,
                    "unit": "CNY"
                  }
                },
                "O-C-EURUSD-PRICE-BID": {
                  "quoteId": {
                    "quoteSeriesId": {
                      "provider": "Oanda",
                      "priceSource": "Citi",
                      "instrumentId": "EUR/USD",
                      "instrumentIdType": "CurrencyPair",
                      "quoteType": "Price",
                      "field": "bid"
                    },
                    "effectiveAt": "2018-03-05T00:00:00.0000000+00:00"
                  },
                  "metricValue": {
                    "value": 1.367,
                    "unit": "EUR/USD"
                  },
                  "lineage": "Oanda/FxRates_2018-10-22T00:00:00.0000000+00:00.csv"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/components/schemas/UpsertQuoteRequest"
                }
              },
              "example": {
                "DS-VOD-PRICE-MID": {
                  "quoteId": {
                    "quoteSeriesId": {
                      "provider": "DataScope",
                      "priceSource": "",
                      "instrumentId": "GB00BH4HKS39",
                      "instrumentIdType": "Isin",
                      "quoteType": "Price",
                      "field": "mid"
                    },
                    "effectiveAt": "2018-03-05T00:00:00.0000000+00:00"
                  },
                  "metricValue": {
                    "value": 1460,
                    "unit": "CNY"
                  }
                },
                "O-C-EURUSD-PRICE-BID": {
                  "quoteId": {
                    "quoteSeriesId": {
                      "provider": "Oanda",
                      "priceSource": "Citi",
                      "instrumentId": "EUR/USD",
                      "instrumentIdType": "CurrencyPair",
                      "quoteType": "Price",
                      "field": "bid"
                    },
                    "effectiveAt": "2018-03-05T00:00:00.0000000+00:00"
                  },
                  "metricValue": {
                    "value": 1.367,
                    "unit": "EUR/USD"
                  },
                  "lineage": "Oanda/FxRates_2018-10-22T00:00:00.0000000+00:00.csv"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The successfully updated or inserted quotes along with any failures",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UpsertQuotesResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpsertQuotesResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpsertQuotesResponse"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Stable"
      },
      "get": {
        "tags": [
          "Quotes"
        ],
        "summary": "ListQuotesForScope: List quotes for scope",
        "description": "List all the quotes from a single scope at the specified date/time",
        "operationId": "ListQuotesForScope",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the quotes to list.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string"
            }
          },
          {
            "name": "asAt",
            "in": "query",
            "description": "The asAt datetime at which to list the quotes. Defaults to latest if not specified.",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "x-nullable": true
          },
          {
            "name": "page",
            "in": "query",
            "description": "The pagination token to use to continue listing quotes from a previous call to list quotes.\r\n            This value is returned from the previous call. If a pagination token is provided the sortBy, filter, effectiveAt, and asAt fields\r\n            must not have changed since the original request. Also, if set, a start value cannot be provided.",
            "schema": {
              "maxLength": 500,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\+/]*={0,3}$",
              "type": "string"
            }
          },
          {
            "name": "start",
            "in": "query",
            "description": "When paginating, skip this number of results.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-nullable": true
          },
          {
            "name": "limit",
            "in": "query",
            "description": "When paginating, limit the number of returned results to this many.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-nullable": true
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Expression to filter the result set.\r\n            Read more about filtering results from LUSID here https://support.lusid.com/filtering-results-from-lusid.",
            "schema": {
              "maxLength": 16384,
              "minLength": 0,
              "pattern": "^[\\s\\S]*$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The requested quotes",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfQuote"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfQuote"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfQuote"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Stable"
      }
    },
    "/api/quotes/{scope}/$delete": {
      "post": {
        "tags": [
          "Quotes"
        ],
        "summary": "DeleteQuotes: Delete quotes",
        "description": "Delete one or more specified quotes from a single scope. A quote is identified by its unique id which includes information about\r\nthe type of quote as well as the exact effective datetime (to the microsecond) from which it became valid.\r\n            \r\nIn the request each quote must be keyed by a unique correlation id. This id is ephemeral and is not stored by LUSID.\r\nIt serves only as a way to easily identify each quote in the response.\r\n            \r\nThe response will return both the collection of successfully deleted quotes, as well as those that failed.\r\nFor the failures a reason will be provided explaining why the quote could not be deleted.\r\n            \r\nIt is important to always check the failed set for any unsuccessful results.",
        "operationId": "DeleteQuotes",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the quotes to delete.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The quotes to delete keyed by a unique correlation id.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/components/schemas/QuoteId"
                }
              },
              "example": {
                "DS-VOD-PRICE-MID": {
                  "quoteSeriesId": {
                    "provider": "DataScope",
                    "priceSource": "",
                    "instrumentId": "GB00BH4HKS39",
                    "instrumentIdType": "Isin",
                    "quoteType": "Price",
                    "field": "mid"
                  },
                  "effectiveAt": "2018-03-05T00:00:00.0000000+00:00"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/components/schemas/QuoteId"
                }
              },
              "example": {
                "DS-VOD-PRICE-MID": {
                  "quoteSeriesId": {
                    "provider": "DataScope",
                    "priceSource": "",
                    "instrumentId": "GB00BH4HKS39",
                    "instrumentIdType": "Isin",
                    "quoteType": "Price",
                    "field": "mid"
                  },
                  "effectiveAt": "2018-03-05T00:00:00.0000000+00:00"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/components/schemas/QuoteId"
                }
              },
              "example": {
                "DS-VOD-PRICE-MID": {
                  "quoteSeriesId": {
                    "provider": "DataScope",
                    "priceSource": "",
                    "instrumentId": "GB00BH4HKS39",
                    "instrumentIdType": "Isin",
                    "quoteType": "Price",
                    "field": "mid"
                  },
                  "effectiveAt": "2018-03-05T00:00:00.0000000+00:00"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/components/schemas/QuoteId"
                }
              },
              "example": {
                "DS-VOD-PRICE-MID": {
                  "quoteSeriesId": {
                    "provider": "DataScope",
                    "priceSource": "",
                    "instrumentId": "GB00BH4HKS39",
                    "instrumentIdType": "Isin",
                    "quoteType": "Price",
                    "field": "mid"
                  },
                  "effectiveAt": "2018-03-05T00:00:00.0000000+00:00"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The successfully deleted quotes along with any failures",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/AnnulQuotesResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AnnulQuotesResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/AnnulQuotesResponse"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Stable"
      }
    },
    "/api/quotes/{scope}/$deprecated": {
      "get": {
        "tags": [
          "Quotes"
        ],
        "summary": "[DEPRECATED] ListQuotes: List quotes",
        "description": "List all the quotes from a single scope at the specified date/time\r\nPlease use M:Finbourne.WebApi.Controllers.QuotesController.ListQuotesForScope(System.String,System.Nullable{System.DateTimeOffset},System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.String) - the signature and behaviour of this endpoint will be changing to omit scope",
        "operationId": "ListQuotes",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the quotes to list.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string"
            }
          },
          {
            "name": "asAt",
            "in": "query",
            "description": "The asAt datetime at which to list the quotes. Defaults to latest if not specified.",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "x-nullable": true
          },
          {
            "name": "page",
            "in": "query",
            "description": "The pagination token to use to continue listing quotes from a previous call to list quotes.\r\n            This value is returned from the previous call. If a pagination token is provided the sortBy, filter, effectiveAt, and asAt fields\r\n            must not have changed since the original request. Also, if set, a start value cannot be provided.",
            "schema": {
              "maxLength": 500,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\+/]*={0,3}$",
              "type": "string"
            }
          },
          {
            "name": "start",
            "in": "query",
            "description": "When paginating, skip this number of results.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-nullable": true
          },
          {
            "name": "limit",
            "in": "query",
            "description": "When paginating, limit the number of returned results to this many.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-nullable": true
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Expression to filter the result set.\r\n            Read more about filtering results from LUSID here https://support.lusid.com/filtering-results-from-lusid.",
            "schema": {
              "maxLength": 16384,
              "minLength": 0,
              "pattern": "^[\\s\\S]*$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The requested quotes",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfQuote"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfQuote"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfQuote"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Deprecated"
      }
    },
    "/api/quotes/{scope}/$get": {
      "post": {
        "tags": [
          "Quotes"
        ],
        "summary": "[EARLY ACCESS] GetQuotes: Get quotes",
        "description": "Get one or more quotes from a single scope.\r\n            \r\nEach quote can be identified by its time invariant quote series id.\r\n            \r\nFor each quote series id LUSID will return the most recent quote with respect to the provided (or default) effective datetime. \r\n            \r\nAn optional maximum age range window can be specified which defines how far back to look back for a quote from the specified effective datetime.\r\nLUSID will return the most recent quote within this window.\r\n            \r\nIn the request each quote series id must be keyed by a unique correlation id. This id is ephemeral and is not stored by LUSID.\r\nIt serves only as a way to easily identify each quote in the response.\r\n            \r\nThe response will return three collections. One, the successfully retrieved quotes. Two, those that had a\r\nvalid quote series id but could not be found. Three, those that failed because LUSID could not construct a valid quote series id from the request.\r\n\r\nFor the quotes that failed or could not be found a reason will be provided explaining why the quote could not be retrieved.\r\n            \r\nIt is important to always check the failed and not found sets for any unsuccessful results.\n\nThe maximum number of quotes that this method can get per request is 2,000.",
        "operationId": "GetQuotes",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the quotes to retrieve.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string"
            }
          },
          {
            "name": "effectiveAt",
            "in": "query",
            "description": "The effective datetime or cut label at which to retrieve the quotes. Defaults to the current LUSID system datetime if not specified.",
            "schema": {
              "type": "string",
              "format": "dateorcutlabel"
            }
          },
          {
            "name": "asAt",
            "in": "query",
            "description": "The asAt datetime at which to retrieve the quotes. Defaults to return the latest version of each quote if not specified.",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "x-nullable": true
          },
          {
            "name": "maxAge",
            "in": "query",
            "description": "The duration of the look back window in an ISO8601 time interval format e.g. P1Y2M3DT4H30M (1 year, 2 months, 3 days, 4 hours and 30 minutes).\r\n             This is subtracted from the provided effectiveAt datetime or cut label to generate a effective datetime window inside which a quote must exist to be retrieved.",
            "schema": {
              "type": "string",
              "format": "date-span"
            }
          }
        ],
        "requestBody": {
          "description": "The time invariant quote series ids of the quotes to retrieve. These need to be\r\n             keyed by a unique correlation id allowing the retrieved quote to be identified in the response.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/components/schemas/QuoteSeriesId"
                }
              },
              "example": {
                "DS-VOD-PRICE-MID": {
                  "provider": "DataScope",
                  "priceSource": "",
                  "instrumentId": "GB00BH4HKS39",
                  "instrumentIdType": "Isin",
                  "quoteType": "Price",
                  "field": "mid"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/components/schemas/QuoteSeriesId"
                }
              },
              "example": {
                "DS-VOD-PRICE-MID": {
                  "provider": "DataScope",
                  "priceSource": "",
                  "instrumentId": "GB00BH4HKS39",
                  "instrumentIdType": "Isin",
                  "quoteType": "Price",
                  "field": "mid"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/components/schemas/QuoteSeriesId"
                }
              },
              "example": {
                "DS-VOD-PRICE-MID": {
                  "provider": "DataScope",
                  "priceSource": "",
                  "instrumentId": "GB00BH4HKS39",
                  "instrumentIdType": "Isin",
                  "quoteType": "Price",
                  "field": "mid"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/components/schemas/QuoteSeriesId"
                }
              },
              "example": {
                "DS-VOD-PRICE-MID": {
                  "provider": "DataScope",
                  "priceSource": "",
                  "instrumentId": "GB00BH4HKS39",
                  "instrumentIdType": "Isin",
                  "quoteType": "Price",
                  "field": "mid"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The successfully retrieved quotes along with any failures",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/GetQuotesResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetQuotesResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetQuotesResponse"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      }
    },
    "/api/recipes": {
      "post": {
        "tags": [
          "Configuration Recipe"
        ],
        "summary": "UpsertConfigurationRecipe: Upsert a Configuration Recipe. This creates or updates the data in Lusid.",
        "description": "Update or insert one Configuration Recipe in a single scope. An item will be updated if it already exists\r\nand inserted if it does not.\r\n            \r\nThe response will return the successfully updated or inserted Configuration Recipe or failure message if unsuccessful\r\n            \r\nIt is important to always check to verify success (or failure).",
        "operationId": "UpsertConfigurationRecipe",
        "requestBody": {
          "description": "The Configuration Recipe to update or insert",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/UpsertRecipeRequest"
              },
              "example": {
                "configurationRecipe": {
                  "scope": "scopeName",
                  "code": "MyNamedRecipe12345",
                  "market": {
                    "marketRules": [
                      {
                        "key": "Fx.CurrencyPair.*",
                        "supplier": "DataScope",
                        "dataScope": "SomeScopeToLookAt",
                        "quoteType": "Rate",
                        "field": "Mid",
                        "priceSource": "",
                        "sourceSystem": "Lusid"
                      }
                    ],
                    "suppliers": {},
                    "options": {
                      "defaultSupplier": "Lusid",
                      "defaultInstrumentCodeType": "LusidInstrumentId",
                      "defaultScope": "default",
                      "attemptToInferMissingFx": false,
                      "calendarScope": "CoppClarkHolidayCalendars",
                      "conventionScope": "Conventions"
                    },
                    "specificRules": []
                  },
                  "pricing": {
                    "modelRules": [],
                    "modelChoice": {},
                    "options": {
                      "modelSelection": {
                        "library": "Lusid",
                        "model": "SimpleStatic"
                      },
                      "useInstrumentTypeToDeterminePricer": false,
                      "allowAnyInstrumentsWithSecUidToPriceOffLookup": false,
                      "allowPartiallySuccessfulEvaluation": false,
                      "produceSeparateResultForLinearOtcLegs": false,
                      "enableUseOfCachedUnitResults": false,
                      "windowValuationOnInstrumentStartEnd": false,
                      "removeContingentCashflowsInPaymentDiary": false,
                      "useChildSubHoldingKeysForPortfolioExpansion": false,
                      "validateDomesticAndQuoteCurrenciesAreConsistent": false,
                      "conservedQuantityForLookthroughExpansion": "PV"
                    },
                    "resultDataRules": []
                  },
                  "aggregation": {
                    "options": {
                      "useAnsiLikeSyntax": false,
                      "allowPartialEntitlementSuccess": false,
                      "applyIso4217Rounding": false
                    }
                  },
                  "inheritedRecipes": [],
                  "description": "",
                  "holding": {
                    "taxLotLevelHoldings": true
                  }
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpsertRecipeRequest"
              },
              "example": {
                "configurationRecipe": {
                  "scope": "scopeName",
                  "code": "MyNamedRecipe12345",
                  "market": {
                    "marketRules": [
                      {
                        "key": "Fx.CurrencyPair.*",
                        "supplier": "DataScope",
                        "dataScope": "SomeScopeToLookAt",
                        "quoteType": "Rate",
                        "field": "Mid",
                        "priceSource": "",
                        "sourceSystem": "Lusid"
                      }
                    ],
                    "suppliers": {},
                    "options": {
                      "defaultSupplier": "Lusid",
                      "defaultInstrumentCodeType": "LusidInstrumentId",
                      "defaultScope": "default",
                      "attemptToInferMissingFx": false,
                      "calendarScope": "CoppClarkHolidayCalendars",
                      "conventionScope": "Conventions"
                    },
                    "specificRules": []
                  },
                  "pricing": {
                    "modelRules": [],
                    "modelChoice": {},
                    "options": {
                      "modelSelection": {
                        "library": "Lusid",
                        "model": "SimpleStatic"
                      },
                      "useInstrumentTypeToDeterminePricer": false,
                      "allowAnyInstrumentsWithSecUidToPriceOffLookup": false,
                      "allowPartiallySuccessfulEvaluation": false,
                      "produceSeparateResultForLinearOtcLegs": false,
                      "enableUseOfCachedUnitResults": false,
                      "windowValuationOnInstrumentStartEnd": false,
                      "removeContingentCashflowsInPaymentDiary": false,
                      "useChildSubHoldingKeysForPortfolioExpansion": false,
                      "validateDomesticAndQuoteCurrenciesAreConsistent": false,
                      "conservedQuantityForLookthroughExpansion": "PV"
                    },
                    "resultDataRules": []
                  },
                  "aggregation": {
                    "options": {
                      "useAnsiLikeSyntax": false,
                      "allowPartialEntitlementSuccess": false,
                      "applyIso4217Rounding": false
                    }
                  },
                  "inheritedRecipes": [],
                  "description": "",
                  "holding": {
                    "taxLotLevelHoldings": true
                  }
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/UpsertRecipeRequest"
              },
              "example": {
                "configurationRecipe": {
                  "scope": "scopeName",
                  "code": "MyNamedRecipe12345",
                  "market": {
                    "marketRules": [
                      {
                        "key": "Fx.CurrencyPair.*",
                        "supplier": "DataScope",
                        "dataScope": "SomeScopeToLookAt",
                        "quoteType": "Rate",
                        "field": "Mid",
                        "priceSource": "",
                        "sourceSystem": "Lusid"
                      }
                    ],
                    "suppliers": {},
                    "options": {
                      "defaultSupplier": "Lusid",
                      "defaultInstrumentCodeType": "LusidInstrumentId",
                      "defaultScope": "default",
                      "attemptToInferMissingFx": false,
                      "calendarScope": "CoppClarkHolidayCalendars",
                      "conventionScope": "Conventions"
                    },
                    "specificRules": []
                  },
                  "pricing": {
                    "modelRules": [],
                    "modelChoice": {},
                    "options": {
                      "modelSelection": {
                        "library": "Lusid",
                        "model": "SimpleStatic"
                      },
                      "useInstrumentTypeToDeterminePricer": false,
                      "allowAnyInstrumentsWithSecUidToPriceOffLookup": false,
                      "allowPartiallySuccessfulEvaluation": false,
                      "produceSeparateResultForLinearOtcLegs": false,
                      "enableUseOfCachedUnitResults": false,
                      "windowValuationOnInstrumentStartEnd": false,
                      "removeContingentCashflowsInPaymentDiary": false,
                      "useChildSubHoldingKeysForPortfolioExpansion": false,
                      "validateDomesticAndQuoteCurrenciesAreConsistent": false,
                      "conservedQuantityForLookthroughExpansion": "PV"
                    },
                    "resultDataRules": []
                  },
                  "aggregation": {
                    "options": {
                      "useAnsiLikeSyntax": false,
                      "allowPartialEntitlementSuccess": false,
                      "applyIso4217Rounding": false
                    }
                  },
                  "inheritedRecipes": [],
                  "description": "",
                  "holding": {
                    "taxLotLevelHoldings": true
                  }
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/UpsertRecipeRequest"
              },
              "example": {
                "configurationRecipe": {
                  "scope": "scopeName",
                  "code": "MyNamedRecipe12345",
                  "market": {
                    "marketRules": [
                      {
                        "key": "Fx.CurrencyPair.*",
                        "supplier": "DataScope",
                        "dataScope": "SomeScopeToLookAt",
                        "quoteType": "Rate",
                        "field": "Mid",
                        "priceSource": "",
                        "sourceSystem": "Lusid"
                      }
                    ],
                    "suppliers": {},
                    "options": {
                      "defaultSupplier": "Lusid",
                      "defaultInstrumentCodeType": "LusidInstrumentId",
                      "defaultScope": "default",
                      "attemptToInferMissingFx": false,
                      "calendarScope": "CoppClarkHolidayCalendars",
                      "conventionScope": "Conventions"
                    },
                    "specificRules": []
                  },
                  "pricing": {
                    "modelRules": [],
                    "modelChoice": {},
                    "options": {
                      "modelSelection": {
                        "library": "Lusid",
                        "model": "SimpleStatic"
                      },
                      "useInstrumentTypeToDeterminePricer": false,
                      "allowAnyInstrumentsWithSecUidToPriceOffLookup": false,
                      "allowPartiallySuccessfulEvaluation": false,
                      "produceSeparateResultForLinearOtcLegs": false,
                      "enableUseOfCachedUnitResults": false,
                      "windowValuationOnInstrumentStartEnd": false,
                      "removeContingentCashflowsInPaymentDiary": false,
                      "useChildSubHoldingKeysForPortfolioExpansion": false,
                      "validateDomesticAndQuoteCurrenciesAreConsistent": false,
                      "conservedQuantityForLookthroughExpansion": "PV"
                    },
                    "resultDataRules": []
                  },
                  "aggregation": {
                    "options": {
                      "useAnsiLikeSyntax": false,
                      "allowPartialEntitlementSuccess": false,
                      "applyIso4217Rounding": false
                    }
                  },
                  "inheritedRecipes": [],
                  "description": "",
                  "holding": {
                    "taxLotLevelHoldings": true
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The successfully updated or inserted item or any failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UpsertSingleStructuredDataResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpsertSingleStructuredDataResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpsertSingleStructuredDataResponse"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Stable"
      },
      "get": {
        "tags": [
          "Configuration Recipe"
        ],
        "summary": "ListConfigurationRecipes: List the set of Configuration Recipes",
        "description": "List the set of configuration recipes at the specified date/time and scope",
        "operationId": "ListConfigurationRecipes",
        "parameters": [
          {
            "name": "asAt",
            "in": "query",
            "description": "The asAt datetime at which to list the Configuration Recipes. Defaults to latest if not specified.",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "x-nullable": true
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Expression to filter the result set. Read more about filtering results from LUSID here:\r\n            https://support.lusid.com/filtering-results-from-lusid.",
            "schema": {
              "maxLength": 16384,
              "minLength": 0,
              "pattern": "^[\\s\\S]*$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The requested configuration recipes",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfGetRecipeResponse"
                },
                "example": {
                  "values": [
                    {
                      "value": {
                        "scope": "scopeName",
                        "code": "MyNamedRecipe12345",
                        "market": {
                          "marketRules": [
                            {
                              "key": "Fx.CurrencyPair.*",
                              "supplier": "Lusid",
                              "dataScope": "SomeScopeToLookAt",
                              "quoteType": "Price",
                              "field": "Ask",
                              "priceSource": "",
                              "sourceSystem": "Lusid"
                            }
                          ],
                          "suppliers": {},
                          "options": {
                            "defaultSupplier": "Lusid",
                            "defaultInstrumentCodeType": "LusidInstrumentId",
                            "defaultScope": "default",
                            "attemptToInferMissingFx": false,
                            "calendarScope": "CoppClarkHolidayCalendars",
                            "conventionScope": "Conventions"
                          },
                          "specificRules": []
                        },
                        "pricing": {
                          "modelRules": [
                            {
                              "supplier": "Lusid",
                              "modelName": "Discounting",
                              "instrumentType": "Bond",
                              "parameters": "",
                              "modelOptions": {
                                "modelOptionsType": "EmptyModelOptions"
                              },
                              "instrumentId": "",
                              "addressKeyFilters": []
                            }
                          ],
                          "modelChoice": {},
                          "options": {
                            "modelSelection": {
                              "library": "Lusid",
                              "model": "SimpleStatic"
                            },
                            "useInstrumentTypeToDeterminePricer": false,
                            "allowAnyInstrumentsWithSecUidToPriceOffLookup": false,
                            "allowPartiallySuccessfulEvaluation": false,
                            "produceSeparateResultForLinearOtcLegs": false,
                            "enableUseOfCachedUnitResults": false,
                            "windowValuationOnInstrumentStartEnd": false,
                            "removeContingentCashflowsInPaymentDiary": false,
                            "useChildSubHoldingKeysForPortfolioExpansion": false,
                            "validateDomesticAndQuoteCurrenciesAreConsistent": false,
                            "conservedQuantityForLookthroughExpansion": "PV"
                          },
                          "resultDataRules": []
                        },
                        "aggregation": {
                          "options": {
                            "useAnsiLikeSyntax": false,
                            "allowPartialEntitlementSuccess": false,
                            "applyIso4217Rounding": false
                          }
                        },
                        "inheritedRecipes": [],
                        "description": "",
                        "holding": {
                          "taxLotLevelHoldings": true
                        }
                      }
                    },
                    {
                      "value": {
                        "scope": "anotherScopeName",
                        "code": "MyNamedRecipe98765",
                        "market": {
                          "marketRules": [
                            {
                              "key": "Fx.CurrencyPair.*",
                              "supplier": "DataScope",
                              "dataScope": "SomeScopeToLookAt",
                              "quoteType": "Spread",
                              "field": "Bid",
                              "priceSource": "",
                              "sourceSystem": "Lusid"
                            }
                          ],
                          "suppliers": {},
                          "options": {
                            "defaultSupplier": "Lusid",
                            "defaultInstrumentCodeType": "LusidInstrumentId",
                            "defaultScope": "default",
                            "attemptToInferMissingFx": false,
                            "calendarScope": "CoppClarkHolidayCalendars",
                            "conventionScope": "Conventions"
                          },
                          "specificRules": []
                        },
                        "pricing": {
                          "modelRules": [],
                          "modelChoice": {},
                          "options": {
                            "modelSelection": {
                              "library": "Lusid",
                              "model": "SimpleStatic"
                            },
                            "useInstrumentTypeToDeterminePricer": false,
                            "allowAnyInstrumentsWithSecUidToPriceOffLookup": false,
                            "allowPartiallySuccessfulEvaluation": false,
                            "produceSeparateResultForLinearOtcLegs": false,
                            "enableUseOfCachedUnitResults": false,
                            "windowValuationOnInstrumentStartEnd": false,
                            "removeContingentCashflowsInPaymentDiary": false,
                            "useChildSubHoldingKeysForPortfolioExpansion": false,
                            "validateDomesticAndQuoteCurrenciesAreConsistent": false,
                            "conservedQuantityForLookthroughExpansion": "PV"
                          },
                          "resultDataRules": []
                        },
                        "aggregation": {
                          "options": {
                            "useAnsiLikeSyntax": false,
                            "allowPartialEntitlementSuccess": false,
                            "applyIso4217Rounding": false
                          }
                        },
                        "inheritedRecipes": [],
                        "description": "",
                        "holding": {
                          "taxLotLevelHoldings": true
                        }
                      }
                    }
                  ],
                  "href": "https://lusid.com/api/",
                  "links": [
                    {
                      "relation": "RequestLogs",
                      "href": "https://lusid.com/app/insights/logs/0HMA57L9MHR7R:00000001",
                      "description": "A link to the LUSID Insights website showing all logs related to this request",
                      "method": "GET"
                    }
                  ]
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfGetRecipeResponse"
                },
                "example": {
                  "values": [
                    {
                      "value": {
                        "scope": "scopeName",
                        "code": "MyNamedRecipe12345",
                        "market": {
                          "marketRules": [
                            {
                              "key": "Fx.CurrencyPair.*",
                              "supplier": "Lusid",
                              "dataScope": "SomeScopeToLookAt",
                              "quoteType": "Price",
                              "field": "Ask",
                              "priceSource": "",
                              "sourceSystem": "Lusid"
                            }
                          ],
                          "suppliers": {},
                          "options": {
                            "defaultSupplier": "Lusid",
                            "defaultInstrumentCodeType": "LusidInstrumentId",
                            "defaultScope": "default",
                            "attemptToInferMissingFx": false,
                            "calendarScope": "CoppClarkHolidayCalendars",
                            "conventionScope": "Conventions"
                          },
                          "specificRules": []
                        },
                        "pricing": {
                          "modelRules": [
                            {
                              "supplier": "Lusid",
                              "modelName": "Discounting",
                              "instrumentType": "Bond",
                              "parameters": "",
                              "modelOptions": {
                                "modelOptionsType": "EmptyModelOptions"
                              },
                              "instrumentId": "",
                              "addressKeyFilters": []
                            }
                          ],
                          "modelChoice": {},
                          "options": {
                            "modelSelection": {
                              "library": "Lusid",
                              "model": "SimpleStatic"
                            },
                            "useInstrumentTypeToDeterminePricer": false,
                            "allowAnyInstrumentsWithSecUidToPriceOffLookup": false,
                            "allowPartiallySuccessfulEvaluation": false,
                            "produceSeparateResultForLinearOtcLegs": false,
                            "enableUseOfCachedUnitResults": false,
                            "windowValuationOnInstrumentStartEnd": false,
                            "removeContingentCashflowsInPaymentDiary": false,
                            "useChildSubHoldingKeysForPortfolioExpansion": false,
                            "validateDomesticAndQuoteCurrenciesAreConsistent": false,
                            "conservedQuantityForLookthroughExpansion": "PV"
                          },
                          "resultDataRules": []
                        },
                        "aggregation": {
                          "options": {
                            "useAnsiLikeSyntax": false,
                            "allowPartialEntitlementSuccess": false,
                            "applyIso4217Rounding": false
                          }
                        },
                        "inheritedRecipes": [],
                        "description": "",
                        "holding": {
                          "taxLotLevelHoldings": true
                        }
                      }
                    },
                    {
                      "value": {
                        "scope": "anotherScopeName",
                        "code": "MyNamedRecipe98765",
                        "market": {
                          "marketRules": [
                            {
                              "key": "Fx.CurrencyPair.*",
                              "supplier": "DataScope",
                              "dataScope": "SomeScopeToLookAt",
                              "quoteType": "Spread",
                              "field": "Bid",
                              "priceSource": "",
                              "sourceSystem": "Lusid"
                            }
                          ],
                          "suppliers": {},
                          "options": {
                            "defaultSupplier": "Lusid",
                            "defaultInstrumentCodeType": "LusidInstrumentId",
                            "defaultScope": "default",
                            "attemptToInferMissingFx": false,
                            "calendarScope": "CoppClarkHolidayCalendars",
                            "conventionScope": "Conventions"
                          },
                          "specificRules": []
                        },
                        "pricing": {
                          "modelRules": [],
                          "modelChoice": {},
                          "options": {
                            "modelSelection": {
                              "library": "Lusid",
                              "model": "SimpleStatic"
                            },
                            "useInstrumentTypeToDeterminePricer": false,
                            "allowAnyInstrumentsWithSecUidToPriceOffLookup": false,
                            "allowPartiallySuccessfulEvaluation": false,
                            "produceSeparateResultForLinearOtcLegs": false,
                            "enableUseOfCachedUnitResults": false,
                            "windowValuationOnInstrumentStartEnd": false,
                            "removeContingentCashflowsInPaymentDiary": false,
                            "useChildSubHoldingKeysForPortfolioExpansion": false,
                            "validateDomesticAndQuoteCurrenciesAreConsistent": false,
                            "conservedQuantityForLookthroughExpansion": "PV"
                          },
                          "resultDataRules": []
                        },
                        "aggregation": {
                          "options": {
                            "useAnsiLikeSyntax": false,
                            "allowPartialEntitlementSuccess": false,
                            "applyIso4217Rounding": false
                          }
                        },
                        "inheritedRecipes": [],
                        "description": "",
                        "holding": {
                          "taxLotLevelHoldings": true
                        }
                      }
                    }
                  ],
                  "href": "https://lusid.com/api/",
                  "links": [
                    {
                      "relation": "RequestLogs",
                      "href": "https://lusid.com/app/insights/logs/0HMA57L9MHR7R:00000001",
                      "description": "A link to the LUSID Insights website showing all logs related to this request",
                      "method": "GET"
                    }
                  ]
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfGetRecipeResponse"
                },
                "example": {
                  "values": [
                    {
                      "value": {
                        "scope": "scopeName",
                        "code": "MyNamedRecipe12345",
                        "market": {
                          "marketRules": [
                            {
                              "key": "Fx.CurrencyPair.*",
                              "supplier": "Lusid",
                              "dataScope": "SomeScopeToLookAt",
                              "quoteType": "Price",
                              "field": "Ask",
                              "priceSource": "",
                              "sourceSystem": "Lusid"
                            }
                          ],
                          "suppliers": {},
                          "options": {
                            "defaultSupplier": "Lusid",
                            "defaultInstrumentCodeType": "LusidInstrumentId",
                            "defaultScope": "default",
                            "attemptToInferMissingFx": false,
                            "calendarScope": "CoppClarkHolidayCalendars",
                            "conventionScope": "Conventions"
                          },
                          "specificRules": []
                        },
                        "pricing": {
                          "modelRules": [
                            {
                              "supplier": "Lusid",
                              "modelName": "Discounting",
                              "instrumentType": "Bond",
                              "parameters": "",
                              "modelOptions": {
                                "modelOptionsType": "EmptyModelOptions"
                              },
                              "instrumentId": "",
                              "addressKeyFilters": []
                            }
                          ],
                          "modelChoice": {},
                          "options": {
                            "modelSelection": {
                              "library": "Lusid",
                              "model": "SimpleStatic"
                            },
                            "useInstrumentTypeToDeterminePricer": false,
                            "allowAnyInstrumentsWithSecUidToPriceOffLookup": false,
                            "allowPartiallySuccessfulEvaluation": false,
                            "produceSeparateResultForLinearOtcLegs": false,
                            "enableUseOfCachedUnitResults": false,
                            "windowValuationOnInstrumentStartEnd": false,
                            "removeContingentCashflowsInPaymentDiary": false,
                            "useChildSubHoldingKeysForPortfolioExpansion": false,
                            "validateDomesticAndQuoteCurrenciesAreConsistent": false,
                            "conservedQuantityForLookthroughExpansion": "PV"
                          },
                          "resultDataRules": []
                        },
                        "aggregation": {
                          "options": {
                            "useAnsiLikeSyntax": false,
                            "allowPartialEntitlementSuccess": false,
                            "applyIso4217Rounding": false
                          }
                        },
                        "inheritedRecipes": [],
                        "description": "",
                        "holding": {
                          "taxLotLevelHoldings": true
                        }
                      }
                    },
                    {
                      "value": {
                        "scope": "anotherScopeName",
                        "code": "MyNamedRecipe98765",
                        "market": {
                          "marketRules": [
                            {
                              "key": "Fx.CurrencyPair.*",
                              "supplier": "DataScope",
                              "dataScope": "SomeScopeToLookAt",
                              "quoteType": "Spread",
                              "field": "Bid",
                              "priceSource": "",
                              "sourceSystem": "Lusid"
                            }
                          ],
                          "suppliers": {},
                          "options": {
                            "defaultSupplier": "Lusid",
                            "defaultInstrumentCodeType": "LusidInstrumentId",
                            "defaultScope": "default",
                            "attemptToInferMissingFx": false,
                            "calendarScope": "CoppClarkHolidayCalendars",
                            "conventionScope": "Conventions"
                          },
                          "specificRules": []
                        },
                        "pricing": {
                          "modelRules": [],
                          "modelChoice": {},
                          "options": {
                            "modelSelection": {
                              "library": "Lusid",
                              "model": "SimpleStatic"
                            },
                            "useInstrumentTypeToDeterminePricer": false,
                            "allowAnyInstrumentsWithSecUidToPriceOffLookup": false,
                            "allowPartiallySuccessfulEvaluation": false,
                            "produceSeparateResultForLinearOtcLegs": false,
                            "enableUseOfCachedUnitResults": false,
                            "windowValuationOnInstrumentStartEnd": false,
                            "removeContingentCashflowsInPaymentDiary": false,
                            "useChildSubHoldingKeysForPortfolioExpansion": false,
                            "validateDomesticAndQuoteCurrenciesAreConsistent": false,
                            "conservedQuantityForLookthroughExpansion": "PV"
                          },
                          "resultDataRules": []
                        },
                        "aggregation": {
                          "options": {
                            "useAnsiLikeSyntax": false,
                            "allowPartialEntitlementSuccess": false,
                            "applyIso4217Rounding": false
                          }
                        },
                        "inheritedRecipes": [],
                        "description": "",
                        "holding": {
                          "taxLotLevelHoldings": true
                        }
                      }
                    }
                  ],
                  "href": "https://lusid.com/api/",
                  "links": [
                    {
                      "relation": "RequestLogs",
                      "href": "https://lusid.com/app/insights/logs/0HMA57L9MHR7R:00000001",
                      "description": "A link to the LUSID Insights website showing all logs related to this request",
                      "method": "GET"
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Stable"
      }
    },
    "/api/recipes/{scope}/{code}": {
      "get": {
        "tags": [
          "Configuration Recipe"
        ],
        "summary": "GetConfigurationRecipe: Get Configuration Recipe",
        "description": "Get a Configuration Recipe from a single scope.\r\n            \r\nThe response will return either the recipe that has been stored, or a failure explaining why the request was unsuccessful.\r\n            \r\nIt is important to always check for any unsuccessful requests (failures).",
        "operationId": "GetConfigurationRecipe",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the Configuration Recipe to retrieve.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string"
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The name of the recipe to retrieve the data for.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string"
            }
          },
          {
            "name": "asAt",
            "in": "query",
            "description": "The asAt datetime at which to retrieve the Configuration Recipe. Defaults to return the latest version if not specified.",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "description": "The successfully retrieved Configuration Recipe or any failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/GetRecipeResponse"
                },
                "example": {
                  "value": {
                    "scope": "scopeName",
                    "code": "MyNamedRecipe12345",
                    "market": {
                      "marketRules": [
                        {
                          "key": "Fx.CurrencyPair.*",
                          "supplier": "Lusid",
                          "dataScope": "SomeScopeToLookAt",
                          "quoteType": "Price",
                          "field": "Ask",
                          "priceSource": "",
                          "sourceSystem": "Lusid"
                        }
                      ],
                      "suppliers": {},
                      "options": {
                        "defaultSupplier": "Lusid",
                        "defaultInstrumentCodeType": "LusidInstrumentId",
                        "defaultScope": "default",
                        "attemptToInferMissingFx": false,
                        "calendarScope": "CoppClarkHolidayCalendars",
                        "conventionScope": "Conventions"
                      },
                      "specificRules": []
                    },
                    "pricing": {
                      "modelRules": [
                        {
                          "supplier": "Lusid",
                          "modelName": "Discounting",
                          "instrumentType": "Bond",
                          "parameters": "",
                          "modelOptions": {
                            "modelOptionsType": "EmptyModelOptions"
                          },
                          "instrumentId": "",
                          "addressKeyFilters": []
                        }
                      ],
                      "modelChoice": {},
                      "options": {
                        "modelSelection": {
                          "library": "Lusid",
                          "model": "SimpleStatic"
                        },
                        "useInstrumentTypeToDeterminePricer": false,
                        "allowAnyInstrumentsWithSecUidToPriceOffLookup": false,
                        "allowPartiallySuccessfulEvaluation": false,
                        "produceSeparateResultForLinearOtcLegs": false,
                        "enableUseOfCachedUnitResults": false,
                        "windowValuationOnInstrumentStartEnd": false,
                        "removeContingentCashflowsInPaymentDiary": false,
                        "useChildSubHoldingKeysForPortfolioExpansion": false,
                        "validateDomesticAndQuoteCurrenciesAreConsistent": false,
                        "conservedQuantityForLookthroughExpansion": "PV"
                      },
                      "resultDataRules": []
                    },
                    "aggregation": {
                      "options": {
                        "useAnsiLikeSyntax": false,
                        "allowPartialEntitlementSuccess": false,
                        "applyIso4217Rounding": false
                      }
                    },
                    "inheritedRecipes": [],
                    "description": "",
                    "holding": {
                      "taxLotLevelHoldings": true
                    }
                  }
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetRecipeResponse"
                },
                "example": {
                  "value": {
                    "scope": "scopeName",
                    "code": "MyNamedRecipe12345",
                    "market": {
                      "marketRules": [
                        {
                          "key": "Fx.CurrencyPair.*",
                          "supplier": "Lusid",
                          "dataScope": "SomeScopeToLookAt",
                          "quoteType": "Price",
                          "field": "Ask",
                          "priceSource": "",
                          "sourceSystem": "Lusid"
                        }
                      ],
                      "suppliers": {},
                      "options": {
                        "defaultSupplier": "Lusid",
                        "defaultInstrumentCodeType": "LusidInstrumentId",
                        "defaultScope": "default",
                        "attemptToInferMissingFx": false,
                        "calendarScope": "CoppClarkHolidayCalendars",
                        "conventionScope": "Conventions"
                      },
                      "specificRules": []
                    },
                    "pricing": {
                      "modelRules": [
                        {
                          "supplier": "Lusid",
                          "modelName": "Discounting",
                          "instrumentType": "Bond",
                          "parameters": "",
                          "modelOptions": {
                            "modelOptionsType": "EmptyModelOptions"
                          },
                          "instrumentId": "",
                          "addressKeyFilters": []
                        }
                      ],
                      "modelChoice": {},
                      "options": {
                        "modelSelection": {
                          "library": "Lusid",
                          "model": "SimpleStatic"
                        },
                        "useInstrumentTypeToDeterminePricer": false,
                        "allowAnyInstrumentsWithSecUidToPriceOffLookup": false,
                        "allowPartiallySuccessfulEvaluation": false,
                        "produceSeparateResultForLinearOtcLegs": false,
                        "enableUseOfCachedUnitResults": false,
                        "windowValuationOnInstrumentStartEnd": false,
                        "removeContingentCashflowsInPaymentDiary": false,
                        "useChildSubHoldingKeysForPortfolioExpansion": false,
                        "validateDomesticAndQuoteCurrenciesAreConsistent": false,
                        "conservedQuantityForLookthroughExpansion": "PV"
                      },
                      "resultDataRules": []
                    },
                    "aggregation": {
                      "options": {
                        "useAnsiLikeSyntax": false,
                        "allowPartialEntitlementSuccess": false,
                        "applyIso4217Rounding": false
                      }
                    },
                    "inheritedRecipes": [],
                    "description": "",
                    "holding": {
                      "taxLotLevelHoldings": true
                    }
                  }
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetRecipeResponse"
                },
                "example": {
                  "value": {
                    "scope": "scopeName",
                    "code": "MyNamedRecipe12345",
                    "market": {
                      "marketRules": [
                        {
                          "key": "Fx.CurrencyPair.*",
                          "supplier": "Lusid",
                          "dataScope": "SomeScopeToLookAt",
                          "quoteType": "Price",
                          "field": "Ask",
                          "priceSource": "",
                          "sourceSystem": "Lusid"
                        }
                      ],
                      "suppliers": {},
                      "options": {
                        "defaultSupplier": "Lusid",
                        "defaultInstrumentCodeType": "LusidInstrumentId",
                        "defaultScope": "default",
                        "attemptToInferMissingFx": false,
                        "calendarScope": "CoppClarkHolidayCalendars",
                        "conventionScope": "Conventions"
                      },
                      "specificRules": []
                    },
                    "pricing": {
                      "modelRules": [
                        {
                          "supplier": "Lusid",
                          "modelName": "Discounting",
                          "instrumentType": "Bond",
                          "parameters": "",
                          "modelOptions": {
                            "modelOptionsType": "EmptyModelOptions"
                          },
                          "instrumentId": "",
                          "addressKeyFilters": []
                        }
                      ],
                      "modelChoice": {},
                      "options": {
                        "modelSelection": {
                          "library": "Lusid",
                          "model": "SimpleStatic"
                        },
                        "useInstrumentTypeToDeterminePricer": false,
                        "allowAnyInstrumentsWithSecUidToPriceOffLookup": false,
                        "allowPartiallySuccessfulEvaluation": false,
                        "produceSeparateResultForLinearOtcLegs": false,
                        "enableUseOfCachedUnitResults": false,
                        "windowValuationOnInstrumentStartEnd": false,
                        "removeContingentCashflowsInPaymentDiary": false,
                        "useChildSubHoldingKeysForPortfolioExpansion": false,
                        "validateDomesticAndQuoteCurrenciesAreConsistent": false,
                        "conservedQuantityForLookthroughExpansion": "PV"
                      },
                      "resultDataRules": []
                    },
                    "aggregation": {
                      "options": {
                        "useAnsiLikeSyntax": false,
                        "allowPartialEntitlementSuccess": false,
                        "applyIso4217Rounding": false
                      }
                    },
                    "inheritedRecipes": [],
                    "description": "",
                    "holding": {
                      "taxLotLevelHoldings": true
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Stable"
      },
      "delete": {
        "tags": [
          "Configuration Recipe"
        ],
        "summary": "DeleteConfigurationRecipe: Delete a Configuration Recipe, assuming that it is present.",
        "description": "Delete the specified Configuration Recipe from a single scope.\r\n            \r\nThe response will return either detail of the deleted item, or an explanation (failure) as to why this did not succeed.\r\n            \r\nIt is important to always check for any unsuccessful response.",
        "operationId": "DeleteConfigurationRecipe",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the Configuration Recipe to delete.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string"
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The Configuration Recipe to delete.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The AsAt of deletion or failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/AnnulSingleStructuredDataResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AnnulSingleStructuredDataResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/AnnulSingleStructuredDataResponse"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Stable"
      }
    },
    "/api/referencelists": {
      "post": {
        "tags": [
          "ReferenceLists"
        ],
        "summary": "[EARLY ACCESS] UpsertReferenceList: Upsert Reference List",
        "description": "Insert the Reference List if it does not exist or update the Reference List with the supplied state if it does exist.",
        "operationId": "UpsertReferenceList",
        "requestBody": {
          "description": "The payload describing the Reference List instance.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/ReferenceListRequest"
              },
              "examples": {
                "Create String Reference List": {
                  "value": {
                    "id": {
                      "scope": "MyScope",
                      "code": "MyStringList"
                    },
                    "name": "MyReferenceListName",
                    "description": "My reference list description",
                    "tags": [
                      "tags",
                      "associated",
                      "with",
                      "my",
                      "list"
                    ],
                    "referenceList": {
                      "values": [
                        "value1",
                        "value2"
                      ],
                      "referenceListType": "StringList"
                    }
                  }
                },
                "Create PortfolioId Reference List": {
                  "value": {
                    "id": {
                      "scope": "MyScope",
                      "code": "MyPortfolioIdList"
                    },
                    "name": "MyReferenceListName",
                    "description": "My reference list description",
                    "tags": [
                      "tags",
                      "associated",
                      "with",
                      "my",
                      "list"
                    ],
                    "referenceList": {
                      "values": [
                        {
                          "scope": "scope1",
                          "code": "code1"
                        },
                        {
                          "scope": "scope2",
                          "code": "code2"
                        }
                      ],
                      "referenceListType": "PortfolioIdList"
                    }
                  }
                },
                "Create PortfolioGroupId Reference List": {
                  "value": {
                    "id": {
                      "scope": "MyScope",
                      "code": "MyPortfolioGroupIdList"
                    },
                    "name": "MyReferenceListName",
                    "description": "My reference list description",
                    "tags": [
                      "tags",
                      "associated",
                      "with",
                      "my",
                      "list"
                    ],
                    "referenceList": {
                      "values": [
                        {
                          "scope": "scope1",
                          "code": "code1"
                        },
                        {
                          "scope": "scope2",
                          "code": "code2"
                        }
                      ],
                      "referenceListType": "PortfolioGroupIdList"
                    }
                  }
                },
                "Create AddressKey Reference List": {
                  "value": {
                    "id": {
                      "scope": "MyScope",
                      "code": "MyAddressKeyList"
                    },
                    "name": "MyReferenceListName",
                    "description": "My reference list description",
                    "tags": [
                      "tags",
                      "associated",
                      "with",
                      "my",
                      "list"
                    ],
                    "referenceList": {
                      "values": [
                        "Valuation/PV",
                        "Instrument/Properties[Instrument/default/Name]"
                      ],
                      "referenceListType": "AddressKeyList"
                    }
                  }
                },
                "Create Instrument Reference List": {
                  "value": {
                    "id": {
                      "scope": "MyScope",
                      "code": "MyInstrumentList"
                    },
                    "name": "MyReferenceListName",
                    "description": "My reference list description",
                    "tags": [
                      "tags",
                      "associated",
                      "with",
                      "my",
                      "list"
                    ],
                    "referenceList": {
                      "values": [
                        "LUID_12345678",
                        "LUID_23456789"
                      ],
                      "referenceListType": "InstrumentList"
                    }
                  }
                },
                "Create Decimal Reference List": {
                  "value": {
                    "id": {
                      "scope": "MyScope",
                      "code": "MyDecimalList"
                    },
                    "name": "MyReferenceListName",
                    "description": "My reference list description",
                    "tags": [
                      "tags",
                      "associated",
                      "with",
                      "my",
                      "list"
                    ],
                    "referenceList": {
                      "values": [
                        1,
                        2
                      ],
                      "referenceListType": "DecimalList"
                    }
                  }
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ReferenceListRequest"
              },
              "examples": {
                "Create String Reference List": {
                  "value": {
                    "id": {
                      "scope": "MyScope",
                      "code": "MyStringList"
                    },
                    "name": "MyReferenceListName",
                    "description": "My reference list description",
                    "tags": [
                      "tags",
                      "associated",
                      "with",
                      "my",
                      "list"
                    ],
                    "referenceList": {
                      "values": [
                        "value1",
                        "value2"
                      ],
                      "referenceListType": "StringList"
                    }
                  }
                },
                "Create PortfolioId Reference List": {
                  "value": {
                    "id": {
                      "scope": "MyScope",
                      "code": "MyPortfolioIdList"
                    },
                    "name": "MyReferenceListName",
                    "description": "My reference list description",
                    "tags": [
                      "tags",
                      "associated",
                      "with",
                      "my",
                      "list"
                    ],
                    "referenceList": {
                      "values": [
                        {
                          "scope": "scope1",
                          "code": "code1"
                        },
                        {
                          "scope": "scope2",
                          "code": "code2"
                        }
                      ],
                      "referenceListType": "PortfolioIdList"
                    }
                  }
                },
                "Create PortfolioGroupId Reference List": {
                  "value": {
                    "id": {
                      "scope": "MyScope",
                      "code": "MyPortfolioGroupIdList"
                    },
                    "name": "MyReferenceListName",
                    "description": "My reference list description",
                    "tags": [
                      "tags",
                      "associated",
                      "with",
                      "my",
                      "list"
                    ],
                    "referenceList": {
                      "values": [
                        {
                          "scope": "scope1",
                          "code": "code1"
                        },
                        {
                          "scope": "scope2",
                          "code": "code2"
                        }
                      ],
                      "referenceListType": "PortfolioGroupIdList"
                    }
                  }
                },
                "Create AddressKey Reference List": {
                  "value": {
                    "id": {
                      "scope": "MyScope",
                      "code": "MyAddressKeyList"
                    },
                    "name": "MyReferenceListName",
                    "description": "My reference list description",
                    "tags": [
                      "tags",
                      "associated",
                      "with",
                      "my",
                      "list"
                    ],
                    "referenceList": {
                      "values": [
                        "Valuation/PV",
                        "Instrument/Properties[Instrument/default/Name]"
                      ],
                      "referenceListType": "AddressKeyList"
                    }
                  }
                },
                "Create Instrument Reference List": {
                  "value": {
                    "id": {
                      "scope": "MyScope",
                      "code": "MyInstrumentList"
                    },
                    "name": "MyReferenceListName",
                    "description": "My reference list description",
                    "tags": [
                      "tags",
                      "associated",
                      "with",
                      "my",
                      "list"
                    ],
                    "referenceList": {
                      "values": [
                        "LUID_12345678",
                        "LUID_23456789"
                      ],
                      "referenceListType": "InstrumentList"
                    }
                  }
                },
                "Create Decimal Reference List": {
                  "value": {
                    "id": {
                      "scope": "MyScope",
                      "code": "MyDecimalList"
                    },
                    "name": "MyReferenceListName",
                    "description": "My reference list description",
                    "tags": [
                      "tags",
                      "associated",
                      "with",
                      "my",
                      "list"
                    ],
                    "referenceList": {
                      "values": [
                        1,
                        2
                      ],
                      "referenceListType": "DecimalList"
                    }
                  }
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ReferenceListRequest"
              },
              "examples": {
                "Create String Reference List": {
                  "value": {
                    "id": {
                      "scope": "MyScope",
                      "code": "MyStringList"
                    },
                    "name": "MyReferenceListName",
                    "description": "My reference list description",
                    "tags": [
                      "tags",
                      "associated",
                      "with",
                      "my",
                      "list"
                    ],
                    "referenceList": {
                      "values": [
                        "value1",
                        "value2"
                      ],
                      "referenceListType": "StringList"
                    }
                  }
                },
                "Create PortfolioId Reference List": {
                  "value": {
                    "id": {
                      "scope": "MyScope",
                      "code": "MyPortfolioIdList"
                    },
                    "name": "MyReferenceListName",
                    "description": "My reference list description",
                    "tags": [
                      "tags",
                      "associated",
                      "with",
                      "my",
                      "list"
                    ],
                    "referenceList": {
                      "values": [
                        {
                          "scope": "scope1",
                          "code": "code1"
                        },
                        {
                          "scope": "scope2",
                          "code": "code2"
                        }
                      ],
                      "referenceListType": "PortfolioIdList"
                    }
                  }
                },
                "Create PortfolioGroupId Reference List": {
                  "value": {
                    "id": {
                      "scope": "MyScope",
                      "code": "MyPortfolioGroupIdList"
                    },
                    "name": "MyReferenceListName",
                    "description": "My reference list description",
                    "tags": [
                      "tags",
                      "associated",
                      "with",
                      "my",
                      "list"
                    ],
                    "referenceList": {
                      "values": [
                        {
                          "scope": "scope1",
                          "code": "code1"
                        },
                        {
                          "scope": "scope2",
                          "code": "code2"
                        }
                      ],
                      "referenceListType": "PortfolioGroupIdList"
                    }
                  }
                },
                "Create AddressKey Reference List": {
                  "value": {
                    "id": {
                      "scope": "MyScope",
                      "code": "MyAddressKeyList"
                    },
                    "name": "MyReferenceListName",
                    "description": "My reference list description",
                    "tags": [
                      "tags",
                      "associated",
                      "with",
                      "my",
                      "list"
                    ],
                    "referenceList": {
                      "values": [
                        "Valuation/PV",
                        "Instrument/Properties[Instrument/default/Name]"
                      ],
                      "referenceListType": "AddressKeyList"
                    }
                  }
                },
                "Create Instrument Reference List": {
                  "value": {
                    "id": {
                      "scope": "MyScope",
                      "code": "MyInstrumentList"
                    },
                    "name": "MyReferenceListName",
                    "description": "My reference list description",
                    "tags": [
                      "tags",
                      "associated",
                      "with",
                      "my",
                      "list"
                    ],
                    "referenceList": {
                      "values": [
                        "LUID_12345678",
                        "LUID_23456789"
                      ],
                      "referenceListType": "InstrumentList"
                    }
                  }
                },
                "Create Decimal Reference List": {
                  "value": {
                    "id": {
                      "scope": "MyScope",
                      "code": "MyDecimalList"
                    },
                    "name": "MyReferenceListName",
                    "description": "My reference list description",
                    "tags": [
                      "tags",
                      "associated",
                      "with",
                      "my",
                      "list"
                    ],
                    "referenceList": {
                      "values": [
                        1,
                        2
                      ],
                      "referenceListType": "DecimalList"
                    }
                  }
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ReferenceListRequest"
              },
              "examples": {
                "Create String Reference List": {
                  "value": {
                    "id": {
                      "scope": "MyScope",
                      "code": "MyStringList"
                    },
                    "name": "MyReferenceListName",
                    "description": "My reference list description",
                    "tags": [
                      "tags",
                      "associated",
                      "with",
                      "my",
                      "list"
                    ],
                    "referenceList": {
                      "values": [
                        "value1",
                        "value2"
                      ],
                      "referenceListType": "StringList"
                    }
                  }
                },
                "Create PortfolioId Reference List": {
                  "value": {
                    "id": {
                      "scope": "MyScope",
                      "code": "MyPortfolioIdList"
                    },
                    "name": "MyReferenceListName",
                    "description": "My reference list description",
                    "tags": [
                      "tags",
                      "associated",
                      "with",
                      "my",
                      "list"
                    ],
                    "referenceList": {
                      "values": [
                        {
                          "scope": "scope1",
                          "code": "code1"
                        },
                        {
                          "scope": "scope2",
                          "code": "code2"
                        }
                      ],
                      "referenceListType": "PortfolioIdList"
                    }
                  }
                },
                "Create PortfolioGroupId Reference List": {
                  "value": {
                    "id": {
                      "scope": "MyScope",
                      "code": "MyPortfolioGroupIdList"
                    },
                    "name": "MyReferenceListName",
                    "description": "My reference list description",
                    "tags": [
                      "tags",
                      "associated",
                      "with",
                      "my",
                      "list"
                    ],
                    "referenceList": {
                      "values": [
                        {
                          "scope": "scope1",
                          "code": "code1"
                        },
                        {
                          "scope": "scope2",
                          "code": "code2"
                        }
                      ],
                      "referenceListType": "PortfolioGroupIdList"
                    }
                  }
                },
                "Create AddressKey Reference List": {
                  "value": {
                    "id": {
                      "scope": "MyScope",
                      "code": "MyAddressKeyList"
                    },
                    "name": "MyReferenceListName",
                    "description": "My reference list description",
                    "tags": [
                      "tags",
                      "associated",
                      "with",
                      "my",
                      "list"
                    ],
                    "referenceList": {
                      "values": [
                        "Valuation/PV",
                        "Instrument/Properties[Instrument/default/Name]"
                      ],
                      "referenceListType": "AddressKeyList"
                    }
                  }
                },
                "Create Instrument Reference List": {
                  "value": {
                    "id": {
                      "scope": "MyScope",
                      "code": "MyInstrumentList"
                    },
                    "name": "MyReferenceListName",
                    "description": "My reference list description",
                    "tags": [
                      "tags",
                      "associated",
                      "with",
                      "my",
                      "list"
                    ],
                    "referenceList": {
                      "values": [
                        "LUID_12345678",
                        "LUID_23456789"
                      ],
                      "referenceListType": "InstrumentList"
                    }
                  }
                },
                "Create Decimal Reference List": {
                  "value": {
                    "id": {
                      "scope": "MyScope",
                      "code": "MyDecimalList"
                    },
                    "name": "MyReferenceListName",
                    "description": "My reference list description",
                    "tags": [
                      "tags",
                      "associated",
                      "with",
                      "my",
                      "list"
                    ],
                    "referenceList": {
                      "values": [
                        1,
                        2
                      ],
                      "referenceListType": "DecimalList"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The upserted Reference List instance.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ReferenceListResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReferenceListResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReferenceListResponse"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      },
      "get": {
        "tags": [
          "ReferenceLists"
        ],
        "summary": "[EARLY ACCESS] ListReferenceLists: List Reference Lists",
        "description": "List all the Reference Lists matching particular criteria.",
        "operationId": "ListReferenceLists",
        "parameters": [
          {
            "name": "asAt",
            "in": "query",
            "description": "The asAt datetime at which to list Reference Lists. Defaults to return the latest version of Reference Lists if not specified.",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "x-nullable": true
          },
          {
            "name": "page",
            "in": "query",
            "description": "The pagination token to use to continue listing Reference Lists from a previous call to list Reference Lists.\r\n            This value is returned from the previous call. If a pagination token is provided, the filter, limit and asAt fields\r\n            must not have changed since the original request.",
            "schema": {
              "maxLength": 500,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\+/]*={0,3}$",
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "When paginating, limit the number of returned results to this number. Defaults to 100 if not specified.",
            "schema": {
              "maximum": 5000,
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            },
            "x-nullable": true
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Expression to filter the result set. Read more about filtering results from LUSID here:\r\n            https://support.lusid.com/filtering-results-from-lusid.",
            "schema": {
              "maxLength": 16384,
              "minLength": 0,
              "pattern": "^[\\s\\S]*$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A collection of Reference Lists.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PagedResourceListOfReferenceListResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagedResourceListOfReferenceListResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagedResourceListOfReferenceListResponse"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      }
    },
    "/api/referencelists/{scope}/{code}": {
      "get": {
        "tags": [
          "ReferenceLists"
        ],
        "summary": "[EARLY ACCESS] GetReferenceList: Get Reference List",
        "description": "Retrieve a Reference List instance at a point in AsAt time.",
        "operationId": "GetReferenceList",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope to which the Reference List belongs.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string"
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The Reference List's unique identifier.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string"
            }
          },
          {
            "name": "asAt",
            "in": "query",
            "description": "The asAt datetime at which to retrieve the Reference List. Defaults to return the latest version of the Reference List if not specified.",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "description": "The Reference List matching the requested identifier.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ReferenceListResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReferenceListResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReferenceListResponse"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      },
      "delete": {
        "tags": [
          "ReferenceLists"
        ],
        "summary": "[EARLY ACCESS] DeleteReferenceList: Delete Reference List",
        "description": "Delete a Reference List instance.",
        "operationId": "DeleteReferenceList",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope to which the Reference List belongs.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string"
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The Reference List's unique identifier.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The deleted reference list response.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedEntityResponse"
                },
                "example": {
                  "asAt": "2018-03-05T10:10:10.0000000+00:00"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedEntityResponse"
                },
                "example": {
                  "asAt": "2018-03-05T10:10:10.0000000+00:00"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedEntityResponse"
                },
                "example": {
                  "asAt": "2018-03-05T10:10:10.0000000+00:00"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      }
    },
    "/api/referenceportfolios/{scope}": {
      "post": {
        "tags": [
          "Reference Portfolio"
        ],
        "summary": "CreateReferencePortfolio: Create reference portfolio",
        "description": "Create a reference portfolio in a particular scope.",
        "operationId": "CreateReferencePortfolio",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope in which to create the reference portfolio.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The definition of the reference portfolio.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/CreateReferencePortfolioRequest"
              },
              "example": {
                "displayName": "MyPortfolioName",
                "description": "Description of my portfolio",
                "code": "MyPortfolioCode",
                "created": "2018-03-05T00:00:00.0000000+00:00",
                "properties": {},
                "instrumentScopes": [],
                "baseCurrency": "GBP"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateReferencePortfolioRequest"
              },
              "example": {
                "displayName": "MyPortfolioName",
                "description": "Description of my portfolio",
                "code": "MyPortfolioCode",
                "created": "2018-03-05T00:00:00.0000000+00:00",
                "properties": {},
                "instrumentScopes": [],
                "baseCurrency": "GBP"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateReferencePortfolioRequest"
              },
              "example": {
                "displayName": "MyPortfolioName",
                "description": "Description of my portfolio",
                "code": "MyPortfolioCode",
                "created": "2018-03-05T00:00:00.0000000+00:00",
                "properties": {},
                "instrumentScopes": [],
                "baseCurrency": "GBP"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/CreateReferencePortfolioRequest"
              },
              "example": {
                "displayName": "MyPortfolioName",
                "description": "Description of my portfolio",
                "code": "MyPortfolioCode",
                "created": "2018-03-05T00:00:00.0000000+00:00",
                "properties": {},
                "instrumentScopes": [],
                "baseCurrency": "GBP"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "The created reference portfolio, with populated id",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Portfolio"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Portfolio"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Portfolio"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Stable"
      }
    },
    "/api/referenceportfolios/{scope}/{code}/constituents": {
      "post": {
        "tags": [
          "Reference Portfolio"
        ],
        "summary": "UpsertReferencePortfolioConstituents: Upsert reference portfolio constituents",
        "description": "Add constituents to a reference portfolio.",
        "operationId": "UpsertReferencePortfolioConstituents",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the reference portfolio.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string"
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The code of the reference portfolio. Together with the scope this uniquely identifies\r\n            the reference portfolio.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The constituents to upload to the reference portfolio.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/UpsertReferencePortfolioConstituentsRequest"
              },
              "example": {
                "effectiveFrom": "2018-03-05T00:00:00.0000000+00:00",
                "weightType": "Periodical",
                "periodType": "Quarterly",
                "periodCount": 2,
                "constituents": [
                  {
                    "instrumentIdentifiers": {
                      "Instrument/default/Figi": "BBG0077GZM13",
                      "Instrument/default/Isin": "GB00BH4HKS39"
                    },
                    "properties": {
                      "Portfolio/MyScope/MyPropertyKey": {
                        "key": "Portfolio/MyScope/MyPropertyKey",
                        "value": {
                          "metricValue": {
                            "value": 12345.5672,
                            "unit": "Unit"
                          }
                        }
                      }
                    },
                    "weight": 100,
                    "currency": "GBP"
                  },
                  {
                    "instrumentIdentifiers": {
                      "Instrument/default/Figi": "BBG0077H2WN1",
                      "Instrument/default/Isin": "US0378331005"
                    },
                    "properties": {},
                    "weight": 50,
                    "currency": "USD"
                  }
                ]
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpsertReferencePortfolioConstituentsRequest"
              },
              "example": {
                "effectiveFrom": "2018-03-05T00:00:00.0000000+00:00",
                "weightType": "Periodical",
                "periodType": "Quarterly",
                "periodCount": 2,
                "constituents": [
                  {
                    "instrumentIdentifiers": {
                      "Instrument/default/Figi": "BBG0077GZM13",
                      "Instrument/default/Isin": "GB00BH4HKS39"
                    },
                    "properties": {
                      "Portfolio/MyScope/MyPropertyKey": {
                        "key": "Portfolio/MyScope/MyPropertyKey",
                        "value": {
                          "metricValue": {
                            "value": 12345.5672,
                            "unit": "Unit"
                          }
                        }
                      }
                    },
                    "weight": 100,
                    "currency": "GBP"
                  },
                  {
                    "instrumentIdentifiers": {
                      "Instrument/default/Figi": "BBG0077H2WN1",
                      "Instrument/default/Isin": "US0378331005"
                    },
                    "properties": {},
                    "weight": 50,
                    "currency": "USD"
                  }
                ]
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/UpsertReferencePortfolioConstituentsRequest"
              },
              "example": {
                "effectiveFrom": "2018-03-05T00:00:00.0000000+00:00",
                "weightType": "Periodical",
                "periodType": "Quarterly",
                "periodCount": 2,
                "constituents": [
                  {
                    "instrumentIdentifiers": {
                      "Instrument/default/Figi": "BBG0077GZM13",
                      "Instrument/default/Isin": "GB00BH4HKS39"
                    },
                    "properties": {
                      "Portfolio/MyScope/MyPropertyKey": {
                        "key": "Portfolio/MyScope/MyPropertyKey",
                        "value": {
                          "metricValue": {
                            "value": 12345.5672,
                            "unit": "Unit"
                          }
                        }
                      }
                    },
                    "weight": 100,
                    "currency": "GBP"
                  },
                  {
                    "instrumentIdentifiers": {
                      "Instrument/default/Figi": "BBG0077H2WN1",
                      "Instrument/default/Isin": "US0378331005"
                    },
                    "properties": {},
                    "weight": 50,
                    "currency": "USD"
                  }
                ]
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/UpsertReferencePortfolioConstituentsRequest"
              },
              "example": {
                "effectiveFrom": "2018-03-05T00:00:00.0000000+00:00",
                "weightType": "Periodical",
                "periodType": "Quarterly",
                "periodCount": 2,
                "constituents": [
                  {
                    "instrumentIdentifiers": {
                      "Instrument/default/Figi": "BBG0077GZM13",
                      "Instrument/default/Isin": "GB00BH4HKS39"
                    },
                    "properties": {
                      "Portfolio/MyScope/MyPropertyKey": {
                        "key": "Portfolio/MyScope/MyPropertyKey",
                        "value": {
                          "metricValue": {
                            "value": 12345.5672,
                            "unit": "Unit"
                          }
                        }
                      }
                    },
                    "weight": 100,
                    "currency": "GBP"
                  },
                  {
                    "instrumentIdentifiers": {
                      "Instrument/default/Figi": "BBG0077H2WN1",
                      "Instrument/default/Isin": "US0378331005"
                    },
                    "properties": {},
                    "weight": 50,
                    "currency": "USD"
                  }
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UpsertReferencePortfolioConstituentsResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpsertReferencePortfolioConstituentsResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpsertReferencePortfolioConstituentsResponse"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Stable"
      },
      "get": {
        "tags": [
          "Reference Portfolio"
        ],
        "summary": "GetReferencePortfolioConstituents: Get reference portfolio constituents",
        "description": "Get constituents from a reference portfolio at a particular effective time.",
        "operationId": "GetReferencePortfolioConstituents",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the reference portfolio.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string"
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The code of the reference portfolio. Together with the scope this uniquely identifies\r\n            the reference portfolio.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string"
            }
          },
          {
            "name": "effectiveAt",
            "in": "query",
            "description": "The effective date of the constituents to retrieve. Defaults to the current LUSID system datetime if not specified.",
            "schema": {
              "type": "string",
              "format": "dateorcutlabel"
            }
          },
          {
            "name": "asAt",
            "in": "query",
            "description": "The asAt datetime at which to retrieve constituents. Defaults to return the latest version\r\n            of each constituent if not specified.",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "x-nullable": true
          },
          {
            "name": "propertyKeys",
            "in": "query",
            "description": "A list of property keys from the 'Instrument' or 'ReferenceHolding' domain to decorate onto\r\n            constituents. These take the format {domain}/{scope}/{code} e.g. 'Instrument/system/Name' or\r\n            'ReferenceHolding/strategy/quantsignal'. Defaults to return all available instrument and reference holding properties if not specified.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "description": "The key that uniquely identifies the property. It has the format {domain}/{scope}/{code}."
              }
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "description": "The requested reference portfolio constituents",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/GetReferencePortfolioConstituentsResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetReferencePortfolioConstituentsResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetReferencePortfolioConstituentsResponse"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Stable"
      }
    },
    "/api/referenceportfolios/{scope}/{code}/constituentsadjustments": {
      "get": {
        "tags": [
          "Reference Portfolio"
        ],
        "summary": "ListConstituentsAdjustments: List constituents adjustments",
        "description": "List adjustments made to constituents in a reference portfolio.",
        "operationId": "ListConstituentsAdjustments",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the reference portfolio.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string"
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The code of the reference portfolio. Together with the scope this uniquely identifies\r\n            the reference portfolio.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string"
            }
          },
          {
            "name": "fromEffectiveAt",
            "in": "query",
            "description": "Events between this time (inclusive) and the toEffectiveAt are returned.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "dateorcutlabel"
            }
          },
          {
            "name": "toEffectiveAt",
            "in": "query",
            "description": "Events between this time (inclusive) and the fromEffectiveAt are returned.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "dateorcutlabel"
            }
          },
          {
            "name": "asAtTime",
            "in": "query",
            "description": "The asAt time for which the result is valid.",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfConstituentsAdjustmentHeader"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfConstituentsAdjustmentHeader"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfConstituentsAdjustmentHeader"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Stable"
      }
    },
    "/api/relationshipdefinitions": {
      "post": {
        "tags": [
          "Relationship Definitions"
        ],
        "summary": "[EARLY ACCESS] CreateRelationshipDefinition: Create Relationship Definition",
        "description": "Create a new relationship definition to be used for creating relationships between entities.",
        "operationId": "CreateRelationshipDefinition",
        "requestBody": {
          "description": "The definition of the new relationship.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/CreateRelationshipDefinitionRequest"
              },
              "example": {
                "scope": "PortfolioManagementTeam",
                "code": "Traders",
                "sourceEntityType": "Portfolio",
                "targetEntityType": "Person",
                "displayName": "Authorised traders to trade for specific portfolio ",
                "outwardDescription": "can be traded by",
                "inwardDescription": "can trade with portfolio",
                "lifeTime": "TimeVariant",
                "relationshipCardinality": "ManyToMany"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateRelationshipDefinitionRequest"
              },
              "example": {
                "scope": "PortfolioManagementTeam",
                "code": "Traders",
                "sourceEntityType": "Portfolio",
                "targetEntityType": "Person",
                "displayName": "Authorised traders to trade for specific portfolio ",
                "outwardDescription": "can be traded by",
                "inwardDescription": "can trade with portfolio",
                "lifeTime": "TimeVariant",
                "relationshipCardinality": "ManyToMany"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateRelationshipDefinitionRequest"
              },
              "example": {
                "scope": "PortfolioManagementTeam",
                "code": "Traders",
                "sourceEntityType": "Portfolio",
                "targetEntityType": "Person",
                "displayName": "Authorised traders to trade for specific portfolio ",
                "outwardDescription": "can be traded by",
                "inwardDescription": "can trade with portfolio",
                "lifeTime": "TimeVariant",
                "relationshipCardinality": "ManyToMany"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/CreateRelationshipDefinitionRequest"
              },
              "example": {
                "scope": "PortfolioManagementTeam",
                "code": "Traders",
                "sourceEntityType": "Portfolio",
                "targetEntityType": "Person",
                "displayName": "Authorised traders to trade for specific portfolio ",
                "outwardDescription": "can be traded by",
                "inwardDescription": "can trade with portfolio",
                "lifeTime": "TimeVariant",
                "relationshipCardinality": "ManyToMany"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "The newly created relationship definition",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/RelationshipDefinition"
                },
                "example": {
                  "version": {
                    "effectiveFrom": "2019-01-01T12:00:00.0000000+00:00",
                    "asAtDate": "2019-01-01T12:00:00.0100000+00:00"
                  },
                  "relationshipDefinitionId": {
                    "scope": "PortfolioManagementTeam",
                    "code": "Traders"
                  },
                  "sourceEntityType": "Portfolio",
                  "targetEntityType": "Person",
                  "displayName": "Authorised traders to trade for specific portfolio ",
                  "outwardDescription": "can be traded by",
                  "inwardDescription": "can trade with portfolio",
                  "lifeTime": "TimeVariant",
                  "relationshipCardinality": "ManyToMany"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RelationshipDefinition"
                },
                "example": {
                  "version": {
                    "effectiveFrom": "2019-01-01T12:00:00.0000000+00:00",
                    "asAtDate": "2019-01-01T12:00:00.0100000+00:00"
                  },
                  "relationshipDefinitionId": {
                    "scope": "PortfolioManagementTeam",
                    "code": "Traders"
                  },
                  "sourceEntityType": "Portfolio",
                  "targetEntityType": "Person",
                  "displayName": "Authorised traders to trade for specific portfolio ",
                  "outwardDescription": "can be traded by",
                  "inwardDescription": "can trade with portfolio",
                  "lifeTime": "TimeVariant",
                  "relationshipCardinality": "ManyToMany"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/RelationshipDefinition"
                },
                "example": {
                  "version": {
                    "effectiveFrom": "2019-01-01T12:00:00.0000000+00:00",
                    "asAtDate": "2019-01-01T12:00:00.0100000+00:00"
                  },
                  "relationshipDefinitionId": {
                    "scope": "PortfolioManagementTeam",
                    "code": "Traders"
                  },
                  "sourceEntityType": "Portfolio",
                  "targetEntityType": "Person",
                  "displayName": "Authorised traders to trade for specific portfolio ",
                  "outwardDescription": "can be traded by",
                  "inwardDescription": "can trade with portfolio",
                  "lifeTime": "TimeVariant",
                  "relationshipCardinality": "ManyToMany"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      },
      "get": {
        "tags": [
          "Relationship Definitions"
        ],
        "summary": "[EARLY ACCESS] ListRelationshipDefinitions: List relationship definitions",
        "description": "Retrieve one or more specified relationship definitions.",
        "operationId": "ListRelationshipDefinitions",
        "parameters": [
          {
            "name": "asAt",
            "in": "query",
            "description": "The asAt datetime at which to retrieve the relationship definitions. Defaults to return\r\n            the latest version of each definition if not specified.",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "x-nullable": true
          },
          {
            "name": "page",
            "in": "query",
            "description": "The pagination token to use to continue listing relationship definitions from a previous call to list relationship definitions. This\r\nvalue is returned from the previous call. If a pagination token is provided the filter, asAt field\r\nmust not have changed since the original request.",
            "schema": {
              "maxLength": 500,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\+/]*={0,3}$",
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "When paginating, limit the number of returned results to this many. Defaults to 100 if not specified.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-nullable": true
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Expression to filter the result set.\r\n            For example, to filter on the Scope, use \"scope eq 'ExampleScope'\"\r\n            Read more about filtering results from LUSID here https://support.lusid.com/filtering-results-from-lusid.",
            "schema": {
              "maxLength": 16384,
              "minLength": 0,
              "pattern": "^[\\s\\S]*$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The requested relationship definitions",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PagedResourceListOfRelationshipDefinition"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagedResourceListOfRelationshipDefinition"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagedResourceListOfRelationshipDefinition"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      }
    },
    "/api/relationshipdefinitions/{scope}/{code}": {
      "put": {
        "tags": [
          "Relationship Definitions"
        ],
        "summary": "[EARLY ACCESS] UpdateRelationshipDefinition: Update Relationship Definition",
        "description": "Update the definition of a specified existing relationship. Not all elements within a relationship definition\r\nare modifiable due to the potential implications for values already stored against the relationship.",
        "operationId": "UpdateRelationshipDefinition",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the relationship definition being updated.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string"
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The code of the relationship definition being updated. Together with the scope this uniquely\r\n            identifies the relationship definition.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The details of relationship definition to update.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateRelationshipDefinitionRequest"
              },
              "example": {
                "displayName": "Authorised traders to trade for specific portfolio ",
                "outwardDescription": "can be traded by",
                "inwardDescription": "can trade with portfolio"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateRelationshipDefinitionRequest"
              },
              "example": {
                "displayName": "Authorised traders to trade for specific portfolio ",
                "outwardDescription": "can be traded by",
                "inwardDescription": "can trade with portfolio"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateRelationshipDefinitionRequest"
              },
              "example": {
                "displayName": "Authorised traders to trade for specific portfolio ",
                "outwardDescription": "can be traded by",
                "inwardDescription": "can trade with portfolio"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateRelationshipDefinitionRequest"
              },
              "example": {
                "displayName": "Authorised traders to trade for specific portfolio ",
                "outwardDescription": "can be traded by",
                "inwardDescription": "can trade with portfolio"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The updated relationship definition",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/RelationshipDefinition"
                },
                "example": {
                  "version": {
                    "effectiveFrom": "2019-01-01T12:00:00.0000000+00:00",
                    "asAtDate": "2019-01-01T12:00:00.0100000+00:00"
                  },
                  "relationshipDefinitionId": {
                    "scope": "PortfolioManagementTeam",
                    "code": "Traders"
                  },
                  "sourceEntityType": "Portfolio",
                  "targetEntityType": "Person",
                  "displayName": "Authorised traders to trade for specific portfolio ",
                  "outwardDescription": "can be traded by",
                  "inwardDescription": "can trade with portfolio",
                  "lifeTime": "TimeVariant",
                  "relationshipCardinality": "ManyToMany"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RelationshipDefinition"
                },
                "example": {
                  "version": {
                    "effectiveFrom": "2019-01-01T12:00:00.0000000+00:00",
                    "asAtDate": "2019-01-01T12:00:00.0100000+00:00"
                  },
                  "relationshipDefinitionId": {
                    "scope": "PortfolioManagementTeam",
                    "code": "Traders"
                  },
                  "sourceEntityType": "Portfolio",
                  "targetEntityType": "Person",
                  "displayName": "Authorised traders to trade for specific portfolio ",
                  "outwardDescription": "can be traded by",
                  "inwardDescription": "can trade with portfolio",
                  "lifeTime": "TimeVariant",
                  "relationshipCardinality": "ManyToMany"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/RelationshipDefinition"
                },
                "example": {
                  "version": {
                    "effectiveFrom": "2019-01-01T12:00:00.0000000+00:00",
                    "asAtDate": "2019-01-01T12:00:00.0100000+00:00"
                  },
                  "relationshipDefinitionId": {
                    "scope": "PortfolioManagementTeam",
                    "code": "Traders"
                  },
                  "sourceEntityType": "Portfolio",
                  "targetEntityType": "Person",
                  "displayName": "Authorised traders to trade for specific portfolio ",
                  "outwardDescription": "can be traded by",
                  "inwardDescription": "can trade with portfolio",
                  "lifeTime": "TimeVariant",
                  "relationshipCardinality": "ManyToMany"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      },
      "delete": {
        "tags": [
          "Relationship Definitions"
        ],
        "summary": "[EARLY ACCESS] DeleteRelationshipDefinition: Delete Relationship Definition",
        "description": "Delete the definition of the specified relationship.",
        "operationId": "DeleteRelationshipDefinition",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the relationship definition to be deleted.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string"
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The code of the relationship definition to be deleted. Together with the domain and scope this uniquely\r\n            identifies the relationship.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The time that the relationship definition was deleted",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedEntityResponse"
                },
                "example": {
                  "asAt": "2018-03-05T10:10:10.0000000+00:00"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedEntityResponse"
                },
                "example": {
                  "asAt": "2018-03-05T10:10:10.0000000+00:00"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedEntityResponse"
                },
                "example": {
                  "asAt": "2018-03-05T10:10:10.0000000+00:00"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      },
      "get": {
        "tags": [
          "Relationship Definitions"
        ],
        "summary": "[EARLY ACCESS] GetRelationshipDefinition: Get relationship definition",
        "description": "Retrieve the specified relationship definition",
        "operationId": "GetRelationshipDefinition",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the specified relationship definition.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string"
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The code of the specified relationship definition. Together with the domain and scope this uniquely\r\n            identifies the relationship definition.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string"
            }
          },
          {
            "name": "asAt",
            "in": "query",
            "description": "The asAt datetime at which to retrieve the relationship definition. Defaults to return\r\n            the latest version of the definition if not specified.",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "description": "The requested relationship definition",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/RelationshipDefinition"
                },
                "example": {
                  "version": {
                    "effectiveFrom": "2019-01-01T12:00:00.0000000+00:00",
                    "asAtDate": "2019-01-01T12:00:00.0100000+00:00"
                  },
                  "relationshipDefinitionId": {
                    "scope": "PortfolioManagementTeam",
                    "code": "Traders"
                  },
                  "sourceEntityType": "Portfolio",
                  "targetEntityType": "Person",
                  "displayName": "Authorised traders to trade for specific portfolio ",
                  "outwardDescription": "can be traded by",
                  "inwardDescription": "can trade with portfolio",
                  "lifeTime": "TimeVariant",
                  "relationshipCardinality": "ManyToMany"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RelationshipDefinition"
                },
                "example": {
                  "version": {
                    "effectiveFrom": "2019-01-01T12:00:00.0000000+00:00",
                    "asAtDate": "2019-01-01T12:00:00.0100000+00:00"
                  },
                  "relationshipDefinitionId": {
                    "scope": "PortfolioManagementTeam",
                    "code": "Traders"
                  },
                  "sourceEntityType": "Portfolio",
                  "targetEntityType": "Person",
                  "displayName": "Authorised traders to trade for specific portfolio ",
                  "outwardDescription": "can be traded by",
                  "inwardDescription": "can trade with portfolio",
                  "lifeTime": "TimeVariant",
                  "relationshipCardinality": "ManyToMany"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/RelationshipDefinition"
                },
                "example": {
                  "version": {
                    "effectiveFrom": "2019-01-01T12:00:00.0000000+00:00",
                    "asAtDate": "2019-01-01T12:00:00.0100000+00:00"
                  },
                  "relationshipDefinitionId": {
                    "scope": "PortfolioManagementTeam",
                    "code": "Traders"
                  },
                  "sourceEntityType": "Portfolio",
                  "targetEntityType": "Person",
                  "displayName": "Authorised traders to trade for specific portfolio ",
                  "outwardDescription": "can be traded by",
                  "inwardDescription": "can trade with portfolio",
                  "lifeTime": "TimeVariant",
                  "relationshipCardinality": "ManyToMany"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      }
    },
    "/api/relationshipdefinitions/{scope}/{code}/relationships": {
      "post": {
        "tags": [
          "Relationships"
        ],
        "summary": "[EARLY ACCESS] CreateRelationship: Create Relationship",
        "description": "Create a relationship between two entity objects by their identifiers",
        "operationId": "CreateRelationship",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the relationship",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string"
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The code of the relationship",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The details of the relationship to create.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/CreateRelationshipRequest"
              },
              "example": {
                "sourceEntityId": {
                  "scope": "UkPortfolio",
                  "code": "PortfolioId-148176"
                },
                "targetEntityId": {
                  "idTypeScope": "HrSystem1",
                  "idTypeCode": "InternalId",
                  "code": "XY10001111"
                },
                "effectiveFrom": "2019-01-01T12:00:00.0000000+00:00",
                "effectiveUntil": "2022-01-01T12:00:00.0000000+00:00"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateRelationshipRequest"
              },
              "example": {
                "sourceEntityId": {
                  "scope": "UkPortfolio",
                  "code": "PortfolioId-148176"
                },
                "targetEntityId": {
                  "idTypeScope": "HrSystem1",
                  "idTypeCode": "InternalId",
                  "code": "XY10001111"
                },
                "effectiveFrom": "2019-01-01T12:00:00.0000000+00:00",
                "effectiveUntil": "2022-01-01T12:00:00.0000000+00:00"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateRelationshipRequest"
              },
              "example": {
                "sourceEntityId": {
                  "scope": "UkPortfolio",
                  "code": "PortfolioId-148176"
                },
                "targetEntityId": {
                  "idTypeScope": "HrSystem1",
                  "idTypeCode": "InternalId",
                  "code": "XY10001111"
                },
                "effectiveFrom": "2019-01-01T12:00:00.0000000+00:00",
                "effectiveUntil": "2022-01-01T12:00:00.0000000+00:00"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/CreateRelationshipRequest"
              },
              "example": {
                "sourceEntityId": {
                  "scope": "UkPortfolio",
                  "code": "PortfolioId-148176"
                },
                "targetEntityId": {
                  "idTypeScope": "HrSystem1",
                  "idTypeCode": "InternalId",
                  "code": "XY10001111"
                },
                "effectiveFrom": "2019-01-01T12:00:00.0000000+00:00",
                "effectiveUntil": "2022-01-01T12:00:00.0000000+00:00"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "The newly created relationship.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CompleteRelationship"
                },
                "example": {
                  "relationshipDefinitionId": {
                    "scope": "PortfolioManagementTeam",
                    "code": "Traders"
                  },
                  "sourceEntity": {
                    "entityType": "PortfolioGroup",
                    "entityId": {
                      "scope": "UkPortfolio",
                      "code": "PortfolioId-148176"
                    },
                    "displayName": "UK Portfolios",
                    "properties": {},
                    "scope": "UkPortfolio",
                    "identifiers": [
                      {
                        "identifierType": "code",
                        "identifierValue": "PortfolioId-148176"
                      }
                    ]
                  },
                  "targetEntity": {
                    "entityType": "Person",
                    "entityId": {
                      "idTypeScope": "HrSystem1",
                      "idTypeCode": "InternalId",
                      "code": "XY10001111"
                    },
                    "displayName": "James Smith",
                    "properties": {},
                    "identifiers": [
                      {
                        "identifierScope": "HrSystem1",
                        "identifierType": "InternalId",
                        "identifierValue": "XY10001111"
                      }
                    ]
                  },
                  "outwardDescription": "can be traded by",
                  "inwardDescription": "can trade with portfolio",
                  "effectiveFrom": "2019-01-01T12:00:00.0000000+00:00",
                  "effectiveUntil": "2022-01-01T12:00:00.0000000+00:00"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CompleteRelationship"
                },
                "example": {
                  "relationshipDefinitionId": {
                    "scope": "PortfolioManagementTeam",
                    "code": "Traders"
                  },
                  "sourceEntity": {
                    "entityType": "PortfolioGroup",
                    "entityId": {
                      "scope": "UkPortfolio",
                      "code": "PortfolioId-148176"
                    },
                    "displayName": "UK Portfolios",
                    "properties": {},
                    "scope": "UkPortfolio",
                    "identifiers": [
                      {
                        "identifierType": "code",
                        "identifierValue": "PortfolioId-148176"
                      }
                    ]
                  },
                  "targetEntity": {
                    "entityType": "Person",
                    "entityId": {
                      "idTypeScope": "HrSystem1",
                      "idTypeCode": "InternalId",
                      "code": "XY10001111"
                    },
                    "displayName": "James Smith",
                    "properties": {},
                    "identifiers": [
                      {
                        "identifierScope": "HrSystem1",
                        "identifierType": "InternalId",
                        "identifierValue": "XY10001111"
                      }
                    ]
                  },
                  "outwardDescription": "can be traded by",
                  "inwardDescription": "can trade with portfolio",
                  "effectiveFrom": "2019-01-01T12:00:00.0000000+00:00",
                  "effectiveUntil": "2022-01-01T12:00:00.0000000+00:00"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CompleteRelationship"
                },
                "example": {
                  "relationshipDefinitionId": {
                    "scope": "PortfolioManagementTeam",
                    "code": "Traders"
                  },
                  "sourceEntity": {
                    "entityType": "PortfolioGroup",
                    "entityId": {
                      "scope": "UkPortfolio",
                      "code": "PortfolioId-148176"
                    },
                    "displayName": "UK Portfolios",
                    "properties": {},
                    "scope": "UkPortfolio",
                    "identifiers": [
                      {
                        "identifierType": "code",
                        "identifierValue": "PortfolioId-148176"
                      }
                    ]
                  },
                  "targetEntity": {
                    "entityType": "Person",
                    "entityId": {
                      "idTypeScope": "HrSystem1",
                      "idTypeCode": "InternalId",
                      "code": "XY10001111"
                    },
                    "displayName": "James Smith",
                    "properties": {},
                    "identifiers": [
                      {
                        "identifierScope": "HrSystem1",
                        "identifierType": "InternalId",
                        "identifierValue": "XY10001111"
                      }
                    ]
                  },
                  "outwardDescription": "can be traded by",
                  "inwardDescription": "can trade with portfolio",
                  "effectiveFrom": "2019-01-01T12:00:00.0000000+00:00",
                  "effectiveUntil": "2022-01-01T12:00:00.0000000+00:00"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      }
    },
    "/api/relationshipdefinitions/{scope}/{code}/relationships/$delete": {
      "post": {
        "tags": [
          "Relationships"
        ],
        "summary": "[EARLY ACCESS] DeleteRelationship: Delete Relationship",
        "description": "Delete a relationship between two entity objects represented by their identifiers",
        "operationId": "DeleteRelationship",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the relationship",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string"
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The code of the relationship",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The details of the relationship to delete.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/DeleteRelationshipRequest"
              },
              "example": {
                "sourceEntityId": {
                  "scope": "UkPortfolio",
                  "code": "PortfolioId-148176"
                },
                "targetEntityId": {
                  "idTypeScope": "HrSystem1",
                  "idTypeCode": "InternalId",
                  "code": "XY10001111"
                },
                "effectiveFrom": "2019-01-10T00:00:00.0000000+00:00"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeleteRelationshipRequest"
              },
              "example": {
                "sourceEntityId": {
                  "scope": "UkPortfolio",
                  "code": "PortfolioId-148176"
                },
                "targetEntityId": {
                  "idTypeScope": "HrSystem1",
                  "idTypeCode": "InternalId",
                  "code": "XY10001111"
                },
                "effectiveFrom": "2019-01-10T00:00:00.0000000+00:00"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/DeleteRelationshipRequest"
              },
              "example": {
                "sourceEntityId": {
                  "scope": "UkPortfolio",
                  "code": "PortfolioId-148176"
                },
                "targetEntityId": {
                  "idTypeScope": "HrSystem1",
                  "idTypeCode": "InternalId",
                  "code": "XY10001111"
                },
                "effectiveFrom": "2019-01-10T00:00:00.0000000+00:00"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/DeleteRelationshipRequest"
              },
              "example": {
                "sourceEntityId": {
                  "scope": "UkPortfolio",
                  "code": "PortfolioId-148176"
                },
                "targetEntityId": {
                  "idTypeScope": "HrSystem1",
                  "idTypeCode": "InternalId",
                  "code": "XY10001111"
                },
                "effectiveFrom": "2019-01-10T00:00:00.0000000+00:00"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The datetime that the relationship is deleted",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedEntityResponse"
                },
                "example": {
                  "asAt": "2018-03-05T10:10:10.0000000+00:00"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedEntityResponse"
                },
                "example": {
                  "asAt": "2018-03-05T10:10:10.0000000+00:00"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedEntityResponse"
                },
                "example": {
                  "asAt": "2018-03-05T10:10:10.0000000+00:00"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      }
    },
    "/api/results/queryable/keys": {
      "get": {
        "tags": [
          "Aggregation"
        ],
        "summary": "[EARLY ACCESS] GetQueryableKeys: Query the set of supported \"addresses\" that can be queried from the aggregation endpoint.",
        "description": "When a request is made for aggregation, the user needs to know what keys can be passed to it for queryable data. This endpoint allows to queries to provide the set of keys,\r\nwhat they are and what they return.",
        "operationId": "GetQueryableKeys",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "The pagination token to use to continue listing queryable keys from a previous call to list queryable keys.\r\n            This value is returned from the previous call.",
            "schema": {
              "maxLength": 500,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\+/]*={0,3}$",
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "When paginating, limit the number of returned results to this many.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-nullable": true
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Expression to filter the result set.\r\n            Read more about filtering results from LUSID here https://support.lusid.com/filtering-results-from-lusid.",
            "schema": {
              "maxLength": 16384,
              "minLength": 0,
              "pattern": "^[\\s\\S]*$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfAggregationQuery"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfAggregationQuery"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfAggregationQuery"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      }
    },
    "/api/schemas/entities": {
      "get": {
        "tags": [
          "Schemas"
        ],
        "summary": "[EARLY ACCESS] ListEntities: List entities",
        "description": "List all available entities for which schema information is available.",
        "operationId": "ListEntities",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfString"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfString"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfString"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      }
    },
    "/api/schemas/entities/{entity}": {
      "get": {
        "tags": [
          "Schemas"
        ],
        "summary": "[EARLY ACCESS] GetEntitySchema: Get schema",
        "description": "Gets the schema and meta-data for a given entity",
        "operationId": "GetEntitySchema",
        "parameters": [
          {
            "name": "entity",
            "in": "path",
            "description": "The name of a valid entity",
            "required": true,
            "schema": {
              "maxLength": 6000,
              "minLength": 0,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Schema"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Schema"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Schema"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      }
    },
    "/api/schemas/properties": {
      "get": {
        "tags": [
          "Schemas"
        ],
        "summary": "[EARLY ACCESS] GetPropertySchema: Get property schema",
        "description": "Get the schemas for the provided list of property keys.",
        "operationId": "GetPropertySchema",
        "parameters": [
          {
            "name": "propertyKeys",
            "in": "query",
            "description": "One or more property keys for which the schema is requested",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "description": "The key that uniquely identifies the property. It has the format {domain}/{scope}/{code}."
              }
            },
            "x-nullable": true
          },
          {
            "name": "asAt",
            "in": "query",
            "description": "Optional. The AsAt date of the data",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PropertySchema"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PropertySchema"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PropertySchema"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      }
    },
    "/api/schemas/types": {
      "get": {
        "tags": [
          "Schemas"
        ],
        "summary": "[EARLY ACCESS] GetValueTypes: Get value types",
        "description": "Gets the available value types for which a schema is available.",
        "operationId": "GetValueTypes",
        "parameters": [
          {
            "name": "sortBy",
            "in": "query",
            "description": "Optional. Order the results by these fields. Use use the '-' sign to denote descending order e.g. -MyFieldName",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "x-nullable": true
          },
          {
            "name": "start",
            "in": "query",
            "description": "Optional. When paginating, skip this number of results",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-nullable": true
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Optional. When paginating, limit the number of returned results to this many.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfValueType"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfValueType"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfValueType"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      }
    },
    "/api/scopes": {
      "get": {
        "tags": [
          "Scopes"
        ],
        "summary": "ListScopes: List Scopes",
        "description": "List all the scopes that contain data.",
        "operationId": "ListScopes",
        "parameters": [
          {
            "name": "filter",
            "in": "query",
            "description": "Expression to filter the result set.\r\n            For example, to filter on the Scope, use \"scope eq 'string'\"\r\n            Read more about filtering results from LUSID here https://support.lusid.com/filtering-results-from-lusid.",
            "schema": {
              "maxLength": 16384,
              "minLength": 0,
              "pattern": "^[\\s\\S]*$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A list of scopes",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfScopeDefinition"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfScopeDefinition"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfScopeDefinition"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Stable"
      }
    },
    "/api/search/instruments": {
      "post": {
        "tags": [
          "Search"
        ],
        "summary": "[EARLY ACCESS] InstrumentsSearch: Instruments search",
        "description": "Search across all instruments that have been mastered in LUSID. Optionally augment the results with instruments from an external symbology service,\r\ncurrently OpenFIGI.",
        "operationId": "InstrumentsSearch",
        "parameters": [
          {
            "name": "masteredEffectiveAt",
            "in": "query",
            "description": "The effective datetime or cut label to use when searching mastered instruments. This parameter has no effect on instruments that\r\nhave not been mastered within LUSID. Defaults to the current LUSID system datetime if not specified.",
            "schema": {
              "type": "string",
              "format": "dateorcutlabel"
            }
          },
          {
            "name": "masteredOnly",
            "in": "query",
            "description": "If set to true, only search over instruments that have been mastered within LUSID. Defaults to false.",
            "schema": {
              "type": "boolean",
              "default": false
            },
            "x-nullable": true
          },
          {
            "name": "scope",
            "in": "query",
            "description": "The scope in which the instrument lies.",
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "A collection of instrument properties to search for. LUSID will return instruments for any matched\r\n            properties.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/InstrumentSearchProperty"
                }
              },
              "example": [
                {
                  "key": "Instrument/default/Isin",
                  "value": "US0378331005"
                }
              ]
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/InstrumentSearchProperty"
                }
              },
              "example": [
                {
                  "key": "Instrument/default/Isin",
                  "value": "US0378331005"
                }
              ]
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/InstrumentSearchProperty"
                }
              },
              "example": [
                {
                  "key": "Instrument/default/Isin",
                  "value": "US0378331005"
                }
              ]
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/InstrumentSearchProperty"
                }
              },
              "example": [
                {
                  "key": "Instrument/default/Isin",
                  "value": "US0378331005"
                }
              ]
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The instruments found by the search",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/InstrumentMatch"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/InstrumentMatch"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/InstrumentMatch"
                  }
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      }
    },
    "/api/search/portfoliogroups": {
      "get": {
        "tags": [
          "Search"
        ],
        "summary": "SearchPortfolioGroups: Search Portfolio Groups",
        "description": "Search through all portfolio groups",
        "operationId": "SearchPortfolioGroups",
        "parameters": [
          {
            "name": "search",
            "in": "query",
            "description": "A parameter used for searching any portfolio group field. Wildcards(*) are supported at the end of words (e.g. 'Port*'). Read more about filtering results from LUSID here https://support.lusid.com/filtering-results-from-lusid.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Expression to filter the result set. \r\nFor example, to filter on the Scope, use \"id.scope eq 'string'\"\r\nRead more about filtering results from LUSID here https://support.lusid.com/filtering-results-from-lusid.",
            "schema": {
              "maxLength": 16384,
              "minLength": 0,
              "pattern": "^[\\s\\S]*$",
              "type": "string"
            }
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "Order the results by these fields. Use use the '-' sign to denote descending order e.g. -MyFieldName. Multiple fields can be denoted by a comma e.g. -MyFieldName,AnotherFieldName,-AFurtherFieldName",
            "schema": {
              "maxLength": 16384,
              "minLength": 1,
              "pattern": "^[\\s\\S]*$",
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "When paginating, only return this number of records",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-nullable": true
          },
          {
            "name": "page",
            "in": "query",
            "description": "Encoded page string returned from a previous search result that will retrieve the next page of data. When this field is supplied, filter, sortBy and search fields should not be supplied.",
            "schema": {
              "maxLength": 500,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\+/]*={0,3}$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PagedResourceListOfPortfolioGroupSearchResult"
                },
                "example": {
                  "values": [
                    {
                      "href": "https://example.lusid.com/api/portfoliogroups/demo-scope/demo-code",
                      "id": {
                        "scope": "demo-scope",
                        "code": "demo-group-code"
                      },
                      "displayName": "Test portfolio group",
                      "description": "UK Portfolio",
                      "created": "2020-03-28T00:00:00.0000000+00:00",
                      "portfolios": [
                        {
                          "scope": "demo-scope",
                          "code": "demo-portfolio"
                        }
                      ],
                      "subGroups": [
                        {
                          "scope": "demo-scope",
                          "code": "demo-sub-group"
                        }
                      ]
                    }
                  ],
                  "href": "https://example.lusid.com/api/portfoliogroups",
                  "links": []
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagedResourceListOfPortfolioGroupSearchResult"
                },
                "example": {
                  "values": [
                    {
                      "href": "https://example.lusid.com/api/portfoliogroups/demo-scope/demo-code",
                      "id": {
                        "scope": "demo-scope",
                        "code": "demo-group-code"
                      },
                      "displayName": "Test portfolio group",
                      "description": "UK Portfolio",
                      "created": "2020-03-28T00:00:00.0000000+00:00",
                      "portfolios": [
                        {
                          "scope": "demo-scope",
                          "code": "demo-portfolio"
                        }
                      ],
                      "subGroups": [
                        {
                          "scope": "demo-scope",
                          "code": "demo-sub-group"
                        }
                      ]
                    }
                  ],
                  "href": "https://example.lusid.com/api/portfoliogroups",
                  "links": []
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagedResourceListOfPortfolioGroupSearchResult"
                },
                "example": {
                  "values": [
                    {
                      "href": "https://example.lusid.com/api/portfoliogroups/demo-scope/demo-code",
                      "id": {
                        "scope": "demo-scope",
                        "code": "demo-group-code"
                      },
                      "displayName": "Test portfolio group",
                      "description": "UK Portfolio",
                      "created": "2020-03-28T00:00:00.0000000+00:00",
                      "portfolios": [
                        {
                          "scope": "demo-scope",
                          "code": "demo-portfolio"
                        }
                      ],
                      "subGroups": [
                        {
                          "scope": "demo-scope",
                          "code": "demo-sub-group"
                        }
                      ]
                    }
                  ],
                  "href": "https://example.lusid.com/api/portfoliogroups",
                  "links": []
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Stable"
      }
    },
    "/api/search/portfolios": {
      "get": {
        "tags": [
          "Search"
        ],
        "summary": "SearchPortfolios: Search Portfolios",
        "description": "Search through all portfolios",
        "operationId": "SearchPortfolios",
        "parameters": [
          {
            "name": "search",
            "in": "query",
            "description": "A parameter used for searching any portfolio field. Wildcards(*) are supported at the end of words (e.g. 'Port*'). Read more about filtering results from LUSID here https://support.lusid.com/filtering-results-from-lusid.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Expression to filter the result set. \r\nFor example, to filter on the portfolio Type, use \"type eq 'Transaction'\"\r\nRead more about filtering results from LUSID here https://support.lusid.com/filtering-results-from-lusid.",
            "schema": {
              "maxLength": 16384,
              "minLength": 0,
              "pattern": "^[\\s\\S]*$",
              "type": "string"
            }
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "Order the results by these fields. Use use the '-' sign to denote descending order e.g. -MyFieldName. Multiple fields can be denoted by a comma e.g. -MyFieldName,AnotherFieldName,-AFurtherFieldName",
            "schema": {
              "maxLength": 16384,
              "minLength": 1,
              "pattern": "^[\\s\\S]*$",
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "When paginating, only return this number of records",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-nullable": true
          },
          {
            "name": "page",
            "in": "query",
            "description": "Encoded page string returned from a previous search result that will retrieve the next page of data. When this field is supplied, filter, sortBy and search fields should not be supplied.",
            "schema": {
              "maxLength": 500,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\+/]*={0,3}$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PagedResourceListOfPortfolioSearchResult"
                },
                "example": {
                  "values": [
                    {
                      "id": {
                        "scope": "demo-scope",
                        "code": "demo-code"
                      },
                      "type": "Transaction",
                      "href": "https://example.lusid.com/api/portfolios/demo-scope/demo-code",
                      "description": "UK Holidings",
                      "displayName": "UK Portfolio",
                      "isDerived": true,
                      "created": "2019-04-06T12:00:05.0000000+00:00",
                      "parentPortfolioId": {
                        "scope": "demo-parent",
                        "code": "demo-parent"
                      },
                      "baseCurrency": "GBP",
                      "properties": [
                        {
                          "key": "Portfolio/default/Country",
                          "value": {
                            "labelValue": "UK"
                          },
                          "effectiveFrom": "2019-04-06T12:00:05.0000000+00:00"
                        }
                      ]
                    }
                  ],
                  "href": "https://example.lusid.com/api/portfolios",
                  "links": []
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagedResourceListOfPortfolioSearchResult"
                },
                "example": {
                  "values": [
                    {
                      "id": {
                        "scope": "demo-scope",
                        "code": "demo-code"
                      },
                      "type": "Transaction",
                      "href": "https://example.lusid.com/api/portfolios/demo-scope/demo-code",
                      "description": "UK Holidings",
                      "displayName": "UK Portfolio",
                      "isDerived": true,
                      "created": "2019-04-06T12:00:05.0000000+00:00",
                      "parentPortfolioId": {
                        "scope": "demo-parent",
                        "code": "demo-parent"
                      },
                      "baseCurrency": "GBP",
                      "properties": [
                        {
                          "key": "Portfolio/default/Country",
                          "value": {
                            "labelValue": "UK"
                          },
                          "effectiveFrom": "2019-04-06T12:00:05.0000000+00:00"
                        }
                      ]
                    }
                  ],
                  "href": "https://example.lusid.com/api/portfolios",
                  "links": []
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagedResourceListOfPortfolioSearchResult"
                },
                "example": {
                  "values": [
                    {
                      "id": {
                        "scope": "demo-scope",
                        "code": "demo-code"
                      },
                      "type": "Transaction",
                      "href": "https://example.lusid.com/api/portfolios/demo-scope/demo-code",
                      "description": "UK Holidings",
                      "displayName": "UK Portfolio",
                      "isDerived": true,
                      "created": "2019-04-06T12:00:05.0000000+00:00",
                      "parentPortfolioId": {
                        "scope": "demo-parent",
                        "code": "demo-parent"
                      },
                      "baseCurrency": "GBP",
                      "properties": [
                        {
                          "key": "Portfolio/default/Country",
                          "value": {
                            "labelValue": "UK"
                          },
                          "effectiveFrom": "2019-04-06T12:00:05.0000000+00:00"
                        }
                      ]
                    }
                  ],
                  "href": "https://example.lusid.com/api/portfolios",
                  "links": []
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Stable"
      }
    },
    "/api/search/propertydefinitions": {
      "get": {
        "tags": [
          "Search"
        ],
        "summary": "SearchProperties: Search Property Definitions",
        "description": "Search through all Property Definitions",
        "operationId": "SearchProperties",
        "parameters": [
          {
            "name": "search",
            "in": "query",
            "description": "A parameter used for searching any field. Wildcards(*) are supported at the end of words (e.g. 'Port*'). Read more about filtering results from LUSID here https://support.lusid.com/filtering-results-from-lusid.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Expression to filter the result set. \r\nFor example, to filter on the Value Type, use \"valueType eq 'string'\"\r\nRead more about filtering results from LUSID here https://support.lusid.com/filtering-results-from-lusid.",
            "schema": {
              "maxLength": 16384,
              "minLength": 0,
              "pattern": "^[\\s\\S]*$",
              "type": "string"
            }
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "Order the results by these fields. Use use the '-' sign to denote descending order e.g. -MyFieldName. Multiple fields can be denoted by a comma e.g. -MyFieldName,AnotherFieldName,-AFurtherFieldName",
            "schema": {
              "maxLength": 16384,
              "minLength": 1,
              "pattern": "^[\\s\\S]*$",
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "When paginating, only return this number of records",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-nullable": true
          },
          {
            "name": "page",
            "in": "query",
            "description": "Encoded page string returned from a previous search result that will retrieve the next page of data. When this field is supplied, filter, sortBy and search fields should not be supplied.",
            "schema": {
              "maxLength": 500,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\+/]*={0,3}$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PagedResourceListOfPropertyDefinitionSearchResult"
                },
                "example": {
                  "values": [
                    {
                      "href": "https://example.lusid.com/api/properties/demo-scope/demo-code",
                      "key": "Portfolio/default/Country",
                      "valueType": "String",
                      "displayName": "Country",
                      "dataTypeId": {
                        "scope": "demo-scope",
                        "code": "demo-code"
                      },
                      "type": "Information",
                      "unitSchema": "Basic",
                      "domain": "Portfolio",
                      "scope": "default",
                      "code": "Country",
                      "valueRequired": false,
                      "lifeTime": "Perpetual",
                      "constraintStyle": "Property",
                      "propertyDefinitionType": "ValueProperty",
                      "propertyDescription": "A demonstration property definition search result"
                    }
                  ],
                  "href": "https://example.lusid.com/api/properties",
                  "links": []
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagedResourceListOfPropertyDefinitionSearchResult"
                },
                "example": {
                  "values": [
                    {
                      "href": "https://example.lusid.com/api/properties/demo-scope/demo-code",
                      "key": "Portfolio/default/Country",
                      "valueType": "String",
                      "displayName": "Country",
                      "dataTypeId": {
                        "scope": "demo-scope",
                        "code": "demo-code"
                      },
                      "type": "Information",
                      "unitSchema": "Basic",
                      "domain": "Portfolio",
                      "scope": "default",
                      "code": "Country",
                      "valueRequired": false,
                      "lifeTime": "Perpetual",
                      "constraintStyle": "Property",
                      "propertyDefinitionType": "ValueProperty",
                      "propertyDescription": "A demonstration property definition search result"
                    }
                  ],
                  "href": "https://example.lusid.com/api/properties",
                  "links": []
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagedResourceListOfPropertyDefinitionSearchResult"
                },
                "example": {
                  "values": [
                    {
                      "href": "https://example.lusid.com/api/properties/demo-scope/demo-code",
                      "key": "Portfolio/default/Country",
                      "valueType": "String",
                      "displayName": "Country",
                      "dataTypeId": {
                        "scope": "demo-scope",
                        "code": "demo-code"
                      },
                      "type": "Information",
                      "unitSchema": "Basic",
                      "domain": "Portfolio",
                      "scope": "default",
                      "code": "Country",
                      "valueRequired": false,
                      "lifeTime": "Perpetual",
                      "constraintStyle": "Property",
                      "propertyDefinitionType": "ValueProperty",
                      "propertyDescription": "A demonstration property definition search result"
                    }
                  ],
                  "href": "https://example.lusid.com/api/properties",
                  "links": []
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Stable"
      }
    },
    "/api/sequences": {
      "get": {
        "tags": [
          "Sequences"
        ],
        "summary": "[EARLY ACCESS] ListSequences: List Sequences",
        "description": "List sequences which satisfies filtering criteria.",
        "operationId": "ListSequences",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "The pagination token to use to continue listing sequences from a previous call to list sequences. This\r\nvalue is returned from the previous call.",
            "schema": {
              "maxLength": 500,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\+/]*={0,3}$",
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "When paginating, limit the number of returned results to this many. Defaults to 500 if not specified.",
            "schema": {
              "maximum": 5000,
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            },
            "x-nullable": true
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Expression to filter the result set. \r\n            Read more about filtering results from LUSID here https://support.lusid.com/filtering-results-from-lusid.",
            "schema": {
              "maxLength": 16384,
              "minLength": 0,
              "pattern": "^[\\s\\S]*$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The sequences matching filtering criteria",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PagedResourceListOfSequenceDefinition"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagedResourceListOfSequenceDefinition"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagedResourceListOfSequenceDefinition"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      }
    },
    "/api/sequences/{scope}": {
      "post": {
        "tags": [
          "Sequences"
        ],
        "summary": "[EARLY ACCESS] CreateSequence: Create a new sequence",
        "description": "Create a new sequence",
        "operationId": "CreateSequence",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "Scope of the sequence.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Request to create sequence",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/CreateSequenceRequest"
              },
              "example": {
                "code": "TestCode",
                "increment": 1,
                "minValue": 0,
                "maxValue": 10,
                "start": 0,
                "cycle": false,
                "pattern": "TXN-{{seqValue}}"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateSequenceRequest"
              },
              "example": {
                "code": "TestCode",
                "increment": 1,
                "minValue": 0,
                "maxValue": 10,
                "start": 0,
                "cycle": false,
                "pattern": "TXN-{{seqValue}}"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateSequenceRequest"
              },
              "example": {
                "code": "TestCode",
                "increment": 1,
                "minValue": 0,
                "maxValue": 10,
                "start": 0,
                "cycle": false,
                "pattern": "TXN-{{seqValue}}"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/CreateSequenceRequest"
              },
              "example": {
                "code": "TestCode",
                "increment": 1,
                "minValue": 0,
                "maxValue": 10,
                "start": 0,
                "cycle": false,
                "pattern": "TXN-{{seqValue}}"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "The newly created Sequence",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SequenceDefinition"
                },
                "example": {
                  "id": {
                    "scope": "TestScope",
                    "code": "TestCode"
                  },
                  "increment": 1,
                  "minValue": 0,
                  "maxValue": 10,
                  "start": 1,
                  "value": 3,
                  "cycle": false,
                  "pattern": "TXN-{{seqValue}}"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SequenceDefinition"
                },
                "example": {
                  "id": {
                    "scope": "TestScope",
                    "code": "TestCode"
                  },
                  "increment": 1,
                  "minValue": 0,
                  "maxValue": 10,
                  "start": 1,
                  "value": 3,
                  "cycle": false,
                  "pattern": "TXN-{{seqValue}}"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SequenceDefinition"
                },
                "example": {
                  "id": {
                    "scope": "TestScope",
                    "code": "TestCode"
                  },
                  "increment": 1,
                  "minValue": 0,
                  "maxValue": 10,
                  "start": 1,
                  "value": 3,
                  "cycle": false,
                  "pattern": "TXN-{{seqValue}}"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      }
    },
    "/api/sequences/{scope}/{code}": {
      "get": {
        "tags": [
          "Sequences"
        ],
        "summary": "[EARLY ACCESS] GetSequence: Get a specified sequence",
        "description": "Return the details of a specified sequence",
        "operationId": "GetSequence",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "Scope of the sequence.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string"
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "Code of the sequence. This together with stated scope uniquely\r\n            identifies the sequence.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The requested sequence",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SequenceDefinition"
                },
                "example": {
                  "id": {
                    "scope": "TestScope",
                    "code": "TestCode"
                  },
                  "increment": 1,
                  "minValue": 0,
                  "maxValue": 10,
                  "start": 1,
                  "value": 3,
                  "cycle": false,
                  "pattern": "TXN-{{seqValue}}"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SequenceDefinition"
                },
                "example": {
                  "id": {
                    "scope": "TestScope",
                    "code": "TestCode"
                  },
                  "increment": 1,
                  "minValue": 0,
                  "maxValue": 10,
                  "start": 1,
                  "value": 3,
                  "cycle": false,
                  "pattern": "TXN-{{seqValue}}"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SequenceDefinition"
                },
                "example": {
                  "id": {
                    "scope": "TestScope",
                    "code": "TestCode"
                  },
                  "increment": 1,
                  "minValue": 0,
                  "maxValue": 10,
                  "start": 1,
                  "value": 3,
                  "cycle": false,
                  "pattern": "TXN-{{seqValue}}"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      }
    },
    "/api/sequences/{scope}/{code}/next": {
      "get": {
        "tags": [
          "Sequences"
        ],
        "summary": "[EARLY ACCESS] Next: Get next values from sequence",
        "description": "Get the next set of values from a specified sequence",
        "operationId": "Next",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "Scope of the sequence.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string"
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "Code of the sequence. This together with stated scope uniquely\r\n            identifies the sequence.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string"
            }
          },
          {
            "name": "batch",
            "in": "query",
            "description": "Number of sequences items to return for the specified sequence. Default to 1 if not specified.",
            "schema": {
              "maximum": 5000,
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "description": "The response containing next available values in specified sequence.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/NextValueInSequenceResponse"
                },
                "example": {
                  "values": [
                    "TXN-0",
                    "TXN-1",
                    "TXN-2"
                  ]
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NextValueInSequenceResponse"
                },
                "example": {
                  "values": [
                    "TXN-0",
                    "TXN-1",
                    "TXN-2"
                  ]
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/NextValueInSequenceResponse"
                },
                "example": {
                  "values": [
                    "TXN-0",
                    "TXN-1",
                    "TXN-2"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      }
    },
    "/api/systemconfiguration/cutlabels": {
      "post": {
        "tags": [
          "Cut Label Definitions"
        ],
        "summary": "CreateCutLabelDefinition: Create a Cut Label",
        "description": "Create a Cut Label valid in all scopes",
        "operationId": "CreateCutLabelDefinition",
        "requestBody": {
          "description": "The cut label definition",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/CreateCutLabelDefinitionRequest"
              },
              "example": {
                "code": "CutLabelCode",
                "displayName": "CutLabelDisplayName",
                "description": "description of cut label",
                "cutLocalTime": {
                  "hours": 17,
                  "minutes": 0
                },
                "timeZone": "GB"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateCutLabelDefinitionRequest"
              },
              "example": {
                "code": "CutLabelCode",
                "displayName": "CutLabelDisplayName",
                "description": "description of cut label",
                "cutLocalTime": {
                  "hours": 17,
                  "minutes": 0
                },
                "timeZone": "GB"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateCutLabelDefinitionRequest"
              },
              "example": {
                "code": "CutLabelCode",
                "displayName": "CutLabelDisplayName",
                "description": "description of cut label",
                "cutLocalTime": {
                  "hours": 17,
                  "minutes": 0
                },
                "timeZone": "GB"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/CreateCutLabelDefinitionRequest"
              },
              "example": {
                "code": "CutLabelCode",
                "displayName": "CutLabelDisplayName",
                "description": "description of cut label",
                "cutLocalTime": {
                  "hours": 17,
                  "minutes": 0
                },
                "timeZone": "GB"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The created cut label",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CutLabelDefinition"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CutLabelDefinition"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CutLabelDefinition"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Stable"
      },
      "get": {
        "tags": [
          "Cut Label Definitions"
        ],
        "summary": "ListCutLabelDefinitions: List Existing Cut Labels",
        "description": "List all the Cut Label Definitions that are valid at the given AsAt time",
        "operationId": "ListCutLabelDefinitions",
        "parameters": [
          {
            "name": "asAt",
            "in": "query",
            "description": "Optional. The As At time at which listed Cut Labels are valid",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "x-nullable": true
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "Optional. Order the results by these fields. Use use the '-' sign to denote descending order e.g. -MyFieldName",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "x-nullable": true
          },
          {
            "name": "start",
            "in": "query",
            "description": "Optional. When paginating, skip this number of results",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-nullable": true
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Optional. When paginating, limit the number of returned results to this many.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-nullable": true
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Optional. Expression to filter the result set.\r\n            For example, to filter on code, use \"code eq 'string'\"\r\n            Read more about filtering results from LUSID here https://support.lusid.com/filtering-results-from-lusid.",
            "schema": {
              "maxLength": 16384,
              "minLength": 0,
              "pattern": "^[\\s\\S]*$",
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "The pagination token to use to continue listing cut labels from a previous call This value is returned from the previous call.\r\nIf a pagination token is provided the sortBy, filter, and asAt fields\r\nmust not have changed since the original request. Also, if set, a start value cannot be provided.",
            "schema": {
              "maxLength": 500,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\+/]*={0,3}$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A list of cut labels",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PagedResourceListOfCutLabelDefinition"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagedResourceListOfCutLabelDefinition"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagedResourceListOfCutLabelDefinition"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Stable"
      }
    },
    "/api/systemconfiguration/cutlabels/{code}": {
      "put": {
        "tags": [
          "Cut Label Definitions"
        ],
        "summary": "UpdateCutLabelDefinition: Update a Cut Label",
        "description": "Update a specified cut label",
        "operationId": "UpdateCutLabelDefinition",
        "parameters": [
          {
            "name": "code",
            "in": "path",
            "description": "The Code of the Cut Label that is being updated",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The cut label update definition",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateCutLabelDefinitionRequest"
              },
              "example": {
                "displayName": "CutLabelDisplayName",
                "description": "description of cut label",
                "cutLocalTime": {
                  "hours": 17,
                  "minutes": 0
                },
                "timeZone": "GB"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateCutLabelDefinitionRequest"
              },
              "example": {
                "displayName": "CutLabelDisplayName",
                "description": "description of cut label",
                "cutLocalTime": {
                  "hours": 17,
                  "minutes": 0
                },
                "timeZone": "GB"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateCutLabelDefinitionRequest"
              },
              "example": {
                "displayName": "CutLabelDisplayName",
                "description": "description of cut label",
                "cutLocalTime": {
                  "hours": 17,
                  "minutes": 0
                },
                "timeZone": "GB"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateCutLabelDefinitionRequest"
              },
              "example": {
                "displayName": "CutLabelDisplayName",
                "description": "description of cut label",
                "cutLocalTime": {
                  "hours": 17,
                  "minutes": 0
                },
                "timeZone": "GB"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The updated cut label",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CutLabelDefinition"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CutLabelDefinition"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CutLabelDefinition"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Stable"
      },
      "get": {
        "tags": [
          "Cut Label Definitions"
        ],
        "summary": "GetCutLabelDefinition: Get a Cut Label",
        "description": "Get a specified cut label at a given time",
        "operationId": "GetCutLabelDefinition",
        "parameters": [
          {
            "name": "code",
            "in": "path",
            "description": "The Code of the Cut Label that is being queried",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string"
            }
          },
          {
            "name": "asAt",
            "in": "query",
            "description": "The time at which to get the Cut Label",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "description": "The requested cut label",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CutLabelDefinition"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CutLabelDefinition"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CutLabelDefinition"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Stable"
      },
      "delete": {
        "tags": [
          "Cut Label Definitions"
        ],
        "summary": "DeleteCutLabelDefinition: Delete a Cut Label",
        "description": "Delete a specified cut label",
        "operationId": "DeleteCutLabelDefinition",
        "parameters": [
          {
            "name": "code",
            "in": "path",
            "description": "The Code of the Cut Label that is being Deleted",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The time of deletion",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "format": "date-time"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "date-time"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string",
                  "format": "date-time"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Stable"
      }
    },
    "/api/systemconfiguration/transactions": {
      "get": {
        "tags": [
          "System Configuration"
        ],
        "summary": "[EARLY ACCESS] ListConfigurationTransactionTypes: List transaction types",
        "description": "Get the list of current transaction types. For information on the default transaction types provided with\r\nLUSID, see https://support.lusid.com/knowledgebase/article/KA-01873/.",
        "operationId": "ListConfigurationTransactionTypes",
        "parameters": [
          {
            "name": "asAt",
            "in": "query",
            "description": "The asAt datetime at which to retrieve the transaction types. Defaults\r\n            to returning the latest versions if not specified.",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/TransactionSetConfigurationData"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TransactionSetConfigurationData"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/TransactionSetConfigurationData"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      }
    },
    "/api/systemconfiguration/transactions/type": {
      "post": {
        "tags": [
          "System Configuration"
        ],
        "summary": "[EARLY ACCESS] CreateConfigurationTransactionType: Create transaction type",
        "description": "Create a new transaction type by specifying a definition and mappings to movements.",
        "operationId": "CreateConfigurationTransactionType",
        "requestBody": {
          "description": "A transaction type definition.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/TransactionConfigurationDataRequest"
              },
              "example": {
                "aliases": [
                  {
                    "type": "Another-Sell",
                    "description": "Sale",
                    "transactionClass": "MyDefault",
                    "transactionGroup": "mysource",
                    "source": "mysource",
                    "transactionRoles": "LongShorter",
                    "isDefault": false
                  }
                ],
                "movements": [
                  {
                    "movementTypes": "StockMovement",
                    "side": "Side1",
                    "direction": -1,
                    "properties": {},
                    "mappings": [],
                    "movementOptions": []
                  },
                  {
                    "movementTypes": "CashCommitment",
                    "side": "Side2",
                    "direction": 1,
                    "properties": {},
                    "mappings": [],
                    "movementOptions": []
                  }
                ],
                "properties": {}
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TransactionConfigurationDataRequest"
              },
              "example": {
                "aliases": [
                  {
                    "type": "Another-Sell",
                    "description": "Sale",
                    "transactionClass": "MyDefault",
                    "transactionGroup": "mysource",
                    "source": "mysource",
                    "transactionRoles": "LongShorter",
                    "isDefault": false
                  }
                ],
                "movements": [
                  {
                    "movementTypes": "StockMovement",
                    "side": "Side1",
                    "direction": -1,
                    "properties": {},
                    "mappings": [],
                    "movementOptions": []
                  },
                  {
                    "movementTypes": "CashCommitment",
                    "side": "Side2",
                    "direction": 1,
                    "properties": {},
                    "mappings": [],
                    "movementOptions": []
                  }
                ],
                "properties": {}
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/TransactionConfigurationDataRequest"
              },
              "example": {
                "aliases": [
                  {
                    "type": "Another-Sell",
                    "description": "Sale",
                    "transactionClass": "MyDefault",
                    "transactionGroup": "mysource",
                    "source": "mysource",
                    "transactionRoles": "LongShorter",
                    "isDefault": false
                  }
                ],
                "movements": [
                  {
                    "movementTypes": "StockMovement",
                    "side": "Side1",
                    "direction": -1,
                    "properties": {},
                    "mappings": [],
                    "movementOptions": []
                  },
                  {
                    "movementTypes": "CashCommitment",
                    "side": "Side2",
                    "direction": 1,
                    "properties": {},
                    "mappings": [],
                    "movementOptions": []
                  }
                ],
                "properties": {}
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/TransactionConfigurationDataRequest"
              },
              "example": {
                "aliases": [
                  {
                    "type": "Another-Sell",
                    "description": "Sale",
                    "transactionClass": "MyDefault",
                    "transactionGroup": "mysource",
                    "source": "mysource",
                    "transactionRoles": "LongShorter",
                    "isDefault": false
                  }
                ],
                "movements": [
                  {
                    "movementTypes": "StockMovement",
                    "side": "Side1",
                    "direction": -1,
                    "properties": {},
                    "mappings": [],
                    "movementOptions": []
                  },
                  {
                    "movementTypes": "CashCommitment",
                    "side": "Side2",
                    "direction": 1,
                    "properties": {},
                    "mappings": [],
                    "movementOptions": []
                  }
                ],
                "properties": {}
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/TransactionSetConfigurationData"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TransactionSetConfigurationData"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/TransactionSetConfigurationData"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      }
    },
    "/api/transactionportfolios/{scope}": {
      "post": {
        "tags": [
          "Transaction Portfolios"
        ],
        "summary": "CreatePortfolio: Create portfolio",
        "description": "Create a transaction portfolio in a particular scope.",
        "operationId": "CreatePortfolio",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope in which to create the transaction portfolio.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The definition of the transaction portfolio.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/CreateTransactionPortfolioRequest"
              },
              "example": {
                "displayName": "Portfolio UK",
                "description": "Portfolio for UK market",
                "code": "PortfolioUk",
                "created": "2018-03-05T12:00:00.0000000+00:00",
                "baseCurrency": "GBP",
                "corporateActionSourceId": {
                  "scope": "Sources",
                  "code": "Vendor1"
                },
                "accountingMethod": "Default",
                "subHoldingKeys": [],
                "properties": {
                  "Portfolio/Manager/Name": {
                    "key": "Portfolio/Manager/Name",
                    "value": {
                      "labelValue": "Matt Smith"
                    },
                    "effectiveFrom": "2018-03-05T12:00:00.0000000+00:00"
                  },
                  "Portfolio/Manager/Id": {
                    "key": "Portfolio/Manager/Id",
                    "value": {
                      "metricValue": {
                        "value": 1628483,
                        "unit": "NoUnits"
                      }
                    },
                    "effectiveFrom": "2018-03-05T12:00:00.0000000+00:00"
                  }
                },
                "instrumentScopes": [],
                "amortisationMethod": "NoAmortisation",
                "transactionTypeScope": "SomeScope"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateTransactionPortfolioRequest"
              },
              "example": {
                "displayName": "Portfolio UK",
                "description": "Portfolio for UK market",
                "code": "PortfolioUk",
                "created": "2018-03-05T12:00:00.0000000+00:00",
                "baseCurrency": "GBP",
                "corporateActionSourceId": {
                  "scope": "Sources",
                  "code": "Vendor1"
                },
                "accountingMethod": "Default",
                "subHoldingKeys": [],
                "properties": {
                  "Portfolio/Manager/Name": {
                    "key": "Portfolio/Manager/Name",
                    "value": {
                      "labelValue": "Matt Smith"
                    },
                    "effectiveFrom": "2018-03-05T12:00:00.0000000+00:00"
                  },
                  "Portfolio/Manager/Id": {
                    "key": "Portfolio/Manager/Id",
                    "value": {
                      "metricValue": {
                        "value": 1628483,
                        "unit": "NoUnits"
                      }
                    },
                    "effectiveFrom": "2018-03-05T12:00:00.0000000+00:00"
                  }
                },
                "instrumentScopes": [],
                "amortisationMethod": "NoAmortisation",
                "transactionTypeScope": "SomeScope"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateTransactionPortfolioRequest"
              },
              "example": {
                "displayName": "Portfolio UK",
                "description": "Portfolio for UK market",
                "code": "PortfolioUk",
                "created": "2018-03-05T12:00:00.0000000+00:00",
                "baseCurrency": "GBP",
                "corporateActionSourceId": {
                  "scope": "Sources",
                  "code": "Vendor1"
                },
                "accountingMethod": "Default",
                "subHoldingKeys": [],
                "properties": {
                  "Portfolio/Manager/Name": {
                    "key": "Portfolio/Manager/Name",
                    "value": {
                      "labelValue": "Matt Smith"
                    },
                    "effectiveFrom": "2018-03-05T12:00:00.0000000+00:00"
                  },
                  "Portfolio/Manager/Id": {
                    "key": "Portfolio/Manager/Id",
                    "value": {
                      "metricValue": {
                        "value": 1628483,
                        "unit": "NoUnits"
                      }
                    },
                    "effectiveFrom": "2018-03-05T12:00:00.0000000+00:00"
                  }
                },
                "instrumentScopes": [],
                "amortisationMethod": "NoAmortisation",
                "transactionTypeScope": "SomeScope"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/CreateTransactionPortfolioRequest"
              },
              "example": {
                "displayName": "Portfolio UK",
                "description": "Portfolio for UK market",
                "code": "PortfolioUk",
                "created": "2018-03-05T12:00:00.0000000+00:00",
                "baseCurrency": "GBP",
                "corporateActionSourceId": {
                  "scope": "Sources",
                  "code": "Vendor1"
                },
                "accountingMethod": "Default",
                "subHoldingKeys": [],
                "properties": {
                  "Portfolio/Manager/Name": {
                    "key": "Portfolio/Manager/Name",
                    "value": {
                      "labelValue": "Matt Smith"
                    },
                    "effectiveFrom": "2018-03-05T12:00:00.0000000+00:00"
                  },
                  "Portfolio/Manager/Id": {
                    "key": "Portfolio/Manager/Id",
                    "value": {
                      "metricValue": {
                        "value": 1628483,
                        "unit": "NoUnits"
                      }
                    },
                    "effectiveFrom": "2018-03-05T12:00:00.0000000+00:00"
                  }
                },
                "instrumentScopes": [],
                "amortisationMethod": "NoAmortisation",
                "transactionTypeScope": "SomeScope"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "The newly-created transaction portfolio",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Portfolio"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Portfolio"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Portfolio"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Stable"
      }
    },
    "/api/transactionportfolios/{scope}/{code}/$resolve": {
      "post": {
        "tags": [
          "Transaction Portfolios"
        ],
        "summary": "[EARLY ACCESS] ResolveInstrument: Resolve instrument",
        "description": "Try to resolve the instrument for transaction and holdings for a given instrument identifier and a specified\r\nperiod of time. Also update the instrument identifiers with the given instrument identifiers collection.",
        "operationId": "ResolveInstrument",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the transaction portfolio.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string"
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The code of the transaction portfolio. Together with the scope this uniquely identifies\r\n            the transaction portfolio.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string"
            }
          },
          {
            "name": "instrumentIdentifierType",
            "in": "query",
            "description": "The instrument identifier type.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The key that uniquely identifies the property. It has the format {domain}/{scope}/{code}."
            }
          },
          {
            "name": "instrumentIdentifierValue",
            "in": "query",
            "description": "The value for the given instrument identifier.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fromEffectiveAt",
            "in": "query",
            "description": "The lower bound effective datetime or cut label (inclusive) from which to retrieve the data.\r\n            There is no lower bound if this is not specified.",
            "schema": {
              "type": "string",
              "format": "dateorcutlabel"
            }
          },
          {
            "name": "reResolve",
            "in": "query",
            "description": "When set to true, instrument resolution will be attempted for all transactions and holdings for the given identifier and date range.\r\n            When set to false (default behaviour), instrument resolution will only be attempted for those transactions and holdings that were previously unresolved.",
            "schema": {
              "type": "boolean",
              "default": false
            },
            "x-nullable": true
          }
        ],
        "requestBody": {
          "description": "The dictionary with the instrument identifiers to be updated on the\r\n           transaction and holdings.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "type": "string"
                }
              },
              "example": {
                "Instrument/default/Figi": "BBG000C6K6G9",
                "Instrument/default/Isin": "GB00BH4HKS39"
              }
            },
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "type": "string"
                }
              },
              "example": {
                "Instrument/default/Figi": "BBG000C6K6G9",
                "Instrument/default/Isin": "GB00BH4HKS39"
              }
            },
            "text/json": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "type": "string"
                }
              },
              "example": {
                "Instrument/default/Figi": "BBG000C6K6G9",
                "Instrument/default/Isin": "GB00BH4HKS39"
              }
            },
            "application/*+json": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "type": "string"
                }
              },
              "example": {
                "Instrument/default/Figi": "BBG000C6K6G9",
                "Instrument/default/Isin": "GB00BH4HKS39"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The version of the transaction portfolio that contains the newly updated or inserted transactions",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UpsertPortfolioTransactionsResponse"
                },
                "example": {
                  "version": {
                    "effectiveFrom": "2018-03-05T11:32:15.0000000+00:00",
                    "asAtDate": "2022-03-05T10:09:01.0000000+00:00"
                  },
                  "metadata": {
                    "warnings": [
                      {
                        "type": "TransactionTypesNotFound",
                        "description": "No transaction types could be found for the listed transactions",
                        "identifierType": "TransactionId",
                        "identifiers": [
                          "Transaction-001",
                          "Transaction-123"
                        ]
                      }
                    ]
                  }
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpsertPortfolioTransactionsResponse"
                },
                "example": {
                  "version": {
                    "effectiveFrom": "2018-03-05T11:32:15.0000000+00:00",
                    "asAtDate": "2022-03-05T10:09:01.0000000+00:00"
                  },
                  "metadata": {
                    "warnings": [
                      {
                        "type": "TransactionTypesNotFound",
                        "description": "No transaction types could be found for the listed transactions",
                        "identifierType": "TransactionId",
                        "identifiers": [
                          "Transaction-001",
                          "Transaction-123"
                        ]
                      }
                    ]
                  }
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpsertPortfolioTransactionsResponse"
                },
                "example": {
                  "version": {
                    "effectiveFrom": "2018-03-05T11:32:15.0000000+00:00",
                    "asAtDate": "2022-03-05T10:09:01.0000000+00:00"
                  },
                  "metadata": {
                    "warnings": [
                      {
                        "type": "TransactionTypesNotFound",
                        "description": "No transaction types could be found for the listed transactions",
                        "identifierType": "TransactionId",
                        "identifiers": [
                          "Transaction-001",
                          "Transaction-123"
                        ]
                      }
                    ]
                  }
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      }
    },
    "/api/transactionportfolios/{scope}/{code}/a2b": {
      "get": {
        "tags": [
          "Transaction Portfolios"
        ],
        "summary": "GetA2BData: Get A2B data",
        "description": "Get an A2B report for the given portfolio.",
        "operationId": "GetA2BData",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the portfolio to retrieve the A2B report for.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string"
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The code of the portfolio to retrieve the A2B report for. Together with the scope this\r\n            uniquely identifies the portfolio.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string"
            }
          },
          {
            "name": "fromEffectiveAt",
            "in": "query",
            "description": "The lower bound effective datetime or cut label (inclusive) from which to retrieve the data.\r\n            There is no lower bound if this is not specified.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "dateorcutlabel"
            }
          },
          {
            "name": "toEffectiveAt",
            "in": "query",
            "description": "The upper bound effective datetime or cut label (inclusive) from which to retrieve the data.\r\n            There is no upper bound if this is not specified.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "dateorcutlabel"
            }
          },
          {
            "name": "asAt",
            "in": "query",
            "description": "The asAt datetime at which to retrieve the portfolio. Defaults to return the latest version\r\n            of each transaction if not specified.",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "x-nullable": true
          },
          {
            "name": "recipeIdScope",
            "in": "query",
            "description": "The scope of the given recipeId",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "recipeIdCode",
            "in": "query",
            "description": "The code of the given recipeId",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "propertyKeys",
            "in": "query",
            "description": "A list of property keys from the \"Instrument\" domain to decorate onto\r\n            the results. These take the format {domain}/{scope}/{code} e.g. \"Instrument/system/Name\".",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "description": "The key that uniquely identifies the property. It has the format {domain}/{scope}/{code}."
              }
            },
            "x-nullable": true
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Expression to filter the result set.\r\n            Read more about filtering results from LUSID here https://support.lusid.com/filtering-results-from-lusid.",
            "schema": {
              "maxLength": 16384,
              "minLength": 0,
              "pattern": "^[\\s\\S]*$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The requested portfolio A2B data",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/VersionedResourceListOfA2BDataRecord"
                },
                "example": {
                  "version": {
                    "effectiveFrom": "2020-10-31T00:00:00.0000000+00:00",
                    "asAtDate": "2021-10-31T00:00:00.0000000+00:00"
                  },
                  "values": [
                    {
                      "portfolioId": {
                        "scope": "Example",
                        "code": "Portfolio"
                      },
                      "holdingType": "B",
                      "instrumentScope": "default",
                      "instrumentUid": "CCY_EUR",
                      "subHoldingKeys": {
                        "Transaction/Algo/Name": {
                          "key": "Transaction/Algo/Name",
                          "value": {
                            "labelValue": "CASH"
                          }
                        }
                      },
                      "currency": "EUR",
                      "start": {
                        "holdingCurrency": {
                          "total": 20000,
                          "currency": "EUR",
                          "components": {
                            "Cost": 20000
                          }
                        },
                        "portfolioCurrency": {
                          "total": 17400,
                          "currency": "GBP",
                          "components": {
                            "Cost": 16720,
                            "CurrencyGain": 680
                          }
                        }
                      },
                      "flows": {
                        "holdingCurrency": {
                          "total": -10415,
                          "currency": "EUR",
                          "components": {
                            "In": 192548,
                            "Out": -202963
                          }
                        },
                        "portfolioCurrency": {
                          "total": -9424.94,
                          "currency": "GBP",
                          "components": {
                            "In": 163473.25,
                            "Out": -172898.19
                          }
                        }
                      },
                      "gains": {
                        "portfolioCurrency": {
                          "total": -19.51,
                          "currency": "GBP",
                          "components": {
                            "RealCurrencyGain": 830.88,
                            "DeltaCurrencyGain": -850.39
                          }
                        }
                      },
                      "end": {
                        "holdingCurrency": {
                          "total": 9585,
                          "currency": "EUR",
                          "components": {
                            "Cost": 9585
                          }
                        },
                        "portfolioCurrency": {
                          "total": 7955.55,
                          "currency": "GBP",
                          "components": {
                            "Cost": 8125.94,
                            "CurrencyGain": -170.39
                          }
                        }
                      },
                      "properties": {
                        "Instrument/default/Name": {
                          "key": "Instrument/default/Name",
                          "value": {
                            "labelValue": "EURO"
                          }
                        },
                        "Instrument/default/Currency": {
                          "key": "Instrument/default/Currency",
                          "value": {
                            "labelValue": "EUR"
                          }
                        }
                      },
                      "groupId": "Grp1",
                      "errors": []
                    },
                    {
                      "portfolioId": {
                        "scope": "Example",
                        "code": "Portfolio"
                      },
                      "holdingType": "B",
                      "instrumentScope": "default",
                      "instrumentUid": "CCY_GBP",
                      "subHoldingKeys": {
                        "Transaction/Algo/Name": {
                          "key": "Transaction/Algo/Name",
                          "value": {
                            "labelValue": "CASH"
                          }
                        }
                      },
                      "currency": "GBP",
                      "start": {
                        "holdingCurrency": {
                          "total": 50000,
                          "currency": "GBP",
                          "components": {
                            "Cost": 50000
                          }
                        },
                        "portfolioCurrency": {
                          "total": 50000,
                          "currency": "GBP",
                          "components": {
                            "Cost": 50000
                          }
                        }
                      },
                      "end": {
                        "holdingCurrency": {
                          "total": 50000,
                          "currency": "GBP",
                          "components": {
                            "Cost": 50000
                          }
                        },
                        "portfolioCurrency": {
                          "total": 50000,
                          "currency": "GBP",
                          "components": {
                            "Cost": 50000
                          }
                        }
                      },
                      "properties": {
                        "Instrument/default/Name": {
                          "key": "Instrument/default/Name",
                          "value": {
                            "labelValue": "BRITISH POUND STERLING"
                          }
                        },
                        "Instrument/default/Currency": {
                          "key": "Instrument/default/Currency",
                          "value": {
                            "labelValue": "GBP"
                          }
                        }
                      },
                      "groupId": "Grp2",
                      "errors": []
                    },
                    {
                      "portfolioId": {
                        "scope": "Example",
                        "code": "Portfolio"
                      },
                      "holdingType": "B",
                      "instrumentScope": "default",
                      "instrumentUid": "CCY_USD",
                      "subHoldingKeys": {
                        "Transaction/Algo/Name": {
                          "key": "Transaction/Algo/Name",
                          "value": {
                            "labelValue": "CASH"
                          }
                        }
                      },
                      "currency": "USD",
                      "flows": {
                        "holdingCurrency": {
                          "total": 3525865,
                          "currency": "USD",
                          "components": {
                            "In": 3525865
                          }
                        },
                        "portfolioCurrency": {
                          "total": 2525548.82,
                          "currency": "GBP",
                          "components": {
                            "In": 2525548.82
                          }
                        }
                      },
                      "gains": {
                        "portfolioCurrency": {
                          "total": 13073.98,
                          "currency": "GBP",
                          "components": {
                            "DeltaCurrencyGain": 13073.98
                          }
                        }
                      },
                      "end": {
                        "holdingCurrency": {
                          "total": 3525865,
                          "currency": "USD",
                          "components": {
                            "Cost": 3525865
                          }
                        },
                        "portfolioCurrency": {
                          "total": 2538622.8,
                          "currency": "GBP",
                          "components": {
                            "Cost": 2525548.82,
                            "CurrencyGain": 13073.98
                          }
                        }
                      },
                      "properties": {
                        "Instrument/default/Name": {
                          "key": "Instrument/default/Name",
                          "value": {
                            "labelValue": "UNITED STATES DOLLAR"
                          }
                        },
                        "Instrument/default/Currency": {
                          "key": "Instrument/default/Currency",
                          "value": {
                            "labelValue": "USD"
                          }
                        }
                      },
                      "groupId": "Grp3",
                      "errors": []
                    },
                    {
                      "portfolioId": {
                        "scope": "Example",
                        "code": "Portfolio"
                      },
                      "holdingType": "B",
                      "instrumentScope": "default",
                      "instrumentUid": "CCY_ZAR",
                      "subHoldingKeys": {
                        "Transaction/Algo/Name": {
                          "key": "Transaction/Algo/Name",
                          "value": {
                            "labelValue": "CASH"
                          }
                        }
                      },
                      "currency": "ZAR",
                      "flows": {
                        "holdingCurrency": {
                          "total": 454975.26,
                          "currency": "ZAR",
                          "components": {
                            "Out": -1271770.65,
                            "In": 1726745.91
                          }
                        },
                        "portfolioCurrency": {
                          "total": 24155.02,
                          "currency": "GBP",
                          "components": {
                            "Out": -66256.57,
                            "In": 90411.59
                          }
                        }
                      },
                      "gains": {
                        "portfolioCurrency": {
                          "total": -951.28,
                          "currency": "GBP",
                          "components": {
                            "RealCurrencyGain": -132.33,
                            "DeltaCurrencyGain": -818.95
                          }
                        }
                      },
                      "end": {
                        "holdingCurrency": {
                          "total": 454975.26,
                          "currency": "ZAR",
                          "components": {
                            "Cost": 454975.26
                          }
                        },
                        "portfolioCurrency": {
                          "total": 23203.74,
                          "currency": "GBP",
                          "components": {
                            "Cost": 24022.69,
                            "CurrencyGain": -818.95
                          }
                        }
                      },
                      "properties": {
                        "Instrument/default/Name": {
                          "key": "Instrument/default/Name",
                          "value": {
                            "labelValue": "SOUTH AFRICAN RAND"
                          }
                        },
                        "Instrument/default/Currency": {
                          "key": "Instrument/default/Currency",
                          "value": {
                            "labelValue": "ZAR"
                          }
                        }
                      },
                      "groupId": "Grp4",
                      "errors": []
                    },
                    {
                      "portfolioId": {
                        "scope": "Example",
                        "code": "Portfolio"
                      },
                      "holdingType": "P",
                      "instrumentScope": "default",
                      "instrumentUid": "LUID_DF10C5QL",
                      "subHoldingKeys": {
                        "Transaction/Algo/Name": {
                          "key": "Transaction/Algo/Name",
                          "value": {
                            "labelValue": "Algo1"
                          }
                        }
                      },
                      "currency": "EUR",
                      "start": {
                        "holdingCurrency": {
                          "total": -142482.23,
                          "currency": "EUR",
                          "components": {
                            "Cost": -133842.94,
                            "MarketGain": -8639.29
                          }
                        },
                        "portfolioCurrency": {
                          "total": -123959.54,
                          "currency": "GBP",
                          "components": {
                            "Cost": -111625.01,
                            "MarketGain": -7516.18,
                            "CurrencyGain": -4818.35
                          }
                        }
                      },
                      "flows": {
                        "holdingCurrency": {
                          "total": 41349.22,
                          "currency": "EUR",
                          "components": {
                            "In": 41349.22
                          }
                        },
                        "portfolioCurrency": {
                          "total": 35436.28,
                          "currency": "GBP",
                          "components": {
                            "In": 35436.28
                          }
                        }
                      },
                      "gains": {
                        "holdingCurrency": {
                          "total": -12655.79,
                          "currency": "EUR",
                          "components": {
                            "RealMarketGain": -4846.6,
                            "Carry": 144.22,
                            "DeltaMarketGain": -7953.41
                          }
                        },
                        "portfolioCurrency": {
                          "total": -5917.55,
                          "currency": "GBP",
                          "components": {
                            "RealMarketGain": -4153.54,
                            "RealCurrencyGain": -839.56,
                            "Carry": 123.6,
                            "DeltaMarketGain": -6255.76,
                            "DeltaCurrencyGain": 5207.71
                          }
                        }
                      },
                      "carry": {
                        "holdingCurrency": {
                          "total": -144.22,
                          "currency": "EUR",
                          "components": {
                            "CoverWithCommission": -144.22
                          }
                        },
                        "portfolioCurrency": {
                          "total": -123.6,
                          "currency": "GBP",
                          "components": {
                            "CoverWithCommission": -123.6
                          }
                        }
                      },
                      "end": {
                        "holdingCurrency": {
                          "total": -113933.02,
                          "currency": "EUR",
                          "components": {
                            "Cost": -97340.32,
                            "MarketGain": -16592.7
                          }
                        },
                        "portfolioCurrency": {
                          "total": -94564.41,
                          "currency": "GBP",
                          "components": {
                            "Cost": -81181.83,
                            "MarketGain": -13771.94,
                            "CurrencyGain": 389.36
                          }
                        }
                      },
                      "properties": {
                        "Instrument/default/Name": {
                          "key": "Instrument/default/Name",
                          "value": {
                            "labelValue": "Eur CFD #3"
                          }
                        },
                        "Instrument/default/ClientInternal": {
                          "key": "Instrument/default/ClientInternal",
                          "value": {
                            "labelValue": "SAMPLE03"
                          }
                        }
                      },
                      "groupId": "Grp5",
                      "errors": []
                    },
                    {
                      "portfolioId": {
                        "scope": "Example",
                        "code": "Portfolio"
                      },
                      "holdingType": "P",
                      "instrumentScope": "default",
                      "instrumentUid": "LUID_DHBQ1SFH",
                      "subHoldingKeys": {
                        "Transaction/Algo/Name": {
                          "key": "Transaction/Algo/Name",
                          "value": {
                            "labelValue": "Algo1"
                          }
                        }
                      },
                      "currency": "ZAR",
                      "start": {
                        "holdingCurrency": {
                          "total": 10748488,
                          "currency": "ZAR",
                          "components": {
                            "Cost": 10748488
                          }
                        },
                        "portfolioCurrency": {
                          "total": 569669.86,
                          "currency": "GBP",
                          "components": {
                            "Cost": 505178.94,
                            "CurrencyGain": 64490.92
                          }
                        }
                      },
                      "flows": {
                        "holdingCurrency": {
                          "total": 1271770.65,
                          "currency": "ZAR",
                          "components": {
                            "In": 1271770.65
                          }
                        },
                        "portfolioCurrency": {
                          "total": 66256.57,
                          "currency": "GBP",
                          "components": {
                            "In": 66256.57
                          }
                        }
                      },
                      "gains": {
                        "holdingCurrency": {
                          "total": 774645.35,
                          "currency": "ZAR",
                          "components": {
                            "DeltaMarketGain": 774645.35
                          }
                        },
                        "portfolioCurrency": {
                          "total": 16613.67,
                          "currency": "GBP",
                          "components": {
                            "DeltaMarketGain": 39506.91,
                            "DeltaCurrencyGain": -22893.24
                          }
                        }
                      },
                      "end": {
                        "holdingCurrency": {
                          "total": 12794904,
                          "currency": "ZAR",
                          "components": {
                            "Cost": 12020258.65,
                            "MarketGain": 774645.35
                          }
                        },
                        "portfolioCurrency": {
                          "total": 652540.1,
                          "currency": "GBP",
                          "components": {
                            "Cost": 571435.51,
                            "MarketGain": 39506.91,
                            "CurrencyGain": 41597.68
                          }
                        }
                      },
                      "properties": {
                        "Instrument/default/Name": {
                          "key": "Instrument/default/Name",
                          "value": {
                            "labelValue": "Zar Equity #2"
                          }
                        },
                        "Instrument/default/ClientInternal": {
                          "key": "Instrument/default/ClientInternal",
                          "value": {
                            "labelValue": "SAMPLE05"
                          }
                        }
                      },
                      "groupId": "Grp6",
                      "errors": []
                    },
                    {
                      "portfolioId": {
                        "scope": "Example",
                        "code": "Portfolio"
                      },
                      "holdingType": "P",
                      "instrumentScope": "default",
                      "instrumentUid": "LUID_GMJL7YDH",
                      "subHoldingKeys": {
                        "Transaction/Algo/Name": {
                          "key": "Transaction/Algo/Name",
                          "value": {
                            "labelValue": "Algo1"
                          }
                        }
                      },
                      "currency": "EUR",
                      "start": {
                        "holdingCurrency": {
                          "total": -282505.92,
                          "currency": "EUR",
                          "components": {
                            "Cost": -331495.14,
                            "MarketGain": 48989.22
                          }
                        },
                        "portfolioCurrency": {
                          "total": -245780.15,
                          "currency": "GBP",
                          "components": {
                            "Cost": -276798.44,
                            "MarketGain": 42620.62,
                            "CurrencyGain": -11602.33
                          }
                        }
                      },
                      "flows": {
                        "holdingCurrency": {
                          "total": 116514.38,
                          "currency": "EUR",
                          "components": {
                            "In": 116514.38
                          }
                        },
                        "portfolioCurrency": {
                          "total": 99037.22,
                          "currency": "GBP",
                          "components": {
                            "In": 99037.22
                          }
                        }
                      },
                      "gains": {
                        "holdingCurrency": {
                          "total": -70290.08,
                          "currency": "EUR",
                          "components": {
                            "RealMarketGain": -6016,
                            "Carry": 406.38,
                            "DeltaMarketGain": -64680.46
                          }
                        },
                        "portfolioCurrency": {
                          "total": -49362.69,
                          "currency": "GBP",
                          "components": {
                            "RealMarketGain": -5113.59,
                            "RealCurrencyGain": -1657.48,
                            "Carry": 345.42,
                            "DeltaMarketGain": -55644.35,
                            "DeltaCurrencyGain": 12707.31
                          }
                        }
                      },
                      "carry": {
                        "holdingCurrency": {
                          "total": -406.38,
                          "currency": "EUR",
                          "components": {
                            "CoverWithCommission": -406.38
                          }
                        },
                        "portfolioCurrency": {
                          "total": -345.42,
                          "currency": "GBP",
                          "components": {
                            "CoverWithCommission": -345.42
                          }
                        }
                      },
                      "end": {
                        "holdingCurrency": {
                          "total": -236688,
                          "currency": "EUR",
                          "components": {
                            "Cost": -220996.76,
                            "MarketGain": -15691.24
                          }
                        },
                        "portfolioCurrency": {
                          "total": -196451.04,
                          "currency": "GBP",
                          "components": {
                            "Cost": -184532.29,
                            "MarketGain": -13023.73,
                            "CurrencyGain": 1104.98
                          }
                        }
                      },
                      "properties": {
                        "Instrument/default/Name": {
                          "key": "Instrument/default/Name",
                          "value": {
                            "labelValue": "Eur CFD #1"
                          }
                        },
                        "Instrument/default/ClientInternal": {
                          "key": "Instrument/default/ClientInternal",
                          "value": {
                            "labelValue": "SAMPLE01"
                          }
                        }
                      },
                      "groupId": "Grp7",
                      "errors": []
                    },
                    {
                      "portfolioId": {
                        "scope": "Example",
                        "code": "Portfolio"
                      },
                      "holdingType": "P",
                      "instrumentScope": "default",
                      "instrumentUid": "LUID_HPHFXRXM",
                      "subHoldingKeys": {
                        "Transaction/Algo/Name": {
                          "key": "Transaction/Algo/Name",
                          "value": {
                            "labelValue": "Algo1"
                          }
                        }
                      },
                      "currency": "USD",
                      "start": {
                        "holdingCurrency": {
                          "total": 4696,
                          "currency": "USD",
                          "components": {
                            "Cost": 4800,
                            "MarketGain": -104
                          }
                        },
                        "portfolioCurrency": {
                          "total": 3334.16,
                          "currency": "GBP",
                          "components": {
                            "Cost": 3470.4,
                            "MarketGain": -73.84,
                            "CurrencyGain": -62.4
                          }
                        }
                      },
                      "flows": {
                        "holdingCurrency": {
                          "total": -25,
                          "currency": "USD",
                          "components": {
                            "Out": -25
                          }
                        },
                        "portfolioCurrency": {
                          "total": -17.82,
                          "currency": "GBP",
                          "components": {
                            "Out": -17.82
                          }
                        }
                      },
                      "gains": {
                        "holdingCurrency": {
                          "total": -21,
                          "currency": "USD",
                          "components": {
                            "DeltaMarketGain": -21
                          }
                        },
                        "portfolioCurrency": {
                          "total": 31.84,
                          "currency": "GBP",
                          "components": {
                            "DeltaMarketGain": -16.16,
                            "DeltaCurrencyGain": 48
                          }
                        }
                      },
                      "carry": {
                        "holdingCurrency": {
                          "total": 25,
                          "currency": "USD",
                          "components": {
                            "Dividend": 25
                          }
                        },
                        "portfolioCurrency": {
                          "total": 17.82,
                          "currency": "GBP",
                          "components": {
                            "Dividend": 17.82
                          }
                        }
                      },
                      "end": {
                        "holdingCurrency": {
                          "total": 4675,
                          "currency": "USD",
                          "components": {
                            "Cost": 4800,
                            "MarketGain": -125
                          }
                        },
                        "portfolioCurrency": {
                          "total": 3366,
                          "currency": "GBP",
                          "components": {
                            "Cost": 3470.4,
                            "MarketGain": -90,
                            "CurrencyGain": -14.4
                          }
                        }
                      },
                      "properties": {
                        "Instrument/default/Name": {
                          "key": "Instrument/default/Name",
                          "value": {
                            "labelValue": "Usd Equity #2"
                          }
                        },
                        "Instrument/default/ClientInternal": {
                          "key": "Instrument/default/ClientInternal",
                          "value": {
                            "labelValue": "SAMPLE10"
                          }
                        }
                      },
                      "groupId": "Grp8",
                      "errors": []
                    },
                    {
                      "portfolioId": {
                        "scope": "Example",
                        "code": "Portfolio"
                      },
                      "holdingType": "P",
                      "instrumentScope": "default",
                      "instrumentUid": "LUID_LD560F1M",
                      "subHoldingKeys": {
                        "Transaction/Algo/Name": {
                          "key": "Transaction/Algo/Name",
                          "value": {
                            "labelValue": "Algo1"
                          }
                        }
                      },
                      "currency": "EUR",
                      "start": {
                        "holdingCurrency": {
                          "total": 171560,
                          "currency": "EUR",
                          "components": {
                            "Cost": 163259.7,
                            "MarketGain": 8300.3
                          }
                        },
                        "portfolioCurrency": {
                          "total": 149257.2,
                          "currency": "GBP",
                          "components": {
                            "Cost": 136321.85,
                            "MarketGain": 7221.26,
                            "CurrencyGain": 5714.09
                          }
                        }
                      },
                      "flows": {
                        "holdingCurrency": {
                          "total": -192548,
                          "currency": "EUR",
                          "components": {
                            "Out": -192548
                          }
                        },
                        "portfolioCurrency": {
                          "total": -163473.25,
                          "currency": "GBP",
                          "components": {
                            "Out": -163473.25
                          }
                        }
                      },
                      "gains": {
                        "holdingCurrency": {
                          "total": 20988,
                          "currency": "EUR",
                          "components": {
                            "RealMarketGain": 29288.3,
                            "DeltaMarketGain": -8300.3
                          }
                        },
                        "portfolioCurrency": {
                          "total": 14216.05,
                          "currency": "GBP",
                          "components": {
                            "RealMarketGain": 24865.76,
                            "RealCurrencyGain": 2285.64,
                            "DeltaMarketGain": -7221.26,
                            "DeltaCurrencyGain": -5714.09
                          }
                        }
                      },
                      "properties": {
                        "Instrument/default/Name": {
                          "key": "Instrument/default/Name",
                          "value": {
                            "labelValue": "Eur Equity"
                          }
                        },
                        "Instrument/default/ClientInternal": {
                          "key": "Instrument/default/ClientInternal",
                          "value": {
                            "labelValue": "SAMPLE09"
                          }
                        }
                      },
                      "groupId": "Grp9",
                      "errors": []
                    },
                    {
                      "portfolioId": {
                        "scope": "Example",
                        "code": "Portfolio"
                      },
                      "holdingType": "P",
                      "instrumentScope": "default",
                      "instrumentUid": "LUID_QH2V2O68",
                      "subHoldingKeys": {
                        "Transaction/Algo/Name": {
                          "key": "Transaction/Algo/Name",
                          "value": {
                            "labelValue": "Algo1"
                          }
                        }
                      },
                      "currency": "ZAR",
                      "start": {
                        "holdingCurrency": {
                          "total": 3940650,
                          "currency": "ZAR",
                          "components": {
                            "Cost": 4480295.86,
                            "MarketGain": -539645.86
                          }
                        },
                        "portfolioCurrency": {
                          "total": 208854.45,
                          "currency": "GBP",
                          "components": {
                            "Cost": 215054.2,
                            "MarketGain": -28601.23,
                            "CurrencyGain": 22401.48
                          }
                        }
                      },
                      "flows": {
                        "holdingCurrency": {
                          "total": -950751.25,
                          "currency": "ZAR",
                          "components": {
                            "Out": -950751.25
                          }
                        },
                        "portfolioCurrency": {
                          "total": -49439.07,
                          "currency": "GBP",
                          "components": {
                            "Out": -49439.07
                          }
                        }
                      },
                      "gains": {
                        "holdingCurrency": {
                          "total": 258101.25,
                          "currency": "ZAR",
                          "components": {
                            "RealMarketGain": -115985.86,
                            "DeltaMarketGain": 374087.11
                          }
                        },
                        "portfolioCurrency": {
                          "total": 6232.62,
                          "currency": "GBP",
                          "components": {
                            "RealMarketGain": -6031.26,
                            "RealCurrencyGain": 4266.95,
                            "DeltaMarketGain": 20157.73,
                            "DeltaCurrencyGain": -12160.8
                          }
                        }
                      },
                      "end": {
                        "holdingCurrency": {
                          "total": 3248000,
                          "currency": "ZAR",
                          "components": {
                            "Cost": 3413558.75,
                            "MarketGain": -165558.75
                          }
                        },
                        "portfolioCurrency": {
                          "total": 165648,
                          "currency": "GBP",
                          "components": {
                            "Cost": 163850.82,
                            "MarketGain": -8443.5,
                            "CurrencyGain": 10240.68
                          }
                        }
                      },
                      "properties": {
                        "Instrument/default/Name": {
                          "key": "Instrument/default/Name",
                          "value": {
                            "labelValue": "Zar Equity #1"
                          }
                        },
                        "Instrument/default/ClientInternal": {
                          "key": "Instrument/default/ClientInternal",
                          "value": {
                            "labelValue": "SAMPLE04"
                          }
                        }
                      },
                      "groupId": "Grp10",
                      "errors": []
                    },
                    {
                      "portfolioId": {
                        "scope": "Example",
                        "code": "Portfolio"
                      },
                      "holdingType": "P",
                      "instrumentScope": "default",
                      "instrumentUid": "LUID_QTKKFOKC",
                      "subHoldingKeys": {
                        "Transaction/Algo/Name": {
                          "key": "Transaction/Algo/Name",
                          "value": {
                            "labelValue": "Algo1"
                          }
                        }
                      },
                      "currency": "EUR",
                      "start": {
                        "holdingCurrency": {
                          "total": -238437.31,
                          "currency": "EUR",
                          "components": {
                            "Cost": -234688.46,
                            "MarketGain": -3748.85
                          }
                        },
                        "portfolioCurrency": {
                          "total": -207440.46,
                          "currency": "GBP",
                          "components": {
                            "Cost": -195495.49,
                            "MarketGain": -3261.5,
                            "CurrencyGain": -8683.47
                          }
                        }
                      },
                      "flows": {
                        "holdingCurrency": {
                          "total": 45099.4,
                          "currency": "EUR",
                          "components": {
                            "In": 45099.4
                          }
                        },
                        "portfolioCurrency": {
                          "total": 38424.69,
                          "currency": "GBP",
                          "components": {
                            "In": 38424.69
                          }
                        }
                      },
                      "gains": {
                        "holdingCurrency": {
                          "total": -66223.84,
                          "currency": "EUR",
                          "components": {
                            "RealMarketGain": -10145.8,
                            "Carry": 157.3,
                            "DeltaMarketGain": -56235.34
                          }
                        },
                        "portfolioCurrency": {
                          "total": -46417.02,
                          "currency": "GBP",
                          "components": {
                            "RealMarketGain": -8644.22,
                            "RealCurrencyGain": -664.12,
                            "Carry": 134.02,
                            "DeltaMarketGain": -46525.38,
                            "DeltaCurrencyGain": 9282.68
                          }
                        }
                      },
                      "carry": {
                        "holdingCurrency": {
                          "total": -157.3,
                          "currency": "EUR",
                          "components": {
                            "CoverWithCommission": -157.3
                          }
                        },
                        "portfolioCurrency": {
                          "total": -134.02,
                          "currency": "GBP",
                          "components": {
                            "CoverWithCommission": -134.02
                          }
                        }
                      },
                      "end": {
                        "holdingCurrency": {
                          "total": -259719.05,
                          "currency": "EUR",
                          "components": {
                            "Cost": -199734.86,
                            "MarketGain": -59984.19
                          }
                        },
                        "portfolioCurrency": {
                          "total": -215566.81,
                          "currency": "GBP",
                          "components": {
                            "Cost": -166379.14,
                            "MarketGain": -49786.88,
                            "CurrencyGain": 599.21
                          }
                        }
                      },
                      "properties": {
                        "Instrument/default/Name": {
                          "key": "Instrument/default/Name",
                          "value": {
                            "labelValue": "Eur CFD #2"
                          }
                        },
                        "Instrument/default/ClientInternal": {
                          "key": "Instrument/default/ClientInternal",
                          "value": {
                            "labelValue": "SAMPLE02"
                          }
                        }
                      },
                      "groupId": "Grp11",
                      "errors": []
                    },
                    {
                      "portfolioId": {
                        "scope": "Example",
                        "code": "Portfolio"
                      },
                      "holdingType": "P",
                      "instrumentScope": "default",
                      "instrumentUid": "LUID_T6YOHML7",
                      "subHoldingKeys": {
                        "Transaction/Algo/Name": {
                          "key": "Transaction/Algo/Name",
                          "value": {
                            "labelValue": "Algo1"
                          }
                        }
                      },
                      "currency": "USD",
                      "start": {
                        "holdingCurrency": {
                          "total": 3313875,
                          "currency": "USD",
                          "components": {
                            "Cost": 3509200,
                            "MarketGain": -195325
                          }
                        },
                        "portfolioCurrency": {
                          "total": 2352851.25,
                          "currency": "GBP",
                          "components": {
                            "Cost": 2485778.5,
                            "MarketGain": -138680.75,
                            "CurrencyGain": 5753.5
                          }
                        }
                      },
                      "flows": {
                        "holdingCurrency": {
                          "total": -3525840,
                          "currency": "USD",
                          "components": {
                            "Out": -3525840
                          }
                        },
                        "portfolioCurrency": {
                          "total": -2525531,
                          "currency": "GBP",
                          "components": {
                            "Out": -2525531
                          }
                        }
                      },
                      "gains": {
                        "holdingCurrency": {
                          "total": 211965,
                          "currency": "USD",
                          "components": {
                            "RealMarketGain": 16640,
                            "DeltaMarketGain": 195325
                          }
                        },
                        "portfolioCurrency": {
                          "total": 172679.75,
                          "currency": "GBP",
                          "components": {
                            "RealMarketGain": 11825,
                            "RealCurrencyGain": 27927.5,
                            "DeltaMarketGain": 138680.75,
                            "DeltaCurrencyGain": -5753.5
                          }
                        }
                      },
                      "properties": {
                        "Instrument/default/Name": {
                          "key": "Instrument/default/Name",
                          "value": {
                            "labelValue": "Usd CFD #1"
                          }
                        },
                        "Instrument/default/ClientInternal": {
                          "key": "Instrument/default/ClientInternal",
                          "value": {
                            "labelValue": "SAMPLE07"
                          }
                        }
                      },
                      "groupId": "Grp12",
                      "errors": []
                    },
                    {
                      "portfolioId": {
                        "scope": "Example",
                        "code": "Portfolio"
                      },
                      "holdingType": "P",
                      "instrumentScope": "default",
                      "instrumentUid": "LUID_VYWV6V8Y",
                      "subHoldingKeys": {
                        "Transaction/Algo/Name": {
                          "key": "Transaction/Algo/Name",
                          "value": {
                            "labelValue": "Algo1"
                          }
                        }
                      },
                      "currency": "ZAR",
                      "start": {
                        "holdingCurrency": {
                          "total": 9783000,
                          "currency": "ZAR",
                          "components": {
                            "Cost": 10824063.04,
                            "MarketGain": -1041063.04
                          }
                        },
                        "portfolioCurrency": {
                          "total": 518499,
                          "currency": "GBP",
                          "components": {
                            "Cost": 530379.09,
                            "MarketGain": -55176.34,
                            "CurrencyGain": 43296.25
                          }
                        }
                      },
                      "flows": {
                        "holdingCurrency": {
                          "total": -775994.66,
                          "currency": "ZAR",
                          "components": {
                            "Out": -775994.66
                          }
                        },
                        "portfolioCurrency": {
                          "total": -40972.52,
                          "currency": "GBP",
                          "components": {
                            "Out": -40972.52
                          }
                        }
                      },
                      "gains": {
                        "holdingCurrency": {
                          "total": 952994.66,
                          "currency": "ZAR",
                          "components": {
                            "RealMarketGain": -65876.91,
                            "DeltaMarketGain": 1018871.57
                          }
                        },
                        "portfolioCurrency": {
                          "total": 30433.52,
                          "currency": "GBP",
                          "components": {
                            "RealMarketGain": -3478.3,
                            "RealCurrencyGain": 3199.11,
                            "DeltaMarketGain": 54044.58,
                            "DeltaCurrencyGain": -23331.87
                          }
                        }
                      },
                      "end": {
                        "holdingCurrency": {
                          "total": 9960000,
                          "currency": "ZAR",
                          "components": {
                            "Cost": 9982191.47,
                            "MarketGain": -22191.47
                          }
                        },
                        "portfolioCurrency": {
                          "total": 507960,
                          "currency": "GBP",
                          "components": {
                            "Cost": 489127.38,
                            "MarketGain": -1131.76,
                            "CurrencyGain": 19964.38
                          }
                        }
                      },
                      "properties": {
                        "Instrument/default/Name": {
                          "key": "Instrument/default/Name",
                          "value": {
                            "labelValue": "Zar Equity #3"
                          }
                        },
                        "Instrument/default/ClientInternal": {
                          "key": "Instrument/default/ClientInternal",
                          "value": {
                            "labelValue": "SAMPLE06"
                          }
                        }
                      },
                      "groupId": "Grp13",
                      "errors": []
                    },
                    {
                      "portfolioId": {
                        "scope": "Example",
                        "code": "Portfolio"
                      },
                      "holdingType": "P",
                      "instrumentScope": "default",
                      "instrumentUid": "LUID_X8R9444V",
                      "subHoldingKeys": {
                        "Transaction/Algo/Name": {
                          "key": "Transaction/Algo/Name",
                          "value": {
                            "labelValue": "Algo1"
                          }
                        }
                      },
                      "currency": "USD",
                      "start": {
                        "holdingCurrency": {
                          "total": 20652,
                          "currency": "USD",
                          "components": {
                            "Cost": 20000,
                            "MarketGain": 652
                          }
                        },
                        "portfolioCurrency": {
                          "total": 14662.92,
                          "currency": "GBP",
                          "components": {
                            "Cost": 14000,
                            "MarketGain": 462.92,
                            "CurrencyGain": 200
                          }
                        }
                      },
                      "gains": {
                        "holdingCurrency": {
                          "total": -16652,
                          "currency": "USD",
                          "components": {
                            "DeltaMarketGain": -16652
                          }
                        },
                        "portfolioCurrency": {
                          "total": -11782.92,
                          "currency": "GBP",
                          "components": {
                            "DeltaMarketGain": -11982.92,
                            "DeltaCurrencyGain": 200
                          }
                        }
                      },
                      "end": {
                        "holdingCurrency": {
                          "total": 4000,
                          "currency": "USD",
                          "components": {
                            "Cost": 20000,
                            "MarketGain": -16000
                          }
                        },
                        "portfolioCurrency": {
                          "total": 2880,
                          "currency": "GBP",
                          "components": {
                            "Cost": 14000,
                            "MarketGain": -11520,
                            "CurrencyGain": 400
                          }
                        }
                      },
                      "properties": {
                        "Instrument/default/Name": {
                          "key": "Instrument/default/Name",
                          "value": {
                            "labelValue": "Usd Equity #1"
                          }
                        },
                        "Instrument/default/ClientInternal": {
                          "key": "Instrument/default/ClientInternal",
                          "value": {
                            "labelValue": "SAMPLE08"
                          }
                        }
                      },
                      "groupId": "Grp14",
                      "errors": []
                    }
                  ],
                  "links": []
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VersionedResourceListOfA2BDataRecord"
                },
                "example": {
                  "version": {
                    "effectiveFrom": "2020-10-31T00:00:00.0000000+00:00",
                    "asAtDate": "2021-10-31T00:00:00.0000000+00:00"
                  },
                  "values": [
                    {
                      "portfolioId": {
                        "scope": "Example",
                        "code": "Portfolio"
                      },
                      "holdingType": "B",
                      "instrumentScope": "default",
                      "instrumentUid": "CCY_EUR",
                      "subHoldingKeys": {
                        "Transaction/Algo/Name": {
                          "key": "Transaction/Algo/Name",
                          "value": {
                            "labelValue": "CASH"
                          }
                        }
                      },
                      "currency": "EUR",
                      "start": {
                        "holdingCurrency": {
                          "total": 20000,
                          "currency": "EUR",
                          "components": {
                            "Cost": 20000
                          }
                        },
                        "portfolioCurrency": {
                          "total": 17400,
                          "currency": "GBP",
                          "components": {
                            "Cost": 16720,
                            "CurrencyGain": 680
                          }
                        }
                      },
                      "flows": {
                        "holdingCurrency": {
                          "total": -10415,
                          "currency": "EUR",
                          "components": {
                            "In": 192548,
                            "Out": -202963
                          }
                        },
                        "portfolioCurrency": {
                          "total": -9424.94,
                          "currency": "GBP",
                          "components": {
                            "In": 163473.25,
                            "Out": -172898.19
                          }
                        }
                      },
                      "gains": {
                        "portfolioCurrency": {
                          "total": -19.51,
                          "currency": "GBP",
                          "components": {
                            "RealCurrencyGain": 830.88,
                            "DeltaCurrencyGain": -850.39
                          }
                        }
                      },
                      "end": {
                        "holdingCurrency": {
                          "total": 9585,
                          "currency": "EUR",
                          "components": {
                            "Cost": 9585
                          }
                        },
                        "portfolioCurrency": {
                          "total": 7955.55,
                          "currency": "GBP",
                          "components": {
                            "Cost": 8125.94,
                            "CurrencyGain": -170.39
                          }
                        }
                      },
                      "properties": {
                        "Instrument/default/Name": {
                          "key": "Instrument/default/Name",
                          "value": {
                            "labelValue": "EURO"
                          }
                        },
                        "Instrument/default/Currency": {
                          "key": "Instrument/default/Currency",
                          "value": {
                            "labelValue": "EUR"
                          }
                        }
                      },
                      "groupId": "Grp1",
                      "errors": []
                    },
                    {
                      "portfolioId": {
                        "scope": "Example",
                        "code": "Portfolio"
                      },
                      "holdingType": "B",
                      "instrumentScope": "default",
                      "instrumentUid": "CCY_GBP",
                      "subHoldingKeys": {
                        "Transaction/Algo/Name": {
                          "key": "Transaction/Algo/Name",
                          "value": {
                            "labelValue": "CASH"
                          }
                        }
                      },
                      "currency": "GBP",
                      "start": {
                        "holdingCurrency": {
                          "total": 50000,
                          "currency": "GBP",
                          "components": {
                            "Cost": 50000
                          }
                        },
                        "portfolioCurrency": {
                          "total": 50000,
                          "currency": "GBP",
                          "components": {
                            "Cost": 50000
                          }
                        }
                      },
                      "end": {
                        "holdingCurrency": {
                          "total": 50000,
                          "currency": "GBP",
                          "components": {
                            "Cost": 50000
                          }
                        },
                        "portfolioCurrency": {
                          "total": 50000,
                          "currency": "GBP",
                          "components": {
                            "Cost": 50000
                          }
                        }
                      },
                      "properties": {
                        "Instrument/default/Name": {
                          "key": "Instrument/default/Name",
                          "value": {
                            "labelValue": "BRITISH POUND STERLING"
                          }
                        },
                        "Instrument/default/Currency": {
                          "key": "Instrument/default/Currency",
                          "value": {
                            "labelValue": "GBP"
                          }
                        }
                      },
                      "groupId": "Grp2",
                      "errors": []
                    },
                    {
                      "portfolioId": {
                        "scope": "Example",
                        "code": "Portfolio"
                      },
                      "holdingType": "B",
                      "instrumentScope": "default",
                      "instrumentUid": "CCY_USD",
                      "subHoldingKeys": {
                        "Transaction/Algo/Name": {
                          "key": "Transaction/Algo/Name",
                          "value": {
                            "labelValue": "CASH"
                          }
                        }
                      },
                      "currency": "USD",
                      "flows": {
                        "holdingCurrency": {
                          "total": 3525865,
                          "currency": "USD",
                          "components": {
                            "In": 3525865
                          }
                        },
                        "portfolioCurrency": {
                          "total": 2525548.82,
                          "currency": "GBP",
                          "components": {
                            "In": 2525548.82
                          }
                        }
                      },
                      "gains": {
                        "portfolioCurrency": {
                          "total": 13073.98,
                          "currency": "GBP",
                          "components": {
                            "DeltaCurrencyGain": 13073.98
                          }
                        }
                      },
                      "end": {
                        "holdingCurrency": {
                          "total": 3525865,
                          "currency": "USD",
                          "components": {
                            "Cost": 3525865
                          }
                        },
                        "portfolioCurrency": {
                          "total": 2538622.8,
                          "currency": "GBP",
                          "components": {
                            "Cost": 2525548.82,
                            "CurrencyGain": 13073.98
                          }
                        }
                      },
                      "properties": {
                        "Instrument/default/Name": {
                          "key": "Instrument/default/Name",
                          "value": {
                            "labelValue": "UNITED STATES DOLLAR"
                          }
                        },
                        "Instrument/default/Currency": {
                          "key": "Instrument/default/Currency",
                          "value": {
                            "labelValue": "USD"
                          }
                        }
                      },
                      "groupId": "Grp3",
                      "errors": []
                    },
                    {
                      "portfolioId": {
                        "scope": "Example",
                        "code": "Portfolio"
                      },
                      "holdingType": "B",
                      "instrumentScope": "default",
                      "instrumentUid": "CCY_ZAR",
                      "subHoldingKeys": {
                        "Transaction/Algo/Name": {
                          "key": "Transaction/Algo/Name",
                          "value": {
                            "labelValue": "CASH"
                          }
                        }
                      },
                      "currency": "ZAR",
                      "flows": {
                        "holdingCurrency": {
                          "total": 454975.26,
                          "currency": "ZAR",
                          "components": {
                            "Out": -1271770.65,
                            "In": 1726745.91
                          }
                        },
                        "portfolioCurrency": {
                          "total": 24155.02,
                          "currency": "GBP",
                          "components": {
                            "Out": -66256.57,
                            "In": 90411.59
                          }
                        }
                      },
                      "gains": {
                        "portfolioCurrency": {
                          "total": -951.28,
                          "currency": "GBP",
                          "components": {
                            "RealCurrencyGain": -132.33,
                            "DeltaCurrencyGain": -818.95
                          }
                        }
                      },
                      "end": {
                        "holdingCurrency": {
                          "total": 454975.26,
                          "currency": "ZAR",
                          "components": {
                            "Cost": 454975.26
                          }
                        },
                        "portfolioCurrency": {
                          "total": 23203.74,
                          "currency": "GBP",
                          "components": {
                            "Cost": 24022.69,
                            "CurrencyGain": -818.95
                          }
                        }
                      },
                      "properties": {
                        "Instrument/default/Name": {
                          "key": "Instrument/default/Name",
                          "value": {
                            "labelValue": "SOUTH AFRICAN RAND"
                          }
                        },
                        "Instrument/default/Currency": {
                          "key": "Instrument/default/Currency",
                          "value": {
                            "labelValue": "ZAR"
                          }
                        }
                      },
                      "groupId": "Grp4",
                      "errors": []
                    },
                    {
                      "portfolioId": {
                        "scope": "Example",
                        "code": "Portfolio"
                      },
                      "holdingType": "P",
                      "instrumentScope": "default",
                      "instrumentUid": "LUID_DF10C5QL",
                      "subHoldingKeys": {
                        "Transaction/Algo/Name": {
                          "key": "Transaction/Algo/Name",
                          "value": {
                            "labelValue": "Algo1"
                          }
                        }
                      },
                      "currency": "EUR",
                      "start": {
                        "holdingCurrency": {
                          "total": -142482.23,
                          "currency": "EUR",
                          "components": {
                            "Cost": -133842.94,
                            "MarketGain": -8639.29
                          }
                        },
                        "portfolioCurrency": {
                          "total": -123959.54,
                          "currency": "GBP",
                          "components": {
                            "Cost": -111625.01,
                            "MarketGain": -7516.18,
                            "CurrencyGain": -4818.35
                          }
                        }
                      },
                      "flows": {
                        "holdingCurrency": {
                          "total": 41349.22,
                          "currency": "EUR",
                          "components": {
                            "In": 41349.22
                          }
                        },
                        "portfolioCurrency": {
                          "total": 35436.28,
                          "currency": "GBP",
                          "components": {
                            "In": 35436.28
                          }
                        }
                      },
                      "gains": {
                        "holdingCurrency": {
                          "total": -12655.79,
                          "currency": "EUR",
                          "components": {
                            "RealMarketGain": -4846.6,
                            "Carry": 144.22,
                            "DeltaMarketGain": -7953.41
                          }
                        },
                        "portfolioCurrency": {
                          "total": -5917.55,
                          "currency": "GBP",
                          "components": {
                            "RealMarketGain": -4153.54,
                            "RealCurrencyGain": -839.56,
                            "Carry": 123.6,
                            "DeltaMarketGain": -6255.76,
                            "DeltaCurrencyGain": 5207.71
                          }
                        }
                      },
                      "carry": {
                        "holdingCurrency": {
                          "total": -144.22,
                          "currency": "EUR",
                          "components": {
                            "CoverWithCommission": -144.22
                          }
                        },
                        "portfolioCurrency": {
                          "total": -123.6,
                          "currency": "GBP",
                          "components": {
                            "CoverWithCommission": -123.6
                          }
                        }
                      },
                      "end": {
                        "holdingCurrency": {
                          "total": -113933.02,
                          "currency": "EUR",
                          "components": {
                            "Cost": -97340.32,
                            "MarketGain": -16592.7
                          }
                        },
                        "portfolioCurrency": {
                          "total": -94564.41,
                          "currency": "GBP",
                          "components": {
                            "Cost": -81181.83,
                            "MarketGain": -13771.94,
                            "CurrencyGain": 389.36
                          }
                        }
                      },
                      "properties": {
                        "Instrument/default/Name": {
                          "key": "Instrument/default/Name",
                          "value": {
                            "labelValue": "Eur CFD #3"
                          }
                        },
                        "Instrument/default/ClientInternal": {
                          "key": "Instrument/default/ClientInternal",
                          "value": {
                            "labelValue": "SAMPLE03"
                          }
                        }
                      },
                      "groupId": "Grp5",
                      "errors": []
                    },
                    {
                      "portfolioId": {
                        "scope": "Example",
                        "code": "Portfolio"
                      },
                      "holdingType": "P",
                      "instrumentScope": "default",
                      "instrumentUid": "LUID_DHBQ1SFH",
                      "subHoldingKeys": {
                        "Transaction/Algo/Name": {
                          "key": "Transaction/Algo/Name",
                          "value": {
                            "labelValue": "Algo1"
                          }
                        }
                      },
                      "currency": "ZAR",
                      "start": {
                        "holdingCurrency": {
                          "total": 10748488,
                          "currency": "ZAR",
                          "components": {
                            "Cost": 10748488
                          }
                        },
                        "portfolioCurrency": {
                          "total": 569669.86,
                          "currency": "GBP",
                          "components": {
                            "Cost": 505178.94,
                            "CurrencyGain": 64490.92
                          }
                        }
                      },
                      "flows": {
                        "holdingCurrency": {
                          "total": 1271770.65,
                          "currency": "ZAR",
                          "components": {
                            "In": 1271770.65
                          }
                        },
                        "portfolioCurrency": {
                          "total": 66256.57,
                          "currency": "GBP",
                          "components": {
                            "In": 66256.57
                          }
                        }
                      },
                      "gains": {
                        "holdingCurrency": {
                          "total": 774645.35,
                          "currency": "ZAR",
                          "components": {
                            "DeltaMarketGain": 774645.35
                          }
                        },
                        "portfolioCurrency": {
                          "total": 16613.67,
                          "currency": "GBP",
                          "components": {
                            "DeltaMarketGain": 39506.91,
                            "DeltaCurrencyGain": -22893.24
                          }
                        }
                      },
                      "end": {
                        "holdingCurrency": {
                          "total": 12794904,
                          "currency": "ZAR",
                          "components": {
                            "Cost": 12020258.65,
                            "MarketGain": 774645.35
                          }
                        },
                        "portfolioCurrency": {
                          "total": 652540.1,
                          "currency": "GBP",
                          "components": {
                            "Cost": 571435.51,
                            "MarketGain": 39506.91,
                            "CurrencyGain": 41597.68
                          }
                        }
                      },
                      "properties": {
                        "Instrument/default/Name": {
                          "key": "Instrument/default/Name",
                          "value": {
                            "labelValue": "Zar Equity #2"
                          }
                        },
                        "Instrument/default/ClientInternal": {
                          "key": "Instrument/default/ClientInternal",
                          "value": {
                            "labelValue": "SAMPLE05"
                          }
                        }
                      },
                      "groupId": "Grp6",
                      "errors": []
                    },
                    {
                      "portfolioId": {
                        "scope": "Example",
                        "code": "Portfolio"
                      },
                      "holdingType": "P",
                      "instrumentScope": "default",
                      "instrumentUid": "LUID_GMJL7YDH",
                      "subHoldingKeys": {
                        "Transaction/Algo/Name": {
                          "key": "Transaction/Algo/Name",
                          "value": {
                            "labelValue": "Algo1"
                          }
                        }
                      },
                      "currency": "EUR",
                      "start": {
                        "holdingCurrency": {
                          "total": -282505.92,
                          "currency": "EUR",
                          "components": {
                            "Cost": -331495.14,
                            "MarketGain": 48989.22
                          }
                        },
                        "portfolioCurrency": {
                          "total": -245780.15,
                          "currency": "GBP",
                          "components": {
                            "Cost": -276798.44,
                            "MarketGain": 42620.62,
                            "CurrencyGain": -11602.33
                          }
                        }
                      },
                      "flows": {
                        "holdingCurrency": {
                          "total": 116514.38,
                          "currency": "EUR",
                          "components": {
                            "In": 116514.38
                          }
                        },
                        "portfolioCurrency": {
                          "total": 99037.22,
                          "currency": "GBP",
                          "components": {
                            "In": 99037.22
                          }
                        }
                      },
                      "gains": {
                        "holdingCurrency": {
                          "total": -70290.08,
                          "currency": "EUR",
                          "components": {
                            "RealMarketGain": -6016,
                            "Carry": 406.38,
                            "DeltaMarketGain": -64680.46
                          }
                        },
                        "portfolioCurrency": {
                          "total": -49362.69,
                          "currency": "GBP",
                          "components": {
                            "RealMarketGain": -5113.59,
                            "RealCurrencyGain": -1657.48,
                            "Carry": 345.42,
                            "DeltaMarketGain": -55644.35,
                            "DeltaCurrencyGain": 12707.31
                          }
                        }
                      },
                      "carry": {
                        "holdingCurrency": {
                          "total": -406.38,
                          "currency": "EUR",
                          "components": {
                            "CoverWithCommission": -406.38
                          }
                        },
                        "portfolioCurrency": {
                          "total": -345.42,
                          "currency": "GBP",
                          "components": {
                            "CoverWithCommission": -345.42
                          }
                        }
                      },
                      "end": {
                        "holdingCurrency": {
                          "total": -236688,
                          "currency": "EUR",
                          "components": {
                            "Cost": -220996.76,
                            "MarketGain": -15691.24
                          }
                        },
                        "portfolioCurrency": {
                          "total": -196451.04,
                          "currency": "GBP",
                          "components": {
                            "Cost": -184532.29,
                            "MarketGain": -13023.73,
                            "CurrencyGain": 1104.98
                          }
                        }
                      },
                      "properties": {
                        "Instrument/default/Name": {
                          "key": "Instrument/default/Name",
                          "value": {
                            "labelValue": "Eur CFD #1"
                          }
                        },
                        "Instrument/default/ClientInternal": {
                          "key": "Instrument/default/ClientInternal",
                          "value": {
                            "labelValue": "SAMPLE01"
                          }
                        }
                      },
                      "groupId": "Grp7",
                      "errors": []
                    },
                    {
                      "portfolioId": {
                        "scope": "Example",
                        "code": "Portfolio"
                      },
                      "holdingType": "P",
                      "instrumentScope": "default",
                      "instrumentUid": "LUID_HPHFXRXM",
                      "subHoldingKeys": {
                        "Transaction/Algo/Name": {
                          "key": "Transaction/Algo/Name",
                          "value": {
                            "labelValue": "Algo1"
                          }
                        }
                      },
                      "currency": "USD",
                      "start": {
                        "holdingCurrency": {
                          "total": 4696,
                          "currency": "USD",
                          "components": {
                            "Cost": 4800,
                            "MarketGain": -104
                          }
                        },
                        "portfolioCurrency": {
                          "total": 3334.16,
                          "currency": "GBP",
                          "components": {
                            "Cost": 3470.4,
                            "MarketGain": -73.84,
                            "CurrencyGain": -62.4
                          }
                        }
                      },
                      "flows": {
                        "holdingCurrency": {
                          "total": -25,
                          "currency": "USD",
                          "components": {
                            "Out": -25
                          }
                        },
                        "portfolioCurrency": {
                          "total": -17.82,
                          "currency": "GBP",
                          "components": {
                            "Out": -17.82
                          }
                        }
                      },
                      "gains": {
                        "holdingCurrency": {
                          "total": -21,
                          "currency": "USD",
                          "components": {
                            "DeltaMarketGain": -21
                          }
                        },
                        "portfolioCurrency": {
                          "total": 31.84,
                          "currency": "GBP",
                          "components": {
                            "DeltaMarketGain": -16.16,
                            "DeltaCurrencyGain": 48
                          }
                        }
                      },
                      "carry": {
                        "holdingCurrency": {
                          "total": 25,
                          "currency": "USD",
                          "components": {
                            "Dividend": 25
                          }
                        },
                        "portfolioCurrency": {
                          "total": 17.82,
                          "currency": "GBP",
                          "components": {
                            "Dividend": 17.82
                          }
                        }
                      },
                      "end": {
                        "holdingCurrency": {
                          "total": 4675,
                          "currency": "USD",
                          "components": {
                            "Cost": 4800,
                            "MarketGain": -125
                          }
                        },
                        "portfolioCurrency": {
                          "total": 3366,
                          "currency": "GBP",
                          "components": {
                            "Cost": 3470.4,
                            "MarketGain": -90,
                            "CurrencyGain": -14.4
                          }
                        }
                      },
                      "properties": {
                        "Instrument/default/Name": {
                          "key": "Instrument/default/Name",
                          "value": {
                            "labelValue": "Usd Equity #2"
                          }
                        },
                        "Instrument/default/ClientInternal": {
                          "key": "Instrument/default/ClientInternal",
                          "value": {
                            "labelValue": "SAMPLE10"
                          }
                        }
                      },
                      "groupId": "Grp8",
                      "errors": []
                    },
                    {
                      "portfolioId": {
                        "scope": "Example",
                        "code": "Portfolio"
                      },
                      "holdingType": "P",
                      "instrumentScope": "default",
                      "instrumentUid": "LUID_LD560F1M",
                      "subHoldingKeys": {
                        "Transaction/Algo/Name": {
                          "key": "Transaction/Algo/Name",
                          "value": {
                            "labelValue": "Algo1"
                          }
                        }
                      },
                      "currency": "EUR",
                      "start": {
                        "holdingCurrency": {
                          "total": 171560,
                          "currency": "EUR",
                          "components": {
                            "Cost": 163259.7,
                            "MarketGain": 8300.3
                          }
                        },
                        "portfolioCurrency": {
                          "total": 149257.2,
                          "currency": "GBP",
                          "components": {
                            "Cost": 136321.85,
                            "MarketGain": 7221.26,
                            "CurrencyGain": 5714.09
                          }
                        }
                      },
                      "flows": {
                        "holdingCurrency": {
                          "total": -192548,
                          "currency": "EUR",
                          "components": {
                            "Out": -192548
                          }
                        },
                        "portfolioCurrency": {
                          "total": -163473.25,
                          "currency": "GBP",
                          "components": {
                            "Out": -163473.25
                          }
                        }
                      },
                      "gains": {
                        "holdingCurrency": {
                          "total": 20988,
                          "currency": "EUR",
                          "components": {
                            "RealMarketGain": 29288.3,
                            "DeltaMarketGain": -8300.3
                          }
                        },
                        "portfolioCurrency": {
                          "total": 14216.05,
                          "currency": "GBP",
                          "components": {
                            "RealMarketGain": 24865.76,
                            "RealCurrencyGain": 2285.64,
                            "DeltaMarketGain": -7221.26,
                            "DeltaCurrencyGain": -5714.09
                          }
                        }
                      },
                      "properties": {
                        "Instrument/default/Name": {
                          "key": "Instrument/default/Name",
                          "value": {
                            "labelValue": "Eur Equity"
                          }
                        },
                        "Instrument/default/ClientInternal": {
                          "key": "Instrument/default/ClientInternal",
                          "value": {
                            "labelValue": "SAMPLE09"
                          }
                        }
                      },
                      "groupId": "Grp9",
                      "errors": []
                    },
                    {
                      "portfolioId": {
                        "scope": "Example",
                        "code": "Portfolio"
                      },
                      "holdingType": "P",
                      "instrumentScope": "default",
                      "instrumentUid": "LUID_QH2V2O68",
                      "subHoldingKeys": {
                        "Transaction/Algo/Name": {
                          "key": "Transaction/Algo/Name",
                          "value": {
                            "labelValue": "Algo1"
                          }
                        }
                      },
                      "currency": "ZAR",
                      "start": {
                        "holdingCurrency": {
                          "total": 3940650,
                          "currency": "ZAR",
                          "components": {
                            "Cost": 4480295.86,
                            "MarketGain": -539645.86
                          }
                        },
                        "portfolioCurrency": {
                          "total": 208854.45,
                          "currency": "GBP",
                          "components": {
                            "Cost": 215054.2,
                            "MarketGain": -28601.23,
                            "CurrencyGain": 22401.48
                          }
                        }
                      },
                      "flows": {
                        "holdingCurrency": {
                          "total": -950751.25,
                          "currency": "ZAR",
                          "components": {
                            "Out": -950751.25
                          }
                        },
                        "portfolioCurrency": {
                          "total": -49439.07,
                          "currency": "GBP",
                          "components": {
                            "Out": -49439.07
                          }
                        }
                      },
                      "gains": {
                        "holdingCurrency": {
                          "total": 258101.25,
                          "currency": "ZAR",
                          "components": {
                            "RealMarketGain": -115985.86,
                            "DeltaMarketGain": 374087.11
                          }
                        },
                        "portfolioCurrency": {
                          "total": 6232.62,
                          "currency": "GBP",
                          "components": {
                            "RealMarketGain": -6031.26,
                            "RealCurrencyGain": 4266.95,
                            "DeltaMarketGain": 20157.73,
                            "DeltaCurrencyGain": -12160.8
                          }
                        }
                      },
                      "end": {
                        "holdingCurrency": {
                          "total": 3248000,
                          "currency": "ZAR",
                          "components": {
                            "Cost": 3413558.75,
                            "MarketGain": -165558.75
                          }
                        },
                        "portfolioCurrency": {
                          "total": 165648,
                          "currency": "GBP",
                          "components": {
                            "Cost": 163850.82,
                            "MarketGain": -8443.5,
                            "CurrencyGain": 10240.68
                          }
                        }
                      },
                      "properties": {
                        "Instrument/default/Name": {
                          "key": "Instrument/default/Name",
                          "value": {
                            "labelValue": "Zar Equity #1"
                          }
                        },
                        "Instrument/default/ClientInternal": {
                          "key": "Instrument/default/ClientInternal",
                          "value": {
                            "labelValue": "SAMPLE04"
                          }
                        }
                      },
                      "groupId": "Grp10",
                      "errors": []
                    },
                    {
                      "portfolioId": {
                        "scope": "Example",
                        "code": "Portfolio"
                      },
                      "holdingType": "P",
                      "instrumentScope": "default",
                      "instrumentUid": "LUID_QTKKFOKC",
                      "subHoldingKeys": {
                        "Transaction/Algo/Name": {
                          "key": "Transaction/Algo/Name",
                          "value": {
                            "labelValue": "Algo1"
                          }
                        }
                      },
                      "currency": "EUR",
                      "start": {
                        "holdingCurrency": {
                          "total": -238437.31,
                          "currency": "EUR",
                          "components": {
                            "Cost": -234688.46,
                            "MarketGain": -3748.85
                          }
                        },
                        "portfolioCurrency": {
                          "total": -207440.46,
                          "currency": "GBP",
                          "components": {
                            "Cost": -195495.49,
                            "MarketGain": -3261.5,
                            "CurrencyGain": -8683.47
                          }
                        }
                      },
                      "flows": {
                        "holdingCurrency": {
                          "total": 45099.4,
                          "currency": "EUR",
                          "components": {
                            "In": 45099.4
                          }
                        },
                        "portfolioCurrency": {
                          "total": 38424.69,
                          "currency": "GBP",
                          "components": {
                            "In": 38424.69
                          }
                        }
                      },
                      "gains": {
                        "holdingCurrency": {
                          "total": -66223.84,
                          "currency": "EUR",
                          "components": {
                            "RealMarketGain": -10145.8,
                            "Carry": 157.3,
                            "DeltaMarketGain": -56235.34
                          }
                        },
                        "portfolioCurrency": {
                          "total": -46417.02,
                          "currency": "GBP",
                          "components": {
                            "RealMarketGain": -8644.22,
                            "RealCurrencyGain": -664.12,
                            "Carry": 134.02,
                            "DeltaMarketGain": -46525.38,
                            "DeltaCurrencyGain": 9282.68
                          }
                        }
                      },
                      "carry": {
                        "holdingCurrency": {
                          "total": -157.3,
                          "currency": "EUR",
                          "components": {
                            "CoverWithCommission": -157.3
                          }
                        },
                        "portfolioCurrency": {
                          "total": -134.02,
                          "currency": "GBP",
                          "components": {
                            "CoverWithCommission": -134.02
                          }
                        }
                      },
                      "end": {
                        "holdingCurrency": {
                          "total": -259719.05,
                          "currency": "EUR",
                          "components": {
                            "Cost": -199734.86,
                            "MarketGain": -59984.19
                          }
                        },
                        "portfolioCurrency": {
                          "total": -215566.81,
                          "currency": "GBP",
                          "components": {
                            "Cost": -166379.14,
                            "MarketGain": -49786.88,
                            "CurrencyGain": 599.21
                          }
                        }
                      },
                      "properties": {
                        "Instrument/default/Name": {
                          "key": "Instrument/default/Name",
                          "value": {
                            "labelValue": "Eur CFD #2"
                          }
                        },
                        "Instrument/default/ClientInternal": {
                          "key": "Instrument/default/ClientInternal",
                          "value": {
                            "labelValue": "SAMPLE02"
                          }
                        }
                      },
                      "groupId": "Grp11",
                      "errors": []
                    },
                    {
                      "portfolioId": {
                        "scope": "Example",
                        "code": "Portfolio"
                      },
                      "holdingType": "P",
                      "instrumentScope": "default",
                      "instrumentUid": "LUID_T6YOHML7",
                      "subHoldingKeys": {
                        "Transaction/Algo/Name": {
                          "key": "Transaction/Algo/Name",
                          "value": {
                            "labelValue": "Algo1"
                          }
                        }
                      },
                      "currency": "USD",
                      "start": {
                        "holdingCurrency": {
                          "total": 3313875,
                          "currency": "USD",
                          "components": {
                            "Cost": 3509200,
                            "MarketGain": -195325
                          }
                        },
                        "portfolioCurrency": {
                          "total": 2352851.25,
                          "currency": "GBP",
                          "components": {
                            "Cost": 2485778.5,
                            "MarketGain": -138680.75,
                            "CurrencyGain": 5753.5
                          }
                        }
                      },
                      "flows": {
                        "holdingCurrency": {
                          "total": -3525840,
                          "currency": "USD",
                          "components": {
                            "Out": -3525840
                          }
                        },
                        "portfolioCurrency": {
                          "total": -2525531,
                          "currency": "GBP",
                          "components": {
                            "Out": -2525531
                          }
                        }
                      },
                      "gains": {
                        "holdingCurrency": {
                          "total": 211965,
                          "currency": "USD",
                          "components": {
                            "RealMarketGain": 16640,
                            "DeltaMarketGain": 195325
                          }
                        },
                        "portfolioCurrency": {
                          "total": 172679.75,
                          "currency": "GBP",
                          "components": {
                            "RealMarketGain": 11825,
                            "RealCurrencyGain": 27927.5,
                            "DeltaMarketGain": 138680.75,
                            "DeltaCurrencyGain": -5753.5
                          }
                        }
                      },
                      "properties": {
                        "Instrument/default/Name": {
                          "key": "Instrument/default/Name",
                          "value": {
                            "labelValue": "Usd CFD #1"
                          }
                        },
                        "Instrument/default/ClientInternal": {
                          "key": "Instrument/default/ClientInternal",
                          "value": {
                            "labelValue": "SAMPLE07"
                          }
                        }
                      },
                      "groupId": "Grp12",
                      "errors": []
                    },
                    {
                      "portfolioId": {
                        "scope": "Example",
                        "code": "Portfolio"
                      },
                      "holdingType": "P",
                      "instrumentScope": "default",
                      "instrumentUid": "LUID_VYWV6V8Y",
                      "subHoldingKeys": {
                        "Transaction/Algo/Name": {
                          "key": "Transaction/Algo/Name",
                          "value": {
                            "labelValue": "Algo1"
                          }
                        }
                      },
                      "currency": "ZAR",
                      "start": {
                        "holdingCurrency": {
                          "total": 9783000,
                          "currency": "ZAR",
                          "components": {
                            "Cost": 10824063.04,
                            "MarketGain": -1041063.04
                          }
                        },
                        "portfolioCurrency": {
                          "total": 518499,
                          "currency": "GBP",
                          "components": {
                            "Cost": 530379.09,
                            "MarketGain": -55176.34,
                            "CurrencyGain": 43296.25
                          }
                        }
                      },
                      "flows": {
                        "holdingCurrency": {
                          "total": -775994.66,
                          "currency": "ZAR",
                          "components": {
                            "Out": -775994.66
                          }
                        },
                        "portfolioCurrency": {
                          "total": -40972.52,
                          "currency": "GBP",
                          "components": {
                            "Out": -40972.52
                          }
                        }
                      },
                      "gains": {
                        "holdingCurrency": {
                          "total": 952994.66,
                          "currency": "ZAR",
                          "components": {
                            "RealMarketGain": -65876.91,
                            "DeltaMarketGain": 1018871.57
                          }
                        },
                        "portfolioCurrency": {
                          "total": 30433.52,
                          "currency": "GBP",
                          "components": {
                            "RealMarketGain": -3478.3,
                            "RealCurrencyGain": 3199.11,
                            "DeltaMarketGain": 54044.58,
                            "DeltaCurrencyGain": -23331.87
                          }
                        }
                      },
                      "end": {
                        "holdingCurrency": {
                          "total": 9960000,
                          "currency": "ZAR",
                          "components": {
                            "Cost": 9982191.47,
                            "MarketGain": -22191.47
                          }
                        },
                        "portfolioCurrency": {
                          "total": 507960,
                          "currency": "GBP",
                          "components": {
                            "Cost": 489127.38,
                            "MarketGain": -1131.76,
                            "CurrencyGain": 19964.38
                          }
                        }
                      },
                      "properties": {
                        "Instrument/default/Name": {
                          "key": "Instrument/default/Name",
                          "value": {
                            "labelValue": "Zar Equity #3"
                          }
                        },
                        "Instrument/default/ClientInternal": {
                          "key": "Instrument/default/ClientInternal",
                          "value": {
                            "labelValue": "SAMPLE06"
                          }
                        }
                      },
                      "groupId": "Grp13",
                      "errors": []
                    },
                    {
                      "portfolioId": {
                        "scope": "Example",
                        "code": "Portfolio"
                      },
                      "holdingType": "P",
                      "instrumentScope": "default",
                      "instrumentUid": "LUID_X8R9444V",
                      "subHoldingKeys": {
                        "Transaction/Algo/Name": {
                          "key": "Transaction/Algo/Name",
                          "value": {
                            "labelValue": "Algo1"
                          }
                        }
                      },
                      "currency": "USD",
                      "start": {
                        "holdingCurrency": {
                          "total": 20652,
                          "currency": "USD",
                          "components": {
                            "Cost": 20000,
                            "MarketGain": 652
                          }
                        },
                        "portfolioCurrency": {
                          "total": 14662.92,
                          "currency": "GBP",
                          "components": {
                            "Cost": 14000,
                            "MarketGain": 462.92,
                            "CurrencyGain": 200
                          }
                        }
                      },
                      "gains": {
                        "holdingCurrency": {
                          "total": -16652,
                          "currency": "USD",
                          "components": {
                            "DeltaMarketGain": -16652
                          }
                        },
                        "portfolioCurrency": {
                          "total": -11782.92,
                          "currency": "GBP",
                          "components": {
                            "DeltaMarketGain": -11982.92,
                            "DeltaCurrencyGain": 200
                          }
                        }
                      },
                      "end": {
                        "holdingCurrency": {
                          "total": 4000,
                          "currency": "USD",
                          "components": {
                            "Cost": 20000,
                            "MarketGain": -16000
                          }
                        },
                        "portfolioCurrency": {
                          "total": 2880,
                          "currency": "GBP",
                          "components": {
                            "Cost": 14000,
                            "MarketGain": -11520,
                            "CurrencyGain": 400
                          }
                        }
                      },
                      "properties": {
                        "Instrument/default/Name": {
                          "key": "Instrument/default/Name",
                          "value": {
                            "labelValue": "Usd Equity #1"
                          }
                        },
                        "Instrument/default/ClientInternal": {
                          "key": "Instrument/default/ClientInternal",
                          "value": {
                            "labelValue": "SAMPLE08"
                          }
                        }
                      },
                      "groupId": "Grp14",
                      "errors": []
                    }
                  ],
                  "links": []
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/VersionedResourceListOfA2BDataRecord"
                },
                "example": {
                  "version": {
                    "effectiveFrom": "2020-10-31T00:00:00.0000000+00:00",
                    "asAtDate": "2021-10-31T00:00:00.0000000+00:00"
                  },
                  "values": [
                    {
                      "portfolioId": {
                        "scope": "Example",
                        "code": "Portfolio"
                      },
                      "holdingType": "B",
                      "instrumentScope": "default",
                      "instrumentUid": "CCY_EUR",
                      "subHoldingKeys": {
                        "Transaction/Algo/Name": {
                          "key": "Transaction/Algo/Name",
                          "value": {
                            "labelValue": "CASH"
                          }
                        }
                      },
                      "currency": "EUR",
                      "start": {
                        "holdingCurrency": {
                          "total": 20000,
                          "currency": "EUR",
                          "components": {
                            "Cost": 20000
                          }
                        },
                        "portfolioCurrency": {
                          "total": 17400,
                          "currency": "GBP",
                          "components": {
                            "Cost": 16720,
                            "CurrencyGain": 680
                          }
                        }
                      },
                      "flows": {
                        "holdingCurrency": {
                          "total": -10415,
                          "currency": "EUR",
                          "components": {
                            "In": 192548,
                            "Out": -202963
                          }
                        },
                        "portfolioCurrency": {
                          "total": -9424.94,
                          "currency": "GBP",
                          "components": {
                            "In": 163473.25,
                            "Out": -172898.19
                          }
                        }
                      },
                      "gains": {
                        "portfolioCurrency": {
                          "total": -19.51,
                          "currency": "GBP",
                          "components": {
                            "RealCurrencyGain": 830.88,
                            "DeltaCurrencyGain": -850.39
                          }
                        }
                      },
                      "end": {
                        "holdingCurrency": {
                          "total": 9585,
                          "currency": "EUR",
                          "components": {
                            "Cost": 9585
                          }
                        },
                        "portfolioCurrency": {
                          "total": 7955.55,
                          "currency": "GBP",
                          "components": {
                            "Cost": 8125.94,
                            "CurrencyGain": -170.39
                          }
                        }
                      },
                      "properties": {
                        "Instrument/default/Name": {
                          "key": "Instrument/default/Name",
                          "value": {
                            "labelValue": "EURO"
                          }
                        },
                        "Instrument/default/Currency": {
                          "key": "Instrument/default/Currency",
                          "value": {
                            "labelValue": "EUR"
                          }
                        }
                      },
                      "groupId": "Grp1",
                      "errors": []
                    },
                    {
                      "portfolioId": {
                        "scope": "Example",
                        "code": "Portfolio"
                      },
                      "holdingType": "B",
                      "instrumentScope": "default",
                      "instrumentUid": "CCY_GBP",
                      "subHoldingKeys": {
                        "Transaction/Algo/Name": {
                          "key": "Transaction/Algo/Name",
                          "value": {
                            "labelValue": "CASH"
                          }
                        }
                      },
                      "currency": "GBP",
                      "start": {
                        "holdingCurrency": {
                          "total": 50000,
                          "currency": "GBP",
                          "components": {
                            "Cost": 50000
                          }
                        },
                        "portfolioCurrency": {
                          "total": 50000,
                          "currency": "GBP",
                          "components": {
                            "Cost": 50000
                          }
                        }
                      },
                      "end": {
                        "holdingCurrency": {
                          "total": 50000,
                          "currency": "GBP",
                          "components": {
                            "Cost": 50000
                          }
                        },
                        "portfolioCurrency": {
                          "total": 50000,
                          "currency": "GBP",
                          "components": {
                            "Cost": 50000
                          }
                        }
                      },
                      "properties": {
                        "Instrument/default/Name": {
                          "key": "Instrument/default/Name",
                          "value": {
                            "labelValue": "BRITISH POUND STERLING"
                          }
                        },
                        "Instrument/default/Currency": {
                          "key": "Instrument/default/Currency",
                          "value": {
                            "labelValue": "GBP"
                          }
                        }
                      },
                      "groupId": "Grp2",
                      "errors": []
                    },
                    {
                      "portfolioId": {
                        "scope": "Example",
                        "code": "Portfolio"
                      },
                      "holdingType": "B",
                      "instrumentScope": "default",
                      "instrumentUid": "CCY_USD",
                      "subHoldingKeys": {
                        "Transaction/Algo/Name": {
                          "key": "Transaction/Algo/Name",
                          "value": {
                            "labelValue": "CASH"
                          }
                        }
                      },
                      "currency": "USD",
                      "flows": {
                        "holdingCurrency": {
                          "total": 3525865,
                          "currency": "USD",
                          "components": {
                            "In": 3525865
                          }
                        },
                        "portfolioCurrency": {
                          "total": 2525548.82,
                          "currency": "GBP",
                          "components": {
                            "In": 2525548.82
                          }
                        }
                      },
                      "gains": {
                        "portfolioCurrency": {
                          "total": 13073.98,
                          "currency": "GBP",
                          "components": {
                            "DeltaCurrencyGain": 13073.98
                          }
                        }
                      },
                      "end": {
                        "holdingCurrency": {
                          "total": 3525865,
                          "currency": "USD",
                          "components": {
                            "Cost": 3525865
                          }
                        },
                        "portfolioCurrency": {
                          "total": 2538622.8,
                          "currency": "GBP",
                          "components": {
                            "Cost": 2525548.82,
                            "CurrencyGain": 13073.98
                          }
                        }
                      },
                      "properties": {
                        "Instrument/default/Name": {
                          "key": "Instrument/default/Name",
                          "value": {
                            "labelValue": "UNITED STATES DOLLAR"
                          }
                        },
                        "Instrument/default/Currency": {
                          "key": "Instrument/default/Currency",
                          "value": {
                            "labelValue": "USD"
                          }
                        }
                      },
                      "groupId": "Grp3",
                      "errors": []
                    },
                    {
                      "portfolioId": {
                        "scope": "Example",
                        "code": "Portfolio"
                      },
                      "holdingType": "B",
                      "instrumentScope": "default",
                      "instrumentUid": "CCY_ZAR",
                      "subHoldingKeys": {
                        "Transaction/Algo/Name": {
                          "key": "Transaction/Algo/Name",
                          "value": {
                            "labelValue": "CASH"
                          }
                        }
                      },
                      "currency": "ZAR",
                      "flows": {
                        "holdingCurrency": {
                          "total": 454975.26,
                          "currency": "ZAR",
                          "components": {
                            "Out": -1271770.65,
                            "In": 1726745.91
                          }
                        },
                        "portfolioCurrency": {
                          "total": 24155.02,
                          "currency": "GBP",
                          "components": {
                            "Out": -66256.57,
                            "In": 90411.59
                          }
                        }
                      },
                      "gains": {
                        "portfolioCurrency": {
                          "total": -951.28,
                          "currency": "GBP",
                          "components": {
                            "RealCurrencyGain": -132.33,
                            "DeltaCurrencyGain": -818.95
                          }
                        }
                      },
                      "end": {
                        "holdingCurrency": {
                          "total": 454975.26,
                          "currency": "ZAR",
                          "components": {
                            "Cost": 454975.26
                          }
                        },
                        "portfolioCurrency": {
                          "total": 23203.74,
                          "currency": "GBP",
                          "components": {
                            "Cost": 24022.69,
                            "CurrencyGain": -818.95
                          }
                        }
                      },
                      "properties": {
                        "Instrument/default/Name": {
                          "key": "Instrument/default/Name",
                          "value": {
                            "labelValue": "SOUTH AFRICAN RAND"
                          }
                        },
                        "Instrument/default/Currency": {
                          "key": "Instrument/default/Currency",
                          "value": {
                            "labelValue": "ZAR"
                          }
                        }
                      },
                      "groupId": "Grp4",
                      "errors": []
                    },
                    {
                      "portfolioId": {
                        "scope": "Example",
                        "code": "Portfolio"
                      },
                      "holdingType": "P",
                      "instrumentScope": "default",
                      "instrumentUid": "LUID_DF10C5QL",
                      "subHoldingKeys": {
                        "Transaction/Algo/Name": {
                          "key": "Transaction/Algo/Name",
                          "value": {
                            "labelValue": "Algo1"
                          }
                        }
                      },
                      "currency": "EUR",
                      "start": {
                        "holdingCurrency": {
                          "total": -142482.23,
                          "currency": "EUR",
                          "components": {
                            "Cost": -133842.94,
                            "MarketGain": -8639.29
                          }
                        },
                        "portfolioCurrency": {
                          "total": -123959.54,
                          "currency": "GBP",
                          "components": {
                            "Cost": -111625.01,
                            "MarketGain": -7516.18,
                            "CurrencyGain": -4818.35
                          }
                        }
                      },
                      "flows": {
                        "holdingCurrency": {
                          "total": 41349.22,
                          "currency": "EUR",
                          "components": {
                            "In": 41349.22
                          }
                        },
                        "portfolioCurrency": {
                          "total": 35436.28,
                          "currency": "GBP",
                          "components": {
                            "In": 35436.28
                          }
                        }
                      },
                      "gains": {
                        "holdingCurrency": {
                          "total": -12655.79,
                          "currency": "EUR",
                          "components": {
                            "RealMarketGain": -4846.6,
                            "Carry": 144.22,
                            "DeltaMarketGain": -7953.41
                          }
                        },
                        "portfolioCurrency": {
                          "total": -5917.55,
                          "currency": "GBP",
                          "components": {
                            "RealMarketGain": -4153.54,
                            "RealCurrencyGain": -839.56,
                            "Carry": 123.6,
                            "DeltaMarketGain": -6255.76,
                            "DeltaCurrencyGain": 5207.71
                          }
                        }
                      },
                      "carry": {
                        "holdingCurrency": {
                          "total": -144.22,
                          "currency": "EUR",
                          "components": {
                            "CoverWithCommission": -144.22
                          }
                        },
                        "portfolioCurrency": {
                          "total": -123.6,
                          "currency": "GBP",
                          "components": {
                            "CoverWithCommission": -123.6
                          }
                        }
                      },
                      "end": {
                        "holdingCurrency": {
                          "total": -113933.02,
                          "currency": "EUR",
                          "components": {
                            "Cost": -97340.32,
                            "MarketGain": -16592.7
                          }
                        },
                        "portfolioCurrency": {
                          "total": -94564.41,
                          "currency": "GBP",
                          "components": {
                            "Cost": -81181.83,
                            "MarketGain": -13771.94,
                            "CurrencyGain": 389.36
                          }
                        }
                      },
                      "properties": {
                        "Instrument/default/Name": {
                          "key": "Instrument/default/Name",
                          "value": {
                            "labelValue": "Eur CFD #3"
                          }
                        },
                        "Instrument/default/ClientInternal": {
                          "key": "Instrument/default/ClientInternal",
                          "value": {
                            "labelValue": "SAMPLE03"
                          }
                        }
                      },
                      "groupId": "Grp5",
                      "errors": []
                    },
                    {
                      "portfolioId": {
                        "scope": "Example",
                        "code": "Portfolio"
                      },
                      "holdingType": "P",
                      "instrumentScope": "default",
                      "instrumentUid": "LUID_DHBQ1SFH",
                      "subHoldingKeys": {
                        "Transaction/Algo/Name": {
                          "key": "Transaction/Algo/Name",
                          "value": {
                            "labelValue": "Algo1"
                          }
                        }
                      },
                      "currency": "ZAR",
                      "start": {
                        "holdingCurrency": {
                          "total": 10748488,
                          "currency": "ZAR",
                          "components": {
                            "Cost": 10748488
                          }
                        },
                        "portfolioCurrency": {
                          "total": 569669.86,
                          "currency": "GBP",
                          "components": {
                            "Cost": 505178.94,
                            "CurrencyGain": 64490.92
                          }
                        }
                      },
                      "flows": {
                        "holdingCurrency": {
                          "total": 1271770.65,
                          "currency": "ZAR",
                          "components": {
                            "In": 1271770.65
                          }
                        },
                        "portfolioCurrency": {
                          "total": 66256.57,
                          "currency": "GBP",
                          "components": {
                            "In": 66256.57
                          }
                        }
                      },
                      "gains": {
                        "holdingCurrency": {
                          "total": 774645.35,
                          "currency": "ZAR",
                          "components": {
                            "DeltaMarketGain": 774645.35
                          }
                        },
                        "portfolioCurrency": {
                          "total": 16613.67,
                          "currency": "GBP",
                          "components": {
                            "DeltaMarketGain": 39506.91,
                            "DeltaCurrencyGain": -22893.24
                          }
                        }
                      },
                      "end": {
                        "holdingCurrency": {
                          "total": 12794904,
                          "currency": "ZAR",
                          "components": {
                            "Cost": 12020258.65,
                            "MarketGain": 774645.35
                          }
                        },
                        "portfolioCurrency": {
                          "total": 652540.1,
                          "currency": "GBP",
                          "components": {
                            "Cost": 571435.51,
                            "MarketGain": 39506.91,
                            "CurrencyGain": 41597.68
                          }
                        }
                      },
                      "properties": {
                        "Instrument/default/Name": {
                          "key": "Instrument/default/Name",
                          "value": {
                            "labelValue": "Zar Equity #2"
                          }
                        },
                        "Instrument/default/ClientInternal": {
                          "key": "Instrument/default/ClientInternal",
                          "value": {
                            "labelValue": "SAMPLE05"
                          }
                        }
                      },
                      "groupId": "Grp6",
                      "errors": []
                    },
                    {
                      "portfolioId": {
                        "scope": "Example",
                        "code": "Portfolio"
                      },
                      "holdingType": "P",
                      "instrumentScope": "default",
                      "instrumentUid": "LUID_GMJL7YDH",
                      "subHoldingKeys": {
                        "Transaction/Algo/Name": {
                          "key": "Transaction/Algo/Name",
                          "value": {
                            "labelValue": "Algo1"
                          }
                        }
                      },
                      "currency": "EUR",
                      "start": {
                        "holdingCurrency": {
                          "total": -282505.92,
                          "currency": "EUR",
                          "components": {
                            "Cost": -331495.14,
                            "MarketGain": 48989.22
                          }
                        },
                        "portfolioCurrency": {
                          "total": -245780.15,
                          "currency": "GBP",
                          "components": {
                            "Cost": -276798.44,
                            "MarketGain": 42620.62,
                            "CurrencyGain": -11602.33
                          }
                        }
                      },
                      "flows": {
                        "holdingCurrency": {
                          "total": 116514.38,
                          "currency": "EUR",
                          "components": {
                            "In": 116514.38
                          }
                        },
                        "portfolioCurrency": {
                          "total": 99037.22,
                          "currency": "GBP",
                          "components": {
                            "In": 99037.22
                          }
                        }
                      },
                      "gains": {
                        "holdingCurrency": {
                          "total": -70290.08,
                          "currency": "EUR",
                          "components": {
                            "RealMarketGain": -6016,
                            "Carry": 406.38,
                            "DeltaMarketGain": -64680.46
                          }
                        },
                        "portfolioCurrency": {
                          "total": -49362.69,
                          "currency": "GBP",
                          "components": {
                            "RealMarketGain": -5113.59,
                            "RealCurrencyGain": -1657.48,
                            "Carry": 345.42,
                            "DeltaMarketGain": -55644.35,
                            "DeltaCurrencyGain": 12707.31
                          }
                        }
                      },
                      "carry": {
                        "holdingCurrency": {
                          "total": -406.38,
                          "currency": "EUR",
                          "components": {
                            "CoverWithCommission": -406.38
                          }
                        },
                        "portfolioCurrency": {
                          "total": -345.42,
                          "currency": "GBP",
                          "components": {
                            "CoverWithCommission": -345.42
                          }
                        }
                      },
                      "end": {
                        "holdingCurrency": {
                          "total": -236688,
                          "currency": "EUR",
                          "components": {
                            "Cost": -220996.76,
                            "MarketGain": -15691.24
                          }
                        },
                        "portfolioCurrency": {
                          "total": -196451.04,
                          "currency": "GBP",
                          "components": {
                            "Cost": -184532.29,
                            "MarketGain": -13023.73,
                            "CurrencyGain": 1104.98
                          }
                        }
                      },
                      "properties": {
                        "Instrument/default/Name": {
                          "key": "Instrument/default/Name",
                          "value": {
                            "labelValue": "Eur CFD #1"
                          }
                        },
                        "Instrument/default/ClientInternal": {
                          "key": "Instrument/default/ClientInternal",
                          "value": {
                            "labelValue": "SAMPLE01"
                          }
                        }
                      },
                      "groupId": "Grp7",
                      "errors": []
                    },
                    {
                      "portfolioId": {
                        "scope": "Example",
                        "code": "Portfolio"
                      },
                      "holdingType": "P",
                      "instrumentScope": "default",
                      "instrumentUid": "LUID_HPHFXRXM",
                      "subHoldingKeys": {
                        "Transaction/Algo/Name": {
                          "key": "Transaction/Algo/Name",
                          "value": {
                            "labelValue": "Algo1"
                          }
                        }
                      },
                      "currency": "USD",
                      "start": {
                        "holdingCurrency": {
                          "total": 4696,
                          "currency": "USD",
                          "components": {
                            "Cost": 4800,
                            "MarketGain": -104
                          }
                        },
                        "portfolioCurrency": {
                          "total": 3334.16,
                          "currency": "GBP",
                          "components": {
                            "Cost": 3470.4,
                            "MarketGain": -73.84,
                            "CurrencyGain": -62.4
                          }
                        }
                      },
                      "flows": {
                        "holdingCurrency": {
                          "total": -25,
                          "currency": "USD",
                          "components": {
                            "Out": -25
                          }
                        },
                        "portfolioCurrency": {
                          "total": -17.82,
                          "currency": "GBP",
                          "components": {
                            "Out": -17.82
                          }
                        }
                      },
                      "gains": {
                        "holdingCurrency": {
                          "total": -21,
                          "currency": "USD",
                          "components": {
                            "DeltaMarketGain": -21
                          }
                        },
                        "portfolioCurrency": {
                          "total": 31.84,
                          "currency": "GBP",
                          "components": {
                            "DeltaMarketGain": -16.16,
                            "DeltaCurrencyGain": 48
                          }
                        }
                      },
                      "carry": {
                        "holdingCurrency": {
                          "total": 25,
                          "currency": "USD",
                          "components": {
                            "Dividend": 25
                          }
                        },
                        "portfolioCurrency": {
                          "total": 17.82,
                          "currency": "GBP",
                          "components": {
                            "Dividend": 17.82
                          }
                        }
                      },
                      "end": {
                        "holdingCurrency": {
                          "total": 4675,
                          "currency": "USD",
                          "components": {
                            "Cost": 4800,
                            "MarketGain": -125
                          }
                        },
                        "portfolioCurrency": {
                          "total": 3366,
                          "currency": "GBP",
                          "components": {
                            "Cost": 3470.4,
                            "MarketGain": -90,
                            "CurrencyGain": -14.4
                          }
                        }
                      },
                      "properties": {
                        "Instrument/default/Name": {
                          "key": "Instrument/default/Name",
                          "value": {
                            "labelValue": "Usd Equity #2"
                          }
                        },
                        "Instrument/default/ClientInternal": {
                          "key": "Instrument/default/ClientInternal",
                          "value": {
                            "labelValue": "SAMPLE10"
                          }
                        }
                      },
                      "groupId": "Grp8",
                      "errors": []
                    },
                    {
                      "portfolioId": {
                        "scope": "Example",
                        "code": "Portfolio"
                      },
                      "holdingType": "P",
                      "instrumentScope": "default",
                      "instrumentUid": "LUID_LD560F1M",
                      "subHoldingKeys": {
                        "Transaction/Algo/Name": {
                          "key": "Transaction/Algo/Name",
                          "value": {
                            "labelValue": "Algo1"
                          }
                        }
                      },
                      "currency": "EUR",
                      "start": {
                        "holdingCurrency": {
                          "total": 171560,
                          "currency": "EUR",
                          "components": {
                            "Cost": 163259.7,
                            "MarketGain": 8300.3
                          }
                        },
                        "portfolioCurrency": {
                          "total": 149257.2,
                          "currency": "GBP",
                          "components": {
                            "Cost": 136321.85,
                            "MarketGain": 7221.26,
                            "CurrencyGain": 5714.09
                          }
                        }
                      },
                      "flows": {
                        "holdingCurrency": {
                          "total": -192548,
                          "currency": "EUR",
                          "components": {
                            "Out": -192548
                          }
                        },
                        "portfolioCurrency": {
                          "total": -163473.25,
                          "currency": "GBP",
                          "components": {
                            "Out": -163473.25
                          }
                        }
                      },
                      "gains": {
                        "holdingCurrency": {
                          "total": 20988,
                          "currency": "EUR",
                          "components": {
                            "RealMarketGain": 29288.3,
                            "DeltaMarketGain": -8300.3
                          }
                        },
                        "portfolioCurrency": {
                          "total": 14216.05,
                          "currency": "GBP",
                          "components": {
                            "RealMarketGain": 24865.76,
                            "RealCurrencyGain": 2285.64,
                            "DeltaMarketGain": -7221.26,
                            "DeltaCurrencyGain": -5714.09
                          }
                        }
                      },
                      "properties": {
                        "Instrument/default/Name": {
                          "key": "Instrument/default/Name",
                          "value": {
                            "labelValue": "Eur Equity"
                          }
                        },
                        "Instrument/default/ClientInternal": {
                          "key": "Instrument/default/ClientInternal",
                          "value": {
                            "labelValue": "SAMPLE09"
                          }
                        }
                      },
                      "groupId": "Grp9",
                      "errors": []
                    },
                    {
                      "portfolioId": {
                        "scope": "Example",
                        "code": "Portfolio"
                      },
                      "holdingType": "P",
                      "instrumentScope": "default",
                      "instrumentUid": "LUID_QH2V2O68",
                      "subHoldingKeys": {
                        "Transaction/Algo/Name": {
                          "key": "Transaction/Algo/Name",
                          "value": {
                            "labelValue": "Algo1"
                          }
                        }
                      },
                      "currency": "ZAR",
                      "start": {
                        "holdingCurrency": {
                          "total": 3940650,
                          "currency": "ZAR",
                          "components": {
                            "Cost": 4480295.86,
                            "MarketGain": -539645.86
                          }
                        },
                        "portfolioCurrency": {
                          "total": 208854.45,
                          "currency": "GBP",
                          "components": {
                            "Cost": 215054.2,
                            "MarketGain": -28601.23,
                            "CurrencyGain": 22401.48
                          }
                        }
                      },
                      "flows": {
                        "holdingCurrency": {
                          "total": -950751.25,
                          "currency": "ZAR",
                          "components": {
                            "Out": -950751.25
                          }
                        },
                        "portfolioCurrency": {
                          "total": -49439.07,
                          "currency": "GBP",
                          "components": {
                            "Out": -49439.07
                          }
                        }
                      },
                      "gains": {
                        "holdingCurrency": {
                          "total": 258101.25,
                          "currency": "ZAR",
                          "components": {
                            "RealMarketGain": -115985.86,
                            "DeltaMarketGain": 374087.11
                          }
                        },
                        "portfolioCurrency": {
                          "total": 6232.62,
                          "currency": "GBP",
                          "components": {
                            "RealMarketGain": -6031.26,
                            "RealCurrencyGain": 4266.95,
                            "DeltaMarketGain": 20157.73,
                            "DeltaCurrencyGain": -12160.8
                          }
                        }
                      },
                      "end": {
                        "holdingCurrency": {
                          "total": 3248000,
                          "currency": "ZAR",
                          "components": {
                            "Cost": 3413558.75,
                            "MarketGain": -165558.75
                          }
                        },
                        "portfolioCurrency": {
                          "total": 165648,
                          "currency": "GBP",
                          "components": {
                            "Cost": 163850.82,
                            "MarketGain": -8443.5,
                            "CurrencyGain": 10240.68
                          }
                        }
                      },
                      "properties": {
                        "Instrument/default/Name": {
                          "key": "Instrument/default/Name",
                          "value": {
                            "labelValue": "Zar Equity #1"
                          }
                        },
                        "Instrument/default/ClientInternal": {
                          "key": "Instrument/default/ClientInternal",
                          "value": {
                            "labelValue": "SAMPLE04"
                          }
                        }
                      },
                      "groupId": "Grp10",
                      "errors": []
                    },
                    {
                      "portfolioId": {
                        "scope": "Example",
                        "code": "Portfolio"
                      },
                      "holdingType": "P",
                      "instrumentScope": "default",
                      "instrumentUid": "LUID_QTKKFOKC",
                      "subHoldingKeys": {
                        "Transaction/Algo/Name": {
                          "key": "Transaction/Algo/Name",
                          "value": {
                            "labelValue": "Algo1"
                          }
                        }
                      },
                      "currency": "EUR",
                      "start": {
                        "holdingCurrency": {
                          "total": -238437.31,
                          "currency": "EUR",
                          "components": {
                            "Cost": -234688.46,
                            "MarketGain": -3748.85
                          }
                        },
                        "portfolioCurrency": {
                          "total": -207440.46,
                          "currency": "GBP",
                          "components": {
                            "Cost": -195495.49,
                            "MarketGain": -3261.5,
                            "CurrencyGain": -8683.47
                          }
                        }
                      },
                      "flows": {
                        "holdingCurrency": {
                          "total": 45099.4,
                          "currency": "EUR",
                          "components": {
                            "In": 45099.4
                          }
                        },
                        "portfolioCurrency": {
                          "total": 38424.69,
                          "currency": "GBP",
                          "components": {
                            "In": 38424.69
                          }
                        }
                      },
                      "gains": {
                        "holdingCurrency": {
                          "total": -66223.84,
                          "currency": "EUR",
                          "components": {
                            "RealMarketGain": -10145.8,
                            "Carry": 157.3,
                            "DeltaMarketGain": -56235.34
                          }
                        },
                        "portfolioCurrency": {
                          "total": -46417.02,
                          "currency": "GBP",
                          "components": {
                            "RealMarketGain": -8644.22,
                            "RealCurrencyGain": -664.12,
                            "Carry": 134.02,
                            "DeltaMarketGain": -46525.38,
                            "DeltaCurrencyGain": 9282.68
                          }
                        }
                      },
                      "carry": {
                        "holdingCurrency": {
                          "total": -157.3,
                          "currency": "EUR",
                          "components": {
                            "CoverWithCommission": -157.3
                          }
                        },
                        "portfolioCurrency": {
                          "total": -134.02,
                          "currency": "GBP",
                          "components": {
                            "CoverWithCommission": -134.02
                          }
                        }
                      },
                      "end": {
                        "holdingCurrency": {
                          "total": -259719.05,
                          "currency": "EUR",
                          "components": {
                            "Cost": -199734.86,
                            "MarketGain": -59984.19
                          }
                        },
                        "portfolioCurrency": {
                          "total": -215566.81,
                          "currency": "GBP",
                          "components": {
                            "Cost": -166379.14,
                            "MarketGain": -49786.88,
                            "CurrencyGain": 599.21
                          }
                        }
                      },
                      "properties": {
                        "Instrument/default/Name": {
                          "key": "Instrument/default/Name",
                          "value": {
                            "labelValue": "Eur CFD #2"
                          }
                        },
                        "Instrument/default/ClientInternal": {
                          "key": "Instrument/default/ClientInternal",
                          "value": {
                            "labelValue": "SAMPLE02"
                          }
                        }
                      },
                      "groupId": "Grp11",
                      "errors": []
                    },
                    {
                      "portfolioId": {
                        "scope": "Example",
                        "code": "Portfolio"
                      },
                      "holdingType": "P",
                      "instrumentScope": "default",
                      "instrumentUid": "LUID_T6YOHML7",
                      "subHoldingKeys": {
                        "Transaction/Algo/Name": {
                          "key": "Transaction/Algo/Name",
                          "value": {
                            "labelValue": "Algo1"
                          }
                        }
                      },
                      "currency": "USD",
                      "start": {
                        "holdingCurrency": {
                          "total": 3313875,
                          "currency": "USD",
                          "components": {
                            "Cost": 3509200,
                            "MarketGain": -195325
                          }
                        },
                        "portfolioCurrency": {
                          "total": 2352851.25,
                          "currency": "GBP",
                          "components": {
                            "Cost": 2485778.5,
                            "MarketGain": -138680.75,
                            "CurrencyGain": 5753.5
                          }
                        }
                      },
                      "flows": {
                        "holdingCurrency": {
                          "total": -3525840,
                          "currency": "USD",
                          "components": {
                            "Out": -3525840
                          }
                        },
                        "portfolioCurrency": {
                          "total": -2525531,
                          "currency": "GBP",
                          "components": {
                            "Out": -2525531
                          }
                        }
                      },
                      "gains": {
                        "holdingCurrency": {
                          "total": 211965,
                          "currency": "USD",
                          "components": {
                            "RealMarketGain": 16640,
                            "DeltaMarketGain": 195325
                          }
                        },
                        "portfolioCurrency": {
                          "total": 172679.75,
                          "currency": "GBP",
                          "components": {
                            "RealMarketGain": 11825,
                            "RealCurrencyGain": 27927.5,
                            "DeltaMarketGain": 138680.75,
                            "DeltaCurrencyGain": -5753.5
                          }
                        }
                      },
                      "properties": {
                        "Instrument/default/Name": {
                          "key": "Instrument/default/Name",
                          "value": {
                            "labelValue": "Usd CFD #1"
                          }
                        },
                        "Instrument/default/ClientInternal": {
                          "key": "Instrument/default/ClientInternal",
                          "value": {
                            "labelValue": "SAMPLE07"
                          }
                        }
                      },
                      "groupId": "Grp12",
                      "errors": []
                    },
                    {
                      "portfolioId": {
                        "scope": "Example",
                        "code": "Portfolio"
                      },
                      "holdingType": "P",
                      "instrumentScope": "default",
                      "instrumentUid": "LUID_VYWV6V8Y",
                      "subHoldingKeys": {
                        "Transaction/Algo/Name": {
                          "key": "Transaction/Algo/Name",
                          "value": {
                            "labelValue": "Algo1"
                          }
                        }
                      },
                      "currency": "ZAR",
                      "start": {
                        "holdingCurrency": {
                          "total": 9783000,
                          "currency": "ZAR",
                          "components": {
                            "Cost": 10824063.04,
                            "MarketGain": -1041063.04
                          }
                        },
                        "portfolioCurrency": {
                          "total": 518499,
                          "currency": "GBP",
                          "components": {
                            "Cost": 530379.09,
                            "MarketGain": -55176.34,
                            "CurrencyGain": 43296.25
                          }
                        }
                      },
                      "flows": {
                        "holdingCurrency": {
                          "total": -775994.66,
                          "currency": "ZAR",
                          "components": {
                            "Out": -775994.66
                          }
                        },
                        "portfolioCurrency": {
                          "total": -40972.52,
                          "currency": "GBP",
                          "components": {
                            "Out": -40972.52
                          }
                        }
                      },
                      "gains": {
                        "holdingCurrency": {
                          "total": 952994.66,
                          "currency": "ZAR",
                          "components": {
                            "RealMarketGain": -65876.91,
                            "DeltaMarketGain": 1018871.57
                          }
                        },
                        "portfolioCurrency": {
                          "total": 30433.52,
                          "currency": "GBP",
                          "components": {
                            "RealMarketGain": -3478.3,
                            "RealCurrencyGain": 3199.11,
                            "DeltaMarketGain": 54044.58,
                            "DeltaCurrencyGain": -23331.87
                          }
                        }
                      },
                      "end": {
                        "holdingCurrency": {
                          "total": 9960000,
                          "currency": "ZAR",
                          "components": {
                            "Cost": 9982191.47,
                            "MarketGain": -22191.47
                          }
                        },
                        "portfolioCurrency": {
                          "total": 507960,
                          "currency": "GBP",
                          "components": {
                            "Cost": 489127.38,
                            "MarketGain": -1131.76,
                            "CurrencyGain": 19964.38
                          }
                        }
                      },
                      "properties": {
                        "Instrument/default/Name": {
                          "key": "Instrument/default/Name",
                          "value": {
                            "labelValue": "Zar Equity #3"
                          }
                        },
                        "Instrument/default/ClientInternal": {
                          "key": "Instrument/default/ClientInternal",
                          "value": {
                            "labelValue": "SAMPLE06"
                          }
                        }
                      },
                      "groupId": "Grp13",
                      "errors": []
                    },
                    {
                      "portfolioId": {
                        "scope": "Example",
                        "code": "Portfolio"
                      },
                      "holdingType": "P",
                      "instrumentScope": "default",
                      "instrumentUid": "LUID_X8R9444V",
                      "subHoldingKeys": {
                        "Transaction/Algo/Name": {
                          "key": "Transaction/Algo/Name",
                          "value": {
                            "labelValue": "Algo1"
                          }
                        }
                      },
                      "currency": "USD",
                      "start": {
                        "holdingCurrency": {
                          "total": 20652,
                          "currency": "USD",
                          "components": {
                            "Cost": 20000,
                            "MarketGain": 652
                          }
                        },
                        "portfolioCurrency": {
                          "total": 14662.92,
                          "currency": "GBP",
                          "components": {
                            "Cost": 14000,
                            "MarketGain": 462.92,
                            "CurrencyGain": 200
                          }
                        }
                      },
                      "gains": {
                        "holdingCurrency": {
                          "total": -16652,
                          "currency": "USD",
                          "components": {
                            "DeltaMarketGain": -16652
                          }
                        },
                        "portfolioCurrency": {
                          "total": -11782.92,
                          "currency": "GBP",
                          "components": {
                            "DeltaMarketGain": -11982.92,
                            "DeltaCurrencyGain": 200
                          }
                        }
                      },
                      "end": {
                        "holdingCurrency": {
                          "total": 4000,
                          "currency": "USD",
                          "components": {
                            "Cost": 20000,
                            "MarketGain": -16000
                          }
                        },
                        "portfolioCurrency": {
                          "total": 2880,
                          "currency": "GBP",
                          "components": {
                            "Cost": 14000,
                            "MarketGain": -11520,
                            "CurrencyGain": 400
                          }
                        }
                      },
                      "properties": {
                        "Instrument/default/Name": {
                          "key": "Instrument/default/Name",
                          "value": {
                            "labelValue": "Usd Equity #1"
                          }
                        },
                        "Instrument/default/ClientInternal": {
                          "key": "Instrument/default/ClientInternal",
                          "value": {
                            "labelValue": "SAMPLE08"
                          }
                        }
                      },
                      "groupId": "Grp14",
                      "errors": []
                    }
                  ],
                  "links": []
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Stable"
      }
    },
    "/api/transactionportfolios/{scope}/{code}/a2bmovements": {
      "get": {
        "tags": [
          "Transaction Portfolios"
        ],
        "summary": "GetA2BMovements: Get an A2B report at the movement level for the given portfolio.",
        "description": "Get an A2B report at the movement level for the given portfolio.",
        "operationId": "GetA2BMovements",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the portfolio to retrieve the A2B movement report for.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string"
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The code of the portfolio to retrieve the A2B movement report for. Together with the scope this\r\n            uniquely identifies the portfolio.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string"
            }
          },
          {
            "name": "fromEffectiveAt",
            "in": "query",
            "description": "The lower bound effective datetime or cut label (inclusive) from which to retrieve the data.\r\n            There is no lower bound if this is not specified.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "dateorcutlabel"
            }
          },
          {
            "name": "toEffectiveAt",
            "in": "query",
            "description": "The upper bound effective datetime or cut label (inclusive) from which to retrieve the data.\r\n            There is no upper bound if this is not specified.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "dateorcutlabel"
            }
          },
          {
            "name": "asAt",
            "in": "query",
            "description": "The asAt datetime at which to retrieve the portfolio. Defaults to return the latest version\r\n            of each transaction if not specified.",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "x-nullable": true
          },
          {
            "name": "recipeIdScope",
            "in": "query",
            "description": "The scope of the given recipeId",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "recipeIdCode",
            "in": "query",
            "description": "The code of the given recipeId",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "propertyKeys",
            "in": "query",
            "description": "A list of property keys from the \"Instrument\" domain to decorate onto\r\n            the results. These take the format {domain}/{scope}/{code} e.g. \"Instrument/system/Name\".",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "description": "The key that uniquely identifies the property. It has the format {domain}/{scope}/{code}."
              }
            },
            "x-nullable": true
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Expression to filter the result set.\r\n            Read more about filtering results from LUSID here https://support.lusid.com/filtering-results-from-lusid.",
            "schema": {
              "maxLength": 16384,
              "minLength": 0,
              "pattern": "^[\\s\\S]*$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The requested portfolio A2B movement data",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/VersionedResourceListOfA2BMovementRecord"
                },
                "example": {
                  "version": {
                    "effectiveFrom": "2020-10-31T00:00:00.0000000+00:00",
                    "asAtDate": "2021-10-31T00:00:00.0000000+00:00"
                  },
                  "values": [
                    {
                      "portfolioId": {
                        "scope": "Example",
                        "code": "Portfolio"
                      },
                      "holdingType": "P",
                      "instrumentScope": "default",
                      "instrumentUid": "LUID_1ACMRHTC",
                      "subHoldingKeys": {
                        "Transaction/Algo/Name": {
                          "key": "Transaction/Algo/Name",
                          "value": {
                            "labelValue": "Algo1"
                          }
                        }
                      },
                      "currency": "USD",
                      "effectiveDate": "2020-10-31T00:00:00.0000000+00:00",
                      "units": 100,
                      "start": {
                        "holdingCurrency": {
                          "total": 4696,
                          "currency": "USD",
                          "components": {
                            "Cost": 4800,
                            "MarketGain": -104
                          }
                        },
                        "portfolioCurrency": {
                          "total": 3334.16,
                          "currency": "GBP",
                          "components": {
                            "Cost": 3470.4,
                            "MarketGain": -73.84,
                            "CurrencyGain": -62.4
                          }
                        }
                      },
                      "properties": {
                        "Instrument/default/Name": {
                          "key": "Instrument/default/Name",
                          "value": {
                            "labelValue": "Usd Equity #2"
                          }
                        },
                        "Instrument/default/ClientInternal": {
                          "key": "Instrument/default/ClientInternal",
                          "value": {
                            "labelValue": "SAMPLE10"
                          }
                        }
                      },
                      "groupId": "g1",
                      "errors": []
                    },
                    {
                      "portfolioId": {
                        "scope": "Example",
                        "code": "Portfolio"
                      },
                      "holdingType": "P",
                      "instrumentScope": "default",
                      "instrumentUid": "LUID_1ACMRHTC",
                      "subHoldingKeys": {
                        "Transaction/Algo/Name": {
                          "key": "Transaction/Algo/Name",
                          "value": {
                            "labelValue": "Algo1"
                          }
                        }
                      },
                      "currency": "USD",
                      "transactionId": "T24",
                      "movementName": "Side1",
                      "effectiveDate": "2020-11-16T00:00:00.0000000+00:00",
                      "units": 100,
                      "flows": {
                        "holdingCurrency": {
                          "total": -25,
                          "currency": "USD",
                          "components": {
                            "Out": -25
                          }
                        },
                        "portfolioCurrency": {
                          "total": -17.82,
                          "currency": "GBP",
                          "components": {
                            "Out": -17.82
                          }
                        }
                      },
                      "carry": {
                        "holdingCurrency": {
                          "total": 25,
                          "currency": "USD",
                          "components": {
                            "Dividend": 25
                          }
                        },
                        "portfolioCurrency": {
                          "total": 17.82,
                          "currency": "GBP",
                          "components": {
                            "Dividend": 17.82
                          }
                        }
                      },
                      "properties": {
                        "Instrument/default/Name": {
                          "key": "Instrument/default/Name",
                          "value": {
                            "labelValue": "Usd Equity #2"
                          }
                        },
                        "Instrument/default/ClientInternal": {
                          "key": "Instrument/default/ClientInternal",
                          "value": {
                            "labelValue": "SAMPLE10"
                          }
                        }
                      },
                      "groupId": "g1",
                      "errors": []
                    },
                    {
                      "portfolioId": {
                        "scope": "Example",
                        "code": "Portfolio"
                      },
                      "holdingType": "P",
                      "instrumentScope": "default",
                      "instrumentUid": "LUID_1ACMRHTC",
                      "subHoldingKeys": {
                        "Transaction/Algo/Name": {
                          "key": "Transaction/Algo/Name",
                          "value": {
                            "labelValue": "Algo1"
                          }
                        }
                      },
                      "currency": "USD",
                      "effectiveDate": "2020-11-30T00:00:00.0000000+00:00",
                      "units": 100,
                      "gains": {
                        "holdingCurrency": {
                          "total": -21,
                          "currency": "USD",
                          "components": {
                            "DeltaMarketGain": -21
                          }
                        },
                        "portfolioCurrency": {
                          "total": 31.84,
                          "currency": "GBP",
                          "components": {
                            "DeltaMarketGain": -16.16,
                            "DeltaCurrencyGain": 48
                          }
                        }
                      },
                      "end": {
                        "holdingCurrency": {
                          "total": 4675,
                          "currency": "USD",
                          "components": {
                            "Cost": 4800,
                            "MarketGain": -125
                          }
                        },
                        "portfolioCurrency": {
                          "total": 3366,
                          "currency": "GBP",
                          "components": {
                            "Cost": 3470.4,
                            "MarketGain": -90,
                            "CurrencyGain": -14.4
                          }
                        }
                      },
                      "properties": {
                        "Instrument/default/Name": {
                          "key": "Instrument/default/Name",
                          "value": {
                            "labelValue": "Usd Equity #2"
                          }
                        },
                        "Instrument/default/ClientInternal": {
                          "key": "Instrument/default/ClientInternal",
                          "value": {
                            "labelValue": "SAMPLE10"
                          }
                        }
                      },
                      "groupId": "g1",
                      "errors": []
                    }
                  ],
                  "links": []
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VersionedResourceListOfA2BMovementRecord"
                },
                "example": {
                  "version": {
                    "effectiveFrom": "2020-10-31T00:00:00.0000000+00:00",
                    "asAtDate": "2021-10-31T00:00:00.0000000+00:00"
                  },
                  "values": [
                    {
                      "portfolioId": {
                        "scope": "Example",
                        "code": "Portfolio"
                      },
                      "holdingType": "P",
                      "instrumentScope": "default",
                      "instrumentUid": "LUID_1ACMRHTC",
                      "subHoldingKeys": {
                        "Transaction/Algo/Name": {
                          "key": "Transaction/Algo/Name",
                          "value": {
                            "labelValue": "Algo1"
                          }
                        }
                      },
                      "currency": "USD",
                      "effectiveDate": "2020-10-31T00:00:00.0000000+00:00",
                      "units": 100,
                      "start": {
                        "holdingCurrency": {
                          "total": 4696,
                          "currency": "USD",
                          "components": {
                            "Cost": 4800,
                            "MarketGain": -104
                          }
                        },
                        "portfolioCurrency": {
                          "total": 3334.16,
                          "currency": "GBP",
                          "components": {
                            "Cost": 3470.4,
                            "MarketGain": -73.84,
                            "CurrencyGain": -62.4
                          }
                        }
                      },
                      "properties": {
                        "Instrument/default/Name": {
                          "key": "Instrument/default/Name",
                          "value": {
                            "labelValue": "Usd Equity #2"
                          }
                        },
                        "Instrument/default/ClientInternal": {
                          "key": "Instrument/default/ClientInternal",
                          "value": {
                            "labelValue": "SAMPLE10"
                          }
                        }
                      },
                      "groupId": "g1",
                      "errors": []
                    },
                    {
                      "portfolioId": {
                        "scope": "Example",
                        "code": "Portfolio"
                      },
                      "holdingType": "P",
                      "instrumentScope": "default",
                      "instrumentUid": "LUID_1ACMRHTC",
                      "subHoldingKeys": {
                        "Transaction/Algo/Name": {
                          "key": "Transaction/Algo/Name",
                          "value": {
                            "labelValue": "Algo1"
                          }
                        }
                      },
                      "currency": "USD",
                      "transactionId": "T24",
                      "movementName": "Side1",
                      "effectiveDate": "2020-11-16T00:00:00.0000000+00:00",
                      "units": 100,
                      "flows": {
                        "holdingCurrency": {
                          "total": -25,
                          "currency": "USD",
                          "components": {
                            "Out": -25
                          }
                        },
                        "portfolioCurrency": {
                          "total": -17.82,
                          "currency": "GBP",
                          "components": {
                            "Out": -17.82
                          }
                        }
                      },
                      "carry": {
                        "holdingCurrency": {
                          "total": 25,
                          "currency": "USD",
                          "components": {
                            "Dividend": 25
                          }
                        },
                        "portfolioCurrency": {
                          "total": 17.82,
                          "currency": "GBP",
                          "components": {
                            "Dividend": 17.82
                          }
                        }
                      },
                      "properties": {
                        "Instrument/default/Name": {
                          "key": "Instrument/default/Name",
                          "value": {
                            "labelValue": "Usd Equity #2"
                          }
                        },
                        "Instrument/default/ClientInternal": {
                          "key": "Instrument/default/ClientInternal",
                          "value": {
                            "labelValue": "SAMPLE10"
                          }
                        }
                      },
                      "groupId": "g1",
                      "errors": []
                    },
                    {
                      "portfolioId": {
                        "scope": "Example",
                        "code": "Portfolio"
                      },
                      "holdingType": "P",
                      "instrumentScope": "default",
                      "instrumentUid": "LUID_1ACMRHTC",
                      "subHoldingKeys": {
                        "Transaction/Algo/Name": {
                          "key": "Transaction/Algo/Name",
                          "value": {
                            "labelValue": "Algo1"
                          }
                        }
                      },
                      "currency": "USD",
                      "effectiveDate": "2020-11-30T00:00:00.0000000+00:00",
                      "units": 100,
                      "gains": {
                        "holdingCurrency": {
                          "total": -21,
                          "currency": "USD",
                          "components": {
                            "DeltaMarketGain": -21
                          }
                        },
                        "portfolioCurrency": {
                          "total": 31.84,
                          "currency": "GBP",
                          "components": {
                            "DeltaMarketGain": -16.16,
                            "DeltaCurrencyGain": 48
                          }
                        }
                      },
                      "end": {
                        "holdingCurrency": {
                          "total": 4675,
                          "currency": "USD",
                          "components": {
                            "Cost": 4800,
                            "MarketGain": -125
                          }
                        },
                        "portfolioCurrency": {
                          "total": 3366,
                          "currency": "GBP",
                          "components": {
                            "Cost": 3470.4,
                            "MarketGain": -90,
                            "CurrencyGain": -14.4
                          }
                        }
                      },
                      "properties": {
                        "Instrument/default/Name": {
                          "key": "Instrument/default/Name",
                          "value": {
                            "labelValue": "Usd Equity #2"
                          }
                        },
                        "Instrument/default/ClientInternal": {
                          "key": "Instrument/default/ClientInternal",
                          "value": {
                            "labelValue": "SAMPLE10"
                          }
                        }
                      },
                      "groupId": "g1",
                      "errors": []
                    }
                  ],
                  "links": []
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/VersionedResourceListOfA2BMovementRecord"
                },
                "example": {
                  "version": {
                    "effectiveFrom": "2020-10-31T00:00:00.0000000+00:00",
                    "asAtDate": "2021-10-31T00:00:00.0000000+00:00"
                  },
                  "values": [
                    {
                      "portfolioId": {
                        "scope": "Example",
                        "code": "Portfolio"
                      },
                      "holdingType": "P",
                      "instrumentScope": "default",
                      "instrumentUid": "LUID_1ACMRHTC",
                      "subHoldingKeys": {
                        "Transaction/Algo/Name": {
                          "key": "Transaction/Algo/Name",
                          "value": {
                            "labelValue": "Algo1"
                          }
                        }
                      },
                      "currency": "USD",
                      "effectiveDate": "2020-10-31T00:00:00.0000000+00:00",
                      "units": 100,
                      "start": {
                        "holdingCurrency": {
                          "total": 4696,
                          "currency": "USD",
                          "components": {
                            "Cost": 4800,
                            "MarketGain": -104
                          }
                        },
                        "portfolioCurrency": {
                          "total": 3334.16,
                          "currency": "GBP",
                          "components": {
                            "Cost": 3470.4,
                            "MarketGain": -73.84,
                            "CurrencyGain": -62.4
                          }
                        }
                      },
                      "properties": {
                        "Instrument/default/Name": {
                          "key": "Instrument/default/Name",
                          "value": {
                            "labelValue": "Usd Equity #2"
                          }
                        },
                        "Instrument/default/ClientInternal": {
                          "key": "Instrument/default/ClientInternal",
                          "value": {
                            "labelValue": "SAMPLE10"
                          }
                        }
                      },
                      "groupId": "g1",
                      "errors": []
                    },
                    {
                      "portfolioId": {
                        "scope": "Example",
                        "code": "Portfolio"
                      },
                      "holdingType": "P",
                      "instrumentScope": "default",
                      "instrumentUid": "LUID_1ACMRHTC",
                      "subHoldingKeys": {
                        "Transaction/Algo/Name": {
                          "key": "Transaction/Algo/Name",
                          "value": {
                            "labelValue": "Algo1"
                          }
                        }
                      },
                      "currency": "USD",
                      "transactionId": "T24",
                      "movementName": "Side1",
                      "effectiveDate": "2020-11-16T00:00:00.0000000+00:00",
                      "units": 100,
                      "flows": {
                        "holdingCurrency": {
                          "total": -25,
                          "currency": "USD",
                          "components": {
                            "Out": -25
                          }
                        },
                        "portfolioCurrency": {
                          "total": -17.82,
                          "currency": "GBP",
                          "components": {
                            "Out": -17.82
                          }
                        }
                      },
                      "carry": {
                        "holdingCurrency": {
                          "total": 25,
                          "currency": "USD",
                          "components": {
                            "Dividend": 25
                          }
                        },
                        "portfolioCurrency": {
                          "total": 17.82,
                          "currency": "GBP",
                          "components": {
                            "Dividend": 17.82
                          }
                        }
                      },
                      "properties": {
                        "Instrument/default/Name": {
                          "key": "Instrument/default/Name",
                          "value": {
                            "labelValue": "Usd Equity #2"
                          }
                        },
                        "Instrument/default/ClientInternal": {
                          "key": "Instrument/default/ClientInternal",
                          "value": {
                            "labelValue": "SAMPLE10"
                          }
                        }
                      },
                      "groupId": "g1",
                      "errors": []
                    },
                    {
                      "portfolioId": {
                        "scope": "Example",
                        "code": "Portfolio"
                      },
                      "holdingType": "P",
                      "instrumentScope": "default",
                      "instrumentUid": "LUID_1ACMRHTC",
                      "subHoldingKeys": {
                        "Transaction/Algo/Name": {
                          "key": "Transaction/Algo/Name",
                          "value": {
                            "labelValue": "Algo1"
                          }
                        }
                      },
                      "currency": "USD",
                      "effectiveDate": "2020-11-30T00:00:00.0000000+00:00",
                      "units": 100,
                      "gains": {
                        "holdingCurrency": {
                          "total": -21,
                          "currency": "USD",
                          "components": {
                            "DeltaMarketGain": -21
                          }
                        },
                        "portfolioCurrency": {
                          "total": 31.84,
                          "currency": "GBP",
                          "components": {
                            "DeltaMarketGain": -16.16,
                            "DeltaCurrencyGain": 48
                          }
                        }
                      },
                      "end": {
                        "holdingCurrency": {
                          "total": 4675,
                          "currency": "USD",
                          "components": {
                            "Cost": 4800,
                            "MarketGain": -125
                          }
                        },
                        "portfolioCurrency": {
                          "total": 3366,
                          "currency": "GBP",
                          "components": {
                            "Cost": 3470.4,
                            "MarketGain": -90,
                            "CurrencyGain": -14.4
                          }
                        }
                      },
                      "properties": {
                        "Instrument/default/Name": {
                          "key": "Instrument/default/Name",
                          "value": {
                            "labelValue": "Usd Equity #2"
                          }
                        },
                        "Instrument/default/ClientInternal": {
                          "key": "Instrument/default/ClientInternal",
                          "value": {
                            "labelValue": "SAMPLE10"
                          }
                        }
                      },
                      "groupId": "g1",
                      "errors": []
                    }
                  ],
                  "links": []
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Stable"
      }
    },
    "/api/transactionportfolios/{scope}/{code}/cashladder": {
      "get": {
        "tags": [
          "Transaction Portfolios"
        ],
        "summary": "GetPortfolioCashLadder: Get portfolio cash ladder",
        "description": "Get a cash ladder for a transaction portfolio.",
        "operationId": "GetPortfolioCashLadder",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the transaction portfolio.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string"
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The code of the transaction portfolio. Together with the scope this\r\n            uniquely identifies the portfolio.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string"
            }
          },
          {
            "name": "fromEffectiveAt",
            "in": "query",
            "description": "The lower bound effective datetime or cut label (inclusive) from which to retrieve the data.\r\n            There is no lower bound if this is not specified.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "dateorcutlabel"
            }
          },
          {
            "name": "toEffectiveAt",
            "in": "query",
            "description": "The upper bound effective datetime or cut label (inclusive) from which to retrieve the data.\r\n            There is no upper bound if this is not specified.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "dateorcutlabel"
            }
          },
          {
            "name": "effectiveAt",
            "in": "query",
            "description": "The valuation (pricing) effective datetime or cut label (inclusive) at which to evaluate the cashflows.\r\nThis determines whether cashflows are evaluated in a historic or forward looking context and will, for certain models, affect where data is looked up.\r\nFor example, on a swap if the effectiveAt is in the middle of the window, cashflows before it will be historic and resets assumed to exist where if the effectiveAt\r\nis before the start of the range they are forward looking and will be expectations assuming the model supports that.\r\nThere is evidently a presumption here about availability of data and that the effectiveAt is realistically on or before the real-world today.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "dateorcutlabel"
            }
          },
          {
            "name": "asAt",
            "in": "query",
            "description": "The asAt datetime at which to retrieve the portfolio. Defaults to returning the latest version\r\n            of each transaction if not specified.",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "x-nullable": true
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Expression to filter the result set.\r\n            For example, to return only transactions with a transaction type of 'Buy', specify \"type eq 'Buy'\".\r\n            For more information about filtering LUSID results, see https://support.lusid.com/knowledgebase/article/KA-01914.",
            "schema": {
              "maxLength": 16384,
              "minLength": 0,
              "pattern": "^[\\s\\S]*$",
              "type": "string"
            }
          },
          {
            "name": "recipeIdScope",
            "in": "query",
            "description": "The scope of the given recipeId",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "recipeIdCode",
            "in": "query",
            "description": "The code of the given recipeID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "excludeUnsettledTrades",
            "in": "query",
            "description": "If absent or set to false, cashflows will returned based on trade date - more specifically, cashflows from any unsettled trades will be included in the results. If set to true, unsettled trades will be excluded from the result set.",
            "schema": {
              "type": "boolean",
              "default": false
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "description": "The requested portfolio cash-ladder",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfPortfolioCashLadder"
                },
                "example": {
                  "values": [
                    {
                      "currency": "USD",
                      "subHoldingKeys": {
                        "Instrument/default/Strategy": {
                          "key": "Instrument/default/Strategy",
                          "value": {
                            "labelValue": "ABC"
                          }
                        }
                      },
                      "records": [
                        {
                          "effectiveDate": "2021-02-13T01:02:03.0040000+00:00",
                          "open": 25000,
                          "activities": {
                            "Trades to settle": -8200,
                            "Dividend": 0,
                            "Estimated funding": 1500
                          },
                          "close": 18300
                        },
                        {
                          "effectiveDate": "2021-02-14T01:02:03.0040000+00:00",
                          "open": 18300,
                          "activities": {
                            "Trades to settle": -19850,
                            "Dividend": 0,
                            "Estimated funding": -500
                          },
                          "close": -2050
                        },
                        {
                          "effectiveDate": "2021-02-15T01:02:03.0040000+00:00",
                          "open": -2050,
                          "activities": {
                            "Trades to settle": -5000,
                            "Dividend": 560,
                            "Estimated funding": 5000
                          },
                          "close": 8510
                        },
                        {
                          "effectiveDate": "2021-02-16T01:02:03.0040000+00:00",
                          "open": 8510,
                          "activities": {
                            "Trades to settle": -2000,
                            "Dividend": 0,
                            "Estimated funding": 1500
                          },
                          "close": 5010
                        },
                        {
                          "effectiveDate": "2021-02-17T01:02:03.0040000+00:00",
                          "open": 8510,
                          "activities": {
                            "Trades to settle": -1200,
                            "Dividend": 0,
                            "Estimated funding": 6700
                          },
                          "close": 10510
                        }
                      ],
                      "failed": {}
                    },
                    {
                      "currency": "EUR",
                      "subHoldingKeys": {
                        "Instrument/default/Strategy": {
                          "key": "Instrument/default/Strategy",
                          "value": {
                            "labelValue": "CBA"
                          }
                        }
                      },
                      "records": [
                        {
                          "effectiveDate": "2021-02-13T01:02:03.0040000+00:00",
                          "open": -150000,
                          "activities": {
                            "Trades to settle": -15000,
                            "Dividend": 0,
                            "Estimated funding": 0
                          },
                          "close": 135000
                        },
                        {
                          "effectiveDate": "2021-02-15T01:02:03.0040000+00:00",
                          "open": 135000,
                          "activities": {
                            "Trades to settle": 25500,
                            "Dividend": 0,
                            "Estimated funding": 0
                          },
                          "close": 160500
                        },
                        {
                          "effectiveDate": "2021-02-17T01:02:03.0040000+00:00",
                          "open": 160500,
                          "activities": {
                            "Trades to settle": 0,
                            "Dividend": 5400,
                            "Estimated funding": 0
                          },
                          "close": 165900
                        }
                      ],
                      "failed": {}
                    }
                  ],
                  "links": []
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfPortfolioCashLadder"
                },
                "example": {
                  "values": [
                    {
                      "currency": "USD",
                      "subHoldingKeys": {
                        "Instrument/default/Strategy": {
                          "key": "Instrument/default/Strategy",
                          "value": {
                            "labelValue": "ABC"
                          }
                        }
                      },
                      "records": [
                        {
                          "effectiveDate": "2021-02-13T01:02:03.0040000+00:00",
                          "open": 25000,
                          "activities": {
                            "Trades to settle": -8200,
                            "Dividend": 0,
                            "Estimated funding": 1500
                          },
                          "close": 18300
                        },
                        {
                          "effectiveDate": "2021-02-14T01:02:03.0040000+00:00",
                          "open": 18300,
                          "activities": {
                            "Trades to settle": -19850,
                            "Dividend": 0,
                            "Estimated funding": -500
                          },
                          "close": -2050
                        },
                        {
                          "effectiveDate": "2021-02-15T01:02:03.0040000+00:00",
                          "open": -2050,
                          "activities": {
                            "Trades to settle": -5000,
                            "Dividend": 560,
                            "Estimated funding": 5000
                          },
                          "close": 8510
                        },
                        {
                          "effectiveDate": "2021-02-16T01:02:03.0040000+00:00",
                          "open": 8510,
                          "activities": {
                            "Trades to settle": -2000,
                            "Dividend": 0,
                            "Estimated funding": 1500
                          },
                          "close": 5010
                        },
                        {
                          "effectiveDate": "2021-02-17T01:02:03.0040000+00:00",
                          "open": 8510,
                          "activities": {
                            "Trades to settle": -1200,
                            "Dividend": 0,
                            "Estimated funding": 6700
                          },
                          "close": 10510
                        }
                      ],
                      "failed": {}
                    },
                    {
                      "currency": "EUR",
                      "subHoldingKeys": {
                        "Instrument/default/Strategy": {
                          "key": "Instrument/default/Strategy",
                          "value": {
                            "labelValue": "CBA"
                          }
                        }
                      },
                      "records": [
                        {
                          "effectiveDate": "2021-02-13T01:02:03.0040000+00:00",
                          "open": -150000,
                          "activities": {
                            "Trades to settle": -15000,
                            "Dividend": 0,
                            "Estimated funding": 0
                          },
                          "close": 135000
                        },
                        {
                          "effectiveDate": "2021-02-15T01:02:03.0040000+00:00",
                          "open": 135000,
                          "activities": {
                            "Trades to settle": 25500,
                            "Dividend": 0,
                            "Estimated funding": 0
                          },
                          "close": 160500
                        },
                        {
                          "effectiveDate": "2021-02-17T01:02:03.0040000+00:00",
                          "open": 160500,
                          "activities": {
                            "Trades to settle": 0,
                            "Dividend": 5400,
                            "Estimated funding": 0
                          },
                          "close": 165900
                        }
                      ],
                      "failed": {}
                    }
                  ],
                  "links": []
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfPortfolioCashLadder"
                },
                "example": {
                  "values": [
                    {
                      "currency": "USD",
                      "subHoldingKeys": {
                        "Instrument/default/Strategy": {
                          "key": "Instrument/default/Strategy",
                          "value": {
                            "labelValue": "ABC"
                          }
                        }
                      },
                      "records": [
                        {
                          "effectiveDate": "2021-02-13T01:02:03.0040000+00:00",
                          "open": 25000,
                          "activities": {
                            "Trades to settle": -8200,
                            "Dividend": 0,
                            "Estimated funding": 1500
                          },
                          "close": 18300
                        },
                        {
                          "effectiveDate": "2021-02-14T01:02:03.0040000+00:00",
                          "open": 18300,
                          "activities": {
                            "Trades to settle": -19850,
                            "Dividend": 0,
                            "Estimated funding": -500
                          },
                          "close": -2050
                        },
                        {
                          "effectiveDate": "2021-02-15T01:02:03.0040000+00:00",
                          "open": -2050,
                          "activities": {
                            "Trades to settle": -5000,
                            "Dividend": 560,
                            "Estimated funding": 5000
                          },
                          "close": 8510
                        },
                        {
                          "effectiveDate": "2021-02-16T01:02:03.0040000+00:00",
                          "open": 8510,
                          "activities": {
                            "Trades to settle": -2000,
                            "Dividend": 0,
                            "Estimated funding": 1500
                          },
                          "close": 5010
                        },
                        {
                          "effectiveDate": "2021-02-17T01:02:03.0040000+00:00",
                          "open": 8510,
                          "activities": {
                            "Trades to settle": -1200,
                            "Dividend": 0,
                            "Estimated funding": 6700
                          },
                          "close": 10510
                        }
                      ],
                      "failed": {}
                    },
                    {
                      "currency": "EUR",
                      "subHoldingKeys": {
                        "Instrument/default/Strategy": {
                          "key": "Instrument/default/Strategy",
                          "value": {
                            "labelValue": "CBA"
                          }
                        }
                      },
                      "records": [
                        {
                          "effectiveDate": "2021-02-13T01:02:03.0040000+00:00",
                          "open": -150000,
                          "activities": {
                            "Trades to settle": -15000,
                            "Dividend": 0,
                            "Estimated funding": 0
                          },
                          "close": 135000
                        },
                        {
                          "effectiveDate": "2021-02-15T01:02:03.0040000+00:00",
                          "open": 135000,
                          "activities": {
                            "Trades to settle": 25500,
                            "Dividend": 0,
                            "Estimated funding": 0
                          },
                          "close": 160500
                        },
                        {
                          "effectiveDate": "2021-02-17T01:02:03.0040000+00:00",
                          "open": 160500,
                          "activities": {
                            "Trades to settle": 0,
                            "Dividend": 5400,
                            "Estimated funding": 0
                          },
                          "close": 165900
                        }
                      ],
                      "failed": {}
                    }
                  ],
                  "links": []
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Stable"
      }
    },
    "/api/transactionportfolios/{scope}/{code}/cashstatement": {
      "get": {
        "tags": [
          "Transaction Portfolios"
        ],
        "summary": "GetPortfolioCashStatement: Get portfolio cash statement",
        "description": "Get a cash statement for a transaction portfolio.",
        "operationId": "GetPortfolioCashStatement",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the transaction portfolio.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string"
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The code of the transaction portfolio. Together with the scope this\r\n            uniquely identifies the portfolio.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string"
            }
          },
          {
            "name": "fromEffectiveAt",
            "in": "query",
            "description": "The lower bound effective datetime or cut label (inclusive) from which to retrieve the data.\r\n            There is no lower bound if this is not specified.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "dateorcutlabel"
            }
          },
          {
            "name": "toEffectiveAt",
            "in": "query",
            "description": "The upper bound effective datetime or cut label (inclusive) from which to retrieve the data.\r\n            There is no upper bound if this is not specified.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "dateorcutlabel"
            }
          },
          {
            "name": "asAt",
            "in": "query",
            "description": "The asAt datetime at which to retrieve the portfolio. Defaults to returning the latest version\r\n            of each transaction if not specified.",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "x-nullable": true
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Expression to filter the result set.\r\n            For example, to return only transactions with a transaction type of 'Buy', specify \"type eq 'Buy'\".\r\n            For more information about filtering LUSID results, see https://support.lusid.com/knowledgebase/article/KA-01914.",
            "schema": {
              "maxLength": 16384,
              "minLength": 0,
              "pattern": "^[\\s\\S]*$",
              "type": "string"
            }
          },
          {
            "name": "recipeIdScope",
            "in": "query",
            "description": "The scope of the given recipeId",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "recipeIdCode",
            "in": "query",
            "description": "The code of the given recipeID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The requested portfolio cash flow data",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfPortfolioCashFlow"
                },
                "example": {
                  "values": [
                    {
                      "groupById": 1,
                      "sequenceNumber": 0,
                      "effectiveDate": "2020-06-01T00:00:00.0000000+00:00",
                      "subHoldingKeys": {
                        "Instrument/default/Strategy": {
                          "key": "Instrument/default/Strategy",
                          "value": {
                            "labelValue": "ABC"
                          }
                        }
                      },
                      "type": "Open",
                      "movementName": "",
                      "cashflow": {
                        "amount": 0,
                        "currency": "USD"
                      },
                      "balance": {
                        "amount": 128347,
                        "currency": "USD"
                      },
                      "fxRate": 1,
                      "cashflowReportingCurrency": {
                        "amount": 0,
                        "currency": "USD"
                      },
                      "balanceReportingCurrency": {
                        "amount": 128347,
                        "currency": "USD"
                      },
                      "translationGainLoss": {
                        "amount": 0,
                        "currency": "USD"
                      },
                      "costBasisReportingCurrency": {
                        "amount": 128347,
                        "currency": "USD"
                      },
                      "unrealisedGainLossReportingCurrency": {
                        "amount": 0,
                        "currency": "USD"
                      }
                    },
                    {
                      "groupById": 1,
                      "sequenceNumber": 1,
                      "effectiveDate": "2020-06-13T00:00:00.0000000+00:00",
                      "subHoldingKeys": {
                        "Instrument/default/Strategy": {
                          "key": "Instrument/default/Strategy",
                          "value": {
                            "labelValue": "ABC"
                          }
                        }
                      },
                      "type": "Activity",
                      "movementName": "principal",
                      "cashflow": {
                        "amount": 73494,
                        "currency": "USD"
                      },
                      "balance": {
                        "amount": 54853,
                        "currency": "USD"
                      },
                      "fxRate": 1,
                      "cashflowReportingCurrency": {
                        "amount": 73494,
                        "currency": "USD"
                      },
                      "balanceReportingCurrency": {
                        "amount": 54853,
                        "currency": "USD"
                      },
                      "translationGainLoss": {
                        "amount": 0,
                        "currency": "USD"
                      },
                      "costBasisReportingCurrency": {
                        "amount": 54853,
                        "currency": "USD"
                      },
                      "transaction": {
                        "transactionId": "tid_234942982496001",
                        "type": "Buy",
                        "instrumentIdentifiers": {},
                        "instrumentScope": "default",
                        "instrumentUid": "LUID_1C7YTL5M",
                        "transactionDate": "2020-06-10T00:00:00.0000000+00:00",
                        "settlementDate": "2020-06-13T00:00:00.0000000+00:00",
                        "units": 1517.8,
                        "transactionPrice": {
                          "price": 48.4213,
                          "type": "Price"
                        },
                        "totalConsideration": {
                          "amount": 48.4213,
                          "currency": "USD"
                        },
                        "properties": {},
                        "source": "",
                        "entryDateTime": "0001-01-01T00:00:00.0000000+00:00",
                        "transactionStatus": "Active"
                      },
                      "unrealisedGainLossReportingCurrency": {
                        "amount": 0,
                        "currency": "USD"
                      }
                    },
                    {
                      "groupById": 1,
                      "sequenceNumber": 2,
                      "effectiveDate": "2020-06-14T00:00:00.0000000+00:00",
                      "subHoldingKeys": {
                        "Instrument/default/Strategy": {
                          "key": "Instrument/default/Strategy",
                          "value": {
                            "labelValue": "ABC"
                          }
                        }
                      },
                      "type": "Activity",
                      "movementName": "principal",
                      "cashflow": {
                        "amount": 33731.44,
                        "currency": "USD"
                      },
                      "balance": {
                        "amount": 21121.56,
                        "currency": "USD"
                      },
                      "fxRate": 1,
                      "cashflowReportingCurrency": {
                        "amount": 33731.44,
                        "currency": "USD"
                      },
                      "balanceReportingCurrency": {
                        "amount": 21121.56,
                        "currency": "USD"
                      },
                      "translationGainLoss": {
                        "amount": 0,
                        "currency": "USD"
                      },
                      "costBasisReportingCurrency": {
                        "amount": 21121.56,
                        "currency": "USD"
                      },
                      "transaction": {
                        "transactionId": "tid_234295929052090",
                        "type": "Buy",
                        "instrumentIdentifiers": {},
                        "instrumentScope": "default",
                        "instrumentUid": "LUID_1C7YTL5M",
                        "transactionDate": "2020-06-11T00:00:00.0000000+00:00",
                        "settlementDate": "2020-06-14T00:00:00.0000000+00:00",
                        "units": 696.97,
                        "transactionPrice": {
                          "price": 48.3974,
                          "type": "Price"
                        },
                        "totalConsideration": {
                          "amount": 48.3974,
                          "currency": "USD"
                        },
                        "properties": {},
                        "source": "",
                        "entryDateTime": "0001-01-01T00:00:00.0000000+00:00",
                        "transactionStatus": "Active"
                      },
                      "unrealisedGainLossReportingCurrency": {
                        "amount": 0,
                        "currency": "USD"
                      }
                    },
                    {
                      "groupById": 1,
                      "sequenceNumber": 3,
                      "effectiveDate": "2020-06-15T00:00:00.0000000+00:00",
                      "subHoldingKeys": {
                        "Instrument/default/Strategy": {
                          "key": "Instrument/default/Strategy",
                          "value": {
                            "labelValue": "ABC"
                          }
                        }
                      },
                      "type": "Activity",
                      "movementName": "payment",
                      "cashflow": {
                        "amount": 20.68,
                        "currency": "USD"
                      },
                      "balance": {
                        "amount": 21142.24,
                        "currency": "USD"
                      },
                      "fxRate": 1,
                      "cashflowReportingCurrency": {
                        "amount": 20.68,
                        "currency": "USD"
                      },
                      "balanceReportingCurrency": {
                        "amount": 21142.24,
                        "currency": "USD"
                      },
                      "translationGainLoss": {
                        "amount": 0,
                        "currency": "USD"
                      },
                      "costBasisReportingCurrency": {
                        "amount": 21142.24,
                        "currency": "USD"
                      },
                      "transaction": {
                        "transactionId": "tid_325452342424500",
                        "type": "Dividend",
                        "instrumentIdentifiers": {},
                        "instrumentScope": "default",
                        "instrumentUid": "LUID_1C7YTL5M",
                        "transactionDate": "2020-06-15T00:00:00.0000000+00:00",
                        "settlementDate": "2020-06-15T00:00:00.0000000+00:00",
                        "units": 0,
                        "transactionPrice": {
                          "price": 0,
                          "type": "Price"
                        },
                        "totalConsideration": {
                          "amount": 0,
                          "currency": "USD"
                        },
                        "properties": {},
                        "source": "",
                        "entryDateTime": "0001-01-01T00:00:00.0000000+00:00",
                        "transactionStatus": "Active"
                      },
                      "unrealisedGainLossReportingCurrency": {
                        "amount": 0,
                        "currency": "USD"
                      }
                    },
                    {
                      "groupById": 1,
                      "sequenceNumber": 4,
                      "effectiveDate": "2020-06-20T00:00:00.0000000+00:00",
                      "subHoldingKeys": {
                        "Instrument/default/Strategy": {
                          "key": "Instrument/default/Strategy",
                          "value": {
                            "labelValue": "ABC"
                          }
                        }
                      },
                      "type": "Activity",
                      "movementName": "principal",
                      "cashflow": {
                        "amount": 10374,
                        "currency": "USD"
                      },
                      "balance": {
                        "amount": 31516.24,
                        "currency": "USD"
                      },
                      "fxRate": 1,
                      "cashflowReportingCurrency": {
                        "amount": 10374,
                        "currency": "USD"
                      },
                      "balanceReportingCurrency": {
                        "amount": 31516.24,
                        "currency": "USD"
                      },
                      "translationGainLoss": {
                        "amount": 0,
                        "currency": "USD"
                      },
                      "costBasisReportingCurrency": {
                        "amount": 31516.24,
                        "currency": "USD"
                      },
                      "transaction": {
                        "transactionId": "tid_329432525234324",
                        "type": "Sell",
                        "instrumentIdentifiers": {},
                        "instrumentScope": "default",
                        "instrumentUid": "LUID_1C7YTL5M",
                        "transactionDate": "2020-06-17T00:00:00.0000000+00:00",
                        "settlementDate": "2020-06-20T00:00:00.0000000+00:00",
                        "units": 211.63,
                        "transactionPrice": {
                          "price": 49.0192,
                          "type": "Price"
                        },
                        "totalConsideration": {
                          "amount": 49.0192,
                          "currency": "USD"
                        },
                        "properties": {},
                        "source": "",
                        "entryDateTime": "0001-01-01T00:00:00.0000000+00:00",
                        "transactionStatus": "Active"
                      },
                      "unrealisedGainLossReportingCurrency": {
                        "amount": 0,
                        "currency": "USD"
                      }
                    },
                    {
                      "groupById": 1,
                      "sequenceNumber": 5,
                      "effectiveDate": "2020-06-20T00:00:00.0000000+00:00",
                      "subHoldingKeys": {
                        "Instrument/default/Strategy": {
                          "key": "Instrument/default/Strategy",
                          "value": {
                            "labelValue": "ABC"
                          }
                        }
                      },
                      "type": "Activity",
                      "movementName": "bond accrual",
                      "cashflow": {
                        "amount": 10373,
                        "currency": "USD"
                      },
                      "balance": {
                        "amount": 41889.24,
                        "currency": "USD"
                      },
                      "fxRate": 0,
                      "cashflowReportingCurrency": {
                        "amount": 10373,
                        "currency": "USD"
                      },
                      "balanceReportingCurrency": {
                        "amount": 41889.24,
                        "currency": "USD"
                      },
                      "translationGainLoss": {
                        "amount": -1,
                        "currency": "USD"
                      },
                      "costBasisReportingCurrency": {
                        "amount": 41889.24,
                        "currency": "USD"
                      },
                      "transaction": {
                        "transactionId": "tid_329432525234323",
                        "type": "Sell",
                        "instrumentIdentifiers": {},
                        "instrumentScope": "default",
                        "instrumentUid": "LUID_1C7YTL5M",
                        "transactionDate": "2019-06-17T00:00:00.0000000+00:00",
                        "settlementDate": "2019-06-20T00:00:00.0000000+00:00",
                        "units": 210.63,
                        "transactionPrice": {
                          "price": 48.0192,
                          "type": "Price"
                        },
                        "totalConsideration": {
                          "amount": 48.0192,
                          "currency": "USD"
                        },
                        "properties": {},
                        "source": "",
                        "entryDateTime": "0001-01-01T00:00:00.0000000+00:00",
                        "transactionStatus": "Active"
                      },
                      "unrealisedGainLossReportingCurrency": {
                        "amount": 0,
                        "currency": "USD"
                      }
                    },
                    {
                      "groupById": 1,
                      "sequenceNumber": 6,
                      "effectiveDate": "2020-06-21T00:00:00.0000000+00:00",
                      "subHoldingKeys": {
                        "Instrument/default/Strategy": {
                          "key": "Instrument/default/Strategy",
                          "value": {
                            "labelValue": "ABC"
                          }
                        }
                      },
                      "type": "Activity",
                      "movementName": "principal",
                      "cashflow": {
                        "amount": 8775,
                        "currency": "USD"
                      },
                      "balance": {
                        "amount": 50665.24,
                        "currency": "USD"
                      },
                      "fxRate": 1,
                      "cashflowReportingCurrency": {
                        "amount": 8775,
                        "currency": "USD"
                      },
                      "balanceReportingCurrency": {
                        "amount": 50665.24,
                        "currency": "USD"
                      },
                      "translationGainLoss": {
                        "amount": 0,
                        "currency": "USD"
                      },
                      "costBasisReportingCurrency": {
                        "amount": 50665.24,
                        "currency": "USD"
                      },
                      "transaction": {
                        "transactionId": "tid_124319009950924",
                        "type": "Sell",
                        "instrumentIdentifiers": {},
                        "instrumentScope": "default",
                        "instrumentUid": "LUID_1C7YTL5M",
                        "transactionDate": "2020-06-18T00:00:00.0000000+00:00",
                        "settlementDate": "2020-06-21T00:00:00.0000000+00:00",
                        "units": 179.01,
                        "transactionPrice": {
                          "price": 49.0184,
                          "type": "Price"
                        },
                        "totalConsideration": {
                          "amount": 49.0184,
                          "currency": "USD"
                        },
                        "properties": {},
                        "source": "",
                        "entryDateTime": "0001-01-01T00:00:00.0000000+00:00",
                        "transactionStatus": "Active"
                      },
                      "unrealisedGainLossReportingCurrency": {
                        "amount": 0,
                        "currency": "USD"
                      }
                    },
                    {
                      "groupById": 1,
                      "sequenceNumber": 7,
                      "effectiveDate": "2020-06-21T00:00:00.0000000+00:00",
                      "subHoldingKeys": {
                        "Instrument/default/Strategy": {
                          "key": "Instrument/default/Strategy",
                          "value": {
                            "labelValue": "ABC"
                          }
                        }
                      },
                      "type": "Activity",
                      "movementName": "principal",
                      "cashflow": {
                        "amount": 13225.1,
                        "currency": "USD"
                      },
                      "balance": {
                        "amount": 63890.34,
                        "currency": "USD"
                      },
                      "fxRate": 1,
                      "cashflowReportingCurrency": {
                        "amount": 13225.1,
                        "currency": "USD"
                      },
                      "balanceReportingCurrency": {
                        "amount": 63890.34,
                        "currency": "USD"
                      },
                      "translationGainLoss": {
                        "amount": 0,
                        "currency": "USD"
                      },
                      "costBasisReportingCurrency": {
                        "amount": 63890.34,
                        "currency": "USD"
                      },
                      "transaction": {
                        "transactionId": "tid_121309590059995",
                        "type": "Sell",
                        "instrumentIdentifiers": {},
                        "instrumentScope": "default",
                        "instrumentUid": "LUID_1C7YTL5M",
                        "transactionDate": "2020-06-18T00:00:00.0000000+00:00",
                        "settlementDate": "2020-06-21T00:00:00.0000000+00:00",
                        "units": 269.99,
                        "transactionPrice": {
                          "price": 48.9843,
                          "type": "Price"
                        },
                        "totalConsideration": {
                          "amount": 48.9843,
                          "currency": "USD"
                        },
                        "properties": {},
                        "source": "",
                        "entryDateTime": "0001-01-01T00:00:00.0000000+00:00",
                        "transactionStatus": "Active"
                      },
                      "unrealisedGainLossReportingCurrency": {
                        "amount": 0,
                        "currency": "USD"
                      }
                    },
                    {
                      "groupById": 1,
                      "sequenceNumber": 8,
                      "effectiveDate": "2020-06-30T00:00:00.0000000+00:00",
                      "subHoldingKeys": {
                        "Instrument/default/Strategy": {
                          "key": "Instrument/default/Strategy",
                          "value": {
                            "labelValue": "ABC"
                          }
                        }
                      },
                      "type": "Closed",
                      "movementName": "",
                      "cashflow": {
                        "amount": 0,
                        "currency": "USD"
                      },
                      "balance": {
                        "amount": 63890.34,
                        "currency": "USD"
                      },
                      "fxRate": 1,
                      "cashflowReportingCurrency": {
                        "amount": 0,
                        "currency": "USD"
                      },
                      "balanceReportingCurrency": {
                        "amount": 63890.34,
                        "currency": "USD"
                      },
                      "translationGainLoss": {
                        "amount": 0,
                        "currency": "USD"
                      },
                      "costBasisReportingCurrency": {
                        "amount": 63890.34,
                        "currency": "USD"
                      },
                      "unrealisedGainLossReportingCurrency": {
                        "amount": 0,
                        "currency": "USD"
                      }
                    },
                    {
                      "groupById": 2,
                      "sequenceNumber": 0,
                      "effectiveDate": "2020-06-01T00:00:00.0000000+00:00",
                      "subHoldingKeys": {
                        "Instrument/default/Strategy": {
                          "key": "Instrument/default/Strategy",
                          "value": {
                            "labelValue": "ABC"
                          }
                        }
                      },
                      "type": "Open",
                      "movementName": "",
                      "cashflow": {
                        "amount": 0,
                        "currency": "GBP"
                      },
                      "balance": {
                        "amount": 12738.22,
                        "currency": "GBP"
                      },
                      "fxRate": 1.3145,
                      "cashflowReportingCurrency": {
                        "amount": 0,
                        "currency": "USD"
                      },
                      "balanceReportingCurrency": {
                        "amount": 16744.39,
                        "currency": "USD"
                      },
                      "translationGainLoss": {
                        "amount": 0,
                        "currency": "USD"
                      },
                      "costBasisReportingCurrency": {
                        "amount": 16744.39,
                        "currency": "USD"
                      },
                      "unrealisedGainLossReportingCurrency": {
                        "amount": 0,
                        "currency": "USD"
                      }
                    },
                    {
                      "groupById": 2,
                      "sequenceNumber": 1,
                      "effectiveDate": "2020-06-13T00:00:00.0000000+00:00",
                      "subHoldingKeys": {
                        "Instrument/default/Strategy": {
                          "key": "Instrument/default/Strategy",
                          "value": {
                            "labelValue": "ABC"
                          }
                        }
                      },
                      "type": "Activity",
                      "movementName": "principal",
                      "cashflow": {
                        "amount": 43000,
                        "currency": "GBP"
                      },
                      "balance": {
                        "amount": 30261.78,
                        "currency": "GBP"
                      },
                      "fxRate": 1.2,
                      "cashflowReportingCurrency": {
                        "amount": 51600,
                        "currency": "USD"
                      },
                      "balanceReportingCurrency": {
                        "amount": 36314.14,
                        "currency": "USD"
                      },
                      "translationGainLoss": {
                        "amount": -1458.52619,
                        "currency": "USD"
                      },
                      "costBasisReportingCurrency": {
                        "amount": -36314.14,
                        "currency": "USD"
                      },
                      "transaction": {
                        "transactionId": "tid_124319009950924",
                        "type": "Buy",
                        "instrumentIdentifiers": {},
                        "instrumentScope": "default",
                        "instrumentUid": "LUID_1C7YTL5M",
                        "transactionDate": "2020-06-10T00:00:00.0000000+00:00",
                        "settlementDate": "2020-06-13T00:00:00.0000000+00:00",
                        "units": 1829.79,
                        "transactionPrice": {
                          "price": 23.5,
                          "type": "Price"
                        },
                        "totalConsideration": {
                          "amount": 23.5,
                          "currency": "USD"
                        },
                        "properties": {},
                        "source": "",
                        "entryDateTime": "0001-01-01T00:00:00.0000000+00:00",
                        "transactionStatus": "Active"
                      },
                      "unrealisedGainLossReportingCurrency": {
                        "amount": 0,
                        "currency": "USD"
                      }
                    },
                    {
                      "groupById": 2,
                      "sequenceNumber": 2,
                      "effectiveDate": "2020-06-18T00:00:00.0000000+00:00",
                      "subHoldingKeys": {
                        "Instrument/default/Strategy": {
                          "key": "Instrument/default/Strategy",
                          "value": {
                            "labelValue": "ABC"
                          }
                        }
                      },
                      "type": "Activity",
                      "movementName": "principal",
                      "cashflow": {
                        "amount": 89994.71,
                        "currency": "GBP"
                      },
                      "balance": {
                        "amount": 59732.93,
                        "currency": "GBP"
                      },
                      "fxRate": 1.3,
                      "cashflowReportingCurrency": {
                        "amount": 116993.12,
                        "currency": "USD"
                      },
                      "balanceReportingCurrency": {
                        "amount": 77652.81,
                        "currency": "USD"
                      },
                      "translationGainLoss": {
                        "amount": -3026.178,
                        "currency": "USD"
                      },
                      "costBasisReportingCurrency": {
                        "amount": 77652.81,
                        "currency": "USD"
                      },
                      "transaction": {
                        "transactionId": "tid_121309590059995",
                        "type": "Sell",
                        "instrumentIdentifiers": {},
                        "instrumentScope": "default",
                        "instrumentUid": "LUID_1C7YTL5M",
                        "transactionDate": "2020-06-15T00:00:00.0000000+00:00",
                        "settlementDate": "2020-06-18T00:00:00.0000000+00:00",
                        "units": 3333.14,
                        "transactionPrice": {
                          "price": 27,
                          "type": "Price"
                        },
                        "totalConsideration": {
                          "amount": 27,
                          "currency": "USD"
                        },
                        "properties": {},
                        "source": "",
                        "entryDateTime": "0001-01-01T00:00:00.0000000+00:00",
                        "transactionStatus": "Active"
                      },
                      "unrealisedGainLossReportingCurrency": {
                        "amount": 0,
                        "currency": "USD"
                      }
                    },
                    {
                      "groupById": 2,
                      "sequenceNumber": 3,
                      "effectiveDate": "2020-06-30T00:00:00.0000000+00:00",
                      "subHoldingKeys": {
                        "Instrument/default/Strategy": {
                          "key": "Instrument/default/Strategy",
                          "value": {
                            "labelValue": "ABC"
                          }
                        }
                      },
                      "type": "Closed",
                      "movementName": "",
                      "cashflow": {
                        "amount": 0,
                        "currency": "GBP"
                      },
                      "balance": {
                        "amount": 59732.93,
                        "currency": "GBP"
                      },
                      "fxRate": 1.3244,
                      "cashflowReportingCurrency": {
                        "amount": 0,
                        "currency": "USD"
                      },
                      "balanceReportingCurrency": {
                        "amount": 79110.29,
                        "currency": "USD"
                      },
                      "translationGainLoss": {
                        "amount": 0,
                        "currency": "USD"
                      },
                      "costBasisReportingCurrency": {
                        "amount": 77652.81,
                        "currency": "USD"
                      },
                      "unrealisedGainLossReportingCurrency": {
                        "amount": 0,
                        "currency": "USD"
                      }
                    },
                    {
                      "groupById": 3,
                      "sequenceNumber": 0,
                      "effectiveDate": "2020-06-01T00:00:00.0000000+00:00",
                      "subHoldingKeys": {
                        "Instrument/default/Strategy": {
                          "key": "Instrument/default/Strategy",
                          "value": {
                            "labelValue": "XYZ"
                          }
                        }
                      },
                      "type": "Open",
                      "movementName": "",
                      "cashflow": {
                        "amount": 0,
                        "currency": "USD"
                      },
                      "balance": {
                        "amount": 10000,
                        "currency": "USD"
                      },
                      "fxRate": 1,
                      "cashflowReportingCurrency": {
                        "amount": 0,
                        "currency": "USD"
                      },
                      "balanceReportingCurrency": {
                        "amount": 10000,
                        "currency": "USD"
                      },
                      "translationGainLoss": {
                        "amount": 0,
                        "currency": "USD"
                      },
                      "costBasisReportingCurrency": {
                        "amount": 10000,
                        "currency": "USD"
                      },
                      "unrealisedGainLossReportingCurrency": {
                        "amount": 0,
                        "currency": "USD"
                      }
                    },
                    {
                      "groupById": 3,
                      "sequenceNumber": 1,
                      "effectiveDate": "2020-06-30T00:00:00.0000000+00:00",
                      "subHoldingKeys": {
                        "Instrument/default/Strategy": {
                          "key": "Instrument/default/Strategy",
                          "value": {
                            "labelValue": "XYZ"
                          }
                        }
                      },
                      "type": "Closed",
                      "movementName": "",
                      "cashflow": {
                        "amount": 0,
                        "currency": "USD"
                      },
                      "balance": {
                        "amount": 10000,
                        "currency": "USD"
                      },
                      "fxRate": 1,
                      "cashflowReportingCurrency": {
                        "amount": 0,
                        "currency": "USD"
                      },
                      "balanceReportingCurrency": {
                        "amount": 10000,
                        "currency": "USD"
                      },
                      "translationGainLoss": {
                        "amount": 0,
                        "currency": "USD"
                      },
                      "costBasisReportingCurrency": {
                        "amount": 10000,
                        "currency": "USD"
                      },
                      "unrealisedGainLossReportingCurrency": {
                        "amount": 10000,
                        "currency": "USD"
                      }
                    }
                  ],
                  "links": []
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfPortfolioCashFlow"
                },
                "example": {
                  "values": [
                    {
                      "groupById": 1,
                      "sequenceNumber": 0,
                      "effectiveDate": "2020-06-01T00:00:00.0000000+00:00",
                      "subHoldingKeys": {
                        "Instrument/default/Strategy": {
                          "key": "Instrument/default/Strategy",
                          "value": {
                            "labelValue": "ABC"
                          }
                        }
                      },
                      "type": "Open",
                      "movementName": "",
                      "cashflow": {
                        "amount": 0,
                        "currency": "USD"
                      },
                      "balance": {
                        "amount": 128347,
                        "currency": "USD"
                      },
                      "fxRate": 1,
                      "cashflowReportingCurrency": {
                        "amount": 0,
                        "currency": "USD"
                      },
                      "balanceReportingCurrency": {
                        "amount": 128347,
                        "currency": "USD"
                      },
                      "translationGainLoss": {
                        "amount": 0,
                        "currency": "USD"
                      },
                      "costBasisReportingCurrency": {
                        "amount": 128347,
                        "currency": "USD"
                      },
                      "unrealisedGainLossReportingCurrency": {
                        "amount": 0,
                        "currency": "USD"
                      }
                    },
                    {
                      "groupById": 1,
                      "sequenceNumber": 1,
                      "effectiveDate": "2020-06-13T00:00:00.0000000+00:00",
                      "subHoldingKeys": {
                        "Instrument/default/Strategy": {
                          "key": "Instrument/default/Strategy",
                          "value": {
                            "labelValue": "ABC"
                          }
                        }
                      },
                      "type": "Activity",
                      "movementName": "principal",
                      "cashflow": {
                        "amount": 73494,
                        "currency": "USD"
                      },
                      "balance": {
                        "amount": 54853,
                        "currency": "USD"
                      },
                      "fxRate": 1,
                      "cashflowReportingCurrency": {
                        "amount": 73494,
                        "currency": "USD"
                      },
                      "balanceReportingCurrency": {
                        "amount": 54853,
                        "currency": "USD"
                      },
                      "translationGainLoss": {
                        "amount": 0,
                        "currency": "USD"
                      },
                      "costBasisReportingCurrency": {
                        "amount": 54853,
                        "currency": "USD"
                      },
                      "transaction": {
                        "transactionId": "tid_234942982496001",
                        "type": "Buy",
                        "instrumentIdentifiers": {},
                        "instrumentScope": "default",
                        "instrumentUid": "LUID_1C7YTL5M",
                        "transactionDate": "2020-06-10T00:00:00.0000000+00:00",
                        "settlementDate": "2020-06-13T00:00:00.0000000+00:00",
                        "units": 1517.8,
                        "transactionPrice": {
                          "price": 48.4213,
                          "type": "Price"
                        },
                        "totalConsideration": {
                          "amount": 48.4213,
                          "currency": "USD"
                        },
                        "properties": {},
                        "source": "",
                        "entryDateTime": "0001-01-01T00:00:00.0000000+00:00",
                        "transactionStatus": "Active"
                      },
                      "unrealisedGainLossReportingCurrency": {
                        "amount": 0,
                        "currency": "USD"
                      }
                    },
                    {
                      "groupById": 1,
                      "sequenceNumber": 2,
                      "effectiveDate": "2020-06-14T00:00:00.0000000+00:00",
                      "subHoldingKeys": {
                        "Instrument/default/Strategy": {
                          "key": "Instrument/default/Strategy",
                          "value": {
                            "labelValue": "ABC"
                          }
                        }
                      },
                      "type": "Activity",
                      "movementName": "principal",
                      "cashflow": {
                        "amount": 33731.44,
                        "currency": "USD"
                      },
                      "balance": {
                        "amount": 21121.56,
                        "currency": "USD"
                      },
                      "fxRate": 1,
                      "cashflowReportingCurrency": {
                        "amount": 33731.44,
                        "currency": "USD"
                      },
                      "balanceReportingCurrency": {
                        "amount": 21121.56,
                        "currency": "USD"
                      },
                      "translationGainLoss": {
                        "amount": 0,
                        "currency": "USD"
                      },
                      "costBasisReportingCurrency": {
                        "amount": 21121.56,
                        "currency": "USD"
                      },
                      "transaction": {
                        "transactionId": "tid_234295929052090",
                        "type": "Buy",
                        "instrumentIdentifiers": {},
                        "instrumentScope": "default",
                        "instrumentUid": "LUID_1C7YTL5M",
                        "transactionDate": "2020-06-11T00:00:00.0000000+00:00",
                        "settlementDate": "2020-06-14T00:00:00.0000000+00:00",
                        "units": 696.97,
                        "transactionPrice": {
                          "price": 48.3974,
                          "type": "Price"
                        },
                        "totalConsideration": {
                          "amount": 48.3974,
                          "currency": "USD"
                        },
                        "properties": {},
                        "source": "",
                        "entryDateTime": "0001-01-01T00:00:00.0000000+00:00",
                        "transactionStatus": "Active"
                      },
                      "unrealisedGainLossReportingCurrency": {
                        "amount": 0,
                        "currency": "USD"
                      }
                    },
                    {
                      "groupById": 1,
                      "sequenceNumber": 3,
                      "effectiveDate": "2020-06-15T00:00:00.0000000+00:00",
                      "subHoldingKeys": {
                        "Instrument/default/Strategy": {
                          "key": "Instrument/default/Strategy",
                          "value": {
                            "labelValue": "ABC"
                          }
                        }
                      },
                      "type": "Activity",
                      "movementName": "payment",
                      "cashflow": {
                        "amount": 20.68,
                        "currency": "USD"
                      },
                      "balance": {
                        "amount": 21142.24,
                        "currency": "USD"
                      },
                      "fxRate": 1,
                      "cashflowReportingCurrency": {
                        "amount": 20.68,
                        "currency": "USD"
                      },
                      "balanceReportingCurrency": {
                        "amount": 21142.24,
                        "currency": "USD"
                      },
                      "translationGainLoss": {
                        "amount": 0,
                        "currency": "USD"
                      },
                      "costBasisReportingCurrency": {
                        "amount": 21142.24,
                        "currency": "USD"
                      },
                      "transaction": {
                        "transactionId": "tid_325452342424500",
                        "type": "Dividend",
                        "instrumentIdentifiers": {},
                        "instrumentScope": "default",
                        "instrumentUid": "LUID_1C7YTL5M",
                        "transactionDate": "2020-06-15T00:00:00.0000000+00:00",
                        "settlementDate": "2020-06-15T00:00:00.0000000+00:00",
                        "units": 0,
                        "transactionPrice": {
                          "price": 0,
                          "type": "Price"
                        },
                        "totalConsideration": {
                          "amount": 0,
                          "currency": "USD"
                        },
                        "properties": {},
                        "source": "",
                        "entryDateTime": "0001-01-01T00:00:00.0000000+00:00",
                        "transactionStatus": "Active"
                      },
                      "unrealisedGainLossReportingCurrency": {
                        "amount": 0,
                        "currency": "USD"
                      }
                    },
                    {
                      "groupById": 1,
                      "sequenceNumber": 4,
                      "effectiveDate": "2020-06-20T00:00:00.0000000+00:00",
                      "subHoldingKeys": {
                        "Instrument/default/Strategy": {
                          "key": "Instrument/default/Strategy",
                          "value": {
                            "labelValue": "ABC"
                          }
                        }
                      },
                      "type": "Activity",
                      "movementName": "principal",
                      "cashflow": {
                        "amount": 10374,
                        "currency": "USD"
                      },
                      "balance": {
                        "amount": 31516.24,
                        "currency": "USD"
                      },
                      "fxRate": 1,
                      "cashflowReportingCurrency": {
                        "amount": 10374,
                        "currency": "USD"
                      },
                      "balanceReportingCurrency": {
                        "amount": 31516.24,
                        "currency": "USD"
                      },
                      "translationGainLoss": {
                        "amount": 0,
                        "currency": "USD"
                      },
                      "costBasisReportingCurrency": {
                        "amount": 31516.24,
                        "currency": "USD"
                      },
                      "transaction": {
                        "transactionId": "tid_329432525234324",
                        "type": "Sell",
                        "instrumentIdentifiers": {},
                        "instrumentScope": "default",
                        "instrumentUid": "LUID_1C7YTL5M",
                        "transactionDate": "2020-06-17T00:00:00.0000000+00:00",
                        "settlementDate": "2020-06-20T00:00:00.0000000+00:00",
                        "units": 211.63,
                        "transactionPrice": {
                          "price": 49.0192,
                          "type": "Price"
                        },
                        "totalConsideration": {
                          "amount": 49.0192,
                          "currency": "USD"
                        },
                        "properties": {},
                        "source": "",
                        "entryDateTime": "0001-01-01T00:00:00.0000000+00:00",
                        "transactionStatus": "Active"
                      },
                      "unrealisedGainLossReportingCurrency": {
                        "amount": 0,
                        "currency": "USD"
                      }
                    },
                    {
                      "groupById": 1,
                      "sequenceNumber": 5,
                      "effectiveDate": "2020-06-20T00:00:00.0000000+00:00",
                      "subHoldingKeys": {
                        "Instrument/default/Strategy": {
                          "key": "Instrument/default/Strategy",
                          "value": {
                            "labelValue": "ABC"
                          }
                        }
                      },
                      "type": "Activity",
                      "movementName": "bond accrual",
                      "cashflow": {
                        "amount": 10373,
                        "currency": "USD"
                      },
                      "balance": {
                        "amount": 41889.24,
                        "currency": "USD"
                      },
                      "fxRate": 0,
                      "cashflowReportingCurrency": {
                        "amount": 10373,
                        "currency": "USD"
                      },
                      "balanceReportingCurrency": {
                        "amount": 41889.24,
                        "currency": "USD"
                      },
                      "translationGainLoss": {
                        "amount": -1,
                        "currency": "USD"
                      },
                      "costBasisReportingCurrency": {
                        "amount": 41889.24,
                        "currency": "USD"
                      },
                      "transaction": {
                        "transactionId": "tid_329432525234323",
                        "type": "Sell",
                        "instrumentIdentifiers": {},
                        "instrumentScope": "default",
                        "instrumentUid": "LUID_1C7YTL5M",
                        "transactionDate": "2019-06-17T00:00:00.0000000+00:00",
                        "settlementDate": "2019-06-20T00:00:00.0000000+00:00",
                        "units": 210.63,
                        "transactionPrice": {
                          "price": 48.0192,
                          "type": "Price"
                        },
                        "totalConsideration": {
                          "amount": 48.0192,
                          "currency": "USD"
                        },
                        "properties": {},
                        "source": "",
                        "entryDateTime": "0001-01-01T00:00:00.0000000+00:00",
                        "transactionStatus": "Active"
                      },
                      "unrealisedGainLossReportingCurrency": {
                        "amount": 0,
                        "currency": "USD"
                      }
                    },
                    {
                      "groupById": 1,
                      "sequenceNumber": 6,
                      "effectiveDate": "2020-06-21T00:00:00.0000000+00:00",
                      "subHoldingKeys": {
                        "Instrument/default/Strategy": {
                          "key": "Instrument/default/Strategy",
                          "value": {
                            "labelValue": "ABC"
                          }
                        }
                      },
                      "type": "Activity",
                      "movementName": "principal",
                      "cashflow": {
                        "amount": 8775,
                        "currency": "USD"
                      },
                      "balance": {
                        "amount": 50665.24,
                        "currency": "USD"
                      },
                      "fxRate": 1,
                      "cashflowReportingCurrency": {
                        "amount": 8775,
                        "currency": "USD"
                      },
                      "balanceReportingCurrency": {
                        "amount": 50665.24,
                        "currency": "USD"
                      },
                      "translationGainLoss": {
                        "amount": 0,
                        "currency": "USD"
                      },
                      "costBasisReportingCurrency": {
                        "amount": 50665.24,
                        "currency": "USD"
                      },
                      "transaction": {
                        "transactionId": "tid_124319009950924",
                        "type": "Sell",
                        "instrumentIdentifiers": {},
                        "instrumentScope": "default",
                        "instrumentUid": "LUID_1C7YTL5M",
                        "transactionDate": "2020-06-18T00:00:00.0000000+00:00",
                        "settlementDate": "2020-06-21T00:00:00.0000000+00:00",
                        "units": 179.01,
                        "transactionPrice": {
                          "price": 49.0184,
                          "type": "Price"
                        },
                        "totalConsideration": {
                          "amount": 49.0184,
                          "currency": "USD"
                        },
                        "properties": {},
                        "source": "",
                        "entryDateTime": "0001-01-01T00:00:00.0000000+00:00",
                        "transactionStatus": "Active"
                      },
                      "unrealisedGainLossReportingCurrency": {
                        "amount": 0,
                        "currency": "USD"
                      }
                    },
                    {
                      "groupById": 1,
                      "sequenceNumber": 7,
                      "effectiveDate": "2020-06-21T00:00:00.0000000+00:00",
                      "subHoldingKeys": {
                        "Instrument/default/Strategy": {
                          "key": "Instrument/default/Strategy",
                          "value": {
                            "labelValue": "ABC"
                          }
                        }
                      },
                      "type": "Activity",
                      "movementName": "principal",
                      "cashflow": {
                        "amount": 13225.1,
                        "currency": "USD"
                      },
                      "balance": {
                        "amount": 63890.34,
                        "currency": "USD"
                      },
                      "fxRate": 1,
                      "cashflowReportingCurrency": {
                        "amount": 13225.1,
                        "currency": "USD"
                      },
                      "balanceReportingCurrency": {
                        "amount": 63890.34,
                        "currency": "USD"
                      },
                      "translationGainLoss": {
                        "amount": 0,
                        "currency": "USD"
                      },
                      "costBasisReportingCurrency": {
                        "amount": 63890.34,
                        "currency": "USD"
                      },
                      "transaction": {
                        "transactionId": "tid_121309590059995",
                        "type": "Sell",
                        "instrumentIdentifiers": {},
                        "instrumentScope": "default",
                        "instrumentUid": "LUID_1C7YTL5M",
                        "transactionDate": "2020-06-18T00:00:00.0000000+00:00",
                        "settlementDate": "2020-06-21T00:00:00.0000000+00:00",
                        "units": 269.99,
                        "transactionPrice": {
                          "price": 48.9843,
                          "type": "Price"
                        },
                        "totalConsideration": {
                          "amount": 48.9843,
                          "currency": "USD"
                        },
                        "properties": {},
                        "source": "",
                        "entryDateTime": "0001-01-01T00:00:00.0000000+00:00",
                        "transactionStatus": "Active"
                      },
                      "unrealisedGainLossReportingCurrency": {
                        "amount": 0,
                        "currency": "USD"
                      }
                    },
                    {
                      "groupById": 1,
                      "sequenceNumber": 8,
                      "effectiveDate": "2020-06-30T00:00:00.0000000+00:00",
                      "subHoldingKeys": {
                        "Instrument/default/Strategy": {
                          "key": "Instrument/default/Strategy",
                          "value": {
                            "labelValue": "ABC"
                          }
                        }
                      },
                      "type": "Closed",
                      "movementName": "",
                      "cashflow": {
                        "amount": 0,
                        "currency": "USD"
                      },
                      "balance": {
                        "amount": 63890.34,
                        "currency": "USD"
                      },
                      "fxRate": 1,
                      "cashflowReportingCurrency": {
                        "amount": 0,
                        "currency": "USD"
                      },
                      "balanceReportingCurrency": {
                        "amount": 63890.34,
                        "currency": "USD"
                      },
                      "translationGainLoss": {
                        "amount": 0,
                        "currency": "USD"
                      },
                      "costBasisReportingCurrency": {
                        "amount": 63890.34,
                        "currency": "USD"
                      },
                      "unrealisedGainLossReportingCurrency": {
                        "amount": 0,
                        "currency": "USD"
                      }
                    },
                    {
                      "groupById": 2,
                      "sequenceNumber": 0,
                      "effectiveDate": "2020-06-01T00:00:00.0000000+00:00",
                      "subHoldingKeys": {
                        "Instrument/default/Strategy": {
                          "key": "Instrument/default/Strategy",
                          "value": {
                            "labelValue": "ABC"
                          }
                        }
                      },
                      "type": "Open",
                      "movementName": "",
                      "cashflow": {
                        "amount": 0,
                        "currency": "GBP"
                      },
                      "balance": {
                        "amount": 12738.22,
                        "currency": "GBP"
                      },
                      "fxRate": 1.3145,
                      "cashflowReportingCurrency": {
                        "amount": 0,
                        "currency": "USD"
                      },
                      "balanceReportingCurrency": {
                        "amount": 16744.39,
                        "currency": "USD"
                      },
                      "translationGainLoss": {
                        "amount": 0,
                        "currency": "USD"
                      },
                      "costBasisReportingCurrency": {
                        "amount": 16744.39,
                        "currency": "USD"
                      },
                      "unrealisedGainLossReportingCurrency": {
                        "amount": 0,
                        "currency": "USD"
                      }
                    },
                    {
                      "groupById": 2,
                      "sequenceNumber": 1,
                      "effectiveDate": "2020-06-13T00:00:00.0000000+00:00",
                      "subHoldingKeys": {
                        "Instrument/default/Strategy": {
                          "key": "Instrument/default/Strategy",
                          "value": {
                            "labelValue": "ABC"
                          }
                        }
                      },
                      "type": "Activity",
                      "movementName": "principal",
                      "cashflow": {
                        "amount": 43000,
                        "currency": "GBP"
                      },
                      "balance": {
                        "amount": 30261.78,
                        "currency": "GBP"
                      },
                      "fxRate": 1.2,
                      "cashflowReportingCurrency": {
                        "amount": 51600,
                        "currency": "USD"
                      },
                      "balanceReportingCurrency": {
                        "amount": 36314.14,
                        "currency": "USD"
                      },
                      "translationGainLoss": {
                        "amount": -1458.52619,
                        "currency": "USD"
                      },
                      "costBasisReportingCurrency": {
                        "amount": -36314.14,
                        "currency": "USD"
                      },
                      "transaction": {
                        "transactionId": "tid_124319009950924",
                        "type": "Buy",
                        "instrumentIdentifiers": {},
                        "instrumentScope": "default",
                        "instrumentUid": "LUID_1C7YTL5M",
                        "transactionDate": "2020-06-10T00:00:00.0000000+00:00",
                        "settlementDate": "2020-06-13T00:00:00.0000000+00:00",
                        "units": 1829.79,
                        "transactionPrice": {
                          "price": 23.5,
                          "type": "Price"
                        },
                        "totalConsideration": {
                          "amount": 23.5,
                          "currency": "USD"
                        },
                        "properties": {},
                        "source": "",
                        "entryDateTime": "0001-01-01T00:00:00.0000000+00:00",
                        "transactionStatus": "Active"
                      },
                      "unrealisedGainLossReportingCurrency": {
                        "amount": 0,
                        "currency": "USD"
                      }
                    },
                    {
                      "groupById": 2,
                      "sequenceNumber": 2,
                      "effectiveDate": "2020-06-18T00:00:00.0000000+00:00",
                      "subHoldingKeys": {
                        "Instrument/default/Strategy": {
                          "key": "Instrument/default/Strategy",
                          "value": {
                            "labelValue": "ABC"
                          }
                        }
                      },
                      "type": "Activity",
                      "movementName": "principal",
                      "cashflow": {
                        "amount": 89994.71,
                        "currency": "GBP"
                      },
                      "balance": {
                        "amount": 59732.93,
                        "currency": "GBP"
                      },
                      "fxRate": 1.3,
                      "cashflowReportingCurrency": {
                        "amount": 116993.12,
                        "currency": "USD"
                      },
                      "balanceReportingCurrency": {
                        "amount": 77652.81,
                        "currency": "USD"
                      },
                      "translationGainLoss": {
                        "amount": -3026.178,
                        "currency": "USD"
                      },
                      "costBasisReportingCurrency": {
                        "amount": 77652.81,
                        "currency": "USD"
                      },
                      "transaction": {
                        "transactionId": "tid_121309590059995",
                        "type": "Sell",
                        "instrumentIdentifiers": {},
                        "instrumentScope": "default",
                        "instrumentUid": "LUID_1C7YTL5M",
                        "transactionDate": "2020-06-15T00:00:00.0000000+00:00",
                        "settlementDate": "2020-06-18T00:00:00.0000000+00:00",
                        "units": 3333.14,
                        "transactionPrice": {
                          "price": 27,
                          "type": "Price"
                        },
                        "totalConsideration": {
                          "amount": 27,
                          "currency": "USD"
                        },
                        "properties": {},
                        "source": "",
                        "entryDateTime": "0001-01-01T00:00:00.0000000+00:00",
                        "transactionStatus": "Active"
                      },
                      "unrealisedGainLossReportingCurrency": {
                        "amount": 0,
                        "currency": "USD"
                      }
                    },
                    {
                      "groupById": 2,
                      "sequenceNumber": 3,
                      "effectiveDate": "2020-06-30T00:00:00.0000000+00:00",
                      "subHoldingKeys": {
                        "Instrument/default/Strategy": {
                          "key": "Instrument/default/Strategy",
                          "value": {
                            "labelValue": "ABC"
                          }
                        }
                      },
                      "type": "Closed",
                      "movementName": "",
                      "cashflow": {
                        "amount": 0,
                        "currency": "GBP"
                      },
                      "balance": {
                        "amount": 59732.93,
                        "currency": "GBP"
                      },
                      "fxRate": 1.3244,
                      "cashflowReportingCurrency": {
                        "amount": 0,
                        "currency": "USD"
                      },
                      "balanceReportingCurrency": {
                        "amount": 79110.29,
                        "currency": "USD"
                      },
                      "translationGainLoss": {
                        "amount": 0,
                        "currency": "USD"
                      },
                      "costBasisReportingCurrency": {
                        "amount": 77652.81,
                        "currency": "USD"
                      },
                      "unrealisedGainLossReportingCurrency": {
                        "amount": 0,
                        "currency": "USD"
                      }
                    },
                    {
                      "groupById": 3,
                      "sequenceNumber": 0,
                      "effectiveDate": "2020-06-01T00:00:00.0000000+00:00",
                      "subHoldingKeys": {
                        "Instrument/default/Strategy": {
                          "key": "Instrument/default/Strategy",
                          "value": {
                            "labelValue": "XYZ"
                          }
                        }
                      },
                      "type": "Open",
                      "movementName": "",
                      "cashflow": {
                        "amount": 0,
                        "currency": "USD"
                      },
                      "balance": {
                        "amount": 10000,
                        "currency": "USD"
                      },
                      "fxRate": 1,
                      "cashflowReportingCurrency": {
                        "amount": 0,
                        "currency": "USD"
                      },
                      "balanceReportingCurrency": {
                        "amount": 10000,
                        "currency": "USD"
                      },
                      "translationGainLoss": {
                        "amount": 0,
                        "currency": "USD"
                      },
                      "costBasisReportingCurrency": {
                        "amount": 10000,
                        "currency": "USD"
                      },
                      "unrealisedGainLossReportingCurrency": {
                        "amount": 0,
                        "currency": "USD"
                      }
                    },
                    {
                      "groupById": 3,
                      "sequenceNumber": 1,
                      "effectiveDate": "2020-06-30T00:00:00.0000000+00:00",
                      "subHoldingKeys": {
                        "Instrument/default/Strategy": {
                          "key": "Instrument/default/Strategy",
                          "value": {
                            "labelValue": "XYZ"
                          }
                        }
                      },
                      "type": "Closed",
                      "movementName": "",
                      "cashflow": {
                        "amount": 0,
                        "currency": "USD"
                      },
                      "balance": {
                        "amount": 10000,
                        "currency": "USD"
                      },
                      "fxRate": 1,
                      "cashflowReportingCurrency": {
                        "amount": 0,
                        "currency": "USD"
                      },
                      "balanceReportingCurrency": {
                        "amount": 10000,
                        "currency": "USD"
                      },
                      "translationGainLoss": {
                        "amount": 0,
                        "currency": "USD"
                      },
                      "costBasisReportingCurrency": {
                        "amount": 10000,
                        "currency": "USD"
                      },
                      "unrealisedGainLossReportingCurrency": {
                        "amount": 10000,
                        "currency": "USD"
                      }
                    }
                  ],
                  "links": []
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfPortfolioCashFlow"
                },
                "example": {
                  "values": [
                    {
                      "groupById": 1,
                      "sequenceNumber": 0,
                      "effectiveDate": "2020-06-01T00:00:00.0000000+00:00",
                      "subHoldingKeys": {
                        "Instrument/default/Strategy": {
                          "key": "Instrument/default/Strategy",
                          "value": {
                            "labelValue": "ABC"
                          }
                        }
                      },
                      "type": "Open",
                      "movementName": "",
                      "cashflow": {
                        "amount": 0,
                        "currency": "USD"
                      },
                      "balance": {
                        "amount": 128347,
                        "currency": "USD"
                      },
                      "fxRate": 1,
                      "cashflowReportingCurrency": {
                        "amount": 0,
                        "currency": "USD"
                      },
                      "balanceReportingCurrency": {
                        "amount": 128347,
                        "currency": "USD"
                      },
                      "translationGainLoss": {
                        "amount": 0,
                        "currency": "USD"
                      },
                      "costBasisReportingCurrency": {
                        "amount": 128347,
                        "currency": "USD"
                      },
                      "unrealisedGainLossReportingCurrency": {
                        "amount": 0,
                        "currency": "USD"
                      }
                    },
                    {
                      "groupById": 1,
                      "sequenceNumber": 1,
                      "effectiveDate": "2020-06-13T00:00:00.0000000+00:00",
                      "subHoldingKeys": {
                        "Instrument/default/Strategy": {
                          "key": "Instrument/default/Strategy",
                          "value": {
                            "labelValue": "ABC"
                          }
                        }
                      },
                      "type": "Activity",
                      "movementName": "principal",
                      "cashflow": {
                        "amount": 73494,
                        "currency": "USD"
                      },
                      "balance": {
                        "amount": 54853,
                        "currency": "USD"
                      },
                      "fxRate": 1,
                      "cashflowReportingCurrency": {
                        "amount": 73494,
                        "currency": "USD"
                      },
                      "balanceReportingCurrency": {
                        "amount": 54853,
                        "currency": "USD"
                      },
                      "translationGainLoss": {
                        "amount": 0,
                        "currency": "USD"
                      },
                      "costBasisReportingCurrency": {
                        "amount": 54853,
                        "currency": "USD"
                      },
                      "transaction": {
                        "transactionId": "tid_234942982496001",
                        "type": "Buy",
                        "instrumentIdentifiers": {},
                        "instrumentScope": "default",
                        "instrumentUid": "LUID_1C7YTL5M",
                        "transactionDate": "2020-06-10T00:00:00.0000000+00:00",
                        "settlementDate": "2020-06-13T00:00:00.0000000+00:00",
                        "units": 1517.8,
                        "transactionPrice": {
                          "price": 48.4213,
                          "type": "Price"
                        },
                        "totalConsideration": {
                          "amount": 48.4213,
                          "currency": "USD"
                        },
                        "properties": {},
                        "source": "",
                        "entryDateTime": "0001-01-01T00:00:00.0000000+00:00",
                        "transactionStatus": "Active"
                      },
                      "unrealisedGainLossReportingCurrency": {
                        "amount": 0,
                        "currency": "USD"
                      }
                    },
                    {
                      "groupById": 1,
                      "sequenceNumber": 2,
                      "effectiveDate": "2020-06-14T00:00:00.0000000+00:00",
                      "subHoldingKeys": {
                        "Instrument/default/Strategy": {
                          "key": "Instrument/default/Strategy",
                          "value": {
                            "labelValue": "ABC"
                          }
                        }
                      },
                      "type": "Activity",
                      "movementName": "principal",
                      "cashflow": {
                        "amount": 33731.44,
                        "currency": "USD"
                      },
                      "balance": {
                        "amount": 21121.56,
                        "currency": "USD"
                      },
                      "fxRate": 1,
                      "cashflowReportingCurrency": {
                        "amount": 33731.44,
                        "currency": "USD"
                      },
                      "balanceReportingCurrency": {
                        "amount": 21121.56,
                        "currency": "USD"
                      },
                      "translationGainLoss": {
                        "amount": 0,
                        "currency": "USD"
                      },
                      "costBasisReportingCurrency": {
                        "amount": 21121.56,
                        "currency": "USD"
                      },
                      "transaction": {
                        "transactionId": "tid_234295929052090",
                        "type": "Buy",
                        "instrumentIdentifiers": {},
                        "instrumentScope": "default",
                        "instrumentUid": "LUID_1C7YTL5M",
                        "transactionDate": "2020-06-11T00:00:00.0000000+00:00",
                        "settlementDate": "2020-06-14T00:00:00.0000000+00:00",
                        "units": 696.97,
                        "transactionPrice": {
                          "price": 48.3974,
                          "type": "Price"
                        },
                        "totalConsideration": {
                          "amount": 48.3974,
                          "currency": "USD"
                        },
                        "properties": {},
                        "source": "",
                        "entryDateTime": "0001-01-01T00:00:00.0000000+00:00",
                        "transactionStatus": "Active"
                      },
                      "unrealisedGainLossReportingCurrency": {
                        "amount": 0,
                        "currency": "USD"
                      }
                    },
                    {
                      "groupById": 1,
                      "sequenceNumber": 3,
                      "effectiveDate": "2020-06-15T00:00:00.0000000+00:00",
                      "subHoldingKeys": {
                        "Instrument/default/Strategy": {
                          "key": "Instrument/default/Strategy",
                          "value": {
                            "labelValue": "ABC"
                          }
                        }
                      },
                      "type": "Activity",
                      "movementName": "payment",
                      "cashflow": {
                        "amount": 20.68,
                        "currency": "USD"
                      },
                      "balance": {
                        "amount": 21142.24,
                        "currency": "USD"
                      },
                      "fxRate": 1,
                      "cashflowReportingCurrency": {
                        "amount": 20.68,
                        "currency": "USD"
                      },
                      "balanceReportingCurrency": {
                        "amount": 21142.24,
                        "currency": "USD"
                      },
                      "translationGainLoss": {
                        "amount": 0,
                        "currency": "USD"
                      },
                      "costBasisReportingCurrency": {
                        "amount": 21142.24,
                        "currency": "USD"
                      },
                      "transaction": {
                        "transactionId": "tid_325452342424500",
                        "type": "Dividend",
                        "instrumentIdentifiers": {},
                        "instrumentScope": "default",
                        "instrumentUid": "LUID_1C7YTL5M",
                        "transactionDate": "2020-06-15T00:00:00.0000000+00:00",
                        "settlementDate": "2020-06-15T00:00:00.0000000+00:00",
                        "units": 0,
                        "transactionPrice": {
                          "price": 0,
                          "type": "Price"
                        },
                        "totalConsideration": {
                          "amount": 0,
                          "currency": "USD"
                        },
                        "properties": {},
                        "source": "",
                        "entryDateTime": "0001-01-01T00:00:00.0000000+00:00",
                        "transactionStatus": "Active"
                      },
                      "unrealisedGainLossReportingCurrency": {
                        "amount": 0,
                        "currency": "USD"
                      }
                    },
                    {
                      "groupById": 1,
                      "sequenceNumber": 4,
                      "effectiveDate": "2020-06-20T00:00:00.0000000+00:00",
                      "subHoldingKeys": {
                        "Instrument/default/Strategy": {
                          "key": "Instrument/default/Strategy",
                          "value": {
                            "labelValue": "ABC"
                          }
                        }
                      },
                      "type": "Activity",
                      "movementName": "principal",
                      "cashflow": {
                        "amount": 10374,
                        "currency": "USD"
                      },
                      "balance": {
                        "amount": 31516.24,
                        "currency": "USD"
                      },
                      "fxRate": 1,
                      "cashflowReportingCurrency": {
                        "amount": 10374,
                        "currency": "USD"
                      },
                      "balanceReportingCurrency": {
                        "amount": 31516.24,
                        "currency": "USD"
                      },
                      "translationGainLoss": {
                        "amount": 0,
                        "currency": "USD"
                      },
                      "costBasisReportingCurrency": {
                        "amount": 31516.24,
                        "currency": "USD"
                      },
                      "transaction": {
                        "transactionId": "tid_329432525234324",
                        "type": "Sell",
                        "instrumentIdentifiers": {},
                        "instrumentScope": "default",
                        "instrumentUid": "LUID_1C7YTL5M",
                        "transactionDate": "2020-06-17T00:00:00.0000000+00:00",
                        "settlementDate": "2020-06-20T00:00:00.0000000+00:00",
                        "units": 211.63,
                        "transactionPrice": {
                          "price": 49.0192,
                          "type": "Price"
                        },
                        "totalConsideration": {
                          "amount": 49.0192,
                          "currency": "USD"
                        },
                        "properties": {},
                        "source": "",
                        "entryDateTime": "0001-01-01T00:00:00.0000000+00:00",
                        "transactionStatus": "Active"
                      },
                      "unrealisedGainLossReportingCurrency": {
                        "amount": 0,
                        "currency": "USD"
                      }
                    },
                    {
                      "groupById": 1,
                      "sequenceNumber": 5,
                      "effectiveDate": "2020-06-20T00:00:00.0000000+00:00",
                      "subHoldingKeys": {
                        "Instrument/default/Strategy": {
                          "key": "Instrument/default/Strategy",
                          "value": {
                            "labelValue": "ABC"
                          }
                        }
                      },
                      "type": "Activity",
                      "movementName": "bond accrual",
                      "cashflow": {
                        "amount": 10373,
                        "currency": "USD"
                      },
                      "balance": {
                        "amount": 41889.24,
                        "currency": "USD"
                      },
                      "fxRate": 0,
                      "cashflowReportingCurrency": {
                        "amount": 10373,
                        "currency": "USD"
                      },
                      "balanceReportingCurrency": {
                        "amount": 41889.24,
                        "currency": "USD"
                      },
                      "translationGainLoss": {
                        "amount": -1,
                        "currency": "USD"
                      },
                      "costBasisReportingCurrency": {
                        "amount": 41889.24,
                        "currency": "USD"
                      },
                      "transaction": {
                        "transactionId": "tid_329432525234323",
                        "type": "Sell",
                        "instrumentIdentifiers": {},
                        "instrumentScope": "default",
                        "instrumentUid": "LUID_1C7YTL5M",
                        "transactionDate": "2019-06-17T00:00:00.0000000+00:00",
                        "settlementDate": "2019-06-20T00:00:00.0000000+00:00",
                        "units": 210.63,
                        "transactionPrice": {
                          "price": 48.0192,
                          "type": "Price"
                        },
                        "totalConsideration": {
                          "amount": 48.0192,
                          "currency": "USD"
                        },
                        "properties": {},
                        "source": "",
                        "entryDateTime": "0001-01-01T00:00:00.0000000+00:00",
                        "transactionStatus": "Active"
                      },
                      "unrealisedGainLossReportingCurrency": {
                        "amount": 0,
                        "currency": "USD"
                      }
                    },
                    {
                      "groupById": 1,
                      "sequenceNumber": 6,
                      "effectiveDate": "2020-06-21T00:00:00.0000000+00:00",
                      "subHoldingKeys": {
                        "Instrument/default/Strategy": {
                          "key": "Instrument/default/Strategy",
                          "value": {
                            "labelValue": "ABC"
                          }
                        }
                      },
                      "type": "Activity",
                      "movementName": "principal",
                      "cashflow": {
                        "amount": 8775,
                        "currency": "USD"
                      },
                      "balance": {
                        "amount": 50665.24,
                        "currency": "USD"
                      },
                      "fxRate": 1,
                      "cashflowReportingCurrency": {
                        "amount": 8775,
                        "currency": "USD"
                      },
                      "balanceReportingCurrency": {
                        "amount": 50665.24,
                        "currency": "USD"
                      },
                      "translationGainLoss": {
                        "amount": 0,
                        "currency": "USD"
                      },
                      "costBasisReportingCurrency": {
                        "amount": 50665.24,
                        "currency": "USD"
                      },
                      "transaction": {
                        "transactionId": "tid_124319009950924",
                        "type": "Sell",
                        "instrumentIdentifiers": {},
                        "instrumentScope": "default",
                        "instrumentUid": "LUID_1C7YTL5M",
                        "transactionDate": "2020-06-18T00:00:00.0000000+00:00",
                        "settlementDate": "2020-06-21T00:00:00.0000000+00:00",
                        "units": 179.01,
                        "transactionPrice": {
                          "price": 49.0184,
                          "type": "Price"
                        },
                        "totalConsideration": {
                          "amount": 49.0184,
                          "currency": "USD"
                        },
                        "properties": {},
                        "source": "",
                        "entryDateTime": "0001-01-01T00:00:00.0000000+00:00",
                        "transactionStatus": "Active"
                      },
                      "unrealisedGainLossReportingCurrency": {
                        "amount": 0,
                        "currency": "USD"
                      }
                    },
                    {
                      "groupById": 1,
                      "sequenceNumber": 7,
                      "effectiveDate": "2020-06-21T00:00:00.0000000+00:00",
                      "subHoldingKeys": {
                        "Instrument/default/Strategy": {
                          "key": "Instrument/default/Strategy",
                          "value": {
                            "labelValue": "ABC"
                          }
                        }
                      },
                      "type": "Activity",
                      "movementName": "principal",
                      "cashflow": {
                        "amount": 13225.1,
                        "currency": "USD"
                      },
                      "balance": {
                        "amount": 63890.34,
                        "currency": "USD"
                      },
                      "fxRate": 1,
                      "cashflowReportingCurrency": {
                        "amount": 13225.1,
                        "currency": "USD"
                      },
                      "balanceReportingCurrency": {
                        "amount": 63890.34,
                        "currency": "USD"
                      },
                      "translationGainLoss": {
                        "amount": 0,
                        "currency": "USD"
                      },
                      "costBasisReportingCurrency": {
                        "amount": 63890.34,
                        "currency": "USD"
                      },
                      "transaction": {
                        "transactionId": "tid_121309590059995",
                        "type": "Sell",
                        "instrumentIdentifiers": {},
                        "instrumentScope": "default",
                        "instrumentUid": "LUID_1C7YTL5M",
                        "transactionDate": "2020-06-18T00:00:00.0000000+00:00",
                        "settlementDate": "2020-06-21T00:00:00.0000000+00:00",
                        "units": 269.99,
                        "transactionPrice": {
                          "price": 48.9843,
                          "type": "Price"
                        },
                        "totalConsideration": {
                          "amount": 48.9843,
                          "currency": "USD"
                        },
                        "properties": {},
                        "source": "",
                        "entryDateTime": "0001-01-01T00:00:00.0000000+00:00",
                        "transactionStatus": "Active"
                      },
                      "unrealisedGainLossReportingCurrency": {
                        "amount": 0,
                        "currency": "USD"
                      }
                    },
                    {
                      "groupById": 1,
                      "sequenceNumber": 8,
                      "effectiveDate": "2020-06-30T00:00:00.0000000+00:00",
                      "subHoldingKeys": {
                        "Instrument/default/Strategy": {
                          "key": "Instrument/default/Strategy",
                          "value": {
                            "labelValue": "ABC"
                          }
                        }
                      },
                      "type": "Closed",
                      "movementName": "",
                      "cashflow": {
                        "amount": 0,
                        "currency": "USD"
                      },
                      "balance": {
                        "amount": 63890.34,
                        "currency": "USD"
                      },
                      "fxRate": 1,
                      "cashflowReportingCurrency": {
                        "amount": 0,
                        "currency": "USD"
                      },
                      "balanceReportingCurrency": {
                        "amount": 63890.34,
                        "currency": "USD"
                      },
                      "translationGainLoss": {
                        "amount": 0,
                        "currency": "USD"
                      },
                      "costBasisReportingCurrency": {
                        "amount": 63890.34,
                        "currency": "USD"
                      },
                      "unrealisedGainLossReportingCurrency": {
                        "amount": 0,
                        "currency": "USD"
                      }
                    },
                    {
                      "groupById": 2,
                      "sequenceNumber": 0,
                      "effectiveDate": "2020-06-01T00:00:00.0000000+00:00",
                      "subHoldingKeys": {
                        "Instrument/default/Strategy": {
                          "key": "Instrument/default/Strategy",
                          "value": {
                            "labelValue": "ABC"
                          }
                        }
                      },
                      "type": "Open",
                      "movementName": "",
                      "cashflow": {
                        "amount": 0,
                        "currency": "GBP"
                      },
                      "balance": {
                        "amount": 12738.22,
                        "currency": "GBP"
                      },
                      "fxRate": 1.3145,
                      "cashflowReportingCurrency": {
                        "amount": 0,
                        "currency": "USD"
                      },
                      "balanceReportingCurrency": {
                        "amount": 16744.39,
                        "currency": "USD"
                      },
                      "translationGainLoss": {
                        "amount": 0,
                        "currency": "USD"
                      },
                      "costBasisReportingCurrency": {
                        "amount": 16744.39,
                        "currency": "USD"
                      },
                      "unrealisedGainLossReportingCurrency": {
                        "amount": 0,
                        "currency": "USD"
                      }
                    },
                    {
                      "groupById": 2,
                      "sequenceNumber": 1,
                      "effectiveDate": "2020-06-13T00:00:00.0000000+00:00",
                      "subHoldingKeys": {
                        "Instrument/default/Strategy": {
                          "key": "Instrument/default/Strategy",
                          "value": {
                            "labelValue": "ABC"
                          }
                        }
                      },
                      "type": "Activity",
                      "movementName": "principal",
                      "cashflow": {
                        "amount": 43000,
                        "currency": "GBP"
                      },
                      "balance": {
                        "amount": 30261.78,
                        "currency": "GBP"
                      },
                      "fxRate": 1.2,
                      "cashflowReportingCurrency": {
                        "amount": 51600,
                        "currency": "USD"
                      },
                      "balanceReportingCurrency": {
                        "amount": 36314.14,
                        "currency": "USD"
                      },
                      "translationGainLoss": {
                        "amount": -1458.52619,
                        "currency": "USD"
                      },
                      "costBasisReportingCurrency": {
                        "amount": -36314.14,
                        "currency": "USD"
                      },
                      "transaction": {
                        "transactionId": "tid_124319009950924",
                        "type": "Buy",
                        "instrumentIdentifiers": {},
                        "instrumentScope": "default",
                        "instrumentUid": "LUID_1C7YTL5M",
                        "transactionDate": "2020-06-10T00:00:00.0000000+00:00",
                        "settlementDate": "2020-06-13T00:00:00.0000000+00:00",
                        "units": 1829.79,
                        "transactionPrice": {
                          "price": 23.5,
                          "type": "Price"
                        },
                        "totalConsideration": {
                          "amount": 23.5,
                          "currency": "USD"
                        },
                        "properties": {},
                        "source": "",
                        "entryDateTime": "0001-01-01T00:00:00.0000000+00:00",
                        "transactionStatus": "Active"
                      },
                      "unrealisedGainLossReportingCurrency": {
                        "amount": 0,
                        "currency": "USD"
                      }
                    },
                    {
                      "groupById": 2,
                      "sequenceNumber": 2,
                      "effectiveDate": "2020-06-18T00:00:00.0000000+00:00",
                      "subHoldingKeys": {
                        "Instrument/default/Strategy": {
                          "key": "Instrument/default/Strategy",
                          "value": {
                            "labelValue": "ABC"
                          }
                        }
                      },
                      "type": "Activity",
                      "movementName": "principal",
                      "cashflow": {
                        "amount": 89994.71,
                        "currency": "GBP"
                      },
                      "balance": {
                        "amount": 59732.93,
                        "currency": "GBP"
                      },
                      "fxRate": 1.3,
                      "cashflowReportingCurrency": {
                        "amount": 116993.12,
                        "currency": "USD"
                      },
                      "balanceReportingCurrency": {
                        "amount": 77652.81,
                        "currency": "USD"
                      },
                      "translationGainLoss": {
                        "amount": -3026.178,
                        "currency": "USD"
                      },
                      "costBasisReportingCurrency": {
                        "amount": 77652.81,
                        "currency": "USD"
                      },
                      "transaction": {
                        "transactionId": "tid_121309590059995",
                        "type": "Sell",
                        "instrumentIdentifiers": {},
                        "instrumentScope": "default",
                        "instrumentUid": "LUID_1C7YTL5M",
                        "transactionDate": "2020-06-15T00:00:00.0000000+00:00",
                        "settlementDate": "2020-06-18T00:00:00.0000000+00:00",
                        "units": 3333.14,
                        "transactionPrice": {
                          "price": 27,
                          "type": "Price"
                        },
                        "totalConsideration": {
                          "amount": 27,
                          "currency": "USD"
                        },
                        "properties": {},
                        "source": "",
                        "entryDateTime": "0001-01-01T00:00:00.0000000+00:00",
                        "transactionStatus": "Active"
                      },
                      "unrealisedGainLossReportingCurrency": {
                        "amount": 0,
                        "currency": "USD"
                      }
                    },
                    {
                      "groupById": 2,
                      "sequenceNumber": 3,
                      "effectiveDate": "2020-06-30T00:00:00.0000000+00:00",
                      "subHoldingKeys": {
                        "Instrument/default/Strategy": {
                          "key": "Instrument/default/Strategy",
                          "value": {
                            "labelValue": "ABC"
                          }
                        }
                      },
                      "type": "Closed",
                      "movementName": "",
                      "cashflow": {
                        "amount": 0,
                        "currency": "GBP"
                      },
                      "balance": {
                        "amount": 59732.93,
                        "currency": "GBP"
                      },
                      "fxRate": 1.3244,
                      "cashflowReportingCurrency": {
                        "amount": 0,
                        "currency": "USD"
                      },
                      "balanceReportingCurrency": {
                        "amount": 79110.29,
                        "currency": "USD"
                      },
                      "translationGainLoss": {
                        "amount": 0,
                        "currency": "USD"
                      },
                      "costBasisReportingCurrency": {
                        "amount": 77652.81,
                        "currency": "USD"
                      },
                      "unrealisedGainLossReportingCurrency": {
                        "amount": 0,
                        "currency": "USD"
                      }
                    },
                    {
                      "groupById": 3,
                      "sequenceNumber": 0,
                      "effectiveDate": "2020-06-01T00:00:00.0000000+00:00",
                      "subHoldingKeys": {
                        "Instrument/default/Strategy": {
                          "key": "Instrument/default/Strategy",
                          "value": {
                            "labelValue": "XYZ"
                          }
                        }
                      },
                      "type": "Open",
                      "movementName": "",
                      "cashflow": {
                        "amount": 0,
                        "currency": "USD"
                      },
                      "balance": {
                        "amount": 10000,
                        "currency": "USD"
                      },
                      "fxRate": 1,
                      "cashflowReportingCurrency": {
                        "amount": 0,
                        "currency": "USD"
                      },
                      "balanceReportingCurrency": {
                        "amount": 10000,
                        "currency": "USD"
                      },
                      "translationGainLoss": {
                        "amount": 0,
                        "currency": "USD"
                      },
                      "costBasisReportingCurrency": {
                        "amount": 10000,
                        "currency": "USD"
                      },
                      "unrealisedGainLossReportingCurrency": {
                        "amount": 0,
                        "currency": "USD"
                      }
                    },
                    {
                      "groupById": 3,
                      "sequenceNumber": 1,
                      "effectiveDate": "2020-06-30T00:00:00.0000000+00:00",
                      "subHoldingKeys": {
                        "Instrument/default/Strategy": {
                          "key": "Instrument/default/Strategy",
                          "value": {
                            "labelValue": "XYZ"
                          }
                        }
                      },
                      "type": "Closed",
                      "movementName": "",
                      "cashflow": {
                        "amount": 0,
                        "currency": "USD"
                      },
                      "balance": {
                        "amount": 10000,
                        "currency": "USD"
                      },
                      "fxRate": 1,
                      "cashflowReportingCurrency": {
                        "amount": 0,
                        "currency": "USD"
                      },
                      "balanceReportingCurrency": {
                        "amount": 10000,
                        "currency": "USD"
                      },
                      "translationGainLoss": {
                        "amount": 0,
                        "currency": "USD"
                      },
                      "costBasisReportingCurrency": {
                        "amount": 10000,
                        "currency": "USD"
                      },
                      "unrealisedGainLossReportingCurrency": {
                        "amount": 10000,
                        "currency": "USD"
                      }
                    }
                  ],
                  "links": []
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Stable"
      }
    },
    "/api/transactionportfolios/{scope}/{code}/details": {
      "get": {
        "tags": [
          "Transaction Portfolios"
        ],
        "summary": "GetDetails: Get details",
        "description": "Get certain details associated with a transaction portfolio.",
        "operationId": "GetDetails",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the transaction portfolio.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string"
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The code of the transaction portfolio. Together with the\r\n            scope this uniquely identifies the transaction portfolio.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string"
            }
          },
          {
            "name": "effectiveAt",
            "in": "query",
            "description": "The effective datetime or cut label at which to retrieve the details of the transaction\r\n            portfolio. Defaults to the current LUSID system datetime if not specified.",
            "schema": {
              "type": "string",
              "format": "dateorcutlabel"
            }
          },
          {
            "name": "asAt",
            "in": "query",
            "description": "The asAt datetime at which to retrieve the details of the transaction portfolio. Defaults\r\n            to returning the latest version of the details if not specified.",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "description": "The details of the specified transaction portfolio",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PortfolioDetails"
                },
                "example": {
                  "originPortfolioId": {
                    "scope": "Region",
                    "code": "UK"
                  },
                  "baseCurrency": "GBP",
                  "corporateActionSourceId": {
                    "scope": "Sources",
                    "code": "Vendor1"
                  },
                  "subHoldingKeys": [
                    "Portfolio/Client/AccountType"
                  ],
                  "accountingMethod": "Default"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortfolioDetails"
                },
                "example": {
                  "originPortfolioId": {
                    "scope": "Region",
                    "code": "UK"
                  },
                  "baseCurrency": "GBP",
                  "corporateActionSourceId": {
                    "scope": "Sources",
                    "code": "Vendor1"
                  },
                  "subHoldingKeys": [
                    "Portfolio/Client/AccountType"
                  ],
                  "accountingMethod": "Default"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortfolioDetails"
                },
                "example": {
                  "originPortfolioId": {
                    "scope": "Region",
                    "code": "UK"
                  },
                  "baseCurrency": "GBP",
                  "corporateActionSourceId": {
                    "scope": "Sources",
                    "code": "Vendor1"
                  },
                  "subHoldingKeys": [
                    "Portfolio/Client/AccountType"
                  ],
                  "accountingMethod": "Default"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Stable"
      },
      "post": {
        "tags": [
          "Transaction Portfolios"
        ],
        "summary": "UpsertPortfolioDetails: Upsert portfolio details",
        "description": "Create or update certain details for a particular transaction portfolio. The details are updated if they already exist, and inserted if they do not.\r\n            \r\nNote that not all elements of a transaction portfolio definition are\r\nmodifiable once it has been created due to the potential implications for data already stored.",
        "operationId": "UpsertPortfolioDetails",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the transaction portfolio.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string"
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The code of the transaction portfolio. Together with the\r\n             scope this uniquely identifies the transaction portfolio.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string"
            }
          },
          {
            "name": "effectiveAt",
            "in": "query",
            "description": "The effective datetime or cut label at which the updated or inserted details should become valid.\r\n             Defaults to the current LUSID system datetime if not specified.",
            "schema": {
              "type": "string",
              "format": "dateorcutlabel"
            }
          }
        ],
        "requestBody": {
          "description": "The details to create or update for the specified transaction portfolio.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/CreatePortfolioDetails"
              },
              "example": {
                "corporateActionSourceId": {
                  "scope": "Sources",
                  "code": "Vendor1"
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreatePortfolioDetails"
              },
              "example": {
                "corporateActionSourceId": {
                  "scope": "Sources",
                  "code": "Vendor1"
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/CreatePortfolioDetails"
              },
              "example": {
                "corporateActionSourceId": {
                  "scope": "Sources",
                  "code": "Vendor1"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/CreatePortfolioDetails"
              },
              "example": {
                "corporateActionSourceId": {
                  "scope": "Sources",
                  "code": "Vendor1"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The newly updated or inserted details",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PortfolioDetails"
                },
                "example": {
                  "originPortfolioId": {
                    "scope": "Region",
                    "code": "UK"
                  },
                  "baseCurrency": "GBP",
                  "corporateActionSourceId": {
                    "scope": "Sources",
                    "code": "Vendor1"
                  },
                  "subHoldingKeys": [
                    "Portfolio/Client/AccountType"
                  ],
                  "accountingMethod": "Default"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortfolioDetails"
                },
                "example": {
                  "originPortfolioId": {
                    "scope": "Region",
                    "code": "UK"
                  },
                  "baseCurrency": "GBP",
                  "corporateActionSourceId": {
                    "scope": "Sources",
                    "code": "Vendor1"
                  },
                  "subHoldingKeys": [
                    "Portfolio/Client/AccountType"
                  ],
                  "accountingMethod": "Default"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortfolioDetails"
                },
                "example": {
                  "originPortfolioId": {
                    "scope": "Region",
                    "code": "UK"
                  },
                  "baseCurrency": "GBP",
                  "corporateActionSourceId": {
                    "scope": "Sources",
                    "code": "Vendor1"
                  },
                  "subHoldingKeys": [
                    "Portfolio/Client/AccountType"
                  ],
                  "accountingMethod": "Default"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Stable"
      },
      "patch": {
        "tags": [
          "Transaction Portfolios"
        ],
        "summary": "[EARLY ACCESS] PatchPortfolioDetails: Patch portfolio details",
        "description": "Create or update certain details for a particular transaction portfolio.\r\nThe behaviour is defined by the JSON Patch specification.\r\n            \r\nNote that not all elements of a transaction portfolio definition are\r\nmodifiable once it has been created due to the potential implications for data already stored.\r\nCurrently supported properties are: SubHoldingKeys, BaseCurrency, AmortisationMethod",
        "operationId": "PatchPortfolioDetails",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the transaction portfolio.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string"
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The code of the transaction portfolio. Together with the\r\n             scope this uniquely identifies the transaction portfolio.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string"
            }
          },
          {
            "name": "effectiveAt",
            "in": "query",
            "description": "The effective datetime or cut label at which the updated or inserted details should become valid.\r\n             Defaults to the current LUSID system datetime if not specified.\r\n             Note that this will affect all bitemporal entities in the request, but will not be used for any perpetual entities.",
            "schema": {
              "type": "string",
              "format": "dateorcutlabel"
            }
          }
        ],
        "requestBody": {
          "description": "The patch document.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Operation"
                }
              },
              "example": [
                {
                  "value": [
                    "Transaction/Client/AccountType"
                  ],
                  "path": "/subHoldingKeys",
                  "op": "add"
                },
                {
                  "value": "GBP",
                  "path": "/baseCurrency",
                  "op": "add"
                },
                {
                  "value": "newscope",
                  "path": "/transactiontypescope",
                  "op": "add"
                }
              ]
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Operation"
                }
              },
              "example": [
                {
                  "value": [
                    "Transaction/Client/AccountType"
                  ],
                  "path": "/subHoldingKeys",
                  "op": "add"
                },
                {
                  "value": "GBP",
                  "path": "/baseCurrency",
                  "op": "add"
                },
                {
                  "value": "newscope",
                  "path": "/transactiontypescope",
                  "op": "add"
                }
              ]
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Operation"
                }
              },
              "example": [
                {
                  "value": [
                    "Transaction/Client/AccountType"
                  ],
                  "path": "/subHoldingKeys",
                  "op": "add"
                },
                {
                  "value": "GBP",
                  "path": "/baseCurrency",
                  "op": "add"
                },
                {
                  "value": "newscope",
                  "path": "/transactiontypescope",
                  "op": "add"
                }
              ]
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Operation"
                }
              },
              "example": [
                {
                  "value": [
                    "Transaction/Client/AccountType"
                  ],
                  "path": "/subHoldingKeys",
                  "op": "add"
                },
                {
                  "value": "GBP",
                  "path": "/baseCurrency",
                  "op": "add"
                },
                {
                  "value": "newscope",
                  "path": "/transactiontypescope",
                  "op": "add"
                }
              ]
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The newly patched details",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PortfolioDetails"
                },
                "example": {
                  "originPortfolioId": {
                    "scope": "Region",
                    "code": "UK"
                  },
                  "baseCurrency": "GBP",
                  "corporateActionSourceId": {
                    "scope": "Sources",
                    "code": "Vendor1"
                  },
                  "subHoldingKeys": [
                    "Portfolio/Client/AccountType"
                  ],
                  "accountingMethod": "Default"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortfolioDetails"
                },
                "example": {
                  "originPortfolioId": {
                    "scope": "Region",
                    "code": "UK"
                  },
                  "baseCurrency": "GBP",
                  "corporateActionSourceId": {
                    "scope": "Sources",
                    "code": "Vendor1"
                  },
                  "subHoldingKeys": [
                    "Portfolio/Client/AccountType"
                  ],
                  "accountingMethod": "Default"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortfolioDetails"
                },
                "example": {
                  "originPortfolioId": {
                    "scope": "Region",
                    "code": "UK"
                  },
                  "baseCurrency": "GBP",
                  "corporateActionSourceId": {
                    "scope": "Sources",
                    "code": "Vendor1"
                  },
                  "subHoldingKeys": [
                    "Portfolio/Client/AccountType"
                  ],
                  "accountingMethod": "Default"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      }
    },
    "/api/transactionportfolios/{scope}/{code}/holdings": {
      "put": {
        "tags": [
          "Transaction Portfolios"
        ],
        "summary": "SetHoldings: Set holdings",
        "description": "Set the holdings of the specified transaction portfolio to the provided targets. LUSID will automatically\r\nconstruct adjustment transactions to ensure that the entire set of holdings for the transaction portfolio\r\nare always set to the provided targets for the specified effective datetime. Read more about the difference between\r\nadjusting and setting holdings here https://support.lusid.com/how-do-i-adjust-my-holdings.",
        "operationId": "SetHoldings",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the transaction portfolio.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string"
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The code of the transaction portfolio. Together with the scope this uniquely identifies\r\n            the transaction portfolio.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string"
            }
          },
          {
            "name": "effectiveAt",
            "in": "query",
            "description": "The effective datetime or cut label at which the holdings should be set to the provided targets.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "dateorcutlabel"
            }
          },
          {
            "name": "reconciliationMethods",
            "in": "query",
            "description": "Optional parameter for specifying a reconciliation method: e.g. FxForward.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "x-nullable": true
          }
        ],
        "requestBody": {
          "description": "The complete set of target holdings for the transaction portfolio.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/AdjustHoldingRequest"
                }
              },
              "example": [
                {
                  "instrumentIdentifiers": {
                    "Instrument/default/Figi": "BBG000C6K6G9",
                    "Instrument/default/Isin": "GB00BH4HKS39"
                  },
                  "subHoldingKeys": {
                    "Transaction/Algo/Name": {
                      "key": "Transaction/Algo/Name",
                      "value": {
                        "labelValue": "Algo1"
                      }
                    }
                  },
                  "properties": {
                    "Holding/Entity/Name": {
                      "key": "Holding/Entity/Name",
                      "value": {
                        "labelValue": "Financial Entity"
                      }
                    }
                  },
                  "taxLots": [
                    {
                      "units": 100,
                      "cost": {
                        "amount": 10000,
                        "currency": "GBP"
                      },
                      "portfolioCost": 10000,
                      "price": 100,
                      "purchaseDate": "2018-03-05T00:00:00.0000000+00:00",
                      "settlementDate": "2018-03-08T00:00:00.0000000+00:00"
                    }
                  ],
                  "currency": "GBP"
                }
              ]
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/AdjustHoldingRequest"
                }
              },
              "example": [
                {
                  "instrumentIdentifiers": {
                    "Instrument/default/Figi": "BBG000C6K6G9",
                    "Instrument/default/Isin": "GB00BH4HKS39"
                  },
                  "subHoldingKeys": {
                    "Transaction/Algo/Name": {
                      "key": "Transaction/Algo/Name",
                      "value": {
                        "labelValue": "Algo1"
                      }
                    }
                  },
                  "properties": {
                    "Holding/Entity/Name": {
                      "key": "Holding/Entity/Name",
                      "value": {
                        "labelValue": "Financial Entity"
                      }
                    }
                  },
                  "taxLots": [
                    {
                      "units": 100,
                      "cost": {
                        "amount": 10000,
                        "currency": "GBP"
                      },
                      "portfolioCost": 10000,
                      "price": 100,
                      "purchaseDate": "2018-03-05T00:00:00.0000000+00:00",
                      "settlementDate": "2018-03-08T00:00:00.0000000+00:00"
                    }
                  ],
                  "currency": "GBP"
                }
              ]
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/AdjustHoldingRequest"
                }
              },
              "example": [
                {
                  "instrumentIdentifiers": {
                    "Instrument/default/Figi": "BBG000C6K6G9",
                    "Instrument/default/Isin": "GB00BH4HKS39"
                  },
                  "subHoldingKeys": {
                    "Transaction/Algo/Name": {
                      "key": "Transaction/Algo/Name",
                      "value": {
                        "labelValue": "Algo1"
                      }
                    }
                  },
                  "properties": {
                    "Holding/Entity/Name": {
                      "key": "Holding/Entity/Name",
                      "value": {
                        "labelValue": "Financial Entity"
                      }
                    }
                  },
                  "taxLots": [
                    {
                      "units": 100,
                      "cost": {
                        "amount": 10000,
                        "currency": "GBP"
                      },
                      "portfolioCost": 10000,
                      "price": 100,
                      "purchaseDate": "2018-03-05T00:00:00.0000000+00:00",
                      "settlementDate": "2018-03-08T00:00:00.0000000+00:00"
                    }
                  ],
                  "currency": "GBP"
                }
              ]
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/AdjustHoldingRequest"
                }
              },
              "example": [
                {
                  "instrumentIdentifiers": {
                    "Instrument/default/Figi": "BBG000C6K6G9",
                    "Instrument/default/Isin": "GB00BH4HKS39"
                  },
                  "subHoldingKeys": {
                    "Transaction/Algo/Name": {
                      "key": "Transaction/Algo/Name",
                      "value": {
                        "labelValue": "Algo1"
                      }
                    }
                  },
                  "properties": {
                    "Holding/Entity/Name": {
                      "key": "Holding/Entity/Name",
                      "value": {
                        "labelValue": "Financial Entity"
                      }
                    }
                  },
                  "taxLots": [
                    {
                      "units": 100,
                      "cost": {
                        "amount": 10000,
                        "currency": "GBP"
                      },
                      "portfolioCost": 10000,
                      "price": 100,
                      "purchaseDate": "2018-03-05T00:00:00.0000000+00:00",
                      "settlementDate": "2018-03-08T00:00:00.0000000+00:00"
                    }
                  ],
                  "currency": "GBP"
                }
              ]
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The version of the transaction portfolio that contains the newly set holdings",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/AdjustHolding"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AdjustHolding"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/AdjustHolding"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Stable"
      },
      "post": {
        "tags": [
          "Transaction Portfolios"
        ],
        "summary": "AdjustHoldings: Adjust holdings",
        "description": "Adjust one or more holdings of the specified transaction portfolio to the provided targets. LUSID will\r\nautomatically construct adjustment transactions to ensure that the holdings which have been adjusted are\r\nalways set to the provided targets for the specified effective datetime. Read more about the difference between\r\nadjusting and setting holdings here https://support.lusid.com/how-do-i-adjust-my-holdings.",
        "operationId": "AdjustHoldings",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the transaction portfolio.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string"
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The code of the transaction portfolio. Together with the scope this uniquely identifies\r\n            the transaction portfolio.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string"
            }
          },
          {
            "name": "effectiveAt",
            "in": "query",
            "description": "The effective datetime or cut label at which the holdings should be set to the provided targets.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "dateorcutlabel"
            }
          },
          {
            "name": "reconciliationMethods",
            "in": "query",
            "description": "Optional parameter for specifying a reconciliation method: e.g. FxForward.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "x-nullable": true
          }
        ],
        "requestBody": {
          "description": "The selected set of holdings to adjust to the provided targets for the\r\n            transaction portfolio.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/AdjustHoldingRequest"
                }
              },
              "example": [
                {
                  "instrumentIdentifiers": {
                    "Instrument/default/Figi": "BBG000C6K6G9",
                    "Instrument/default/Isin": "GB00BH4HKS39"
                  },
                  "subHoldingKeys": {
                    "Transaction/Algo/Name": {
                      "key": "Transaction/Algo/Name",
                      "value": {
                        "labelValue": "Algo1"
                      }
                    }
                  },
                  "properties": {
                    "Holding/Entity/Name": {
                      "key": "Holding/Entity/Name",
                      "value": {
                        "labelValue": "Financial Entity"
                      }
                    }
                  },
                  "taxLots": [
                    {
                      "units": 100,
                      "cost": {
                        "amount": 10000,
                        "currency": "GBP"
                      },
                      "portfolioCost": 10000,
                      "price": 100,
                      "purchaseDate": "2018-03-05T00:00:00.0000000+00:00",
                      "settlementDate": "2018-03-08T00:00:00.0000000+00:00"
                    }
                  ],
                  "currency": "GBP"
                }
              ]
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/AdjustHoldingRequest"
                }
              },
              "example": [
                {
                  "instrumentIdentifiers": {
                    "Instrument/default/Figi": "BBG000C6K6G9",
                    "Instrument/default/Isin": "GB00BH4HKS39"
                  },
                  "subHoldingKeys": {
                    "Transaction/Algo/Name": {
                      "key": "Transaction/Algo/Name",
                      "value": {
                        "labelValue": "Algo1"
                      }
                    }
                  },
                  "properties": {
                    "Holding/Entity/Name": {
                      "key": "Holding/Entity/Name",
                      "value": {
                        "labelValue": "Financial Entity"
                      }
                    }
                  },
                  "taxLots": [
                    {
                      "units": 100,
                      "cost": {
                        "amount": 10000,
                        "currency": "GBP"
                      },
                      "portfolioCost": 10000,
                      "price": 100,
                      "purchaseDate": "2018-03-05T00:00:00.0000000+00:00",
                      "settlementDate": "2018-03-08T00:00:00.0000000+00:00"
                    }
                  ],
                  "currency": "GBP"
                }
              ]
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/AdjustHoldingRequest"
                }
              },
              "example": [
                {
                  "instrumentIdentifiers": {
                    "Instrument/default/Figi": "BBG000C6K6G9",
                    "Instrument/default/Isin": "GB00BH4HKS39"
                  },
                  "subHoldingKeys": {
                    "Transaction/Algo/Name": {
                      "key": "Transaction/Algo/Name",
                      "value": {
                        "labelValue": "Algo1"
                      }
                    }
                  },
                  "properties": {
                    "Holding/Entity/Name": {
                      "key": "Holding/Entity/Name",
                      "value": {
                        "labelValue": "Financial Entity"
                      }
                    }
                  },
                  "taxLots": [
                    {
                      "units": 100,
                      "cost": {
                        "amount": 10000,
                        "currency": "GBP"
                      },
                      "portfolioCost": 10000,
                      "price": 100,
                      "purchaseDate": "2018-03-05T00:00:00.0000000+00:00",
                      "settlementDate": "2018-03-08T00:00:00.0000000+00:00"
                    }
                  ],
                  "currency": "GBP"
                }
              ]
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/AdjustHoldingRequest"
                }
              },
              "example": [
                {
                  "instrumentIdentifiers": {
                    "Instrument/default/Figi": "BBG000C6K6G9",
                    "Instrument/default/Isin": "GB00BH4HKS39"
                  },
                  "subHoldingKeys": {
                    "Transaction/Algo/Name": {
                      "key": "Transaction/Algo/Name",
                      "value": {
                        "labelValue": "Algo1"
                      }
                    }
                  },
                  "properties": {
                    "Holding/Entity/Name": {
                      "key": "Holding/Entity/Name",
                      "value": {
                        "labelValue": "Financial Entity"
                      }
                    }
                  },
                  "taxLots": [
                    {
                      "units": 100,
                      "cost": {
                        "amount": 10000,
                        "currency": "GBP"
                      },
                      "portfolioCost": 10000,
                      "price": 100,
                      "purchaseDate": "2018-03-05T00:00:00.0000000+00:00",
                      "settlementDate": "2018-03-08T00:00:00.0000000+00:00"
                    }
                  ],
                  "currency": "GBP"
                }
              ]
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The version of the transaction portfolio that contains the newly adjusted holdings",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/AdjustHolding"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AdjustHolding"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/AdjustHolding"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Stable"
      },
      "delete": {
        "tags": [
          "Transaction Portfolios"
        ],
        "summary": "CancelAdjustHoldings: Cancel adjust holdings",
        "description": "Cancel all previous holding adjustments made on the specified transaction portfolio for a specified effective\r\ndatetime. This should be used to undo holding adjustments made via set holdings or adjust holdings.",
        "operationId": "CancelAdjustHoldings",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the transaction portfolio.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string"
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The code of the transaction portfolio. Together with the scope this uniquely identifies\r\n            the transaction portfolio.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string"
            }
          },
          {
            "name": "effectiveAt",
            "in": "query",
            "description": "The effective datetime or cut label at which the holding adjustments should be undone.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "dateorcutlabel"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The datetime that the holding adjustments were cancelled",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedEntityResponse"
                },
                "example": {
                  "asAt": "2018-03-05T10:10:10.0000000+00:00"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedEntityResponse"
                },
                "example": {
                  "asAt": "2018-03-05T10:10:10.0000000+00:00"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedEntityResponse"
                },
                "example": {
                  "asAt": "2018-03-05T10:10:10.0000000+00:00"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Stable"
      },
      "get": {
        "tags": [
          "Transaction Portfolios"
        ],
        "summary": "GetHoldings: Get holdings",
        "description": "Calculate holdings for a transaction portfolio.",
        "operationId": "GetHoldings",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the transaction portfolio.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string"
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The code of the transaction portfolio. Together with the scope this uniquely identifies\r\n            the transaction portfolio.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string"
            }
          },
          {
            "name": "effectiveAt",
            "in": "query",
            "description": "The effective datetime or cut label at which to retrieve the holdings of the transaction\r\n            portfolio. Defaults to the current LUSID system datetime if not specified.",
            "schema": {
              "type": "string",
              "format": "dateorcutlabel"
            }
          },
          {
            "name": "asAt",
            "in": "query",
            "description": "The asAt datetime at which to retrieve the holdings of the transaction portfolio. Defaults\r\n            to return the latest version if not specified.",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "x-nullable": true
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Expression to filter the result set.\r\n            For example, to filter on the Holding Type, use \"holdingType eq 'p'\".\r\n            For more information about filtering LUSID results, see https://support.lusid.com/knowledgebase/article/KA-01914.",
            "schema": {
              "maxLength": 16384,
              "minLength": 0,
              "pattern": "^[\\s\\S]*$",
              "type": "string"
            }
          },
          {
            "name": "propertyKeys",
            "in": "query",
            "description": "A list of property keys from the \"Instrument\", \"Holding\", \"Custodian Account\" or \"Portfolio\" domain to decorate onto\r\n            holdings. These must have the format {domain}/{scope}/{code}, for example \"Instrument/system/Name\" or \"Holding/system/Cost\".",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "description": "The key that uniquely identifies the property. It has the format {domain}/{scope}/{code}."
              }
            },
            "x-nullable": true
          },
          {
            "name": "byTaxlots",
            "in": "query",
            "description": "Whether or not to expand the holdings to return the underlying tax-lots. Defaults to\r\n            False.",
            "schema": {
              "type": "boolean"
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "description": "The holdings and version of the specified transaction portfolio",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/VersionedResourceListOfPortfolioHolding"
                },
                "example": {
                  "version": {
                    "effectiveFrom": "2019-03-05T12:00:00.0000000+00:00",
                    "asAtDate": "2019-03-05T12:00:00.0000000+00:00"
                  },
                  "values": [
                    {
                      "instrumentScope": "default",
                      "instrumentUid": "LUID_XH4GNUEX",
                      "subHoldingKeys": {
                        "Transaction/Algo/Name": {
                          "key": "Transaction/Algo/Name",
                          "value": {
                            "labelValue": "Algo1"
                          }
                        }
                      },
                      "properties": {
                        "Instrument/default/Name": {
                          "key": "Instrument/default/Name",
                          "value": {
                            "labelValue": "Example Instrument 1"
                          },
                          "effectiveFrom": "2010-01-01T00:00:00.0000000+00:00"
                        }
                      },
                      "holdingType": "P",
                      "units": 10,
                      "settledUnits": 10,
                      "cost": {
                        "amount": 2.5,
                        "currency": "GBP"
                      },
                      "costPortfolioCcy": {
                        "amount": 2.5,
                        "currency": "GBP"
                      },
                      "currency": "ZZZ",
                      "holdingTypeName": "Position"
                    }
                  ],
                  "links": []
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VersionedResourceListOfPortfolioHolding"
                },
                "example": {
                  "version": {
                    "effectiveFrom": "2019-03-05T12:00:00.0000000+00:00",
                    "asAtDate": "2019-03-05T12:00:00.0000000+00:00"
                  },
                  "values": [
                    {
                      "instrumentScope": "default",
                      "instrumentUid": "LUID_XH4GNUEX",
                      "subHoldingKeys": {
                        "Transaction/Algo/Name": {
                          "key": "Transaction/Algo/Name",
                          "value": {
                            "labelValue": "Algo1"
                          }
                        }
                      },
                      "properties": {
                        "Instrument/default/Name": {
                          "key": "Instrument/default/Name",
                          "value": {
                            "labelValue": "Example Instrument 1"
                          },
                          "effectiveFrom": "2010-01-01T00:00:00.0000000+00:00"
                        }
                      },
                      "holdingType": "P",
                      "units": 10,
                      "settledUnits": 10,
                      "cost": {
                        "amount": 2.5,
                        "currency": "GBP"
                      },
                      "costPortfolioCcy": {
                        "amount": 2.5,
                        "currency": "GBP"
                      },
                      "currency": "ZZZ",
                      "holdingTypeName": "Position"
                    }
                  ],
                  "links": []
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/VersionedResourceListOfPortfolioHolding"
                },
                "example": {
                  "version": {
                    "effectiveFrom": "2019-03-05T12:00:00.0000000+00:00",
                    "asAtDate": "2019-03-05T12:00:00.0000000+00:00"
                  },
                  "values": [
                    {
                      "instrumentScope": "default",
                      "instrumentUid": "LUID_XH4GNUEX",
                      "subHoldingKeys": {
                        "Transaction/Algo/Name": {
                          "key": "Transaction/Algo/Name",
                          "value": {
                            "labelValue": "Algo1"
                          }
                        }
                      },
                      "properties": {
                        "Instrument/default/Name": {
                          "key": "Instrument/default/Name",
                          "value": {
                            "labelValue": "Example Instrument 1"
                          },
                          "effectiveFrom": "2010-01-01T00:00:00.0000000+00:00"
                        }
                      },
                      "holdingType": "P",
                      "units": 10,
                      "settledUnits": 10,
                      "cost": {
                        "amount": 2.5,
                        "currency": "GBP"
                      },
                      "costPortfolioCcy": {
                        "amount": 2.5,
                        "currency": "GBP"
                      },
                      "currency": "ZZZ",
                      "holdingTypeName": "Position"
                    }
                  ],
                  "links": []
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Stable"
      }
    },
    "/api/transactionportfolios/{scope}/{code}/holdings/$batchAdjust": {
      "post": {
        "tags": [
          "Transaction Portfolios"
        ],
        "summary": "[EARLY ACCESS] BatchAdjustHoldings: Batch adjust holdings",
        "description": "Adjust one or more holdings of the specified transaction portfolio to the provided targets. LUSID will\r\nautomatically construct adjustment transactions to ensure that the holdings which have been adjusted are\r\nalways set to the provided targets for the specified effective datetime in each request.\r\n            \r\nEach request must be keyed by a unique correlation id. This id is ephemeral and is not stored by LUSID.\r\nIt serves only as a way to easily identify each adjustment in the response.\r\n\r\nNote: If using partial failure modes, then it is important to check the response body for failures as any failures will still return a 200 status code",
        "operationId": "BatchAdjustHoldings",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the transaction portfolio.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string"
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The code of the transaction portfolio. Together with the scope this uniquely identifies\r\n             the transaction portfolio.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string"
            }
          },
          {
            "name": "successMode",
            "in": "query",
            "description": "Whether the batch request should fail Atomically or in a Partial fashion - Allowed Values: Atomic, Partial",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "type": "string",
              "default": "Partial"
            }
          },
          {
            "name": "reconciliationMethods",
            "in": "query",
            "description": "Optional parameter for specifying a reconciliation method: e.g. FxForward.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "x-nullable": true
          }
        ],
        "requestBody": {
          "description": "The selected set of holdings to adjust to the provided targets for the\r\n             transaction portfolio.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/components/schemas/AdjustHoldingForDateRequest"
                }
              },
              "example": {
                "AdjustHoldingRequest1": {
                  "effectiveAt": "2018-03-05T00:00:00.0000000+00:00",
                  "instrumentIdentifiers": {
                    "Instrument/default/Figi": "BBG000C6K6G9",
                    "Instrument/default/Isin": "GB00BH4HKS39"
                  },
                  "subHoldingKeys": {
                    "Transaction/Algo/Name": {
                      "key": "Transaction/Algo/Name",
                      "value": {
                        "labelValue": "Algo1"
                      }
                    }
                  },
                  "properties": {
                    "Holding/Entity/Name": {
                      "key": "Holding/Entity/Name",
                      "value": {
                        "labelValue": "Financial Entity"
                      }
                    }
                  },
                  "taxLots": [
                    {
                      "units": 100,
                      "cost": {
                        "amount": 10000,
                        "currency": "GBP"
                      },
                      "portfolioCost": 10000,
                      "price": 100,
                      "purchaseDate": "2018-03-05T00:00:00.0000000+00:00",
                      "settlementDate": "2018-03-08T00:00:00.0000000+00:00"
                    }
                  ],
                  "currency": "GBP"
                },
                "AdjustHoldingRequest2": {
                  "effectiveAt": "2019-10-02T00:00:00.0000000+00:00",
                  "instrumentIdentifiers": {
                    "Instrument/default/Figi": "CCG000C6K6G9",
                    "Instrument/default/Isin": "US00BH4HKS39"
                  },
                  "subHoldingKeys": {
                    "Transaction/Algo/Name": {
                      "key": "Transaction/Algo/Name",
                      "value": {
                        "labelValue": "Algo1"
                      }
                    }
                  },
                  "properties": {
                    "Holding/Entity/Name": {
                      "key": "Holding/Entity/Name",
                      "value": {
                        "labelValue": "Financial Entity"
                      }
                    }
                  },
                  "taxLots": [
                    {
                      "units": 50,
                      "cost": {
                        "amount": 500,
                        "currency": "USD"
                      },
                      "portfolioCost": 500,
                      "price": 50,
                      "purchaseDate": "2019-03-05T00:00:00.0000000+00:00",
                      "settlementDate": "2019-03-08T00:00:00.0000000+00:00"
                    }
                  ],
                  "currency": "GBP"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/components/schemas/AdjustHoldingForDateRequest"
                }
              },
              "example": {
                "AdjustHoldingRequest1": {
                  "effectiveAt": "2018-03-05T00:00:00.0000000+00:00",
                  "instrumentIdentifiers": {
                    "Instrument/default/Figi": "BBG000C6K6G9",
                    "Instrument/default/Isin": "GB00BH4HKS39"
                  },
                  "subHoldingKeys": {
                    "Transaction/Algo/Name": {
                      "key": "Transaction/Algo/Name",
                      "value": {
                        "labelValue": "Algo1"
                      }
                    }
                  },
                  "properties": {
                    "Holding/Entity/Name": {
                      "key": "Holding/Entity/Name",
                      "value": {
                        "labelValue": "Financial Entity"
                      }
                    }
                  },
                  "taxLots": [
                    {
                      "units": 100,
                      "cost": {
                        "amount": 10000,
                        "currency": "GBP"
                      },
                      "portfolioCost": 10000,
                      "price": 100,
                      "purchaseDate": "2018-03-05T00:00:00.0000000+00:00",
                      "settlementDate": "2018-03-08T00:00:00.0000000+00:00"
                    }
                  ],
                  "currency": "GBP"
                },
                "AdjustHoldingRequest2": {
                  "effectiveAt": "2019-10-02T00:00:00.0000000+00:00",
                  "instrumentIdentifiers": {
                    "Instrument/default/Figi": "CCG000C6K6G9",
                    "Instrument/default/Isin": "US00BH4HKS39"
                  },
                  "subHoldingKeys": {
                    "Transaction/Algo/Name": {
                      "key": "Transaction/Algo/Name",
                      "value": {
                        "labelValue": "Algo1"
                      }
                    }
                  },
                  "properties": {
                    "Holding/Entity/Name": {
                      "key": "Holding/Entity/Name",
                      "value": {
                        "labelValue": "Financial Entity"
                      }
                    }
                  },
                  "taxLots": [
                    {
                      "units": 50,
                      "cost": {
                        "amount": 500,
                        "currency": "USD"
                      },
                      "portfolioCost": 500,
                      "price": 50,
                      "purchaseDate": "2019-03-05T00:00:00.0000000+00:00",
                      "settlementDate": "2019-03-08T00:00:00.0000000+00:00"
                    }
                  ],
                  "currency": "GBP"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/components/schemas/AdjustHoldingForDateRequest"
                }
              },
              "example": {
                "AdjustHoldingRequest1": {
                  "effectiveAt": "2018-03-05T00:00:00.0000000+00:00",
                  "instrumentIdentifiers": {
                    "Instrument/default/Figi": "BBG000C6K6G9",
                    "Instrument/default/Isin": "GB00BH4HKS39"
                  },
                  "subHoldingKeys": {
                    "Transaction/Algo/Name": {
                      "key": "Transaction/Algo/Name",
                      "value": {
                        "labelValue": "Algo1"
                      }
                    }
                  },
                  "properties": {
                    "Holding/Entity/Name": {
                      "key": "Holding/Entity/Name",
                      "value": {
                        "labelValue": "Financial Entity"
                      }
                    }
                  },
                  "taxLots": [
                    {
                      "units": 100,
                      "cost": {
                        "amount": 10000,
                        "currency": "GBP"
                      },
                      "portfolioCost": 10000,
                      "price": 100,
                      "purchaseDate": "2018-03-05T00:00:00.0000000+00:00",
                      "settlementDate": "2018-03-08T00:00:00.0000000+00:00"
                    }
                  ],
                  "currency": "GBP"
                },
                "AdjustHoldingRequest2": {
                  "effectiveAt": "2019-10-02T00:00:00.0000000+00:00",
                  "instrumentIdentifiers": {
                    "Instrument/default/Figi": "CCG000C6K6G9",
                    "Instrument/default/Isin": "US00BH4HKS39"
                  },
                  "subHoldingKeys": {
                    "Transaction/Algo/Name": {
                      "key": "Transaction/Algo/Name",
                      "value": {
                        "labelValue": "Algo1"
                      }
                    }
                  },
                  "properties": {
                    "Holding/Entity/Name": {
                      "key": "Holding/Entity/Name",
                      "value": {
                        "labelValue": "Financial Entity"
                      }
                    }
                  },
                  "taxLots": [
                    {
                      "units": 50,
                      "cost": {
                        "amount": 500,
                        "currency": "USD"
                      },
                      "portfolioCost": 500,
                      "price": 50,
                      "purchaseDate": "2019-03-05T00:00:00.0000000+00:00",
                      "settlementDate": "2019-03-08T00:00:00.0000000+00:00"
                    }
                  ],
                  "currency": "GBP"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/components/schemas/AdjustHoldingForDateRequest"
                }
              },
              "example": {
                "AdjustHoldingRequest1": {
                  "effectiveAt": "2018-03-05T00:00:00.0000000+00:00",
                  "instrumentIdentifiers": {
                    "Instrument/default/Figi": "BBG000C6K6G9",
                    "Instrument/default/Isin": "GB00BH4HKS39"
                  },
                  "subHoldingKeys": {
                    "Transaction/Algo/Name": {
                      "key": "Transaction/Algo/Name",
                      "value": {
                        "labelValue": "Algo1"
                      }
                    }
                  },
                  "properties": {
                    "Holding/Entity/Name": {
                      "key": "Holding/Entity/Name",
                      "value": {
                        "labelValue": "Financial Entity"
                      }
                    }
                  },
                  "taxLots": [
                    {
                      "units": 100,
                      "cost": {
                        "amount": 10000,
                        "currency": "GBP"
                      },
                      "portfolioCost": 10000,
                      "price": 100,
                      "purchaseDate": "2018-03-05T00:00:00.0000000+00:00",
                      "settlementDate": "2018-03-08T00:00:00.0000000+00:00"
                    }
                  ],
                  "currency": "GBP"
                },
                "AdjustHoldingRequest2": {
                  "effectiveAt": "2019-10-02T00:00:00.0000000+00:00",
                  "instrumentIdentifiers": {
                    "Instrument/default/Figi": "CCG000C6K6G9",
                    "Instrument/default/Isin": "US00BH4HKS39"
                  },
                  "subHoldingKeys": {
                    "Transaction/Algo/Name": {
                      "key": "Transaction/Algo/Name",
                      "value": {
                        "labelValue": "Algo1"
                      }
                    }
                  },
                  "properties": {
                    "Holding/Entity/Name": {
                      "key": "Holding/Entity/Name",
                      "value": {
                        "labelValue": "Financial Entity"
                      }
                    }
                  },
                  "taxLots": [
                    {
                      "units": 50,
                      "cost": {
                        "amount": 500,
                        "currency": "USD"
                      },
                      "portfolioCost": 500,
                      "price": 50,
                      "purchaseDate": "2019-03-05T00:00:00.0000000+00:00",
                      "settlementDate": "2019-03-08T00:00:00.0000000+00:00"
                    }
                  ],
                  "currency": "GBP"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The successful AdjustHolding requests along with any failures",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/BatchAdjustHoldingsResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BatchAdjustHoldingsResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/BatchAdjustHoldingsResponse"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      }
    },
    "/api/transactionportfolios/{scope}/{code}/holdingsadjustments": {
      "get": {
        "tags": [
          "Transaction Portfolios"
        ],
        "summary": "ListHoldingsAdjustments: List holdings adjustments",
        "description": "List the holdings adjustments made to the specified transaction portfolio over a specified interval of effective time.",
        "operationId": "ListHoldingsAdjustments",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the transaction portfolio.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string"
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The code of the transaction portfolio. Together with the scope this uniquely identifies\r\n            the transaction portfolio.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string"
            }
          },
          {
            "name": "fromEffectiveAt",
            "in": "query",
            "description": "The lower bound effective datetime or cut label (inclusive) from which to retrieve the holdings\r\n            adjustments. There is no lower bound if this is not specified.",
            "schema": {
              "type": "string",
              "format": "dateorcutlabel"
            }
          },
          {
            "name": "toEffectiveAt",
            "in": "query",
            "description": "The upper bound effective datetime or cut label (inclusive) from which to retrieve the holdings\r\n            adjustments. There is no upper bound if this is not specified.",
            "schema": {
              "type": "string",
              "format": "dateorcutlabel"
            }
          },
          {
            "name": "asAt",
            "in": "query",
            "description": "The asAt datetime at which to retrieve the holdings adjustments. Defaults to return the\r\n            latest version of each holding adjustment if not specified.",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "description": "The record of holdings adjustments made to the specified transaction portfolio",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfHoldingsAdjustmentHeader"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfHoldingsAdjustmentHeader"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfHoldingsAdjustmentHeader"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Stable"
      }
    },
    "/api/transactionportfolios/{scope}/{code}/holdingsadjustments/{effectiveAt}": {
      "get": {
        "tags": [
          "Transaction Portfolios"
        ],
        "summary": "GetHoldingsAdjustment: Get holdings adjustment",
        "description": "Get a holdings adjustment made to a transaction portfolio at a specific effective datetime. Note that a\r\nholdings adjustment will only be returned if one exists for the specified effective datetime.",
        "operationId": "GetHoldingsAdjustment",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the transaction portfolio.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string"
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The code of the transaction portfolio. Together with the scope this uniquely identifies\r\n            the transaction portfolio.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string"
            }
          },
          {
            "name": "effectiveAt",
            "in": "path",
            "description": "The effective datetime or cut label of the holdings adjustment.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "dateorcutlabel"
            }
          },
          {
            "name": "asAt",
            "in": "query",
            "description": "The asAt datetime at which to retrieve the holdings adjustment. Defaults to the return the latest\r\n            version of the holdings adjustment if not specified.",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "x-nullable": true
          },
          {
            "name": "propertyKeys",
            "in": "query",
            "description": "A list of property keys from the ‘Instrument' domain to decorate onto holdings adjustments.\r\n            These must have the format {domain}/{scope}/{code}, for example 'Instrument/system/Name'.\r\n            Note that properties from the 'Holding’ domain are automatically returned.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "description": "The key that uniquely identifies the property. It has the format {domain}/{scope}/{code}."
              }
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "description": "The details of the requested holdings adjustment",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/HoldingsAdjustment"
                },
                "example": {
                  "value": {
                    "effectiveAt": "0001-01-01T00:00:00.0000000+00:00",
                    "version": {
                      "effectiveFrom": "2019-03-05T00:00:00.0000000+00:00",
                      "asAtDate": "2019-03-08T00:00:00.0000000+00:00"
                    },
                    "unmatchedHoldingMethod": "KeepTheSame",
                    "adjustments": [
                      {
                        "instrumentIdentifiers": {
                          "Instrument/default/ClientInternal": "CLI-192836"
                        },
                        "instrumentScope": "default",
                        "instrumentUid": "LUID_GNMKYXXK",
                        "subHoldingKeys": {},
                        "properties": {},
                        "taxLots": [
                          {
                            "units": 10,
                            "cost": {
                              "amount": 120,
                              "currency": "GBP"
                            }
                          }
                        ],
                        "currency": "ZZZ"
                      },
                      {
                        "instrumentIdentifiers": {
                          "Instrument/default/ClientInternal": "CLI-462810"
                        },
                        "instrumentScope": "default",
                        "instrumentUid": "LUID_LE9E5SJE",
                        "subHoldingKeys": {},
                        "properties": {},
                        "taxLots": [
                          {
                            "units": 10,
                            "cost": {
                              "amount": 120,
                              "currency": "GBP"
                            }
                          }
                        ],
                        "currency": "ZZZ"
                      }
                    ]
                  }
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HoldingsAdjustment"
                },
                "example": {
                  "value": {
                    "effectiveAt": "0001-01-01T00:00:00.0000000+00:00",
                    "version": {
                      "effectiveFrom": "2019-03-05T00:00:00.0000000+00:00",
                      "asAtDate": "2019-03-08T00:00:00.0000000+00:00"
                    },
                    "unmatchedHoldingMethod": "KeepTheSame",
                    "adjustments": [
                      {
                        "instrumentIdentifiers": {
                          "Instrument/default/ClientInternal": "CLI-192836"
                        },
                        "instrumentScope": "default",
                        "instrumentUid": "LUID_GNMKYXXK",
                        "subHoldingKeys": {},
                        "properties": {},
                        "taxLots": [
                          {
                            "units": 10,
                            "cost": {
                              "amount": 120,
                              "currency": "GBP"
                            }
                          }
                        ],
                        "currency": "ZZZ"
                      },
                      {
                        "instrumentIdentifiers": {
                          "Instrument/default/ClientInternal": "CLI-462810"
                        },
                        "instrumentScope": "default",
                        "instrumentUid": "LUID_LE9E5SJE",
                        "subHoldingKeys": {},
                        "properties": {},
                        "taxLots": [
                          {
                            "units": 10,
                            "cost": {
                              "amount": 120,
                              "currency": "GBP"
                            }
                          }
                        ],
                        "currency": "ZZZ"
                      }
                    ]
                  }
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/HoldingsAdjustment"
                },
                "example": {
                  "value": {
                    "effectiveAt": "0001-01-01T00:00:00.0000000+00:00",
                    "version": {
                      "effectiveFrom": "2019-03-05T00:00:00.0000000+00:00",
                      "asAtDate": "2019-03-08T00:00:00.0000000+00:00"
                    },
                    "unmatchedHoldingMethod": "KeepTheSame",
                    "adjustments": [
                      {
                        "instrumentIdentifiers": {
                          "Instrument/default/ClientInternal": "CLI-192836"
                        },
                        "instrumentScope": "default",
                        "instrumentUid": "LUID_GNMKYXXK",
                        "subHoldingKeys": {},
                        "properties": {},
                        "taxLots": [
                          {
                            "units": 10,
                            "cost": {
                              "amount": 120,
                              "currency": "GBP"
                            }
                          }
                        ],
                        "currency": "ZZZ"
                      },
                      {
                        "instrumentIdentifiers": {
                          "Instrument/default/ClientInternal": "CLI-462810"
                        },
                        "instrumentScope": "default",
                        "instrumentUid": "LUID_LE9E5SJE",
                        "subHoldingKeys": {},
                        "properties": {},
                        "taxLots": [
                          {
                            "units": 10,
                            "cost": {
                              "amount": 120,
                              "currency": "GBP"
                            }
                          }
                        ],
                        "currency": "ZZZ"
                      }
                    ]
                  }
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Stable"
      }
    },
    "/api/transactionportfolios/{scope}/{code}/transactions": {
      "get": {
        "tags": [
          "Transaction Portfolios"
        ],
        "summary": "GetTransactions: Get transactions",
        "description": "Retrieve all the transactions that occurred during a particular time interval.\r\n            \r\nIf the portfolio is a derived transaction portfolio, the transactions returned are the\r\nunion set of all transactions of the parent (and any grandparents, etc.) as well as\r\nthose of the derived transaction portfolio itself.",
        "operationId": "GetTransactions",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the transaction portfolio.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string"
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The code of the transaction portfolio. Together with the scope this uniquely identifies\r\n             the transaction portfolio.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string"
            }
          },
          {
            "name": "fromTransactionDate",
            "in": "query",
            "description": "The lower bound effective datetime or cut label (inclusive) from which to retrieve transactions.\r\n             There is no lower bound if this is not specified.",
            "schema": {
              "type": "string",
              "format": "dateorcutlabel"
            }
          },
          {
            "name": "toTransactionDate",
            "in": "query",
            "description": "The upper bound effective datetime or cut label (inclusive) from which to retrieve transactions.\r\n             There is no upper bound if this is not specified.",
            "schema": {
              "type": "string",
              "format": "dateorcutlabel"
            }
          },
          {
            "name": "asAt",
            "in": "query",
            "description": "The asAt datetime at which to retrieve transactions. Defaults to returning the latest version\r\n             of each transaction if not specified.",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "x-nullable": true
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Expression with which to filter the result set.\r\n             For example, to return only transactions with a transaction type of 'Buy', specify \"type eq 'Buy'\"\r\n             For more information about filtering LUSID results, see https://support.lusid.com/knowledgebase/article/KA-01914.",
            "schema": {
              "maxLength": 16384,
              "minLength": 0,
              "pattern": "^[\\s\\S]*$",
              "type": "string"
            }
          },
          {
            "name": "propertyKeys",
            "in": "query",
            "description": "A list of property keys from the 'Instrument', 'Transaction', \"LegalEntity\" or \"CustodianAccount\" domain to decorate onto\r\n             transactions. These must have the format {domain}/{scope}/{code}, for example 'Instrument/system/Name' or\r\n             'Transaction/strategy/quantsignal'.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "description": "The key that uniquely identifies the property. It has the format {domain}/{scope}/{code}."
              }
            },
            "x-nullable": true
          },
          {
            "name": "page",
            "in": "query",
            "description": "The pagination token to use to continue listing transactions from a previous call to GetTransactions.",
            "schema": {
              "maxLength": 500,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\+/]*={0,3}$",
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "When paginating, limit the number of returned results to this many. The current behaviour is\r\n             to return all transactions if possible, but this will change to defaulting to 1000 if not specified in the future. It is recommended\r\n             to populate this field to enable pagination.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-nullable": true
          },
          {
            "name": "showCancelledTransactions",
            "in": "query",
            "description": "Option to specify whether or not to include cancelled transactions,\r\n             including previous versions of transactions which have since been amended.\r\n             Defaults to False if not specified.",
            "schema": {
              "type": "boolean"
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "description": "The requested transactions from the specified transaction portfolio",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/VersionedResourceListOfTransaction"
                },
                "example": {
                  "version": {
                    "effectiveFrom": "2018-03-05T00:00:00.0000000+00:00",
                    "asAtDate": "2018-03-04T23:50:00.0000000+00:00"
                  },
                  "values": [
                    {
                      "transactionId": "TXN-00001",
                      "type": "Buy",
                      "instrumentIdentifiers": {
                        "Instrument/default/RIC": "RIC.L"
                      },
                      "instrumentScope": "default",
                      "instrumentUid": "LUID_1C7YTL5M",
                      "transactionDate": "2018-08-04T00:00:00.0000000+00:00",
                      "settlementDate": "2018-08-06T00:00:00.0000000+00:00",
                      "units": 1000,
                      "transactionPrice": {
                        "price": 88.8,
                        "type": "Price"
                      },
                      "totalConsideration": {
                        "amount": 88800,
                        "currency": "USD"
                      },
                      "properties": {
                        "Transaction/default/TradeToPortfolioRate": {
                          "key": "Transaction/default/TradeToPortfolioRate",
                          "value": {
                            "metricValue": {
                              "value": 0.765
                            }
                          }
                        },
                        "Transaction/default/SourcePortfolioId": {
                          "key": "Transaction/default/SourcePortfolioId",
                          "value": {
                            "labelValue": "DEMO-PORTFOLIO-ID"
                          }
                        },
                        "Transaction/default/SourcePortfolioScope": {
                          "key": "Transaction/default/SourcePortfolioScope",
                          "value": {
                            "labelValue": "DEMO-SCOPE"
                          }
                        }
                      },
                      "source": "",
                      "entryDateTime": "2018-03-04T23:50:00.0000000+00:00",
                      "transactionStatus": "Active",
                      "orderId": {
                        "scope": "someScope",
                        "code": "ORD001"
                      },
                      "allocationId": {
                        "scope": "someScope",
                        "code": "ALLOC001"
                      }
                    }
                  ],
                  "href": "http://example.com",
                  "links": []
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VersionedResourceListOfTransaction"
                },
                "example": {
                  "version": {
                    "effectiveFrom": "2018-03-05T00:00:00.0000000+00:00",
                    "asAtDate": "2018-03-04T23:50:00.0000000+00:00"
                  },
                  "values": [
                    {
                      "transactionId": "TXN-00001",
                      "type": "Buy",
                      "instrumentIdentifiers": {
                        "Instrument/default/RIC": "RIC.L"
                      },
                      "instrumentScope": "default",
                      "instrumentUid": "LUID_1C7YTL5M",
                      "transactionDate": "2018-08-04T00:00:00.0000000+00:00",
                      "settlementDate": "2018-08-06T00:00:00.0000000+00:00",
                      "units": 1000,
                      "transactionPrice": {
                        "price": 88.8,
                        "type": "Price"
                      },
                      "totalConsideration": {
                        "amount": 88800,
                        "currency": "USD"
                      },
                      "properties": {
                        "Transaction/default/TradeToPortfolioRate": {
                          "key": "Transaction/default/TradeToPortfolioRate",
                          "value": {
                            "metricValue": {
                              "value": 0.765
                            }
                          }
                        },
                        "Transaction/default/SourcePortfolioId": {
                          "key": "Transaction/default/SourcePortfolioId",
                          "value": {
                            "labelValue": "DEMO-PORTFOLIO-ID"
                          }
                        },
                        "Transaction/default/SourcePortfolioScope": {
                          "key": "Transaction/default/SourcePortfolioScope",
                          "value": {
                            "labelValue": "DEMO-SCOPE"
                          }
                        }
                      },
                      "source": "",
                      "entryDateTime": "2018-03-04T23:50:00.0000000+00:00",
                      "transactionStatus": "Active",
                      "orderId": {
                        "scope": "someScope",
                        "code": "ORD001"
                      },
                      "allocationId": {
                        "scope": "someScope",
                        "code": "ALLOC001"
                      }
                    }
                  ],
                  "href": "http://example.com",
                  "links": []
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/VersionedResourceListOfTransaction"
                },
                "example": {
                  "version": {
                    "effectiveFrom": "2018-03-05T00:00:00.0000000+00:00",
                    "asAtDate": "2018-03-04T23:50:00.0000000+00:00"
                  },
                  "values": [
                    {
                      "transactionId": "TXN-00001",
                      "type": "Buy",
                      "instrumentIdentifiers": {
                        "Instrument/default/RIC": "RIC.L"
                      },
                      "instrumentScope": "default",
                      "instrumentUid": "LUID_1C7YTL5M",
                      "transactionDate": "2018-08-04T00:00:00.0000000+00:00",
                      "settlementDate": "2018-08-06T00:00:00.0000000+00:00",
                      "units": 1000,
                      "transactionPrice": {
                        "price": 88.8,
                        "type": "Price"
                      },
                      "totalConsideration": {
                        "amount": 88800,
                        "currency": "USD"
                      },
                      "properties": {
                        "Transaction/default/TradeToPortfolioRate": {
                          "key": "Transaction/default/TradeToPortfolioRate",
                          "value": {
                            "metricValue": {
                              "value": 0.765
                            }
                          }
                        },
                        "Transaction/default/SourcePortfolioId": {
                          "key": "Transaction/default/SourcePortfolioId",
                          "value": {
                            "labelValue": "DEMO-PORTFOLIO-ID"
                          }
                        },
                        "Transaction/default/SourcePortfolioScope": {
                          "key": "Transaction/default/SourcePortfolioScope",
                          "value": {
                            "labelValue": "DEMO-SCOPE"
                          }
                        }
                      },
                      "source": "",
                      "entryDateTime": "2018-03-04T23:50:00.0000000+00:00",
                      "transactionStatus": "Active",
                      "orderId": {
                        "scope": "someScope",
                        "code": "ORD001"
                      },
                      "allocationId": {
                        "scope": "someScope",
                        "code": "ALLOC001"
                      }
                    }
                  ],
                  "href": "http://example.com",
                  "links": []
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Stable"
      },
      "post": {
        "tags": [
          "Transaction Portfolios"
        ],
        "summary": "UpsertTransactions: Upsert transactions",
        "description": "Create or update transactions in the transaction portfolio. A transaction will be updated\r\nif it already exists and created if it does not.\n\nThe maximum number of transactions that this method can upsert per request is 10,000.",
        "operationId": "UpsertTransactions",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the transaction portfolio.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string"
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The code of the transaction portfolio. Together with the scope this uniquely identifies\r\n            the transaction portfolio.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "A list of transactions to be created or updated.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/TransactionRequest"
                }
              },
              "example": [
                {
                  "transactionId": "TransactionId-111111",
                  "type": "StockIn",
                  "instrumentIdentifiers": {
                    "Instrument/default/Figi": "BBG000C6K6G9",
                    "Instrument/default/Isin": "GB00BH4HKS39"
                  },
                  "transactionDate": "2018-03-05T00:00:00.0000000+00:00",
                  "settlementDate": "2018-03-08T00:00:00.0000000+00:00",
                  "units": 1000,
                  "transactionPrice": {
                    "price": 123,
                    "type": "Price"
                  },
                  "totalConsideration": {
                    "amount": 123000,
                    "currency": "GBP"
                  },
                  "transactionCurrency": "GBP",
                  "properties": {
                    "Transaction/Algo/Name": {
                      "key": "Transaction/Algo/Name",
                      "value": {
                        "labelValue": "Algo1"
                      }
                    }
                  },
                  "counterpartyId": "CounterpartyId-118263",
                  "source": "",
                  "otcConfirmation": {
                    "counterpartyAgreementId": {
                      "scope": "someScope",
                      "code": "someCode"
                    }
                  },
                  "orderId": {
                    "scope": "someScope",
                    "code": "ORD001"
                  },
                  "allocationId": {
                    "scope": "someScope",
                    "code": "ALLOC001"
                  }
                }
              ]
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/TransactionRequest"
                }
              },
              "example": [
                {
                  "transactionId": "TransactionId-111111",
                  "type": "StockIn",
                  "instrumentIdentifiers": {
                    "Instrument/default/Figi": "BBG000C6K6G9",
                    "Instrument/default/Isin": "GB00BH4HKS39"
                  },
                  "transactionDate": "2018-03-05T00:00:00.0000000+00:00",
                  "settlementDate": "2018-03-08T00:00:00.0000000+00:00",
                  "units": 1000,
                  "transactionPrice": {
                    "price": 123,
                    "type": "Price"
                  },
                  "totalConsideration": {
                    "amount": 123000,
                    "currency": "GBP"
                  },
                  "transactionCurrency": "GBP",
                  "properties": {
                    "Transaction/Algo/Name": {
                      "key": "Transaction/Algo/Name",
                      "value": {
                        "labelValue": "Algo1"
                      }
                    }
                  },
                  "counterpartyId": "CounterpartyId-118263",
                  "source": "",
                  "otcConfirmation": {
                    "counterpartyAgreementId": {
                      "scope": "someScope",
                      "code": "someCode"
                    }
                  },
                  "orderId": {
                    "scope": "someScope",
                    "code": "ORD001"
                  },
                  "allocationId": {
                    "scope": "someScope",
                    "code": "ALLOC001"
                  }
                }
              ]
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/TransactionRequest"
                }
              },
              "example": [
                {
                  "transactionId": "TransactionId-111111",
                  "type": "StockIn",
                  "instrumentIdentifiers": {
                    "Instrument/default/Figi": "BBG000C6K6G9",
                    "Instrument/default/Isin": "GB00BH4HKS39"
                  },
                  "transactionDate": "2018-03-05T00:00:00.0000000+00:00",
                  "settlementDate": "2018-03-08T00:00:00.0000000+00:00",
                  "units": 1000,
                  "transactionPrice": {
                    "price": 123,
                    "type": "Price"
                  },
                  "totalConsideration": {
                    "amount": 123000,
                    "currency": "GBP"
                  },
                  "transactionCurrency": "GBP",
                  "properties": {
                    "Transaction/Algo/Name": {
                      "key": "Transaction/Algo/Name",
                      "value": {
                        "labelValue": "Algo1"
                      }
                    }
                  },
                  "counterpartyId": "CounterpartyId-118263",
                  "source": "",
                  "otcConfirmation": {
                    "counterpartyAgreementId": {
                      "scope": "someScope",
                      "code": "someCode"
                    }
                  },
                  "orderId": {
                    "scope": "someScope",
                    "code": "ORD001"
                  },
                  "allocationId": {
                    "scope": "someScope",
                    "code": "ALLOC001"
                  }
                }
              ]
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/TransactionRequest"
                }
              },
              "example": [
                {
                  "transactionId": "TransactionId-111111",
                  "type": "StockIn",
                  "instrumentIdentifiers": {
                    "Instrument/default/Figi": "BBG000C6K6G9",
                    "Instrument/default/Isin": "GB00BH4HKS39"
                  },
                  "transactionDate": "2018-03-05T00:00:00.0000000+00:00",
                  "settlementDate": "2018-03-08T00:00:00.0000000+00:00",
                  "units": 1000,
                  "transactionPrice": {
                    "price": 123,
                    "type": "Price"
                  },
                  "totalConsideration": {
                    "amount": 123000,
                    "currency": "GBP"
                  },
                  "transactionCurrency": "GBP",
                  "properties": {
                    "Transaction/Algo/Name": {
                      "key": "Transaction/Algo/Name",
                      "value": {
                        "labelValue": "Algo1"
                      }
                    }
                  },
                  "counterpartyId": "CounterpartyId-118263",
                  "source": "",
                  "otcConfirmation": {
                    "counterpartyAgreementId": {
                      "scope": "someScope",
                      "code": "someCode"
                    }
                  },
                  "orderId": {
                    "scope": "someScope",
                    "code": "ORD001"
                  },
                  "allocationId": {
                    "scope": "someScope",
                    "code": "ALLOC001"
                  }
                }
              ]
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The version of the transaction portfolio that contains the newly updated or inserted transactions",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UpsertPortfolioTransactionsResponse"
                },
                "example": {
                  "version": {
                    "effectiveFrom": "2018-03-05T11:32:15.0000000+00:00",
                    "asAtDate": "2022-03-05T10:09:01.0000000+00:00"
                  },
                  "metadata": {
                    "warnings": [
                      {
                        "type": "TransactionTypesNotFound",
                        "description": "No transaction types could be found for the listed transactions",
                        "identifierType": "TransactionId",
                        "identifiers": [
                          "Transaction-001",
                          "Transaction-123"
                        ]
                      }
                    ]
                  }
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpsertPortfolioTransactionsResponse"
                },
                "example": {
                  "version": {
                    "effectiveFrom": "2018-03-05T11:32:15.0000000+00:00",
                    "asAtDate": "2022-03-05T10:09:01.0000000+00:00"
                  },
                  "metadata": {
                    "warnings": [
                      {
                        "type": "TransactionTypesNotFound",
                        "description": "No transaction types could be found for the listed transactions",
                        "identifierType": "TransactionId",
                        "identifiers": [
                          "Transaction-001",
                          "Transaction-123"
                        ]
                      }
                    ]
                  }
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpsertPortfolioTransactionsResponse"
                },
                "example": {
                  "version": {
                    "effectiveFrom": "2018-03-05T11:32:15.0000000+00:00",
                    "asAtDate": "2022-03-05T10:09:01.0000000+00:00"
                  },
                  "metadata": {
                    "warnings": [
                      {
                        "type": "TransactionTypesNotFound",
                        "description": "No transaction types could be found for the listed transactions",
                        "identifierType": "TransactionId",
                        "identifiers": [
                          "Transaction-001",
                          "Transaction-123"
                        ]
                      }
                    ]
                  }
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Stable"
      },
      "delete": {
        "tags": [
          "Transaction Portfolios"
        ],
        "summary": "CancelTransactions: Cancel transactions",
        "description": "Cancel one or more transactions from the transaction portfolio.",
        "operationId": "CancelTransactions",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the transaction portfolio.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string"
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The code of the transaction portfolio. Together with the scope this uniquely identifies\r\n            the transaction portfolio.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string"
            }
          },
          {
            "name": "transactionIds",
            "in": "query",
            "description": "The IDs of the transactions to cancel.",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The datetime that the transactions were cancelled",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedEntityResponse"
                },
                "example": {
                  "asAt": "2018-03-05T10:10:10.0000000+00:00"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedEntityResponse"
                },
                "example": {
                  "asAt": "2018-03-05T10:10:10.0000000+00:00"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedEntityResponse"
                },
                "example": {
                  "asAt": "2018-03-05T10:10:10.0000000+00:00"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Stable"
      }
    },
    "/api/transactionportfolios/{scope}/{code}/transactions/$batchUpsert": {
      "post": {
        "tags": [
          "Transaction Portfolios"
        ],
        "summary": "[EARLY ACCESS] BatchUpsertTransactions: Batch upsert transactions",
        "description": "Create or update transactions in the transaction portfolio. A transaction will be updated\r\nif it already exists and created if it does not.\r\n\r\nEach request must be keyed by a unique correlation id. This id is ephemeral and is not stored by LUSID.\r\nIt serves only as a way to easily identify each transaction in the response.\r\n\r\nNote: If using partial failure modes, then it is important to check the response body for failures as any failures will still return a 200 status code",
        "operationId": "BatchUpsertTransactions",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the transaction portfolio.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string"
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The code of the transaction portfolio. Together with the scope this uniquely identifies\r\n            the transaction portfolio.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string"
            }
          },
          {
            "name": "successMode",
            "in": "query",
            "description": "Whether the batch request should fail Atomically or in a Partial fashion - Allowed Values: Atomic, Partial.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "type": "string",
              "default": "Partial"
            }
          }
        ],
        "requestBody": {
          "description": "The payload describing the transactions to be created or updated.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/components/schemas/TransactionRequest"
                }
              },
              "example": {
                "transactionRequest-1": {
                  "transactionId": "TransactionId-111111",
                  "type": "StockIn",
                  "instrumentIdentifiers": {
                    "Instrument/default/Figi": "BBG000C6K6G9",
                    "Instrument/default/Isin": "GB00BH4HKS39"
                  },
                  "transactionDate": "2018-03-05T00:00:00.0000000+00:00",
                  "settlementDate": "2018-03-08T00:00:00.0000000+00:00",
                  "units": 1000,
                  "transactionPrice": {
                    "price": 123,
                    "type": "Price"
                  },
                  "totalConsideration": {
                    "amount": 123000,
                    "currency": "GBP"
                  },
                  "transactionCurrency": "GBP",
                  "properties": {
                    "Transaction/Algo/Name": {
                      "key": "Transaction/Algo/Name",
                      "value": {
                        "labelValue": "Algo1"
                      }
                    }
                  },
                  "counterpartyId": "CounterpartyId-118263",
                  "source": "",
                  "otcConfirmation": {
                    "counterpartyAgreementId": {
                      "scope": "someScope",
                      "code": "someCode"
                    }
                  },
                  "orderId": {
                    "scope": "someScope",
                    "code": "ORD001"
                  },
                  "allocationId": {
                    "scope": "someScope",
                    "code": "ALLOC001"
                  }
                },
                "transactionRequest-2": {
                  "transactionId": "TransactionId-222222",
                  "type": "StockIn",
                  "instrumentIdentifiers": {
                    "Instrument/default/Figi": "BBG000GJ45S5",
                    "Instrument/default/Isin": "GB00BFRLS45S"
                  },
                  "transactionDate": "2019-03-05T00:00:00.0000000+00:00",
                  "settlementDate": "2019-03-08T00:00:00.0000000+00:00",
                  "units": 1000,
                  "transactionPrice": {
                    "price": 123,
                    "type": "Price"
                  },
                  "totalConsideration": {
                    "amount": 123000,
                    "currency": "GBP"
                  },
                  "transactionCurrency": "GBP",
                  "properties": {
                    "Transaction/Algo/Name": {
                      "key": "Transaction/Algo/Name",
                      "value": {
                        "labelValue": "Algo1"
                      }
                    }
                  },
                  "counterpartyId": "CounterpartyId-141556",
                  "source": "",
                  "otcConfirmation": {
                    "counterpartyAgreementId": {
                      "scope": "someScope",
                      "code": "someCode"
                    }
                  },
                  "orderId": {
                    "scope": "someScope",
                    "code": "ORD001"
                  },
                  "allocationId": {
                    "scope": "someScope",
                    "code": "ALLOC001"
                  }
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/components/schemas/TransactionRequest"
                }
              },
              "example": {
                "transactionRequest-1": {
                  "transactionId": "TransactionId-111111",
                  "type": "StockIn",
                  "instrumentIdentifiers": {
                    "Instrument/default/Figi": "BBG000C6K6G9",
                    "Instrument/default/Isin": "GB00BH4HKS39"
                  },
                  "transactionDate": "2018-03-05T00:00:00.0000000+00:00",
                  "settlementDate": "2018-03-08T00:00:00.0000000+00:00",
                  "units": 1000,
                  "transactionPrice": {
                    "price": 123,
                    "type": "Price"
                  },
                  "totalConsideration": {
                    "amount": 123000,
                    "currency": "GBP"
                  },
                  "transactionCurrency": "GBP",
                  "properties": {
                    "Transaction/Algo/Name": {
                      "key": "Transaction/Algo/Name",
                      "value": {
                        "labelValue": "Algo1"
                      }
                    }
                  },
                  "counterpartyId": "CounterpartyId-118263",
                  "source": "",
                  "otcConfirmation": {
                    "counterpartyAgreementId": {
                      "scope": "someScope",
                      "code": "someCode"
                    }
                  },
                  "orderId": {
                    "scope": "someScope",
                    "code": "ORD001"
                  },
                  "allocationId": {
                    "scope": "someScope",
                    "code": "ALLOC001"
                  }
                },
                "transactionRequest-2": {
                  "transactionId": "TransactionId-222222",
                  "type": "StockIn",
                  "instrumentIdentifiers": {
                    "Instrument/default/Figi": "BBG000GJ45S5",
                    "Instrument/default/Isin": "GB00BFRLS45S"
                  },
                  "transactionDate": "2019-03-05T00:00:00.0000000+00:00",
                  "settlementDate": "2019-03-08T00:00:00.0000000+00:00",
                  "units": 1000,
                  "transactionPrice": {
                    "price": 123,
                    "type": "Price"
                  },
                  "totalConsideration": {
                    "amount": 123000,
                    "currency": "GBP"
                  },
                  "transactionCurrency": "GBP",
                  "properties": {
                    "Transaction/Algo/Name": {
                      "key": "Transaction/Algo/Name",
                      "value": {
                        "labelValue": "Algo1"
                      }
                    }
                  },
                  "counterpartyId": "CounterpartyId-141556",
                  "source": "",
                  "otcConfirmation": {
                    "counterpartyAgreementId": {
                      "scope": "someScope",
                      "code": "someCode"
                    }
                  },
                  "orderId": {
                    "scope": "someScope",
                    "code": "ORD001"
                  },
                  "allocationId": {
                    "scope": "someScope",
                    "code": "ALLOC001"
                  }
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/components/schemas/TransactionRequest"
                }
              },
              "example": {
                "transactionRequest-1": {
                  "transactionId": "TransactionId-111111",
                  "type": "StockIn",
                  "instrumentIdentifiers": {
                    "Instrument/default/Figi": "BBG000C6K6G9",
                    "Instrument/default/Isin": "GB00BH4HKS39"
                  },
                  "transactionDate": "2018-03-05T00:00:00.0000000+00:00",
                  "settlementDate": "2018-03-08T00:00:00.0000000+00:00",
                  "units": 1000,
                  "transactionPrice": {
                    "price": 123,
                    "type": "Price"
                  },
                  "totalConsideration": {
                    "amount": 123000,
                    "currency": "GBP"
                  },
                  "transactionCurrency": "GBP",
                  "properties": {
                    "Transaction/Algo/Name": {
                      "key": "Transaction/Algo/Name",
                      "value": {
                        "labelValue": "Algo1"
                      }
                    }
                  },
                  "counterpartyId": "CounterpartyId-118263",
                  "source": "",
                  "otcConfirmation": {
                    "counterpartyAgreementId": {
                      "scope": "someScope",
                      "code": "someCode"
                    }
                  },
                  "orderId": {
                    "scope": "someScope",
                    "code": "ORD001"
                  },
                  "allocationId": {
                    "scope": "someScope",
                    "code": "ALLOC001"
                  }
                },
                "transactionRequest-2": {
                  "transactionId": "TransactionId-222222",
                  "type": "StockIn",
                  "instrumentIdentifiers": {
                    "Instrument/default/Figi": "BBG000GJ45S5",
                    "Instrument/default/Isin": "GB00BFRLS45S"
                  },
                  "transactionDate": "2019-03-05T00:00:00.0000000+00:00",
                  "settlementDate": "2019-03-08T00:00:00.0000000+00:00",
                  "units": 1000,
                  "transactionPrice": {
                    "price": 123,
                    "type": "Price"
                  },
                  "totalConsideration": {
                    "amount": 123000,
                    "currency": "GBP"
                  },
                  "transactionCurrency": "GBP",
                  "properties": {
                    "Transaction/Algo/Name": {
                      "key": "Transaction/Algo/Name",
                      "value": {
                        "labelValue": "Algo1"
                      }
                    }
                  },
                  "counterpartyId": "CounterpartyId-141556",
                  "source": "",
                  "otcConfirmation": {
                    "counterpartyAgreementId": {
                      "scope": "someScope",
                      "code": "someCode"
                    }
                  },
                  "orderId": {
                    "scope": "someScope",
                    "code": "ORD001"
                  },
                  "allocationId": {
                    "scope": "someScope",
                    "code": "ALLOC001"
                  }
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/components/schemas/TransactionRequest"
                }
              },
              "example": {
                "transactionRequest-1": {
                  "transactionId": "TransactionId-111111",
                  "type": "StockIn",
                  "instrumentIdentifiers": {
                    "Instrument/default/Figi": "BBG000C6K6G9",
                    "Instrument/default/Isin": "GB00BH4HKS39"
                  },
                  "transactionDate": "2018-03-05T00:00:00.0000000+00:00",
                  "settlementDate": "2018-03-08T00:00:00.0000000+00:00",
                  "units": 1000,
                  "transactionPrice": {
                    "price": 123,
                    "type": "Price"
                  },
                  "totalConsideration": {
                    "amount": 123000,
                    "currency": "GBP"
                  },
                  "transactionCurrency": "GBP",
                  "properties": {
                    "Transaction/Algo/Name": {
                      "key": "Transaction/Algo/Name",
                      "value": {
                        "labelValue": "Algo1"
                      }
                    }
                  },
                  "counterpartyId": "CounterpartyId-118263",
                  "source": "",
                  "otcConfirmation": {
                    "counterpartyAgreementId": {
                      "scope": "someScope",
                      "code": "someCode"
                    }
                  },
                  "orderId": {
                    "scope": "someScope",
                    "code": "ORD001"
                  },
                  "allocationId": {
                    "scope": "someScope",
                    "code": "ALLOC001"
                  }
                },
                "transactionRequest-2": {
                  "transactionId": "TransactionId-222222",
                  "type": "StockIn",
                  "instrumentIdentifiers": {
                    "Instrument/default/Figi": "BBG000GJ45S5",
                    "Instrument/default/Isin": "GB00BFRLS45S"
                  },
                  "transactionDate": "2019-03-05T00:00:00.0000000+00:00",
                  "settlementDate": "2019-03-08T00:00:00.0000000+00:00",
                  "units": 1000,
                  "transactionPrice": {
                    "price": 123,
                    "type": "Price"
                  },
                  "totalConsideration": {
                    "amount": 123000,
                    "currency": "GBP"
                  },
                  "transactionCurrency": "GBP",
                  "properties": {
                    "Transaction/Algo/Name": {
                      "key": "Transaction/Algo/Name",
                      "value": {
                        "labelValue": "Algo1"
                      }
                    }
                  },
                  "counterpartyId": "CounterpartyId-141556",
                  "source": "",
                  "otcConfirmation": {
                    "counterpartyAgreementId": {
                      "scope": "someScope",
                      "code": "someCode"
                    }
                  },
                  "orderId": {
                    "scope": "someScope",
                    "code": "ORD001"
                  },
                  "allocationId": {
                    "scope": "someScope",
                    "code": "ALLOC001"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The successfully upserted transaction requests along with any failures",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/BatchUpsertPortfolioTransactionsResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BatchUpsertPortfolioTransactionsResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/BatchUpsertPortfolioTransactionsResponse"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      }
    },
    "/api/transactionportfolios/{scope}/{code}/transactions/$build": {
      "post": {
        "tags": [
          "Transaction Portfolios"
        ],
        "summary": "BuildTransactions: Build transactions",
        "description": "Builds and returns all transactions that affect the holdings of a portfolio over a given interval of\r\neffective time into a set of output transactions. This includes transactions automatically generated by\r\nLUSID such as holding adjustments.",
        "operationId": "BuildTransactions",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the transaction portfolio.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string"
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The code of the transaction portfolio. Together with the scope this uniquely identifies\r\n            the transaction portfolio.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string"
            }
          },
          {
            "name": "asAt",
            "in": "query",
            "description": "The asAt datetime at which to build the transactions. Defaults to return the latest\r\n            version of each transaction if not specified.",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "x-nullable": true
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Expression to filter the result set.\r\n            For example, to return only transactions with a transaction type of 'Buy', specify \"type eq 'Buy'\".\r\n            For more information about filtering LUSID results, see https://support.lusid.com/knowledgebase/article/KA-01914.",
            "schema": {
              "maxLength": 16384,
              "minLength": 0,
              "pattern": "^[\\s\\S]*$",
              "type": "string"
            }
          },
          {
            "name": "propertyKeys",
            "in": "query",
            "description": "A list of property keys from the \"Instrument\" or \"Transaction\" domain to decorate onto\r\n            the transactions. These take the format {domain}/{scope}/{code} e.g. \"Instrument/system/Name\" or\r\n            \"Transaction/strategy/quantsignal\".",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "description": "The key that uniquely identifies the property. It has the format {domain}/{scope}/{code}."
              }
            },
            "x-nullable": true
          },
          {
            "name": "limit",
            "in": "query",
            "description": "When paginating, limit the number of returned results to this many. Defaults to 100 if not specified.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-nullable": true
          },
          {
            "name": "page",
            "in": "query",
            "description": "The pagination token to use to continue listing transactions from a previous call to BuildTransactions.",
            "schema": {
              "maxLength": 500,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\+/]*={0,3}$",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The query queryParameters which control how the output transactions are built.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/TransactionQueryParameters"
              },
              "example": {
                "startDate": "2018-03-05T00:00:00.0000000+00:00",
                "endDate": "2018-03-19T00:00:00.0000000+00:00",
                "queryMode": "TradeDate",
                "showCancelledTransactions": false
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TransactionQueryParameters"
              },
              "example": {
                "startDate": "2018-03-05T00:00:00.0000000+00:00",
                "endDate": "2018-03-19T00:00:00.0000000+00:00",
                "queryMode": "TradeDate",
                "showCancelledTransactions": false
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/TransactionQueryParameters"
              },
              "example": {
                "startDate": "2018-03-05T00:00:00.0000000+00:00",
                "endDate": "2018-03-19T00:00:00.0000000+00:00",
                "queryMode": "TradeDate",
                "showCancelledTransactions": false
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/TransactionQueryParameters"
              },
              "example": {
                "startDate": "2018-03-05T00:00:00.0000000+00:00",
                "endDate": "2018-03-19T00:00:00.0000000+00:00",
                "queryMode": "TradeDate",
                "showCancelledTransactions": false
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The requested transactions from the specified transaction portfolio",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/VersionedResourceListOfOutputTransaction"
                },
                "example": {
                  "version": {
                    "effectiveFrom": "2018-03-05T00:00:00.0000000+00:00",
                    "asAtDate": "2018-03-04T23:50:00.0000000+00:00"
                  },
                  "values": [
                    {
                      "transactionId": "TXN-00001",
                      "type": "Buy",
                      "description": "Purchase",
                      "instrumentIdentifiers": {
                        "Instrument/default/RIC": "RIC.L"
                      },
                      "instrumentScope": "default",
                      "instrumentUid": "LUID_JLH24106",
                      "transactionDate": "2018-08-04T00:00:00.0000000+00:00",
                      "settlementDate": "2018-08-06T00:00:00.0000000+00:00",
                      "units": 1000,
                      "transactionAmount": 88800,
                      "transactionPrice": {
                        "price": 88.8,
                        "type": "Price"
                      },
                      "totalConsideration": {
                        "amount": 88800,
                        "currency": "USD"
                      },
                      "exchangeRate": 1,
                      "transactionToPortfolioRate": 0.7648,
                      "transactionCurrency": "USD",
                      "properties": {
                        "Transaction/default/TradeToPortfolioRate": {
                          "key": "Transaction/default/TradeToPortfolioRate",
                          "value": {
                            "metricValue": {
                              "value": 0.765
                            }
                          }
                        },
                        "Transaction/default/SourcePortfolioId": {
                          "key": "Transaction/default/SourcePortfolioId",
                          "value": {
                            "labelValue": "DEMO-PORTFOLIO-ID"
                          }
                        },
                        "Transaction/default/SourcePortfolioScope": {
                          "key": "Transaction/default/SourcePortfolioScope",
                          "value": {
                            "labelValue": "DEMO-SCOPE"
                          }
                        }
                      },
                      "source": "",
                      "transactionStatus": "Cancelled",
                      "entryDateTime": "2018-08-04T12:22:06.0000000+00:00",
                      "cancelDateTime": "2018-08-04T12:25:14.0000000+00:00"
                    },
                    {
                      "transactionId": "TXN-00002",
                      "type": "Sell",
                      "description": "Sale",
                      "instrumentIdentifiers": {
                        "Instrument/default/ClientInternal": "INT:00024106"
                      },
                      "instrumentScope": "default",
                      "instrumentUid": "LUID_OI5JX1V7",
                      "transactionDate": "2018-08-07T00:00:00.0000000+00:00",
                      "settlementDate": "2018-08-10T00:00:00.0000000+00:00",
                      "units": 10000,
                      "transactionAmount": 1470100,
                      "transactionPrice": {
                        "price": 147.01,
                        "type": "Price"
                      },
                      "totalConsideration": {
                        "amount": 1470100,
                        "currency": "USD"
                      },
                      "exchangeRate": 1,
                      "transactionToPortfolioRate": 0.772,
                      "transactionCurrency": "USD",
                      "properties": {
                        "Transaction/default/TradeToPortfolioRate": {
                          "key": "Transaction/default/TradeToPortfolioRate",
                          "value": {
                            "metricValue": {
                              "value": 0.772
                            }
                          }
                        },
                        "Transaction/default/SourcePortfolioId": {
                          "key": "Transaction/default/SourcePortfolioId",
                          "value": {
                            "labelValue": "DEMO-PORTFOLIO-ID"
                          }
                        },
                        "Transaction/default/SourcePortfolioScope": {
                          "key": "Transaction/default/SourcePortfolioScope",
                          "value": {
                            "labelValue": "DEMO-SCOPE"
                          }
                        },
                        "Transaction/default/ResultantHolding": {
                          "key": "Transaction/default/ResultantHolding",
                          "value": {
                            "metricValue": {
                              "value": 3500
                            }
                          }
                        }
                      },
                      "source": "",
                      "transactionStatus": "Active",
                      "entryDateTime": "2018-08-07T10:30:12.0000000+00:00",
                      "realisedGainLoss": [
                        {
                          "instrumentScope": "default",
                          "instrumentUid": "LUID_OI5JX1V7",
                          "units": 4500,
                          "purchaseTradeDate": "2018-08-02T00:00:00.0000000+00:00",
                          "purchaseSettlementDate": "2018-08-05T00:00:00.0000000+00:00",
                          "purchasePrice": 142.96,
                          "costTradeCcy": {
                            "amount": 643320,
                            "currency": "USD"
                          },
                          "costPortfolioCcy": {
                            "amount": 493619.44,
                            "currency": "GBP"
                          },
                          "realisedTradeCcy": {
                            "amount": 18225,
                            "currency": "USD"
                          },
                          "realisedTotal": {
                            "amount": 17093.3,
                            "currency": "GBP"
                          },
                          "realisedMarket": {
                            "amount": 14069.7,
                            "currency": "GBP"
                          },
                          "realisedCurrency": {
                            "amount": 3023.6,
                            "currency": "GBP"
                          }
                        },
                        {
                          "instrumentScope": "default",
                          "instrumentUid": "LUID_OI5JX1V7",
                          "units": 4500,
                          "purchaseTradeDate": "2018-08-03T00:00:00.0000000+00:00",
                          "purchaseSettlementDate": "2018-08-06T00:00:00.0000000+00:00",
                          "purchasePrice": 147.7,
                          "costTradeCcy": {
                            "amount": 664650,
                            "currency": "USD"
                          },
                          "costPortfolioCcy": {
                            "amount": 510517.67,
                            "currency": "GBP"
                          },
                          "realisedTradeCcy": {
                            "amount": -3105,
                            "currency": "USD"
                          },
                          "realisedTotal": {
                            "amount": 195.07,
                            "currency": "GBP"
                          },
                          "realisedMarket": {
                            "amount": -2397.06,
                            "currency": "GBP"
                          },
                          "realisedCurrency": {
                            "amount": 2592.13,
                            "currency": "GBP"
                          }
                        },
                        {
                          "instrumentScope": "default",
                          "instrumentUid": "LUID_OI5JX1V7",
                          "units": 1000,
                          "purchaseTradeDate": "2018-08-06T00:00:00.0000000+00:00",
                          "purchaseSettlementDate": "2018-08-08T00:00:00.0000000+00:00",
                          "purchasePrice": 146.03,
                          "costTradeCcy": {
                            "amount": 146030,
                            "currency": "USD"
                          },
                          "costPortfolioCcy": {
                            "amount": 112851.98,
                            "currency": "GBP"
                          },
                          "realisedTradeCcy": {
                            "amount": 980,
                            "currency": "USD"
                          },
                          "realisedTotal": {
                            "amount": 639.74,
                            "currency": "GBP"
                          },
                          "realisedMarket": {
                            "amount": 756.56,
                            "currency": "GBP"
                          },
                          "realisedCurrency": {
                            "amount": -116.82,
                            "currency": "GBP"
                          }
                        }
                      ]
                    }
                  ],
                  "href": "http://example.com",
                  "links": []
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VersionedResourceListOfOutputTransaction"
                },
                "example": {
                  "version": {
                    "effectiveFrom": "2018-03-05T00:00:00.0000000+00:00",
                    "asAtDate": "2018-03-04T23:50:00.0000000+00:00"
                  },
                  "values": [
                    {
                      "transactionId": "TXN-00001",
                      "type": "Buy",
                      "description": "Purchase",
                      "instrumentIdentifiers": {
                        "Instrument/default/RIC": "RIC.L"
                      },
                      "instrumentScope": "default",
                      "instrumentUid": "LUID_JLH24106",
                      "transactionDate": "2018-08-04T00:00:00.0000000+00:00",
                      "settlementDate": "2018-08-06T00:00:00.0000000+00:00",
                      "units": 1000,
                      "transactionAmount": 88800,
                      "transactionPrice": {
                        "price": 88.8,
                        "type": "Price"
                      },
                      "totalConsideration": {
                        "amount": 88800,
                        "currency": "USD"
                      },
                      "exchangeRate": 1,
                      "transactionToPortfolioRate": 0.7648,
                      "transactionCurrency": "USD",
                      "properties": {
                        "Transaction/default/TradeToPortfolioRate": {
                          "key": "Transaction/default/TradeToPortfolioRate",
                          "value": {
                            "metricValue": {
                              "value": 0.765
                            }
                          }
                        },
                        "Transaction/default/SourcePortfolioId": {
                          "key": "Transaction/default/SourcePortfolioId",
                          "value": {
                            "labelValue": "DEMO-PORTFOLIO-ID"
                          }
                        },
                        "Transaction/default/SourcePortfolioScope": {
                          "key": "Transaction/default/SourcePortfolioScope",
                          "value": {
                            "labelValue": "DEMO-SCOPE"
                          }
                        }
                      },
                      "source": "",
                      "transactionStatus": "Cancelled",
                      "entryDateTime": "2018-08-04T12:22:06.0000000+00:00",
                      "cancelDateTime": "2018-08-04T12:25:14.0000000+00:00"
                    },
                    {
                      "transactionId": "TXN-00002",
                      "type": "Sell",
                      "description": "Sale",
                      "instrumentIdentifiers": {
                        "Instrument/default/ClientInternal": "INT:00024106"
                      },
                      "instrumentScope": "default",
                      "instrumentUid": "LUID_OI5JX1V7",
                      "transactionDate": "2018-08-07T00:00:00.0000000+00:00",
                      "settlementDate": "2018-08-10T00:00:00.0000000+00:00",
                      "units": 10000,
                      "transactionAmount": 1470100,
                      "transactionPrice": {
                        "price": 147.01,
                        "type": "Price"
                      },
                      "totalConsideration": {
                        "amount": 1470100,
                        "currency": "USD"
                      },
                      "exchangeRate": 1,
                      "transactionToPortfolioRate": 0.772,
                      "transactionCurrency": "USD",
                      "properties": {
                        "Transaction/default/TradeToPortfolioRate": {
                          "key": "Transaction/default/TradeToPortfolioRate",
                          "value": {
                            "metricValue": {
                              "value": 0.772
                            }
                          }
                        },
                        "Transaction/default/SourcePortfolioId": {
                          "key": "Transaction/default/SourcePortfolioId",
                          "value": {
                            "labelValue": "DEMO-PORTFOLIO-ID"
                          }
                        },
                        "Transaction/default/SourcePortfolioScope": {
                          "key": "Transaction/default/SourcePortfolioScope",
                          "value": {
                            "labelValue": "DEMO-SCOPE"
                          }
                        },
                        "Transaction/default/ResultantHolding": {
                          "key": "Transaction/default/ResultantHolding",
                          "value": {
                            "metricValue": {
                              "value": 3500
                            }
                          }
                        }
                      },
                      "source": "",
                      "transactionStatus": "Active",
                      "entryDateTime": "2018-08-07T10:30:12.0000000+00:00",
                      "realisedGainLoss": [
                        {
                          "instrumentScope": "default",
                          "instrumentUid": "LUID_OI5JX1V7",
                          "units": 4500,
                          "purchaseTradeDate": "2018-08-02T00:00:00.0000000+00:00",
                          "purchaseSettlementDate": "2018-08-05T00:00:00.0000000+00:00",
                          "purchasePrice": 142.96,
                          "costTradeCcy": {
                            "amount": 643320,
                            "currency": "USD"
                          },
                          "costPortfolioCcy": {
                            "amount": 493619.44,
                            "currency": "GBP"
                          },
                          "realisedTradeCcy": {
                            "amount": 18225,
                            "currency": "USD"
                          },
                          "realisedTotal": {
                            "amount": 17093.3,
                            "currency": "GBP"
                          },
                          "realisedMarket": {
                            "amount": 14069.7,
                            "currency": "GBP"
                          },
                          "realisedCurrency": {
                            "amount": 3023.6,
                            "currency": "GBP"
                          }
                        },
                        {
                          "instrumentScope": "default",
                          "instrumentUid": "LUID_OI5JX1V7",
                          "units": 4500,
                          "purchaseTradeDate": "2018-08-03T00:00:00.0000000+00:00",
                          "purchaseSettlementDate": "2018-08-06T00:00:00.0000000+00:00",
                          "purchasePrice": 147.7,
                          "costTradeCcy": {
                            "amount": 664650,
                            "currency": "USD"
                          },
                          "costPortfolioCcy": {
                            "amount": 510517.67,
                            "currency": "GBP"
                          },
                          "realisedTradeCcy": {
                            "amount": -3105,
                            "currency": "USD"
                          },
                          "realisedTotal": {
                            "amount": 195.07,
                            "currency": "GBP"
                          },
                          "realisedMarket": {
                            "amount": -2397.06,
                            "currency": "GBP"
                          },
                          "realisedCurrency": {
                            "amount": 2592.13,
                            "currency": "GBP"
                          }
                        },
                        {
                          "instrumentScope": "default",
                          "instrumentUid": "LUID_OI5JX1V7",
                          "units": 1000,
                          "purchaseTradeDate": "2018-08-06T00:00:00.0000000+00:00",
                          "purchaseSettlementDate": "2018-08-08T00:00:00.0000000+00:00",
                          "purchasePrice": 146.03,
                          "costTradeCcy": {
                            "amount": 146030,
                            "currency": "USD"
                          },
                          "costPortfolioCcy": {
                            "amount": 112851.98,
                            "currency": "GBP"
                          },
                          "realisedTradeCcy": {
                            "amount": 980,
                            "currency": "USD"
                          },
                          "realisedTotal": {
                            "amount": 639.74,
                            "currency": "GBP"
                          },
                          "realisedMarket": {
                            "amount": 756.56,
                            "currency": "GBP"
                          },
                          "realisedCurrency": {
                            "amount": -116.82,
                            "currency": "GBP"
                          }
                        }
                      ]
                    }
                  ],
                  "href": "http://example.com",
                  "links": []
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/VersionedResourceListOfOutputTransaction"
                },
                "example": {
                  "version": {
                    "effectiveFrom": "2018-03-05T00:00:00.0000000+00:00",
                    "asAtDate": "2018-03-04T23:50:00.0000000+00:00"
                  },
                  "values": [
                    {
                      "transactionId": "TXN-00001",
                      "type": "Buy",
                      "description": "Purchase",
                      "instrumentIdentifiers": {
                        "Instrument/default/RIC": "RIC.L"
                      },
                      "instrumentScope": "default",
                      "instrumentUid": "LUID_JLH24106",
                      "transactionDate": "2018-08-04T00:00:00.0000000+00:00",
                      "settlementDate": "2018-08-06T00:00:00.0000000+00:00",
                      "units": 1000,
                      "transactionAmount": 88800,
                      "transactionPrice": {
                        "price": 88.8,
                        "type": "Price"
                      },
                      "totalConsideration": {
                        "amount": 88800,
                        "currency": "USD"
                      },
                      "exchangeRate": 1,
                      "transactionToPortfolioRate": 0.7648,
                      "transactionCurrency": "USD",
                      "properties": {
                        "Transaction/default/TradeToPortfolioRate": {
                          "key": "Transaction/default/TradeToPortfolioRate",
                          "value": {
                            "metricValue": {
                              "value": 0.765
                            }
                          }
                        },
                        "Transaction/default/SourcePortfolioId": {
                          "key": "Transaction/default/SourcePortfolioId",
                          "value": {
                            "labelValue": "DEMO-PORTFOLIO-ID"
                          }
                        },
                        "Transaction/default/SourcePortfolioScope": {
                          "key": "Transaction/default/SourcePortfolioScope",
                          "value": {
                            "labelValue": "DEMO-SCOPE"
                          }
                        }
                      },
                      "source": "",
                      "transactionStatus": "Cancelled",
                      "entryDateTime": "2018-08-04T12:22:06.0000000+00:00",
                      "cancelDateTime": "2018-08-04T12:25:14.0000000+00:00"
                    },
                    {
                      "transactionId": "TXN-00002",
                      "type": "Sell",
                      "description": "Sale",
                      "instrumentIdentifiers": {
                        "Instrument/default/ClientInternal": "INT:00024106"
                      },
                      "instrumentScope": "default",
                      "instrumentUid": "LUID_OI5JX1V7",
                      "transactionDate": "2018-08-07T00:00:00.0000000+00:00",
                      "settlementDate": "2018-08-10T00:00:00.0000000+00:00",
                      "units": 10000,
                      "transactionAmount": 1470100,
                      "transactionPrice": {
                        "price": 147.01,
                        "type": "Price"
                      },
                      "totalConsideration": {
                        "amount": 1470100,
                        "currency": "USD"
                      },
                      "exchangeRate": 1,
                      "transactionToPortfolioRate": 0.772,
                      "transactionCurrency": "USD",
                      "properties": {
                        "Transaction/default/TradeToPortfolioRate": {
                          "key": "Transaction/default/TradeToPortfolioRate",
                          "value": {
                            "metricValue": {
                              "value": 0.772
                            }
                          }
                        },
                        "Transaction/default/SourcePortfolioId": {
                          "key": "Transaction/default/SourcePortfolioId",
                          "value": {
                            "labelValue": "DEMO-PORTFOLIO-ID"
                          }
                        },
                        "Transaction/default/SourcePortfolioScope": {
                          "key": "Transaction/default/SourcePortfolioScope",
                          "value": {
                            "labelValue": "DEMO-SCOPE"
                          }
                        },
                        "Transaction/default/ResultantHolding": {
                          "key": "Transaction/default/ResultantHolding",
                          "value": {
                            "metricValue": {
                              "value": 3500
                            }
                          }
                        }
                      },
                      "source": "",
                      "transactionStatus": "Active",
                      "entryDateTime": "2018-08-07T10:30:12.0000000+00:00",
                      "realisedGainLoss": [
                        {
                          "instrumentScope": "default",
                          "instrumentUid": "LUID_OI5JX1V7",
                          "units": 4500,
                          "purchaseTradeDate": "2018-08-02T00:00:00.0000000+00:00",
                          "purchaseSettlementDate": "2018-08-05T00:00:00.0000000+00:00",
                          "purchasePrice": 142.96,
                          "costTradeCcy": {
                            "amount": 643320,
                            "currency": "USD"
                          },
                          "costPortfolioCcy": {
                            "amount": 493619.44,
                            "currency": "GBP"
                          },
                          "realisedTradeCcy": {
                            "amount": 18225,
                            "currency": "USD"
                          },
                          "realisedTotal": {
                            "amount": 17093.3,
                            "currency": "GBP"
                          },
                          "realisedMarket": {
                            "amount": 14069.7,
                            "currency": "GBP"
                          },
                          "realisedCurrency": {
                            "amount": 3023.6,
                            "currency": "GBP"
                          }
                        },
                        {
                          "instrumentScope": "default",
                          "instrumentUid": "LUID_OI5JX1V7",
                          "units": 4500,
                          "purchaseTradeDate": "2018-08-03T00:00:00.0000000+00:00",
                          "purchaseSettlementDate": "2018-08-06T00:00:00.0000000+00:00",
                          "purchasePrice": 147.7,
                          "costTradeCcy": {
                            "amount": 664650,
                            "currency": "USD"
                          },
                          "costPortfolioCcy": {
                            "amount": 510517.67,
                            "currency": "GBP"
                          },
                          "realisedTradeCcy": {
                            "amount": -3105,
                            "currency": "USD"
                          },
                          "realisedTotal": {
                            "amount": 195.07,
                            "currency": "GBP"
                          },
                          "realisedMarket": {
                            "amount": -2397.06,
                            "currency": "GBP"
                          },
                          "realisedCurrency": {
                            "amount": 2592.13,
                            "currency": "GBP"
                          }
                        },
                        {
                          "instrumentScope": "default",
                          "instrumentUid": "LUID_OI5JX1V7",
                          "units": 1000,
                          "purchaseTradeDate": "2018-08-06T00:00:00.0000000+00:00",
                          "purchaseSettlementDate": "2018-08-08T00:00:00.0000000+00:00",
                          "purchasePrice": 146.03,
                          "costTradeCcy": {
                            "amount": 146030,
                            "currency": "USD"
                          },
                          "costPortfolioCcy": {
                            "amount": 112851.98,
                            "currency": "GBP"
                          },
                          "realisedTradeCcy": {
                            "amount": 980,
                            "currency": "USD"
                          },
                          "realisedTotal": {
                            "amount": 639.74,
                            "currency": "GBP"
                          },
                          "realisedMarket": {
                            "amount": 756.56,
                            "currency": "GBP"
                          },
                          "realisedCurrency": {
                            "amount": -116.82,
                            "currency": "GBP"
                          }
                        }
                      ]
                    }
                  ],
                  "href": "http://example.com",
                  "links": []
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Stable"
      }
    },
    "/api/transactionportfolios/{scope}/{code}/transactions/{transactionId}/history": {
      "get": {
        "tags": [
          "Transaction Portfolios"
        ],
        "summary": "[EARLY ACCESS] GetTransactionHistory: Get the history of a transaction",
        "description": "Get all of the changes that have happened to a transaction.",
        "operationId": "GetTransactionHistory",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the transaction portfolio.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string"
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The code of the transaction portfolio. Together with the scope this uniquely identifies\r\n            the transaction portfolio.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string"
            }
          },
          {
            "name": "transactionId",
            "in": "path",
            "description": "The unique ID of the transaction to create or update.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "asAt",
            "in": "query",
            "description": "The asAt datetime at which to retrieve the history of the transaction. Defaults\r\n            to return the latest version if not specified.",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "description": "The history of the specified transaction (changes that have been made to it).",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfChangeHistory"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfChangeHistory"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfChangeHistory"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      }
    },
    "/api/transactionportfolios/{scope}/{code}/transactions/{transactionId}/properties": {
      "post": {
        "tags": [
          "Transaction Portfolios"
        ],
        "summary": "UpsertTransactionProperties: Upsert transaction properties",
        "description": "Create or update one or more transaction properties for a single transaction in the transaction portfolio.\r\nEach property will be updated if it already exists and created if it does not.\r\nBoth transaction and portfolio must exist at the time when properties are created or updated.",
        "operationId": "UpsertTransactionProperties",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the transaction portfolio.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string"
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The code of the transaction portfolio. Together with the scope this uniquely identifies\r\n            the transaction portfolio.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string"
            }
          },
          {
            "name": "transactionId",
            "in": "path",
            "description": "The unique ID of the transaction to create or update properties for.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The properties and their associated values to create or update.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/components/schemas/PerpetualProperty"
                }
              },
              "example": {
                "Transaction/MyScope/MyPropertyName": {
                  "key": "Transaction/MyScope/MyPropertyName",
                  "value": {
                    "metricValue": {
                      "value": 12345.5672,
                      "unit": "Unit"
                    }
                  }
                },
                "Transaction/MyScope/MyPropertyName2": {
                  "key": "Transaction/MyScope/MyPropertyName2",
                  "value": {
                    "metricValue": {
                      "value": 925.3,
                      "unit": "Unit"
                    }
                  }
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/components/schemas/PerpetualProperty"
                }
              },
              "example": {
                "Transaction/MyScope/MyPropertyName": {
                  "key": "Transaction/MyScope/MyPropertyName",
                  "value": {
                    "metricValue": {
                      "value": 12345.5672,
                      "unit": "Unit"
                    }
                  }
                },
                "Transaction/MyScope/MyPropertyName2": {
                  "key": "Transaction/MyScope/MyPropertyName2",
                  "value": {
                    "metricValue": {
                      "value": 925.3,
                      "unit": "Unit"
                    }
                  }
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/components/schemas/PerpetualProperty"
                }
              },
              "example": {
                "Transaction/MyScope/MyPropertyName": {
                  "key": "Transaction/MyScope/MyPropertyName",
                  "value": {
                    "metricValue": {
                      "value": 12345.5672,
                      "unit": "Unit"
                    }
                  }
                },
                "Transaction/MyScope/MyPropertyName2": {
                  "key": "Transaction/MyScope/MyPropertyName2",
                  "value": {
                    "metricValue": {
                      "value": 925.3,
                      "unit": "Unit"
                    }
                  }
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/components/schemas/PerpetualProperty"
                }
              },
              "example": {
                "Transaction/MyScope/MyPropertyName": {
                  "key": "Transaction/MyScope/MyPropertyName",
                  "value": {
                    "metricValue": {
                      "value": 12345.5672,
                      "unit": "Unit"
                    }
                  }
                },
                "Transaction/MyScope/MyPropertyName2": {
                  "key": "Transaction/MyScope/MyPropertyName2",
                  "value": {
                    "metricValue": {
                      "value": 925.3,
                      "unit": "Unit"
                    }
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The version of the transaction portfolio that contains the newly updated or inserted transaction property",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UpsertTransactionPropertiesResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpsertTransactionPropertiesResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpsertTransactionPropertiesResponse"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Stable"
      },
      "delete": {
        "tags": [
          "Transaction Portfolios"
        ],
        "summary": "DeletePropertiesFromTransaction: Delete properties from transaction",
        "description": "Delete one or more properties from a single transaction in a transaction portfolio.",
        "operationId": "DeletePropertiesFromTransaction",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the transaction portfolio.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string"
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The code of the transaction portfolio. Together with the scope this uniquely identifies\r\n            the transaction portfolio.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string"
            }
          },
          {
            "name": "transactionId",
            "in": "path",
            "description": "The unique ID of the transaction from which to delete properties.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "propertyKeys",
            "in": "query",
            "description": "The property keys of the properties to delete.\r\n            These must be from the \"Transaction\" domain and have the format {domain}/{scope}/{code}, for example\r\n            \"Transaction/strategy/quantsignal\".",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "description": "The key that uniquely identifies the property. It has the format {domain}/{scope}/{code}."
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The datetime that the property was deleted",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedEntityResponse"
                },
                "example": {
                  "asAt": "2018-03-05T10:10:10.0000000+00:00"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedEntityResponse"
                },
                "example": {
                  "asAt": "2018-03-05T10:10:10.0000000+00:00"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedEntityResponse"
                },
                "example": {
                  "asAt": "2018-03-05T10:10:10.0000000+00:00"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Stable"
      }
    }
  },
  "components": {
    "schemas": {
      "A2BBreakdown": {
        "type": "object",
        "properties": {
          "total": {
            "type": "number",
            "description": "The total value of all the components within this category.",
            "format": "double"
          },
          "currency": {
            "type": "string",
            "description": "The currency. Applies to the Total, as well as all the componenents.",
            "nullable": true
          },
          "components": {
            "type": "object",
            "additionalProperties": {
              "type": "number",
              "format": "double"
            },
            "description": "The individual components that make up the category. For example, the Start category may have Cost, Unrealised gains and accrued interest components.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "A2B Breakdown - Shows the total, and each sub-element within an A2B Category"
      },
      "A2BCategory": {
        "type": "object",
        "properties": {
          "holdingCurrency": {
            "$ref": "#/components/schemas/A2BBreakdown"
          },
          "portfolioCurrency": {
            "$ref": "#/components/schemas/A2BBreakdown"
          }
        },
        "additionalProperties": false,
        "description": "A2B Category - one of the five major categories in the A2BDataRecord"
      },
      "A2BDataRecord": {
        "type": "object",
        "properties": {
          "portfolioId": {
            "$ref": "#/components/schemas/ResourceId"
          },
          "holdingType": {
            "type": "string",
            "description": "The code for the type of the holding e.g. P, B, C, R, F etc.",
            "nullable": true
          },
          "instrumentScope": {
            "type": "string",
            "description": "The unique Lusid Instrument Id (LUID) of the instrument that the holding is in.",
            "nullable": true
          },
          "instrumentUid": {
            "type": "string",
            "description": "The unique Lusid Instrument Id (LUID) of the instrument that the holding is in.",
            "nullable": true
          },
          "subHoldingKeys": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/PerpetualProperty"
            },
            "description": "The sub-holding properties which identify the holding. Each property will be from the 'Transaction' domain. These are configured on a transaction portfolio.",
            "nullable": true
          },
          "currency": {
            "type": "string",
            "description": "The holding currency.",
            "nullable": true
          },
          "transactionId": {
            "type": "string",
            "description": "The unique identifier for the transaction.",
            "nullable": true
          },
          "start": {
            "$ref": "#/components/schemas/A2BCategory"
          },
          "flows": {
            "$ref": "#/components/schemas/A2BCategory"
          },
          "gains": {
            "$ref": "#/components/schemas/A2BCategory"
          },
          "carry": {
            "$ref": "#/components/schemas/A2BCategory"
          },
          "end": {
            "$ref": "#/components/schemas/A2BCategory"
          },
          "properties": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/Property"
            },
            "description": "The properties which have been requested to be decorated onto the holding. These will be from the 'Instrument' domain.",
            "nullable": true
          },
          "groupId": {
            "type": "string",
            "description": "Arbitrary string that can be used to cross reference an entry in the A2B report with activity in the A2B-Movements. This should be used purely as a token. The content should not be relied upon.",
            "nullable": true
          },
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ResponseMetaData"
            },
            "description": "Any errors with the record are reported here.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "A2B Record - shows values on, and changes between two dates: A and B"
      },
      "A2BMovementRecord": {
        "type": "object",
        "properties": {
          "portfolioId": {
            "$ref": "#/components/schemas/ResourceId"
          },
          "holdingType": {
            "type": "string",
            "description": "The code for the type of the holding e.g. P, B, C, R, F etc.",
            "nullable": true
          },
          "instrumentScope": {
            "type": "string",
            "description": "The unique Lusid Instrument Id (LUID) of the instrument that the holding is in.",
            "nullable": true
          },
          "instrumentUid": {
            "type": "string",
            "description": "The unique Lusid Instrument Id (LUID) of the instrument that the holding is in.",
            "nullable": true
          },
          "subHoldingKeys": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/PerpetualProperty"
            },
            "description": "The sub-holding properties which identify the holding. Each property will be from the 'Transaction' domain. These are configured on a transaction portfolio.",
            "nullable": true
          },
          "currency": {
            "type": "string",
            "description": "The holding currency.",
            "nullable": true
          },
          "transactionId": {
            "type": "string",
            "description": "The unique identifier for the transaction.",
            "nullable": true
          },
          "movementName": {
            "type": "string",
            "description": "The name of the movement.",
            "nullable": true
          },
          "effectiveDate": {
            "type": "string",
            "description": "The date of the movement.",
            "format": "date-time"
          },
          "units": {
            "type": "number",
            "description": "The number of units of the instrument that are affected by the movement.",
            "format": "double"
          },
          "start": {
            "$ref": "#/components/schemas/A2BCategory"
          },
          "flows": {
            "$ref": "#/components/schemas/A2BCategory"
          },
          "gains": {
            "$ref": "#/components/schemas/A2BCategory"
          },
          "carry": {
            "$ref": "#/components/schemas/A2BCategory"
          },
          "end": {
            "$ref": "#/components/schemas/A2BCategory"
          },
          "properties": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/Property"
            },
            "description": "The properties which have been requested to be decorated onto the holding. These will be from the 'Instrument' domain.",
            "nullable": true
          },
          "groupId": {
            "type": "string",
            "description": "Arbitrary string that can be used to cross reference an entry in the A2B report with activity in the A2B-Movements. This should be used purely as a token. The content should not be relied upon.",
            "nullable": true
          },
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ResponseMetaData"
            },
            "description": "Any errors with the record are reported here.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "A2B Movement Record - shows A2B category based changes relating to a specific movement"
      },
      "AccessControlledAction": {
        "required": [
          "action",
          "description"
        ],
        "type": "object",
        "properties": {
          "description": {
            "minLength": 1,
            "type": "string",
            "description": "The description of the action"
          },
          "action": {
            "$ref": "#/components/schemas/ActionId"
          },
          "limitedSet": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IdSelectorDefinition"
            },
            "description": "When populated, the provided values are the limited set of resources that are allowed to be specified for\r\naccess control for this action",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "description": "Collection of links.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "An action that can be access controlled"
      },
      "AccessControlledResource": {
        "required": [
          "actions",
          "description"
        ],
        "type": "object",
        "properties": {
          "application": {
            "type": "string",
            "description": "The application to which this resource belongs",
            "nullable": true
          },
          "name": {
            "type": "string",
            "description": "The display name of the resource",
            "nullable": true
          },
          "description": {
            "minLength": 1,
            "type": "string",
            "description": "The description of the resource"
          },
          "actions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AccessControlledAction"
            },
            "description": "The actions acceptable for this type of resource"
          },
          "identifierParts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IdentifierPartSchema"
            },
            "description": "The constituent parts of a valid identifier for this resource",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "description": "Collection of links.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "A resource to which access can be controlled"
      },
      "AccessMetadataOperation": {
        "required": [
          "op",
          "path",
          "value"
        ],
        "type": "object",
        "properties": {
          "value": {
            "minItems": 1,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AccessMetadataValue"
            }
          },
          "path": {
            "maxLength": 1025,
            "minLength": 1,
            "pattern": "^/.+",
            "type": "string"
          },
          "op": {
            "enum": [
              "add"
            ],
            "type": "string",
            "description": "The available values are: add"
          },
          "from": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "AccessMetadataValue": {
        "required": [
          "value"
        ],
        "type": "object",
        "properties": {
          "value": {
            "maxLength": 2048,
            "minLength": 0,
            "type": "string"
          },
          "provider": {
            "maxLength": 50,
            "minLength": 0,
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "An access control value. Provider should only be used if you are a service provide licensing data. In that case\r\nthe provider value must match your domain."
      },
      "ActionId": {
        "required": [
          "activity",
          "entity",
          "scope"
        ],
        "type": "object",
        "properties": {
          "scope": {
            "maxLength": 100,
            "minLength": 3,
            "type": "string"
          },
          "activity": {
            "maxLength": 25,
            "minLength": 3,
            "type": "string"
          },
          "entity": {
            "maxLength": 25,
            "minLength": 3,
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "ActionResult": {
        "type": "object",
        "additionalProperties": false
      },
      "ActionResultOfPortfolio": {
        "type": "object",
        "properties": {
          "result": {
            "$ref": "#/components/schemas/ActionResult"
          },
          "value": {
            "$ref": "#/components/schemas/Portfolio"
          }
        },
        "additionalProperties": false
      },
      "AddBusinessDaysToDateRequest": {
        "required": [
          "businessDayOffset",
          "holidayCodes"
        ],
        "type": "object",
        "properties": {
          "businessDayOffset": {
            "type": "integer",
            "format": "int32"
          },
          "holidayCodes": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "startDate": {
            "type": "string",
            "format": "date-time"
          },
          "asAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "AddBusinessDaysToDateResponse": {
        "required": [
          "value"
        ],
        "type": "object",
        "properties": {
          "value": {
            "type": "string",
            "format": "date-time"
          }
        },
        "additionalProperties": false,
        "description": "The date that is the requested number of business days after the given start date"
      },
      "AddressDefinition": {
        "type": "object",
        "properties": {
          "displayName": {
            "type": "string",
            "description": "The display name of the address key.",
            "nullable": true
          },
          "type": {
            "enum": [
              "String",
              "Int",
              "Decimal",
              "DateTime",
              "Boolean",
              "ResultValue",
              "Result0D",
              "Json"
            ],
            "type": "string",
            "description": "The available values are: String, Int, Decimal, DateTime, Boolean, ResultValue, Result0D, Json"
          },
          "description": {
            "type": "string",
            "description": "The description for this result.",
            "nullable": true
          },
          "lifeCycleStatus": {
            "type": "string",
            "description": "What is the status of the address path. If it is not Production then it might be removed at some point in the future.\r\nSee the removal date for the likely timing of that if any.",
            "nullable": true
          },
          "removalDate": {
            "type": "string",
            "description": "If the life-cycle status of the address is Deprecated then this is the date at which support of the address will be suspended.\r\nAfter that date it will be removed at the earliest possible point subject to any specific contractual support and development constraints.",
            "format": "date-time",
            "nullable": true
          },
          "documentationLink": {
            "type": "string",
            "description": "Contains a link to the documentation for this AddressDefinition in KnowledgeBase.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "AddressKeyDefinition": {
        "required": [
          "addressKey",
          "type"
        ],
        "type": "object",
        "properties": {
          "addressKey": {
            "type": "string",
            "description": "The address key of the address key definition."
          },
          "type": {
            "minLength": 1,
            "type": "string",
            "description": "The type of the address key definition"
          },
          "version": {
            "$ref": "#/components/schemas/Version"
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "description": "Collection of links.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "AddressKeyFilter": {
        "type": "object",
        "properties": {
          "left": {
            "type": "string",
            "description": "Address for the value in the row",
            "nullable": true
          },
          "operator": {
            "maxLength": 3,
            "minLength": 0,
            "type": "string",
            "description": "What sort of comparison is the filter performing. Can be either \"eq\" for equals or \"neq\" for not equals.",
            "nullable": true
          },
          "right": {
            "$ref": "#/components/schemas/ResultValue"
          }
        },
        "additionalProperties": false,
        "description": "Class specifying a filtering operation"
      },
      "AddressKeyList": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ReferenceList"
          },
          {
            "required": [
              "referenceListType",
              "values"
            ],
            "type": "object",
            "properties": {
              "values": {
                "maxItems": 100,
                "minItems": 1,
                "type": "array",
                "items": {
                  "type": "string",
                  "description": "The key that uniquely identifies a queryable address in Lusid."
                }
              },
              "referenceListType": {
                "enum": [
                  "PortfolioGroupIdList",
                  "PortfolioIdList",
                  "AddressKeyList",
                  "StringList",
                  "InstrumentList",
                  "DecimalList"
                ],
                "type": "string",
                "description": "The reference list values. The available values are: PortfolioGroupIdList, PortfolioIdList, AddressKeyList, StringList, InstrumentList, DecimalList"
              }
            }
          }
        ]
      },
      "AddressKeyOptionDefinition": {
        "required": [
          "name",
          "optional",
          "type"
        ],
        "type": "object",
        "properties": {
          "name": {
            "minLength": 1,
            "type": "string",
            "description": "The name of the option"
          },
          "type": {
            "minLength": 1,
            "type": "string",
            "description": "The type of the option"
          },
          "optional": {
            "type": "boolean",
            "description": "Is this option required or optional?"
          },
          "allowedValueSet": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "If the option is a string or enum, the allowed set of values it can take.",
            "nullable": true
          },
          "defaultValue": {
            "type": "string",
            "description": "If the option is not required, what is the default value?",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "The definition of an Address Key Option"
      },
      "AdjustHolding": {
        "required": [
          "version"
        ],
        "type": "object",
        "properties": {
          "href": {
            "type": "string",
            "description": "The specific Uniform Resource Identifier (URI) for this resource at the requested effective and asAt datetime.",
            "format": "uri",
            "nullable": true
          },
          "version": {
            "$ref": "#/components/schemas/Version"
          },
          "metadata": {
            "type": "object",
            "additionalProperties": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/ResponseMetaData"
              }
            },
            "description": "Contains warnings related to unresolved instruments",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "description": "Collection of links.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "AdjustHoldingForDateRequest": {
        "required": [
          "effectiveAt",
          "instrumentIdentifiers",
          "taxLots"
        ],
        "type": "object",
        "properties": {
          "effectiveAt": {
            "minLength": 1,
            "type": "string",
            "description": "The Effective date that the target holding will be adjusted at.",
            "format": "dateorcutlabel"
          },
          "instrumentIdentifiers": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "A set of instrument identifiers that can resolve the holding adjustment to a unique instrument."
          },
          "subHoldingKeys": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/PerpetualProperty"
            },
            "description": "Set of unique transaction properties and associated values to store with the holding adjustment transaction automatically created by LUSID. Each property must be from the 'Transaction' domain.",
            "nullable": true
          },
          "properties": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/PerpetualProperty"
            },
            "description": "Set of unique holding properties and associated values to store with the target holding. Each property must be from the 'Holding' domain.",
            "nullable": true
          },
          "taxLots": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TargetTaxLotRequest"
            },
            "description": "The tax-lots that together make up the target holding."
          },
          "currency": {
            "type": "string",
            "description": "The Holding currency. This needs to be equal with the one on the TaxLot -> cost if one is specified",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "This request specifies target holdings. i.e. holding data that the\r\nsystem should match. When processed by the movement\r\nengine, it will create 'true-up' adjustments on the fly."
      },
      "AdjustHoldingRequest": {
        "required": [
          "instrumentIdentifiers",
          "taxLots"
        ],
        "type": "object",
        "properties": {
          "instrumentIdentifiers": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "A set of instrument identifiers that can resolve the holding adjustment to a unique instrument."
          },
          "subHoldingKeys": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/PerpetualProperty"
            },
            "description": "Set of unique transaction properties and associated values to store with the holding adjustment transaction automatically created by LUSID. Each property must be from the 'Transaction' domain.",
            "nullable": true
          },
          "properties": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/PerpetualProperty"
            },
            "description": "Set of unique holding properties and associated values to store with the target holding. Each property must be from the 'Holding' domain.",
            "nullable": true
          },
          "taxLots": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TargetTaxLotRequest"
            },
            "description": "The tax-lots that together make up the target holding."
          },
          "currency": {
            "type": "string",
            "description": "The Holding currency. This needs to be equal with the one on the TaxLot -> cost if one is specified",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "This request specifies target holdings. i.e. holding data that the\r\nsystem should match. When processed by the movement\r\nengine, it will create 'true-up' adjustments on the fly."
      },
      "AggregatedReturn": {
        "required": [
          "effectiveAt",
          "endOfPeriod",
          "metricsValue"
        ],
        "type": "object",
        "properties": {
          "effectiveAt": {
            "type": "string",
            "description": "The effectiveAt for the return.",
            "format": "date-time"
          },
          "endOfPeriod": {
            "type": "string",
            "description": "The end of period date. For the monthly period this will be the Month End Date.",
            "format": "date-time"
          },
          "openingMarketValue": {
            "type": "number",
            "description": "The opening market value.",
            "format": "double",
            "nullable": true
          },
          "closingMarketValue": {
            "type": "number",
            "description": "The closing market value.",
            "format": "double",
            "nullable": true
          },
          "metricsValue": {
            "type": "object",
            "additionalProperties": {
              "type": "number",
              "format": "double"
            },
            "description": "The value for the specified metric."
          },
          "frequency": {
            "type": "string",
            "description": "Show the aggregated output returns on a Daily or Monthly period.",
            "nullable": true
          },
          "compositeMembers": {
            "type": "integer",
            "description": "The number of members in the Composite on the given day.",
            "format": "int32",
            "nullable": true
          },
          "compositeMembersWithoutReturn": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ResourceId"
            },
            "description": "List containing Composite members which post no return on the given day.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "A list of Aggregated Returns."
      },
      "AggregatedReturnsDispersionRequest": {
        "type": "object",
        "properties": {
          "toEffectiveAt": {
            "maxLength": 256,
            "minLength": 0,
            "pattern": "^[a-zA-Z0-9\\-_\\+:\\.]+$",
            "type": "string",
            "description": "The end date for when the you want the dispersion to be calculated.",
            "format": "dateorcutlabel",
            "nullable": true
          },
          "yearsCount": {
            "type": "integer",
            "description": "For how many years to calculate the dispersion. Default to 10.",
            "format": "int32"
          },
          "returnIds": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ResourceId"
            },
            "description": "The Scope and code of the returns.",
            "nullable": true
          },
          "recipeId": {
            "$ref": "#/components/schemas/ResourceId"
          },
          "compositeMethod": {
            "type": "string",
            "description": "The method used to calculate the Portfolio performance: Equal/Asset.",
            "nullable": true
          },
          "alternativeInceptionDate": {
            "maxLength": 1024,
            "minLength": 0,
            "type": "string",
            "description": "Optional - either a date, or the key for a portfolio property containing a date. If provided, the given date will override the inception date for this request.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "The request used in the AggregatedReturnsDispersionMetric."
      },
      "AggregatedReturnsRequest": {
        "required": [
          "metrics"
        ],
        "type": "object",
        "properties": {
          "metrics": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PerformanceReturnsMetric"
            },
            "description": "A list of metrics to calculate in the AggregatedReturns."
          },
          "returnIds": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ResourceId"
            },
            "description": "The Scope and code of the returns.",
            "nullable": true
          },
          "recipeId": {
            "$ref": "#/components/schemas/ResourceId"
          },
          "compositeMethod": {
            "type": "string",
            "description": "The method used to calculate the Portfolio performance: Equal/Asset.",
            "nullable": true
          },
          "period": {
            "type": "string",
            "description": "The type of the returns used to calculate the aggregation result: Daily/Monthly.",
            "nullable": true
          },
          "outputFrequency": {
            "type": "string",
            "description": "The type of calculated output: Daily/Weekly/Monthly/Quarterly/Half-Yearly/Yearly.",
            "nullable": true
          },
          "alternativeInceptionDate": {
            "type": "string",
            "description": "Optional - either a date, or the key for a portfolio property containing a date. If provided, the given date will override the inception date for this request.",
            "nullable": true
          },
          "holidayCalendars": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The holiday calendar(s) that should be used in determining the date schedule. Holiday calendar(s) are supplied by their codes, for example, 'CoppClark'. Note that when the calendars are not available (e.g. when the user has insufficient permissions), a recipe setting will be used to determine whether the whole batch should then fail or whether the calendar not being available should simply be ignored.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "The request used in the AggregatedReturns."
      },
      "AggregatedReturnsResponse": {
        "type": "object",
        "properties": {
          "href": {
            "type": "string",
            "description": "The specific Uniform Resource Identifier (URI) for this resource at the requested effective and asAt datetime.",
            "format": "uri",
            "nullable": true
          },
          "results": {
            "type": "object",
            "additionalProperties": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/AggregatedReturn"
              }
            },
            "description": "Aggregated returns grouped by ReturnId",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "description": "Collection of links.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "AggregateSpec": {
        "required": [
          "key",
          "op"
        ],
        "type": "object",
        "properties": {
          "key": {
            "type": "string",
            "description": "The key that uniquely identifies a queryable address in Lusid."
          },
          "op": {
            "enum": [
              "Sum",
              "Proportion",
              "Average",
              "Count",
              "Min",
              "Max",
              "Value",
              "SumOfPositiveValues",
              "SumOfNegativeValues",
              "SumOfAbsoluteValues",
              "ProportionOfAbsoluteValues",
              "SumCumulativeInAdvance",
              "SumCumulativeInArrears"
            ],
            "type": "string",
            "description": "The available values are: Sum, Proportion, Average, Count, Min, Max, Value, SumOfPositiveValues, SumOfNegativeValues, SumOfAbsoluteValues, ProportionOfAbsoluteValues, SumCumulativeInAdvance, SumCumulativeInArrears"
          },
          "options": {
            "type": "object",
            "additionalProperties": {
              "type": "object",
              "additionalProperties": false
            },
            "description": "Additional options to apply when performing computations. Options that do not apply to the Key will be\r\nignored. Option values can be boolean, numeric, string or date-time.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "AggregationContext": {
        "type": "object",
        "properties": {
          "options": {
            "$ref": "#/components/schemas/AggregationOptions"
          }
        },
        "additionalProperties": false,
        "description": "Aggregation context node. Whilst the market and pricing nodes concern themselves with which models are used and where the market data comes from, the aggregation\r\ncontext determines how data is aggregated together. This controls the behaviour of the grouping and sql-like engine at the back of the valuation. For instance,\r\nit controls conversion of currencies and whether the sql-like engine behaves more like ANSI or MySql SQL."
      },
      "AggregationMeasureFailureDetail": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "nullable": true
          },
          "effectiveAt": {
            "type": "string",
            "format": "date-time"
          },
          "measure": {
            "type": "string",
            "nullable": true
          },
          "reason": {
            "type": "string",
            "nullable": true
          },
          "detail": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "AggregationOptions": {
        "type": "object",
        "properties": {
          "useAnsiLikeSyntax": {
            "type": "boolean",
            "description": "Should the aggregation behave like ANSI Sql or MySql with respect to a conceptual request which is equivalent to \"select a,sum(a) from results\";\r\nANSI Sql would report an error if a was not unique where MySql would simply view a,suma(a) as equivalent to firstof(a),sum(a)."
          },
          "allowPartialEntitlementSuccess": {
            "type": "boolean",
            "description": "In the case of valuing a portfolio group where some, but not all entitlements fail, should the aggregation return the valuations\r\napplied only to those portfolios where entitlements checks succeeded."
          },
          "applyIso4217Rounding": {
            "type": "boolean",
            "description": "Various results that are units of currency might need to be rounded.\r\nThis will round according to the ISO4217 standard number of decimal places for a currency."
          }
        },
        "additionalProperties": false,
        "description": "Options for controlling the default aspects and behaviour of the aggregation."
      },
      "AggregationQuery": {
        "required": [
          "addressKey",
          "description",
          "displayName",
          "flattenedType",
          "lifeCycleStatus",
          "scalesWithHoldingQuantity",
          "supportedOperations",
          "type"
        ],
        "type": "object",
        "properties": {
          "addressKey": {
            "minLength": 1,
            "type": "string",
            "description": "The address that is the query to be made into the system. e.g. a Valuation/PV or Instrument/MaturityDate"
          },
          "description": {
            "minLength": 1,
            "type": "string",
            "description": "What does the information that is being queried by the address mean. What is the address for."
          },
          "displayName": {
            "minLength": 1,
            "type": "string",
            "description": "The suggested name that the user would wish to put on to the returned information for visualisation in preference to the address."
          },
          "type": {
            "enum": [
              "String",
              "Int",
              "Decimal",
              "DateTime",
              "Boolean",
              "ResultValue",
              "Result0D",
              "Json"
            ],
            "type": "string",
            "description": "Financially meaningful results can be presented as either simple flat types or more complex expanded types. This field gives the type of the more complex representation.\n\nFor example, the present value (PV) of a holding could be represented either as a simple decimal (with currency implied) or as a decimal-currency pair. In this example, the type returned in this field would be \"Result0D\", the decimal-currency pair. The available values are: String, Int, Decimal, DateTime, Boolean, ResultValue, Result0D, Json"
          },
          "flattenedType": {
            "enum": [
              "String",
              "Int",
              "Decimal",
              "DateTime",
              "Boolean",
              "ResultValue",
              "Result0D",
              "Json"
            ],
            "type": "string",
            "description": "Financially meaningful results can be presented as either simple flat types or more complex expanded types. This field gives the type of the simpler representation.\n\nFor example, the present value (PV) of a holding could be represented either as a simple decimal (with currency implied) or as a decimal-currency pair. In this example, the type returned in this field would be \"Decimal\". The available values are: String, Int, Decimal, DateTime, Boolean, ResultValue, Result0D, Json"
          },
          "scalesWithHoldingQuantity": {
            "type": "boolean",
            "description": "Is the data scaled when it is for, e.g. a holding in an instrument. A key example would be the difference between price and PV. The present value of an instrument would scale with the quantity held. The price would be that for a hypothetical unit of that instrument, typically associated with the contract size."
          },
          "supportedOperations": {
            "minLength": 1,
            "type": "string",
            "description": "When performing an aggregation operation, what column type operations can be performed on the data. For example, it makes sense to sum decimals but not strings. Either can be counted. With more complex types, e.g. ResultValues, operations may be linked to a semantic meaning such as the currency of the result. In such cases the operations may be supported but context specific. For example, it makes sense to sum PVs in a single currency but not when the currency is different. In such cases, an error would result (it being assumed that no fx rates for currency conversion were implicit in the context)."
          },
          "lifeCycleStatus": {
            "minLength": 1,
            "type": "string",
            "description": "Within an API where an item can be accessed through an address or property, there is an associated status that determines whether the item is stable or likely to change. This status is one of [Experimental, Beta, EAP, Prod,  Deprecated]. If the item is deprecated it will be removed on or after the associated DateTime RemovalDate field. That field will not otherwise be set."
          },
          "removalDate": {
            "type": "string",
            "description": "If the life cycle status is set to deprecated then this will be populated with the date on or after which removal of the address query will happen",
            "format": "date-time",
            "nullable": true
          },
          "applicableOptions": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/AddressKeyOptionDefinition"
            },
            "description": "A mapping from option names to the definition that the corresponding option value must match.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Allocation": {
        "required": [
          "allocatedOrderId",
          "id",
          "instrumentIdentifiers",
          "lusidInstrumentId",
          "portfolioId",
          "quantity"
        ],
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/ResourceId"
          },
          "allocatedOrderId": {
            "$ref": "#/components/schemas/ResourceId"
          },
          "portfolioId": {
            "$ref": "#/components/schemas/ResourceId"
          },
          "quantity": {
            "type": "number",
            "description": "The quantity of given instrument allocated.",
            "format": "double"
          },
          "instrumentIdentifiers": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "The instrument allocated."
          },
          "version": {
            "$ref": "#/components/schemas/Version"
          },
          "properties": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/PerpetualProperty"
            },
            "description": "Client-defined properties associated with this allocation.",
            "nullable": true
          },
          "instrumentScope": {
            "type": "string",
            "description": "The scope in which the instrument lies",
            "nullable": true
          },
          "lusidInstrumentId": {
            "minLength": 1,
            "type": "string",
            "description": "The LUSID instrument id for the instrument allocated."
          },
          "placementIds": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ResourceId"
            },
            "description": "A placement - also known as an order placed in the market - associated with this allocation.",
            "nullable": true
          },
          "state": {
            "type": "string",
            "description": "The state of this allocation.",
            "nullable": true
          },
          "side": {
            "type": "string",
            "description": "The side of this allocation (examples: Buy, Sell, ...).",
            "nullable": true
          },
          "type": {
            "type": "string",
            "description": "The type of order associated with this allocation (examples: Limit, Market, ...).",
            "nullable": true
          },
          "settlementDate": {
            "type": "string",
            "description": "The settlement date for this allocation.",
            "format": "date-time",
            "nullable": true
          },
          "date": {
            "type": "string",
            "description": "The date of this allocation.",
            "format": "date-time"
          },
          "price": {
            "$ref": "#/components/schemas/CurrencyAndAmount"
          },
          "settlementCurrency": {
            "type": "string",
            "description": "The settlement currency of this allocation.",
            "nullable": true
          },
          "settlementCurrencyFxRate": {
            "type": "number",
            "description": "The settlement currency to allocation currency FX rate.",
            "format": "double",
            "nullable": true
          },
          "counterparty": {
            "type": "string",
            "description": "The counterparty for this allocation.",
            "nullable": true
          },
          "executionIds": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ResourceId"
            },
            "description": "The executions associated with this allocation",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "description": "Collection of links.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "An Allocation of a certain quantity of a specific instrument against an originating\r\nOrder."
      },
      "AllocationRequest": {
        "required": [
          "allocatedOrderId",
          "id",
          "instrumentIdentifiers",
          "portfolioId",
          "quantity"
        ],
        "type": "object",
        "properties": {
          "properties": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/PerpetualProperty"
            },
            "description": "Client-defined properties associated with this allocation.",
            "nullable": true
          },
          "instrumentIdentifiers": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "The instrument allocated."
          },
          "quantity": {
            "type": "number",
            "description": "The quantity of given instrument allocated.",
            "format": "double"
          },
          "portfolioId": {
            "$ref": "#/components/schemas/ResourceId"
          },
          "allocatedOrderId": {
            "$ref": "#/components/schemas/ResourceId"
          },
          "id": {
            "$ref": "#/components/schemas/ResourceId"
          },
          "placementIds": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ResourceId"
            },
            "description": "A placement - also known as an order placed in the market - associated with this allocation.",
            "nullable": true
          },
          "state": {
            "type": "string",
            "description": "The state of this allocation.",
            "nullable": true
          },
          "side": {
            "type": "string",
            "description": "The side of this allocation (examples: Buy, Sell, ...).",
            "nullable": true
          },
          "type": {
            "type": "string",
            "description": "The type of order associated with this allocation (examples: Limit, Market, ...).",
            "nullable": true
          },
          "settlementDate": {
            "type": "string",
            "description": "The settlement date for this allocation.",
            "format": "date-time",
            "nullable": true
          },
          "date": {
            "type": "string",
            "description": "The date of this allocation.",
            "format": "date-time"
          },
          "price": {
            "$ref": "#/components/schemas/CurrencyAndAmount"
          },
          "settlementCurrency": {
            "type": "string",
            "description": "The settlement currency of this allocation.",
            "nullable": true
          },
          "settlementCurrencyFxRate": {
            "type": "number",
            "description": "The settlement currency to allocation currency FX rate.",
            "format": "double",
            "nullable": true
          },
          "counterparty": {
            "type": "string",
            "description": "The counterparty for this allocation.",
            "nullable": true
          },
          "executionIds": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ResourceId"
            },
            "description": "The executions associated with this allocation",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "A request to create or update an Allocation."
      },
      "AllocationSetRequest": {
        "type": "object",
        "properties": {
          "allocationRequests": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AllocationRequest"
            },
            "description": "A collection of AllocationRequests.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "A request to create or update multiple Allocations."
      },
      "AmortisationEvent": {
        "allOf": [
          {
            "$ref": "#/components/schemas/InstrumentEvent"
          },
          {
            "required": [
              "amountReduced",
              "domCcy",
              "eventStatus",
              "instrumentEventType",
              "paymentDate",
              "payReceive"
            ],
            "type": "object",
            "properties": {
              "amountReduced": {
                "type": "number",
                "description": "The amount reduced in this amortisation event.\r\nThat is, the difference between the previous notional amount and the current notional amount as set in this event.",
                "format": "double"
              },
              "domCcy": {
                "type": "string",
                "description": "Domestic currency of the originating instrument"
              },
              "payReceive": {
                "minLength": 1,
                "type": "string",
                "description": "Is this event in relation to the Pay or Receive leg"
              },
              "eventStatus": {
                "minLength": 1,
                "type": "string",
                "description": "What is the event status, is it a known (ie historic) or unknown (ie projected) event?"
              },
              "paymentDate": {
                "type": "string",
                "description": "The date the principal payment is to be made.",
                "format": "date-time"
              },
              "instrumentEventType": {
                "enum": [
                  "TransitionEvent",
                  "InformationalEvent",
                  "OpenEvent",
                  "CloseEvent",
                  "StockSplitEvent",
                  "BondDefaultEvent",
                  "CashDividendEvent",
                  "AmortisationEvent",
                  "CashFlowEvent",
                  "ExerciseEvent",
                  "ResetEvent",
                  "TriggerEvent",
                  "RawVendorEvent",
                  "InformationalErrorEvent"
                ],
                "type": "string",
                "description": "The Type of Event. The available values are: TransitionEvent, InformationalEvent, OpenEvent, CloseEvent, StockSplitEvent, BondDefaultEvent, CashDividendEvent, AmortisationEvent, CashFlowEvent, ExerciseEvent, ResetEvent, TriggerEvent, RawVendorEvent, InformationalErrorEvent"
              }
            }
          }
        ],
        "description": "Definition of an Amortisation event.\r\nThis is an event that describes the occurence of amortisation."
      },
      "AnnulQuotesResponse": {
        "type": "object",
        "properties": {
          "href": {
            "type": "string",
            "description": "The specific Uniform Resource Identifier (URI) for this resource at the requested effective and asAt datetime.",
            "format": "uri",
            "nullable": true
          },
          "values": {
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "format": "date-time"
            },
            "description": "The quotes which have been successfully deleted along with the asAt datetime at which the deletion was committed to LUSID.",
            "nullable": true
          },
          "failed": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/ErrorDetail"
            },
            "description": "The quotes that could not be deleted along with a reason for their failure.",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "description": "Collection of links.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "AnnulSingleStructuredDataResponse": {
        "type": "object",
        "properties": {
          "href": {
            "type": "string",
            "description": "The specific Uniform Resource Identifier (URI) for this resource at the requested effective and asAt datetime.",
            "format": "uri",
            "nullable": true
          },
          "value": {
            "type": "string",
            "description": "The time at which the identifier was annulled",
            "format": "date-time"
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "description": "Collection of links.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "The response to a request to annul (delete) a set of structured data from Lusid. This might have been for market data or some other structured entity."
      },
      "AnnulStructuredDataResponse": {
        "type": "object",
        "properties": {
          "href": {
            "type": "string",
            "description": "The specific Uniform Resource Identifier (URI) for this resource at the requested effective and asAt datetime.",
            "format": "uri",
            "nullable": true
          },
          "values": {
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "format": "date-time"
            },
            "description": "The set of values that were removed.",
            "nullable": true
          },
          "failed": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/ErrorDetail"
            },
            "description": "The set of values where removal failed, with a description as to why that is the case, e.g. badly formed request",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "description": "Collection of links.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "The response to a request to annul (delete) a set of structured data from Lusid. This might have been for market data or some other structured entity."
      },
      "Barrier": {
        "required": [
          "direction",
          "level",
          "type"
        ],
        "type": "object",
        "properties": {
          "direction": {
            "minLength": 1,
            "type": "string",
            "description": "Supported string (enumeration) values are: [Down, Up]."
          },
          "level": {
            "type": "number",
            "description": "Trigger level, which the underlying should (or should not) cross/touch.",
            "format": "double"
          },
          "monitoring": {
            "type": "string",
            "description": "Supported string (enumeration) values are: [European, Bermudan, American].",
            "nullable": true
          },
          "type": {
            "minLength": 1,
            "type": "string",
            "description": "Supported string (enumeration) values are: [Knockin, Knockout]."
          }
        },
        "additionalProperties": false,
        "description": "Barrier class for exotic FxOption"
      },
      "Basket": {
        "allOf": [
          {
            "$ref": "#/components/schemas/LusidInstrument"
          },
          {
            "required": [
              "basketName",
              "basketType",
              "instrumentType",
              "weightedInstruments"
            ],
            "type": "object",
            "properties": {
              "basketName": {
                "$ref": "#/components/schemas/BasketIdentifier"
              },
              "basketType": {
                "minLength": 1,
                "type": "string",
                "description": "What contents does the basket have. The validation will check that the instrument types contained match those expected.\r\n\r\nSupported string (enumeration) values are: [Bonds, Credits, Equities, EquitySwap]."
              },
              "weightedInstruments": {
                "$ref": "#/components/schemas/WeightedInstruments"
              },
              "instrumentType": {
                "enum": [
                  "QuotedSecurity",
                  "InterestRateSwap",
                  "FxForward",
                  "Future",
                  "ExoticInstrument",
                  "FxOption",
                  "CreditDefaultSwap",
                  "InterestRateSwaption",
                  "Bond",
                  "EquityOption",
                  "FixedLeg",
                  "FloatingLeg",
                  "BespokeCashFlowsLeg",
                  "Unknown",
                  "TermDeposit",
                  "ContractForDifference",
                  "EquitySwap",
                  "CashPerpetual",
                  "CapFloor",
                  "CashSettled",
                  "CdsIndex",
                  "Basket",
                  "FundingLeg",
                  "FxSwap",
                  "ForwardRateAgreement",
                  "SimpleInstrument",
                  "Repo",
                  "Equity",
                  "ExchangeTradedOption",
                  "ReferenceInstrument",
                  "ComplexBond",
                  "InflationLinkedBond",
                  "InflationSwap",
                  "SimpleCashFlowLoan"
                ],
                "type": "string",
                "description": "The available values are: QuotedSecurity, InterestRateSwap, FxForward, Future, ExoticInstrument, FxOption, CreditDefaultSwap, InterestRateSwaption, Bond, EquityOption, FixedLeg, FloatingLeg, BespokeCashFlowsLeg, Unknown, TermDeposit, ContractForDifference, EquitySwap, CashPerpetual, CapFloor, CashSettled, CdsIndex, Basket, FundingLeg, FxSwap, ForwardRateAgreement, SimpleInstrument, Repo, Equity, ExchangeTradedOption, ReferenceInstrument, ComplexBond, InflationLinkedBond, InflationSwap, SimpleCashFlowLoan"
              }
            }
          }
        ],
        "description": "LUSID representation of a basket of instruments."
      },
      "BasketIdentifier": {
        "required": [
          "index",
          "name",
          "region",
          "seriesId"
        ],
        "type": "object",
        "properties": {
          "index": {
            "type": "string",
            "description": "Index set, e.g. iTraxx or CDX."
          },
          "name": {
            "type": "string",
            "description": "The index name within the set, e.g. \"MAIN\" or \"Crossover\"."
          },
          "region": {
            "type": "string",
            "description": "Applicable geographic country or region. Typically something like \"Europe\", \"Asia ex-Japan\", \"Japan\" or \"Australia\"."
          },
          "seriesId": {
            "type": "integer",
            "description": "The series identifier.",
            "format": "int32"
          }
        },
        "additionalProperties": false,
        "description": "Descriptive information that describes a particular basket of instruments. Most commonly required with a CDS Index or similarly defined instrument."
      },
      "BatchAdjustHoldingsResponse": {
        "type": "object",
        "properties": {
          "values": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/HoldingAdjustmentWithDate"
            },
            "description": "The holdings which have been successfully adjusted.",
            "nullable": true
          },
          "failed": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/ErrorDetail"
            },
            "description": "The holdings that could not be adjusted along with a reason for their failure.",
            "nullable": true
          },
          "metadata": {
            "type": "object",
            "additionalProperties": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/ResponseMetaData"
              }
            },
            "description": "Contains warnings related to adjusted holdings",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "description": "Collection of links.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "BatchUpsertPortfolioTransactionsResponse": {
        "type": "object",
        "properties": {
          "values": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/Transaction"
            },
            "description": "The transactions which have been successfully upserted.",
            "nullable": true
          },
          "failed": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/ErrorDetail"
            },
            "description": "The transactions that could not be upserted along with a reason for their failure.",
            "nullable": true
          },
          "metadata": {
            "type": "object",
            "additionalProperties": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/ResponseMetaData"
              }
            },
            "description": "Contains warnings related to unresolved instruments or non-existent transaction types for the upserted trades",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "description": "Collection of links.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "BatchUpsertPropertyDefinitionPropertiesResponse": {
        "required": [
          "asAtDate",
          "failed",
          "values"
        ],
        "type": "object",
        "properties": {
          "values": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/Property"
            },
            "description": "The properties that have been successfully upserted"
          },
          "failed": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/ErrorDetail"
            },
            "description": "The properties that could not be upserted along with a reason for their failure."
          },
          "asAtDate": {
            "type": "string",
            "description": "The as-at datetime at which properties were created or updated.",
            "format": "date-time"
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "description": "Collection of links.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Block": {
        "required": [
          "createdDate",
          "id",
          "instrumentIdentifiers",
          "lusidInstrumentId",
          "orderIds",
          "quantity",
          "side",
          "timeInForce",
          "type"
        ],
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/ResourceId"
          },
          "orderIds": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ResourceId"
            },
            "description": "The related order ids."
          },
          "properties": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/PerpetualProperty"
            },
            "description": "Client-defined properties associated with this block.",
            "nullable": true
          },
          "instrumentIdentifiers": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "The instrument ordered."
          },
          "lusidInstrumentId": {
            "minLength": 1,
            "type": "string",
            "description": "The LUSID instrument id for the instrument ordered."
          },
          "quantity": {
            "type": "number",
            "description": "The total quantity of given instrument ordered.",
            "format": "double"
          },
          "side": {
            "minLength": 1,
            "type": "string",
            "description": "The client's representation of the block's side (buy, sell, short, etc)"
          },
          "type": {
            "minLength": 1,
            "type": "string",
            "description": "The block order's type (examples: Limit, Market, ...)"
          },
          "timeInForce": {
            "minLength": 1,
            "type": "string",
            "description": "The block orders' time in force (examples: Day, GoodTilCancel, ...)"
          },
          "createdDate": {
            "type": "string",
            "description": "The date on which the block was made",
            "format": "date-time"
          },
          "limitPrice": {
            "$ref": "#/components/schemas/CurrencyAndAmount"
          },
          "stopPrice": {
            "$ref": "#/components/schemas/CurrencyAndAmount"
          },
          "version": {
            "$ref": "#/components/schemas/Version"
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "description": "Collection of links.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "A block of orders for the same instrument, intended to record for example a trader's aggregation\r\nof outstanding orders at a given time."
      },
      "BlockRequest": {
        "required": [
          "createdDate",
          "id",
          "instrumentIdentifiers",
          "orderIds",
          "quantity",
          "side",
          "timeInForce",
          "type"
        ],
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/ResourceId"
          },
          "orderIds": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ResourceId"
            },
            "description": "The related order ids."
          },
          "properties": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/PerpetualProperty"
            },
            "description": "Client-defined properties associated with this block.",
            "nullable": true
          },
          "instrumentIdentifiers": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "The instrument ordered."
          },
          "quantity": {
            "type": "number",
            "description": "The total quantity of given instrument ordered.",
            "format": "double"
          },
          "side": {
            "minLength": 1,
            "type": "string",
            "description": "The client's representation of the block's side (buy, sell, short, etc)"
          },
          "type": {
            "minLength": 1,
            "type": "string",
            "description": "The block order's type (examples: Limit, Market, ...)"
          },
          "timeInForce": {
            "minLength": 1,
            "type": "string",
            "description": "The block orders' time in force (examples: Day, GoodTilCancel, ...)"
          },
          "createdDate": {
            "type": "string",
            "description": "The date on which the block was made",
            "format": "date-time"
          },
          "limitPrice": {
            "$ref": "#/components/schemas/CurrencyAndAmount"
          },
          "stopPrice": {
            "$ref": "#/components/schemas/CurrencyAndAmount"
          }
        },
        "additionalProperties": false,
        "description": "A request to create or update an Order."
      },
      "BlockSetRequest": {
        "type": "object",
        "properties": {
          "requests": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BlockRequest"
            },
            "description": "A collection of BlockRequests.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "A request to create or update multiple Blocks."
      },
      "Bond": {
        "allOf": [
          {
            "$ref": "#/components/schemas/LusidInstrument"
          },
          {
            "required": [
              "couponRate",
              "domCcy",
              "flowConventions",
              "instrumentType",
              "maturityDate",
              "principal",
              "startDate"
            ],
            "type": "object",
            "properties": {
              "startDate": {
                "type": "string",
                "description": "The Start date of the bond, this is normally when accrual of the first coupon begins.",
                "format": "date-time"
              },
              "maturityDate": {
                "type": "string",
                "description": "The Maturity date of the bond, this is when the last coupon accrual period ends.\r\nNote that while most bonds have their last payment on this date there are some cases where the final payment is the next working day.",
                "format": "date-time"
              },
              "domCcy": {
                "type": "string",
                "description": "The domestic currency of the instrument. This should be the same as the Currency set on the FlowConventions."
              },
              "flowConventions": {
                "$ref": "#/components/schemas/FlowConventions"
              },
              "principal": {
                "type": "number",
                "description": "The face-value or principal for the bond at outset.\r\nThis might be reduced through its lifetime in the event of amortisation or similar.",
                "format": "double"
              },
              "couponRate": {
                "type": "number",
                "description": "Simple coupon rate.",
                "format": "double"
              },
              "identifiers": {
                "type": "object",
                "additionalProperties": {
                  "type": "string"
                },
                "description": "External market codes and identifiers for the bond, e.g. ISIN.",
                "nullable": true
              },
              "exDividendDays": {
                "type": "integer",
                "description": "Optional. Number of calendar days in the ex-dividend period,\r\nif the settlement date falls in the ex-dividend period then the coupon paid is zero and the accrued interest is negative.\r\nIf set, this must be a non-negative number.\r\nIf not set, or set to 0, than there is no ex-dividend period.",
                "format": "int32",
                "nullable": true
              },
              "initialCouponDate": {
                "type": "string",
                "description": "Optional. If set, this is the date at which the bond begins to accrue interest, if not set then the bond begins to accrue on the StartDate.",
                "format": "date-time",
                "nullable": true
              },
              "firstCouponPayDate": {
                "type": "string",
                "description": "The date that the first coupon of the bond is paid. This is required for bonds that have a long first coupon or short first coupon. The first coupon pay date is used\r\nas an anchor to compare with the start date and determine if this is a long/short coupon period.",
                "format": "date-time",
                "nullable": true
              },
              "calculationType": {
                "type": "string",
                "description": "The calculation type applied to the bond coupon amount. This is required for bonds that have a particular type of computing the period coupon, such as simple compounding,\r\nirregular coupons etc.\r\nThe default CalculationType is `Standard`, which returns a coupon amount equal to Principal * Coupon Rate / Coupon Frequency. Coupon Frequency is 12M / Payment Frequency.\r\nPayment Frequency can be 1M, 3M, 6M, 12M etc. So Coupon Frequency can be 12, 4, 2, 1 respectively.\r\n\r\nSupported string (enumeration) values are: [Standard, DayCountCoupon, NoCalculationFloater, BrazilFixedCoupon].",
                "nullable": true
              },
              "roundingConventions": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/RoundingConvention"
                },
                "description": "Rounding conventions for analytics, if any.",
                "nullable": true
              },
              "instrumentType": {
                "enum": [
                  "QuotedSecurity",
                  "InterestRateSwap",
                  "FxForward",
                  "Future",
                  "ExoticInstrument",
                  "FxOption",
                  "CreditDefaultSwap",
                  "InterestRateSwaption",
                  "Bond",
                  "EquityOption",
                  "FixedLeg",
                  "FloatingLeg",
                  "BespokeCashFlowsLeg",
                  "Unknown",
                  "TermDeposit",
                  "ContractForDifference",
                  "EquitySwap",
                  "CashPerpetual",
                  "CapFloor",
                  "CashSettled",
                  "CdsIndex",
                  "Basket",
                  "FundingLeg",
                  "FxSwap",
                  "ForwardRateAgreement",
                  "SimpleInstrument",
                  "Repo",
                  "Equity",
                  "ExchangeTradedOption",
                  "ReferenceInstrument",
                  "ComplexBond",
                  "InflationLinkedBond",
                  "InflationSwap",
                  "SimpleCashFlowLoan"
                ],
                "type": "string",
                "description": "The available values are: QuotedSecurity, InterestRateSwap, FxForward, Future, ExoticInstrument, FxOption, CreditDefaultSwap, InterestRateSwaption, Bond, EquityOption, FixedLeg, FloatingLeg, BespokeCashFlowsLeg, Unknown, TermDeposit, ContractForDifference, EquitySwap, CashPerpetual, CapFloor, CashSettled, CdsIndex, Basket, FundingLeg, FxSwap, ForwardRateAgreement, SimpleInstrument, Repo, Equity, ExchangeTradedOption, ReferenceInstrument, ComplexBond, InflationLinkedBond, InflationSwap, SimpleCashFlowLoan"
              }
            }
          }
        ],
        "description": "LUSID representation of a Vanilla Fixed Rate Bond."
      },
      "BondDefaultEvent": {
        "allOf": [
          {
            "$ref": "#/components/schemas/InstrumentEvent"
          },
          {
            "required": [
              "amount",
              "couponPaidDate",
              "defaultStatus",
              "defaultType",
              "graceEndDate",
              "instrumentEventType",
              "paymentDate"
            ],
            "type": "object",
            "properties": {
              "amount": {
                "type": "number",
                "description": "Percentage or amount of each share held to be given to shareholders.",
                "format": "double"
              },
              "couponPaidDate": {
                "type": "string",
                "description": "Date that the missed coupon is paid if payment is made within grace period.",
                "format": "date-time"
              },
              "defaultStatus": {
                "minLength": 1,
                "type": "string",
                "description": "The status of the bond default (i.e., technical or default)\r\n\r\nSupported string (enumeration) values are: [Technical, Default]."
              },
              "defaultType": {
                "minLength": 1,
                "type": "string",
                "description": "The type of the default. (coupon payment, principal payment, covenant ...)\r\n\r\nSupported string (enumeration) values are: [CouponPayment, CouponAndPrincipalPayment, PrincipalPayment, Covenant, Bankruptcy, BuyBackOption]."
              },
              "graceEndDate": {
                "type": "string",
                "description": "Date the grace period for making coupon payment ends.",
                "format": "date-time"
              },
              "paymentDate": {
                "type": "string",
                "description": "The date the coupon payment was missed.",
                "format": "date-time"
              },
              "instrumentEventType": {
                "enum": [
                  "TransitionEvent",
                  "InformationalEvent",
                  "OpenEvent",
                  "CloseEvent",
                  "StockSplitEvent",
                  "BondDefaultEvent",
                  "CashDividendEvent",
                  "AmortisationEvent",
                  "CashFlowEvent",
                  "ExerciseEvent",
                  "ResetEvent",
                  "TriggerEvent",
                  "RawVendorEvent",
                  "InformationalErrorEvent"
                ],
                "type": "string",
                "description": "The Type of Event. The available values are: TransitionEvent, InformationalEvent, OpenEvent, CloseEvent, StockSplitEvent, BondDefaultEvent, CashDividendEvent, AmortisationEvent, CashFlowEvent, ExerciseEvent, ResetEvent, TriggerEvent, RawVendorEvent, InformationalErrorEvent"
              }
            }
          }
        ],
        "description": "Indicates when an issuer has defaulted on an obligation due to technical default, missed payments, or bankruptcy filing."
      },
      "Calendar": {
        "required": [
          "id",
          "properties",
          "sourceProvider",
          "type",
          "weekendMask"
        ],
        "type": "object",
        "properties": {
          "href": {
            "type": "string",
            "format": "uri",
            "nullable": true
          },
          "id": {
            "$ref": "#/components/schemas/ResourceId"
          },
          "type": {
            "minLength": 1,
            "type": "string"
          },
          "weekendMask": {
            "$ref": "#/components/schemas/WeekendMask"
          },
          "sourceProvider": {
            "minLength": 1,
            "type": "string"
          },
          "properties": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Property"
            }
          }
        },
        "additionalProperties": false
      },
      "CalendarDate": {
        "required": [
          "dateIdentifier",
          "description",
          "fromUtc",
          "localDate",
          "timezone",
          "toUtc",
          "type"
        ],
        "type": "object",
        "properties": {
          "href": {
            "type": "string",
            "format": "uri",
            "nullable": true
          },
          "dateIdentifier": {
            "minLength": 1,
            "type": "string"
          },
          "fromUtc": {
            "type": "string",
            "format": "date-time"
          },
          "toUtc": {
            "type": "string",
            "format": "date-time"
          },
          "localDate": {
            "minLength": 1,
            "type": "string"
          },
          "timezone": {
            "minLength": 1,
            "type": "string"
          },
          "description": {
            "minLength": 1,
            "type": "string"
          },
          "type": {
            "minLength": 1,
            "type": "string"
          },
          "attributes": {
            "$ref": "#/components/schemas/DateAttributes"
          },
          "sourceData": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CapFloor": {
        "allOf": [
          {
            "$ref": "#/components/schemas/LusidInstrument"
          },
          {
            "required": [
              "capFloorType",
              "capStrike",
              "floorStrike",
              "includeFirstCaplet",
              "instrumentType",
              "underlyingFloatingLeg"
            ],
            "type": "object",
            "properties": {
              "capFloorType": {
                "minLength": 1,
                "type": "string",
                "description": "Determine if it's CAP, FLOOR, or COLLAR.\r\n\r\nSupported string (enumeration) values are: [Cap, Floor, Collar]."
              },
              "capStrike": {
                "type": "number",
                "description": "Strike rate of the Cap.",
                "format": "double"
              },
              "floorStrike": {
                "type": "number",
                "description": "Strike rate of the Floor.",
                "format": "double"
              },
              "includeFirstCaplet": {
                "type": "boolean",
                "description": "Include first caplet flag."
              },
              "underlyingFloatingLeg": {
                "$ref": "#/components/schemas/FloatingLeg"
              },
              "instrumentType": {
                "enum": [
                  "QuotedSecurity",
                  "InterestRateSwap",
                  "FxForward",
                  "Future",
                  "ExoticInstrument",
                  "FxOption",
                  "CreditDefaultSwap",
                  "InterestRateSwaption",
                  "Bond",
                  "EquityOption",
                  "FixedLeg",
                  "FloatingLeg",
                  "BespokeCashFlowsLeg",
                  "Unknown",
                  "TermDeposit",
                  "ContractForDifference",
                  "EquitySwap",
                  "CashPerpetual",
                  "CapFloor",
                  "CashSettled",
                  "CdsIndex",
                  "Basket",
                  "FundingLeg",
                  "FxSwap",
                  "ForwardRateAgreement",
                  "SimpleInstrument",
                  "Repo",
                  "Equity",
                  "ExchangeTradedOption",
                  "ReferenceInstrument",
                  "ComplexBond",
                  "InflationLinkedBond",
                  "InflationSwap",
                  "SimpleCashFlowLoan"
                ],
                "type": "string",
                "description": "The available values are: QuotedSecurity, InterestRateSwap, FxForward, Future, ExoticInstrument, FxOption, CreditDefaultSwap, InterestRateSwaption, Bond, EquityOption, FixedLeg, FloatingLeg, BespokeCashFlowsLeg, Unknown, TermDeposit, ContractForDifference, EquitySwap, CashPerpetual, CapFloor, CashSettled, CdsIndex, Basket, FundingLeg, FxSwap, ForwardRateAgreement, SimpleInstrument, Repo, Equity, ExchangeTradedOption, ReferenceInstrument, ComplexBond, InflationLinkedBond, InflationSwap, SimpleCashFlowLoan"
              }
            }
          }
        ],
        "description": "LUSID representation of Cap, Floor, or Collar."
      },
      "CashDependency": {
        "allOf": [
          {
            "$ref": "#/components/schemas/EconomicDependency"
          },
          {
            "required": [
              "currency",
              "date",
              "dependencyType"
            ],
            "type": "object",
            "properties": {
              "currency": {
                "type": "string",
                "description": "The Currency that is depended upon."
              },
              "date": {
                "type": "string",
                "description": "The effectiveDate of the entity that this is a dependency for.\r\nUnless there is an obvious date this should be, like for a historic reset, then this is the valuation date.",
                "format": "date-time"
              },
              "dependencyType": {
                "enum": [
                  "OpaqueDependency",
                  "CashDependency",
                  "DiscountingDependency",
                  "EquityCurveDependency",
                  "EquityVolDependency",
                  "FxDependency",
                  "FxForwardsDependency",
                  "FxVolDependency",
                  "IndexProjectionDependency",
                  "IrVolDependency",
                  "QuoteDependency",
                  "Vendor"
                ],
                "type": "string",
                "description": "The available values are: OpaqueDependency, CashDependency, DiscountingDependency, EquityCurveDependency, EquityVolDependency, FxDependency, FxForwardsDependency, FxVolDependency, IndexProjectionDependency, IrVolDependency, QuoteDependency, Vendor"
              }
            }
          }
        ],
        "description": "For indicating a dependency upon a currency.\r\nE.g. A Bond will declare a CashDependency for its domestic currency."
      },
      "CashDividendEvent": {
        "allOf": [
          {
            "$ref": "#/components/schemas/InstrumentEvent"
          },
          {
            "required": [
              "grossAmount",
              "instrumentEventType",
              "paymentDate",
              "recordDate"
            ],
            "type": "object",
            "properties": {
              "grossAmount": {
                "type": "number",
                "description": "The before tax amount for each share held being paid out to shareholders.",
                "format": "double"
              },
              "paymentDate": {
                "type": "string",
                "description": "The date the company pays out dividends to shareholders.",
                "format": "date-time"
              },
              "recordDate": {
                "type": "string",
                "description": "Date you have to be the holder of record in order to participate in the tender.",
                "format": "date-time"
              },
              "instrumentEventType": {
                "enum": [
                  "TransitionEvent",
                  "InformationalEvent",
                  "OpenEvent",
                  "CloseEvent",
                  "StockSplitEvent",
                  "BondDefaultEvent",
                  "CashDividendEvent",
                  "AmortisationEvent",
                  "CashFlowEvent",
                  "ExerciseEvent",
                  "ResetEvent",
                  "TriggerEvent",
                  "RawVendorEvent",
                  "InformationalErrorEvent"
                ],
                "type": "string",
                "description": "The Type of Event. The available values are: TransitionEvent, InformationalEvent, OpenEvent, CloseEvent, StockSplitEvent, BondDefaultEvent, CashDividendEvent, AmortisationEvent, CashFlowEvent, ExerciseEvent, ResetEvent, TriggerEvent, RawVendorEvent, InformationalErrorEvent"
              }
            }
          }
        ],
        "description": "A cash distribution paid out to shareholders."
      },
      "CashFlowEvent": {
        "allOf": [
          {
            "$ref": "#/components/schemas/InstrumentEvent"
          },
          {
            "required": [
              "cashFlowValue",
              "eventStatus",
              "eventType",
              "instrumentEventType"
            ],
            "type": "object",
            "properties": {
              "cashFlowValue": {
                "$ref": "#/components/schemas/CashFlowValue"
              },
              "eventType": {
                "minLength": 1,
                "type": "string",
                "description": "What type of internal event does this represent; coupon, principal, premium etc.",
                "readOnly": true
              },
              "eventStatus": {
                "minLength": 1,
                "type": "string",
                "description": "What is the event status, is it a known (ie historic) or unknown (ie projected) event?"
              },
              "instrumentEventType": {
                "enum": [
                  "TransitionEvent",
                  "InformationalEvent",
                  "OpenEvent",
                  "CloseEvent",
                  "StockSplitEvent",
                  "BondDefaultEvent",
                  "CashDividendEvent",
                  "AmortisationEvent",
                  "CashFlowEvent",
                  "ExerciseEvent",
                  "ResetEvent",
                  "TriggerEvent",
                  "RawVendorEvent",
                  "InformationalErrorEvent"
                ],
                "type": "string",
                "description": "The Type of Event. The available values are: TransitionEvent, InformationalEvent, OpenEvent, CloseEvent, StockSplitEvent, BondDefaultEvent, CashDividendEvent, AmortisationEvent, CashFlowEvent, ExerciseEvent, ResetEvent, TriggerEvent, RawVendorEvent, InformationalErrorEvent"
              }
            }
          }
        ],
        "description": "Definition of a CashFlow event.\r\nThis is an event that describes the occurence of a cashflow and associated information."
      },
      "CashFlowLineage": {
        "type": "object",
        "properties": {
          "instrumentType": {
            "type": "string",
            "description": "The instrument type of the instrument to which the cash flow belongs to. When upserting CashFlowValues, this\r\nshould be null.",
            "nullable": true
          },
          "cashFlowType": {
            "type": "string",
            "description": "The cashflow type.When upserting CashFlowValues, this should be null, or one of [Unknown, Coupon, Notional,\r\nPremium, Principal, Protection, Cash]",
            "nullable": true
          },
          "instrumentId": {
            "type": "string",
            "description": "The LUID of the instrument to which the cash flow belongs to. When upserting this should be null.",
            "nullable": true
          },
          "legId": {
            "type": "string",
            "description": "The leg id to which the cash flow belongs to.",
            "nullable": true
          },
          "sourceTransactionId": {
            "type": "string",
            "description": "The source transaction of the instrument to which the cash flow belongs to. When upserting this should be null",
            "nullable": true
          },
          "payReceive": {
            "type": "string",
            "description": "Does the cash flow belong to the Pay or Receive leg. When upserting this should either be null or one of [Pay, Receive, NotApplicable]",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Lineage for cash flow value"
      },
      "CashFlowValue": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ResultValue"
          },
          {
            "required": [
              "paymentAmount",
              "paymentCcy",
              "paymentDate",
              "resultValueType"
            ],
            "type": "object",
            "properties": {
              "paymentDate": {
                "type": "string",
                "description": "The payment date of the cash flow",
                "format": "date-time"
              },
              "diagnostics": {
                "$ref": "#/components/schemas/ResultValueDictionary"
              },
              "cashFlowLineage": {
                "$ref": "#/components/schemas/CashFlowLineage"
              },
              "paymentAmount": {
                "type": "number",
                "description": "The amount paid or received",
                "format": "double"
              },
              "paymentCcy": {
                "type": "string",
                "description": "The currency of the transaction"
              },
              "resultValueType": {
                "enum": [
                  "ResultValue",
                  "ResultValueDictionary",
                  "ResultValue0D",
                  "ResultValueDecimal",
                  "ResultValueInt",
                  "ResultValueString",
                  "ResultValueBool",
                  "ResultValueCurrency",
                  "CashFlowValue",
                  "CashFlowValueSet",
                  "ResultValueLifeCycleEventValue",
                  "ResultValueDateTimeOffset"
                ],
                "type": "string",
                "description": "The available values are: ResultValue, ResultValueDictionary, ResultValue0D, ResultValueDecimal, ResultValueInt, ResultValueString, ResultValueBool, ResultValueCurrency, CashFlowValue, CashFlowValueSet, ResultValueLifeCycleEventValue, ResultValueDateTimeOffset"
              }
            }
          }
        ],
        "description": "Result class for a cash flow value"
      },
      "CashFlowValueSet": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ResultValue"
          },
          {
            "required": [
              "resultValueType"
            ],
            "type": "object",
            "properties": {
              "cashflows": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/CashFlowValue"
                },
                "description": "The set of cash flows in the result",
                "nullable": true
              },
              "resultValueType": {
                "enum": [
                  "ResultValue",
                  "ResultValueDictionary",
                  "ResultValue0D",
                  "ResultValueDecimal",
                  "ResultValueInt",
                  "ResultValueString",
                  "ResultValueBool",
                  "ResultValueCurrency",
                  "CashFlowValue",
                  "CashFlowValueSet",
                  "ResultValueLifeCycleEventValue",
                  "ResultValueDateTimeOffset"
                ],
                "type": "string",
                "description": "The available values are: ResultValue, ResultValueDictionary, ResultValue0D, ResultValueDecimal, ResultValueInt, ResultValueString, ResultValueBool, ResultValueCurrency, CashFlowValue, CashFlowValueSet, ResultValueLifeCycleEventValue, ResultValueDateTimeOffset"
              }
            }
          }
        ],
        "description": "Result value for a collection of cash flow values"
      },
      "CashLadderRecord": {
        "required": [
          "activities",
          "close",
          "open"
        ],
        "type": "object",
        "properties": {
          "effectiveDate": {
            "type": "string",
            "format": "date-time"
          },
          "open": {
            "type": "number",
            "format": "double"
          },
          "activities": {
            "type": "object",
            "additionalProperties": {
              "type": "number",
              "format": "double"
            }
          },
          "close": {
            "type": "number",
            "format": "double"
          }
        },
        "additionalProperties": false
      },
      "CashPerpetual": {
        "allOf": [
          {
            "$ref": "#/components/schemas/LusidInstrument"
          },
          {
            "required": [
              "domCcy",
              "instrumentType",
              "principal",
              "startDate"
            ],
            "type": "object",
            "properties": {
              "startDate": {
                "type": "string",
                "description": "The start date of the instrument. This is normally synonymous with the trade-date.",
                "format": "date-time"
              },
              "domCcy": {
                "type": "string",
                "description": "The domestic currency of the instrument."
              },
              "principal": {
                "type": "number",
                "description": "The face-value or principal for the cash at outset.",
                "format": "double"
              },
              "instrumentType": {
                "enum": [
                  "QuotedSecurity",
                  "InterestRateSwap",
                  "FxForward",
                  "Future",
                  "ExoticInstrument",
                  "FxOption",
                  "CreditDefaultSwap",
                  "InterestRateSwaption",
                  "Bond",
                  "EquityOption",
                  "FixedLeg",
                  "FloatingLeg",
                  "BespokeCashFlowsLeg",
                  "Unknown",
                  "TermDeposit",
                  "ContractForDifference",
                  "EquitySwap",
                  "CashPerpetual",
                  "CapFloor",
                  "CashSettled",
                  "CdsIndex",
                  "Basket",
                  "FundingLeg",
                  "FxSwap",
                  "ForwardRateAgreement",
                  "SimpleInstrument",
                  "Repo",
                  "Equity",
                  "ExchangeTradedOption",
                  "ReferenceInstrument",
                  "ComplexBond",
                  "InflationLinkedBond",
                  "InflationSwap",
                  "SimpleCashFlowLoan"
                ],
                "type": "string",
                "description": "The available values are: QuotedSecurity, InterestRateSwap, FxForward, Future, ExoticInstrument, FxOption, CreditDefaultSwap, InterestRateSwaption, Bond, EquityOption, FixedLeg, FloatingLeg, BespokeCashFlowsLeg, Unknown, TermDeposit, ContractForDifference, EquitySwap, CashPerpetual, CapFloor, CashSettled, CdsIndex, Basket, FundingLeg, FxSwap, ForwardRateAgreement, SimpleInstrument, Repo, Equity, ExchangeTradedOption, ReferenceInstrument, ComplexBond, InflationLinkedBond, InflationSwap, SimpleCashFlowLoan"
              }
            }
          }
        ],
        "description": "LUSID representation of a Perpetual Cash Flow."
      },
      "CdsFlowConventions": {
        "required": [
          "currency",
          "dayCountConvention",
          "paymentCalendars",
          "paymentFrequency",
          "resetCalendars",
          "resetDays",
          "rollConvention",
          "settleDays"
        ],
        "type": "object",
        "properties": {
          "rollFrequency": {
            "maxLength": 16,
            "minLength": 0,
            "type": "string",
            "description": "The frequency at which the reference bonds are updated, this defaults to 6M, but can be 3M, exp for historically issued products",
            "nullable": true
          },
          "currency": {
            "type": "string",
            "description": "Currency of the flow convention."
          },
          "paymentFrequency": {
            "maxLength": 50,
            "minLength": 0,
            "type": "string",
            "description": "When generating a multiperiod flow, or when the maturity of the flow is not given but the start date is,\r\nthe tenor is the time-step from the anchor-date to the nominal maturity of the flow prior to any adjustment."
          },
          "dayCountConvention": {
            "maxLength": 50,
            "minLength": 0,
            "type": "string",
            "description": "when calculating the fraction of a year between two dates, what convention is used to represent the number of days in a year\r\nand difference between them.\r\nFor more information on day counts, see [knowledge base article KA-01798](https://support.lusid.com/knowledgebase/article/KA-01798)\r\n            \r\nSupported string (enumeration) values are: [Actual360, Act360, MoneyMarket, Actual365, Act365, Thirty360, ThirtyU360, Bond, ThirtyE360, EuroBond, ActualActual, ActAct, ActActIsda, ActActIsma, ActActIcma, OneOne, Act364, Act365F, Act365L, Act365_25, Act252, Bus252, NL360, NL365, ActActAFB, Act365Cad, ThirtyActIsda, Thirty365Isda, ThirtyEActIsda, ThirtyE360Isda, ThirtyE365Isda, ThirtyU360EOM]."
          },
          "rollConvention": {
            "maxLength": 50,
            "minLength": 0,
            "type": "string",
            "description": "When generating a set of dates, what convention should be used for adjusting dates that coincide with a non-business day.\r\n\r\nSupported string (enumeration) values are: [NoAdjustment, None, Previous, P, Following, F, ModifiedPrevious, MP, ModifiedFollowing, MF, EndOfMonth, EOM, EndOfMonthPrevious, EOMP, EndOfMonthFollowing, EOMF, HalfMonthModifiedFollowing]."
          },
          "paymentCalendars": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "An array of strings denoting holiday calendars that apply to generation of payment schedules."
          },
          "resetCalendars": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "An array of strings denoting holiday calendars that apply to generation of reset schedules."
          },
          "settleDays": {
            "type": "integer",
            "description": "Number of Good Business Days between the trade date and the effective or settlement date of the instrument.",
            "format": "int32"
          },
          "resetDays": {
            "type": "integer",
            "description": "The number of Good Business Days between determination and payment of reset.",
            "format": "int32"
          },
          "scope": {
            "maxLength": 256,
            "minLength": 1,
            "pattern": "^[a-zA-Z0-9\\-_]+$",
            "type": "string",
            "description": "The scope used when updating or inserting the convention.",
            "nullable": true
          },
          "code": {
            "maxLength": 256,
            "minLength": 1,
            "pattern": "^[a-zA-Z0-9\\-_]+$",
            "type": "string",
            "description": "The code of the convention.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CdsIndex": {
        "allOf": [
          {
            "$ref": "#/components/schemas/LusidInstrument"
          },
          {
            "required": [
              "basket",
              "couponRate",
              "identifiers",
              "instrumentType",
              "maturityDate",
              "notional",
              "startDate"
            ],
            "type": "object",
            "properties": {
              "startDate": {
                "type": "string",
                "description": "The start date of the instrument. This is normally synonymous with the trade-date.",
                "format": "date-time"
              },
              "maturityDate": {
                "type": "string",
                "description": "The final maturity date of the instrument. This means the last date on which the instruments makes a payment of any amount.\r\nFor the avoidance of doubt, that is not necessarily prior to its last sensitivity date for the purposes of risk; e.g. instruments such as\r\nConstant Maturity Swaps (CMS) often have sensitivities to rates that may well be observed or set prior to the maturity date, but refer to a termination date beyond it.",
                "format": "date-time"
              },
              "flowConventions": {
                "$ref": "#/components/schemas/CdsFlowConventions"
              },
              "couponRate": {
                "type": "number",
                "description": "The coupon rate paid on each payment date of the premium leg as a fraction of 100 percent, e.g. \"0.05\" meaning 500 basis points or 5%.\r\nFor a standard corporate CDS (North American) this must be either 100bps or 500bps.",
                "format": "double"
              },
              "identifiers": {
                "type": "object",
                "additionalProperties": {
                  "type": "string"
                },
                "description": "External market codes and identifiers for the cds index, e.g. a RED code, BBG ID or ICE code."
              },
              "basket": {
                "$ref": "#/components/schemas/Basket"
              },
              "conventionName": {
                "$ref": "#/components/schemas/FlowConventionName"
              },
              "notional": {
                "type": "number",
                "description": "The notional quantity that applies to both the premium and protection legs.",
                "format": "double"
              },
              "instrumentType": {
                "enum": [
                  "QuotedSecurity",
                  "InterestRateSwap",
                  "FxForward",
                  "Future",
                  "ExoticInstrument",
                  "FxOption",
                  "CreditDefaultSwap",
                  "InterestRateSwaption",
                  "Bond",
                  "EquityOption",
                  "FixedLeg",
                  "FloatingLeg",
                  "BespokeCashFlowsLeg",
                  "Unknown",
                  "TermDeposit",
                  "ContractForDifference",
                  "EquitySwap",
                  "CashPerpetual",
                  "CapFloor",
                  "CashSettled",
                  "CdsIndex",
                  "Basket",
                  "FundingLeg",
                  "FxSwap",
                  "ForwardRateAgreement",
                  "SimpleInstrument",
                  "Repo",
                  "Equity",
                  "ExchangeTradedOption",
                  "ReferenceInstrument",
                  "ComplexBond",
                  "InflationLinkedBond",
                  "InflationSwap",
                  "SimpleCashFlowLoan"
                ],
                "type": "string",
                "description": "The available values are: QuotedSecurity, InterestRateSwap, FxForward, Future, ExoticInstrument, FxOption, CreditDefaultSwap, InterestRateSwaption, Bond, EquityOption, FixedLeg, FloatingLeg, BespokeCashFlowsLeg, Unknown, TermDeposit, ContractForDifference, EquitySwap, CashPerpetual, CapFloor, CashSettled, CdsIndex, Basket, FundingLeg, FxSwap, ForwardRateAgreement, SimpleInstrument, Repo, Equity, ExchangeTradedOption, ReferenceInstrument, ComplexBond, InflationLinkedBond, InflationSwap, SimpleCashFlowLoan"
              }
            }
          }
        ],
        "description": "LUSID representation of a Credit Default Swap Index (CDX)."
      },
      "CdsProtectionDetailSpecification": {
        "required": [
          "payAccruedInterestOnDefault",
          "protectStartDay",
          "restructuringType",
          "seniority"
        ],
        "type": "object",
        "properties": {
          "seniority": {
            "minLength": 1,
            "type": "string",
            "description": "The seniority level of the CDS.\r\n\r\nSupported string (enumeration) values are: [SNR, SUB, JRSUBUT2, PREFT1, SECDOM, SNRFOR, SUBLT2]."
          },
          "restructuringType": {
            "minLength": 1,
            "type": "string",
            "description": "The restructuring clause.\r\nSupported string (enumeration) values are: [CR, MR, MM, XR]."
          },
          "protectStartDay": {
            "type": "boolean",
            "description": "Does the protection leg pay out in the case of default on the start date."
          },
          "payAccruedInterestOnDefault": {
            "type": "boolean",
            "description": "Should accrued interest on the premium leg be paid if a credit event occurs."
          }
        },
        "additionalProperties": false,
        "description": "CDSs generally conform to fairly standard definitions, but can be tweaked in a number of different ways.\r\nThis class gathers a number of common features which may deviate. These will default to the market standard when\r\nno overrides are provided."
      },
      "Change": {
        "required": [
          "amended",
          "corrected",
          "entityId"
        ],
        "type": "object",
        "properties": {
          "href": {
            "type": "string",
            "format": "uri",
            "nullable": true
          },
          "entityId": {
            "$ref": "#/components/schemas/ResourceId"
          },
          "corrected": {
            "type": "boolean",
            "description": ""
          },
          "correctionEffectiveAt": {
            "type": "string",
            "description": "",
            "format": "date-time",
            "nullable": true
          },
          "correctionAsAt": {
            "type": "string",
            "description": "",
            "format": "date-time",
            "nullable": true
          },
          "amended": {
            "type": "boolean",
            "description": ""
          },
          "amendmentEffectiveAt": {
            "type": "string",
            "description": "",
            "format": "date-time",
            "nullable": true
          },
          "amendmentAsAt": {
            "type": "string",
            "description": "",
            "format": "date-time",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "description": "Collection of links.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "The time an entity was modified (amendment and/or historical correction)."
      },
      "ChangeHistory": {
        "required": [
          "action",
          "changes",
          "modifiedAsAt",
          "requestId",
          "userId"
        ],
        "type": "object",
        "properties": {
          "userId": {
            "minLength": 1,
            "type": "string",
            "description": "The unique identifier of the user that made the change."
          },
          "modifiedAsAt": {
            "type": "string",
            "description": "The date/time of the change.",
            "format": "date-time"
          },
          "requestId": {
            "minLength": 1,
            "type": "string",
            "description": "The unique identifier of the request that the changes were part of."
          },
          "action": {
            "enum": [
              "Create",
              "Update",
              "Delete"
            ],
            "type": "string",
            "description": "The action performed on the transaction, either created, updated, or deleted. The available values are: Create, Update, Delete"
          },
          "changes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ChangeItem"
            },
            "description": "The collection of changes that were made."
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "description": "Collection of links.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "A group of changes made by the same person at the same time."
      },
      "ChangeItem": {
        "required": [
          "fieldName"
        ],
        "type": "object",
        "properties": {
          "fieldName": {
            "minLength": 1,
            "type": "string",
            "description": "The name of the field or property that has been changed."
          },
          "previousValue": {
            "type": "string",
            "description": "The previous value for this field / property.",
            "nullable": true
          },
          "newValue": {
            "type": "string",
            "description": "The new value for this field / property.",
            "nullable": true
          },
          "effectiveFrom": {
            "type": "string",
            "description": "The market data time, i.e. the time to run the change from.",
            "format": "date-time",
            "nullable": true
          },
          "effectiveUntil": {
            "type": "string",
            "description": "The market data time, i.e. the time to run the change until.",
            "format": "date-time",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Information about a change to a field / property.\r\nAt least one of 'PreviousValue' or 'NewValue' will be set."
      },
      "CloseEvent": {
        "allOf": [
          {
            "$ref": "#/components/schemas/InstrumentEvent"
          },
          {
            "required": [
              "instrumentEventType"
            ],
            "type": "object",
            "properties": {
              "startDate": {
                "type": "string",
                "description": "The first date on which the instrument could close",
                "format": "date-time"
              },
              "endDate": {
                "type": "string",
                "description": "The last date on which the instrument could close",
                "format": "date-time"
              },
              "instrumentEventType": {
                "enum": [
                  "TransitionEvent",
                  "InformationalEvent",
                  "OpenEvent",
                  "CloseEvent",
                  "StockSplitEvent",
                  "BondDefaultEvent",
                  "CashDividendEvent",
                  "AmortisationEvent",
                  "CashFlowEvent",
                  "ExerciseEvent",
                  "ResetEvent",
                  "TriggerEvent",
                  "RawVendorEvent",
                  "InformationalErrorEvent"
                ],
                "type": "string",
                "description": "The Type of Event. The available values are: TransitionEvent, InformationalEvent, OpenEvent, CloseEvent, StockSplitEvent, BondDefaultEvent, CashDividendEvent, AmortisationEvent, CashFlowEvent, ExerciseEvent, ResetEvent, TriggerEvent, RawVendorEvent, InformationalErrorEvent"
              }
            }
          }
        ],
        "description": "The termination of an instrument.\r\nIn some cases termination can happen over a range of dates e.g. american option exercise.\r\nIn most cases the startDate == endDate"
      },
      "CompletePortfolio": {
        "required": [
          "id",
          "version"
        ],
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/ResourceId"
          },
          "href": {
            "type": "string",
            "description": "The specific Uniform Resource Identifier (URI) for this resource at the requested effective and asAt datetime.",
            "format": "uri",
            "nullable": true
          },
          "description": {
            "type": "string",
            "description": "The long form description of the portfolio.",
            "nullable": true
          },
          "displayName": {
            "type": "string",
            "description": "The name of the portfolio.",
            "nullable": true
          },
          "created": {
            "type": "string",
            "description": "The effective datetime at which the portfolio was created. No transactions or constituents can be added to the portfolio before this date.",
            "format": "date-time"
          },
          "parentPortfolioId": {
            "$ref": "#/components/schemas/ResourceId"
          },
          "isDerived": {
            "type": "boolean",
            "description": "Whether or not this is a derived portfolio.",
            "readOnly": true
          },
          "type": {
            "enum": [
              "Transaction",
              "Reference",
              "DerivedTransaction"
            ],
            "type": "string",
            "description": "The type of the portfolio. The available values are: Transaction, Reference, DerivedTransaction"
          },
          "version": {
            "$ref": "#/components/schemas/Version"
          },
          "properties": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Property"
            },
            "description": "The requested portfolio properties. These will be from the 'Portfolio' domain.",
            "nullable": true
          },
          "baseCurrency": {
            "type": "string",
            "description": "If the portfolio is a transaction portfolio or derived transaction portfolio, this is the base currency of the portfolio.",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "description": "Collection of links.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CompleteRelationship": {
        "required": [
          "inwardDescription",
          "outwardDescription",
          "relationshipDefinitionId",
          "sourceEntity",
          "targetEntity"
        ],
        "type": "object",
        "properties": {
          "href": {
            "type": "string",
            "description": "The specific Uniform Resource Identifier (URI) for this resource at the requested effective and asAt datetime.",
            "format": "uri",
            "nullable": true
          },
          "version": {
            "$ref": "#/components/schemas/Version"
          },
          "relationshipDefinitionId": {
            "$ref": "#/components/schemas/ResourceId"
          },
          "sourceEntity": {
            "$ref": "#/components/schemas/RelatedEntity"
          },
          "targetEntity": {
            "$ref": "#/components/schemas/RelatedEntity"
          },
          "outwardDescription": {
            "minLength": 1,
            "type": "string",
            "description": "Description of the relationship based on relationship definition's outward description."
          },
          "inwardDescription": {
            "minLength": 1,
            "type": "string",
            "description": "Description of the relationship based on relationship definition's inward description."
          },
          "effectiveFrom": {
            "type": "string",
            "description": "The effective datetime from which the relationship is valid.",
            "format": "date-time"
          },
          "effectiveUntil": {
            "type": "string",
            "description": "The effective datetime to which the relationship is valid until.",
            "format": "date-time"
          }
        },
        "additionalProperties": false,
        "description": "Representation of a relationship containing details of source and target entities, and both outward and inward descriptions."
      },
      "ComplexBond": {
        "allOf": [
          {
            "$ref": "#/components/schemas/LusidInstrument"
          },
          {
            "required": [
              "instrumentType"
            ],
            "type": "object",
            "properties": {
              "identifiers": {
                "type": "object",
                "additionalProperties": {
                  "type": "string"
                },
                "description": "External market codes and identifiers for the bond, e.g. ISIN.",
                "nullable": true
              },
              "calculationType": {
                "type": "string",
                "description": "The calculation type applied to the bond coupon amount. This is required for bonds that have a particular type of computing the period coupon, such as simple compounding,\r\nirregular coupons etc.\r\nThe default CalculationType is `Standard`, which returns a coupon amount equal to Principal * Coupon Rate / Coupon Frequency. Coupon Frequency is 12M / Payment Frequency.\r\nPayment Frequency can be 1M, 3M, 6M, 12M etc. So Coupon Frequency can be 12, 4, 2, 1 respectively.\r\n\r\nSupported string (enumeration) values are: [Standard, DayCountCoupon, NoCalculationFloater, BrazilFixedCoupon].",
                "nullable": true
              },
              "schedules": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Schedule"
                },
                "description": "schedules.",
                "nullable": true
              },
              "roundingConventions": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/RoundingConvention"
                },
                "description": "Rounding conventions for analytics, if any.",
                "nullable": true
              },
              "instrumentType": {
                "enum": [
                  "QuotedSecurity",
                  "InterestRateSwap",
                  "FxForward",
                  "Future",
                  "ExoticInstrument",
                  "FxOption",
                  "CreditDefaultSwap",
                  "InterestRateSwaption",
                  "Bond",
                  "EquityOption",
                  "FixedLeg",
                  "FloatingLeg",
                  "BespokeCashFlowsLeg",
                  "Unknown",
                  "TermDeposit",
                  "ContractForDifference",
                  "EquitySwap",
                  "CashPerpetual",
                  "CapFloor",
                  "CashSettled",
                  "CdsIndex",
                  "Basket",
                  "FundingLeg",
                  "FxSwap",
                  "ForwardRateAgreement",
                  "SimpleInstrument",
                  "Repo",
                  "Equity",
                  "ExchangeTradedOption",
                  "ReferenceInstrument",
                  "ComplexBond",
                  "InflationLinkedBond",
                  "InflationSwap",
                  "SimpleCashFlowLoan"
                ],
                "type": "string",
                "description": "The available values are: QuotedSecurity, InterestRateSwap, FxForward, Future, ExoticInstrument, FxOption, CreditDefaultSwap, InterestRateSwaption, Bond, EquityOption, FixedLeg, FloatingLeg, BespokeCashFlowsLeg, Unknown, TermDeposit, ContractForDifference, EquitySwap, CashPerpetual, CapFloor, CashSettled, CdsIndex, Basket, FundingLeg, FxSwap, ForwardRateAgreement, SimpleInstrument, Repo, Equity, ExchangeTradedOption, ReferenceInstrument, ComplexBond, InflationLinkedBond, InflationSwap, SimpleCashFlowLoan"
              }
            }
          }
        ],
        "description": "LUSID representation of a Complex Bond.\r\nIncluding Floating, Callable, Puttable, Sinkable, and Fixed-to-float."
      },
      "ComplexMarketData": {
        "required": [
          "marketDataType"
        ],
        "type": "object",
        "properties": {
          "marketDataType": {
            "enum": [
              "DiscountFactorCurveData",
              "EquityVolSurfaceData",
              "FxVolSurfaceData",
              "IrVolCubeData",
              "OpaqueMarketData",
              "YieldCurveData",
              "FxForwardCurveData",
              "FxForwardPipsCurveData",
              "FxForwardTenorCurveData",
              "FxForwardTenorPipsCurveData",
              "FxForwardCurveByQuoteReference",
              "CreditSpreadCurveData",
              "EquityCurveByPricesData"
            ],
            "type": "string",
            "description": "The available values are: DiscountFactorCurveData, EquityVolSurfaceData, FxVolSurfaceData, IrVolCubeData, OpaqueMarketData, YieldCurveData, FxForwardCurveData, FxForwardPipsCurveData, FxForwardTenorCurveData, FxForwardTenorPipsCurveData, FxForwardCurveByQuoteReference, CreditSpreadCurveData, EquityCurveByPricesData"
          }
        },
        "additionalProperties": false,
        "description": "Base class for representing complex market data in LUSID.\r\nGenerally speaking, market data is complex when it cannot be represented as a single quote.\r\nExamples include discounting curves, projection curves, and volatility surfaces, which are used to compute instrument analytics.\r\nThis base class should not be directly instantiated; each supported MarketDataType has a corresponding inherited class.",
        "discriminator": {
          "propertyName": "marketDataType"
        }
      },
      "ComplexMarketDataId": {
        "required": [
          "marketAsset",
          "provider"
        ],
        "type": "object",
        "properties": {
          "provider": {
            "maxLength": 32,
            "minLength": 0,
            "type": "string",
            "description": "The platform or vendor that provided the complex market data, e.g. 'DataScope', 'LUSID', etc."
          },
          "priceSource": {
            "maxLength": 256,
            "minLength": 0,
            "type": "string",
            "description": "The source or originator of the complex market data, e.g. a bank or financial institution.",
            "nullable": true
          },
          "lineage": {
            "maxLength": 1024,
            "minLength": 0,
            "type": "string",
            "description": "This is obsolete. It is not used, it will not be stored, and has no effects.\r\nIf you wish to attach a Lineage to your ComplexMarketData,\r\nyou should provide it in the optional Lineage field in the ComplexMarketData class.",
            "nullable": true
          },
          "effectiveAt": {
            "type": "string",
            "description": "The effectiveAt or cut label that this item of complex market data is/was updated/inserted with.",
            "format": "dateorcutlabel",
            "nullable": true
          },
          "marketAsset": {
            "maxLength": 32,
            "minLength": 0,
            "type": "string",
            "description": "The name of the market entity that the document represents"
          }
        },
        "additionalProperties": false,
        "description": "An identifier that uniquely describes an item of complex market data such as an interest rate curve or volatility surface."
      },
      "ComplianceParameter": {
        "required": [
          "parameterType",
          "value"
        ],
        "type": "object",
        "properties": {
          "parameterType": {
            "minLength": 1,
            "type": "string",
            "description": "The parameter type."
          },
          "value": {
            "description": "The parameter value."
          }
        },
        "additionalProperties": false
      },
      "ComplianceRuleResponse": {
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/ResourceId"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "active": {
            "type": "boolean"
          },
          "templateId": {
            "$ref": "#/components/schemas/ResourceId"
          },
          "variation": {
            "type": "string",
            "nullable": true
          },
          "parameters": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/ComplianceParameter"
            },
            "nullable": true
          },
          "properties": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/PerpetualProperty"
            },
            "nullable": true
          },
          "version": {
            "$ref": "#/components/schemas/Version"
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "description": "Collection of links.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ComplianceTemplate": {
        "required": [
          "description",
          "id",
          "variations"
        ],
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/ResourceId"
          },
          "description": {
            "minLength": 1,
            "type": "string",
            "description": "The description of the Compliance Template"
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Tags for a Compliance Template",
            "nullable": true
          },
          "variations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ComplianceTemplateVariation"
            },
            "description": "Variation details of a Compliance Template"
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "description": "Collection of links.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ComplianceTemplateParameter": {
        "required": [
          "description",
          "isCheckingParameter",
          "name",
          "type"
        ],
        "type": "object",
        "properties": {
          "name": {
            "minLength": 1,
            "type": "string",
            "description": "The name for the required Compliance Template Parameter"
          },
          "description": {
            "minLength": 1,
            "type": "string",
            "description": "The description for the required Compliance Template Parameter"
          },
          "type": {
            "minLength": 1,
            "type": "string",
            "description": "The type for the required Compliance Template Parameter"
          },
          "isCheckingParameter": {
            "type": "boolean",
            "description": "Indicates whether this is the Compliance Template Parameter that will be used in the final check process"
          }
        },
        "additionalProperties": false
      },
      "ComplianceTemplateVariation": {
        "required": [
          "description",
          "label",
          "properties",
          "requiredParameters"
        ],
        "type": "object",
        "properties": {
          "label": {
            "minLength": 1,
            "type": "string",
            "description": "Label of a Compliance Template Variation"
          },
          "description": {
            "minLength": 1,
            "type": "string",
            "description": "The description of the Compliance Template Variation"
          },
          "requiredParameters": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ComplianceTemplateParameter"
            },
            "description": "A parameter required by a Compliance Template Variation"
          },
          "properties": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/PerpetualProperty"
            },
            "description": "Properties associated with the Compliance Template Variation"
          }
        },
        "additionalProperties": false
      },
      "CompositeDispersion": {
        "required": [
          "dispersionCalculation",
          "effectiveAt",
          "firstQuartile",
          "range",
          "thirdQuartile",
          "variance"
        ],
        "type": "object",
        "properties": {
          "effectiveAt": {
            "type": "string",
            "description": "The date for which dipsersion calculation has been done. This should be 31 Dec for each given year.",
            "format": "date-time"
          },
          "dispersionCalculation": {
            "type": "number",
            "description": "The result for the dispersion calculation on the given effectiveAt.",
            "format": "double"
          },
          "variance": {
            "type": "number",
            "description": "The variance on the given effectiveAt.",
            "format": "double"
          },
          "firstQuartile": {
            "type": "number",
            "description": "First Quartile (Q1) =  (lower quartile) = the middle of the bottom half of the returns.",
            "format": "double"
          },
          "thirdQuartile": {
            "type": "number",
            "description": "Third Quartile (Q3) =  (higher quartile) = the middle of the top half of the returns.",
            "format": "double"
          },
          "range": {
            "type": "number",
            "description": "Highest return - Lowest return.",
            "format": "double"
          },
          "constituentsInScope": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ResourceId"
            },
            "description": "List containing Composite members which are part of the dispersion calcualtion.",
            "nullable": true
          },
          "constituentsExcluded": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ResourceId"
            },
            "description": "List containing the Composite members which are not part of the dispersion calculation",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "A list of Dispersion calculations for the given years."
      },
      "CompositeDispersionResponse": {
        "type": "object",
        "properties": {
          "href": {
            "type": "string",
            "description": "The specific Uniform Resource Identifier (URI) for this resource at the requested effective and asAt datetime.",
            "format": "uri",
            "nullable": true
          },
          "results": {
            "type": "object",
            "additionalProperties": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/CompositeDispersion"
              }
            },
            "description": "Dispersion returns calculation grouped by ReturnId",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "description": "Collection of links.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Compounding": {
        "required": [
          "compoundingMethod",
          "resetFrequency",
          "spreadCompoundingMethod"
        ],
        "type": "object",
        "properties": {
          "calculationShiftMethod": {
            "type": "string",
            "description": "Defines which resets and day counts are used for the rate calculation\r\n\r\nSupported string (enumeration) values are: [Lookback, NoShift, ObservationPeriodShift, Lockout].",
            "nullable": true
          },
          "compoundingMethod": {
            "minLength": 1,
            "type": "string",
            "description": "If the interest rate is simple or compounded.\r\n\r\nSupported string (enumeration) values are: [Average, Compounded]."
          },
          "resetFrequency": {
            "minLength": 1,
            "type": "string",
            "description": "The interest payment frequency."
          },
          "shift": {
            "type": "integer",
            "description": "Defines the number of days to lockout or shift observation period by - should be a non-negative integer",
            "format": "int32"
          },
          "spreadCompoundingMethod": {
            "minLength": 1,
            "type": "string",
            "description": "Defines how the computed leg spread is applied to compounded rate.\r\nIt applies only when CompoundingMethod = ‘Compounded‘.\r\n\r\nSupported string (enumeration) values are: [Straight, IsdaCompounding, NoCompounding, SpreadExclusive, IsdaFlatCompounding, Flat, None]."
          }
        },
        "additionalProperties": false,
        "description": "The compounding settings used on interest rate."
      },
      "ConfigurationRecipe": {
        "required": [
          "code",
          "scope"
        ],
        "type": "object",
        "properties": {
          "scope": {
            "maxLength": 64,
            "minLength": 1,
            "pattern": "^[a-zA-Z0-9\\-_]+$",
            "type": "string",
            "description": "The scope used when updating or inserting the Configuration Recipe."
          },
          "code": {
            "maxLength": 64,
            "minLength": 1,
            "pattern": "^[a-zA-Z0-9\\-_]+$",
            "type": "string",
            "description": "User given string name (code) to identify the recipe."
          },
          "market": {
            "$ref": "#/components/schemas/MarketContext"
          },
          "pricing": {
            "$ref": "#/components/schemas/PricingContext"
          },
          "aggregation": {
            "$ref": "#/components/schemas/AggregationContext"
          },
          "inheritedRecipes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ResourceId"
            },
            "description": "A list of parent recipes (scope,code) that can be used to share functionality between recipes. For instance one might use common recipes to set up\r\npricing for individual asset classes, e.g. rates or credit, and then combine them into a single recipe to be used by an exotics desk in conjunction with\r\nsome overrides that it requires for models or other pricing options.",
            "nullable": true
          },
          "description": {
            "maxLength": 1024,
            "minLength": 0,
            "pattern": "^[\\s\\S]*$",
            "type": "string",
            "description": "User can assign a description to understand more humanly the recipe.",
            "nullable": true
          },
          "holding": {
            "$ref": "#/components/schemas/HoldingContext"
          }
        },
        "additionalProperties": false,
        "description": "The Configuration or Calculation Recipe controls how LUSID processes a given request.\r\nThis can be used to change where market data used in pricing is loaded from and in what order, or which model is used to\r\nprice a given instrument as well as how aggregation will process the produced results."
      },
      "ConfigurationRecipeSnippet": {
        "required": [
          "code",
          "scope"
        ],
        "type": "object",
        "properties": {
          "scope": {
            "maxLength": 64,
            "minLength": 1,
            "pattern": "^[a-zA-Z0-9\\-_]+$",
            "type": "string",
            "description": "The scope used when updating or inserting the Configuration Recipe snippet"
          },
          "code": {
            "maxLength": 64,
            "minLength": 1,
            "pattern": "^[a-zA-Z0-9\\-_]+$",
            "type": "string",
            "description": "User given string name (code) to identify the recipe."
          },
          "aggregationOptions": {
            "$ref": "#/components/schemas/AggregationOptions"
          },
          "modelRules": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/VendorModelRule"
            },
            "description": "The set of model rules that are available. There may be multiple rules for Vendors, but only one per model-instrument pair.\r\nWhich of these preference sets is used depends upon the model choice selection if specified, or failing that the global default model specification\r\nin the options.",
            "nullable": true
          },
          "pricingOptions": {
            "$ref": "#/components/schemas/PricingOptions"
          },
          "marketRules": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MarketDataKeyRule"
            },
            "description": "The set of rules that define how to resolve particular use cases. These can be relatively general or specific in nature.\r\nNominally any number are possible and will be processed in order where applicable. However, there is evidently a potential\r\nfor increased computational cost where many rules must be applied to resolve data. Ensuring that portfolios are structured in\r\nsuch a way as to reduce the number of rules required is therefore sensible.",
            "nullable": true
          },
          "marketOptions": {
            "$ref": "#/components/schemas/MarketOptions"
          },
          "recipe": {
            "$ref": "#/components/schemas/ConfigurationRecipe"
          }
        },
        "additionalProperties": false,
        "description": "If it is desired to have multiple recipes, there is a strong likelihood that they will share various components.\r\nA configuration recipe snippet allows a user to define a set of rules that can then be included into a parent recipe.\r\nThis allows sharing of common blocks of the recipe.\r\n            \r\nFor example, a user might define a set of rules for resolving Fx and then include them into every recipe used firm-wide, thereby\r\nenforcing consistency. As the rules can be permissioned differently using Shrine, it is possible to enable users to \r\nread but not alter such a rule set.\r\n            \r\nThe same applies to a set of pricing rules.\r\n            \r\nA configuration snippet must only contain one entry from the available set. \r\n            \r\nRecipes are compiled from the set of snippets through a model that is analogous to inheritance.\r\nA recipe can have a set of 'parent' recipes from which it inherits. These are specified in the inheritance section of a recipe.\r\nUpon loading, the recipe will fall back on these recipe components for any options or rules that are not explicitly specified in the\r\nnamed recipe for the request.\r\n            \r\nThis allows control of pricing to be harmonised across a set of desks within an institution. Suppose that, e.g.\r\nthere are four desks looking after products under the areas of Fx, Rates, Credit and Exotics.\r\nThe model and market data for pricing given asset types would potentially be controlled by the appropriate desk; e.g. rules for Fx market data resolution being\r\ncontrolled by the Fx desk. The exotics desk would likely depend upon rules for all the other asset classes as well as, say, correlation rules of its own.\r\nIt could inherit the market data and model rules from the other desks for finding the appropriate institution-standard data and then overlay that with the correlation rules.\r\n            \r\nNote that permissioning of the store means that one could decide that only a particular desk or control function could update certain rules. That would assist the abilitiy\r\nto ensure that pricing is performed consistently and provide an audit of changes made to it along with restricting changes to appropriate authorised functions."
      },
      "ConstituentsAdjustmentHeader": {
        "type": "object",
        "properties": {
          "effectiveAt": {
            "type": "string",
            "description": "There can be at most one holdings adjustment for a portfolio at a\r\nspecific effective time so this uniquely identifies the adjustment.",
            "format": "date-time"
          },
          "version": {
            "$ref": "#/components/schemas/Version"
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "description": "Collection of links.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ContractForDifference": {
        "allOf": [
          {
            "$ref": "#/components/schemas/LusidInstrument"
          },
          {
            "required": [
              "code",
              "contractSize",
              "instrumentType",
              "payCcy",
              "startDate",
              "type",
              "underlyingCcy",
              "underlyingIdentifier"
            ],
            "type": "object",
            "properties": {
              "startDate": {
                "type": "string",
                "description": "The start date of the CFD.",
                "format": "date-time"
              },
              "maturityDate": {
                "type": "string",
                "description": "The maturity date for the CFD. If CFDType is Futures, this should be set to be the maturity date of the underlying\r\nfuture. If CFDType is Cash, this should not be set.",
                "format": "date-time"
              },
              "code": {
                "minLength": 1,
                "type": "string",
                "description": "The code of the underlying."
              },
              "contractSize": {
                "type": "number",
                "description": "The size of the CFD contract, this should represent the total number of stocks that the CFD represents.",
                "format": "double"
              },
              "payCcy": {
                "type": "string",
                "description": "The currency that this CFD pays out, this can be different to the UnderlyingCcy."
              },
              "referenceRate": {
                "type": "number",
                "description": "The reference rate of the CFD, this can be set to 0 but not negative values.\r\nThis field is optional, if not set it will default to 0.",
                "format": "double"
              },
              "type": {
                "minLength": 1,
                "type": "string",
                "description": "The type of CFD.\r\n\r\nSupported string (enumeration) values are: [Cash, Futures]."
              },
              "underlyingCcy": {
                "type": "string",
                "description": "The currency of the underlying"
              },
              "underlyingIdentifier": {
                "minLength": 1,
                "type": "string",
                "description": "External market codes and identifiers for the CFD, e.g. RIC.\r\n\r\nSupported string (enumeration) values are: [LusidInstrumentId, Isin, Sedol, Cusip, ClientInternal, Figi, RIC, QuotePermId, REDCode, BBGId, ICECode]."
              },
              "instrumentType": {
                "enum": [
                  "QuotedSecurity",
                  "InterestRateSwap",
                  "FxForward",
                  "Future",
                  "ExoticInstrument",
                  "FxOption",
                  "CreditDefaultSwap",
                  "InterestRateSwaption",
                  "Bond",
                  "EquityOption",
                  "FixedLeg",
                  "FloatingLeg",
                  "BespokeCashFlowsLeg",
                  "Unknown",
                  "TermDeposit",
                  "ContractForDifference",
                  "EquitySwap",
                  "CashPerpetual",
                  "CapFloor",
                  "CashSettled",
                  "CdsIndex",
                  "Basket",
                  "FundingLeg",
                  "FxSwap",
                  "ForwardRateAgreement",
                  "SimpleInstrument",
                  "Repo",
                  "Equity",
                  "ExchangeTradedOption",
                  "ReferenceInstrument",
                  "ComplexBond",
                  "InflationLinkedBond",
                  "InflationSwap",
                  "SimpleCashFlowLoan"
                ],
                "type": "string",
                "description": "The available values are: QuotedSecurity, InterestRateSwap, FxForward, Future, ExoticInstrument, FxOption, CreditDefaultSwap, InterestRateSwaption, Bond, EquityOption, FixedLeg, FloatingLeg, BespokeCashFlowsLeg, Unknown, TermDeposit, ContractForDifference, EquitySwap, CashPerpetual, CapFloor, CashSettled, CdsIndex, Basket, FundingLeg, FxSwap, ForwardRateAgreement, SimpleInstrument, Repo, Equity, ExchangeTradedOption, ReferenceInstrument, ComplexBond, InflationLinkedBond, InflationSwap, SimpleCashFlowLoan"
              }
            }
          }
        ],
        "description": "LUSID representation of a Contract for Difference."
      },
      "CorporateAction": {
        "required": [
          "corporateActionCode"
        ],
        "type": "object",
        "properties": {
          "corporateActionCode": {
            "type": "string",
            "description": "The unique identifier of this corporate action"
          },
          "description": {
            "type": "string",
            "description": "The description of the corporate action.",
            "nullable": true
          },
          "announcementDate": {
            "type": "string",
            "description": "The announcement date of the corporate action",
            "format": "date-time"
          },
          "exDate": {
            "type": "string",
            "description": "The ex date of the corporate action",
            "format": "date-time"
          },
          "recordDate": {
            "type": "string",
            "description": "The record date of the corporate action",
            "format": "date-time"
          },
          "paymentDate": {
            "type": "string",
            "description": "The payment date of the corporate action",
            "format": "date-time"
          },
          "transitions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CorporateActionTransition"
            },
            "description": "The transitions that result from this corporate action",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "A corporate action"
      },
      "CorporateActionSource": {
        "type": "object",
        "properties": {
          "href": {
            "type": "string",
            "description": "The specific Uniform Resource Identifier (URI) for this resource at the requested effective and asAt datetime.",
            "format": "uri",
            "nullable": true
          },
          "id": {
            "$ref": "#/components/schemas/ResourceId"
          },
          "version": {
            "$ref": "#/components/schemas/Version"
          },
          "displayName": {
            "type": "string",
            "description": "The name of the corporate action source",
            "nullable": true
          },
          "description": {
            "type": "string",
            "description": "The description of the corporate action source",
            "nullable": true
          },
          "instrumentScopes": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The list of instrument scopes used as the scope resolution strategy when resolving instruments of upserted corporate actions.",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "description": "Collection of links.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "A corporate action source"
      },
      "CorporateActionTransition": {
        "type": "object",
        "properties": {
          "inputTransition": {
            "$ref": "#/components/schemas/CorporateActionTransitionComponent"
          },
          "outputTransitions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CorporateActionTransitionComponent"
            },
            "description": "What will be generated relative to the input transition",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "A 'transition' within a corporate action, representing a set of output movements paired to a single input position"
      },
      "CorporateActionTransitionComponent": {
        "required": [
          "costFactor",
          "instrumentIdentifiers",
          "instrumentScope",
          "instrumentUid",
          "unitsFactor"
        ],
        "type": "object",
        "properties": {
          "instrumentScope": {
            "minLength": 1,
            "type": "string",
            "description": "The scope in which the instrument lies."
          },
          "instrumentIdentifiers": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "Unique instrument identifiers"
          },
          "instrumentUid": {
            "minLength": 1,
            "type": "string",
            "description": "LUSID's internal unique instrument identifier, resolved from the instrument identifiers"
          },
          "unitsFactor": {
            "type": "number",
            "description": "The factor to scale units by",
            "format": "double"
          },
          "costFactor": {
            "type": "number",
            "description": "The factor to scale cost by",
            "format": "double"
          }
        },
        "additionalProperties": false,
        "description": "A single transition component, when grouped with other components a corporate action transition is formed."
      },
      "CorporateActionTransitionComponentRequest": {
        "required": [
          "costFactor",
          "instrumentIdentifiers",
          "unitsFactor"
        ],
        "type": "object",
        "properties": {
          "instrumentIdentifiers": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "Unique instrument identifiers"
          },
          "unitsFactor": {
            "type": "number",
            "description": "The factor to scale units by",
            "format": "double"
          },
          "costFactor": {
            "type": "number",
            "description": "The factor to scale cost by",
            "format": "double"
          }
        },
        "additionalProperties": false,
        "description": "A single transition component request, when grouped with other transition component requests a corporate action\r\ntransition request is formed."
      },
      "CorporateActionTransitionRequest": {
        "type": "object",
        "properties": {
          "inputTransition": {
            "$ref": "#/components/schemas/CorporateActionTransitionComponentRequest"
          },
          "outputTransitions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CorporateActionTransitionComponentRequest"
            },
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "A 'transition' within a corporate action, representing a set of output movements paired to a single input position"
      },
      "CounterpartyAgreement": {
        "required": [
          "agreementType",
          "counterpartySignatory",
          "creditSupportAnnexId",
          "datedAsOf",
          "displayName",
          "id"
        ],
        "type": "object",
        "properties": {
          "displayName": {
            "minLength": 1,
            "type": "string",
            "description": "A user-defined display label for the Counterparty Agreement."
          },
          "agreementType": {
            "maxLength": 256,
            "minLength": 0,
            "type": "string",
            "description": "A user-defined field to capture the type of agreement this represents. Examples might be \"ISDA 2002 Master Agreement\" or \"ISDA 1992 Master Agreement\"."
          },
          "counterpartySignatory": {
            "$ref": "#/components/schemas/CounterpartySignatory"
          },
          "datedAsOf": {
            "type": "string",
            "description": "The date on which the CounterpartyAgreement was signed by both parties.",
            "format": "date-time"
          },
          "creditSupportAnnexId": {
            "$ref": "#/components/schemas/ResourceId"
          },
          "id": {
            "$ref": "#/components/schemas/ResourceId"
          }
        },
        "additionalProperties": false,
        "description": "Represents the legal agreement between two parties engaged in an OTC transaction.\r\nA typical example would be a 2002 ISDA Master Agreement, signed by two legal entities on a given date."
      },
      "CounterpartyRiskInformation": {
        "required": [
          "countryOfRisk",
          "creditRatings",
          "industryClassifiers"
        ],
        "type": "object",
        "properties": {
          "countryOfRisk": {
            "maxLength": 64,
            "minLength": 1,
            "pattern": "^[a-zA-Z0-9\\-_]+$",
            "type": "string",
            "description": "The country to which one would naturally ascribe risk, typically the legal entity's country of registration. This can be used to infer funding currency and related market data in the absence of a specific preference."
          },
          "creditRatings": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CreditRating"
            },
            "description": ""
          },
          "industryClassifiers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IndustryClassifier"
            },
            "description": ""
          }
        },
        "additionalProperties": false,
        "description": "In the event that the legal entity is a counterparty to an OTC transaction\r\n(as signatory to a counterparty agreement such as an ISDA 2002 Master Agreement),\r\nthis information would be needed for calculations\r\nsuch as Credit-Valuation-Adjustments and Debit-Valuation-Adjustments (CVA, DVA, XVA etc)."
      },
      "CounterpartySignatory": {
        "required": [
          "legalEntityIdentifier",
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "minLength": 1,
            "type": "string",
            "description": "A user-defined name or label for the counterparty signatory.  There is no requirement for this to match the \"displayName\" of the legal entity."
          },
          "legalEntityIdentifier": {
            "$ref": "#/components/schemas/TypedResourceId"
          }
        },
        "additionalProperties": false,
        "description": "The counterpartyAgreement is signed by two parties, one of which is implicitly the LUSID user.\r\nThe CounterpartySignatory represents the 'other side' of the agreement.\r\nIt comprises a name and identifier for a Legal Entity in LUSID."
      },
      "CreateAddressKeyDefinitionRequest": {
        "required": [
          "addressKey",
          "type"
        ],
        "type": "object",
        "properties": {
          "addressKey": {
            "type": "string",
            "description": "The address key of the address key definition."
          },
          "type": {
            "minLength": 1,
            "type": "string",
            "description": "The type of the address key definition"
          }
        },
        "additionalProperties": false
      },
      "CreateCalendarRequest": {
        "required": [
          "calendarId",
          "calendarType",
          "sourceProvider",
          "weekendMask"
        ],
        "type": "object",
        "properties": {
          "calendarId": {
            "$ref": "#/components/schemas/ResourceId"
          },
          "calendarType": {
            "maxLength": 256,
            "minLength": 1,
            "pattern": "^[a-zA-Z0-9\\-_]+$",
            "type": "string"
          },
          "weekendMask": {
            "$ref": "#/components/schemas/WeekendMask"
          },
          "sourceProvider": {
            "maxLength": 50,
            "minLength": 0,
            "pattern": "^[a-zA-Z0-9\\-_]+$",
            "type": "string"
          },
          "properties": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Property"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CreateCorporateActionSourceRequest": {
        "required": [
          "code",
          "displayName",
          "scope"
        ],
        "type": "object",
        "properties": {
          "scope": {
            "maxLength": 64,
            "minLength": 1,
            "pattern": "^[a-zA-Z0-9\\-_]+$",
            "type": "string",
            "description": "The scope of the corporate action source"
          },
          "code": {
            "maxLength": 64,
            "minLength": 1,
            "pattern": "^[a-zA-Z0-9\\-_]+$",
            "type": "string",
            "description": "The code of the corporate action source"
          },
          "displayName": {
            "maxLength": 512,
            "minLength": 1,
            "pattern": "^[\\s\\S]*$",
            "type": "string",
            "description": "The name of the corporate action source"
          },
          "description": {
            "maxLength": 1024,
            "minLength": 0,
            "pattern": "^[\\s\\S]*$",
            "type": "string",
            "description": "The description of the corporate action source",
            "nullable": true
          },
          "instrumentScopes": {
            "maxItems": 1,
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The list of instrument scopes used as the scope resolution strategy when resolving instruments of upserted corporate actions.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CreateCutLabelDefinitionRequest": {
        "required": [
          "code",
          "cutLocalTime",
          "displayName",
          "timeZone"
        ],
        "type": "object",
        "properties": {
          "code": {
            "type": "string"
          },
          "displayName": {
            "minLength": 1,
            "pattern": "^[\\s\\S]*$",
            "type": "string"
          },
          "description": {
            "pattern": "^[\\s\\S]*$",
            "type": "string",
            "nullable": true
          },
          "cutLocalTime": {
            "$ref": "#/components/schemas/CutLocalTime"
          },
          "timeZone": {
            "minLength": 1,
            "type": "string"
          }
        },
        "additionalProperties": false,
        "description": "This request specifies a new Cut Label Definition"
      },
      "CreateDataTypeRequest": {
        "required": [
          "code",
          "description",
          "displayName",
          "scope",
          "typeValueRange",
          "valueType"
        ],
        "type": "object",
        "properties": {
          "scope": {
            "maxLength": 64,
            "minLength": 1,
            "pattern": "^[a-zA-Z0-9\\-_]+$",
            "type": "string",
            "description": "The scope that the data type will be created in."
          },
          "code": {
            "maxLength": 64,
            "minLength": 1,
            "pattern": "^[a-zA-Z0-9\\-_]+$",
            "type": "string",
            "description": "The code of the data type. Together with the scope this uniquely defines the data type."
          },
          "typeValueRange": {
            "enum": [
              "Open",
              "Closed"
            ],
            "type": "string",
            "description": "Indicates the range of data acceptable by a data type. The available values are: Open, Closed"
          },
          "displayName": {
            "maxLength": 512,
            "minLength": 1,
            "pattern": "^[\\s\\S]*$",
            "type": "string",
            "description": "The display name of the data type."
          },
          "description": {
            "maxLength": 1024,
            "minLength": 0,
            "pattern": "^[\\s\\S]*$",
            "type": "string",
            "description": "The description of the data type."
          },
          "valueType": {
            "enum": [
              "String",
              "Int",
              "Decimal",
              "DateTime",
              "Boolean",
              "Map",
              "List",
              "PropertyArray",
              "Percentage",
              "Code",
              "Id",
              "Uri",
              "CurrencyAndAmount",
              "TradePrice",
              "Currency",
              "MetricValue",
              "ResourceId",
              "ResultValue",
              "CutLocalTime",
              "DateOrCutLabel",
              "UnindexedText"
            ],
            "type": "string",
            "description": "The expected type of the values. The available values are: String, Int, Decimal, DateTime, Boolean, Map, List, PropertyArray, Percentage, Code, Id, Uri, CurrencyAndAmount, TradePrice, Currency, MetricValue, ResourceId, ResultValue, CutLocalTime, DateOrCutLabel, UnindexedText"
          },
          "acceptableValues": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The acceptable set of values for this data type. Only applies to 'open' value type range.",
            "nullable": true
          },
          "unitSchema": {
            "enum": [
              "NoUnits",
              "Basic",
              "Iso4217Currency"
            ],
            "type": "string",
            "description": "The schema of the data type's units. The available values are: NoUnits, Basic, Iso4217Currency"
          },
          "acceptableUnits": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CreateUnitDefinition"
            },
            "description": "The definitions of the acceptable units.",
            "nullable": true
          },
          "referenceData": {
            "$ref": "#/components/schemas/ReferenceData"
          }
        },
        "additionalProperties": false
      },
      "CreateDateRequest": {
        "required": [
          "dateId",
          "description",
          "fromUtc",
          "timeZone",
          "toUtc"
        ],
        "type": "object",
        "properties": {
          "dateId": {
            "maxLength": 256,
            "minLength": 1,
            "pattern": "^[a-zA-Z0-9\\-_]+$",
            "type": "string"
          },
          "fromUtc": {
            "type": "string",
            "format": "date-time"
          },
          "toUtc": {
            "type": "string",
            "format": "date-time"
          },
          "timeZone": {
            "maxLength": 5,
            "minLength": 0,
            "pattern": "^[a-zA-Z0-9\\-_]+$",
            "type": "string"
          },
          "description": {
            "maxLength": 100,
            "minLength": 0,
            "pattern": "^[\\s\\S]*$",
            "type": "string"
          },
          "type": {
            "maxLength": 10,
            "minLength": 0,
            "pattern": "^[a-zA-Z0-9\\-_]+$",
            "type": "string",
            "nullable": true
          },
          "attributes": {
            "$ref": "#/components/schemas/DateAttributes"
          },
          "sourceData": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CreateDerivedPropertyDefinitionRequest": {
        "required": [
          "code",
          "dataTypeId",
          "derivationFormula",
          "displayName",
          "domain",
          "scope"
        ],
        "type": "object",
        "properties": {
          "domain": {
            "enum": [
              "NotDefined",
              "Transaction",
              "Portfolio",
              "Holding",
              "ReferenceHolding",
              "TransactionConfiguration",
              "Instrument",
              "CutLabelDefinition",
              "Analytic",
              "PortfolioGroup",
              "Person",
              "AccessMetadata",
              "Order",
              "UnitResult",
              "MarketData",
              "ConfigurationRecipe",
              "Allocation",
              "Calendar",
              "LegalEntity",
              "Placement",
              "Execution",
              "Block",
              "Participation",
              "Package",
              "OrderInstruction",
              "NextBestAction",
              "CustomEntity",
              "InstrumentEvent",
              "Account",
              "ChartOfAccounts",
              "CustodianAccount",
              "Abor",
              "AborConfiguration",
              "Reconciliation",
              "PropertyDefinition",
              "Compliance"
            ],
            "type": "string",
            "description": "The domain that the property exists in. Not all available values are currently supported, please check the documentation: https://support.lusid.com/knowledgebase/article/KA-01719/. The available values are: NotDefined, Transaction, Portfolio, Holding, ReferenceHolding, TransactionConfiguration, Instrument, CutLabelDefinition, Analytic, PortfolioGroup, Person, AccessMetadata, Order, UnitResult, MarketData, ConfigurationRecipe, Allocation, Calendar, LegalEntity, Placement, Execution, Block, Participation, Package, OrderInstruction, NextBestAction, CustomEntity, InstrumentEvent, Account, ChartOfAccounts, CustodianAccount, Abor, AborConfiguration, Reconciliation, PropertyDefinition, Compliance"
          },
          "scope": {
            "type": "string",
            "description": "The scope that the property exists in."
          },
          "code": {
            "type": "string",
            "description": "The code of the property. Together with the domain and scope this uniquely identifies the property."
          },
          "displayName": {
            "minLength": 1,
            "type": "string",
            "description": "The display name of the property."
          },
          "dataTypeId": {
            "$ref": "#/components/schemas/ResourceId"
          },
          "propertyDescription": {
            "maxLength": 512,
            "type": "string",
            "description": "Describes the property",
            "nullable": true
          },
          "derivationFormula": {
            "minLength": 1,
            "type": "string",
            "description": "The rule that defines how data is composed for a derived property."
          }
        },
        "additionalProperties": false
      },
      "CreateDerivedTransactionPortfolioRequest": {
        "required": [
          "code",
          "displayName",
          "parentPortfolioId"
        ],
        "type": "object",
        "properties": {
          "displayName": {
            "maxLength": 512,
            "minLength": 1,
            "pattern": "^[\\s\\S]*$",
            "type": "string",
            "description": "The name of the derived transaction portfolio."
          },
          "description": {
            "maxLength": 1024,
            "minLength": 0,
            "pattern": "^[\\s\\S]*$",
            "type": "string",
            "description": "A description for the derived transaction portfolio.",
            "nullable": true
          },
          "code": {
            "maxLength": 64,
            "minLength": 1,
            "pattern": "^[a-zA-Z0-9\\-_]+$",
            "type": "string",
            "description": "The code of the derived transaction portfolio. Together with the scope this uniquely identifies the derived transaction portfolio."
          },
          "parentPortfolioId": {
            "$ref": "#/components/schemas/ResourceId"
          },
          "created": {
            "type": "string",
            "description": "This will be auto-populated to be the parent portfolio creation date.",
            "format": "date-time",
            "nullable": true
          },
          "corporateActionSourceId": {
            "$ref": "#/components/schemas/ResourceId"
          },
          "accountingMethod": {
            "enum": [
              "Default",
              "AverageCost",
              "FirstInFirstOut",
              "LastInFirstOut",
              "HighestCostFirst",
              "LowestCostFirst"
            ],
            "type": "string",
            "description": ". The available values are: Default, AverageCost, FirstInFirstOut, LastInFirstOut, HighestCostFirst, LowestCostFirst"
          },
          "subHoldingKeys": {
            "type": "array",
            "items": {
              "type": "string",
              "description": "The key that uniquely identifies the property. It has the format {domain}/{scope}/{code}."
            },
            "description": "A set of unique transaction properties to group the derived transaction portfolio's holdings by, perhaps for strategy tagging. Each property must be from the 'Transaction' domain and identified by a key in the format {domain}/{scope}/{code}, for example 'Transaction/strategies/quantsignal'. See https://support.lusid.com/knowledgebase/article/KA-01879/en-us for more information.",
            "nullable": true
          },
          "instrumentScopes": {
            "maxItems": 1,
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The resolution strategy used to resolve instruments of transactions/holdings upserted to this derived portfolio.",
            "nullable": true
          },
          "amortisationMethod": {
            "type": "string",
            "description": "The amortisation method the portfolio is using in the calculation. This can be 'NoAmortisation', 'StraightLine' or 'EffectiveYield'.",
            "nullable": true
          },
          "transactionTypeScope": {
            "maxLength": 64,
            "minLength": 1,
            "pattern": "^[a-zA-Z0-9\\-_]+$",
            "type": "string",
            "description": "The scope of the transaction types.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CreatePortfolioDetails": {
        "type": "object",
        "properties": {
          "corporateActionSourceId": {
            "$ref": "#/components/schemas/ResourceId"
          }
        },
        "additionalProperties": false
      },
      "CreatePortfolioGroupRequest": {
        "required": [
          "code",
          "displayName"
        ],
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "description": "The code that the portfolio group will be created with. Together with the scope this uniquely identifies the portfolio group."
          },
          "created": {
            "type": "string",
            "description": "The effective datetime at which the portfolio group was created. Defaults to the current LUSID system datetime if not specified.",
            "format": "date-time",
            "nullable": true
          },
          "values": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ResourceId"
            },
            "description": "The resource identifiers of the portfolios to be contained within the portfolio group.",
            "nullable": true
          },
          "subGroups": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ResourceId"
            },
            "description": "The resource identifiers of the portfolio groups to be contained within the portfolio group as sub groups.",
            "nullable": true
          },
          "properties": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/Property"
            },
            "description": "A set of unique group properties to add to the portfolio group. Each property must be from the 'PortfolioGroup' domain and should be identified by its key which has the format {domain}/{scope}/{code}, e.g. 'PortfolioGroup/Manager/Id'. These properties must be pre-defined.",
            "nullable": true
          },
          "displayName": {
            "minLength": 1,
            "type": "string",
            "description": "The name of the portfolio group."
          },
          "description": {
            "type": "string",
            "description": "A long form description of the portfolio group.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CreatePropertyDefinitionRequest": {
        "required": [
          "code",
          "dataTypeId",
          "displayName",
          "domain",
          "scope"
        ],
        "type": "object",
        "properties": {
          "domain": {
            "enum": [
              "NotDefined",
              "Transaction",
              "Portfolio",
              "Holding",
              "ReferenceHolding",
              "TransactionConfiguration",
              "Instrument",
              "CutLabelDefinition",
              "Analytic",
              "PortfolioGroup",
              "Person",
              "AccessMetadata",
              "Order",
              "UnitResult",
              "MarketData",
              "ConfigurationRecipe",
              "Allocation",
              "Calendar",
              "LegalEntity",
              "Placement",
              "Execution",
              "Block",
              "Participation",
              "Package",
              "OrderInstruction",
              "NextBestAction",
              "CustomEntity",
              "InstrumentEvent",
              "Account",
              "ChartOfAccounts",
              "CustodianAccount",
              "Abor",
              "AborConfiguration",
              "Reconciliation",
              "PropertyDefinition",
              "Compliance"
            ],
            "type": "string",
            "description": "The domain that the property exists in. The available values are: NotDefined, Transaction, Portfolio, Holding, ReferenceHolding, TransactionConfiguration, Instrument, CutLabelDefinition, Analytic, PortfolioGroup, Person, AccessMetadata, Order, UnitResult, MarketData, ConfigurationRecipe, Allocation, Calendar, LegalEntity, Placement, Execution, Block, Participation, Package, OrderInstruction, NextBestAction, CustomEntity, InstrumentEvent, Account, ChartOfAccounts, CustodianAccount, Abor, AborConfiguration, Reconciliation, PropertyDefinition, Compliance"
          },
          "scope": {
            "type": "string",
            "description": "The scope that the property exists in."
          },
          "code": {
            "type": "string",
            "description": "The code of the property. Together with the domain and scope this uniquely identifies the property."
          },
          "valueRequired": {
            "type": "boolean",
            "description": "This field is not implemented and should be disregarded."
          },
          "displayName": {
            "minLength": 1,
            "type": "string",
            "description": "The display name of the property."
          },
          "dataTypeId": {
            "$ref": "#/components/schemas/ResourceId"
          },
          "lifeTime": {
            "enum": [
              "Perpetual",
              "TimeVariant"
            ],
            "type": "string",
            "description": "Describes how the property's values can change over time. The available values are: Perpetual, TimeVariant"
          },
          "constraintStyle": {
            "type": "string",
            "description": "Describes the uniqueness and cardinality of the property for entity objects under the property domain specified in Key. Defaults to \"Property\" if not specified. Valid values for this field are: Property, Collection or Identifier.",
            "nullable": true
          },
          "propertyDescription": {
            "maxLength": 512,
            "type": "string",
            "description": "Describes the property",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CreateReferencePortfolioRequest": {
        "required": [
          "code",
          "displayName"
        ],
        "type": "object",
        "properties": {
          "displayName": {
            "minLength": 1,
            "type": "string",
            "description": "The name of the reference portfolio."
          },
          "description": {
            "type": "string",
            "description": "A long form text description of the portfolio.",
            "nullable": true
          },
          "code": {
            "type": "string",
            "description": "Unique identifier for the portfolio."
          },
          "created": {
            "type": "string",
            "description": "The original creation date, defaults to today if not specified when creating a portfolio.",
            "format": "date-time",
            "nullable": true
          },
          "properties": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/Property"
            },
            "description": "Portfolio properties to add to the portfolio.",
            "nullable": true
          },
          "instrumentScopes": {
            "maxItems": 1,
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Instrument Scopes.",
            "nullable": true
          },
          "baseCurrency": {
            "type": "string",
            "description": "The base currency of the transaction portfolio in ISO 4217 currency code format.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CreateRelationshipDefinitionRequest": {
        "required": [
          "code",
          "displayName",
          "inwardDescription",
          "outwardDescription",
          "scope",
          "sourceEntityType",
          "targetEntityType"
        ],
        "type": "object",
        "properties": {
          "scope": {
            "maxLength": 64,
            "minLength": 1,
            "pattern": "^[a-zA-Z0-9\\-_]+$",
            "type": "string",
            "description": "The scope that the relationship definition exists in."
          },
          "code": {
            "maxLength": 64,
            "minLength": 1,
            "pattern": "^[a-zA-Z0-9\\-_]+$",
            "type": "string",
            "description": "The code of the relationship definition. Together with the scope this uniquely defines the relationship definition."
          },
          "sourceEntityType": {
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "description": "The entity type of the source entity object. Allowed values are 'Portfolio', 'PortfolioGroup', 'Person', 'LegalEntity' or a custom entity type prefixed with '~'."
          },
          "targetEntityType": {
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "description": "The entity type of the target entity object. Allowed values are 'Portfolio', 'PortfolioGroup', 'Person', 'LegalEntity' or a custom entity type prefixed with '~'."
          },
          "displayName": {
            "maxLength": 512,
            "minLength": 1,
            "pattern": "^[\\s\\S]*$",
            "type": "string",
            "description": "The display name of the relationship definition."
          },
          "outwardDescription": {
            "maxLength": 512,
            "minLength": 1,
            "pattern": "^[\\s\\S]*$",
            "type": "string",
            "description": "The description to relate source entity object and target entity object."
          },
          "inwardDescription": {
            "maxLength": 512,
            "minLength": 1,
            "pattern": "^[\\s\\S]*$",
            "type": "string",
            "description": "The description to relate target entity object and source entity object."
          },
          "lifeTime": {
            "type": "string",
            "description": "Describes how the relationships can change over time. Allowed values are 'Perpetual' and 'TimeVariant', defaults to 'Perpetual' if not specified.",
            "nullable": true
          },
          "relationshipCardinality": {
            "type": "string",
            "description": "Describes the cardinality of the relationship with a specific source entity object and relationships under this definition. Allowed values are 'ManyToMany' and 'ManyToOne', defaults to 'ManyToMany' if not specified.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CreateRelationshipRequest": {
        "required": [
          "sourceEntityId",
          "targetEntityId"
        ],
        "type": "object",
        "properties": {
          "sourceEntityId": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "The identifier of the source entity."
          },
          "targetEntityId": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "The identifier of the target entity."
          },
          "effectiveFrom": {
            "maxLength": 256,
            "minLength": 0,
            "pattern": "^[a-zA-Z0-9\\-_\\+:\\.]+$",
            "type": "string",
            "description": "The effective date of the relationship to be created",
            "format": "dateorcutlabel",
            "nullable": true
          },
          "effectiveUntil": {
            "maxLength": 256,
            "minLength": 0,
            "pattern": "^[a-zA-Z0-9\\-_\\+:\\.]+$",
            "type": "string",
            "description": "The effective datetime until which the relationship is valid. If not supplied this will be valid indefinitely.",
            "format": "dateorcutlabel",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CreateSequenceRequest": {
        "required": [
          "code"
        ],
        "type": "object",
        "properties": {
          "code": {
            "maxLength": 64,
            "minLength": 1,
            "pattern": "^[a-zA-Z0-9\\-_]+$",
            "type": "string",
            "description": "The code of the sequence definition to create"
          },
          "increment": {
            "type": "integer",
            "description": "The value to increment between each value in the sequence",
            "format": "int64",
            "nullable": true
          },
          "minValue": {
            "type": "integer",
            "description": "The minimum value of the sequence",
            "format": "int64",
            "nullable": true
          },
          "maxValue": {
            "type": "integer",
            "description": "The maximum value of the sequence",
            "format": "int64",
            "nullable": true
          },
          "start": {
            "type": "integer",
            "description": "The start value of the sequence",
            "format": "int64",
            "nullable": true
          },
          "cycle": {
            "type": "boolean",
            "description": "Set to true to start the sequence over again when it reaches the end. Defaults to false if not provided."
          },
          "pattern": {
            "maxLength": 44,
            "minLength": 1,
            "pattern": "^[A-Za-z0-9_-]*\\{\\{seqValue\\}\\}[A-Za-z0-9_-]*$",
            "type": "string",
            "description": "The pattern to be used to generate next values in the sequence. Defaults to null if not provided.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CreateTransactionPortfolioRequest": {
        "required": [
          "baseCurrency",
          "code",
          "displayName"
        ],
        "type": "object",
        "properties": {
          "displayName": {
            "minLength": 1,
            "type": "string",
            "description": "The name of the transaction portfolio."
          },
          "description": {
            "type": "string",
            "description": "A description for the transaction portfolio.",
            "nullable": true
          },
          "code": {
            "type": "string",
            "description": "The code of the transaction portfolio. Together with the scope this uniquely identifies the transaction portfolio."
          },
          "created": {
            "type": "string",
            "description": "The effective datetime at which to create the transaction portfolio. No transactions can be added to the transaction portfolio before this date. Defaults to the current LUSID system datetime if not specified.",
            "format": "date-time",
            "nullable": true
          },
          "baseCurrency": {
            "type": "string",
            "description": "The base currency of the transaction portfolio in ISO 4217 currency code format."
          },
          "corporateActionSourceId": {
            "$ref": "#/components/schemas/ResourceId"
          },
          "accountingMethod": {
            "enum": [
              "Default",
              "AverageCost",
              "FirstInFirstOut",
              "LastInFirstOut",
              "HighestCostFirst",
              "LowestCostFirst"
            ],
            "type": "string",
            "description": ". The available values are: Default, AverageCost, FirstInFirstOut, LastInFirstOut, HighestCostFirst, LowestCostFirst"
          },
          "subHoldingKeys": {
            "maxItems": 100,
            "type": "array",
            "items": {
              "type": "string",
              "description": "The key that uniquely identifies the property. It has the format {domain}/{scope}/{code}."
            },
            "description": "A set of unique transaction properties to group the transaction portfolio's holdings by, perhaps for strategy tagging. Each property must be from the 'Transaction' domain and identified by a key in the format {domain}/{scope}/{code}, for example 'Transaction/strategies/quantsignal'. See https://support.lusid.com/knowledgebase/article/KA-01879/en-us for more information.",
            "nullable": true
          },
          "properties": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/Property"
            },
            "description": "A set of unique portfolio properties to add custom data to the transaction portfolio. Each property must be from the 'Portfolio' domain and identified by a key in the format {domain}/{scope}/{code}, for example 'Portfolio/Manager/Id'. Note these properties must be pre-defined.",
            "nullable": true
          },
          "instrumentScopes": {
            "maxItems": 1,
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The resolution strategy used to resolve instruments of transactions/holdings upserted to this portfolio.",
            "nullable": true
          },
          "amortisationMethod": {
            "type": "string",
            "description": "The amortisation method the portfolio is using in the calculation. This can be 'NoAmortisation', 'StraightLine' or 'EffectiveYield'.",
            "nullable": true
          },
          "transactionTypeScope": {
            "maxLength": 64,
            "minLength": 1,
            "pattern": "^[a-zA-Z0-9\\-_]+$",
            "type": "string",
            "description": "The scope of the transaction types.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CreateUnitDefinition": {
        "required": [
          "code",
          "description",
          "displayName"
        ],
        "type": "object",
        "properties": {
          "code": {
            "maxLength": 64,
            "minLength": 1,
            "pattern": "^[a-zA-Z0-9\\-_]+$",
            "type": "string"
          },
          "displayName": {
            "maxLength": 512,
            "minLength": 1,
            "pattern": "^[\\s\\S]*$",
            "type": "string"
          },
          "description": {
            "maxLength": 1024,
            "minLength": 0,
            "pattern": "^[\\s\\S]*$",
            "type": "string"
          },
          "details": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CreditDefaultSwap": {
        "allOf": [
          {
            "$ref": "#/components/schemas/LusidInstrument"
          },
          {
            "required": [
              "couponRate",
              "instrumentType",
              "maturityDate",
              "protectionDetailSpecification",
              "startDate",
              "ticker"
            ],
            "type": "object",
            "properties": {
              "ticker": {
                "minLength": 1,
                "type": "string",
                "description": "A ticker to uniquely specify then entity against which the cds is written."
              },
              "startDate": {
                "type": "string",
                "description": "The start date of the instrument. This is normally synonymous with the trade-date.",
                "format": "date-time"
              },
              "maturityDate": {
                "type": "string",
                "description": "The final maturity date of the instrument. This means the last date on which the instruments makes a payment of any amount.\r\nFor the avoidance of doubt, that is not necessarily prior to its last sensitivity date for the purposes of risk; e.g. instruments such as\r\nConstant Maturity Swaps (CMS) often have sensitivities to rates that may well be observed or set prior to the maturity date, but refer to a termination date beyond it.",
                "format": "date-time"
              },
              "flowConventions": {
                "$ref": "#/components/schemas/CdsFlowConventions"
              },
              "couponRate": {
                "type": "number",
                "description": "The coupon rate paid on each payment date of the premium leg as a fraction of 100 percent, e.g. \"0.05\" meaning 500 basis points or 5%.\r\nFor a standard corporate CDS (North American) this must be either 100bps or 500bps.",
                "format": "double"
              },
              "conventionName": {
                "$ref": "#/components/schemas/FlowConventionName"
              },
              "notional": {
                "type": "number",
                "description": "The notional protected by the Credit Default Swap",
                "format": "double",
                "nullable": true
              },
              "protectionDetailSpecification": {
                "$ref": "#/components/schemas/CdsProtectionDetailSpecification"
              },
              "instrumentType": {
                "enum": [
                  "QuotedSecurity",
                  "InterestRateSwap",
                  "FxForward",
                  "Future",
                  "ExoticInstrument",
                  "FxOption",
                  "CreditDefaultSwap",
                  "InterestRateSwaption",
                  "Bond",
                  "EquityOption",
                  "FixedLeg",
                  "FloatingLeg",
                  "BespokeCashFlowsLeg",
                  "Unknown",
                  "TermDeposit",
                  "ContractForDifference",
                  "EquitySwap",
                  "CashPerpetual",
                  "CapFloor",
                  "CashSettled",
                  "CdsIndex",
                  "Basket",
                  "FundingLeg",
                  "FxSwap",
                  "ForwardRateAgreement",
                  "SimpleInstrument",
                  "Repo",
                  "Equity",
                  "ExchangeTradedOption",
                  "ReferenceInstrument",
                  "ComplexBond",
                  "InflationLinkedBond",
                  "InflationSwap",
                  "SimpleCashFlowLoan"
                ],
                "type": "string",
                "description": "The available values are: QuotedSecurity, InterestRateSwap, FxForward, Future, ExoticInstrument, FxOption, CreditDefaultSwap, InterestRateSwaption, Bond, EquityOption, FixedLeg, FloatingLeg, BespokeCashFlowsLeg, Unknown, TermDeposit, ContractForDifference, EquitySwap, CashPerpetual, CapFloor, CashSettled, CdsIndex, Basket, FundingLeg, FxSwap, ForwardRateAgreement, SimpleInstrument, Repo, Equity, ExchangeTradedOption, ReferenceInstrument, ComplexBond, InflationLinkedBond, InflationSwap, SimpleCashFlowLoan"
              }
            }
          }
        ],
        "description": "LUSID representation of a Credit Default Swap (CDS)."
      },
      "CreditRating": {
        "required": [
          "rating",
          "ratingSource"
        ],
        "type": "object",
        "properties": {
          "ratingSource": {
            "maxLength": 64,
            "minLength": 1,
            "pattern": "^[a-zA-Z0-9\\-_]+$",
            "type": "string",
            "description": "The provider of the credit rating, which will typically be an agency such as Moody's or Standard and Poor."
          },
          "rating": {
            "maxLength": 64,
            "minLength": 1,
            "pattern": "^[a-zA-Z0-9\\-+\\/]+$",
            "type": "string",
            "description": "The credit rating provided by the rating source. This would expected to be consistent with the rating scheme of that agency/source."
          }
        },
        "additionalProperties": false,
        "description": "Object describing a credit rating,\r\nwhich assesses the stability and credit worthiness of a legal entity\r\nand hence its likelihood of defaulting on its outstanding obligations (typically debt)."
      },
      "CreditSpreadCurveData": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ComplexMarketData"
          },
          {
            "required": [
              "baseDate",
              "domCcy",
              "marketDataType",
              "recoveryRate",
              "spreads",
              "tenors"
            ],
            "type": "object",
            "properties": {
              "baseDate": {
                "type": "string",
                "description": "EffectiveAt date of the quoted rates",
                "format": "date-time"
              },
              "domCcy": {
                "type": "string",
                "description": "Domestic currency of the curve"
              },
              "tenors": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "The tenors for which the rates apply"
              },
              "spreads": {
                "type": "array",
                "items": {
                  "type": "number",
                  "format": "double"
                },
                "description": "Par spread quotes corresponding to the tenors."
              },
              "recoveryRate": {
                "type": "number",
                "description": "The recovery rate in default.",
                "format": "double"
              },
              "referenceDate": {
                "type": "string",
                "description": "If tenors are provided, this is the date against which the tenors will be resolved.\r\nThis is of importance to CDX spread quotes, which are usually quoted in tenors relative to the CDX start date.\r\nIn this case, the ReferenceDate would be equal to the CDX start date, and the BaseDate would be the date for which the spreads are valid.\r\nIf not provided, this defaults to the BaseDate of the curve.",
                "format": "date-time",
                "nullable": true
              },
              "maturities": {
                "type": "array",
                "items": {
                  "type": "string",
                  "format": "date-time"
                },
                "description": "The maturity dates for which the rates apply.\r\nEither tenors or maturities should be provided, not both.",
                "nullable": true
              },
              "lineage": {
                "maxLength": 1024,
                "minLength": 0,
                "type": "string",
                "description": "Description of the complex market data's lineage e.g. 'FundAccountant_GreenQuality'.",
                "nullable": true
              },
              "marketDataOptions": {
                "$ref": "#/components/schemas/MarketDataOptions"
              },
              "marketDataType": {
                "enum": [
                  "DiscountFactorCurveData",
                  "EquityVolSurfaceData",
                  "FxVolSurfaceData",
                  "IrVolCubeData",
                  "OpaqueMarketData",
                  "YieldCurveData",
                  "FxForwardCurveData",
                  "FxForwardPipsCurveData",
                  "FxForwardTenorCurveData",
                  "FxForwardTenorPipsCurveData",
                  "FxForwardCurveByQuoteReference",
                  "CreditSpreadCurveData",
                  "EquityCurveByPricesData"
                ],
                "type": "string",
                "description": "The available values are: DiscountFactorCurveData, EquityVolSurfaceData, FxVolSurfaceData, IrVolCubeData, OpaqueMarketData, YieldCurveData, FxForwardCurveData, FxForwardPipsCurveData, FxForwardTenorCurveData, FxForwardTenorPipsCurveData, FxForwardCurveByQuoteReference, CreditSpreadCurveData, EquityCurveByPricesData"
              }
            }
          }
        ],
        "description": "A credit spread curve matching tenors against par spread quotes"
      },
      "CreditSupportAnnex": {
        "required": [
          "collateralCurrencies",
          "id",
          "initialMarginAmount",
          "isdaAgreementVersion",
          "marginCallFrequency",
          "minimumTransferAmount",
          "referenceCurrency",
          "roundingDecimalPlaces",
          "thresholdAmount",
          "valuationAgent"
        ],
        "type": "object",
        "properties": {
          "referenceCurrency": {
            "type": "string",
            "description": "The base, or reference, currency against which MtM value and exposure should be calculated\r\nand in which the CSA parameters are defined if the currency is not otherwise explicitly stated."
          },
          "collateralCurrencies": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The set of currencies within which it is acceptable to post cash collateral."
          },
          "isdaAgreementVersion": {
            "maxLength": 128,
            "minLength": 0,
            "type": "string",
            "description": "The transactions will take place with reference to a particular ISDA master agreement. This\r\nwill likely be either the ISDA 1992 or ISDA 2002 agremeents or ISDA close-out 2009."
          },
          "marginCallFrequency": {
            "maxLength": 32,
            "minLength": 0,
            "type": "string",
            "description": "The tenor, e.g. daily (1D) or biweekly (2W), at which frequency a margin call will be made, calculations\r\nmade and money transferred to readjust. The calculation might also require a specific time for valuation and notification."
          },
          "valuationAgent": {
            "maxLength": 256,
            "minLength": 0,
            "type": "string",
            "description": "Are the calculations performed by the institutions's counterparty or the institution trading with them."
          },
          "thresholdAmount": {
            "type": "number",
            "description": "At what level of exposure does collateral need to be posted. Will typically be zero for banks.\r\nShould be stated in reference currency",
            "format": "double"
          },
          "roundingDecimalPlaces": {
            "type": "integer",
            "description": "Where a calculation needs to be rounded to a specific number of decimal places,\r\nthis states the number that that requires.",
            "format": "int32"
          },
          "initialMarginAmount": {
            "type": "number",
            "description": "The initial margin that is required. In the reference currency",
            "format": "double"
          },
          "minimumTransferAmount": {
            "type": "number",
            "description": "The minimum amount, in the reference currency, that must be transferred when required.",
            "format": "double"
          },
          "id": {
            "$ref": "#/components/schemas/ResourceId"
          }
        },
        "additionalProperties": false,
        "description": "Entity to capture the calculable and queryable methods and practices of determining and transferring collateral\r\nto a counterparty as part of margining of transactions. These typically come from a particular ISDA agreement\r\nthat is in place between the two counterparties."
      },
      "CurrencyAndAmount": {
        "type": "object",
        "properties": {
          "amount": {
            "type": "number",
            "format": "double"
          },
          "currency": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "An amount of a specific currency, specifying a value and an associated unit"
      },
      "CustodianAccount": {
        "required": [
          "accountingMethod",
          "accountName",
          "accountNumber",
          "accountType",
          "currency",
          "custodian",
          "custodianAccountId",
          "status"
        ],
        "type": "object",
        "properties": {
          "custodianAccountId": {
            "$ref": "#/components/schemas/ResourceId"
          },
          "status": {
            "minLength": 1,
            "type": "string",
            "description": "The account status. Can be Active, Inactive or Deleted. Defaults to Active."
          },
          "accountNumber": {
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "description": "The Custodian Account Number"
          },
          "accountName": {
            "minLength": 1,
            "type": "string",
            "description": "The identifiable name given to the Custodian Account"
          },
          "accountingMethod": {
            "minLength": 1,
            "type": "string",
            "description": "The Accounting method to be used"
          },
          "currency": {
            "type": "string",
            "description": "The Currency for the Account"
          },
          "properties": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/Property"
            },
            "description": "Set of unique Custodian Account properties and associated values to store with the Custodian Account. Each property must be from the 'CustodianAccount' domain.",
            "nullable": true
          },
          "custodian": {
            "$ref": "#/components/schemas/LegalEntity"
          },
          "accountType": {
            "minLength": 1,
            "type": "string",
            "description": "The Type of the Custodian Account. Can be Margin, Cash or Swap. Defaults to Margin."
          }
        },
        "additionalProperties": false
      },
      "CustomEntityDefinition": {
        "required": [
          "displayName",
          "entityType",
          "entityTypeName",
          "fieldSchema"
        ],
        "type": "object",
        "properties": {
          "href": {
            "type": "string",
            "description": "The specific Uniform Resource Identifier (URI) for this resource at the requested effective and asAt datetime.",
            "format": "uri",
            "nullable": true
          },
          "entityTypeName": {
            "minLength": 1,
            "type": "string",
            "description": "The name provided when the custom entity type was created. This has been prefixed with “~” and returned as “entityType”, which is the identifier for the custom entity type."
          },
          "displayName": {
            "minLength": 1,
            "type": "string",
            "description": "A display label for the custom entity type."
          },
          "description": {
            "type": "string",
            "description": "A description for the custom entity type.",
            "nullable": true
          },
          "entityType": {
            "minLength": 1,
            "type": "string",
            "description": "The identifier for the custom entity type, derived from the “entityTypeName” provided on creation."
          },
          "fieldSchema": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CustomEntityFieldDefinition"
            },
            "description": "The description of the fields on the custom entity type."
          }
        },
        "additionalProperties": false,
        "description": "Representation of Custom Entity Definition on LUSID API"
      },
      "CustomEntityDefinitionRequest": {
        "required": [
          "description",
          "displayName",
          "entityTypeName",
          "fieldSchema"
        ],
        "type": "object",
        "properties": {
          "entityTypeName": {
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "description": "A name for the custom entity type. This will be prefixed with “~” and returned as “entityType”, which is the identifier for the custom entity type."
          },
          "displayName": {
            "minLength": 1,
            "pattern": "^[\\s\\S]*$",
            "type": "string",
            "description": "A display label for the custom entity type."
          },
          "description": {
            "minLength": 1,
            "pattern": "^[\\s\\S]*$",
            "type": "string",
            "description": "A description for the custom entity type."
          },
          "fieldSchema": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CustomEntityFieldDefinition"
            },
            "description": "The description of the fields on the custom entity type."
          }
        },
        "additionalProperties": false
      },
      "CustomEntityField": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "minLength": 1,
            "type": "string",
            "description": "The name of the field in the custom entity type definition."
          },
          "value": {
            "description": "The value for the field.",
            "nullable": true
          },
          "effectiveFrom": {
            "type": "string",
            "description": "The effective datetime from which the field's value is valid. For timeVariant fields, this defaults to the beginning of time.",
            "format": "date-time",
            "nullable": true
          },
          "effectiveUntil": {
            "type": "string",
            "description": "The effective datetime until which the field's value is valid. If not supplied, the value will be valid indefinitely or until the next “effectiveFrom” date of the field.",
            "format": "date-time",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CustomEntityFieldDefinition": {
        "required": [
          "lifetime",
          "name",
          "required",
          "type"
        ],
        "type": "object",
        "properties": {
          "name": {
            "minLength": 1,
            "type": "string",
            "description": "The name of the field."
          },
          "lifetime": {
            "minLength": 1,
            "type": "string",
            "description": "Describes how the field’s values can change over time. The available values are: “Perpetual”, “TimeVariant”."
          },
          "type": {
            "minLength": 1,
            "type": "string",
            "description": "The value type for the field. Available values are: “String”, “Boolean”, “DateTime”, “Decimal”."
          },
          "collectionType": {
            "type": "string",
            "description": "The collection type for the field. Available values are: “Single”, “Array”. Null value defaults to “Single”",
            "nullable": true
          },
          "required": {
            "type": "boolean",
            "description": "Whether the field is required or not."
          },
          "description": {
            "maxLength": 512,
            "type": "string",
            "description": "An optional description for the field.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CustomEntityId": {
        "required": [
          "identifierScope",
          "identifierType",
          "identifierValue"
        ],
        "type": "object",
        "properties": {
          "identifierScope": {
            "maxLength": 64,
            "minLength": 1,
            "pattern": "^[a-zA-Z0-9\\-_]+$",
            "type": "string",
            "description": "The scope the identifier resides in (the scope of the identifier property definition)."
          },
          "identifierType": {
            "maxLength": 64,
            "minLength": 1,
            "pattern": "^[a-zA-Z0-9\\-_]+$",
            "type": "string",
            "description": "What the identifier represents (the code of the identifier property definition)."
          },
          "identifierValue": {
            "maxLength": 1024,
            "minLength": 1,
            "pattern": "^[a-zA-Z0-9\\-_]+$",
            "type": "string",
            "description": "The value of the identifier for this entity."
          },
          "effectiveFrom": {
            "type": "string",
            "description": "The effective datetime from which the identifier is valid.",
            "format": "date-time",
            "nullable": true
          },
          "effectiveUntil": {
            "type": "string",
            "description": "The effective datetime until which the identifier is valid. If not supplied this will be valid indefinitely, or until the next 'effectiveFrom' datetime of the identifier.",
            "format": "date-time",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CustomEntityRequest": {
        "required": [
          "description",
          "displayName",
          "identifiers"
        ],
        "type": "object",
        "properties": {
          "displayName": {
            "minLength": 1,
            "type": "string",
            "description": "A display label for the custom entity."
          },
          "description": {
            "minLength": 1,
            "type": "string",
            "description": "A description of the custom entity."
          },
          "identifiers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CustomEntityId"
            },
            "description": "The identifiers the custom entity will be upserted with."
          },
          "fields": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CustomEntityField"
            },
            "description": "The fields that decorate the custom entity.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CustomEntityResponse": {
        "required": [
          "displayName",
          "entityType",
          "fields",
          "identifiers",
          "relationships",
          "version"
        ],
        "type": "object",
        "properties": {
          "href": {
            "type": "string",
            "description": "The specific Uniform Resource Identifier (URI) for this resource at the requested effective and asAt datetime.",
            "format": "uri",
            "nullable": true
          },
          "entityType": {
            "minLength": 1,
            "type": "string",
            "description": "The type of custom entity this is."
          },
          "version": {
            "$ref": "#/components/schemas/Version"
          },
          "displayName": {
            "minLength": 1,
            "type": "string",
            "description": "A display label for the custom entity."
          },
          "description": {
            "type": "string",
            "description": "A description of the custom entity.",
            "nullable": true
          },
          "identifiers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CustomEntityId"
            },
            "description": "The identifiers the custom entity will be upserted with."
          },
          "fields": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CustomEntityField"
            },
            "description": "The fields that decorate the custom entity."
          },
          "relationships": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Relationship"
            },
            "description": "A set of relationships associated to the custom entity."
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "description": "Collection of links.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CutLabelDefinition": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "description": "",
            "nullable": true
          },
          "displayName": {
            "type": "string",
            "description": "",
            "nullable": true
          },
          "description": {
            "type": "string",
            "description": "",
            "nullable": true
          },
          "cutLocalTime": {
            "$ref": "#/components/schemas/CutLocalTime"
          },
          "timeZone": {
            "type": "string",
            "description": "",
            "nullable": true
          },
          "href": {
            "type": "string",
            "format": "uri",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "description": "Collection of links.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CutLocalTime": {
        "type": "object",
        "properties": {
          "hours": {
            "type": "integer",
            "format": "int32"
          },
          "minutes": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "DataType": {
        "required": [
          "description",
          "displayName",
          "id",
          "typeValueRange",
          "valueType"
        ],
        "type": "object",
        "properties": {
          "href": {
            "type": "string",
            "format": "uri",
            "nullable": true
          },
          "typeValueRange": {
            "enum": [
              "Open",
              "Closed"
            ],
            "type": "string",
            "description": "The available values are: Open, Closed"
          },
          "id": {
            "$ref": "#/components/schemas/ResourceId"
          },
          "displayName": {
            "minLength": 1,
            "type": "string"
          },
          "description": {
            "minLength": 1,
            "type": "string"
          },
          "valueType": {
            "enum": [
              "String",
              "Int",
              "Decimal",
              "DateTime",
              "Boolean",
              "Map",
              "List",
              "PropertyArray",
              "Percentage",
              "Code",
              "Id",
              "Uri",
              "CurrencyAndAmount",
              "TradePrice",
              "Currency",
              "MetricValue",
              "ResourceId",
              "ResultValue",
              "CutLocalTime",
              "DateOrCutLabel",
              "UnindexedText"
            ],
            "type": "string",
            "description": "The available values are: String, Int, Decimal, DateTime, Boolean, Map, List, PropertyArray, Percentage, Code, Id, Uri, CurrencyAndAmount, TradePrice, Currency, MetricValue, ResourceId, ResultValue, CutLocalTime, DateOrCutLabel, UnindexedText"
          },
          "acceptableValues": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "unitSchema": {
            "enum": [
              "NoUnits",
              "Basic",
              "Iso4217Currency"
            ],
            "type": "string",
            "description": "The available values are: NoUnits, Basic, Iso4217Currency"
          },
          "acceptableUnits": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IUnitDefinitionDto"
            },
            "nullable": true
          },
          "referenceData": {
            "$ref": "#/components/schemas/ReferenceData"
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "description": "Collection of links.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "DataTypeSummary": {
        "required": [
          "description",
          "displayName",
          "id",
          "typeValueRange",
          "valueType"
        ],
        "type": "object",
        "properties": {
          "typeValueRange": {
            "enum": [
              "Open",
              "Closed"
            ],
            "type": "string",
            "description": "Indicates the range of data acceptable by a data type. The available values are: Open, Closed"
          },
          "id": {
            "$ref": "#/components/schemas/ResourceId"
          },
          "displayName": {
            "minLength": 1,
            "type": "string",
            "description": "The display name of the data type."
          },
          "description": {
            "minLength": 1,
            "type": "string",
            "description": "The description of the data type."
          },
          "valueType": {
            "enum": [
              "String",
              "Int",
              "Decimal",
              "DateTime",
              "Boolean",
              "Map",
              "List",
              "PropertyArray",
              "Percentage",
              "Code",
              "Id",
              "Uri",
              "CurrencyAndAmount",
              "TradePrice",
              "Currency",
              "MetricValue",
              "ResourceId",
              "ResultValue",
              "CutLocalTime",
              "DateOrCutLabel",
              "UnindexedText"
            ],
            "type": "string",
            "description": "The expected type of the values. The available values are: String, Int, Decimal, DateTime, Boolean, Map, List, PropertyArray, Percentage, Code, Id, Uri, CurrencyAndAmount, TradePrice, Currency, MetricValue, ResourceId, ResultValue, CutLocalTime, DateOrCutLabel, UnindexedText"
          },
          "acceptableValues": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The acceptable set of values for this data type. Only applies to 'open' value type range.",
            "nullable": true
          },
          "unitSchema": {
            "enum": [
              "NoUnits",
              "Basic",
              "Iso4217Currency"
            ],
            "type": "string",
            "description": "The schema of the data type's units. The available values are: NoUnits, Basic, Iso4217Currency"
          },
          "acceptableUnits": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IUnitDefinitionDto"
            },
            "description": "The definitions of the acceptable units.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "DateAttributes": {
        "required": [
          "irregular",
          "irregularSession",
          "newHours"
        ],
        "type": "object",
        "properties": {
          "irregular": {
            "type": "boolean"
          },
          "irregularSession": {
            "type": "boolean"
          },
          "newHours": {
            "type": "boolean"
          },
          "activity": {
            "maxLength": 100,
            "minLength": 0,
            "pattern": "^[a-zA-Z0-9\\-_]+$",
            "type": "string",
            "nullable": true
          },
          "firstOpen": {
            "maxLength": 100,
            "minLength": 0,
            "pattern": "^[a-zA-Z0-9\\-_]+$",
            "type": "string",
            "nullable": true
          },
          "lastOpen": {
            "maxLength": 100,
            "minLength": 0,
            "pattern": "^[a-zA-Z0-9\\-_]+$",
            "type": "string",
            "nullable": true
          },
          "firstClose": {
            "maxLength": 100,
            "minLength": 0,
            "pattern": "^[a-zA-Z0-9\\-_]+$",
            "type": "string",
            "nullable": true
          },
          "lastClose": {
            "maxLength": 100,
            "minLength": 0,
            "pattern": "^[a-zA-Z0-9\\-_]+$",
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "DateRange": {
        "required": [
          "fromDate"
        ],
        "type": "object",
        "properties": {
          "fromDate": {
            "type": "string",
            "format": "date-time"
          },
          "untilDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "DayOfWeek": {
        "enum": [
          "Sunday",
          "Monday",
          "Tuesday",
          "Wednesday",
          "Thursday",
          "Friday",
          "Saturday"
        ],
        "type": "string"
      },
      "DecimalList": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ReferenceList"
          },
          {
            "required": [
              "referenceListType",
              "values"
            ],
            "type": "object",
            "properties": {
              "values": {
                "maxItems": 100,
                "minItems": 1,
                "type": "array",
                "items": {
                  "type": "number",
                  "format": "double"
                }
              },
              "referenceListType": {
                "enum": [
                  "PortfolioGroupIdList",
                  "PortfolioIdList",
                  "AddressKeyList",
                  "StringList",
                  "InstrumentList",
                  "DecimalList"
                ],
                "type": "string",
                "description": "The reference list values. The available values are: PortfolioGroupIdList, PortfolioIdList, AddressKeyList, StringList, InstrumentList, DecimalList"
              }
            }
          }
        ]
      },
      "DeletedEntityResponse": {
        "required": [
          "asAt"
        ],
        "type": "object",
        "properties": {
          "href": {
            "type": "string",
            "description": "The specific Uniform Resource Identifier (URI) for this resource at the requested effective and asAt datetime.",
            "format": "uri",
            "nullable": true
          },
          "effectiveFrom": {
            "type": "string",
            "description": "The effective datetime at which the deletion became valid. May be null in the case where multiple date times are applicable.",
            "format": "date-time",
            "nullable": true
          },
          "asAt": {
            "type": "string",
            "description": "The asAt datetime at which the deletion was committed to LUSID.",
            "format": "date-time"
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "description": "Collection of links.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "DeleteInstrumentPropertiesResponse": {
        "required": [
          "asAt"
        ],
        "type": "object",
        "properties": {
          "asAt": {
            "type": "string",
            "description": "The as-at datetime at which properties were deleted.",
            "format": "date-time"
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "description": "Collection of links.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "DeleteInstrumentResponse": {
        "required": [
          "asAt"
        ],
        "type": "object",
        "properties": {
          "href": {
            "type": "string",
            "description": "The specific Uniform Resource Identifier (URI) for this resource at the requested effective and asAt datetime.",
            "format": "uri",
            "nullable": true
          },
          "asAt": {
            "type": "string",
            "description": "The as-at datetime at which the instrument was deleted.",
            "format": "date-time"
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "description": "Collection of links.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "DeleteInstrumentsResponse": {
        "required": [
          "asAt"
        ],
        "type": "object",
        "properties": {
          "href": {
            "type": "string",
            "description": "The specific Uniform Resource Identifier (URI) for this resource at the requested effective and asAt datetime.",
            "format": "uri",
            "nullable": true
          },
          "asAt": {
            "type": "string",
            "description": "The as-at datetime at which the instrument was deleted.",
            "format": "date-time"
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "description": "Collection of links.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "DeleteRelationshipRequest": {
        "required": [
          "sourceEntityId",
          "targetEntityId"
        ],
        "type": "object",
        "properties": {
          "sourceEntityId": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "The identifier of the source entity of the relationship to be deleted."
          },
          "targetEntityId": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "The identifier of the target entity of the relationship to be deleted."
          },
          "effectiveFrom": {
            "maxLength": 256,
            "minLength": 0,
            "pattern": "^[a-zA-Z0-9\\-_\\+:\\.]+$",
            "type": "string",
            "description": "The effective date of the relationship to be deleted",
            "format": "dateorcutlabel",
            "nullable": true
          },
          "effectiveUntil": {
            "maxLength": 256,
            "minLength": 0,
            "pattern": "^[a-zA-Z0-9\\-_\\+:\\.]+$",
            "type": "string",
            "description": "The effective datetime until which the relationship will be deleted. If not supplied the deletion will be permanent.",
            "format": "dateorcutlabel",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "DependencySourceFilter": {
        "type": "object",
        "properties": {
          "instrumentType": {
            "maxLength": 32,
            "minLength": 0,
            "type": "string",
            "description": "Specify that a rule should only apply if the market data is requested by an instrument of a given instrument type.\r\nIf null, then no filtering on instrument type is applied.",
            "nullable": true
          },
          "assetClass": {
            "maxLength": 32,
            "minLength": 0,
            "type": "string",
            "description": "Specify that a rule should only apply if the market data is requested by an instrument of a given asset class.\r\nIf null, then no filtering on asset class is applied.",
            "nullable": true
          },
          "domCcy": {
            "type": "string",
            "description": "Specify that a rule should only apply if the market data is requested by an instrument with a given domestic currency.\r\nIf null, then no filtering on currency is applied.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Encapsulates parts of a market data rule relating not to the nature of the market data requested, but rather the nature of the thing (instrument/model) that is requesting it.\r\nIn the first instance, this includes the instrument type, asset class, and the currency of the underlying instrument.\r\nThis can be used to differentiate requests for market data according to the source of the request. See MarketDataSpecificRule."
      },
      "DiscountFactorCurveData": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ComplexMarketData"
          },
          {
            "required": [
              "baseDate",
              "dates",
              "discountFactors",
              "marketDataType"
            ],
            "type": "object",
            "properties": {
              "baseDate": {
                "type": "string",
                "description": "BaseDate for the Curve",
                "format": "date-time"
              },
              "dates": {
                "type": "array",
                "items": {
                  "type": "string",
                  "format": "date-time"
                },
                "description": "Dates for which the discount factors apply"
              },
              "discountFactors": {
                "type": "array",
                "items": {
                  "type": "number",
                  "format": "double"
                },
                "description": "Discount factors to be applied to cashflow on the specified dates"
              },
              "lineage": {
                "maxLength": 1024,
                "minLength": 0,
                "type": "string",
                "description": "Description of the complex market data's lineage e.g. 'FundAccountant_GreenQuality'.",
                "nullable": true
              },
              "marketDataOptions": {
                "$ref": "#/components/schemas/MarketDataOptions"
              },
              "marketDataType": {
                "enum": [
                  "DiscountFactorCurveData",
                  "EquityVolSurfaceData",
                  "FxVolSurfaceData",
                  "IrVolCubeData",
                  "OpaqueMarketData",
                  "YieldCurveData",
                  "FxForwardCurveData",
                  "FxForwardPipsCurveData",
                  "FxForwardTenorCurveData",
                  "FxForwardTenorPipsCurveData",
                  "FxForwardCurveByQuoteReference",
                  "CreditSpreadCurveData",
                  "EquityCurveByPricesData"
                ],
                "type": "string",
                "description": "The available values are: DiscountFactorCurveData, EquityVolSurfaceData, FxVolSurfaceData, IrVolCubeData, OpaqueMarketData, YieldCurveData, FxForwardCurveData, FxForwardPipsCurveData, FxForwardTenorCurveData, FxForwardTenorPipsCurveData, FxForwardCurveByQuoteReference, CreditSpreadCurveData, EquityCurveByPricesData"
              }
            }
          }
        ],
        "description": "A curve containing discount factors and dates to which they apply"
      },
      "DiscountingDependency": {
        "allOf": [
          {
            "$ref": "#/components/schemas/EconomicDependency"
          },
          {
            "required": [
              "currency",
              "date",
              "dependencyType"
            ],
            "type": "object",
            "properties": {
              "currency": {
                "type": "string",
                "description": "The currency that needs to be discounted."
              },
              "date": {
                "type": "string",
                "description": "The effectiveDate of the entity that this is a dependency for.\r\nUnless there is an obvious date this should be, like for a historic reset, then this is the valuation date.",
                "format": "date-time"
              },
              "dependencyType": {
                "enum": [
                  "OpaqueDependency",
                  "CashDependency",
                  "DiscountingDependency",
                  "EquityCurveDependency",
                  "EquityVolDependency",
                  "FxDependency",
                  "FxForwardsDependency",
                  "FxVolDependency",
                  "IndexProjectionDependency",
                  "IrVolDependency",
                  "QuoteDependency",
                  "Vendor"
                ],
                "type": "string",
                "description": "The available values are: OpaqueDependency, CashDependency, DiscountingDependency, EquityCurveDependency, EquityVolDependency, FxDependency, FxForwardsDependency, FxVolDependency, IndexProjectionDependency, IrVolDependency, QuoteDependency, Vendor"
              }
            }
          }
        ],
        "description": "For indicating a dependency on discounting for a given currency.\r\nE.g Valuing a Bond with the Discounting model will declare a DiscountingDependency\r\nfor the domestic currency of the bond to account for the time-value of the future cashFlows of the bond."
      },
      "EconomicDependency": {
        "required": [
          "dependencyType"
        ],
        "type": "object",
        "properties": {
          "dependencyType": {
            "enum": [
              "OpaqueDependency",
              "CashDependency",
              "DiscountingDependency",
              "EquityCurveDependency",
              "EquityVolDependency",
              "FxDependency",
              "FxForwardsDependency",
              "FxVolDependency",
              "IndexProjectionDependency",
              "IrVolDependency",
              "QuoteDependency",
              "Vendor"
            ],
            "type": "string",
            "description": "The available values are: OpaqueDependency, CashDependency, DiscountingDependency, EquityCurveDependency, EquityVolDependency, FxDependency, FxForwardsDependency, FxVolDependency, IndexProjectionDependency, IrVolDependency, QuoteDependency, Vendor"
          }
        },
        "additionalProperties": false,
        "description": "Base class for representing economic dependencies.\r\nEconomic dependencies are a way of indicating how one concept depends upon another.\r\nFor example, when pricing an instrument with a particular model,\r\nthat model will declare that it has an EconomicDependency for each bit of market data\r\nthat it needs to complete the calculation.\r\nConcretely, a pricing an FxForward will declare a dependency on the exchange rate between the two currencies\r\nat the forward date.\r\n            \r\nAnother example is when data is included in a data-structure only by reference.\r\nConcretely, an object depending on a FlowConvention that is referenced only semantically via a FlowConventionName\r\nwill declare a FlowConventionDependency\r\nso that the full data-structure of the referenced FlowConvention can be retrieved.\r\n            \r\nFor deserialization purposes,\r\nthis class contains a discriminator EconomicDependencyType to indicate the derived type.",
        "discriminator": {
          "propertyName": "dependencyType"
        }
      },
      "EconomicDependencyWithComplexMarketData": {
        "required": [
          "complexMarketData",
          "economicDependency"
        ],
        "type": "object",
        "properties": {
          "economicDependency": {
            "$ref": "#/components/schemas/EconomicDependency"
          },
          "complexMarketData": {
            "$ref": "#/components/schemas/ComplexMarketData"
          }
        },
        "additionalProperties": false,
        "description": "Container class pairing economic dependency and complex market data (i.e. discounting curves, etc.)"
      },
      "EconomicDependencyWithQuote": {
        "required": [
          "economicDependency",
          "metricValue"
        ],
        "type": "object",
        "properties": {
          "economicDependency": {
            "$ref": "#/components/schemas/EconomicDependency"
          },
          "metricValue": {
            "$ref": "#/components/schemas/MetricValue"
          },
          "scaleFactor": {
            "type": "number",
            "description": "Scale factor for the quote - this can be null, in which case we default to 1.",
            "format": "double",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Container class pairing economic dependencies and quote data"
      },
      "EmptyModelOptions": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ModelOptions"
          },
          {
            "required": [
              "modelOptionsType"
            ],
            "type": "object",
            "properties": {
              "modelOptionsType": {
                "enum": [
                  "Invalid",
                  "OpaqueModelOptions",
                  "EmptyModelOptions",
                  "IndexModelOptions",
                  "FxForwardModelOptions",
                  "FundingLegModelOptions",
                  "EquityModelOptions"
                ],
                "type": "string",
                "description": "The available values are: Invalid, OpaqueModelOptions, EmptyModelOptions, IndexModelOptions, FxForwardModelOptions, FundingLegModelOptions, EquityModelOptions"
              }
            }
          }
        ]
      },
      "EntityIdentifier": {
        "required": [
          "identifierType",
          "identifierValue"
        ],
        "type": "object",
        "properties": {
          "identifierScope": {
            "type": "string",
            "description": "The scope of the identifier",
            "nullable": true
          },
          "identifierType": {
            "type": "string",
            "description": "The type of the identifier"
          },
          "identifierValue": {
            "type": "string",
            "description": "The value of the identifier"
          }
        },
        "additionalProperties": false,
        "description": "Dto to expose mapped keys to new standardised format"
      },
      "Equity": {
        "allOf": [
          {
            "$ref": "#/components/schemas/LusidInstrument"
          },
          {
            "required": [
              "domCcy",
              "instrumentType"
            ],
            "type": "object",
            "properties": {
              "identifiers": {
                "type": "object",
                "properties": {
                  "LusidInstrumentId": {
                    "type": "string"
                  },
                  "Isin": {
                    "type": "string"
                  },
                  "Sedol": {
                    "type": "string"
                  },
                  "Cusip": {
                    "type": "string"
                  },
                  "ClientInternal": {
                    "type": "string"
                  },
                  "Figi": {
                    "type": "string"
                  },
                  "RIC": {
                    "type": "string"
                  },
                  "QuotePermId": {
                    "type": "string"
                  },
                  "REDCode": {
                    "type": "string"
                  },
                  "BBGId": {
                    "type": "string"
                  },
                  "ICECode": {
                    "type": "string"
                  }
                },
                "additionalProperties": false,
                "description": "External market codes and identifiers for the equity, e.g. IBM",
                "nullable": true
              },
              "domCcy": {
                "type": "string",
                "description": "The domestic currency of the instrument."
              },
              "instrumentType": {
                "enum": [
                  "QuotedSecurity",
                  "InterestRateSwap",
                  "FxForward",
                  "Future",
                  "ExoticInstrument",
                  "FxOption",
                  "CreditDefaultSwap",
                  "InterestRateSwaption",
                  "Bond",
                  "EquityOption",
                  "FixedLeg",
                  "FloatingLeg",
                  "BespokeCashFlowsLeg",
                  "Unknown",
                  "TermDeposit",
                  "ContractForDifference",
                  "EquitySwap",
                  "CashPerpetual",
                  "CapFloor",
                  "CashSettled",
                  "CdsIndex",
                  "Basket",
                  "FundingLeg",
                  "FxSwap",
                  "ForwardRateAgreement",
                  "SimpleInstrument",
                  "Repo",
                  "Equity",
                  "ExchangeTradedOption",
                  "ReferenceInstrument",
                  "ComplexBond",
                  "InflationLinkedBond",
                  "InflationSwap",
                  "SimpleCashFlowLoan"
                ],
                "type": "string",
                "description": "The available values are: QuotedSecurity, InterestRateSwap, FxForward, Future, ExoticInstrument, FxOption, CreditDefaultSwap, InterestRateSwaption, Bond, EquityOption, FixedLeg, FloatingLeg, BespokeCashFlowsLeg, Unknown, TermDeposit, ContractForDifference, EquitySwap, CashPerpetual, CapFloor, CashSettled, CdsIndex, Basket, FundingLeg, FxSwap, ForwardRateAgreement, SimpleInstrument, Repo, Equity, ExchangeTradedOption, ReferenceInstrument, ComplexBond, InflationLinkedBond, InflationSwap, SimpleCashFlowLoan"
              }
            }
          }
        ],
        "description": "LUSID representation of an Equity."
      },
      "EquityCurveByPricesData": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ComplexMarketData"
          },
          {
            "required": [
              "baseDate",
              "dates",
              "marketDataType",
              "prices"
            ],
            "type": "object",
            "properties": {
              "baseDate": {
                "type": "string",
                "description": "EffectiveAt date of the provided prices",
                "format": "date-time"
              },
              "dates": {
                "type": "array",
                "items": {
                  "type": "string",
                  "format": "date-time"
                },
                "description": "Dates provided for the forward price of the Equity at the corresponding price in Prices.\r\nThese dates should be in the future with respect to the BaseDate."
              },
              "lineage": {
                "maxLength": 1024,
                "minLength": 0,
                "type": "string",
                "description": "Description of the complex market data's lineage e.g. 'FundAccountant_GreenQuality'.",
                "nullable": true
              },
              "prices": {
                "type": "array",
                "items": {
                  "type": "number",
                  "format": "double"
                },
                "description": "Prices provided for the forward price of the Equity at the corresponding date in Dates."
              },
              "marketDataOptions": {
                "$ref": "#/components/schemas/MarketDataOptions"
              },
              "marketDataType": {
                "enum": [
                  "DiscountFactorCurveData",
                  "EquityVolSurfaceData",
                  "FxVolSurfaceData",
                  "IrVolCubeData",
                  "OpaqueMarketData",
                  "YieldCurveData",
                  "FxForwardCurveData",
                  "FxForwardPipsCurveData",
                  "FxForwardTenorCurveData",
                  "FxForwardTenorPipsCurveData",
                  "FxForwardCurveByQuoteReference",
                  "CreditSpreadCurveData",
                  "EquityCurveByPricesData"
                ],
                "type": "string",
                "description": "The available values are: DiscountFactorCurveData, EquityVolSurfaceData, FxVolSurfaceData, IrVolCubeData, OpaqueMarketData, YieldCurveData, FxForwardCurveData, FxForwardPipsCurveData, FxForwardTenorCurveData, FxForwardTenorPipsCurveData, FxForwardCurveByQuoteReference, CreditSpreadCurveData, EquityCurveByPricesData"
              }
            }
          }
        ],
        "description": "Contains data (i.e. dates and prices + metadata) for building Equity curves"
      },
      "EquityCurveDependency": {
        "allOf": [
          {
            "$ref": "#/components/schemas/EconomicDependency"
          },
          {
            "required": [
              "code",
              "curveType",
              "date",
              "dependencyType",
              "marketIdentifier"
            ],
            "type": "object",
            "properties": {
              "marketIdentifier": {
                "maxLength": 50,
                "minLength": 0,
                "type": "string",
                "description": "Type of the code identifying the corresponding equity, e.g. ISIN or CUSIP"
              },
              "code": {
                "maxLength": 50,
                "minLength": 0,
                "type": "string",
                "description": "The code identifying the corresponding equity, e.g. US0378331005 if the MarketIdentifier was set to ISIN"
              },
              "curveType": {
                "maxLength": 50,
                "minLength": 0,
                "type": "string",
                "description": "The curve type of the EquityCurve required. E.g. EquityCurveByPrices"
              },
              "date": {
                "type": "string",
                "description": "The effectiveDate of the entity that this is a dependency for.\r\nUnless there is an obvious date this should be, like for a historic reset, then this is the valuation date.",
                "format": "date-time"
              },
              "dependencyType": {
                "enum": [
                  "OpaqueDependency",
                  "CashDependency",
                  "DiscountingDependency",
                  "EquityCurveDependency",
                  "EquityVolDependency",
                  "FxDependency",
                  "FxForwardsDependency",
                  "FxVolDependency",
                  "IndexProjectionDependency",
                  "IrVolDependency",
                  "QuoteDependency",
                  "Vendor"
                ],
                "type": "string",
                "description": "The available values are: OpaqueDependency, CashDependency, DiscountingDependency, EquityCurveDependency, EquityVolDependency, FxDependency, FxForwardsDependency, FxVolDependency, IndexProjectionDependency, IrVolDependency, QuoteDependency, Vendor"
              }
            }
          }
        ],
        "description": "For indicating a dependency on an EquityCurve.\r\nE.g. When pricing an EquitySwap one may want to make predictions about the price of the underlying equity at future dates.\r\nIf so, that model would declare an EquityCurve dependency so that it could obtain predictions from the EquityCurve."
      },
      "EquityModelOptions": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ModelOptions"
          },
          {
            "required": [
              "equityForwardProjectionType",
              "modelOptionsType"
            ],
            "type": "object",
            "properties": {
              "equityForwardProjectionType": {
                "minLength": 1,
                "type": "string",
                "description": "Determines how forward equity prices should be projected.\r\n            \r\nSupported string (enumeration) values are: [FlatForwardCurveFromSpot, EquityCurveByPrices, ForwardProjectedFromRatesCurve]."
              },
              "modelOptionsType": {
                "enum": [
                  "Invalid",
                  "OpaqueModelOptions",
                  "EmptyModelOptions",
                  "IndexModelOptions",
                  "FxForwardModelOptions",
                  "FundingLegModelOptions",
                  "EquityModelOptions"
                ],
                "type": "string",
                "description": "The available values are: Invalid, OpaqueModelOptions, EmptyModelOptions, IndexModelOptions, FxForwardModelOptions, FundingLegModelOptions, EquityModelOptions"
              }
            }
          }
        ],
        "description": "Model options for equity related pricing."
      },
      "EquityOption": {
        "allOf": [
          {
            "$ref": "#/components/schemas/LusidInstrument"
          },
          {
            "required": [
              "code",
              "deliveryType",
              "domCcy",
              "instrumentType",
              "optionMaturityDate",
              "optionSettlementDate",
              "optionType",
              "startDate",
              "strike",
              "underlyingIdentifier"
            ],
            "type": "object",
            "properties": {
              "startDate": {
                "type": "string",
                "description": "The start date of the instrument. This is normally synonymous with the trade-date.",
                "format": "date-time"
              },
              "optionMaturityDate": {
                "type": "string",
                "description": "The maturity date of the option.",
                "format": "date-time"
              },
              "optionSettlementDate": {
                "type": "string",
                "description": "The settlement date of the option.",
                "format": "date-time"
              },
              "deliveryType": {
                "minLength": 1,
                "type": "string",
                "description": "Is the option cash settled or physical delivery of option\r\n\r\nSupported string (enumeration) values are: [Cash, Physical]."
              },
              "optionType": {
                "minLength": 1,
                "type": "string",
                "description": "Type of optionality for the option\r\n\r\nSupported string (enumeration) values are: [Call, Put]."
              },
              "strike": {
                "type": "number",
                "description": "The strike of the option.",
                "format": "double"
              },
              "domCcy": {
                "type": "string",
                "description": "The domestic currency of the instrument."
              },
              "underlyingIdentifier": {
                "minLength": 1,
                "type": "string",
                "description": "The market identifier type of the underlying code, e.g RIC.\r\n\r\nSupported string (enumeration) values are: [LusidInstrumentId, Isin, Sedol, Cusip, ClientInternal, Figi, RIC, QuotePermId, REDCode, BBGId, ICECode]."
              },
              "code": {
                "minLength": 1,
                "type": "string",
                "description": "The identifying code for the equity underlying, e.g. 'IBM.N'."
              },
              "equityOptionType": {
                "type": "string",
                "description": "Equity option types. E.g. Vanilla (default), RightsIssue, Warrant.\r\n\r\nSupported string (enumeration) values are: [Vanilla, RightsIssue, Warrant].",
                "nullable": true
              },
              "numberOfShares": {
                "type": "number",
                "description": "The amount of shares to exchange if the option is exercised.",
                "format": "double",
                "nullable": true
              },
              "premium": {
                "$ref": "#/components/schemas/Premium"
              },
              "exerciseType": {
                "type": "string",
                "description": "Type of optionality that is present; European, American.\r\n\r\nSupported string (enumeration) values are: [European, American].",
                "nullable": true
              },
              "instrumentType": {
                "enum": [
                  "QuotedSecurity",
                  "InterestRateSwap",
                  "FxForward",
                  "Future",
                  "ExoticInstrument",
                  "FxOption",
                  "CreditDefaultSwap",
                  "InterestRateSwaption",
                  "Bond",
                  "EquityOption",
                  "FixedLeg",
                  "FloatingLeg",
                  "BespokeCashFlowsLeg",
                  "Unknown",
                  "TermDeposit",
                  "ContractForDifference",
                  "EquitySwap",
                  "CashPerpetual",
                  "CapFloor",
                  "CashSettled",
                  "CdsIndex",
                  "Basket",
                  "FundingLeg",
                  "FxSwap",
                  "ForwardRateAgreement",
                  "SimpleInstrument",
                  "Repo",
                  "Equity",
                  "ExchangeTradedOption",
                  "ReferenceInstrument",
                  "ComplexBond",
                  "InflationLinkedBond",
                  "InflationSwap",
                  "SimpleCashFlowLoan"
                ],
                "type": "string",
                "description": "The available values are: QuotedSecurity, InterestRateSwap, FxForward, Future, ExoticInstrument, FxOption, CreditDefaultSwap, InterestRateSwaption, Bond, EquityOption, FixedLeg, FloatingLeg, BespokeCashFlowsLeg, Unknown, TermDeposit, ContractForDifference, EquitySwap, CashPerpetual, CapFloor, CashSettled, CdsIndex, Basket, FundingLeg, FxSwap, ForwardRateAgreement, SimpleInstrument, Repo, Equity, ExchangeTradedOption, ReferenceInstrument, ComplexBond, InflationLinkedBond, InflationSwap, SimpleCashFlowLoan"
              }
            }
          }
        ],
        "description": "LUSID representation of a plain vanilla OTC Equity Option."
      },
      "EquitySwap": {
        "allOf": [
          {
            "$ref": "#/components/schemas/LusidInstrument"
          },
          {
            "required": [
              "code",
              "equityFlowConventions",
              "fundingLeg",
              "includeDividends",
              "initialPrice",
              "instrumentType",
              "maturityDate",
              "notionalReset",
              "quantity",
              "startDate",
              "underlyingIdentifier"
            ],
            "type": "object",
            "properties": {
              "startDate": {
                "type": "string",
                "description": "The start date of the EquitySwap.",
                "format": "date-time"
              },
              "maturityDate": {
                "type": "string",
                "description": "The final maturity date of the instrument. This means the last date on which the instruments makes a payment of any amount.\r\nFor the avoidance of doubt, that is not necessarily prior to its last sensitivity date for the purposes of risk; e.g. instruments such as\r\nConstant Maturity Swaps (CMS) often have sensitivities to rates that may well be observed or set prior to the maturity date, but refer to a termination date beyond it.",
                "format": "date-time"
              },
              "code": {
                "minLength": 1,
                "type": "string",
                "description": "The code of the underlying."
              },
              "equityFlowConventions": {
                "$ref": "#/components/schemas/FlowConventions"
              },
              "fundingLeg": {
                "$ref": "#/components/schemas/InstrumentLeg"
              },
              "includeDividends": {
                "type": "boolean",
                "description": "Dividend inclusion flag, if true dividends are included in the equity leg (total return)."
              },
              "initialPrice": {
                "type": "number",
                "description": "The initial equity price of the Equity Swap.",
                "format": "double"
              },
              "notionalReset": {
                "type": "boolean",
                "description": "Notional reset flag, if true the notional of the funding leg is reset at the start of every\r\ncoupon to match the value of the equity leg (equity price at start of coupon times quantity)."
              },
              "quantity": {
                "type": "number",
                "description": "The quantity or number of shares in the Equity Swap.",
                "format": "double"
              },
              "underlyingIdentifier": {
                "minLength": 1,
                "type": "string",
                "description": "External market codes and identifiers for the EquitySwap, e.g. RIC.\r\n\r\nSupported string (enumeration) values are: [LusidInstrumentId, Isin, Sedol, Cusip, ClientInternal, Figi, RIC, QuotePermId, REDCode, BBGId, ICECode]."
              },
              "equitySwapDividendPaymentTiming": {
                "type": "string",
                "description": "Determines how the payment of dividends is handled for the equity swap.\r\nDefaults to paying at the next Equity coupon date.\r\n            \r\nSupported string (enumeration) values are: [PayAtNextEquityCouponDate, PayAtMaturityOfSwap, PayAtNextFundingLegCouponDate, PayAtPaymentDateOfDividendEvent].",
                "nullable": true
              },
              "instrumentType": {
                "enum": [
                  "QuotedSecurity",
                  "InterestRateSwap",
                  "FxForward",
                  "Future",
                  "ExoticInstrument",
                  "FxOption",
                  "CreditDefaultSwap",
                  "InterestRateSwaption",
                  "Bond",
                  "EquityOption",
                  "FixedLeg",
                  "FloatingLeg",
                  "BespokeCashFlowsLeg",
                  "Unknown",
                  "TermDeposit",
                  "ContractForDifference",
                  "EquitySwap",
                  "CashPerpetual",
                  "CapFloor",
                  "CashSettled",
                  "CdsIndex",
                  "Basket",
                  "FundingLeg",
                  "FxSwap",
                  "ForwardRateAgreement",
                  "SimpleInstrument",
                  "Repo",
                  "Equity",
                  "ExchangeTradedOption",
                  "ReferenceInstrument",
                  "ComplexBond",
                  "InflationLinkedBond",
                  "InflationSwap",
                  "SimpleCashFlowLoan"
                ],
                "type": "string",
                "description": "The available values are: QuotedSecurity, InterestRateSwap, FxForward, Future, ExoticInstrument, FxOption, CreditDefaultSwap, InterestRateSwaption, Bond, EquityOption, FixedLeg, FloatingLeg, BespokeCashFlowsLeg, Unknown, TermDeposit, ContractForDifference, EquitySwap, CashPerpetual, CapFloor, CashSettled, CdsIndex, Basket, FundingLeg, FxSwap, ForwardRateAgreement, SimpleInstrument, Repo, Equity, ExchangeTradedOption, ReferenceInstrument, ComplexBond, InflationLinkedBond, InflationSwap, SimpleCashFlowLoan"
              }
            }
          }
        ],
        "description": "LUSID representation of an Equity Swap."
      },
      "EquityVolDependency": {
        "allOf": [
          {
            "$ref": "#/components/schemas/EconomicDependency"
          },
          {
            "required": [
              "code",
              "date",
              "dependencyType",
              "domesticCurrency",
              "volType"
            ],
            "type": "object",
            "properties": {
              "code": {
                "maxLength": 50,
                "minLength": 0,
                "type": "string",
                "description": "The code identifying the corresponding equity, e.g. US0378331005 if the MarketIdentifier was set to ISIN"
              },
              "domesticCurrency": {
                "type": "string",
                "description": "The domestic currency of the instrument declaring this dependency."
              },
              "volType": {
                "maxLength": 50,
                "minLength": 0,
                "type": "string",
                "description": "Volatility type e.g. \"LN\" and \"N\" for log-normal and normal volatility."
              },
              "date": {
                "type": "string",
                "description": "The effectiveDate of the entity that this is a dependency for.\r\nUnless there is an obvious date this should be, like for a historic reset, then this is the valuation date.",
                "format": "date-time"
              },
              "dependencyType": {
                "enum": [
                  "OpaqueDependency",
                  "CashDependency",
                  "DiscountingDependency",
                  "EquityCurveDependency",
                  "EquityVolDependency",
                  "FxDependency",
                  "FxForwardsDependency",
                  "FxVolDependency",
                  "IndexProjectionDependency",
                  "IrVolDependency",
                  "QuoteDependency",
                  "Vendor"
                ],
                "type": "string",
                "description": "The available values are: OpaqueDependency, CashDependency, DiscountingDependency, EquityCurveDependency, EquityVolDependency, FxDependency, FxForwardsDependency, FxVolDependency, IndexProjectionDependency, IrVolDependency, QuoteDependency, Vendor"
              }
            }
          }
        ],
        "description": "Economic dependency required to price Equity derivative products that contain optionality.\r\nEquity Vol surface is a grid of implied volatilities for an array of strikes and tenors,\r\nderived from vanilla option prices in the market."
      },
      "EquityVolSurfaceData": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ComplexMarketData"
          },
          {
            "required": [
              "baseDate",
              "instruments",
              "marketDataType",
              "quotes"
            ],
            "type": "object",
            "properties": {
              "baseDate": {
                "type": "string",
                "description": "Base date of the surface",
                "format": "date-time"
              },
              "instruments": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/LusidInstrument"
                },
                "description": "The set of instruments that define the surface."
              },
              "quotes": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/MarketQuote"
                },
                "description": "The set of market quotes that define the surface, in NormalVol or LogNormalVol terms."
              },
              "lineage": {
                "maxLength": 1024,
                "minLength": 0,
                "type": "string",
                "description": "Description of the complex market data's lineage e.g. 'FundAccountant_GreenQuality'.",
                "nullable": true
              },
              "marketDataType": {
                "enum": [
                  "DiscountFactorCurveData",
                  "EquityVolSurfaceData",
                  "FxVolSurfaceData",
                  "IrVolCubeData",
                  "OpaqueMarketData",
                  "YieldCurveData",
                  "FxForwardCurveData",
                  "FxForwardPipsCurveData",
                  "FxForwardTenorCurveData",
                  "FxForwardTenorPipsCurveData",
                  "FxForwardCurveByQuoteReference",
                  "CreditSpreadCurveData",
                  "EquityCurveByPricesData"
                ],
                "type": "string",
                "description": "The available values are: DiscountFactorCurveData, EquityVolSurfaceData, FxVolSurfaceData, IrVolCubeData, OpaqueMarketData, YieldCurveData, FxForwardCurveData, FxForwardPipsCurveData, FxForwardTenorCurveData, FxForwardTenorPipsCurveData, FxForwardCurveByQuoteReference, CreditSpreadCurveData, EquityCurveByPricesData"
              }
            }
          }
        ],
        "description": "Market Data for an equity vol surface, represented by a list of instruments and corresponding market quotes"
      },
      "ErrorDetail": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The id of the failed item that this error relates to.",
            "nullable": true
          },
          "type": {
            "type": "string",
            "description": "The type of failure that occurred.",
            "nullable": true
          },
          "detail": {
            "type": "string",
            "description": "Description of the failure that occurred.",
            "nullable": true
          },
          "errorDetails": {
            "type": "array",
            "items": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            "description": "Information about the particular instance of the failure (supplied information depends on the type of failure).",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "EventDateRange": {
        "type": "object",
        "properties": {
          "start": {
            "type": "string",
            "format": "date-time"
          },
          "end": {
            "type": "string",
            "format": "date-time"
          }
        },
        "additionalProperties": false,
        "description": "A standard representation of the effective date range for the event, used for display, filtering and windowing use cases.\r\nThe start and end values for the eventDateRange are mapped from the particular dates contained within the specific\r\nInstrumentEvent schema.  Note that the start and end values may be identical for some types of events."
      },
      "ExchangeTradedOption": {
        "allOf": [
          {
            "$ref": "#/components/schemas/LusidInstrument"
          },
          {
            "required": [
              "contractDetails",
              "contracts",
              "instrumentType",
              "refSpotPrice",
              "startDate"
            ],
            "type": "object",
            "properties": {
              "startDate": {
                "type": "string",
                "description": "The start date of the instrument. This is normally synonymous with the trade-date.",
                "format": "date-time"
              },
              "contractDetails": {
                "$ref": "#/components/schemas/ExchangeTradedOptionContractDetails"
              },
              "contracts": {
                "type": "number",
                "description": "The number of contracts held.",
                "format": "double"
              },
              "refSpotPrice": {
                "type": "number",
                "description": "The reference spot price for the option at which the contract was entered into.",
                "format": "double"
              },
              "instrumentType": {
                "enum": [
                  "QuotedSecurity",
                  "InterestRateSwap",
                  "FxForward",
                  "Future",
                  "ExoticInstrument",
                  "FxOption",
                  "CreditDefaultSwap",
                  "InterestRateSwaption",
                  "Bond",
                  "EquityOption",
                  "FixedLeg",
                  "FloatingLeg",
                  "BespokeCashFlowsLeg",
                  "Unknown",
                  "TermDeposit",
                  "ContractForDifference",
                  "EquitySwap",
                  "CashPerpetual",
                  "CapFloor",
                  "CashSettled",
                  "CdsIndex",
                  "Basket",
                  "FundingLeg",
                  "FxSwap",
                  "ForwardRateAgreement",
                  "SimpleInstrument",
                  "Repo",
                  "Equity",
                  "ExchangeTradedOption",
                  "ReferenceInstrument",
                  "ComplexBond",
                  "InflationLinkedBond",
                  "InflationSwap",
                  "SimpleCashFlowLoan"
                ],
                "type": "string",
                "description": "The available values are: QuotedSecurity, InterestRateSwap, FxForward, Future, ExoticInstrument, FxOption, CreditDefaultSwap, InterestRateSwaption, Bond, EquityOption, FixedLeg, FloatingLeg, BespokeCashFlowsLeg, Unknown, TermDeposit, ContractForDifference, EquitySwap, CashPerpetual, CapFloor, CashSettled, CdsIndex, Basket, FundingLeg, FxSwap, ForwardRateAgreement, SimpleInstrument, Repo, Equity, ExchangeTradedOption, ReferenceInstrument, ComplexBond, InflationLinkedBond, InflationSwap, SimpleCashFlowLoan"
              }
            }
          }
        ],
        "description": "LUSID representation of an Exchange Traded Option.\r\nIncluding, but not limited to, Equity Options, Bond Options, Index Options, Future Options, and Interest Rate Options."
      },
      "ExchangeTradedOptionContractDetails": {
        "required": [
          "contractSize",
          "country",
          "deliveryType",
          "description",
          "domCcy",
          "exchangeCode",
          "exerciseDate",
          "exerciseType",
          "optionCode",
          "optionType",
          "strike",
          "underlying",
          "underlyingCode"
        ],
        "type": "object",
        "properties": {
          "domCcy": {
            "type": "string",
            "description": "Currency in which the contract is paid."
          },
          "strike": {
            "type": "number",
            "description": "The option strike, this can be negative for some options.",
            "format": "double"
          },
          "contractSize": {
            "type": "number",
            "description": "Size of a single contract. By default this should be set to 1000 if otherwise unknown and is defaulted to such.",
            "format": "double"
          },
          "country": {
            "minLength": 1,
            "type": "string",
            "description": "Country (code) for the exchange."
          },
          "deliveryType": {
            "minLength": 1,
            "type": "string",
            "description": "The delivery type, cash or physical. An option on a future is physically settled if upon exercising the\r\nholder receives a future.\r\n\r\nSupported string (enumeration) values are: [Cash, Physical]."
          },
          "description": {
            "minLength": 1,
            "type": "string",
            "description": "Description of contract"
          },
          "exchangeCode": {
            "minLength": 1,
            "type": "string",
            "description": "Exchange code for contract. This can be any string to uniquely identify the exchange (e.g. Exchange Name, MIC, BBG code)."
          },
          "exerciseDate": {
            "type": "string",
            "description": "Exercise Date.",
            "format": "date-time"
          },
          "exerciseType": {
            "minLength": 1,
            "type": "string",
            "description": "The exercise type, European, American or Bermudan.\r\n\r\nSupported string (enumeration) values are: [European, Bermudan, American]."
          },
          "optionCode": {
            "minLength": 1,
            "type": "string",
            "description": "Option Contract Code, typically one or two letters, e.g. OG => Option on Gold."
          },
          "optionType": {
            "minLength": 1,
            "type": "string",
            "description": "The option type, Call or Put.\r\n\r\nSupported string (enumeration) values are: [Call, Put]."
          },
          "underlying": {
            "$ref": "#/components/schemas/LusidInstrument"
          },
          "underlyingCode": {
            "minLength": 1,
            "type": "string",
            "description": "Code of the underlying, for an option on futures this should be the futures code."
          }
        },
        "additionalProperties": false,
        "description": "Most, if not all, information about contracts is standardised. See, e.g. https://www.cmegroup.com/ for\r\ncommon codes and similar data. This appears to be in common use by well known market information providers, e.g. Bloomberg and Refinitiv.\r\nThere is a lot of overlap with this and FuturesContractDetails but as that is an established DTO we must duplicate a number of fields here"
      },
      "Execution": {
        "required": [
          "counterparty",
          "createdDate",
          "id",
          "instrumentIdentifiers",
          "lusidInstrumentId",
          "placementId",
          "price",
          "quantity",
          "settlementCurrency",
          "settlementCurrencyFxRate",
          "side",
          "state",
          "type"
        ],
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/ResourceId"
          },
          "placementId": {
            "$ref": "#/components/schemas/ResourceId"
          },
          "properties": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/PerpetualProperty"
            },
            "description": "Client-defined properties associated with this execution.",
            "nullable": true
          },
          "instrumentIdentifiers": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "The instrument ordered."
          },
          "lusidInstrumentId": {
            "minLength": 1,
            "type": "string",
            "description": "The LUSID instrument id for the instrument execution."
          },
          "quantity": {
            "type": "number",
            "description": "The quantity of given instrument ordered.",
            "format": "double"
          },
          "state": {
            "minLength": 1,
            "type": "string",
            "description": "The state of this execution (typically a FIX state; Open, Filled, etc)."
          },
          "side": {
            "minLength": 1,
            "type": "string",
            "description": "The side (Buy, Sell, ...) of this execution."
          },
          "type": {
            "minLength": 1,
            "type": "string",
            "description": "The type of this execution (Market, Limit, etc)."
          },
          "createdDate": {
            "type": "string",
            "description": "The active date of this execution.",
            "format": "date-time"
          },
          "settlementDate": {
            "type": "string",
            "description": "The (optional) settlement date for this execution",
            "format": "date-time",
            "nullable": true
          },
          "price": {
            "$ref": "#/components/schemas/CurrencyAndAmount"
          },
          "settlementCurrency": {
            "type": "string",
            "description": "The execution's settlement currency."
          },
          "settlementCurrencyFxRate": {
            "type": "number",
            "description": "The exectuion's settlement currency rate.",
            "format": "double"
          },
          "counterparty": {
            "minLength": 1,
            "type": "string",
            "description": "The market entity this placement is placed with."
          },
          "averagePrice": {
            "type": "number",
            "description": "The average price of all executions for a given placement at the time of upsert",
            "format": "double",
            "nullable": true
          },
          "version": {
            "$ref": "#/components/schemas/Version"
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "description": "Collection of links.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "The record of a number of executions against a single Placement (directly analogous to\r\na partial or full fill against a street order)."
      },
      "ExecutionRequest": {
        "required": [
          "counterparty",
          "createdDate",
          "id",
          "instrumentIdentifiers",
          "placementId",
          "price",
          "quantity",
          "settlementCurrency",
          "settlementCurrencyFxRate",
          "side",
          "state",
          "type"
        ],
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/ResourceId"
          },
          "placementId": {
            "$ref": "#/components/schemas/ResourceId"
          },
          "properties": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/PerpetualProperty"
            },
            "description": "Client-defined properties associated with this execution.",
            "nullable": true
          },
          "instrumentIdentifiers": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "The instrument ordered."
          },
          "quantity": {
            "type": "number",
            "description": "The quantity of given instrument ordered.",
            "format": "double"
          },
          "state": {
            "minLength": 1,
            "type": "string",
            "description": "The state of this execution (typically a FIX state; Open, Filled, etc)."
          },
          "side": {
            "minLength": 1,
            "type": "string",
            "description": "The side (Buy, Sell, ...) of this execution."
          },
          "type": {
            "minLength": 1,
            "type": "string",
            "description": "The type of this execution (Market, Limit, etc)."
          },
          "createdDate": {
            "type": "string",
            "description": "The active date of this execution.",
            "format": "date-time"
          },
          "settlementDate": {
            "type": "string",
            "description": "The (optional) settlement date for this execution",
            "format": "date-time",
            "nullable": true
          },
          "price": {
            "$ref": "#/components/schemas/CurrencyAndAmount"
          },
          "settlementCurrency": {
            "type": "string",
            "description": "The execution's settlement currency."
          },
          "settlementCurrencyFxRate": {
            "type": "number",
            "description": "The exectuion's settlement currency rate.",
            "format": "double"
          },
          "counterparty": {
            "minLength": 1,
            "type": "string",
            "description": "The market entity this placement is placed with."
          },
          "averagePrice": {
            "type": "number",
            "description": "The average price of all executions for a given placement at the time of upsert",
            "format": "double",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "A request to create or update a Execution."
      },
      "ExecutionSetRequest": {
        "type": "object",
        "properties": {
          "requests": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ExecutionRequest"
            },
            "description": "A collection of ExecutionRequests.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "A request to create or update multiple Executions."
      },
      "ExerciseEvent": {
        "allOf": [
          {
            "$ref": "#/components/schemas/InstrumentEvent"
          },
          {
            "required": [
              "anchorDate",
              "eventStatus",
              "instrument",
              "instrumentEventType"
            ],
            "type": "object",
            "properties": {
              "instrument": {
                "$ref": "#/components/schemas/LusidInstrument"
              },
              "eventStatus": {
                "minLength": 1,
                "type": "string",
                "description": "What is the event status, is it a known (ie historic) or unknown (ie projected) event?"
              },
              "anchorDate": {
                "type": "string",
                "description": "The date the exercise window starts, or point it takes effect on.",
                "format": "date-time"
              },
              "eventWindowEnd": {
                "type": "string",
                "description": "The date the exercise window ends, or point it takes effect on.",
                "format": "date-time",
                "readOnly": true
              },
              "instrumentEventType": {
                "enum": [
                  "TransitionEvent",
                  "InformationalEvent",
                  "OpenEvent",
                  "CloseEvent",
                  "StockSplitEvent",
                  "BondDefaultEvent",
                  "CashDividendEvent",
                  "AmortisationEvent",
                  "CashFlowEvent",
                  "ExerciseEvent",
                  "ResetEvent",
                  "TriggerEvent",
                  "RawVendorEvent",
                  "InformationalErrorEvent"
                ],
                "type": "string",
                "description": "The Type of Event. The available values are: TransitionEvent, InformationalEvent, OpenEvent, CloseEvent, StockSplitEvent, BondDefaultEvent, CashDividendEvent, AmortisationEvent, CashFlowEvent, ExerciseEvent, ResetEvent, TriggerEvent, RawVendorEvent, InformationalErrorEvent"
              }
            }
          }
        ],
        "description": "Definition of an exercise event.\r\nThis is an event that occurs on transformation of an instrument owing to exercise. e.g. an option of\r\nsome type into its underlying."
      },
      "ExoticInstrument": {
        "allOf": [
          {
            "$ref": "#/components/schemas/LusidInstrument"
          },
          {
            "required": [
              "content",
              "instrumentFormat",
              "instrumentType"
            ],
            "type": "object",
            "properties": {
              "instrumentFormat": {
                "$ref": "#/components/schemas/InstrumentDefinitionFormat"
              },
              "content": {
                "minLength": 1,
                "type": "string",
                "description": "The original document received into the system. This format could potentially be anything though is most likely to be either Json or Xml. In the case where no other\r\ninterface is supported it is possible to fall back onto this.\r\nFor example, a trade from an external client system. This may be recognized internally by Lusid or simply passed through to another vendor system."
              },
              "instrumentType": {
                "enum": [
                  "QuotedSecurity",
                  "InterestRateSwap",
                  "FxForward",
                  "Future",
                  "ExoticInstrument",
                  "FxOption",
                  "CreditDefaultSwap",
                  "InterestRateSwaption",
                  "Bond",
                  "EquityOption",
                  "FixedLeg",
                  "FloatingLeg",
                  "BespokeCashFlowsLeg",
                  "Unknown",
                  "TermDeposit",
                  "ContractForDifference",
                  "EquitySwap",
                  "CashPerpetual",
                  "CapFloor",
                  "CashSettled",
                  "CdsIndex",
                  "Basket",
                  "FundingLeg",
                  "FxSwap",
                  "ForwardRateAgreement",
                  "SimpleInstrument",
                  "Repo",
                  "Equity",
                  "ExchangeTradedOption",
                  "ReferenceInstrument",
                  "ComplexBond",
                  "InflationLinkedBond",
                  "InflationSwap",
                  "SimpleCashFlowLoan"
                ],
                "type": "string",
                "description": "The available values are: QuotedSecurity, InterestRateSwap, FxForward, Future, ExoticInstrument, FxOption, CreditDefaultSwap, InterestRateSwaption, Bond, EquityOption, FixedLeg, FloatingLeg, BespokeCashFlowsLeg, Unknown, TermDeposit, ContractForDifference, EquitySwap, CashPerpetual, CapFloor, CashSettled, CdsIndex, Basket, FundingLeg, FxSwap, ForwardRateAgreement, SimpleInstrument, Repo, Equity, ExchangeTradedOption, ReferenceInstrument, ComplexBond, InflationLinkedBond, InflationSwap, SimpleCashFlowLoan"
              }
            }
          }
        ],
        "description": "LUSID representation of a generic OTC Exotic Instrument that is not fully defined within other LUSID models."
      },
      "ExpandedGroup": {
        "required": [
          "displayName",
          "id"
        ],
        "type": "object",
        "properties": {
          "href": {
            "type": "string",
            "description": "The specific Uniform Resource Identifier (URI) for this resource at the requested effective and asAt datetime.",
            "format": "uri",
            "nullable": true
          },
          "id": {
            "$ref": "#/components/schemas/ResourceId"
          },
          "displayName": {
            "minLength": 1,
            "type": "string",
            "description": "The name of the portfolio group."
          },
          "description": {
            "type": "string",
            "description": "The long form description of the portfolio group.",
            "nullable": true
          },
          "values": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CompletePortfolio"
            },
            "description": "The collection of resource identifiers for the portfolios contained in the portfolio group.",
            "nullable": true
          },
          "subGroups": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ExpandedGroup"
            },
            "description": "The collection of resource identifiers for the portfolio groups contained in the portfolio group as sub groups.",
            "nullable": true
          },
          "version": {
            "$ref": "#/components/schemas/Version"
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "description": "Collection of links.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "FieldDefinition": {
        "required": [
          "isRequired",
          "isUnique",
          "key"
        ],
        "type": "object",
        "properties": {
          "key": {
            "maxLength": 512,
            "minLength": 1,
            "pattern": "^[\\s\\S]*$",
            "type": "string"
          },
          "isRequired": {
            "type": "boolean"
          },
          "isUnique": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "FieldSchema": {
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/ResourceId"
          },
          "displayName": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "type": {
            "enum": [
              "String",
              "Int",
              "Decimal",
              "DateTime",
              "Boolean",
              "Map",
              "List",
              "PropertyArray",
              "Percentage",
              "Code",
              "Id",
              "Uri",
              "CurrencyAndAmount",
              "TradePrice",
              "Currency",
              "MetricValue",
              "ResourceId",
              "ResultValue",
              "CutLocalTime",
              "DateOrCutLabel",
              "UnindexedText"
            ],
            "type": "string",
            "description": "The available values are: String, Int, Decimal, DateTime, Boolean, Map, List, PropertyArray, Percentage, Code, Id, Uri, CurrencyAndAmount, TradePrice, Currency, MetricValue, ResourceId, ResultValue, CutLocalTime, DateOrCutLabel, UnindexedText"
          },
          "displayOrder": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "FieldValue": {
        "required": [
          "fields",
          "value"
        ],
        "type": "object",
        "properties": {
          "value": {
            "maxLength": 512,
            "minLength": 1,
            "pattern": "^[\\s\\S]*$",
            "type": "string"
          },
          "fields": {
            "maxLength": 10,
            "minLength": 1,
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          }
        },
        "additionalProperties": false
      },
      "FileResponse": {
        "type": "object",
        "properties": {
          "fileStream": {
            "$ref": "#/components/schemas/Stream"
          },
          "contentType": {
            "type": "string",
            "nullable": true
          },
          "downloadedFilename": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Allows a file (represented as a stream) to be returned from an Api call"
      },
      "FixedLeg": {
        "allOf": [
          {
            "$ref": "#/components/schemas/InstrumentLeg"
          },
          {
            "required": [
              "instrumentType",
              "legDefinition",
              "maturityDate",
              "notional",
              "startDate"
            ],
            "type": "object",
            "properties": {
              "startDate": {
                "type": "string",
                "description": "The start date of the instrument. This is normally synonymous with the trade-date.",
                "format": "date-time"
              },
              "maturityDate": {
                "type": "string",
                "description": "The final maturity date of the instrument. This means the last date on which the instruments makes a payment of any amount.\r\nFor the avoidance of doubt, that is not necessarily prior to its last sensitivity date for the purposes of risk; e.g. instruments such as\r\nConstant Maturity Swaps (CMS) often have sensitivities to rates that may well be observed or set prior to the maturity date, but refer to a termination date beyond it.",
                "format": "date-time"
              },
              "legDefinition": {
                "$ref": "#/components/schemas/LegDefinition"
              },
              "notional": {
                "type": "number",
                "format": "double"
              },
              "overrides": {
                "type": "object",
                "properties": {
                  "Amortization": {
                    "type": "array",
                    "items": {
                      "type": "number",
                      "format": "double"
                    }
                  },
                  "Spreads": {
                    "type": "array",
                    "items": {
                      "type": "number",
                      "format": "double"
                    }
                  }
                },
                "additionalProperties": false,
                "description": "Any overriding data for notionals, spreads or rates that would affect generation of a leg.\r\nThis supports the case where an amortisation schedule is given but otherwise generation is allowed as usual.",
                "nullable": true
              },
              "instrumentType": {
                "enum": [
                  "QuotedSecurity",
                  "InterestRateSwap",
                  "FxForward",
                  "Future",
                  "ExoticInstrument",
                  "FxOption",
                  "CreditDefaultSwap",
                  "InterestRateSwaption",
                  "Bond",
                  "EquityOption",
                  "FixedLeg",
                  "FloatingLeg",
                  "BespokeCashFlowsLeg",
                  "Unknown",
                  "TermDeposit",
                  "ContractForDifference",
                  "EquitySwap",
                  "CashPerpetual",
                  "CapFloor",
                  "CashSettled",
                  "CdsIndex",
                  "Basket",
                  "FundingLeg",
                  "FxSwap",
                  "ForwardRateAgreement",
                  "SimpleInstrument",
                  "Repo",
                  "Equity",
                  "ExchangeTradedOption",
                  "ReferenceInstrument",
                  "ComplexBond",
                  "InflationLinkedBond",
                  "InflationSwap",
                  "SimpleCashFlowLoan"
                ],
                "type": "string",
                "description": "The available values are: QuotedSecurity, InterestRateSwap, FxForward, Future, ExoticInstrument, FxOption, CreditDefaultSwap, InterestRateSwaption, Bond, EquityOption, FixedLeg, FloatingLeg, BespokeCashFlowsLeg, Unknown, TermDeposit, ContractForDifference, EquitySwap, CashPerpetual, CapFloor, CashSettled, CdsIndex, Basket, FundingLeg, FxSwap, ForwardRateAgreement, SimpleInstrument, Repo, Equity, ExchangeTradedOption, ReferenceInstrument, ComplexBond, InflationLinkedBond, InflationSwap, SimpleCashFlowLoan"
              }
            }
          }
        ],
        "description": "LUSID representation of a Fixed Rate Leg."
      },
      "FloatingLeg": {
        "allOf": [
          {
            "$ref": "#/components/schemas/InstrumentLeg"
          },
          {
            "required": [
              "instrumentType",
              "legDefinition",
              "maturityDate",
              "notional",
              "startDate"
            ],
            "type": "object",
            "properties": {
              "startDate": {
                "type": "string",
                "description": "The start date of the instrument. This is normally synonymous with the trade-date.",
                "format": "date-time"
              },
              "maturityDate": {
                "type": "string",
                "description": "The final maturity date of the instrument. This means the last date on which the instruments makes a payment of any amount.\r\nFor the avoidance of doubt, that is not necessarily prior to its last sensitivity date for the purposes of risk; e.g. instruments such as\r\nConstant Maturity Swaps (CMS) often have sensitivities to rates that may well be observed or set prior to the maturity date, but refer to a termination date beyond it.",
                "format": "date-time"
              },
              "legDefinition": {
                "$ref": "#/components/schemas/LegDefinition"
              },
              "notional": {
                "type": "number",
                "description": "Scaling factor to apply to leg quantities.",
                "format": "double"
              },
              "overrides": {
                "type": "object",
                "properties": {
                  "Amortization": {
                    "type": "array",
                    "items": {
                      "type": "number",
                      "format": "double"
                    }
                  },
                  "Spreads": {
                    "type": "array",
                    "items": {
                      "type": "number",
                      "format": "double"
                    }
                  }
                },
                "additionalProperties": false,
                "description": "Any overriding data for notionals, spreads or rates that would affect generation of a leg.\r\nThis supports the case where an amortisation schedule is given but otherwise generation is allowed as usual.",
                "nullable": true
              },
              "instrumentType": {
                "enum": [
                  "QuotedSecurity",
                  "InterestRateSwap",
                  "FxForward",
                  "Future",
                  "ExoticInstrument",
                  "FxOption",
                  "CreditDefaultSwap",
                  "InterestRateSwaption",
                  "Bond",
                  "EquityOption",
                  "FixedLeg",
                  "FloatingLeg",
                  "BespokeCashFlowsLeg",
                  "Unknown",
                  "TermDeposit",
                  "ContractForDifference",
                  "EquitySwap",
                  "CashPerpetual",
                  "CapFloor",
                  "CashSettled",
                  "CdsIndex",
                  "Basket",
                  "FundingLeg",
                  "FxSwap",
                  "ForwardRateAgreement",
                  "SimpleInstrument",
                  "Repo",
                  "Equity",
                  "ExchangeTradedOption",
                  "ReferenceInstrument",
                  "ComplexBond",
                  "InflationLinkedBond",
                  "InflationSwap",
                  "SimpleCashFlowLoan"
                ],
                "type": "string",
                "description": "The available values are: QuotedSecurity, InterestRateSwap, FxForward, Future, ExoticInstrument, FxOption, CreditDefaultSwap, InterestRateSwaption, Bond, EquityOption, FixedLeg, FloatingLeg, BespokeCashFlowsLeg, Unknown, TermDeposit, ContractForDifference, EquitySwap, CashPerpetual, CapFloor, CashSettled, CdsIndex, Basket, FundingLeg, FxSwap, ForwardRateAgreement, SimpleInstrument, Repo, Equity, ExchangeTradedOption, ReferenceInstrument, ComplexBond, InflationLinkedBond, InflationSwap, SimpleCashFlowLoan"
              }
            }
          }
        ],
        "description": "LUSID representation of a Floating Rate Leg."
      },
      "FlowConventionName": {
        "required": [
          "currency",
          "tenor"
        ],
        "type": "object",
        "properties": {
          "currency": {
            "type": "string",
            "description": "Currency of the flow convention name."
          },
          "indexName": {
            "type": "string",
            "description": "The index, if present, that is required. e.g. \"IBOR\", \"OIS\" or \"SONIA\".",
            "nullable": true
          },
          "tenor": {
            "minLength": 1,
            "type": "string",
            "description": "Tenor for the convention name."
          }
        },
        "additionalProperties": false,
        "description": "Representation of an abstract definition of a flow convention set consisting of currency, tenor and an index name (arbitrary string but likely something like \"IBOR\")."
      },
      "FlowConventions": {
        "required": [
          "currency",
          "dayCountConvention",
          "paymentCalendars",
          "paymentFrequency",
          "resetCalendars",
          "rollConvention"
        ],
        "type": "object",
        "properties": {
          "currency": {
            "type": "string",
            "description": "Currency of the flow convention."
          },
          "paymentFrequency": {
            "maxLength": 50,
            "minLength": 0,
            "type": "string",
            "description": "When generating a multiperiod flow, or when the maturity of the flow is not given but the start date is,\r\nthe tenor is the time-step from the anchor-date to the nominal maturity of the flow prior to any adjustment."
          },
          "dayCountConvention": {
            "maxLength": 50,
            "minLength": 0,
            "type": "string",
            "description": "when calculating the fraction of a year between two dates, what convention is used to represent the number of days in a year\r\nand difference between them.\r\nFor more information on day counts, see [knowledge base article KA-01798](https://support.lusid.com/knowledgebase/article/KA-01798)\r\n            \r\nSupported string (enumeration) values are: [Actual360, Act360, MoneyMarket, Actual365, Act365, Thirty360, ThirtyU360, Bond, ThirtyE360, EuroBond, ActualActual, ActAct, ActActIsda, ActActIsma, ActActIcma, OneOne, Act364, Act365F, Act365L, Act365_25, Act252, Bus252, NL360, NL365, ActActAFB, Act365Cad, ThirtyActIsda, Thirty365Isda, ThirtyEActIsda, ThirtyE360Isda, ThirtyE365Isda, ThirtyU360EOM]."
          },
          "rollConvention": {
            "maxLength": 50,
            "minLength": 0,
            "type": "string",
            "description": "When generating a set of dates, what convention should be used for adjusting dates that coincide with a non-business day.\r\n\r\nSupported string (enumeration) values are: [NoAdjustment, Previous, P, Following, F, ModifiedPrevious, MP, ModifiedFollowing, MF, HalfMonthModifiedFollowing]."
          },
          "paymentCalendars": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "An array of strings denoting holiday calendars that apply to generation of payment schedules."
          },
          "resetCalendars": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "An array of strings denoting holiday calendars that apply to generation of reset schedules."
          },
          "settleDays": {
            "type": "integer",
            "description": "DEPRECATED\r\nNumber of Good Business Days between the trade date and the effective or settlement date of the instrument.\r\nThis field is now deprecated and not picked up in schedule generation or adjustment to bond accrual start date. Defaulted to 0 if not set.",
            "format": "int32"
          },
          "resetDays": {
            "type": "integer",
            "description": "The number of Good Business Days between determination and payment of reset. Defaulted to 0 if not set.",
            "format": "int32"
          },
          "leapDaysIncluded": {
            "type": "boolean",
            "description": "If this flag is set to true, the 29th of February is included in the date schedule when the business roll convention is applied.\r\nIf this flag is set to false, the business roll convention ignores February 29 for date schedules, cash flow payments etc.\r\nThis flag defaults to true if not specified, i.e., leap days are included in a date schedule generation.",
            "nullable": true
          },
          "accrualDateAdjustment": {
            "maxLength": 50,
            "minLength": 0,
            "type": "string",
            "description": "Indicates if the accrual dates are adjusted to the payment dates. The default value is 'Adjusted'.\r\n\r\nSupported string (enumeration) values are: [Adjusted, Unadjusted].",
            "nullable": true
          },
          "scope": {
            "maxLength": 256,
            "minLength": 1,
            "pattern": "^[a-zA-Z0-9\\-_]+$",
            "type": "string",
            "description": "The scope used when updating or inserting the convention.",
            "nullable": true
          },
          "code": {
            "maxLength": 256,
            "minLength": 1,
            "pattern": "^[a-zA-Z0-9\\-_]+$",
            "type": "string",
            "description": "The code of the convention.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "A flow convention defines the specification for generation of the date schedule for a leg or set of cashflows.\r\nIt determines the tenor of these and, how to map the unadjusted set of dates to dates which are 'good business\r\ndays'. For example, if an unadjusted date falls on a Saturday or a bank holiday, should it be rolled forward\r\nor backward to obtain the adjusted date.\r\nFor more information, see https://support.lusid.com/knowledgebase/article/KA-02055/"
      },
      "ForwardRateAgreement": {
        "allOf": [
          {
            "$ref": "#/components/schemas/LusidInstrument"
          },
          {
            "required": [
              "domCcy",
              "fixingDate",
              "fraRate",
              "instrumentType",
              "maturityDate",
              "notional",
              "startDate"
            ],
            "type": "object",
            "properties": {
              "startDate": {
                "type": "string",
                "description": "The settlement date of the FRA",
                "format": "date-time"
              },
              "maturityDate": {
                "type": "string",
                "description": "The final maturity date of the instrument. This means the last date on which the instruments makes a payment of any amount.\r\nFor the avoidance of doubt, that is not necessarily prior to its last sensitivity date for the purposes of risk; e.g. instruments such as\r\nConstant Maturity Swaps (CMS) often have sensitivities to rates beyond their last payment date.",
                "format": "date-time"
              },
              "domCcy": {
                "type": "string",
                "description": "The domestic currency of the instrument."
              },
              "fixingDate": {
                "type": "string",
                "description": "The date at which the rate to be paid, the reference rate, is confirmed/observed.",
                "format": "date-time"
              },
              "fraRate": {
                "type": "number",
                "description": "The rate at which the FRA is traded.",
                "format": "double"
              },
              "notional": {
                "type": "number",
                "description": "The amount for which the FRA is traded.",
                "format": "double"
              },
              "indexConvention": {
                "$ref": "#/components/schemas/IndexConvention"
              },
              "instrumentType": {
                "enum": [
                  "QuotedSecurity",
                  "InterestRateSwap",
                  "FxForward",
                  "Future",
                  "ExoticInstrument",
                  "FxOption",
                  "CreditDefaultSwap",
                  "InterestRateSwaption",
                  "Bond",
                  "EquityOption",
                  "FixedLeg",
                  "FloatingLeg",
                  "BespokeCashFlowsLeg",
                  "Unknown",
                  "TermDeposit",
                  "ContractForDifference",
                  "EquitySwap",
                  "CashPerpetual",
                  "CapFloor",
                  "CashSettled",
                  "CdsIndex",
                  "Basket",
                  "FundingLeg",
                  "FxSwap",
                  "ForwardRateAgreement",
                  "SimpleInstrument",
                  "Repo",
                  "Equity",
                  "ExchangeTradedOption",
                  "ReferenceInstrument",
                  "ComplexBond",
                  "InflationLinkedBond",
                  "InflationSwap",
                  "SimpleCashFlowLoan"
                ],
                "type": "string",
                "description": "The available values are: QuotedSecurity, InterestRateSwap, FxForward, Future, ExoticInstrument, FxOption, CreditDefaultSwap, InterestRateSwaption, Bond, EquityOption, FixedLeg, FloatingLeg, BespokeCashFlowsLeg, Unknown, TermDeposit, ContractForDifference, EquitySwap, CashPerpetual, CapFloor, CashSettled, CdsIndex, Basket, FundingLeg, FxSwap, ForwardRateAgreement, SimpleInstrument, Repo, Equity, ExchangeTradedOption, ReferenceInstrument, ComplexBond, InflationLinkedBond, InflationSwap, SimpleCashFlowLoan"
              }
            }
          }
        ],
        "description": "LUSID representation of a Forward Rate Agreement."
      },
      "FundingLeg": {
        "allOf": [
          {
            "$ref": "#/components/schemas/InstrumentLeg"
          },
          {
            "required": [
              "instrumentType",
              "legDefinition",
              "maturityDate",
              "startDate"
            ],
            "type": "object",
            "properties": {
              "startDate": {
                "type": "string",
                "description": "The start date of the instrument. This is normally synonymous with the trade-date.",
                "format": "date-time"
              },
              "maturityDate": {
                "type": "string",
                "description": "The final maturity date of the instrument. This means the last date on which the instruments makes a payment of any amount.\r\nFor the avoidance of doubt, that is not necessarily prior to its last sensitivity date for the purposes of risk; e.g. instruments such as\r\nConstant Maturity Swaps (CMS) often have sensitivities to rates beyond their last payment date.",
                "format": "date-time"
              },
              "legDefinition": {
                "$ref": "#/components/schemas/LegDefinition"
              },
              "notional": {
                "type": "number",
                "description": "The initial notional of the Funding Leg instrument.\r\nWhen \"RequiresFundingLegHistory\" property key is present in transaction key, during a GetValuation endpoint call (for instance),\r\nthis field would overriden by the Funding Leg history's notional and this notional field would not be used in the pricing and accrual calculations.\r\nAs such, we recommend setting this to 0 or not setting it at all.\r\nPlease see the following Notebook example and Knowledge Base article:\r\nNotebook: https://github.com/finbourne/sample-notebooks/blob/master/examples/use-cases/instruments/Funding%20Leg%20Swap.ipynb\r\nKnowledge Base article: https://support.lusid.com/knowledgebase/article/KA-01764/",
                "format": "double",
                "nullable": true
              },
              "instrumentType": {
                "enum": [
                  "QuotedSecurity",
                  "InterestRateSwap",
                  "FxForward",
                  "Future",
                  "ExoticInstrument",
                  "FxOption",
                  "CreditDefaultSwap",
                  "InterestRateSwaption",
                  "Bond",
                  "EquityOption",
                  "FixedLeg",
                  "FloatingLeg",
                  "BespokeCashFlowsLeg",
                  "Unknown",
                  "TermDeposit",
                  "ContractForDifference",
                  "EquitySwap",
                  "CashPerpetual",
                  "CapFloor",
                  "CashSettled",
                  "CdsIndex",
                  "Basket",
                  "FundingLeg",
                  "FxSwap",
                  "ForwardRateAgreement",
                  "SimpleInstrument",
                  "Repo",
                  "Equity",
                  "ExchangeTradedOption",
                  "ReferenceInstrument",
                  "ComplexBond",
                  "InflationLinkedBond",
                  "InflationSwap",
                  "SimpleCashFlowLoan"
                ],
                "type": "string",
                "description": "The available values are: QuotedSecurity, InterestRateSwap, FxForward, Future, ExoticInstrument, FxOption, CreditDefaultSwap, InterestRateSwaption, Bond, EquityOption, FixedLeg, FloatingLeg, BespokeCashFlowsLeg, Unknown, TermDeposit, ContractForDifference, EquitySwap, CashPerpetual, CapFloor, CashSettled, CdsIndex, Basket, FundingLeg, FxSwap, ForwardRateAgreement, SimpleInstrument, Repo, Equity, ExchangeTradedOption, ReferenceInstrument, ComplexBond, InflationLinkedBond, InflationSwap, SimpleCashFlowLoan"
              }
            }
          }
        ],
        "description": "LUSID representation of a Funding Leg with variable notional.\r\n\r\nThis Funding Leg is a hybrid between a single leg swap and a loan facility; the notional is not fixed and can vary within a reset period. \r\n            \r\nThe model can be used to represent the funding leg of a basket of instruments (e.g. equities) where the contents\r\nof the basket can change over time. The actual notional history is stored in the FundingLegHistory object. \r\n\r\nThe actual notional history is stored in the FundingLegHistory object.\r\n            \r\nThe main analytic calculated for this instrument is Accrual rather than PV."
      },
      "Future": {
        "allOf": [
          {
            "$ref": "#/components/schemas/LusidInstrument"
          },
          {
            "required": [
              "contractDetails",
              "identifiers",
              "instrumentType",
              "maturityDate",
              "startDate"
            ],
            "type": "object",
            "properties": {
              "startDate": {
                "type": "string",
                "description": "The start date of the instrument. This is normally synonymous with the trade-date.",
                "format": "date-time"
              },
              "maturityDate": {
                "type": "string",
                "description": "The final maturity date of the instrument. This means the last date on which the instruments makes a payment of any amount.\r\nFor the avoidance of doubt, that is not necessarily prior to its last sensitivity date for the purposes of risk; e.g. instruments such as\r\nConstant Maturity Swaps (CMS) often have sensitivities to rates that may well be observed or set prior to the maturity date, but refer to a termination date beyond it.",
                "format": "date-time"
              },
              "identifiers": {
                "type": "object",
                "additionalProperties": {
                  "type": "string"
                },
                "description": "External market codes and identifiers for the bond, e.g. ISIN."
              },
              "contractDetails": {
                "$ref": "#/components/schemas/FuturesContractDetails"
              },
              "contracts": {
                "type": "number",
                "description": "The number of contracts held.",
                "format": "double"
              },
              "refSpotPrice": {
                "type": "number",
                "description": "The reference spot price for the future at which the contract was entered into.",
                "format": "double"
              },
              "underlying": {
                "$ref": "#/components/schemas/LusidInstrument"
              },
              "calculationType": {
                "type": "string",
                "description": "Calculation type for some Future instruments which have non-standard methodology.\r\nOptional, if not set defaults as follows:\r\n- If ExchangeCode is \"ASX\" and ContractCode is \"IR\" or \"BB\" set to ASX_BankBills\r\n- If ExchangeCode is \"ASX\" and ContractCode is \"YT\" set to ASX_3Year\r\n- If ExchangeCode is \"ASX\" and ContractCode is \"VT\" set to ASX_5Year\r\n- If ExchangeCode is \"ASX\" and ContractCode is \"XT\" set to ASX_10Year\r\n- If ExchangeCode is \"ASX\" and ContractCode is \"LT\" set to ASX_20Year\r\n- otherwise set to Standard\r\n\r\nSpecific calculation types for ASX bond futures are:\r\n- [Standard] The default calculation type, which does not fit into any of the categories below.\r\n- [ASX_BankBills] Used for AUD and NZD futures “IR” and “BB” on ASX. 90D Bank Bills.\r\n- [ASX_3Year] Used for “YT” on ASX. 3YR semi-annual bond (6 coupons) @ 6%.\r\n- [ASX_5Year] Used for “VT” on ASX. 5yr semi-annual bond (10 coupons) @ 2%.\r\n- [ASX_10Year] Used for “XT” on ASX. 10yr semi-annual bond (20 coupons) @ 6%.\r\n- [ASX_20Year] Used for “LT” on ASX. 20yr semi-annual bond (40 coupons) @ 4%.\r\n\r\nSupported string (enumeration) values are: [Standard, ASX_BankBills, ASX_3Year, ASX_5Year, ASX_10Year, ASX_20Year, B3_DI1].",
                "nullable": true
              },
              "instrumentType": {
                "enum": [
                  "QuotedSecurity",
                  "InterestRateSwap",
                  "FxForward",
                  "Future",
                  "ExoticInstrument",
                  "FxOption",
                  "CreditDefaultSwap",
                  "InterestRateSwaption",
                  "Bond",
                  "EquityOption",
                  "FixedLeg",
                  "FloatingLeg",
                  "BespokeCashFlowsLeg",
                  "Unknown",
                  "TermDeposit",
                  "ContractForDifference",
                  "EquitySwap",
                  "CashPerpetual",
                  "CapFloor",
                  "CashSettled",
                  "CdsIndex",
                  "Basket",
                  "FundingLeg",
                  "FxSwap",
                  "ForwardRateAgreement",
                  "SimpleInstrument",
                  "Repo",
                  "Equity",
                  "ExchangeTradedOption",
                  "ReferenceInstrument",
                  "ComplexBond",
                  "InflationLinkedBond",
                  "InflationSwap",
                  "SimpleCashFlowLoan"
                ],
                "type": "string",
                "description": "The available values are: QuotedSecurity, InterestRateSwap, FxForward, Future, ExoticInstrument, FxOption, CreditDefaultSwap, InterestRateSwaption, Bond, EquityOption, FixedLeg, FloatingLeg, BespokeCashFlowsLeg, Unknown, TermDeposit, ContractForDifference, EquitySwap, CashPerpetual, CapFloor, CashSettled, CdsIndex, Basket, FundingLeg, FxSwap, ForwardRateAgreement, SimpleInstrument, Repo, Equity, ExchangeTradedOption, ReferenceInstrument, ComplexBond, InflationLinkedBond, InflationSwap, SimpleCashFlowLoan"
              }
            }
          }
        ],
        "description": "LUSID representation of a Future.\r\nIncluding, but not limited to, Equity Futures, Bond Futures, Index Futures, Currency Futures, and Interest Rate Futures."
      },
      "FuturesContractDetails": {
        "required": [
          "contractCode",
          "contractMonth",
          "contractSize",
          "domCcy",
          "exchangeCode"
        ],
        "type": "object",
        "properties": {
          "domCcy": {
            "type": "string",
            "description": "Currency in which the contract is paid."
          },
          "fgnCcy": {
            "type": "string",
            "description": "Currency of the underlying, for use with FX Futures",
            "nullable": true
          },
          "assetClass": {
            "type": "string",
            "description": "The asset class of the underlying. Optional and will default to Unknown if not set.\r\n\r\nSupported string (enumeration) values are: [InterestRates, FX, Inflation, Equities, Credit, Commodities, Money].",
            "nullable": true
          },
          "contractCode": {
            "minLength": 1,
            "type": "string",
            "description": "The contract code used by the exchange, e.g. “CL” for Crude Oil, “ES” for E-mini SP 500, “FGBL” for Bund Futures, etc."
          },
          "contractMonth": {
            "minLength": 1,
            "type": "string",
            "description": "Which month does the contract trade for.\r\n\r\nSupported string (enumeration) values are: [F, G, H, J, K, M, N, Q, U, V, X, Z]."
          },
          "contractSize": {
            "type": "number",
            "description": "Size of a single contract.",
            "format": "double"
          },
          "convention": {
            "type": "string",
            "description": "If appropriate, the day count convention method used in pricing (rates futures).\r\nFor more information on day counts, see [knowledge base article KA-01798](https://support.lusid.com/knowledgebase/article/KA-01798)\r\n            \r\nSupported string (enumeration) values are: [Actual360, Act360, MoneyMarket, Actual365, Act365, Thirty360, ThirtyU360, Bond, ThirtyE360, EuroBond, ActualActual, ActAct, ActActIsda, ActActIsma, ActActIcma, OneOne, Act364, Act365F, Act365L, Act365_25, Act252, Bus252, NL360, NL365, ActActAFB, Act365Cad, ThirtyActIsda, Thirty365Isda, ThirtyEActIsda, ThirtyE360Isda, ThirtyE365Isda, ThirtyU360EOM].",
            "nullable": true
          },
          "country": {
            "type": "string",
            "description": "Country (code) for the exchange.",
            "nullable": true
          },
          "description": {
            "type": "string",
            "description": "Description of contract.",
            "nullable": true
          },
          "exchangeCode": {
            "minLength": 1,
            "type": "string",
            "description": "Exchange code for contract. This can be any string to uniquely identify the exchange (e.g. Exchange Name, MIC, BBG code)."
          },
          "exchangeName": {
            "type": "string",
            "description": "Exchange name (for when code is not automatically recognised).",
            "nullable": true
          },
          "tickerStep": {
            "type": "number",
            "description": "Minimal step size change in ticker.",
            "format": "double"
          },
          "unitValue": {
            "type": "number",
            "description": "The value in the currency of a 1 unit change in the contract price.",
            "format": "double"
          },
          "calendars": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Holiday calendars that apply to yield-to-price conversions (i.e. for BRL futures).",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Most, if not all, information about contracts is standardized. See, e.g. https://www.cmegroup.com/ for\r\ncommon codes and similar data. This appears to be in common use by well known market information providers, e.g. Bloomberg and Refinitiv."
      },
      "FxDependency": {
        "allOf": [
          {
            "$ref": "#/components/schemas/EconomicDependency"
          },
          {
            "required": [
              "date",
              "dependencyType",
              "domesticCurrency",
              "foreignCurrency"
            ],
            "type": "object",
            "properties": {
              "domesticCurrency": {
                "type": "string",
                "description": "DomesticCurrency is the first currency in a currency pair quote e.g. eur-gbp, eur is the domestic currency."
              },
              "foreignCurrency": {
                "type": "string",
                "description": "ForeignCurrency is the second currency in a currency pair quote e.g. eur-gbp, gbp is the foreign currency."
              },
              "date": {
                "type": "string",
                "description": "The effectiveAt of the fx rate.",
                "format": "date-time"
              },
              "dependencyType": {
                "enum": [
                  "OpaqueDependency",
                  "CashDependency",
                  "DiscountingDependency",
                  "EquityCurveDependency",
                  "EquityVolDependency",
                  "FxDependency",
                  "FxForwardsDependency",
                  "FxVolDependency",
                  "IndexProjectionDependency",
                  "IrVolDependency",
                  "QuoteDependency",
                  "Vendor"
                ],
                "type": "string",
                "description": "The available values are: OpaqueDependency, CashDependency, DiscountingDependency, EquityCurveDependency, EquityVolDependency, FxDependency, FxForwardsDependency, FxVolDependency, IndexProjectionDependency, IrVolDependency, QuoteDependency, Vendor"
              }
            }
          }
        ],
        "description": "For indicating a dependency on an fx rate.\r\nFor example domestic-foreign for USD-JPY\r\nmeans that 1 unit (dollar) of domestic currency will buy you \"X\" units of foreign (Yen) currency; currently somewhere around 100.\r\nThis is equivalently denoted as USDJPY and USD/JPY\r\n            \r\nOn the assumption that you wish to convert an amount in the domestic currency to the foreign, you would want the (dom,fgn) dependency; domfgn currency pair.\r\nOn the assumption that you wish to convert an amount in the foreign currency to the domestic, you would want the (fgn,dom) dependency; fgndom currency pair.\r\n            \r\nNB: There alternate descriptions for currency pairs that seem to vary between different banks and sectors of the industry, e.g. base and contract\r\n            \r\nIn pricing we are taking the convention that we will convert from FGN to DOM by DIVIDING through by the DOMFGN spot rate."
      },
      "FxForward": {
        "allOf": [
          {
            "$ref": "#/components/schemas/LusidInstrument"
          },
          {
            "required": [
              "domAmount",
              "domCcy",
              "fgnAmount",
              "fgnCcy",
              "instrumentType",
              "maturityDate",
              "startDate"
            ],
            "type": "object",
            "properties": {
              "startDate": {
                "type": "string",
                "description": "The start date of the instrument. This is normally synonymous with the trade-date.",
                "format": "date-time"
              },
              "maturityDate": {
                "type": "string",
                "description": "The final maturity date of the instrument. This means the last date on which the instruments makes a payment of any amount.\r\nFor the avoidance of doubt, that is not necessarily prior to its last sensitivity date for the purposes of risk; e.g. instruments such as\r\nConstant Maturity Swaps (CMS) often have sensitivities to rates that may well be observed or set prior to the maturity date, but refer to a termination date beyond it.",
                "format": "date-time"
              },
              "domAmount": {
                "type": "number",
                "description": "The amount that is to be paid in the domestic currency on the maturity date.",
                "format": "double"
              },
              "domCcy": {
                "type": "string",
                "description": "The domestic currency of the instrument."
              },
              "fgnAmount": {
                "type": "number",
                "description": "The amount that is to be paid in the foreign currency on the maturity date.",
                "format": "double"
              },
              "fgnCcy": {
                "type": "string",
                "description": "The foreign (other) currency of the instrument. In the NDF case, only payments are made in the domestic currency.\r\nFor the outright forward, currencies are exchanged. By domestic is then that of the portfolio."
              },
              "refSpotRate": {
                "type": "number",
                "description": "The reference Fx Spot rate for currency pair Foreign-Domestic that was seen on the trade start date (time).",
                "format": "double"
              },
              "isNdf": {
                "type": "boolean",
                "description": "Is the contract an Fx-Forward of \"Non-Deliverable\" type, meaning a single payment in the domestic currency based on the change in fx-rate vs\r\na reference rate is used."
              },
              "fixingDate": {
                "type": "string",
                "description": "The fixing date.",
                "format": "date-time"
              },
              "settlementCcy": {
                "type": "string",
                "description": "The settlement currency.\r\nIf provided, present value will be calculated in settlement currency, otherwise the domestic currency. Applies only to non-deliverable FX Forwards.",
                "nullable": true
              },
              "instrumentType": {
                "enum": [
                  "QuotedSecurity",
                  "InterestRateSwap",
                  "FxForward",
                  "Future",
                  "ExoticInstrument",
                  "FxOption",
                  "CreditDefaultSwap",
                  "InterestRateSwaption",
                  "Bond",
                  "EquityOption",
                  "FixedLeg",
                  "FloatingLeg",
                  "BespokeCashFlowsLeg",
                  "Unknown",
                  "TermDeposit",
                  "ContractForDifference",
                  "EquitySwap",
                  "CashPerpetual",
                  "CapFloor",
                  "CashSettled",
                  "CdsIndex",
                  "Basket",
                  "FundingLeg",
                  "FxSwap",
                  "ForwardRateAgreement",
                  "SimpleInstrument",
                  "Repo",
                  "Equity",
                  "ExchangeTradedOption",
                  "ReferenceInstrument",
                  "ComplexBond",
                  "InflationLinkedBond",
                  "InflationSwap",
                  "SimpleCashFlowLoan"
                ],
                "type": "string",
                "description": "The available values are: QuotedSecurity, InterestRateSwap, FxForward, Future, ExoticInstrument, FxOption, CreditDefaultSwap, InterestRateSwaption, Bond, EquityOption, FixedLeg, FloatingLeg, BespokeCashFlowsLeg, Unknown, TermDeposit, ContractForDifference, EquitySwap, CashPerpetual, CapFloor, CashSettled, CdsIndex, Basket, FundingLeg, FxSwap, ForwardRateAgreement, SimpleInstrument, Repo, Equity, ExchangeTradedOption, ReferenceInstrument, ComplexBond, InflationLinkedBond, InflationSwap, SimpleCashFlowLoan"
              }
            }
          }
        ],
        "description": "LUSID representation of an FX Forward.\r\nIncluding FX Spot and Non-Deliverable Forwards."
      },
      "FxForwardCurveByQuoteReference": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ComplexMarketData"
          },
          {
            "required": [
              "domCcy",
              "fgnCcy",
              "marketDataType",
              "quoteReferences",
              "tenors"
            ],
            "type": "object",
            "properties": {
              "domCcy": {
                "type": "string",
                "description": "Domestic currency of the fx forward"
              },
              "fgnCcy": {
                "type": "string",
                "description": "Foreign currency of the fx forward"
              },
              "tenors": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "Tenors for which the forward rates apply"
              },
              "quoteReferences": {
                "type": "array",
                "items": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                },
                "description": "For each tenor, a collection of identifiers. These will be looked up in the LUSID Quote Store to resolve the actual rates.\r\nAccepts an array of Dictionary<string, string>. The keys of each dictionary must be chosen from the following enumeration:\r\n[LusidInstrumentId, Isin, Sedol, Cusip, ClientInternal, Figi, RIC, QuotePermId, REDCode, BBGId, ICECode].\r\nFor example: <br />\r\n\"quoteReferences\": [{\"ClientInternal\": \"SomeIdentifierForFirstTenor\"},{\"ClientInternal\": \"SomeIdentifierForSecondTenor\"}"
              },
              "lineage": {
                "maxLength": 1024,
                "minLength": 0,
                "type": "string",
                "description": "Description of the complex market data's lineage e.g. 'FundAccountant_GreenQuality'.",
                "nullable": true
              },
              "marketDataOptions": {
                "$ref": "#/components/schemas/MarketDataOptions"
              },
              "calendars": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/FxTenorConvention"
                },
                "description": "The list of conventions that should be used when interpreting tenors as dates.",
                "nullable": true
              },
              "spotDaysCalculationType": {
                "type": "string",
                "description": "Configures how to calculate the spot date from the build date using the Calendars provided.\r\nSupported string (enumeration) values are: [ SingleCalendar, UnionCalendars ]",
                "nullable": true
              },
              "marketDataType": {
                "enum": [
                  "DiscountFactorCurveData",
                  "EquityVolSurfaceData",
                  "FxVolSurfaceData",
                  "IrVolCubeData",
                  "OpaqueMarketData",
                  "YieldCurveData",
                  "FxForwardCurveData",
                  "FxForwardPipsCurveData",
                  "FxForwardTenorCurveData",
                  "FxForwardTenorPipsCurveData",
                  "FxForwardCurveByQuoteReference",
                  "CreditSpreadCurveData",
                  "EquityCurveByPricesData"
                ],
                "type": "string",
                "description": "The available values are: DiscountFactorCurveData, EquityVolSurfaceData, FxVolSurfaceData, IrVolCubeData, OpaqueMarketData, YieldCurveData, FxForwardCurveData, FxForwardPipsCurveData, FxForwardTenorCurveData, FxForwardTenorPipsCurveData, FxForwardCurveByQuoteReference, CreditSpreadCurveData, EquityCurveByPricesData"
              }
            }
          }
        ],
        "description": "Contains data (i.e. tenors and rates + metadata) for building fx forward curves (when combined with a date to build on)"
      },
      "FxForwardCurveData": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ComplexMarketData"
          },
          {
            "required": [
              "baseDate",
              "dates",
              "domCcy",
              "fgnCcy",
              "marketDataType",
              "rates"
            ],
            "type": "object",
            "properties": {
              "baseDate": {
                "type": "string",
                "description": "EffectiveAt date of the quoted rates",
                "format": "date-time"
              },
              "domCcy": {
                "type": "string",
                "description": "Domestic currency of the fx forward"
              },
              "fgnCcy": {
                "type": "string",
                "description": "Foreign currency of the fx forward"
              },
              "dates": {
                "type": "array",
                "items": {
                  "type": "string",
                  "format": "date-time"
                },
                "description": "Dates for which the forward rates apply"
              },
              "rates": {
                "type": "array",
                "items": {
                  "type": "number",
                  "format": "double"
                },
                "description": "Rates provided for the fx forward (price in FgnCcy per unit of DomCcy)"
              },
              "lineage": {
                "maxLength": 1024,
                "minLength": 0,
                "type": "string",
                "description": "Description of the complex market data's lineage e.g. 'FundAccountant_GreenQuality'.",
                "nullable": true
              },
              "marketDataOptions": {
                "$ref": "#/components/schemas/MarketDataOptions"
              },
              "marketDataType": {
                "enum": [
                  "DiscountFactorCurveData",
                  "EquityVolSurfaceData",
                  "FxVolSurfaceData",
                  "IrVolCubeData",
                  "OpaqueMarketData",
                  "YieldCurveData",
                  "FxForwardCurveData",
                  "FxForwardPipsCurveData",
                  "FxForwardTenorCurveData",
                  "FxForwardTenorPipsCurveData",
                  "FxForwardCurveByQuoteReference",
                  "CreditSpreadCurveData",
                  "EquityCurveByPricesData"
                ],
                "type": "string",
                "description": "The available values are: DiscountFactorCurveData, EquityVolSurfaceData, FxVolSurfaceData, IrVolCubeData, OpaqueMarketData, YieldCurveData, FxForwardCurveData, FxForwardPipsCurveData, FxForwardTenorCurveData, FxForwardTenorPipsCurveData, FxForwardCurveByQuoteReference, CreditSpreadCurveData, EquityCurveByPricesData"
              }
            }
          }
        ],
        "description": "Contains data (i.e. dates and rates + metadata) for building fx forward curves"
      },
      "FxForwardModelOptions": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ModelOptions"
          },
          {
            "required": [
              "convertToReportCcy",
              "discountingMethod",
              "forwardRateObservableType",
              "modelOptionsType"
            ],
            "type": "object",
            "properties": {
              "forwardRateObservableType": {
                "enum": [
                  "ForwardPoints",
                  "ForwardRate",
                  "RatesCurve",
                  "FxForwardCurve",
                  "Invalid"
                ],
                "type": "string",
                "description": "The available values are: ForwardPoints, ForwardRate, RatesCurve, FxForwardCurve, Invalid"
              },
              "discountingMethod": {
                "enum": [
                  "Standard",
                  "ConstantTimeValueOfMoney",
                  "Invalid"
                ],
                "type": "string",
                "description": "The available values are: Standard, ConstantTimeValueOfMoney, Invalid"
              },
              "convertToReportCcy": {
                "type": "boolean",
                "description": "Convert all FX flows to the report currency\r\nBy setting this all FX forwards will be priced using Forward Curves that have Report Currency as the base."
              },
              "modelOptionsType": {
                "enum": [
                  "Invalid",
                  "OpaqueModelOptions",
                  "EmptyModelOptions",
                  "IndexModelOptions",
                  "FxForwardModelOptions",
                  "FundingLegModelOptions",
                  "EquityModelOptions"
                ],
                "type": "string",
                "description": "The available values are: Invalid, OpaqueModelOptions, EmptyModelOptions, IndexModelOptions, FxForwardModelOptions, FundingLegModelOptions, EquityModelOptions"
              }
            }
          }
        ]
      },
      "FxForwardPipsCurveData": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ComplexMarketData"
          },
          {
            "required": [
              "baseDate",
              "dates",
              "domCcy",
              "fgnCcy",
              "marketDataType",
              "pipRates"
            ],
            "type": "object",
            "properties": {
              "baseDate": {
                "type": "string",
                "description": "EffectiveAt date of the quoted pip rates",
                "format": "date-time"
              },
              "domCcy": {
                "type": "string",
                "description": "Domestic currency of the fx forward"
              },
              "fgnCcy": {
                "type": "string",
                "description": "Foreign currency of the fx forward"
              },
              "dates": {
                "type": "array",
                "items": {
                  "type": "string",
                  "format": "date-time"
                },
                "description": "Dates for which the forward rates apply"
              },
              "pipRates": {
                "type": "array",
                "items": {
                  "type": "number",
                  "format": "double"
                },
                "description": "Rates provided for the fx forward (price in FgnCcy per unit of DomCcy), expressed in pips"
              },
              "lineage": {
                "maxLength": 1024,
                "minLength": 0,
                "type": "string",
                "description": "Description of the complex market data's lineage e.g. 'FundAccountant_GreenQuality'.",
                "nullable": true
              },
              "marketDataOptions": {
                "$ref": "#/components/schemas/MarketDataOptions"
              },
              "marketDataType": {
                "enum": [
                  "DiscountFactorCurveData",
                  "EquityVolSurfaceData",
                  "FxVolSurfaceData",
                  "IrVolCubeData",
                  "OpaqueMarketData",
                  "YieldCurveData",
                  "FxForwardCurveData",
                  "FxForwardPipsCurveData",
                  "FxForwardTenorCurveData",
                  "FxForwardTenorPipsCurveData",
                  "FxForwardCurveByQuoteReference",
                  "CreditSpreadCurveData",
                  "EquityCurveByPricesData"
                ],
                "type": "string",
                "description": "The available values are: DiscountFactorCurveData, EquityVolSurfaceData, FxVolSurfaceData, IrVolCubeData, OpaqueMarketData, YieldCurveData, FxForwardCurveData, FxForwardPipsCurveData, FxForwardTenorCurveData, FxForwardTenorPipsCurveData, FxForwardCurveByQuoteReference, CreditSpreadCurveData, EquityCurveByPricesData"
              }
            }
          }
        ],
        "description": "Contains data (i.e. dates and pips + metadata) for building fx forward curves (when combined with a spot rate to build on)"
      },
      "FxForwardsDependency": {
        "allOf": [
          {
            "$ref": "#/components/schemas/EconomicDependency"
          },
          {
            "required": [
              "curveType",
              "date",
              "dependencyType",
              "domesticCurrency",
              "foreignCurrency"
            ],
            "type": "object",
            "properties": {
              "domesticCurrency": {
                "type": "string",
                "description": "DomesticCurrency is the first currency in a currency pair quote e.g. eur-gbp, eur is the domestic currency."
              },
              "foreignCurrency": {
                "type": "string",
                "description": "ForeignCurrency is the second currency in a currency pair quote e.g. eur-gbp, gbp is the foreign currency."
              },
              "curveType": {
                "maxLength": 50,
                "minLength": 0,
                "type": "string",
                "description": "Used to describe the format in which the curve is expressed\r\ne.g. FxFwdCurve (general term to describe any representation), TenorFxFwdCurve, PipsFxFwdCurve."
              },
              "date": {
                "type": "string",
                "description": "The effectiveDate of the entity that this is a dependency for.\r\nUnless there is an obvious date this should be, like for a historic reset, then this is the valuation date.",
                "format": "date-time"
              },
              "dependencyType": {
                "enum": [
                  "OpaqueDependency",
                  "CashDependency",
                  "DiscountingDependency",
                  "EquityCurveDependency",
                  "EquityVolDependency",
                  "FxDependency",
                  "FxForwardsDependency",
                  "FxVolDependency",
                  "IndexProjectionDependency",
                  "IrVolDependency",
                  "QuoteDependency",
                  "Vendor"
                ],
                "type": "string",
                "description": "The available values are: OpaqueDependency, CashDependency, DiscountingDependency, EquityCurveDependency, EquityVolDependency, FxDependency, FxForwardsDependency, FxVolDependency, IndexProjectionDependency, IrVolDependency, QuoteDependency, Vendor"
              }
            }
          }
        ],
        "description": "Indicates a dependency on an FxForwardCurve.\r\nIdentical to Fx dependencies in the meaning of domestic and foreign currencies, but describes a *set* of fx rates.\r\nThese rates are quoted rates for fx forwards, which can be used to interpolate the forward rate at a specific time in the future.\r\nIn the case of pips, the absolute rates can be expressed as rate = spotFx + pips / pipsPerUnit"
      },
      "FxForwardTenorCurveData": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ComplexMarketData"
          },
          {
            "required": [
              "baseDate",
              "domCcy",
              "fgnCcy",
              "marketDataType",
              "rates",
              "tenors"
            ],
            "type": "object",
            "properties": {
              "baseDate": {
                "type": "string",
                "description": "EffectiveAt date of the quoted rates",
                "format": "date-time"
              },
              "domCcy": {
                "type": "string",
                "description": "Domestic currency of the fx forward"
              },
              "fgnCcy": {
                "type": "string",
                "description": "Foreign currency of the fx forward"
              },
              "tenors": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "Tenors for which the forward rates apply"
              },
              "rates": {
                "type": "array",
                "items": {
                  "type": "number",
                  "format": "double"
                },
                "description": "Rates provided for the fx forward (price in FgnCcy per unit of DomCcy)"
              },
              "lineage": {
                "maxLength": 1024,
                "minLength": 0,
                "type": "string",
                "description": "Description of the complex market data's lineage e.g. 'FundAccountant_GreenQuality'.",
                "nullable": true
              },
              "marketDataOptions": {
                "$ref": "#/components/schemas/MarketDataOptions"
              },
              "calendars": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/FxTenorConvention"
                },
                "description": "The list of conventions that should be used when interpreting tenors as dates.",
                "nullable": true
              },
              "spotDaysCalculationType": {
                "type": "string",
                "description": "Configures how to calculate the spot date from the build date using the Calendars provided.\r\nSupported string (enumeration) values are: [ SingleCalendar, UnionCalendars ]",
                "nullable": true
              },
              "marketDataType": {
                "enum": [
                  "DiscountFactorCurveData",
                  "EquityVolSurfaceData",
                  "FxVolSurfaceData",
                  "IrVolCubeData",
                  "OpaqueMarketData",
                  "YieldCurveData",
                  "FxForwardCurveData",
                  "FxForwardPipsCurveData",
                  "FxForwardTenorCurveData",
                  "FxForwardTenorPipsCurveData",
                  "FxForwardCurveByQuoteReference",
                  "CreditSpreadCurveData",
                  "EquityCurveByPricesData"
                ],
                "type": "string",
                "description": "The available values are: DiscountFactorCurveData, EquityVolSurfaceData, FxVolSurfaceData, IrVolCubeData, OpaqueMarketData, YieldCurveData, FxForwardCurveData, FxForwardPipsCurveData, FxForwardTenorCurveData, FxForwardTenorPipsCurveData, FxForwardCurveByQuoteReference, CreditSpreadCurveData, EquityCurveByPricesData"
              }
            }
          }
        ],
        "description": "Contains data (i.e. tenors and rates + metadata) for building fx forward curves (when combined with a date to build on)"
      },
      "FxForwardTenorPipsCurveData": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ComplexMarketData"
          },
          {
            "required": [
              "baseDate",
              "domCcy",
              "fgnCcy",
              "marketDataType",
              "pipRates",
              "tenors"
            ],
            "type": "object",
            "properties": {
              "baseDate": {
                "type": "string",
                "description": "EffectiveAt date of the quoted pip rates",
                "format": "date-time"
              },
              "domCcy": {
                "type": "string",
                "description": "Domestic currency of the fx forward"
              },
              "fgnCcy": {
                "type": "string",
                "description": "Foreign currency of the fx forward"
              },
              "tenors": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "Tenors for which the forward rates apply"
              },
              "pipRates": {
                "type": "array",
                "items": {
                  "type": "number",
                  "format": "double"
                },
                "description": "Rates provided for the fx forward (price in FgnCcy per unit of DomCcy), expressed in pips"
              },
              "lineage": {
                "maxLength": 1024,
                "minLength": 0,
                "type": "string",
                "description": "Description of the complex market data's lineage e.g. 'FundAccountant_GreenQuality'.",
                "nullable": true
              },
              "marketDataOptions": {
                "$ref": "#/components/schemas/MarketDataOptions"
              },
              "calendars": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/FxTenorConvention"
                },
                "description": "The list of conventions that should be used when interpreting tenors as dates.",
                "nullable": true
              },
              "spotDaysCalculationType": {
                "type": "string",
                "description": "Configures how to calculate the spot date from the build date using the Calendars provided.\r\nSupported string (enumeration) values are: [ SingleCalendar, UnionCalendars ]",
                "nullable": true
              },
              "marketDataType": {
                "enum": [
                  "DiscountFactorCurveData",
                  "EquityVolSurfaceData",
                  "FxVolSurfaceData",
                  "IrVolCubeData",
                  "OpaqueMarketData",
                  "YieldCurveData",
                  "FxForwardCurveData",
                  "FxForwardPipsCurveData",
                  "FxForwardTenorCurveData",
                  "FxForwardTenorPipsCurveData",
                  "FxForwardCurveByQuoteReference",
                  "CreditSpreadCurveData",
                  "EquityCurveByPricesData"
                ],
                "type": "string",
                "description": "The available values are: DiscountFactorCurveData, EquityVolSurfaceData, FxVolSurfaceData, IrVolCubeData, OpaqueMarketData, YieldCurveData, FxForwardCurveData, FxForwardPipsCurveData, FxForwardTenorCurveData, FxForwardTenorPipsCurveData, FxForwardCurveByQuoteReference, CreditSpreadCurveData, EquityCurveByPricesData"
              }
            }
          }
        ],
        "description": "Contains data (i.e. tenors and pips + metadata) for building fx forward curves (when combined with a spot rate and a date to build on)"
      },
      "FxOption": {
        "allOf": [
          {
            "$ref": "#/components/schemas/LusidInstrument"
          },
          {
            "required": [
              "domCcy",
              "fgnCcy",
              "instrumentType",
              "isCallNotPut",
              "isDeliveryNotCash",
              "optionMaturityDate",
              "optionSettlementDate",
              "startDate"
            ],
            "type": "object",
            "properties": {
              "startDate": {
                "type": "string",
                "description": "The start date of the instrument. This is normally synonymous with the trade-date.",
                "format": "date-time"
              },
              "domCcy": {
                "type": "string",
                "description": "The domestic currency of the instrument."
              },
              "domAmount": {
                "type": "number",
                "description": "The Amount of DomCcy that will be exchanged if the option is exercised.\r\nThis amount should be a positive number, with the Call/Put flag used to indicate direction.\r\nThe corresponding amount of FgnCcy that will be exchanged is this amount times the strike.\r\nNote there is no rounding performed on this computed value.\r\nThis is an optional field, if not set the option ContractSize will default to 1.",
                "format": "double",
                "nullable": true
              },
              "fgnCcy": {
                "type": "string",
                "description": "The foreign currency of the FX."
              },
              "fgnAmount": {
                "type": "number",
                "description": "For a vanilla FxOption contract, FgnAmount cannot be set.\r\nIn case of a digital FxOption (IsPayoffDigital==true)\r\na payoff (if the option is in the money) can be either\r\nin domestic or in foreign currency - for the latter\r\nFgnAmount must be set.\r\nNote: It is invalid to have FgnAmount and DomAmount\r\nat the same time.",
                "format": "double",
                "nullable": true
              },
              "strike": {
                "type": "number",
                "description": "The strike of the option.",
                "format": "double",
                "nullable": true
              },
              "barriers": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Barrier"
                },
                "description": "For a barrier option the list should not be empty. Up to two barriers are supported.\r\nAn option cannot be at the same time barrier- and touch-option.\r\nOne (or both) of the lists must be empty.",
                "nullable": true
              },
              "exerciseType": {
                "type": "string",
                "description": "Type of optionality that is present; European, American.\r\n\r\nSupported string (enumeration) values are: [European, American].",
                "nullable": true
              },
              "isCallNotPut": {
                "type": "boolean",
                "description": "True if the option is a call, false if the option is a put."
              },
              "isDeliveryNotCash": {
                "type": "boolean",
                "description": "True if the option delivers the FX underlying, False if the option is settled in cash."
              },
              "isPayoffDigital": {
                "type": "boolean",
                "description": "By default IsPayoffDigital is false. If IsPayoffDigital=true,\r\nthe option is 'digital', and the option payoff is 0 or 1 unit of currency,\r\ninstead of a vanilla CallPayoff=max(spot-strike,0) or PutPayoff=max(strike-spot,0)."
              },
              "optionMaturityDate": {
                "type": "string",
                "description": "The maturity date of the option.",
                "format": "date-time"
              },
              "optionSettlementDate": {
                "type": "string",
                "description": "The settlement date of the option.",
                "format": "date-time"
              },
              "payoutStyle": {
                "type": "string",
                "description": "PayoutStyle for touch options.\r\n            \r\nFor options without touch optionality, payoutStyle should not be set.\r\nFor options with touch optionality (where the touches data has been set), payoutStyle must be defined and cannot be None.\r\n\r\nSupported string (enumeration) values are: [Deferred, Immediate].",
                "nullable": true
              },
              "premium": {
                "$ref": "#/components/schemas/Premium"
              },
              "touches": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Touch"
                },
                "description": "For a touch option the list should not be empty. Up to two touches are supported.\r\nAn option cannot be at the same time barrier- and touch-option.\r\nOne (or both) of the lists must be empty.",
                "nullable": true
              },
              "instrumentType": {
                "enum": [
                  "QuotedSecurity",
                  "InterestRateSwap",
                  "FxForward",
                  "Future",
                  "ExoticInstrument",
                  "FxOption",
                  "CreditDefaultSwap",
                  "InterestRateSwaption",
                  "Bond",
                  "EquityOption",
                  "FixedLeg",
                  "FloatingLeg",
                  "BespokeCashFlowsLeg",
                  "Unknown",
                  "TermDeposit",
                  "ContractForDifference",
                  "EquitySwap",
                  "CashPerpetual",
                  "CapFloor",
                  "CashSettled",
                  "CdsIndex",
                  "Basket",
                  "FundingLeg",
                  "FxSwap",
                  "ForwardRateAgreement",
                  "SimpleInstrument",
                  "Repo",
                  "Equity",
                  "ExchangeTradedOption",
                  "ReferenceInstrument",
                  "ComplexBond",
                  "InflationLinkedBond",
                  "InflationSwap",
                  "SimpleCashFlowLoan"
                ],
                "type": "string",
                "description": "The available values are: QuotedSecurity, InterestRateSwap, FxForward, Future, ExoticInstrument, FxOption, CreditDefaultSwap, InterestRateSwaption, Bond, EquityOption, FixedLeg, FloatingLeg, BespokeCashFlowsLeg, Unknown, TermDeposit, ContractForDifference, EquitySwap, CashPerpetual, CapFloor, CashSettled, CdsIndex, Basket, FundingLeg, FxSwap, ForwardRateAgreement, SimpleInstrument, Repo, Equity, ExchangeTradedOption, ReferenceInstrument, ComplexBond, InflationLinkedBond, InflationSwap, SimpleCashFlowLoan"
              }
            }
          }
        ],
        "description": "LUSID representation of an FX Option.\r\nIncluding Vanilla, American, European, and Digital (Binary) options."
      },
      "FxSwap": {
        "allOf": [
          {
            "$ref": "#/components/schemas/LusidInstrument"
          },
          {
            "required": [
              "farFxForward",
              "instrumentType",
              "nearFxForward"
            ],
            "type": "object",
            "properties": {
              "nearFxForward": {
                "$ref": "#/components/schemas/FxForward"
              },
              "farFxForward": {
                "$ref": "#/components/schemas/FxForward"
              },
              "notionalSymmetry": {
                "type": "string",
                "description": "The NotionalSymmetry allows for even and uneven FxSwaps to be supported.\r\nAn even FxSwap is one where the near and far fx forwards have the same notional value on at least one of the\r\nlegs. An uneven FxSwap is one where near and far fx forwards don't have the same notional on both the\r\ndomestic and foreign legs.\r\nBy default NotionalSymmetry will be set as even.\r\n\r\nSupported string (enumeration) values are: [Even, Uneven].",
                "nullable": true
              },
              "instrumentType": {
                "enum": [
                  "QuotedSecurity",
                  "InterestRateSwap",
                  "FxForward",
                  "Future",
                  "ExoticInstrument",
                  "FxOption",
                  "CreditDefaultSwap",
                  "InterestRateSwaption",
                  "Bond",
                  "EquityOption",
                  "FixedLeg",
                  "FloatingLeg",
                  "BespokeCashFlowsLeg",
                  "Unknown",
                  "TermDeposit",
                  "ContractForDifference",
                  "EquitySwap",
                  "CashPerpetual",
                  "CapFloor",
                  "CashSettled",
                  "CdsIndex",
                  "Basket",
                  "FundingLeg",
                  "FxSwap",
                  "ForwardRateAgreement",
                  "SimpleInstrument",
                  "Repo",
                  "Equity",
                  "ExchangeTradedOption",
                  "ReferenceInstrument",
                  "ComplexBond",
                  "InflationLinkedBond",
                  "InflationSwap",
                  "SimpleCashFlowLoan"
                ],
                "type": "string",
                "description": "The available values are: QuotedSecurity, InterestRateSwap, FxForward, Future, ExoticInstrument, FxOption, CreditDefaultSwap, InterestRateSwaption, Bond, EquityOption, FixedLeg, FloatingLeg, BespokeCashFlowsLeg, Unknown, TermDeposit, ContractForDifference, EquitySwap, CashPerpetual, CapFloor, CashSettled, CdsIndex, Basket, FundingLeg, FxSwap, ForwardRateAgreement, SimpleInstrument, Repo, Equity, ExchangeTradedOption, ReferenceInstrument, ComplexBond, InflationLinkedBond, InflationSwap, SimpleCashFlowLoan"
              }
            }
          }
        ],
        "description": "LUSID representation of an FX Swap. Composed of two FX Forwards."
      },
      "FxTenorConvention": {
        "required": [
          "calendarCode",
          "spotDays"
        ],
        "type": "object",
        "properties": {
          "calendarCode": {
            "maxLength": 64,
            "minLength": 0,
            "type": "string",
            "description": "The code of the holiday calendar that should be used when interpreting FX tenors."
          },
          "spotDays": {
            "type": "integer",
            "description": "The minimum number of business days that must pass within this calendar when calculating the spot date.",
            "format": "int32"
          }
        },
        "additionalProperties": false,
        "description": "A wrapper of conventions that should be used when interpreting tenors in the context of FX.\r\nFor instance, can be used to control how tenors are interpreted on an FxForwardTenorCurveData instance."
      },
      "FxVolDependency": {
        "allOf": [
          {
            "$ref": "#/components/schemas/EconomicDependency"
          },
          {
            "required": [
              "date",
              "dependencyType",
              "domesticCurrency",
              "foreignCurrency",
              "volType"
            ],
            "type": "object",
            "properties": {
              "domesticCurrency": {
                "type": "string",
                "description": "DomesticCurrency is the first currency in a currency pair quote e.g. eur-gbp, eur is the domestic currency."
              },
              "foreignCurrency": {
                "type": "string",
                "description": "ForeignCurrency is the second currency in a currency pair quote e.g. eur-gbp, gbp is the foreign currency."
              },
              "volType": {
                "maxLength": 50,
                "minLength": 0,
                "type": "string",
                "description": "Volatility type e.g. \"LN\" and \"N\" for log-normal and normal volatility."
              },
              "date": {
                "type": "string",
                "description": "The effectiveDate of the entity that this is a dependency for.\r\nUnless there is an obvious date this should be, like for a historic reset, then this is the valuation date.",
                "format": "date-time"
              },
              "dependencyType": {
                "enum": [
                  "OpaqueDependency",
                  "CashDependency",
                  "DiscountingDependency",
                  "EquityCurveDependency",
                  "EquityVolDependency",
                  "FxDependency",
                  "FxForwardsDependency",
                  "FxVolDependency",
                  "IndexProjectionDependency",
                  "IrVolDependency",
                  "QuoteDependency",
                  "Vendor"
                ],
                "type": "string",
                "description": "The available values are: OpaqueDependency, CashDependency, DiscountingDependency, EquityCurveDependency, EquityVolDependency, FxDependency, FxForwardsDependency, FxVolDependency, IndexProjectionDependency, IrVolDependency, QuoteDependency, Vendor"
              }
            }
          }
        ],
        "description": "Economic dependency required to price FX derivative products that contain optionality.\r\nFX Vol surface is a grid of implied volatilities for an array of strikes and tenors,\r\nderived from vanilla option prices in the market."
      },
      "FxVolSurfaceData": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ComplexMarketData"
          },
          {
            "required": [
              "baseDate",
              "instruments",
              "marketDataType",
              "quotes"
            ],
            "type": "object",
            "properties": {
              "baseDate": {
                "type": "string",
                "description": "Base date of the surface",
                "format": "date-time"
              },
              "instruments": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/LusidInstrument"
                },
                "description": "The set of instruments that define the surface."
              },
              "quotes": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/MarketQuote"
                },
                "description": "The set of market quotes that define the surface, in NormalVol or LogNormalVol terms."
              },
              "lineage": {
                "maxLength": 1024,
                "minLength": 0,
                "type": "string",
                "description": "Description of the complex market data's lineage e.g. 'FundAccountant_GreenQuality'.",
                "nullable": true
              },
              "marketDataType": {
                "enum": [
                  "DiscountFactorCurveData",
                  "EquityVolSurfaceData",
                  "FxVolSurfaceData",
                  "IrVolCubeData",
                  "OpaqueMarketData",
                  "YieldCurveData",
                  "FxForwardCurveData",
                  "FxForwardPipsCurveData",
                  "FxForwardTenorCurveData",
                  "FxForwardTenorPipsCurveData",
                  "FxForwardCurveByQuoteReference",
                  "CreditSpreadCurveData",
                  "EquityCurveByPricesData"
                ],
                "type": "string",
                "description": "The available values are: DiscountFactorCurveData, EquityVolSurfaceData, FxVolSurfaceData, IrVolCubeData, OpaqueMarketData, YieldCurveData, FxForwardCurveData, FxForwardPipsCurveData, FxForwardTenorCurveData, FxForwardTenorPipsCurveData, FxForwardCurveByQuoteReference, CreditSpreadCurveData, EquityCurveByPricesData"
              }
            }
          }
        ],
        "description": "Market Data for an fx vol surface, represented by a list of fx options and corresponding market quotes"
      },
      "GetComplexMarketDataResponse": {
        "type": "object",
        "properties": {
          "href": {
            "type": "string",
            "description": "The specific Uniform Resource Identifier (URI) for this resource at the requested effective and asAt datetime.",
            "format": "uri",
            "nullable": true
          },
          "values": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/ComplexMarketData"
            },
            "description": "The set of values that were successfully retrieved.",
            "nullable": true
          },
          "failed": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/ErrorDetail"
            },
            "description": "The set of values that could not be retrieved due along with a reason for this, e.g badly formed request.",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "description": "Collection of links.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "GetCounterpartyAgreementResponse": {
        "type": "object",
        "properties": {
          "href": {
            "type": "string",
            "description": "The specific Uniform Resource Identifier (URI) for this resource at the requested effective and asAt datetime.",
            "format": "uri",
            "nullable": true
          },
          "value": {
            "$ref": "#/components/schemas/CounterpartyAgreement"
          },
          "failed": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/ErrorDetail"
            },
            "description": "The counterparty agreement that could not be retrieved along with a reason for failure.",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "description": "Collection of links.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "GetCreditSupportAnnexResponse": {
        "type": "object",
        "properties": {
          "href": {
            "type": "string",
            "description": "The specific Uniform Resource Identifier (URI) for this resource at the requested effective and asAt datetime.",
            "format": "uri",
            "nullable": true
          },
          "value": {
            "$ref": "#/components/schemas/CreditSupportAnnex"
          },
          "failed": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/ErrorDetail"
            },
            "description": "The credit support annex that could not be updated or inserted along with a reason for failure.",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "description": "Collection of links.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "GetInstrumentsResponse": {
        "type": "object",
        "properties": {
          "href": {
            "type": "string",
            "description": "The specific Uniform Resource Identifier (URI) for this resource at the requested effective and asAt datetime.",
            "format": "uri",
            "nullable": true
          },
          "values": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/Instrument"
            },
            "description": "The instrument definitions, keyed by the identifier used to retrieve them. Only instruments that were found will be contained in this collection.",
            "nullable": true
          },
          "failed": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/ErrorDetail"
            },
            "description": "The identifiers that did not resolve to an instrument along with the nature of the failure.",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "description": "Collection of links.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "GetQuotesResponse": {
        "type": "object",
        "properties": {
          "href": {
            "type": "string",
            "description": "The specific Uniform Resource Identifier (URI) for this resource at the requested effective and asAt datetime.",
            "format": "uri",
            "nullable": true
          },
          "values": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/Quote"
            },
            "description": "The quotes which have been successfully retrieved.",
            "nullable": true
          },
          "notFound": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/ErrorDetail"
            },
            "description": "The quotes that could not be found along with a reason why.",
            "nullable": true
          },
          "failed": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/ErrorDetail"
            },
            "description": "The quotes that could not be retrieved due to an error along with a reason for their failure.",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "description": "Collection of links.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "GetRecipeResponse": {
        "type": "object",
        "properties": {
          "href": {
            "type": "string",
            "description": "The specific Uniform Resource Identifier (URI) for this resource at the requested effective and asAt datetime.",
            "format": "uri",
            "nullable": true
          },
          "value": {
            "$ref": "#/components/schemas/ConfigurationRecipe"
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "description": "Collection of links.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "GetReferencePortfolioConstituentsResponse": {
        "required": [
          "constituents",
          "effectiveFrom",
          "weightType"
        ],
        "type": "object",
        "properties": {
          "effectiveFrom": {
            "type": "string",
            "description": "",
            "format": "date-time"
          },
          "weightType": {
            "enum": [
              "Static",
              "Floating",
              "Periodical"
            ],
            "type": "string",
            "description": "The available values are: Static, Floating, Periodical"
          },
          "periodType": {
            "enum": [
              "Daily",
              "Weekly",
              "Monthly",
              "Quarterly",
              "Annually"
            ],
            "type": "string",
            "description": "The available values are: Daily, Weekly, Monthly, Quarterly, Annually",
            "nullable": true
          },
          "periodCount": {
            "type": "integer",
            "description": "",
            "format": "int32",
            "nullable": true
          },
          "constituents": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ReferencePortfolioConstituent"
            },
            "description": "Set of constituents (instrument/weight pairings)"
          },
          "href": {
            "type": "string",
            "description": "The Uri that returns the same result as the original request,\r\nbut may include resolved as at time(s).",
            "format": "uri",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "description": "Collection of links.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "HoldingAdjustment": {
        "required": [
          "instrumentUid",
          "taxLots"
        ],
        "type": "object",
        "properties": {
          "instrumentIdentifiers": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "A set of instrument identifiers that can resolve the holding adjustment to a unique instrument.",
            "nullable": true
          },
          "instrumentScope": {
            "type": "string",
            "description": "The scope of the instrument that the holding adjustment is in.",
            "nullable": true
          },
          "instrumentUid": {
            "minLength": 1,
            "type": "string",
            "description": "The unqiue Lusid Instrument Id (LUID) of the instrument that the holding adjustment is in."
          },
          "subHoldingKeys": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/PerpetualProperty"
            },
            "description": "The set of unique transaction properties and associated values stored with the holding adjustment transactions automatically created by LUSID. Each property will be from the 'Transaction' domain.",
            "nullable": true
          },
          "properties": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/PerpetualProperty"
            },
            "description": "The set of unique holding properties and associated values stored with the target holding. Each property will be from the 'Holding' domain.",
            "nullable": true
          },
          "taxLots": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TargetTaxLot"
            },
            "description": "The tax-lots that together make up the target holding."
          },
          "currency": {
            "type": "string",
            "description": "The Holding currency.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "The target holdings."
      },
      "HoldingAdjustmentWithDate": {
        "required": [
          "instrumentUid",
          "taxLots"
        ],
        "type": "object",
        "properties": {
          "effectiveAt": {
            "type": "string",
            "description": "The effective date of the holding adjustment",
            "format": "date-time"
          },
          "instrumentIdentifiers": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "A set of instrument identifiers that can resolve the holding adjustment to a unique instrument.",
            "nullable": true
          },
          "instrumentScope": {
            "type": "string",
            "description": "The scope of the instrument that the holding adjustment is in.",
            "nullable": true
          },
          "instrumentUid": {
            "minLength": 1,
            "type": "string",
            "description": "The unqiue Lusid Instrument Id (LUID) of the instrument that the holding adjustment is in."
          },
          "subHoldingKeys": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/PerpetualProperty"
            },
            "description": "The set of unique transaction properties and associated values stored with the holding adjustment transactions automatically created by LUSID. Each property will be from the 'Transaction' domain.",
            "nullable": true
          },
          "properties": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/PerpetualProperty"
            },
            "description": "The set of unique holding properties and associated values stored with the target holding. Each property will be from the 'Holding' domain.",
            "nullable": true
          },
          "taxLots": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TargetTaxLot"
            },
            "description": "The tax-lots that together make up the target holding."
          },
          "currency": {
            "type": "string",
            "description": "The Holding currency.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "HoldingContext": {
        "type": "object",
        "properties": {
          "taxLotLevelHoldings": {
            "type": "boolean",
            "description": "Whether or not to expand the holdings to return the underlying tax-lots. Defaults to True."
          }
        },
        "additionalProperties": false,
        "description": "Holding context node.\r\nContains settings that control how LUSID handles holdings within portfolios."
      },
      "HoldingsAdjustment": {
        "required": [
          "adjustments",
          "effectiveAt",
          "unmatchedHoldingMethod",
          "version"
        ],
        "type": "object",
        "properties": {
          "effectiveAt": {
            "type": "string",
            "description": "The effective datetime from which the adjustment is valid. There can only be one holdings adjustment for a transaction portfolio at a specific effective datetime, so this uniquely identifies the adjustment.",
            "format": "date-time"
          },
          "version": {
            "$ref": "#/components/schemas/Version"
          },
          "unmatchedHoldingMethod": {
            "enum": [
              "PositionToZero",
              "KeepTheSame"
            ],
            "type": "string",
            "description": "Describes how the holdings were adjusted. If 'PositionToZero' the entire transaction portfolio's holdings were set via a call to 'Set holdings'. If 'KeepTheSame' only the specified holdings were adjusted via a call to 'Adjust holdings'. The available values are: PositionToZero, KeepTheSame"
          },
          "adjustments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/HoldingAdjustment"
            },
            "description": "The holding adjustments."
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "description": "Collection of links.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Full content of a holdings adjustment for a single portfolio and effective date."
      },
      "HoldingsAdjustmentHeader": {
        "required": [
          "effectiveAt",
          "unmatchedHoldingMethod",
          "version"
        ],
        "type": "object",
        "properties": {
          "effectiveAt": {
            "type": "string",
            "description": "The effective datetime from which the adjustment is valid. There can only be one holdings adjustment for a transaction portfolio at a specific effective datetime, so this uniquely identifies the adjustment.",
            "format": "date-time"
          },
          "version": {
            "$ref": "#/components/schemas/Version"
          },
          "unmatchedHoldingMethod": {
            "enum": [
              "PositionToZero",
              "KeepTheSame"
            ],
            "type": "string",
            "description": "Describes how the holdings were adjusted. If 'PositionToZero' the entire transaction portfolio's holdings were set via a call to 'Set holdings'. If 'KeepTheSame' only the specified holdings were adjusted via a call to 'Adjust holdings'. The available values are: PositionToZero, KeepTheSame"
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "description": "Collection of links.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "A record of holdings adjustments made on the transaction portfolio."
      },
      "IdentifierPartSchema": {
        "required": [
          "description",
          "displayName",
          "index",
          "name",
          "required"
        ],
        "type": "object",
        "properties": {
          "index": {
            "type": "integer",
            "description": "The typical index in the identifier in which this part appears",
            "format": "int32"
          },
          "name": {
            "minLength": 1,
            "type": "string",
            "description": "The name of the identifier part that can/should be provided for this resource type"
          },
          "displayName": {
            "minLength": 1,
            "type": "string",
            "description": "The display name of the identifier part"
          },
          "description": {
            "minLength": 1,
            "type": "string",
            "description": "A brief description of the point of this identifier part"
          },
          "required": {
            "type": "boolean",
            "description": "Whether a value is required to be provided"
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "description": "Collection of links.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "The schema of an contributing part of a valid LUSID resource identifier"
      },
      "IdSelectorDefinition": {
        "required": [
          "actions",
          "identifier"
        ],
        "type": "object",
        "properties": {
          "identifier": {
            "minLength": 1,
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "actions": {
            "minItems": 1,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ActionId"
            }
          },
          "name": {
            "maxLength": 100,
            "minLength": 0,
            "type": "string",
            "nullable": true
          },
          "description": {
            "maxLength": 1024,
            "minLength": 0,
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "IndexConvention": {
        "required": [
          "currency",
          "dayCountConvention",
          "fixingReference",
          "paymentTenor",
          "publicationDayLag"
        ],
        "type": "object",
        "properties": {
          "fixingReference": {
            "maxLength": 64,
            "minLength": 0,
            "type": "string",
            "description": "The reference rate name for fixings."
          },
          "publicationDayLag": {
            "type": "integer",
            "description": "Number of days between spot and publication of the rate.",
            "format": "int32"
          },
          "paymentTenor": {
            "maxLength": 32,
            "minLength": 0,
            "type": "string",
            "description": "The tenor of the payment. For an OIS index this is always 1 day. For other indices, e.g. LIBOR it will have a variable tenor typically between 1 day and 1 year."
          },
          "dayCountConvention": {
            "maxLength": 32,
            "minLength": 0,
            "type": "string",
            "description": "when calculating the fraction of a year between two dates, what convention is used to represent the number of days in a year\r\nand difference between them.\r\nFor more information on day counts, see [knowledge base article KA-01798](https://support.lusid.com/knowledgebase/article/KA-01798)\r\n            \r\nSupported string (enumeration) values are: [Actual360, Act360, MoneyMarket, Actual365, Act365, Thirty360, ThirtyU360, Bond, ThirtyE360, EuroBond, ActualActual, ActAct, ActActIsda, ActActIsma, ActActIcma, OneOne, Act364, Act365F, Act365L, Act365_25, Act252, Bus252, NL360, NL365]."
          },
          "currency": {
            "type": "string",
            "description": "Currency of the index convention."
          },
          "indexName": {
            "maxLength": 16,
            "minLength": 0,
            "type": "string",
            "description": "The name of the index for which this represents the conventions of.\r\nFor instance, \"SOFR\", \"LIBOR\", \"EURIBOR\", etc.\r\nDefaults to \"INDEX\" if not specified.",
            "nullable": true
          },
          "scope": {
            "maxLength": 256,
            "minLength": 1,
            "pattern": "^[a-zA-Z0-9\\-_]+$",
            "type": "string",
            "description": "The scope used when updating or inserting the convention.",
            "nullable": true
          },
          "code": {
            "maxLength": 256,
            "minLength": 1,
            "pattern": "^[a-zA-Z0-9\\-_]+$",
            "type": "string",
            "description": "The code of the convention.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "A set of conventions that describe the conventions for calculation of payments made on rates interbank lending and similar.\r\nBased on ISDA 2006 conventions and similar documentation. Please see the knowledge base for further documentation."
      },
      "IndexModelOptions": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ModelOptions"
          },
          {
            "required": [
              "modelOptionsType",
              "portfolioScaling"
            ],
            "type": "object",
            "properties": {
              "portfolioScaling": {
                "enum": [
                  "Sum",
                  "AbsoluteSum",
                  "Unity"
                ],
                "type": "string",
                "description": "The available values are: Sum, AbsoluteSum, Unity"
              },
              "modelOptionsType": {
                "enum": [
                  "Invalid",
                  "OpaqueModelOptions",
                  "EmptyModelOptions",
                  "IndexModelOptions",
                  "FxForwardModelOptions",
                  "FundingLegModelOptions",
                  "EquityModelOptions"
                ],
                "type": "string",
                "description": "The available values are: Invalid, OpaqueModelOptions, EmptyModelOptions, IndexModelOptions, FxForwardModelOptions, FundingLegModelOptions, EquityModelOptions"
              }
            }
          }
        ]
      },
      "IndexProjectionDependency": {
        "allOf": [
          {
            "$ref": "#/components/schemas/EconomicDependency"
          },
          {
            "required": [
              "currency",
              "date",
              "dependencyType",
              "indexName",
              "tenor"
            ],
            "type": "object",
            "properties": {
              "currency": {
                "type": "string",
                "description": "The currency of the corresponding IndexConvention. E.g. this would be USD for a convention named USD.6M.LIBOR"
              },
              "tenor": {
                "maxLength": 50,
                "minLength": 0,
                "type": "string",
                "description": "The tenor of the corresponding IndexConvention. E.g. this would be \"6M\" for a convention named USD.6M.LIBOR"
              },
              "indexName": {
                "maxLength": 50,
                "minLength": 0,
                "type": "string",
                "description": "The IndexName of the corresponding IndexConvention. E.g. this would be \"LIBOR\" for a convention named USD.6M.LIBOR"
              },
              "date": {
                "type": "string",
                "description": "The effectiveDate of the entity that this is a dependency for.\r\nUnless there is an obvious date this should be, like for a historic reset, then this is the valuation date.",
                "format": "date-time"
              },
              "dependencyType": {
                "enum": [
                  "OpaqueDependency",
                  "CashDependency",
                  "DiscountingDependency",
                  "EquityCurveDependency",
                  "EquityVolDependency",
                  "FxDependency",
                  "FxForwardsDependency",
                  "FxVolDependency",
                  "IndexProjectionDependency",
                  "IrVolDependency",
                  "QuoteDependency",
                  "Vendor"
                ],
                "type": "string",
                "description": "The available values are: OpaqueDependency, CashDependency, DiscountingDependency, EquityCurveDependency, EquityVolDependency, FxDependency, FxForwardsDependency, FxVolDependency, IndexProjectionDependency, IrVolDependency, QuoteDependency, Vendor"
              }
            }
          }
        ],
        "description": "Represents either a dependency on projections of an index.\r\nE.g. If the interest leg of a swap is a FloatingLeg, then it will declare an IndexProjectionDependency upon pricing.\r\nThis is to indicate that pricing the floating leg requires predictions of future fixings of the index."
      },
      "IndustryClassifier": {
        "required": [
          "classificationCode",
          "classificationSystemName"
        ],
        "type": "object",
        "properties": {
          "classificationSystemName": {
            "minLength": 1,
            "type": "string",
            "description": "The name of the classification system to which the classification code belongs (e.g. GICS)."
          },
          "classificationCode": {
            "maxLength": 64,
            "minLength": 1,
            "pattern": "^[a-zA-Z0-9\\-_]+$",
            "type": "string",
            "description": "The specific industry classification code assigned to the legal entity."
          }
        },
        "additionalProperties": false,
        "description": "Object describing a particular industry classifier,\r\nwhich comprises a classification code and the name of the classification system to which the code belongs."
      },
      "InflationLinkedBond": {
        "allOf": [
          {
            "$ref": "#/components/schemas/LusidInstrument"
          },
          {
            "required": [
              "couponRate",
              "domCcy",
              "flowConventions",
              "inflationIndexName",
              "instrumentType",
              "maturityDate",
              "principal",
              "startDate"
            ],
            "type": "object",
            "properties": {
              "startDate": {
                "type": "string",
                "description": "The start date of the bond.",
                "format": "date-time"
              },
              "maturityDate": {
                "type": "string",
                "description": "The final maturity date of the instrument. This means the last date on which the instruments makes a payment of any amount.\r\nFor the avoidance of doubt, that is not necessarily prior to its last sensitivity date for the purposes of risk; e.g. instruments such as\r\nConstant Maturity Swaps (CMS) often have sensitivities to rates that may well be observed or set prior to the maturity date, but refer to a termination date beyond it.",
                "format": "date-time"
              },
              "flowConventions": {
                "$ref": "#/components/schemas/FlowConventions"
              },
              "couponRate": {
                "type": "number",
                "description": "Simple coupon rate.",
                "format": "double"
              },
              "identifiers": {
                "type": "object",
                "additionalProperties": {
                  "type": "string"
                },
                "description": "External market codes and identifiers for the bond, e.g. ISIN.",
                "nullable": true
              },
              "domCcy": {
                "type": "string",
                "description": "The domestic currency of the instrument."
              },
              "baseCPI": {
                "type": "number",
                "description": "BaseCPI value. This is optional, if not provided the BaseCPI value will be calculated from the BaseCPIDate,\r\nif that too is not present the StartDate will be used.\r\n            \r\nIf provided then this value will always set the BaseCPI on this bond.\r\n            \r\nThe BaseCPI of an inflation linked bond is calculated using the following logic:\r\n- If a BaseCPI value is provided, this is used.\r\n- Otherwise, if BaseCPIDate is provided, the CPI for this date is calculated and used.\r\n- Otherwise, the CPI for the StartDate is calculated and used.\r\n            \r\nNote that if both BaseCPI and BaseCPIDate are set, the BaseCPI value will be used and the BaseCPIDate\r\nwill be ignored but can still be added for informative purposes.\r\n            \r\nSome bonds are issued with a BaseCPI date that does not correspond to the StartDate CPI value, in this\r\ncase the value should be provided here or with the BaseCPIDate.",
                "format": "double",
                "nullable": true
              },
              "baseCPIDate": {
                "type": "string",
                "description": "BaseCPIDate. This is optional. Gives the date that the BaseCPI is calculated for.\r\n            \r\nNote this is an un-lagged date (similar to StartDate) so the Bond ObservationLag will\r\nbe applied to this date when calculating the CPI.\r\n            \r\nThe BaseCPI of an inflation linked bond is calculated using the following logic:\r\n- If a BaseCPI value is provided, this is used.\r\n- Otherwise, if BaseCPIDate is provided, the CPI for this date is calculated and used.\r\n- Otherwise, the CPI for the StartDate is calculated and used.\r\n            \r\nNote that if both BaseCPI and BaseCPIDate are set, the BaseCPI value will be used and the BaseCPIDate\r\nwill be ignored but can still be added for informative purposes.\r\n            \r\nSome bonds are issued with a BaseCPI date that does not correspond to the StartDate CPI value, in this\r\ncase the value should be provided here or with the actual BaseCPI.",
                "format": "date-time",
                "nullable": true
              },
              "calculationType": {
                "type": "string",
                "description": "The calculation type applied to the bond coupon and principal amount.\r\nThe default CalculationType is `Standard`.\r\n\r\nSupported string (enumeration) values are: [Standard, Quarterly, Ratio].",
                "nullable": true
              },
              "exDividendDays": {
                "type": "integer",
                "description": "Number of Good Business Days before the next coupon payment, in which the bond goes ex-dividend.\r\nThis is not common in inflation linked bonds but has been seen with (for example) bonds issued by\r\nthe Bank of Thailand.",
                "format": "int32",
                "nullable": true
              },
              "indexPrecision": {
                "type": "integer",
                "description": "Number of decimal places used to round IndexRatio. This defaults to 5 if not set.",
                "format": "int32"
              },
              "inflationIndexName": {
                "minLength": 1,
                "type": "string",
                "description": "Name of the index, e.g. UKRPI."
              },
              "inflationInterpolation": {
                "type": "string",
                "description": "Inflation Interpolation. This is optional and defaults to Linear if not set.\r\n\r\nSupported string (enumeration) values are: [Linear, Flat].",
                "nullable": true
              },
              "inflationRollDay": {
                "type": "integer",
                "description": "Day of the month that inflation rolls from one month to the next. This is optional and defaults to 1, which is\r\nthe typically value for the majority of inflation bonds (exceptions include Japan which rolls on the 10th\r\nand some LatAm bonds which roll on the 15th).",
                "format": "int32"
              },
              "observationLag": {
                "type": "string",
                "description": "Observation lag. This is a Tenor that must have units of Month.\r\nThis field is typically 3 or 4 months, but can vary, older bonds have 8 months lag.\r\nFor Bonds with a calculation type of Ratio, this property, if set, must be 0Invalid.",
                "nullable": true
              },
              "principal": {
                "type": "number",
                "description": "The face-value or principal for the bond at outset.",
                "format": "double"
              },
              "principalProtection": {
                "type": "boolean",
                "description": "If true then the principal is protected in that the redemption amount will be at least the face value (Principal).\r\nThis is typically set to true for inflation linked bonds issued by the United States and France (for example).\r\nThis is typically set to false for inflation linked bonds issued by the United Kingdom (post 2005).\r\nFor other sovereigns this can vary from issue to issue.\r\nIf not set this property defaults to true.\r\nThis is sometimes referred to as Deflation protection or an inflation floor of 0%."
              },
              "stubType": {
                "type": "string",
                "description": "StubType. Most Inflation linked bonds have a ShortFront stub type so this is the default, however in some cases\r\nwith a long front stub LongFront should be selected.\r\nStubType Both is not supported for InflationLinkedBonds.\r\n\r\nSupported string (enumeration) values are: [ShortFront, ShortBack, LongBack, LongFront, Both].",
                "nullable": true
              },
              "instrumentType": {
                "enum": [
                  "QuotedSecurity",
                  "InterestRateSwap",
                  "FxForward",
                  "Future",
                  "ExoticInstrument",
                  "FxOption",
                  "CreditDefaultSwap",
                  "InterestRateSwaption",
                  "Bond",
                  "EquityOption",
                  "FixedLeg",
                  "FloatingLeg",
                  "BespokeCashFlowsLeg",
                  "Unknown",
                  "TermDeposit",
                  "ContractForDifference",
                  "EquitySwap",
                  "CashPerpetual",
                  "CapFloor",
                  "CashSettled",
                  "CdsIndex",
                  "Basket",
                  "FundingLeg",
                  "FxSwap",
                  "ForwardRateAgreement",
                  "SimpleInstrument",
                  "Repo",
                  "Equity",
                  "ExchangeTradedOption",
                  "ReferenceInstrument",
                  "ComplexBond",
                  "InflationLinkedBond",
                  "InflationSwap",
                  "SimpleCashFlowLoan"
                ],
                "type": "string",
                "description": "The available values are: QuotedSecurity, InterestRateSwap, FxForward, Future, ExoticInstrument, FxOption, CreditDefaultSwap, InterestRateSwaption, Bond, EquityOption, FixedLeg, FloatingLeg, BespokeCashFlowsLeg, Unknown, TermDeposit, ContractForDifference, EquitySwap, CashPerpetual, CapFloor, CashSettled, CdsIndex, Basket, FundingLeg, FxSwap, ForwardRateAgreement, SimpleInstrument, Repo, Equity, ExchangeTradedOption, ReferenceInstrument, ComplexBond, InflationLinkedBond, InflationSwap, SimpleCashFlowLoan"
              }
            }
          }
        ],
        "description": "Inflation Linked Bond."
      },
      "InflationSwap": {
        "allOf": [
          {
            "$ref": "#/components/schemas/LusidInstrument"
          },
          {
            "required": [
              "fixedRate",
              "flowConventions",
              "inflationIndexName",
              "instrumentType",
              "maturityDate",
              "notional",
              "observationLag",
              "startDate"
            ],
            "type": "object",
            "properties": {
              "startDate": {
                "type": "string",
                "description": "The start date of the instrument. This is normally synonymous with the trade-date.",
                "format": "date-time"
              },
              "maturityDate": {
                "type": "string",
                "description": "The final maturity date of the instrument. This means the last date on which the instruments makes a payment of any amount.\r\nFor the avoidance of doubt, that is not necessarily prior to its last sensitivity date for the purposes of risk; e.g. instruments such as\r\nConstant Maturity Swaps (CMS) often have sensitivities to rates that may well be observed or set prior to the maturity date, but refer to a termination date beyond it.",
                "format": "date-time"
              },
              "flowConventions": {
                "$ref": "#/components/schemas/FlowConventions"
              },
              "fixedRate": {
                "type": "number",
                "description": "Fixed Rate",
                "format": "double"
              },
              "inflationCap": {
                "type": "number",
                "description": "Optional cap, needed for LPI swaps. Should not be set for ZCIIS.",
                "format": "double",
                "nullable": true
              },
              "inflationFloor": {
                "type": "number",
                "description": "Optional floor, needed for LPI swaps. Should not be set for ZCIIS.",
                "format": "double",
                "nullable": true
              },
              "inflationFrequency": {
                "type": "string",
                "description": "Frequency of inflation updated. Optional and defaults to Monthly which is the most common.\r\nHowever both Australian and New Zealand inflation is published Quarterly. Only tenors of 1M or 3M are supported.",
                "nullable": true
              },
              "inflationIndexName": {
                "minLength": 1,
                "type": "string",
                "description": "Name of the Inflation Index"
              },
              "inflationInterpolation": {
                "type": "string",
                "description": "Inflation Interpolation flag, defaults to Linear but some older swaps require Flat.\r\n\r\nSupported string (enumeration) values are: [Linear, Flat].",
                "nullable": true
              },
              "inflationRollDay": {
                "type": "integer",
                "description": "Day of the month that inflation rolls from one month to the next. This is optional and defaults to 1, which is\r\nthe typically value for the majority of inflation bonds (exceptions include Japan which rolls on the 10th\r\nand some LatAm bonds which roll on the 15th).",
                "format": "int32"
              },
              "notional": {
                "type": "number",
                "description": "The notional",
                "format": "double"
              },
              "observationLag": {
                "minLength": 1,
                "type": "string",
                "description": "Observation Lag, must be a number of Months, typically 3 or 4 but sometimes 8."
              },
              "payReceive": {
                "type": "string",
                "description": "PayReceive flag for the inflation leg.\r\nThis field is optional and defaults to Pay.\r\nIf set to Pay, this swap pays inflation and receives fixed.\r\n\r\nSupported string (enumeration) values are: [Pay, Receive].",
                "nullable": true
              },
              "instrumentType": {
                "enum": [
                  "QuotedSecurity",
                  "InterestRateSwap",
                  "FxForward",
                  "Future",
                  "ExoticInstrument",
                  "FxOption",
                  "CreditDefaultSwap",
                  "InterestRateSwaption",
                  "Bond",
                  "EquityOption",
                  "FixedLeg",
                  "FloatingLeg",
                  "BespokeCashFlowsLeg",
                  "Unknown",
                  "TermDeposit",
                  "ContractForDifference",
                  "EquitySwap",
                  "CashPerpetual",
                  "CapFloor",
                  "CashSettled",
                  "CdsIndex",
                  "Basket",
                  "FundingLeg",
                  "FxSwap",
                  "ForwardRateAgreement",
                  "SimpleInstrument",
                  "Repo",
                  "Equity",
                  "ExchangeTradedOption",
                  "ReferenceInstrument",
                  "ComplexBond",
                  "InflationLinkedBond",
                  "InflationSwap",
                  "SimpleCashFlowLoan"
                ],
                "type": "string",
                "description": "The available values are: QuotedSecurity, InterestRateSwap, FxForward, Future, ExoticInstrument, FxOption, CreditDefaultSwap, InterestRateSwaption, Bond, EquityOption, FixedLeg, FloatingLeg, BespokeCashFlowsLeg, Unknown, TermDeposit, ContractForDifference, EquitySwap, CashPerpetual, CapFloor, CashSettled, CdsIndex, Basket, FundingLeg, FxSwap, ForwardRateAgreement, SimpleInstrument, Repo, Equity, ExchangeTradedOption, ReferenceInstrument, ComplexBond, InflationLinkedBond, InflationSwap, SimpleCashFlowLoan"
              }
            }
          }
        ],
        "description": "LUSID representation of an Inflation Swap.\r\nThe implementation supports the following swap types:\r\n* Zero Coupon inflation swap, with a single payment at maturity.\r\n* LPI Swap (capped and floored)\r\n* Year on Year inflation swap"
      },
      "InformationalErrorEvent": {
        "allOf": [
          {
            "$ref": "#/components/schemas/InstrumentEvent"
          },
          {
            "required": [
              "effectiveAt",
              "errorDetail",
              "errorReason",
              "instrumentEventType"
            ],
            "type": "object",
            "properties": {
              "errorDetail": {
                "minLength": 1,
                "type": "string",
                "description": "The details of the error"
              },
              "errorReason": {
                "minLength": 1,
                "type": "string",
                "description": "The error reason"
              },
              "effectiveAt": {
                "type": "string",
                "description": "The effective date of the evaulation",
                "format": "date-time"
              },
              "instrumentEventType": {
                "enum": [
                  "TransitionEvent",
                  "InformationalEvent",
                  "OpenEvent",
                  "CloseEvent",
                  "StockSplitEvent",
                  "BondDefaultEvent",
                  "CashDividendEvent",
                  "AmortisationEvent",
                  "CashFlowEvent",
                  "ExerciseEvent",
                  "ResetEvent",
                  "TriggerEvent",
                  "RawVendorEvent",
                  "InformationalErrorEvent"
                ],
                "type": "string",
                "description": "The Type of Event. The available values are: TransitionEvent, InformationalEvent, OpenEvent, CloseEvent, StockSplitEvent, BondDefaultEvent, CashDividendEvent, AmortisationEvent, CashFlowEvent, ExerciseEvent, ResetEvent, TriggerEvent, RawVendorEvent, InformationalErrorEvent"
              }
            }
          }
        ],
        "description": "Event holder containing error information"
      },
      "InformationalEvent": {
        "allOf": [
          {
            "$ref": "#/components/schemas/InstrumentEvent"
          },
          {
            "required": [
              "anchorDate",
              "eventStatus",
              "eventType",
              "instrumentEventType"
            ],
            "type": "object",
            "properties": {
              "eventType": {
                "minLength": 1,
                "type": "string",
                "description": "What type of internal event does this represent; reset, exercise, amortisation etc.",
                "readOnly": true
              },
              "eventStatus": {
                "minLength": 1,
                "type": "string",
                "description": "What is the event status, is it a known (ie historic) or unknown (ie projected) event?"
              },
              "anchorDate": {
                "type": "string",
                "description": "In the case of a point event, the single date on which the event occurs. In the case of an event which is\r\nspread over a window, e.g. a barrier or American option, the start of that window.",
                "format": "date-time"
              },
              "eventWindowEnd": {
                "type": "string",
                "description": "In the case of a point event this is identical to the anchor date. In the case of an event that is spread over a window,\r\nthis is the end of that window.",
                "format": "date-time",
                "readOnly": true
              },
              "diagnostics": {
                "$ref": "#/components/schemas/ResultValueDictionary"
              },
              "instrumentEventType": {
                "enum": [
                  "TransitionEvent",
                  "InformationalEvent",
                  "OpenEvent",
                  "CloseEvent",
                  "StockSplitEvent",
                  "BondDefaultEvent",
                  "CashDividendEvent",
                  "AmortisationEvent",
                  "CashFlowEvent",
                  "ExerciseEvent",
                  "ResetEvent",
                  "TriggerEvent",
                  "RawVendorEvent",
                  "InformationalErrorEvent"
                ],
                "type": "string",
                "description": "The Type of Event. The available values are: TransitionEvent, InformationalEvent, OpenEvent, CloseEvent, StockSplitEvent, BondDefaultEvent, CashDividendEvent, AmortisationEvent, CashFlowEvent, ExerciseEvent, ResetEvent, TriggerEvent, RawVendorEvent, InformationalErrorEvent"
              }
            }
          }
        ],
        "description": "A generic event derived from the economic definition of an instrument. This should be considered purely\r\ninformational; any data provided by this event is not guaranteed to be processable by LUSID."
      },
      "InlineValuationRequest": {
        "required": [
          "instruments",
          "metrics"
        ],
        "type": "object",
        "properties": {
          "recipeId": {
            "$ref": "#/components/schemas/ResourceId"
          },
          "asAt": {
            "type": "string",
            "description": "The asAt date to use",
            "format": "date-time",
            "nullable": true
          },
          "metrics": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AggregateSpec"
            },
            "description": "The set of specifications to calculate or retrieve during the valuation and present in the results. For example:\r\nAggregateSpec('Valuation/PV','Sum') for returning the PV (present value) of holdings\r\nAggregateSpec('Holding/default/Units','Sum') for returning the units of holidays\r\nAggregateSpec('Instrument/default/LusidInstrumentId','Value') for returning the Lusid Instrument identifier"
          },
          "groupBy": {
            "type": "array",
            "items": {
              "type": "string",
              "description": "The key that uniquely identifies a queryable address in Lusid."
            },
            "description": "The set of items by which to perform grouping. This primarily matters when one or more of the metric operators is a mapping\r\nthat reduces set size, e.g. sum or proportion. The group-by statement determines the set of keys by which to break the results out.",
            "nullable": true
          },
          "filters": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PropertyFilter"
            },
            "description": "A set of filters to use to reduce the data found in a request. Equivalent to the 'where ...' part of a Sql select statement.\r\nFor example, filter a set of values within a given range or matching a particular value.",
            "nullable": true
          },
          "sort": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OrderBySpec"
            },
            "description": "A (possibly empty/null) set of specifications for how to order the results.",
            "nullable": true
          },
          "reportCurrency": {
            "maxLength": 3,
            "minLength": 0,
            "type": "string",
            "description": "Three letter ISO currency string indicating what currency to report in for ReportCurrency denominated queries.\r\nIf not present, then the currency of the relevant portfolio will be used in its place.",
            "nullable": true
          },
          "equipWithSubtotals": {
            "type": "boolean",
            "description": "Flag directing the Valuation call to populate the results with subtotals of aggregates."
          },
          "returnResultAsExpandedTypes": {
            "type": "boolean",
            "description": "Financially meaningful results can be presented as either simple flat types or more complex expanded types.\r\nFor example, the present value (PV) of a holding could be represented either as a simple decimal (with currency implied)\r\nor as a decimal-currency pair. This flag allows either representation to be returned. In the PV example,\r\nthe returned value would be the decimal-currency pair if this flag is true, or the decimal only if this flag is false."
          },
          "valuationSchedule": {
            "$ref": "#/components/schemas/ValuationSchedule"
          },
          "instruments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/WeightedInstrument"
            },
            "description": "The set of instruments, weighted by the quantities held that are required.\r\nIt is identified by an identifier tag that can be used to identify it externally.\r\nFor a single, unique trade or transaction this can be thought of as equivalent to the transaction identifier, or\r\na composite of the sub-holding keys for a regular sub-holding. When there are multiple transactions sharing the same underlying instrument\r\nsuch as purchase of shares on multiple dates where tax implications are different this would not be the case."
          },
          "marketDataOverrides": {
            "$ref": "#/components/schemas/MarketDataOverrides"
          }
        },
        "additionalProperties": false,
        "description": "Specification object for the parameters of an inline valuation"
      },
      "InlineValuationsReconciliationRequest": {
        "required": [
          "left",
          "right"
        ],
        "type": "object",
        "properties": {
          "left": {
            "$ref": "#/components/schemas/InlineValuationRequest"
          },
          "right": {
            "$ref": "#/components/schemas/InlineValuationRequest"
          },
          "leftToRightMapping": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ReconciliationLeftRightAddressKeyPair"
            },
            "description": "The mapping from property keys requested by left aggregation to property keys on right hand side",
            "nullable": true
          },
          "preserveKeys": {
            "type": "array",
            "items": {
              "type": "string",
              "description": "The key that uniquely identifies a queryable address in Lusid."
            },
            "description": "List of keys to preserve (from rhs) in the diff. Used in conjunction with filtering/grouping",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Specification for the reconciliation request. Left and Right hand sides are constructed. Each consists of a valuation of a inline set of instruments\r\nusing an inline aggregation request. The results of this can then be compared to each other. The difference, which is effectively a risk based\r\ndifference allows comparison of the effects of changing a recipe, valuation date, or (though it may or may not make logical sense) a set of instruments."
      },
      "InputTransition": {
        "required": [
          "costFactor",
          "unitsFactor"
        ],
        "type": "object",
        "properties": {
          "unitsFactor": {
            "type": "number",
            "description": "The factor to scale units by",
            "format": "double"
          },
          "costFactor": {
            "type": "number",
            "description": "The factor to scale cost by",
            "format": "double"
          }
        },
        "additionalProperties": false,
        "description": "The input 'transition' within a corporate action, representing the singular input position"
      },
      "Instrument": {
        "required": [
          "identifiers",
          "lusidInstrumentId",
          "name",
          "state",
          "version"
        ],
        "type": "object",
        "properties": {
          "href": {
            "type": "string",
            "description": "The specific Uniform Resource Identifier (URI) for this resource at the requested effective and asAt datetime.",
            "format": "uri",
            "nullable": true
          },
          "scope": {
            "type": "string",
            "description": "The scope in which the instrument lies.",
            "nullable": true
          },
          "lusidInstrumentId": {
            "minLength": 1,
            "type": "string",
            "description": "The unique LUSID Instrument Identifier (LUID) of the instrument."
          },
          "version": {
            "$ref": "#/components/schemas/Version"
          },
          "name": {
            "minLength": 1,
            "type": "string",
            "description": "The name of the instrument."
          },
          "identifiers": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "The set of identifiers that can be used to identify the instrument."
          },
          "properties": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Property"
            },
            "description": "The requested instrument properties. These will be from the 'Instrument' domain.",
            "nullable": true
          },
          "lookthroughPortfolio": {
            "$ref": "#/components/schemas/ResourceId"
          },
          "instrumentDefinition": {
            "$ref": "#/components/schemas/LusidInstrument"
          },
          "state": {
            "enum": [
              "Active",
              "Inactive",
              "Deleted"
            ],
            "type": "string",
            "description": "The state of of the instrument at the asAt datetime of this version of the instrument definition. The available values are: Active, Inactive, Deleted"
          },
          "assetClass": {
            "enum": [
              "InterestRates",
              "FX",
              "Inflation",
              "Equities",
              "Credit",
              "Commodities",
              "Money",
              "Unknown"
            ],
            "type": "string",
            "description": "The nominal asset class of the instrument, e.g. InterestRates, FX, Inflation, Equities, Credit, Commodities, etc. The available values are: InterestRates, FX, Inflation, Equities, Credit, Commodities, Money, Unknown"
          },
          "domCcy": {
            "type": "string",
            "description": "The domestic currency, meaning the currency in which the instrument would typically be expected to pay cashflows, e.g. a share in AAPL being USD.",
            "nullable": true
          },
          "relationships": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Relationship"
            },
            "description": "A set of relationships associated to the instrument.",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "description": "Collection of links.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "A list of instruments."
      },
      "InstrumentDefinition": {
        "required": [
          "identifiers",
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "minLength": 1,
            "type": "string",
            "description": "The name of the instrument."
          },
          "identifiers": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/InstrumentIdValue"
            },
            "description": "A set of identifiers that can be used to identify the instrument. At least one of these must be configured to be a unique identifier."
          },
          "properties": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Property"
            },
            "description": "Set of unique instrument properties and associated values to store with the instrument. Each property must be from the 'Instrument' domain.",
            "nullable": true
          },
          "lookThroughPortfolioId": {
            "$ref": "#/components/schemas/ResourceId"
          },
          "definition": {
            "$ref": "#/components/schemas/LusidInstrument"
          }
        },
        "additionalProperties": false
      },
      "InstrumentDefinitionFormat": {
        "required": [
          "sourceSystem",
          "vendor",
          "version"
        ],
        "type": "object",
        "properties": {
          "sourceSystem": {
            "minLength": 1,
            "type": "string",
            "description": "which source system does the format originate from"
          },
          "vendor": {
            "minLength": 1,
            "type": "string",
            "description": "An instrument will potentially have been created by any number of different organisations. Some will be understood completely (e.g. LUSID's), some won't.\r\n            The provenance of an instrument indicates who \"owns\" the associated format."
          },
          "version": {
            "minLength": 1,
            "type": "string",
            "description": "Version of the document. Would be preferable to avoid the need, but LUSID will not control other organisations' trade formats."
          }
        },
        "additionalProperties": false,
        "description": "What is the provenance of an instrument. This defines who creates/owns it, what format it is in (e.g. a proprietary format or a common and known one)\r\n            and what the version of that is."
      },
      "InstrumentEvent": {
        "required": [
          "instrumentEventType"
        ],
        "type": "object",
        "properties": {
          "instrumentEventType": {
            "enum": [
              "TransitionEvent",
              "InformationalEvent",
              "OpenEvent",
              "CloseEvent",
              "StockSplitEvent",
              "BondDefaultEvent",
              "CashDividendEvent",
              "AmortisationEvent",
              "CashFlowEvent",
              "ExerciseEvent",
              "ResetEvent",
              "TriggerEvent",
              "RawVendorEvent",
              "InformationalErrorEvent"
            ],
            "type": "string",
            "description": "The Type of Event. The available values are: TransitionEvent, InformationalEvent, OpenEvent, CloseEvent, StockSplitEvent, BondDefaultEvent, CashDividendEvent, AmortisationEvent, CashFlowEvent, ExerciseEvent, ResetEvent, TriggerEvent, RawVendorEvent, InformationalErrorEvent"
          }
        },
        "additionalProperties": false,
        "description": "Base class for representing instrument events in LUSID, such as dividends, stock splits, and option exercises.\r\nThis base class should not be directly instantiated; each supported InstrumentEventType has a corresponding inherited class.",
        "discriminator": {
          "propertyName": "instrumentEventType"
        }
      },
      "InstrumentEventHolder": {
        "required": [
          "description",
          "eventDateRange",
          "instrumentEvent",
          "instrumentEventId",
          "instrumentIdentifiers",
          "instrumentScope",
          "lusidInstrumentId"
        ],
        "type": "object",
        "properties": {
          "instrumentEventId": {
            "maxLength": 64,
            "minLength": 1,
            "pattern": "^[a-zA-Z0-9\\-_]+$",
            "type": "string",
            "description": "The unique identifier of this corporate action."
          },
          "corporateActionSourceId": {
            "$ref": "#/components/schemas/ResourceId"
          },
          "instrumentIdentifiers": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "The set of identifiers which determine the instrument this event relates to."
          },
          "lusidInstrumentId": {
            "minLength": 1,
            "type": "string",
            "description": "The LUID for the instrument."
          },
          "instrumentScope": {
            "minLength": 1,
            "type": "string",
            "description": "The scope of the instrument."
          },
          "description": {
            "maxLength": 1024,
            "minLength": 0,
            "pattern": "^[\\s\\S]*$",
            "type": "string",
            "description": "The description of the instrument event."
          },
          "eventDateRange": {
            "$ref": "#/components/schemas/EventDateRange"
          },
          "instrumentEvent": {
            "$ref": "#/components/schemas/InstrumentEvent"
          },
          "properties": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PerpetualProperty"
            },
            "description": "The properties attached to this instrument event.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "An instrument event equipped with additional metadata."
      },
      "InstrumentIdTypeDescriptor": {
        "required": [
          "identifierType",
          "isUniqueIdentifierType",
          "propertyKey"
        ],
        "type": "object",
        "properties": {
          "identifierType": {
            "minLength": 1,
            "type": "string",
            "description": "The name of the identifier type."
          },
          "propertyKey": {
            "type": "string",
            "description": "The property key that corresponds to the identifier type."
          },
          "isUniqueIdentifierType": {
            "type": "boolean",
            "description": "Whether or not the identifier type is enforced to be unique."
          }
        },
        "additionalProperties": false,
        "description": "The description of an allowable instrument identifier."
      },
      "InstrumentIdValue": {
        "required": [
          "value"
        ],
        "type": "object",
        "properties": {
          "value": {
            "minLength": 1,
            "type": "string",
            "description": "The value of the identifier."
          },
          "effectiveAt": {
            "type": "string",
            "description": "The effective datetime from which the identifier will be valid. If left unspecified the default value is the beginning of time.",
            "format": "date-time"
          }
        },
        "additionalProperties": false
      },
      "InstrumentLeg": {
        "allOf": [
          {
            "$ref": "#/components/schemas/LusidInstrument"
          },
          {
            "required": [
              "instrumentType"
            ],
            "type": "object",
            "properties": {
              "instrumentType": {
                "enum": [
                  "QuotedSecurity",
                  "InterestRateSwap",
                  "FxForward",
                  "Future",
                  "ExoticInstrument",
                  "FxOption",
                  "CreditDefaultSwap",
                  "InterestRateSwaption",
                  "Bond",
                  "EquityOption",
                  "FixedLeg",
                  "FloatingLeg",
                  "BespokeCashFlowsLeg",
                  "Unknown",
                  "TermDeposit",
                  "ContractForDifference",
                  "EquitySwap",
                  "CashPerpetual",
                  "CapFloor",
                  "CashSettled",
                  "CdsIndex",
                  "Basket",
                  "FundingLeg",
                  "FxSwap",
                  "ForwardRateAgreement",
                  "SimpleInstrument",
                  "Repo",
                  "Equity",
                  "ExchangeTradedOption",
                  "ReferenceInstrument",
                  "ComplexBond",
                  "InflationLinkedBond",
                  "InflationSwap",
                  "SimpleCashFlowLoan"
                ],
                "type": "string",
                "description": "The available values are: QuotedSecurity, InterestRateSwap, FxForward, Future, ExoticInstrument, FxOption, CreditDefaultSwap, InterestRateSwaption, Bond, EquityOption, FixedLeg, FloatingLeg, BespokeCashFlowsLeg, Unknown, TermDeposit, ContractForDifference, EquitySwap, CashPerpetual, CapFloor, CashSettled, CdsIndex, Basket, FundingLeg, FxSwap, ForwardRateAgreement, SimpleInstrument, Repo, Equity, ExchangeTradedOption, ReferenceInstrument, ComplexBond, InflationLinkedBond, InflationSwap, SimpleCashFlowLoan"
              }
            }
          }
        ],
        "description": "Base class for representing instrument legs in LUSID.\r\nAn instrument leg describes a set of cashflows that are paid at a set of points in time according to some set of conventions.\r\nThis base class should not be directly instantiated; only its inheritors should be used.",
        "discriminator": {
          "propertyName": "instrumentType"
        }
      },
      "InstrumentList": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ReferenceList"
          },
          {
            "required": [
              "referenceListType",
              "values"
            ],
            "type": "object",
            "properties": {
              "values": {
                "maxItems": 100,
                "minItems": 1,
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "referenceListType": {
                "enum": [
                  "PortfolioGroupIdList",
                  "PortfolioIdList",
                  "AddressKeyList",
                  "StringList",
                  "InstrumentList",
                  "DecimalList"
                ],
                "type": "string",
                "description": "The reference list values. The available values are: PortfolioGroupIdList, PortfolioIdList, AddressKeyList, StringList, InstrumentList, DecimalList"
              }
            }
          }
        ]
      },
      "InstrumentMatch": {
        "type": "object",
        "properties": {
          "masteredInstruments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/InstrumentDefinition"
            },
            "description": "The collection of instruments found by the search which have been mastered within LUSID.",
            "nullable": true
          },
          "externalInstruments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/InstrumentDefinition"
            },
            "description": "The collection of instruments found by the search which have not been mastered within LUSID and instead found via OpenFIGI.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "A collection of instrument search results"
      },
      "InstrumentModels": {
        "type": "object",
        "properties": {
          "instrumentId": {
            "type": "string",
            "description": "The unique LUSID Instrument Identifier (LUID) of the instrument.",
            "nullable": true
          },
          "supportedModels": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The pricing models supported by the instrument e.g. 'Discounting'.",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "description": "Collection of links.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Supported pricing models for an instrument."
      },
      "InstrumentProperties": {
        "type": "object",
        "properties": {
          "href": {
            "type": "string",
            "description": "The specific Uniform Resource Identifier (URI) for this resource at the requested effective and asAt datetime.",
            "format": "uri",
            "nullable": true
          },
          "properties": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/Property"
            },
            "description": "The instrument properties. These will be from the 'Instrument' domain.",
            "nullable": true
          },
          "version": {
            "$ref": "#/components/schemas/Version"
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "description": "Collection of links.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "InstrumentSearchProperty": {
        "required": [
          "key",
          "value"
        ],
        "type": "object",
        "properties": {
          "key": {
            "type": "string",
            "description": "The property key of instrument property to search for. This will be from the 'Instrument' domain and will take the format {domain}/{scope}/{code} e.g. 'Instrument/system/Isin' or 'Instrument/MyScope/AssetClass'."
          },
          "value": {
            "minLength": 1,
            "type": "string",
            "description": "The value of the property e.g. 'US0378331005' or 'Equity'."
          }
        },
        "additionalProperties": false
      },
      "InterestRateSwap": {
        "allOf": [
          {
            "$ref": "#/components/schemas/LusidInstrument"
          },
          {
            "required": [
              "instrumentType",
              "legs",
              "maturityDate",
              "startDate"
            ],
            "type": "object",
            "properties": {
              "startDate": {
                "type": "string",
                "description": "The start date of the instrument. This is normally synonymous with the trade-date.",
                "format": "date-time"
              },
              "maturityDate": {
                "type": "string",
                "description": "The final maturity date of the instrument. This means the last date on which the instruments makes a payment of any amount.\r\nFor the avoidance of doubt, that is not necessarily prior to its last sensitivity date for the purposes of risk; e.g. instruments such as\r\nConstant Maturity Swaps (CMS) often have sensitivities to rates that may well be observed or set prior to the maturity date, but refer to a termination date beyond it.",
                "format": "date-time"
              },
              "isNonDeliverable": {
                "type": "boolean",
                "description": "Is the contract an IRS of \"Non-Deliverable\" type, meaning a single payment in the settlement currency based on the difference between\r\nthe fixed and floating rates."
              },
              "legs": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/InstrumentLeg"
                },
                "description": "The set of instrument legs that define the swap instrument, these should be FloatingLeg or FixedLeg."
              },
              "settlementCcy": {
                "type": "string",
                "description": "Settlement currency if IRS is non-deliverable.",
                "nullable": true
              },
              "instrumentType": {
                "enum": [
                  "QuotedSecurity",
                  "InterestRateSwap",
                  "FxForward",
                  "Future",
                  "ExoticInstrument",
                  "FxOption",
                  "CreditDefaultSwap",
                  "InterestRateSwaption",
                  "Bond",
                  "EquityOption",
                  "FixedLeg",
                  "FloatingLeg",
                  "BespokeCashFlowsLeg",
                  "Unknown",
                  "TermDeposit",
                  "ContractForDifference",
                  "EquitySwap",
                  "CashPerpetual",
                  "CapFloor",
                  "CashSettled",
                  "CdsIndex",
                  "Basket",
                  "FundingLeg",
                  "FxSwap",
                  "ForwardRateAgreement",
                  "SimpleInstrument",
                  "Repo",
                  "Equity",
                  "ExchangeTradedOption",
                  "ReferenceInstrument",
                  "ComplexBond",
                  "InflationLinkedBond",
                  "InflationSwap",
                  "SimpleCashFlowLoan"
                ],
                "type": "string",
                "description": "The available values are: QuotedSecurity, InterestRateSwap, FxForward, Future, ExoticInstrument, FxOption, CreditDefaultSwap, InterestRateSwaption, Bond, EquityOption, FixedLeg, FloatingLeg, BespokeCashFlowsLeg, Unknown, TermDeposit, ContractForDifference, EquitySwap, CashPerpetual, CapFloor, CashSettled, CdsIndex, Basket, FundingLeg, FxSwap, ForwardRateAgreement, SimpleInstrument, Repo, Equity, ExchangeTradedOption, ReferenceInstrument, ComplexBond, InflationLinkedBond, InflationSwap, SimpleCashFlowLoan"
              }
            }
          }
        ],
        "description": "LUSID representation of an Interest Rate Swap, including:\r\n\r\n  * Vanilla (single currency fixed-float non-amortising)\r\n  * CrossCurrency (>1 currency is used by the swap legs)\r\n  * Basis (single currency, floating-floating legs of different tenors)\r\n  * Amortising (the swap has 1+ leg with amortised notional)"
      },
      "InterestRateSwaption": {
        "allOf": [
          {
            "$ref": "#/components/schemas/LusidInstrument"
          },
          {
            "required": [
              "deliveryMethod",
              "instrumentType",
              "payOrReceiveFixed",
              "startDate",
              "swap"
            ],
            "type": "object",
            "properties": {
              "startDate": {
                "type": "string",
                "description": "The start date of the instrument. This is normally synonymous with the trade-date.",
                "format": "date-time"
              },
              "payOrReceiveFixed": {
                "minLength": 1,
                "type": "string",
                "description": "True if on exercise the holder of the option enters the swap paying fixed, false if floating.\r\n\r\nSupported string (enumeration) values are: [Pay, Receive]."
              },
              "premium": {
                "$ref": "#/components/schemas/Premium"
              },
              "deliveryMethod": {
                "minLength": 1,
                "type": "string",
                "description": "How does the option settle\r\n\r\nSupported string (enumeration) values are: [Cash, Physical]."
              },
              "swap": {
                "$ref": "#/components/schemas/InterestRateSwap"
              },
              "instrumentType": {
                "enum": [
                  "QuotedSecurity",
                  "InterestRateSwap",
                  "FxForward",
                  "Future",
                  "ExoticInstrument",
                  "FxOption",
                  "CreditDefaultSwap",
                  "InterestRateSwaption",
                  "Bond",
                  "EquityOption",
                  "FixedLeg",
                  "FloatingLeg",
                  "BespokeCashFlowsLeg",
                  "Unknown",
                  "TermDeposit",
                  "ContractForDifference",
                  "EquitySwap",
                  "CashPerpetual",
                  "CapFloor",
                  "CashSettled",
                  "CdsIndex",
                  "Basket",
                  "FundingLeg",
                  "FxSwap",
                  "ForwardRateAgreement",
                  "SimpleInstrument",
                  "Repo",
                  "Equity",
                  "ExchangeTradedOption",
                  "ReferenceInstrument",
                  "ComplexBond",
                  "InflationLinkedBond",
                  "InflationSwap",
                  "SimpleCashFlowLoan"
                ],
                "type": "string",
                "description": "The available values are: QuotedSecurity, InterestRateSwap, FxForward, Future, ExoticInstrument, FxOption, CreditDefaultSwap, InterestRateSwaption, Bond, EquityOption, FixedLeg, FloatingLeg, BespokeCashFlowsLeg, Unknown, TermDeposit, ContractForDifference, EquitySwap, CashPerpetual, CapFloor, CashSettled, CdsIndex, Basket, FundingLeg, FxSwap, ForwardRateAgreement, SimpleInstrument, Repo, Equity, ExchangeTradedOption, ReferenceInstrument, ComplexBond, InflationLinkedBond, InflationSwap, SimpleCashFlowLoan"
              }
            }
          }
        ],
        "description": "LUSID representation of an Interest Rate Swaption."
      },
      "IrVolCubeData": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ComplexMarketData"
          },
          {
            "required": [
              "baseDate",
              "instruments",
              "marketDataType",
              "quotes"
            ],
            "type": "object",
            "properties": {
              "baseDate": {
                "type": "string",
                "description": "Base date of the cube - this is the start date of the swaptions on the cube.",
                "format": "date-time"
              },
              "instruments": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/LusidInstrument"
                },
                "description": "Retrieve the set of instruments that define the cube."
              },
              "quotes": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/MarketQuote"
                },
                "description": "Access the set of quotes that define the cube."
              },
              "lineage": {
                "maxLength": 1024,
                "minLength": 0,
                "type": "string",
                "description": "Description of the complex market data's lineage e.g. 'FundAccountant_GreenQuality'.",
                "nullable": true
              },
              "marketDataType": {
                "enum": [
                  "DiscountFactorCurveData",
                  "EquityVolSurfaceData",
                  "FxVolSurfaceData",
                  "IrVolCubeData",
                  "OpaqueMarketData",
                  "YieldCurveData",
                  "FxForwardCurveData",
                  "FxForwardPipsCurveData",
                  "FxForwardTenorCurveData",
                  "FxForwardTenorPipsCurveData",
                  "FxForwardCurveByQuoteReference",
                  "CreditSpreadCurveData",
                  "EquityCurveByPricesData"
                ],
                "type": "string",
                "description": "The available values are: DiscountFactorCurveData, EquityVolSurfaceData, FxVolSurfaceData, IrVolCubeData, OpaqueMarketData, YieldCurveData, FxForwardCurveData, FxForwardPipsCurveData, FxForwardTenorCurveData, FxForwardTenorPipsCurveData, FxForwardCurveByQuoteReference, CreditSpreadCurveData, EquityCurveByPricesData"
              }
            }
          }
        ],
        "description": "Market Data required to build a volatility cube for swaption pricing,  represented by a list of instruments and corresponding market quotes"
      },
      "IrVolDependency": {
        "allOf": [
          {
            "$ref": "#/components/schemas/EconomicDependency"
          },
          {
            "required": [
              "currency",
              "date",
              "dependencyType",
              "volType"
            ],
            "type": "object",
            "properties": {
              "currency": {
                "type": "string",
                "description": "The domestic currency of the instrument declaring this dependency."
              },
              "volType": {
                "maxLength": 50,
                "minLength": 0,
                "type": "string",
                "description": "Volatility type e.g. \"LN\" and \"N\" for log-normal and normal volatility."
              },
              "date": {
                "type": "string",
                "description": "The effectiveDate of the entity that this is a dependency for.\r\nUnless there is an obvious date this should be, like for a historic reset, then this is the valuation date.",
                "format": "date-time"
              },
              "dependencyType": {
                "enum": [
                  "OpaqueDependency",
                  "CashDependency",
                  "DiscountingDependency",
                  "EquityCurveDependency",
                  "EquityVolDependency",
                  "FxDependency",
                  "FxForwardsDependency",
                  "FxVolDependency",
                  "IndexProjectionDependency",
                  "IrVolDependency",
                  "QuoteDependency",
                  "Vendor"
                ],
                "type": "string",
                "description": "The available values are: OpaqueDependency, CashDependency, DiscountingDependency, EquityCurveDependency, EquityVolDependency, FxDependency, FxForwardsDependency, FxVolDependency, IndexProjectionDependency, IrVolDependency, QuoteDependency, Vendor"
              }
            }
          }
        ],
        "description": "Economic dependency required to price interest rate products that contain optionality, for example swaptions.\r\nFor example, can indicate a dependency on an IrVolCubeData."
      },
      "IsBusinessDayResponse": {
        "required": [
          "isBusinessDay",
          "requestedDateTime"
        ],
        "type": "object",
        "properties": {
          "requestedDateTime": {
            "type": "string",
            "format": "date-time"
          },
          "isBusinessDay": {
            "type": "boolean"
          }
        },
        "additionalProperties": false,
        "description": "Whether or not a DateTimeOffset is a business DateTime"
      },
      "IUnitDefinitionDto": {
        "type": "object",
        "properties": {
          "schema": {
            "enum": [
              "NoUnits",
              "Basic",
              "Iso4217Currency"
            ],
            "type": "string",
            "description": "The available values are: NoUnits, Basic, Iso4217Currency"
          },
          "code": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "displayName": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "description": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "LabelValueSet": {
        "required": [
          "values"
        ],
        "type": "object",
        "properties": {
          "values": {
            "minItems": 1,
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "additionalProperties": false,
        "description": "The set of string labels in a multi-value property."
      },
      "LegalEntity": {
        "type": "object",
        "properties": {
          "displayName": {
            "type": "string",
            "description": "The display name of the Legal Entity",
            "nullable": true
          },
          "description": {
            "type": "string",
            "description": "The description of the Legal Entity",
            "nullable": true
          },
          "href": {
            "type": "string",
            "description": "The specific Uniform Resource Identifier (URI) for this resource at the requested effective and asAt datetime.",
            "format": "uri",
            "nullable": true
          },
          "lusidLegalEntityId": {
            "type": "string",
            "description": "The unique LUSID Legal Entity Identifier of the Legal Entity.",
            "nullable": true
          },
          "identifiers": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/Property"
            },
            "description": "Unique client-defined identifiers of the Legal Entity.",
            "nullable": true
          },
          "properties": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/Property"
            },
            "description": "A set of properties associated to the Legal Entity.",
            "nullable": true
          },
          "relationships": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Relationship"
            },
            "description": "A set of relationships associated to the Legal Entity.",
            "nullable": true
          },
          "counterpartyRiskInformation": {
            "$ref": "#/components/schemas/CounterpartyRiskInformation"
          },
          "version": {
            "$ref": "#/components/schemas/Version"
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "description": "Collection of links.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Representation of Legal Entity on LUSID API"
      },
      "LegDefinition": {
        "required": [
          "notionalExchangeType",
          "payReceive",
          "rateOrSpread",
          "stubType"
        ],
        "type": "object",
        "properties": {
          "conventionName": {
            "$ref": "#/components/schemas/FlowConventionName"
          },
          "conventions": {
            "$ref": "#/components/schemas/FlowConventions"
          },
          "indexConvention": {
            "$ref": "#/components/schemas/IndexConvention"
          },
          "indexConventionName": {
            "$ref": "#/components/schemas/FlowConventionName"
          },
          "notionalExchangeType": {
            "minLength": 1,
            "type": "string",
            "description": "what type of notional exchange does the leg have\r\n\r\nSupported string (enumeration) values are: [None, Initial, Final, Both]."
          },
          "payReceive": {
            "minLength": 1,
            "type": "string",
            "description": "Is the leg to be paid or received\r\n\r\nSupported string (enumeration) values are: [Pay, Receive]."
          },
          "rateOrSpread": {
            "type": "number",
            "description": "Is there either a fixed rate (non-zero) or spread to be paid over the value of the leg.",
            "format": "double"
          },
          "resetConvention": {
            "type": "string",
            "description": "Control how resets are generated relative to swap payment convention(s).\r\n\r\nSupported string (enumeration) values are: [InAdvance, InArrears].",
            "nullable": true
          },
          "stubType": {
            "minLength": 1,
            "type": "string",
            "description": "If a stub is required should it be at the front or back of the leg.\r\n\r\nSupported string (enumeration) values are: [None, ShortFront, ShortBack, LongBack, LongFront, Both]."
          },
          "compounding": {
            "$ref": "#/components/schemas/Compounding"
          },
          "amortisation": {
            "$ref": "#/components/schemas/StepSchedule"
          },
          "firstRegularPaymentDate": {
            "type": "string",
            "description": "Optional payment date of the first regular coupon.\r\nMust be greater than the StartDate.\r\nIf set, the regular coupon schedule will be built such that the first regular coupon\r\nwill end on this date. The start date of this coupon will be calculated as normal and\r\na stub coupon will be created from the StartDate to the start of the first regular coupon.",
            "format": "date-time",
            "nullable": true
          },
          "firstCouponType": {
            "type": "string",
            "description": "Optional coupon type setting for the first coupon, can be used with Stub coupons.\r\nIf set to \"ProRata\" (the default), the coupon year fraction is calculated as normal,\r\nhowever if set to \"Full\" the year fraction is overwritten with the standard year fraction\r\nfor a regular ful\" coupon. Note this does not use the day count convention but rather is defined\r\ndirectly from the tenor (i.e. a quarterly leg will be set to 0.25).\r\n\r\nSupported string (enumeration) values are: [ProRata, Full].",
            "nullable": true
          },
          "lastRegularPaymentDate": {
            "type": "string",
            "description": "Optional payment date of the last regular coupon.\r\nMust be less than the Maturity date.\r\nIf set, the regular coupon schedule will be built up to this date and the final\r\ncoupon will be a stub between this date and the Maturity date.",
            "format": "date-time",
            "nullable": true
          },
          "lastCouponType": {
            "type": "string",
            "description": "Optional coupon type setting for the last coupon, can be used with Stub coupons.\r\nIf set to \"ProRata\" (the default), the coupon year fraction is calculated as normal,\r\nhowever if set to \"Full\" the year fraction is overwritten with the standard year fraction\r\nfor a regular ful\" coupon. Note this does not use the day count convention but rather is defined\r\ndirectly from the tenor (i.e. a quarterly leg will be set to 0.25).\r\n\r\nSupported string (enumeration) values are: [ProRata, Full].",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Definition of the set of flow and index conventions along with other miscellaneous information required to generate an instrument leg."
      },
      "LevelStep": {
        "required": [
          "date",
          "quantity"
        ],
        "type": "object",
        "properties": {
          "date": {
            "type": "string",
            "description": "The date from which the level should apply.",
            "format": "date-time"
          },
          "quantity": {
            "type": "number",
            "description": "The quantity which is applied. This might be an absolute, percentage, fractional or other value.",
            "format": "double"
          }
        },
        "additionalProperties": false,
        "description": "Item which is stepped in level/quantity."
      },
      "LifeCycleEventLineage": {
        "type": "object",
        "properties": {
          "eventType": {
            "type": "string",
            "description": "The type of the event",
            "nullable": true
          },
          "instrumentType": {
            "type": "string",
            "description": "The instrument type of the instrument for the event.",
            "nullable": true
          },
          "instrumentId": {
            "type": "string",
            "description": "The LUID of the instrument for the event.",
            "nullable": true
          },
          "legId": {
            "type": "string",
            "description": "Leg id for the event.",
            "nullable": true
          },
          "sourceTransactionId": {
            "type": "string",
            "description": "The source transaction of the instrument for the event.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "The lineage of the event value"
      },
      "LifeCycleEventValue": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ResultValue"
          },
          {
            "required": [
              "resultValueType"
            ],
            "type": "object",
            "properties": {
              "effectiveDate": {
                "type": "string",
                "description": "The effective date of the event",
                "format": "date-time"
              },
              "eventValues": {
                "$ref": "#/components/schemas/ResultValueDictionary"
              },
              "eventLineage": {
                "$ref": "#/components/schemas/LifeCycleEventLineage"
              },
              "resultValueType": {
                "enum": [
                  "ResultValue",
                  "ResultValueDictionary",
                  "ResultValue0D",
                  "ResultValueDecimal",
                  "ResultValueInt",
                  "ResultValueString",
                  "ResultValueBool",
                  "ResultValueCurrency",
                  "CashFlowValue",
                  "CashFlowValueSet",
                  "ResultValueLifeCycleEventValue",
                  "ResultValueDateTimeOffset"
                ],
                "type": "string",
                "description": "The available values are: ResultValue, ResultValueDictionary, ResultValue0D, ResultValueDecimal, ResultValueInt, ResultValueString, ResultValueBool, ResultValueCurrency, CashFlowValue, CashFlowValueSet, ResultValueLifeCycleEventValue, ResultValueDateTimeOffset"
              }
            }
          }
        ],
        "description": "The instrument life cycle event result value type"
      },
      "Link": {
        "required": [
          "href",
          "method",
          "relation"
        ],
        "type": "object",
        "properties": {
          "relation": {
            "type": "string",
            "description": "Relation of link."
          },
          "href": {
            "type": "string",
            "description": "Href of link.",
            "format": "uri"
          },
          "description": {
            "type": "string",
            "description": "Description of link.",
            "nullable": true
          },
          "method": {
            "type": "string",
            "description": "Http method of link."
          }
        },
        "additionalProperties": false,
        "description": "Link class."
      },
      "ListAggregationReconciliation": {
        "type": "object",
        "properties": {
          "left": {
            "$ref": "#/components/schemas/ListAggregationResponse"
          },
          "right": {
            "$ref": "#/components/schemas/ListAggregationResponse"
          },
          "diff": {
            "type": "array",
            "items": {
              "type": "object",
              "additionalProperties": {
                "type": "object",
                "additionalProperties": false
              }
            },
            "nullable": true
          },
          "dataSchema": {
            "$ref": "#/components/schemas/ResultDataSchema"
          }
        },
        "additionalProperties": false
      },
      "ListAggregationResponse": {
        "type": "object",
        "properties": {
          "aggregationEffectiveAt": {
            "type": "string",
            "format": "date-time"
          },
          "aggregationAsAt": {
            "type": "string",
            "format": "date-time"
          },
          "href": {
            "type": "string",
            "format": "uri",
            "nullable": true
          },
          "data": {
            "type": "array",
            "items": {
              "type": "object",
              "additionalProperties": {
                "type": "object",
                "additionalProperties": false
              }
            },
            "nullable": true
          },
          "aggregationCurrency": {
            "type": "string",
            "nullable": true
          },
          "dataSchema": {
            "$ref": "#/components/schemas/ResultDataSchema"
          },
          "aggregationFailures": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AggregationMeasureFailureDetail"
            },
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "description": "Collection of links.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "LoanPeriod": {
        "required": [
          "interestAmount",
          "notional",
          "paymentDate"
        ],
        "type": "object",
        "properties": {
          "paymentDate": {
            "type": "string",
            "format": "date-time"
          },
          "notional": {
            "type": "number",
            "format": "double"
          },
          "interestAmount": {
            "type": "number",
            "format": "double"
          }
        },
        "additionalProperties": false
      },
      "LusidInstrument": {
        "required": [
          "instrumentType"
        ],
        "type": "object",
        "properties": {
          "instrumentType": {
            "enum": [
              "QuotedSecurity",
              "InterestRateSwap",
              "FxForward",
              "Future",
              "ExoticInstrument",
              "FxOption",
              "CreditDefaultSwap",
              "InterestRateSwaption",
              "Bond",
              "EquityOption",
              "FixedLeg",
              "FloatingLeg",
              "BespokeCashFlowsLeg",
              "Unknown",
              "TermDeposit",
              "ContractForDifference",
              "EquitySwap",
              "CashPerpetual",
              "CapFloor",
              "CashSettled",
              "CdsIndex",
              "Basket",
              "FundingLeg",
              "FxSwap",
              "ForwardRateAgreement",
              "SimpleInstrument",
              "Repo",
              "Equity",
              "ExchangeTradedOption",
              "ReferenceInstrument",
              "ComplexBond",
              "InflationLinkedBond",
              "InflationSwap",
              "SimpleCashFlowLoan"
            ],
            "type": "string",
            "description": "The available values are: QuotedSecurity, InterestRateSwap, FxForward, Future, ExoticInstrument, FxOption, CreditDefaultSwap, InterestRateSwaption, Bond, EquityOption, FixedLeg, FloatingLeg, BespokeCashFlowsLeg, Unknown, TermDeposit, ContractForDifference, EquitySwap, CashPerpetual, CapFloor, CashSettled, CdsIndex, Basket, FundingLeg, FxSwap, ForwardRateAgreement, SimpleInstrument, Repo, Equity, ExchangeTradedOption, ReferenceInstrument, ComplexBond, InflationLinkedBond, InflationSwap, SimpleCashFlowLoan"
          }
        },
        "additionalProperties": false,
        "description": "Base class in the hierarchy for representing the full economic definition of instruments in LUSID.\r\nThese definitions are used to provide instrument analytics such as PV, accrual, cash flows, and risk.\r\nThis base class should not be directly instantiated; each supported InstrumentType has a corresponding inherited class.",
        "discriminator": {
          "propertyName": "instrumentType"
        }
      },
      "LusidProblemDetails": {
        "required": [
          "code",
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "minLength": 1,
            "type": "string",
            "description": "The name of the error"
          },
          "errorDetails": {
            "type": "array",
            "items": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            "description": "Any additional informational information available about the nature and detail of the problem",
            "nullable": true
          },
          "code": {
            "type": "integer",
            "description": "Get the error code of the response",
            "format": "int32"
          },
          "type": {
            "type": "string",
            "nullable": true
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "status": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "detail": {
            "type": "string",
            "nullable": true
          },
          "instance": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "A description of a problem that has arisen during the processing of a request."
      },
      "LusidUniqueId": {
        "required": [
          "type",
          "value"
        ],
        "type": "object",
        "properties": {
          "type": {
            "minLength": 1,
            "type": "string",
            "description": "The type for the LUSID unique id, this will depend on the type of entity found, for instance 'Instrument' would have a value of 'LusidInstrumentId'"
          },
          "value": {
            "minLength": 1,
            "type": "string",
            "description": "The value for the LUSID unique id"
          }
        },
        "additionalProperties": false
      },
      "LusidValidationProblemDetails": {
        "required": [
          "code",
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "minLength": 1,
            "type": "string",
            "description": "The name of the error"
          },
          "errorDetails": {
            "type": "array",
            "items": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            "description": "Any additional informational information available about the nature and detail of the problem",
            "nullable": true
          },
          "code": {
            "type": "integer",
            "description": "Get the error code of the response",
            "format": "int32"
          },
          "errors": {
            "type": "object",
            "additionalProperties": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          "type": {
            "type": "string",
            "nullable": true
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "status": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "detail": {
            "type": "string",
            "nullable": true
          },
          "instance": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "A description of a problem that has arisen whilst validating a request"
      },
      "MappedString": {
        "type": "object",
        "properties": {
          "leftValue": {
            "type": "string",
            "nullable": true
          },
          "rightValue": {
            "type": "string",
            "nullable": true
          },
          "mappingDirection": {
            "type": "string",
            "nullable": true
          },
          "isCaseSensitive": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "Mapping": {
        "required": [
          "code",
          "name",
          "reconciliationType",
          "scope"
        ],
        "type": "object",
        "properties": {
          "scope": {
            "maxLength": 64,
            "minLength": 1,
            "pattern": "^[a-zA-Z0-9\\-_]+$",
            "type": "string",
            "description": "The scope for this mapping."
          },
          "code": {
            "maxLength": 64,
            "minLength": 1,
            "pattern": "^[a-zA-Z0-9\\-_]+$",
            "type": "string",
            "description": "The code for this mapping."
          },
          "name": {
            "minLength": 1,
            "pattern": "^[\\s\\S]*$",
            "type": "string",
            "description": "The mapping name"
          },
          "reconciliationType": {
            "minLength": 1,
            "type": "string",
            "description": "What type of reconciliation this mapping is for"
          },
          "rules": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MappingRule"
            },
            "description": "The rules in this mapping, keyed by the left field/property name",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Defines the rule set to be used to determine if entries should be considered as a match."
      },
      "MappingRule": {
        "type": "object",
        "properties": {
          "left": {
            "type": "string",
            "description": "The name of the field/property in the left resource (e.g. a transaction)",
            "nullable": true
          },
          "right": {
            "type": "string",
            "description": "The name of the field/property in the right resource (e.g. a transaction)",
            "nullable": true
          },
          "comparisonType": {
            "type": "string",
            "description": "The type of comparison to be performed",
            "nullable": true
          },
          "comparisonValue": {
            "type": "number",
            "description": "The (optional) value used with Finbourne.WebApi.Interface.Dto.Mappings.MappingRule.ComparisonType",
            "format": "double",
            "nullable": true
          },
          "weight": {
            "type": "number",
            "description": "A factor used to influence the importance of this item.",
            "format": "double"
          },
          "mappedStrings": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MappedString"
            },
            "description": "The (optional) value used to map string values.",
            "nullable": true
          },
          "isCaseSensitive": {
            "type": "boolean",
            "description": "Should string comparisons take case into account, defaults to `false`."
          }
        },
        "additionalProperties": false,
        "description": "An individual mapping rule, for mapping between a left and right field/property."
      },
      "MarketContext": {
        "type": "object",
        "properties": {
          "marketRules": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MarketDataKeyRule"
            },
            "description": "The set of rules that define how to resolve particular use cases. These can be relatively general or specific in nature.\r\nNominally any number are possible and will be processed in order where applicable. However, there is evidently a potential\r\nfor increased computational cost where many rules must be applied to resolve data. Ensuring that portfolios are structured in\r\nsuch a way as to reduce the number of rules required is therefore sensible.",
            "nullable": true
          },
          "suppliers": {
            "type": "object",
            "properties": {
              "Commodity": {
                "type": "string"
              },
              "Credit": {
                "type": "string"
              },
              "Equity": {
                "type": "string"
              },
              "Fx": {
                "type": "string"
              },
              "Rates": {
                "type": "string"
              }
            },
            "additionalProperties": false,
            "description": "It is possible to control which supplier is used for a given asset class.\r\nThis field is deprecated in favour of market data rules, which subsumes its functionality.",
            "nullable": true
          },
          "options": {
            "$ref": "#/components/schemas/MarketOptions"
          },
          "specificRules": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MarketDataSpecificRule"
            },
            "description": "Extends market data key rules to be able to catch dependencies depending on where the dependency comes from, as opposed to what the dependency is asking for.\r\nUsing two specific rules, one could instruct rates curves requested by bonds to be retrieved from a different scope than rates curves requested by swaps.\r\nWARNING: The use of specific rules impacts performance. Where possible, one should use MarketDataKeyRules only.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Market context node. This defines how LUSID processes parts of a request that require resolution of market data such as instrument prices or\r\nFx rates. It controls where the data is loaded from and which sources take precedence."
      },
      "MarketDataKeyRule": {
        "required": [
          "dataScope",
          "key",
          "quoteType",
          "supplier"
        ],
        "type": "object",
        "properties": {
          "key": {
            "maxLength": 128,
            "minLength": 0,
            "type": "string",
            "description": "A dot-separated string that defines a pattern for matching market data dependencies.\r\nThe form of the string depends on the type of the dependency; see below for basic types and the Knowledge Base for further info.\r\nQuote lookup: \"Quote.{CodeType}.*\" e.g. \"Quote.RIC.*\" refers to 'any RIC quote'\r\nFx rates: \"Fx.CurrencyPair.*\", which refers to 'any FX rate'\r\nDiscounting curves: \"Rates.{Currency}.{Currency}OIS e.g. \"Rates.USD.USDOIS\" refers to the OIS USD discounting curve\r\n            \r\nFor non-fx and non-quote rules, trailing parameters can be replaced by the wildcard character '*'.\r\ne.g. \"Rates.*.*\" matches any dependency on a discounting curve."
          },
          "supplier": {
            "maxLength": 32,
            "minLength": 0,
            "type": "string",
            "description": "The market data supplier (where the data comes from)"
          },
          "dataScope": {
            "maxLength": 256,
            "minLength": 1,
            "pattern": "^[a-zA-Z0-9\\-_]+$",
            "type": "string",
            "description": "The scope in which the data should be found when using this rule."
          },
          "quoteType": {
            "enum": [
              "Price",
              "Spread",
              "Rate",
              "LogNormalVol",
              "NormalVol",
              "ParSpread",
              "IsdaSpread",
              "Upfront",
              "Index",
              "Ratio",
              "Delta"
            ],
            "type": "string",
            "description": "The available values are: Price, Spread, Rate, LogNormalVol, NormalVol, ParSpread, IsdaSpread, Upfront, Index, Ratio, Delta"
          },
          "field": {
            "maxLength": 32,
            "minLength": 0,
            "type": "string",
            "description": "The conceptual qualification for the field, typically 'bid', 'mid' (default), or 'ask', but can also be 'open', 'close', etc.\r\nWhen resolving quotes from LUSID's database, only quotes whose Field is identical to the Field specified here\r\nwill be accepted as market data.\r\nWhen resolving data from an external supplier, the Field must be one of a defined set for the given supplier.\r\n            \r\nNote: Applies to the retrieval of quotes only. Has no impact on the resolution of complex market data.",
            "nullable": true
          },
          "quoteInterval": {
            "maxLength": 16,
            "minLength": 0,
            "type": "string",
            "description": "Shorthand for the time interval used to select market data. This must be a dot-separated string\r\n            nominating a start and end date, for example '5D.0D' to look back 5 days from today (0 days ago). The syntax\r\n            is <i>int</i><i>char</i>.<i>int</i><i>char</i>, where <i>char</i> is one of\r\n            D(ay), Bd(business day), W(eek), M(onth) or Y(ear).\r\n            Business days are calculated using the calendars specified on the Valuation Request.\r\n            If no calendar is provided in the request, then it will default to only skipping weekends.\r\n            For example, if the valuation date is a Monday, then a quote interval of \"1Bd\" would behave as \"3D\",\r\n            looking back to the Friday. Data with effectiveAt on the weekend will still be found in that window.",
            "nullable": true
          },
          "asAt": {
            "type": "string",
            "description": "The AsAt predicate specification.",
            "format": "date-time",
            "nullable": true
          },
          "priceSource": {
            "maxLength": 256,
            "minLength": 0,
            "type": "string",
            "description": "The source of the quote. For a given provider/supplier of market data there may be an additional qualifier, e.g. the exchange or bank that provided the quote",
            "nullable": true
          },
          "mask": {
            "maxLength": 256,
            "minLength": 0,
            "type": "string",
            "description": "Allows for partial or complete override of the market asset resolved for a dependency\r\nEither a named override or a dot separated string (A.B.C.D.*).\r\ne.g. for Rates curve 'EUR.*' will replace the resolve MarketAsset 'GBP/12M', 'GBP/3M' with the EUR equivalent, if there\r\nare no wildcards in the mask, the mask is taken as the MarketAsset for any dependency matching the rule.",
            "nullable": true
          },
          "sourceSystem": {
            "maxLength": 256,
            "minLength": 0,
            "type": "string",
            "description": "If set, this parameter will seek an external source of market data.\r\nOptional and, if omitted, will default to \"Lusid\".\r\nThis means that data will be retrieved from the LUSID Quote Store and LUSID Complex Market Data Store.\r\n            \r\nThis can be set to \"MarketDataOverrides\" if Supplier is set to \"Client\".",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "When performing analytics, instruments and models have dependencies on market data.\r\nA market data key rule essentially tells lusid to \"resolve dependencies matching the pattern 'X' using data of the form 'Y'\".\r\nThe parameter 'X' is defined by the key of the key rule, and might specify \"all USD rates curves\" or \"all RIC-based prices\".\r\nThe parameter 'Y' is defined by the remaining fields of the key rule, and allows the user to configure things such as\r\nwhere to look for data, what sort of data should be looked for (e.g. bid/mid/ask), and how old the data is allowed to be."
      },
      "MarketDataOptions": {
        "required": [
          "marketDataOptionsType"
        ],
        "type": "object",
        "properties": {
          "marketDataOptionsType": {
            "enum": [
              "CurveOptions"
            ],
            "type": "string",
            "description": "The available values are: CurveOptions"
          }
        },
        "additionalProperties": false,
        "description": "Base class for representing market data options in LUSID.\r\nAbstractly, these are any options that one should be able to specify for ComplexMarketData entities.\r\nFor example, CurveOptions allows one to decide how the data provided in a discountFactorCurve is interpolated.\r\nThis base class should not be directly instantiated;\r\neach supported MarketDataOptionsType has a corresponding inherited class.",
        "discriminator": {
          "propertyName": "marketDataOptionsType"
        }
      },
      "MarketDataOverrides": {
        "type": "object",
        "properties": {
          "complexMarketData": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EconomicDependencyWithComplexMarketData"
            },
            "description": "A list of EconomicDependency paired with quote data satisfying that economic dependency",
            "nullable": true
          },
          "quotes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EconomicDependencyWithQuote"
            },
            "description": "A list of EconomicDependency paired with a ComplexMarketData satisfying that economic dependency",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Class which holds market data overrides to be used in valuation"
      },
      "MarketDataSpecificRule": {
        "required": [
          "dataScope",
          "dependencySourceFilter",
          "field",
          "key",
          "quoteType",
          "supplier"
        ],
        "type": "object",
        "properties": {
          "key": {
            "maxLength": 128,
            "minLength": 0,
            "type": "string",
            "description": "The market data key pattern which this is a rule for. A dot separated string (A.B.C.D.*)"
          },
          "supplier": {
            "maxLength": 32,
            "minLength": 0,
            "type": "string",
            "description": "The market data supplier (where the data comes from)"
          },
          "dataScope": {
            "maxLength": 256,
            "minLength": 1,
            "pattern": "^[a-zA-Z0-9\\-_]+$",
            "type": "string",
            "description": "The scope in which the data should be found when using this rule."
          },
          "quoteType": {
            "enum": [
              "Price",
              "Spread",
              "Rate",
              "LogNormalVol",
              "NormalVol",
              "ParSpread",
              "IsdaSpread",
              "Upfront",
              "Index",
              "Ratio",
              "Delta"
            ],
            "type": "string",
            "description": "The available values are: Price, Spread, Rate, LogNormalVol, NormalVol, ParSpread, IsdaSpread, Upfront, Index, Ratio, Delta"
          },
          "field": {
            "maxLength": 32,
            "minLength": 0,
            "type": "string",
            "description": "The conceptual qualification for the field, such as bid, mid, or ask.\r\nThe field must be one of a defined set for the given supplier, in the same way as it\r\nis for the Finbourne.WebApi.Interface.Dto.Quotes.QuoteSeriesId"
          },
          "quoteInterval": {
            "maxLength": 16,
            "minLength": 0,
            "type": "string",
            "description": "Shorthand for the time interval used to select market data. This must be a dot-separated string\r\n            nominating a start and end date, for example '5D.0D' to look back 5 days from today (0 days ago). The syntax\r\n            is <i>int</i><i>char</i>.<i>int</i><i>char</i>, where <i>char</i> is one of D(ay), W(eek), M(onth) or Y(ear).",
            "nullable": true
          },
          "asAt": {
            "type": "string",
            "description": "The AsAt predicate specification.",
            "format": "date-time",
            "nullable": true
          },
          "priceSource": {
            "maxLength": 256,
            "minLength": 0,
            "type": "string",
            "description": "The source of the quote. For a given provider/supplier of market data there may be an additional qualifier, e.g. the exchange or bank that provided the quote",
            "nullable": true
          },
          "mask": {
            "maxLength": 256,
            "minLength": 0,
            "type": "string",
            "description": "Allows for partial or complete override of the market asset resolved for a dependency\r\nEither a named override or a dot separated string (A.B.C.D.*).\r\ne.g. for Rates curve 'EUR.*' will replace the resolve MarketAsset 'GBP/12M', 'GBP/3M' with the EUR equivalent, if there\r\nare no wildcards in the mask, the mask is taken as the MarketAsset for any dependency matching the rule.",
            "nullable": true
          },
          "dependencySourceFilter": {
            "$ref": "#/components/schemas/DependencySourceFilter"
          },
          "sourceSystem": {
            "maxLength": 256,
            "minLength": 0,
            "type": "string",
            "description": "Determines from where LUSID should attempt to find the data. Optional and, if omitted, will default to \"Lusid\".\r\nThis means that data will be retrieved from the Quotes store and the ComplexMarketData store.\r\nThese can be populated using the Quotes and ComplexMarketData endpoints.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Extends market data key rules to be able to catch dependencies depending on where the dependency comes from, as opposed to what the dependency is asking for.\r\nFor example, a market data rule might instruct all rates curves to be retrieved from a particular scope.\r\nThis class gives the ability to set different behaviour depending on what is requesting the rates curve.\r\nUsing two specific rules, one could instruct rates curves requested by bonds to be retrieved from a different scope than rates curves requested by swaps."
      },
      "MarketOptions": {
        "required": [
          "defaultScope"
        ],
        "type": "object",
        "properties": {
          "defaultSupplier": {
            "maxLength": 32,
            "minLength": 0,
            "type": "string",
            "description": "The default supplier of data. This controls which 'dialect' is used to find particular market data. e.g. one supplier might address data by RIC, another by PermId",
            "nullable": true
          },
          "defaultInstrumentCodeType": {
            "maxLength": 32,
            "minLength": 0,
            "type": "string",
            "description": "When instrument quotes are searched for, what identifier should be used by default",
            "nullable": true
          },
          "defaultScope": {
            "maxLength": 256,
            "minLength": 1,
            "pattern": "^[a-zA-Z0-9\\-_]+$",
            "type": "string",
            "description": "For default rules, which scope should data be searched for in"
          },
          "attemptToInferMissingFx": {
            "type": "boolean",
            "description": "if true will calculate a missing Fx pair (e.g. THBJPY) from the inverse JPYTHB or from standardised pairs against USD, e.g. THBUSD and JPYUSD"
          },
          "calendarScope": {
            "maxLength": 256,
            "minLength": 1,
            "pattern": "^[a-zA-Z0-9\\-_]+$",
            "type": "string",
            "description": "The scope in which holiday calendars stored",
            "nullable": true
          },
          "conventionScope": {
            "maxLength": 256,
            "minLength": 1,
            "pattern": "^[a-zA-Z0-9\\-_]+$",
            "type": "string",
            "description": "The scope in which conventions stored",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "The set of options that control miscellaneous and default market resolution behaviour.\r\nThese are aimed at a 'crude' level of control for those who do not wish to fine tune the way that data is resolved.\r\nFor clients who wish to simply match instruments to prices this is quite possibly sufficient. For those wishing to control market data sources\r\naccording to requirements based on accuracy or timeliness it is not. In more advanced cases the options should largely be ignored and rules specified\r\nper source. Be aware that where no specified rule matches the final fallback is on to the logic implied here."
      },
      "MarketQuote": {
        "required": [
          "quoteType",
          "value"
        ],
        "type": "object",
        "properties": {
          "quoteType": {
            "enum": [
              "Price",
              "Spread",
              "Rate",
              "LogNormalVol",
              "NormalVol",
              "ParSpread",
              "IsdaSpread",
              "Upfront",
              "Index",
              "Ratio",
              "Delta"
            ],
            "type": "string",
            "description": "The available values are: Price, Spread, Rate, LogNormalVol, NormalVol, ParSpread, IsdaSpread, Upfront, Index, Ratio, Delta"
          },
          "value": {
            "type": "number",
            "description": "Numeric value of the quote",
            "format": "double"
          }
        },
        "additionalProperties": false,
        "description": "The market quote for an observable which will be used to calibrate the market data,\r\nincluding the format of the quote.\r\ne.g. a volatility quote for a specific strike and expiry\r\nthe par rate of a swap\r\n            \r\nThis is a slimmed down version of a full Quote that can be stored in our QuoteStore to\r\nremove lineage, price source etc. for ease of use when creating complex market data."
      },
      "MetricValue": {
        "type": "object",
        "properties": {
          "value": {
            "type": "number",
            "description": "The numerical value of the property.",
            "format": "double"
          },
          "unit": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ModelOptions": {
        "required": [
          "modelOptionsType"
        ],
        "type": "object",
        "properties": {
          "modelOptionsType": {
            "enum": [
              "Invalid",
              "OpaqueModelOptions",
              "EmptyModelOptions",
              "IndexModelOptions",
              "FxForwardModelOptions",
              "FundingLegModelOptions",
              "EquityModelOptions"
            ],
            "type": "string",
            "description": "The available values are: Invalid, OpaqueModelOptions, EmptyModelOptions, IndexModelOptions, FxForwardModelOptions, FundingLegModelOptions, EquityModelOptions"
          }
        },
        "additionalProperties": false,
        "description": "Base class for representing model options in LUSID, which provide config for instrument analytics.\r\nThis base class should not be directly instantiated; each supported ModelOptionsType has a corresponding inherited class.",
        "discriminator": {
          "propertyName": "modelOptionsType"
        }
      },
      "ModelSelection": {
        "required": [
          "library",
          "model"
        ],
        "type": "object",
        "properties": {
          "library": {
            "enum": [
              "Lusid",
              "RefinitivQps",
              "RefinitivTracsWeb",
              "VolMaster",
              "IsdaCds",
              "YieldBook",
              "LusidCalc"
            ],
            "type": "string",
            "description": "The available values are: Lusid, RefinitivQps, RefinitivTracsWeb, VolMaster, IsdaCds, YieldBook, LusidCalc"
          },
          "model": {
            "enum": [
              "SimpleStatic",
              "Discounting",
              "VendorDefault",
              "BlackScholes",
              "ConstantTimeValueOfMoney",
              "Bachelier",
              "ForwardWithPoints",
              "ForwardWithPointsUndiscounted",
              "ForwardSpecifiedRate",
              "ForwardSpecifiedRateUndiscounted",
              "IndexNav",
              "IndexPrice",
              "InlinedIndex",
              "ForwardFromCurve",
              "ForwardFromCurveUndiscounted",
              "BlackScholesDigital",
              "BjerksundStensland1993"
            ],
            "type": "string",
            "description": "The available values are: SimpleStatic, Discounting, VendorDefault, BlackScholes, ConstantTimeValueOfMoney, Bachelier, ForwardWithPoints, ForwardWithPointsUndiscounted, ForwardSpecifiedRate, ForwardSpecifiedRateUndiscounted, IndexNav, IndexPrice, InlinedIndex, ForwardFromCurve, ForwardFromCurveUndiscounted, BlackScholesDigital, BjerksundStensland1993"
          }
        },
        "additionalProperties": false,
        "description": "The combination of a library to use and a model in that library that defines which pricing code will evaluate instruments\r\nhaving a particular type/class. This allows us to control the model type and library for a given instrument."
      },
      "NextValueInSequenceResponse": {
        "required": [
          "values"
        ],
        "type": "object",
        "properties": {
          "values": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The next set of values for the specified Sequence."
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "description": "Collection of links.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "OpaqueDependency": {
        "allOf": [
          {
            "$ref": "#/components/schemas/EconomicDependency"
          },
          {
            "required": [
              "dependencyType"
            ],
            "type": "object",
            "properties": {
              "dependencyType": {
                "enum": [
                  "OpaqueDependency",
                  "CashDependency",
                  "DiscountingDependency",
                  "EquityCurveDependency",
                  "EquityVolDependency",
                  "FxDependency",
                  "FxForwardsDependency",
                  "FxVolDependency",
                  "IndexProjectionDependency",
                  "IrVolDependency",
                  "QuoteDependency",
                  "Vendor"
                ],
                "type": "string",
                "description": "The available values are: OpaqueDependency, CashDependency, DiscountingDependency, EquityCurveDependency, EquityVolDependency, FxDependency, FxForwardsDependency, FxVolDependency, IndexProjectionDependency, IrVolDependency, QuoteDependency, Vendor"
              }
            }
          }
        ],
        "description": "Represents a dependency that could not be understood as an externally exposed dependency.\r\nIf this is an unexpected dependency, then please contact support."
      },
      "OpaqueMarketData": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ComplexMarketData"
          },
          {
            "required": [
              "document",
              "format",
              "marketDataType",
              "name"
            ],
            "type": "object",
            "properties": {
              "document": {
                "minLength": 1,
                "type": "string",
                "description": "The document as a string."
              },
              "format": {
                "minLength": 1,
                "type": "string",
                "description": "What format is the document stored in, e.g. Xml.\r\nSupported string (enumeration) values are: [Unknown, Xml, Json, Csv]."
              },
              "name": {
                "minLength": 1,
                "type": "string",
                "description": "Internal name of document. This is not used for search, it is simply a designator that helps identify the document\r\nand could be anything (filename, ftp address or similar)"
              },
              "lineage": {
                "maxLength": 1024,
                "minLength": 0,
                "type": "string",
                "description": "Description of the complex market data's lineage e.g. 'FundAccountant_GreenQuality'.",
                "nullable": true
              },
              "marketDataType": {
                "enum": [
                  "DiscountFactorCurveData",
                  "EquityVolSurfaceData",
                  "FxVolSurfaceData",
                  "IrVolCubeData",
                  "OpaqueMarketData",
                  "YieldCurveData",
                  "FxForwardCurveData",
                  "FxForwardPipsCurveData",
                  "FxForwardTenorCurveData",
                  "FxForwardTenorPipsCurveData",
                  "FxForwardCurveByQuoteReference",
                  "CreditSpreadCurveData",
                  "EquityCurveByPricesData"
                ],
                "type": "string",
                "description": "The available values are: DiscountFactorCurveData, EquityVolSurfaceData, FxVolSurfaceData, IrVolCubeData, OpaqueMarketData, YieldCurveData, FxForwardCurveData, FxForwardPipsCurveData, FxForwardTenorCurveData, FxForwardTenorPipsCurveData, FxForwardCurveByQuoteReference, CreditSpreadCurveData, EquityCurveByPricesData"
              }
            }
          }
        ],
        "description": "A representation of an un-built piece of complex market data, to allow for passing through\r\nto the vendor library for building.\r\nThe market data will usually be in some standard form such as XML or Json, representing a curve or surface."
      },
      "OpaqueModelOptions": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ModelOptions"
          },
          {
            "required": [
              "data",
              "modelOptionsType"
            ],
            "type": "object",
            "properties": {
              "data": {
                "type": "object",
                "additionalProperties": {
                  "type": "object",
                  "additionalProperties": false
                }
              },
              "modelOptionsType": {
                "enum": [
                  "Invalid",
                  "OpaqueModelOptions",
                  "EmptyModelOptions",
                  "IndexModelOptions",
                  "FxForwardModelOptions",
                  "FundingLegModelOptions",
                  "EquityModelOptions"
                ],
                "type": "string",
                "description": "The available values are: Invalid, OpaqueModelOptions, EmptyModelOptions, IndexModelOptions, FxForwardModelOptions, FundingLegModelOptions, EquityModelOptions"
              }
            }
          }
        ]
      },
      "OpenEvent": {
        "allOf": [
          {
            "$ref": "#/components/schemas/InstrumentEvent"
          },
          {
            "required": [
              "instrumentEventType"
            ],
            "type": "object",
            "properties": {
              "anchorDate": {
                "type": "string",
                "description": "The date on the which the instrument was opened.",
                "format": "date-time"
              },
              "instrumentEventType": {
                "enum": [
                  "TransitionEvent",
                  "InformationalEvent",
                  "OpenEvent",
                  "CloseEvent",
                  "StockSplitEvent",
                  "BondDefaultEvent",
                  "CashDividendEvent",
                  "AmortisationEvent",
                  "CashFlowEvent",
                  "ExerciseEvent",
                  "ResetEvent",
                  "TriggerEvent",
                  "RawVendorEvent",
                  "InformationalErrorEvent"
                ],
                "type": "string",
                "description": "The Type of Event. The available values are: TransitionEvent, InformationalEvent, OpenEvent, CloseEvent, StockSplitEvent, BondDefaultEvent, CashDividendEvent, AmortisationEvent, CashFlowEvent, ExerciseEvent, ResetEvent, TriggerEvent, RawVendorEvent, InformationalErrorEvent"
              }
            }
          }
        ],
        "description": "The opening of an instrument."
      },
      "Operation": {
        "required": [
          "op",
          "path"
        ],
        "type": "object",
        "properties": {
          "value": {
            "nullable": true
          },
          "path": {
            "maxLength": 6000,
            "minLength": 0,
            "type": "string"
          },
          "op": {
            "minLength": 1,
            "type": "string"
          },
          "from": {
            "maxLength": 6000,
            "minLength": 0,
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Order": {
        "required": [
          "id",
          "instrumentIdentifiers",
          "lusidInstrumentId",
          "quantity",
          "side"
        ],
        "type": "object",
        "properties": {
          "properties": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/PerpetualProperty"
            },
            "description": "Client-defined properties associated with this order.",
            "nullable": true
          },
          "version": {
            "$ref": "#/components/schemas/Version"
          },
          "instrumentIdentifiers": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "The instrument ordered."
          },
          "quantity": {
            "type": "number",
            "description": "The quantity of given instrument ordered.",
            "format": "double"
          },
          "side": {
            "minLength": 1,
            "type": "string",
            "description": "The client's representation of the order's side (buy, sell, short, etc)"
          },
          "orderBookId": {
            "$ref": "#/components/schemas/ResourceId"
          },
          "portfolioId": {
            "$ref": "#/components/schemas/ResourceId"
          },
          "id": {
            "$ref": "#/components/schemas/ResourceId"
          },
          "instrumentScope": {
            "type": "string",
            "description": "The scope in which the instrument lies",
            "nullable": true
          },
          "lusidInstrumentId": {
            "minLength": 1,
            "type": "string",
            "description": "The LUSID instrument id for the instrument ordered."
          },
          "state": {
            "type": "string",
            "description": "The order's state (examples: New, PartiallyFilled, ...)",
            "nullable": true
          },
          "type": {
            "type": "string",
            "description": "The order's type (examples: Limit, Market, ...)",
            "nullable": true
          },
          "timeInForce": {
            "type": "string",
            "description": "The order's time in force (examples: Day, GoodTilCancel, ...)",
            "nullable": true
          },
          "date": {
            "type": "string",
            "description": "The date on which the order was made",
            "format": "date-time"
          },
          "price": {
            "$ref": "#/components/schemas/CurrencyAndAmount"
          },
          "limitPrice": {
            "$ref": "#/components/schemas/CurrencyAndAmount"
          },
          "stopPrice": {
            "$ref": "#/components/schemas/CurrencyAndAmount"
          },
          "orderInstructionId": {
            "$ref": "#/components/schemas/ResourceId"
          },
          "packageId": {
            "$ref": "#/components/schemas/ResourceId"
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "description": "Collection of links.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "An Order for a certain quantity of a specific instrument"
      },
      "OrderBySpec": {
        "required": [
          "key",
          "sortOrder"
        ],
        "type": "object",
        "properties": {
          "key": {
            "type": "string",
            "description": "The key that uniquely identifies a queryable address in Lusid."
          },
          "sortOrder": {
            "enum": [
              "Ascending",
              "Descending"
            ],
            "type": "string",
            "description": "The available values are: Ascending, Descending"
          }
        },
        "additionalProperties": false
      },
      "OrderRequest": {
        "required": [
          "id",
          "instrumentIdentifiers",
          "quantity",
          "side"
        ],
        "type": "object",
        "properties": {
          "properties": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/PerpetualProperty"
            },
            "description": "Client-defined properties associated with this order.",
            "nullable": true
          },
          "instrumentIdentifiers": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "The instrument ordered."
          },
          "quantity": {
            "type": "number",
            "description": "The quantity of given instrument ordered.",
            "format": "double"
          },
          "side": {
            "minLength": 1,
            "type": "string",
            "description": "The client's representation of the order's side (buy, sell, short, etc)"
          },
          "orderBookId": {
            "$ref": "#/components/schemas/ResourceId"
          },
          "portfolioId": {
            "$ref": "#/components/schemas/ResourceId"
          },
          "id": {
            "$ref": "#/components/schemas/ResourceId"
          },
          "state": {
            "type": "string",
            "description": "The order's state (examples: New, PartiallyFilled, ...)",
            "nullable": true
          },
          "type": {
            "type": "string",
            "description": "The order's type (examples: Limit, Market, ...)",
            "nullable": true
          },
          "timeInForce": {
            "type": "string",
            "description": "The order's time in force (examples: Day, GoodTilCancel, ...)",
            "nullable": true
          },
          "date": {
            "type": "string",
            "description": "The date on which the order was made",
            "format": "date-time"
          },
          "price": {
            "$ref": "#/components/schemas/CurrencyAndAmount"
          },
          "limitPrice": {
            "$ref": "#/components/schemas/CurrencyAndAmount"
          },
          "stopPrice": {
            "$ref": "#/components/schemas/CurrencyAndAmount"
          },
          "orderInstruction": {
            "$ref": "#/components/schemas/ResourceId"
          },
          "package": {
            "$ref": "#/components/schemas/ResourceId"
          }
        },
        "additionalProperties": false,
        "description": "A request to create or update an Order."
      },
      "OrderSetRequest": {
        "type": "object",
        "properties": {
          "orderRequests": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OrderRequest"
            },
            "description": "A collection of OrderRequests.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "A request to create or update multiple Orders."
      },
      "OtcConfirmation": {
        "type": "object",
        "properties": {
          "counterpartyAgreementId": {
            "$ref": "#/components/schemas/ResourceId"
          }
        },
        "additionalProperties": false,
        "description": "For the storage of any information pertinent to the confirmation of an OTC trade. e.g the Counterparty Agreement Code"
      },
      "OutputTransaction": {
        "required": [
          "instrumentUid",
          "settlementDate",
          "transactionDate",
          "transactionId",
          "type",
          "units"
        ],
        "type": "object",
        "properties": {
          "transactionId": {
            "minLength": 1,
            "type": "string",
            "description": "The unique identifier for the transaction."
          },
          "type": {
            "minLength": 1,
            "type": "string",
            "description": "The type of the transaction e.g. 'Buy', 'Sell'. The transaction type should have been pre-configured via the System Configuration API endpoint."
          },
          "description": {
            "type": "string",
            "description": "The description of the transaction. This only exists on transactions generated by LUSID e.g. a holdings adjustment transaction.",
            "nullable": true
          },
          "instrumentIdentifiers": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "A set of instrument identifiers that can resolve the transaction to a unique instrument.",
            "nullable": true
          },
          "instrumentScope": {
            "type": "string",
            "description": "The scope in which the instrument lies.",
            "nullable": true
          },
          "instrumentUid": {
            "minLength": 1,
            "type": "string",
            "description": "The unqiue Lusid Instrument Id (LUID) of the instrument that the transaction is in."
          },
          "transactionDate": {
            "type": "string",
            "description": "The date of the transaction.",
            "format": "date-time"
          },
          "settlementDate": {
            "type": "string",
            "description": "The settlement date of the transaction.",
            "format": "date-time"
          },
          "units": {
            "type": "number",
            "description": "The number of units transacted in the associated instrument.",
            "format": "double"
          },
          "transactionAmount": {
            "type": "number",
            "description": "The total value of the transaction in the transaction currency.",
            "format": "double"
          },
          "transactionPrice": {
            "$ref": "#/components/schemas/TransactionPrice"
          },
          "totalConsideration": {
            "$ref": "#/components/schemas/CurrencyAndAmount"
          },
          "exchangeRate": {
            "type": "number",
            "description": "The exchange rate between the transaction and settlement currency (settlement currency being represented by the TotalConsideration.Currency). For example if the transaction currency is in USD and the settlement currency is in GBP this this the USD/GBP rate.",
            "format": "double"
          },
          "transactionToPortfolioRate": {
            "type": "number",
            "description": "The exchange rate between the transaction and portfolio currency. For example if the transaction currency is in USD and the portfolio currency is in GBP this this the USD/GBP rate.",
            "format": "double",
            "nullable": true
          },
          "transactionCurrency": {
            "type": "string",
            "description": "The transaction currency.",
            "nullable": true
          },
          "properties": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/PerpetualProperty"
            },
            "description": "Set of unique transaction properties and associated values to stored with the transaction. Each property will be from the 'Transaction' domain.",
            "nullable": true
          },
          "counterpartyId": {
            "type": "string",
            "description": "The identifier for the counterparty of the transaction.",
            "nullable": true
          },
          "source": {
            "type": "string",
            "description": "The source of the transaction. This is used to look up the appropriate transaction group set in the transaction type configuration.",
            "nullable": true
          },
          "transactionStatus": {
            "enum": [
              "Active",
              "Amended",
              "Cancelled"
            ],
            "type": "string",
            "description": "The status of the transaction. The available values are: Active, Amended, Cancelled"
          },
          "entryDateTime": {
            "type": "string",
            "description": "The asAt datetime that the transaction was added to LUSID.",
            "format": "date-time"
          },
          "cancelDateTime": {
            "type": "string",
            "description": "If the transaction has been cancelled, the asAt datetime that the transaction was cancelled.",
            "format": "date-time",
            "nullable": true
          },
          "realisedGainLoss": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RealisedGainLoss"
            },
            "description": "The collection of realised gains or losses resulting from relevant transactions e.g. a sale transaction. The cost used in calculating the realised gain or loss is determined by the accounting method defined when the transaction portfolio is created.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "A list of output transactions."
      },
      "OutputTransition": {
        "required": [
          "costFactor",
          "instrumentIdentifiers",
          "unitsFactor"
        ],
        "type": "object",
        "properties": {
          "instrumentIdentifiers": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "Unique instrument identifiers"
          },
          "unitsFactor": {
            "type": "number",
            "description": "The factor to scale units by",
            "format": "double"
          },
          "costFactor": {
            "type": "number",
            "description": "The factor to scale cost by",
            "format": "double"
          },
          "lusidInstrumentId": {
            "type": "string",
            "description": "LUSID's internal unique instrument identifier, resolved from the instrument identifiers",
            "nullable": true,
            "readOnly": true
          },
          "instrumentScope": {
            "type": "string",
            "description": "The scope in which the instrument lies.",
            "nullable": true,
            "readOnly": true
          }
        },
        "additionalProperties": false,
        "description": "A 'transition' within a corporate action, representing an output transition."
      },
      "PagedResourceListOfAddressKeyDefinition": {
        "required": [
          "values"
        ],
        "type": "object",
        "properties": {
          "nextPage": {
            "type": "string",
            "description": "The next page of results.",
            "nullable": true
          },
          "previousPage": {
            "type": "string",
            "description": "The previous page of results.",
            "nullable": true
          },
          "values": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AddressKeyDefinition"
            },
            "description": "The resources to list."
          },
          "href": {
            "type": "string",
            "description": "The URI of the resource list.",
            "format": "uri",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "description": "Collection of links.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "A paginated list of resource that can be returned from a request."
      },
      "PagedResourceListOfAllocation": {
        "required": [
          "values"
        ],
        "type": "object",
        "properties": {
          "nextPage": {
            "type": "string",
            "description": "The next page of results.",
            "nullable": true
          },
          "previousPage": {
            "type": "string",
            "description": "The previous page of results.",
            "nullable": true
          },
          "values": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Allocation"
            },
            "description": "The resources to list."
          },
          "href": {
            "type": "string",
            "description": "The URI of the resource list.",
            "format": "uri",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "description": "Collection of links.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "A paginated list of resource that can be returned from a request."
      },
      "PagedResourceListOfBlock": {
        "required": [
          "values"
        ],
        "type": "object",
        "properties": {
          "nextPage": {
            "type": "string",
            "description": "The next page of results.",
            "nullable": true
          },
          "previousPage": {
            "type": "string",
            "description": "The previous page of results.",
            "nullable": true
          },
          "values": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Block"
            },
            "description": "The resources to list."
          },
          "href": {
            "type": "string",
            "description": "The URI of the resource list.",
            "format": "uri",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "description": "Collection of links.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "A paginated list of resource that can be returned from a request."
      },
      "PagedResourceListOfCalendar": {
        "required": [
          "values"
        ],
        "type": "object",
        "properties": {
          "nextPage": {
            "type": "string",
            "description": "The next page of results.",
            "nullable": true
          },
          "previousPage": {
            "type": "string",
            "description": "The previous page of results.",
            "nullable": true
          },
          "values": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Calendar"
            },
            "description": "The resources to list."
          },
          "href": {
            "type": "string",
            "description": "The URI of the resource list.",
            "format": "uri",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "description": "Collection of links.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "A paginated list of resource that can be returned from a request."
      },
      "PagedResourceListOfComplianceRuleResponse": {
        "required": [
          "values"
        ],
        "type": "object",
        "properties": {
          "nextPage": {
            "type": "string",
            "description": "The next page of results.",
            "nullable": true
          },
          "previousPage": {
            "type": "string",
            "description": "The previous page of results.",
            "nullable": true
          },
          "values": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ComplianceRuleResponse"
            },
            "description": "The resources to list."
          },
          "href": {
            "type": "string",
            "description": "The URI of the resource list.",
            "format": "uri",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "description": "Collection of links.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "A paginated list of resource that can be returned from a request."
      },
      "PagedResourceListOfComplianceTemplate": {
        "required": [
          "values"
        ],
        "type": "object",
        "properties": {
          "nextPage": {
            "type": "string",
            "description": "The next page of results.",
            "nullable": true
          },
          "previousPage": {
            "type": "string",
            "description": "The previous page of results.",
            "nullable": true
          },
          "values": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ComplianceTemplate"
            },
            "description": "The resources to list."
          },
          "href": {
            "type": "string",
            "description": "The URI of the resource list.",
            "format": "uri",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "description": "Collection of links.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "A paginated list of resource that can be returned from a request."
      },
      "PagedResourceListOfCorporateActionSource": {
        "required": [
          "values"
        ],
        "type": "object",
        "properties": {
          "nextPage": {
            "type": "string",
            "description": "The next page of results.",
            "nullable": true
          },
          "previousPage": {
            "type": "string",
            "description": "The previous page of results.",
            "nullable": true
          },
          "values": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CorporateActionSource"
            },
            "description": "The resources to list."
          },
          "href": {
            "type": "string",
            "description": "The URI of the resource list.",
            "format": "uri",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "description": "Collection of links.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "A paginated list of resource that can be returned from a request."
      },
      "PagedResourceListOfCustomEntityDefinition": {
        "required": [
          "values"
        ],
        "type": "object",
        "properties": {
          "nextPage": {
            "type": "string",
            "description": "The next page of results.",
            "nullable": true
          },
          "previousPage": {
            "type": "string",
            "description": "The previous page of results.",
            "nullable": true
          },
          "values": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CustomEntityDefinition"
            },
            "description": "The resources to list."
          },
          "href": {
            "type": "string",
            "description": "The URI of the resource list.",
            "format": "uri",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "description": "Collection of links.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "A paginated list of resource that can be returned from a request."
      },
      "PagedResourceListOfCustomEntityResponse": {
        "required": [
          "values"
        ],
        "type": "object",
        "properties": {
          "nextPage": {
            "type": "string",
            "description": "The next page of results.",
            "nullable": true
          },
          "previousPage": {
            "type": "string",
            "description": "The previous page of results.",
            "nullable": true
          },
          "values": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CustomEntityResponse"
            },
            "description": "The resources to list."
          },
          "href": {
            "type": "string",
            "description": "The URI of the resource list.",
            "format": "uri",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "description": "Collection of links.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "A paginated list of resource that can be returned from a request."
      },
      "PagedResourceListOfCutLabelDefinition": {
        "required": [
          "values"
        ],
        "type": "object",
        "properties": {
          "nextPage": {
            "type": "string",
            "description": "The next page of results.",
            "nullable": true
          },
          "previousPage": {
            "type": "string",
            "description": "The previous page of results.",
            "nullable": true
          },
          "values": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CutLabelDefinition"
            },
            "description": "The resources to list."
          },
          "href": {
            "type": "string",
            "description": "The URI of the resource list.",
            "format": "uri",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "description": "Collection of links.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "A paginated list of resource that can be returned from a request."
      },
      "PagedResourceListOfDataTypeSummary": {
        "required": [
          "values"
        ],
        "type": "object",
        "properties": {
          "nextPage": {
            "type": "string",
            "description": "The next page of results.",
            "nullable": true
          },
          "previousPage": {
            "type": "string",
            "description": "The previous page of results.",
            "nullable": true
          },
          "values": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DataTypeSummary"
            },
            "description": "The resources to list."
          },
          "href": {
            "type": "string",
            "description": "The URI of the resource list.",
            "format": "uri",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "description": "Collection of links.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "A paginated list of resource that can be returned from a request."
      },
      "PagedResourceListOfExecution": {
        "required": [
          "values"
        ],
        "type": "object",
        "properties": {
          "nextPage": {
            "type": "string",
            "description": "The next page of results.",
            "nullable": true
          },
          "previousPage": {
            "type": "string",
            "description": "The previous page of results.",
            "nullable": true
          },
          "values": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Execution"
            },
            "description": "The resources to list."
          },
          "href": {
            "type": "string",
            "description": "The URI of the resource list.",
            "format": "uri",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "description": "Collection of links.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "A paginated list of resource that can be returned from a request."
      },
      "PagedResourceListOfInstrument": {
        "required": [
          "values"
        ],
        "type": "object",
        "properties": {
          "nextPage": {
            "type": "string",
            "description": "The next page of results.",
            "nullable": true
          },
          "previousPage": {
            "type": "string",
            "description": "The previous page of results.",
            "nullable": true
          },
          "values": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Instrument"
            },
            "description": "The resources to list."
          },
          "href": {
            "type": "string",
            "description": "The URI of the resource list.",
            "format": "uri",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "description": "Collection of links.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "A paginated list of resource that can be returned from a request."
      },
      "PagedResourceListOfInstrumentEventHolder": {
        "required": [
          "values"
        ],
        "type": "object",
        "properties": {
          "nextPage": {
            "type": "string",
            "description": "The next page of results.",
            "nullable": true
          },
          "previousPage": {
            "type": "string",
            "description": "The previous page of results.",
            "nullable": true
          },
          "values": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/InstrumentEventHolder"
            },
            "description": "The resources to list."
          },
          "href": {
            "type": "string",
            "description": "The URI of the resource list.",
            "format": "uri",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "description": "Collection of links.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "A paginated list of resource that can be returned from a request."
      },
      "PagedResourceListOfLegalEntity": {
        "required": [
          "values"
        ],
        "type": "object",
        "properties": {
          "nextPage": {
            "type": "string",
            "description": "The next page of results.",
            "nullable": true
          },
          "previousPage": {
            "type": "string",
            "description": "The previous page of results.",
            "nullable": true
          },
          "values": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LegalEntity"
            },
            "description": "The resources to list."
          },
          "href": {
            "type": "string",
            "description": "The URI of the resource list.",
            "format": "uri",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "description": "Collection of links.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "A paginated list of resource that can be returned from a request."
      },
      "PagedResourceListOfOrder": {
        "required": [
          "values"
        ],
        "type": "object",
        "properties": {
          "nextPage": {
            "type": "string",
            "description": "The next page of results.",
            "nullable": true
          },
          "previousPage": {
            "type": "string",
            "description": "The previous page of results.",
            "nullable": true
          },
          "values": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Order"
            },
            "description": "The resources to list."
          },
          "href": {
            "type": "string",
            "description": "The URI of the resource list.",
            "format": "uri",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "description": "Collection of links.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "A paginated list of resource that can be returned from a request."
      },
      "PagedResourceListOfParticipation": {
        "required": [
          "values"
        ],
        "type": "object",
        "properties": {
          "nextPage": {
            "type": "string",
            "description": "The next page of results.",
            "nullable": true
          },
          "previousPage": {
            "type": "string",
            "description": "The previous page of results.",
            "nullable": true
          },
          "values": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Participation"
            },
            "description": "The resources to list."
          },
          "href": {
            "type": "string",
            "description": "The URI of the resource list.",
            "format": "uri",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "description": "Collection of links.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "A paginated list of resource that can be returned from a request."
      },
      "PagedResourceListOfPerson": {
        "required": [
          "values"
        ],
        "type": "object",
        "properties": {
          "nextPage": {
            "type": "string",
            "description": "The next page of results.",
            "nullable": true
          },
          "previousPage": {
            "type": "string",
            "description": "The previous page of results.",
            "nullable": true
          },
          "values": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Person"
            },
            "description": "The resources to list."
          },
          "href": {
            "type": "string",
            "description": "The URI of the resource list.",
            "format": "uri",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "description": "Collection of links.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "A paginated list of resource that can be returned from a request."
      },
      "PagedResourceListOfPlacement": {
        "required": [
          "values"
        ],
        "type": "object",
        "properties": {
          "nextPage": {
            "type": "string",
            "description": "The next page of results.",
            "nullable": true
          },
          "previousPage": {
            "type": "string",
            "description": "The previous page of results.",
            "nullable": true
          },
          "values": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Placement"
            },
            "description": "The resources to list."
          },
          "href": {
            "type": "string",
            "description": "The URI of the resource list.",
            "format": "uri",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "description": "Collection of links.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "A paginated list of resource that can be returned from a request."
      },
      "PagedResourceListOfPortfolioGroupSearchResult": {
        "required": [
          "values"
        ],
        "type": "object",
        "properties": {
          "nextPage": {
            "type": "string",
            "description": "The next page of results.",
            "nullable": true
          },
          "previousPage": {
            "type": "string",
            "description": "The previous page of results.",
            "nullable": true
          },
          "values": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PortfolioGroupSearchResult"
            },
            "description": "The resources to list."
          },
          "href": {
            "type": "string",
            "description": "The URI of the resource list.",
            "format": "uri",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "description": "Collection of links.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "A paginated list of resource that can be returned from a request."
      },
      "PagedResourceListOfPortfolioSearchResult": {
        "required": [
          "values"
        ],
        "type": "object",
        "properties": {
          "nextPage": {
            "type": "string",
            "description": "The next page of results.",
            "nullable": true
          },
          "previousPage": {
            "type": "string",
            "description": "The previous page of results.",
            "nullable": true
          },
          "values": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PortfolioSearchResult"
            },
            "description": "The resources to list."
          },
          "href": {
            "type": "string",
            "description": "The URI of the resource list.",
            "format": "uri",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "description": "Collection of links.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "A paginated list of resource that can be returned from a request."
      },
      "PagedResourceListOfPropertyDefinitionSearchResult": {
        "required": [
          "values"
        ],
        "type": "object",
        "properties": {
          "nextPage": {
            "type": "string",
            "description": "The next page of results.",
            "nullable": true
          },
          "previousPage": {
            "type": "string",
            "description": "The previous page of results.",
            "nullable": true
          },
          "values": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PropertyDefinitionSearchResult"
            },
            "description": "The resources to list."
          },
          "href": {
            "type": "string",
            "description": "The URI of the resource list.",
            "format": "uri",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "description": "Collection of links.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "A paginated list of resource that can be returned from a request."
      },
      "PagedResourceListOfReferenceListResponse": {
        "required": [
          "values"
        ],
        "type": "object",
        "properties": {
          "nextPage": {
            "type": "string",
            "description": "The next page of results.",
            "nullable": true
          },
          "previousPage": {
            "type": "string",
            "description": "The previous page of results.",
            "nullable": true
          },
          "values": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ReferenceListResponse"
            },
            "description": "The resources to list."
          },
          "href": {
            "type": "string",
            "description": "The URI of the resource list.",
            "format": "uri",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "description": "Collection of links.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "A paginated list of resource that can be returned from a request."
      },
      "PagedResourceListOfRelationshipDefinition": {
        "required": [
          "values"
        ],
        "type": "object",
        "properties": {
          "nextPage": {
            "type": "string",
            "description": "The next page of results.",
            "nullable": true
          },
          "previousPage": {
            "type": "string",
            "description": "The previous page of results.",
            "nullable": true
          },
          "values": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RelationshipDefinition"
            },
            "description": "The resources to list."
          },
          "href": {
            "type": "string",
            "description": "The URI of the resource list.",
            "format": "uri",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "description": "Collection of links.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "A paginated list of resource that can be returned from a request."
      },
      "PagedResourceListOfSequenceDefinition": {
        "required": [
          "values"
        ],
        "type": "object",
        "properties": {
          "nextPage": {
            "type": "string",
            "description": "The next page of results.",
            "nullable": true
          },
          "previousPage": {
            "type": "string",
            "description": "The previous page of results.",
            "nullable": true
          },
          "values": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SequenceDefinition"
            },
            "description": "The resources to list."
          },
          "href": {
            "type": "string",
            "description": "The URI of the resource list.",
            "format": "uri",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "description": "Collection of links.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "A paginated list of resource that can be returned from a request."
      },
      "Participation": {
        "required": [
          "id",
          "orderId",
          "placementId"
        ],
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/ResourceId"
          },
          "placementId": {
            "$ref": "#/components/schemas/ResourceId"
          },
          "orderId": {
            "$ref": "#/components/schemas/ResourceId"
          },
          "version": {
            "$ref": "#/components/schemas/Version"
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "description": "Collection of links.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "The record an order's participation in a specific placement."
      },
      "ParticipationRequest": {
        "required": [
          "id",
          "orderId",
          "placementId"
        ],
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/ResourceId"
          },
          "placementId": {
            "$ref": "#/components/schemas/ResourceId"
          },
          "orderId": {
            "$ref": "#/components/schemas/ResourceId"
          },
          "version": {
            "$ref": "#/components/schemas/Version"
          }
        },
        "additionalProperties": false,
        "description": "A request to create or update a Participation."
      },
      "ParticipationSetRequest": {
        "type": "object",
        "properties": {
          "requests": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ParticipationRequest"
            },
            "description": "A collection of ParticipationRequests.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "A request to create or update multiple Participations."
      },
      "PerformanceReturn": {
        "required": [
          "effectiveAt",
          "rateOfReturn"
        ],
        "type": "object",
        "properties": {
          "effectiveAt": {
            "type": "string",
            "description": "The effectiveAt for the return.",
            "format": "date-time"
          },
          "rateOfReturn": {
            "type": "number",
            "description": "The return number.",
            "format": "double"
          },
          "openingMarketValue": {
            "type": "number",
            "description": "The opening market value.",
            "format": "double",
            "nullable": true
          },
          "closingMarketValue": {
            "type": "number",
            "description": "The closing market value.",
            "format": "double",
            "nullable": true
          },
          "period": {
            "type": "string",
            "description": "Upsert the returns on a Daily or Monthly period. Defaults to Daily.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "A list of Returns."
      },
      "PerformanceReturnsMetric": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "The type of the metric. Default to Return",
            "nullable": true
          },
          "window": {
            "type": "string",
            "description": "The given metric for the calculation i.e. 1Y, 1D.",
            "nullable": true
          },
          "allowPartial": {
            "type": "boolean",
            "description": "Bool if the metric is allowed partial results. Deafult to false."
          },
          "annualised": {
            "type": "boolean",
            "description": "Bool if the metric is annualized. Default to false."
          },
          "withFee": {
            "type": "boolean",
            "description": "Bool if the metric should consider the fees when is calculated. Default to false."
          },
          "seedAmount": {
            "type": "string",
            "description": "The given seed amount for the calculation of the indicative amount metrics.",
            "nullable": true
          },
          "alias": {
            "type": "string",
            "description": "The alias for the metric.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "The request used in the AggregatedReturns."
      },
      "PerpetualProperty": {
        "required": [
          "key"
        ],
        "type": "object",
        "properties": {
          "key": {
            "type": "string",
            "description": "The key of the property. This takes the format {domain}/{scope}/{code} e.g. 'Instrument/system/Name' or 'Transaction/strategy/quantsignal'."
          },
          "value": {
            "$ref": "#/components/schemas/PropertyValue"
          }
        },
        "additionalProperties": false
      },
      "Person": {
        "type": "object",
        "properties": {
          "displayName": {
            "type": "string",
            "description": "The display name of the Person",
            "nullable": true
          },
          "description": {
            "type": "string",
            "description": "The description of the Person",
            "nullable": true
          },
          "href": {
            "type": "string",
            "description": "The specifc Uniform Resource Identifier (URI) for this resource at the requested effective and asAt datetime.",
            "format": "uri",
            "nullable": true
          },
          "lusidPersonId": {
            "type": "string",
            "description": "The unique LUSID Person Identifier of the Person.",
            "nullable": true
          },
          "identifiers": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/Property"
            },
            "description": "Unique client-defined identifiers of the Person.",
            "nullable": true
          },
          "properties": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/Property"
            },
            "description": "A set of properties associated to the Person. There can be multiple properties associated with a property key.",
            "nullable": true
          },
          "relationships": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Relationship"
            },
            "description": "A set of relationships associated to the Person.",
            "nullable": true
          },
          "version": {
            "$ref": "#/components/schemas/Version"
          }
        },
        "additionalProperties": false
      },
      "Placement": {
        "required": [
          "blockIds",
          "createdDate",
          "id",
          "instrumentIdentifiers",
          "lusidInstrumentId",
          "quantity",
          "side",
          "state",
          "timeInForce",
          "type"
        ],
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/ResourceId"
          },
          "parentPlacementId": {
            "$ref": "#/components/schemas/ResourceId"
          },
          "blockIds": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ResourceId"
            },
            "description": "The IDs of the Blocks associated with this placement."
          },
          "properties": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/PerpetualProperty"
            },
            "description": "Client-defined properties associated with this placement.",
            "nullable": true
          },
          "instrumentIdentifiers": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "The instrument ordered."
          },
          "lusidInstrumentId": {
            "minLength": 1,
            "type": "string",
            "description": "The LUSID instrument id for the instrument placement."
          },
          "quantity": {
            "type": "number",
            "description": "The quantity of given instrument ordered.",
            "format": "double"
          },
          "state": {
            "minLength": 1,
            "type": "string",
            "description": "The state of this placement (typically a FIX state; Open, Filled, etc)."
          },
          "side": {
            "minLength": 1,
            "type": "string",
            "description": "The side (Buy, Sell, ...) of this placement."
          },
          "timeInForce": {
            "minLength": 1,
            "type": "string",
            "description": "The time in force applicable to this placement (GTC, FOK, Day, etc)"
          },
          "type": {
            "minLength": 1,
            "type": "string",
            "description": "The type of this placement (Market, Limit, etc)."
          },
          "createdDate": {
            "type": "string",
            "description": "The active date of this placement.",
            "format": "date-time"
          },
          "limitPrice": {
            "$ref": "#/components/schemas/CurrencyAndAmount"
          },
          "stopPrice": {
            "$ref": "#/components/schemas/CurrencyAndAmount"
          },
          "counterparty": {
            "type": "string",
            "description": "Optionally specifies the market entity this placement is placed with.",
            "nullable": true
          },
          "executionSystem": {
            "type": "string",
            "description": "Optionally specifies the execution system in use.",
            "nullable": true
          },
          "entryType": {
            "type": "string",
            "description": "Optionally specifies the entry type of this placement.",
            "nullable": true
          },
          "version": {
            "$ref": "#/components/schemas/Version"
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "description": "Collection of links.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "A street order for a quantity of a single instrument placed with a single market entity."
      },
      "PlacementRequest": {
        "required": [
          "blockIds",
          "createdDate",
          "id",
          "instrumentIdentifiers",
          "quantity",
          "side",
          "state",
          "timeInForce",
          "type"
        ],
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/ResourceId"
          },
          "parentPlacementId": {
            "$ref": "#/components/schemas/ResourceId"
          },
          "blockIds": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ResourceId"
            },
            "description": "The IDs of the Blocks associated with this placement."
          },
          "properties": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/PerpetualProperty"
            },
            "description": "Client-defined properties associated with this order.",
            "nullable": true
          },
          "instrumentIdentifiers": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "The instrument ordered."
          },
          "quantity": {
            "type": "number",
            "description": "The quantity of given instrument ordered.",
            "format": "double"
          },
          "state": {
            "minLength": 1,
            "type": "string",
            "description": "The state of this placement (typically a FIX state; Open, Filled, etc)."
          },
          "side": {
            "minLength": 1,
            "type": "string",
            "description": "The side (Buy, Sell, ...) of this placement."
          },
          "timeInForce": {
            "minLength": 1,
            "type": "string",
            "description": "The time in force applicable to this placement (GTC, FOK, Day, etc)"
          },
          "type": {
            "minLength": 1,
            "type": "string",
            "description": "The type of this placement (Market, Limit, etc)."
          },
          "createdDate": {
            "type": "string",
            "description": "The active date of this placement.",
            "format": "date-time"
          },
          "limitPrice": {
            "$ref": "#/components/schemas/CurrencyAndAmount"
          },
          "stopPrice": {
            "$ref": "#/components/schemas/CurrencyAndAmount"
          },
          "counterparty": {
            "type": "string",
            "description": "Optionally specifies the market entity this placement is placed with.",
            "nullable": true
          },
          "executionSystem": {
            "maxLength": 256,
            "minLength": 1,
            "type": "string",
            "description": "Optionally specifies the execution system in use.",
            "nullable": true
          },
          "entryType": {
            "maxLength": 256,
            "minLength": 1,
            "type": "string",
            "description": "Optionally specifies the entry type of this placement.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "A request to create or update a Placement."
      },
      "PlacementSetRequest": {
        "type": "object",
        "properties": {
          "requests": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PlacementRequest"
            },
            "description": "A collection of PlacementRequests.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "A request to create or update multiple Placements."
      },
      "Portfolio": {
        "required": [
          "created",
          "displayName",
          "id",
          "type"
        ],
        "type": "object",
        "properties": {
          "href": {
            "type": "string",
            "description": "The specific Uniform Resource Identifier (URI) for this resource at the requested effective and asAt datetime.",
            "format": "uri",
            "nullable": true
          },
          "id": {
            "$ref": "#/components/schemas/ResourceId"
          },
          "type": {
            "enum": [
              "Transaction",
              "Reference",
              "DerivedTransaction"
            ],
            "type": "string",
            "description": "The type of the portfolio. The available values are: Transaction, Reference, DerivedTransaction"
          },
          "displayName": {
            "minLength": 1,
            "type": "string",
            "description": "The name of the portfolio."
          },
          "description": {
            "type": "string",
            "description": "The long form description of the portfolio.",
            "nullable": true
          },
          "created": {
            "type": "string",
            "description": "The effective datetime at which the portfolio was created. No transactions or constituents can be added to the portfolio before this date.",
            "format": "date-time"
          },
          "parentPortfolioId": {
            "$ref": "#/components/schemas/ResourceId"
          },
          "version": {
            "$ref": "#/components/schemas/Version"
          },
          "isDerived": {
            "type": "boolean",
            "description": "Whether or not this is a derived portfolio."
          },
          "baseCurrency": {
            "type": "string",
            "description": "The base currency of the portfolio.",
            "nullable": true
          },
          "properties": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/Property"
            },
            "description": "The requested portfolio properties. These will be from the 'Portfolio' domain.",
            "nullable": true
          },
          "relationships": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Relationship"
            },
            "description": "A set of relationships associated to the portfolio.",
            "nullable": true
          },
          "instrumentScopes": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The instrument scope resolution strategy of this portfolio.",
            "nullable": true
          },
          "accountingMethod": {
            "enum": [
              "Default",
              "AverageCost",
              "FirstInFirstOut",
              "LastInFirstOut",
              "HighestCostFirst",
              "LowestCostFirst"
            ],
            "type": "string",
            "description": ". The available values are: Default, AverageCost, FirstInFirstOut, LastInFirstOut, HighestCostFirst, LowestCostFirst"
          },
          "amortisationMethod": {
            "type": "string",
            "description": "The amortisation method the portfolio is using in the calculation. This can be 'NoAmortisation', 'StraightLine' or 'EffectiveYield'.",
            "nullable": true
          },
          "transactionTypeScope": {
            "type": "string",
            "description": "The scope of the transaction types.",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "description": "Collection of links.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "A list of portfolios."
      },
      "PortfolioCashFlow": {
        "required": [
          "balance",
          "balanceReportingCurrency",
          "cashflow",
          "cashflowReportingCurrency",
          "costBasisReportingCurrency",
          "fxRate",
          "groupById",
          "movementName",
          "sequenceNumber",
          "translationGainLoss",
          "type",
          "unrealisedGainLossReportingCurrency"
        ],
        "type": "object",
        "properties": {
          "groupById": {
            "type": "integer",
            "description": "The groupBy subHoldings and currency.",
            "format": "int32"
          },
          "sequenceNumber": {
            "type": "integer",
            "description": "Sequence number determining the order of the cash flow records.",
            "format": "int32"
          },
          "effectiveDate": {
            "type": "string",
            "description": "Indicates the date when the cash-flow settles.",
            "format": "date-time"
          },
          "subHoldingKeys": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/PerpetualProperty"
            },
            "description": "The sub-holding properties which identify the holding. Each property will be from the 'Transaction' domain. These are configured on a transaction portfolio.",
            "nullable": true
          },
          "type": {
            "minLength": 1,
            "type": "string",
            "description": "Indicates the record type (Closed, Open, Activity)."
          },
          "movementName": {
            "minLength": 1,
            "type": "string",
            "description": "Indicates the specific movement of the transaction that generated this cash flow."
          },
          "cashflow": {
            "$ref": "#/components/schemas/CurrencyAndAmount"
          },
          "balance": {
            "$ref": "#/components/schemas/CurrencyAndAmount"
          },
          "fxRate": {
            "type": "number",
            "description": "Exchange rate between the currency of this cash flow and the reporting currency.",
            "format": "double"
          },
          "cashflowReportingCurrency": {
            "$ref": "#/components/schemas/CurrencyAndAmount"
          },
          "balanceReportingCurrency": {
            "$ref": "#/components/schemas/CurrencyAndAmount"
          },
          "translationGainLoss": {
            "$ref": "#/components/schemas/CurrencyAndAmount"
          },
          "costBasisReportingCurrency": {
            "$ref": "#/components/schemas/CurrencyAndAmount"
          },
          "transaction": {
            "$ref": "#/components/schemas/Transaction"
          },
          "unrealisedGainLossReportingCurrency": {
            "$ref": "#/components/schemas/CurrencyAndAmount"
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "description": "Collection of links.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "The details for the cashflow for a given portfolio."
      },
      "PortfolioCashLadder": {
        "required": [
          "currency",
          "records"
        ],
        "type": "object",
        "properties": {
          "currency": {
            "type": "string",
            "description": "The currency of the cash-flows."
          },
          "subHoldingKeys": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/PerpetualProperty"
            },
            "description": "The sub-holding properties which identify the holding. Each property will be from the 'Transaction' domain. These are configured on a transaction portfolio.",
            "nullable": true
          },
          "records": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CashLadderRecord"
            },
            "description": "A record of cash flows on a specific date."
          },
          "failed": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/ErrorDetail"
            },
            "description": "The records that could not be returned along with a reason for their failure.",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "description": "Collection of links.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PortfolioDetails": {
        "required": [
          "baseCurrency",
          "originPortfolioId",
          "version"
        ],
        "type": "object",
        "properties": {
          "href": {
            "type": "string",
            "description": "The specific Uniform Resource Identifier (URI) for this resource at the requested effective and asAt datetime.",
            "format": "uri",
            "nullable": true
          },
          "originPortfolioId": {
            "$ref": "#/components/schemas/ResourceId"
          },
          "version": {
            "$ref": "#/components/schemas/Version"
          },
          "baseCurrency": {
            "type": "string",
            "description": "The base currency of the transaction portfolio."
          },
          "corporateActionSourceId": {
            "$ref": "#/components/schemas/ResourceId"
          },
          "subHoldingKeys": {
            "type": "array",
            "items": {
              "type": "string",
              "description": "The key that uniquely identifies the property. It has the format {domain}/{scope}/{code}."
            },
            "nullable": true
          },
          "instrumentScopes": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The resolution strategy used to resolve instruments of transactions/holdings upserted to the transaction portfolio.",
            "nullable": true
          },
          "accountingMethod": {
            "enum": [
              "Default",
              "AverageCost",
              "FirstInFirstOut",
              "LastInFirstOut",
              "HighestCostFirst",
              "LowestCostFirst"
            ],
            "type": "string",
            "description": ". The available values are: Default, AverageCost, FirstInFirstOut, LastInFirstOut, HighestCostFirst, LowestCostFirst"
          },
          "amortisationMethod": {
            "type": "string",
            "description": "The amortisation method the portfolio is using in the calculation. This can be 'NoAmortisation', 'StraightLine' or 'EffectiveYield'.",
            "nullable": true
          },
          "transactionTypeScope": {
            "type": "string",
            "description": "The scope of the transaction types.",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "description": "Collection of links.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PortfolioEntityId": {
        "type": "object",
        "properties": {
          "scope": {
            "maxLength": 256,
            "minLength": 1,
            "pattern": "^[a-zA-Z0-9\\-_]+$",
            "type": "string",
            "description": "The scope within which the portfolio or portfolio group lives.",
            "nullable": true
          },
          "code": {
            "maxLength": 256,
            "minLength": 1,
            "pattern": "^[a-zA-Z0-9\\-_]+$",
            "type": "string",
            "description": "Portfolio name or code.",
            "nullable": true
          },
          "portfolioEntityType": {
            "maxLength": 128,
            "minLength": 0,
            "type": "string",
            "description": "String identifier for portfolio e.g. \"SinglePortfolio\" and \"GroupPortfolio\". If not specified, it is assumed to be a single portfolio.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Specification of a portfolio or portfolio group id, its scope and which it is."
      },
      "PortfolioGroup": {
        "required": [
          "displayName",
          "id"
        ],
        "type": "object",
        "properties": {
          "href": {
            "type": "string",
            "description": "The specific Uniform Resource Identifier (URI) for this resource at the requested effective and asAt datetime.",
            "format": "uri",
            "nullable": true
          },
          "id": {
            "$ref": "#/components/schemas/ResourceId"
          },
          "displayName": {
            "minLength": 1,
            "type": "string",
            "description": "The name of the portfolio group."
          },
          "description": {
            "type": "string",
            "description": "The long form description of the portfolio group.",
            "nullable": true
          },
          "created": {
            "type": "string",
            "description": "The effective datetime at which the portfolio group was created. No portfolios or sub groups can be added to the group before this date.",
            "format": "date-time"
          },
          "portfolios": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ResourceId"
            },
            "description": "The collection of resource identifiers for the portfolios contained in the portfolio group.",
            "nullable": true
          },
          "subGroups": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ResourceId"
            },
            "description": "The collection of resource identifiers for the portfolio groups contained in the portfolio group as sub groups.",
            "nullable": true
          },
          "relationships": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Relationship"
            },
            "description": "A set of relationships associated to the portfolio group.",
            "nullable": true
          },
          "version": {
            "$ref": "#/components/schemas/Version"
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "description": "Collection of links.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PortfolioGroupIdList": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ReferenceList"
          },
          {
            "required": [
              "referenceListType",
              "values"
            ],
            "type": "object",
            "properties": {
              "values": {
                "maxItems": 100,
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ResourceId"
                }
              },
              "referenceListType": {
                "enum": [
                  "PortfolioGroupIdList",
                  "PortfolioIdList",
                  "AddressKeyList",
                  "StringList",
                  "InstrumentList",
                  "DecimalList"
                ],
                "type": "string",
                "description": "The reference list values. The available values are: PortfolioGroupIdList, PortfolioIdList, AddressKeyList, StringList, InstrumentList, DecimalList"
              }
            }
          }
        ]
      },
      "PortfolioGroupProperties": {
        "type": "object",
        "properties": {
          "href": {
            "type": "string",
            "description": "The specific Uniform Resource Identifier (URI) for this resource at the requested effective and asAt datetime.",
            "format": "uri",
            "nullable": true
          },
          "properties": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/Property"
            },
            "description": "The portfolio group properties. These will be from the 'PortfolioGroup' domain.",
            "nullable": true
          },
          "version": {
            "$ref": "#/components/schemas/Version"
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "description": "Collection of links.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PortfolioGroupSearchResult": {
        "required": [
          "displayName",
          "id"
        ],
        "type": "object",
        "properties": {
          "href": {
            "type": "string",
            "description": "The specific Uniform Resource Identifier (URI) for this resource at the requested effective and asAt datetime.",
            "format": "uri",
            "nullable": true
          },
          "id": {
            "$ref": "#/components/schemas/ResourceId"
          },
          "displayName": {
            "minLength": 1,
            "type": "string",
            "description": "The name of the portfolio group."
          },
          "description": {
            "type": "string",
            "description": "The long form description of the portfolio group.",
            "nullable": true
          },
          "created": {
            "type": "string",
            "description": "The effective datetime at which the portfolio group was created. No portfolios or sub groups can be added to the group before this date.",
            "format": "date-time"
          },
          "portfolios": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ResourceId"
            },
            "description": "The collection of resource identifiers for the portfolios contained in the portfolio group.",
            "nullable": true
          },
          "subGroups": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ResourceId"
            },
            "description": "The collection of resource identifiers for the portfolio groups contained in the portfolio group as sub groups.",
            "nullable": true
          },
          "version": {
            "$ref": "#/components/schemas/Version"
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "description": "Collection of links.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PortfolioHolding": {
        "required": [
          "cost",
          "costPortfolioCcy",
          "holdingType",
          "instrumentUid",
          "settledUnits",
          "units"
        ],
        "type": "object",
        "properties": {
          "instrumentScope": {
            "type": "string",
            "description": "The scope in which the holding's instrument is in.",
            "nullable": true
          },
          "instrumentUid": {
            "minLength": 1,
            "type": "string",
            "description": "The unique Lusid Instrument Id (LUID) of the instrument that the holding is in."
          },
          "subHoldingKeys": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/PerpetualProperty"
            },
            "description": "The sub-holding properties which identify the holding. Each property will be from the 'Transaction' domain. These are configured on a transaction portfolio.",
            "nullable": true
          },
          "properties": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/Property"
            },
            "description": "The properties which have been requested to be decorated onto the holding. These will be from the 'Instrument' or 'Holding' domain.",
            "nullable": true
          },
          "holdingType": {
            "minLength": 1,
            "type": "string",
            "description": "The code for the type of the holding e.g. P, B, C, R, F etc."
          },
          "units": {
            "type": "number",
            "description": "The total number of units of the holding.",
            "format": "double"
          },
          "settledUnits": {
            "type": "number",
            "description": "The total number of settled units of the holding.",
            "format": "double"
          },
          "cost": {
            "$ref": "#/components/schemas/CurrencyAndAmount"
          },
          "costPortfolioCcy": {
            "$ref": "#/components/schemas/CurrencyAndAmount"
          },
          "transaction": {
            "$ref": "#/components/schemas/Transaction"
          },
          "currency": {
            "type": "string",
            "description": "The holding currency.",
            "nullable": true
          },
          "holdingTypeName": {
            "type": "string",
            "description": "The decoded type of the holding e.g. Position, Balance, CashCommitment, Receivable, ForwardFX etc.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "A list of holdings."
      },
      "PortfolioIdList": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ReferenceList"
          },
          {
            "required": [
              "referenceListType",
              "values"
            ],
            "type": "object",
            "properties": {
              "values": {
                "maxItems": 100,
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ResourceId"
                }
              },
              "referenceListType": {
                "enum": [
                  "PortfolioGroupIdList",
                  "PortfolioIdList",
                  "AddressKeyList",
                  "StringList",
                  "InstrumentList",
                  "DecimalList"
                ],
                "type": "string",
                "description": "The reference list values. The available values are: PortfolioGroupIdList, PortfolioIdList, AddressKeyList, StringList, InstrumentList, DecimalList"
              }
            }
          }
        ]
      },
      "PortfolioProperties": {
        "type": "object",
        "properties": {
          "href": {
            "type": "string",
            "description": "The specific Uniform Resource Identifier (URI) for this resource at the requested effective and asAt datetime.",
            "format": "uri",
            "nullable": true
          },
          "properties": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/Property"
            },
            "description": "The portfolio properties. These will be from the 'Portfolio' domain.",
            "nullable": true
          },
          "version": {
            "$ref": "#/components/schemas/Version"
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "description": "Collection of links.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PortfolioReconciliationRequest": {
        "required": [
          "effectiveAt",
          "portfolioId"
        ],
        "type": "object",
        "properties": {
          "portfolioId": {
            "$ref": "#/components/schemas/ResourceId"
          },
          "effectiveAt": {
            "minLength": 1,
            "type": "string",
            "description": "The effective date of the portfolio",
            "format": "dateorcutlabel"
          },
          "asAt": {
            "type": "string",
            "description": "Optional. The AsAt date of the portfolio",
            "format": "date-time",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PortfolioResultDataKeyRule": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ResultKeyRule"
          },
          {
            "required": [
              "dataScope",
              "documentCode",
              "resultKeyRuleType",
              "supplier"
            ],
            "type": "object",
            "properties": {
              "supplier": {
                "maxLength": 32,
                "minLength": 0,
                "type": "string",
                "description": "the result resource supplier (where the data comes from)"
              },
              "dataScope": {
                "maxLength": 256,
                "minLength": 1,
                "pattern": "^[a-zA-Z0-9\\-_]+$",
                "type": "string",
                "description": "which is the scope in which the data should be found"
              },
              "documentCode": {
                "maxLength": 256,
                "minLength": 1,
                "type": "string",
                "description": "document code that defines which document is desired"
              },
              "quoteInterval": {
                "maxLength": 16,
                "minLength": 0,
                "type": "string",
                "description": "Shorthand for the time interval used to select result data. This must be a dot-separated string\r\n            specifying a start and end date, for example '5D.0D' to look back 5 days from today (0 days ago).",
                "nullable": true
              },
              "asAt": {
                "type": "string",
                "description": "The AsAt predicate specification.",
                "format": "date-time",
                "nullable": true
              },
              "portfolioCode": {
                "maxLength": 256,
                "minLength": 1,
                "pattern": "^[a-zA-Z0-9\\-_]+$",
                "type": "string",
                "nullable": true
              },
              "portfolioScope": {
                "maxLength": 256,
                "minLength": 1,
                "pattern": "^[a-zA-Z0-9\\-_]+$",
                "type": "string",
                "nullable": true
              },
              "resultKeyRuleType": {
                "enum": [
                  "Invalid",
                  "ResultDataKeyRule",
                  "PortfolioResultDataKeyRule"
                ],
                "type": "string",
                "description": "The available values are: Invalid, ResultDataKeyRule, PortfolioResultDataKeyRule"
              }
            }
          }
        ]
      },
      "PortfolioSearchResult": {
        "required": [
          "created",
          "displayName",
          "id",
          "type"
        ],
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/ResourceId"
          },
          "type": {
            "enum": [
              "Transaction",
              "Reference",
              "DerivedTransaction"
            ],
            "type": "string",
            "description": "The type of the portfolio. The available values are: Transaction, Reference, DerivedTransaction"
          },
          "href": {
            "type": "string",
            "description": "The specific Uniform Resource Identifier (URI) for this resource at the requested effective and asAt datetime.",
            "format": "uri",
            "nullable": true
          },
          "description": {
            "type": "string",
            "description": "The long form description of the portfolio.",
            "nullable": true
          },
          "displayName": {
            "minLength": 1,
            "type": "string",
            "description": "The name of the portfolio."
          },
          "isDerived": {
            "type": "boolean",
            "description": "Whether or not this is a derived portfolio.",
            "readOnly": true
          },
          "created": {
            "type": "string",
            "description": "The effective datetime at which the portfolio was created. No transactions or constituents can be added to the portfolio before this date.",
            "format": "date-time"
          },
          "parentPortfolioId": {
            "$ref": "#/components/schemas/ResourceId"
          },
          "baseCurrency": {
            "type": "string",
            "description": "The base currency of the portfolio.",
            "nullable": true
          },
          "properties": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Property"
            },
            "description": "The requested portfolio properties. These will be from the 'Portfolio' domain.",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "description": "Collection of links.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "A list of portfolios."
      },
      "PortfoliosReconciliationRequest": {
        "required": [
          "instrumentPropertyKeys",
          "left",
          "right"
        ],
        "type": "object",
        "properties": {
          "left": {
            "$ref": "#/components/schemas/PortfolioReconciliationRequest"
          },
          "right": {
            "$ref": "#/components/schemas/PortfolioReconciliationRequest"
          },
          "instrumentPropertyKeys": {
            "type": "array",
            "items": {
              "type": "string",
              "description": "The key that uniquely identifies the property. It has the format {domain}/{scope}/{code}."
            },
            "description": "Instrument properties to be included with any identified breaks. These properties will be in the effective and AsAt dates of the left portfolio"
          }
        },
        "additionalProperties": false
      },
      "Premium": {
        "required": [
          "amount",
          "currency",
          "date"
        ],
        "type": "object",
        "properties": {
          "amount": {
            "type": "number",
            "description": "Premium amount.",
            "format": "double"
          },
          "currency": {
            "type": "string",
            "description": "Premium currency."
          },
          "date": {
            "type": "string",
            "description": "Date when premium paid.",
            "format": "date-time"
          }
        },
        "additionalProperties": false,
        "description": "A class containing information for a given premium payment."
      },
      "PricingContext": {
        "type": "object",
        "properties": {
          "modelRules": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/VendorModelRule"
            },
            "description": "The set of model rules that are available. There may be multiple rules for Vendors, but only one per model-instrument pair.\r\nWhich of these preference sets is used depends upon the model choice selection if specified, or failing that the global default model specification\r\nin the options.",
            "nullable": true
          },
          "modelChoice": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/ModelSelection"
            },
            "description": "The choice of which model selection (vendor library, pricing model) to use in evaluation of a given instrument type.",
            "nullable": true
          },
          "options": {
            "$ref": "#/components/schemas/PricingOptions"
          },
          "resultDataRules": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ResultKeyRule"
            },
            "description": "Set of rules that control querying of unit results either for direct queries into aggregation or for\r\noverriding intermediate calculations. For example, a dirty price is made up from a clean price and the accrued interest.\r\nOne might consider overriding the accrued interest calculated by a model (perhaps one wants to match an external value or simply disagrees with the\r\ncalculated result) and use that in calculation of the dirty price.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Pricing context node. In order to price an instrument a number of configuration parameters are required to determine which\r\n(a) pricing model (ranging from a simple lookup of a market quote/price through to a Monte-Carlo simulation for the behaviour of its cashflows)\r\n(b) vendor library (Lusid internal models or those provided through an external Vendor such as Refinitiv (proprietary) or QuantLib (open source)\r\nare used in the pricing.\r\n\r\nIn conjunction with these there are a number of parameters that govern the behaviour of these models. For example, in pricing an Fx volatility\r\ndependent product such as an Fx option, there are various parameters that affect model behaviour for the smile. In Lusid a distinction is made between\r\nthose which are understood natively and those which are only held for use with a given vendor-model combination. The problem is that, unlike market\r\nquote data, there are few standards around model descriptions. Hence, apparently similar terminology can be mis-leading; for example in SABR models where\r\nthe basic parameters are agreed upon but most practical models have used an approximation with adjustments where the parameters can have wildly different meanings.\r\nTo avoid confusion or mis-behaviour in this area, where parameters are not understood to be interchangeable, they are only settable on a per-library per-model\r\nbasis, essentially as opaque data that will be given to the Vendor library \"verbatim\" but not used with any other."
      },
      "PricingOptions": {
        "type": "object",
        "properties": {
          "modelSelection": {
            "$ref": "#/components/schemas/ModelSelection"
          },
          "useInstrumentTypeToDeterminePricer": {
            "type": "boolean",
            "description": "If true then use the instrument type to set the default instrument pricer\r\nThis applies where no more specific set of overrides are provided on a per-vendor and instrument basis."
          },
          "allowAnyInstrumentsWithSecUidToPriceOffLookup": {
            "type": "boolean",
            "description": "By default, one would not expect to price and exotic instrument, i.e. an instrument with a complicated\r\ninstrument definition simply through looking up a price as there should be a better way of evaluating it.\r\nTo override that behaviour and allow lookup for a price from the instrument identifier(s), set this to true."
          },
          "allowPartiallySuccessfulEvaluation": {
            "type": "boolean",
            "description": "If true then a failure in task evaluation doesn't cause overall failure.\r\nresults will be returned where they succeeded and annotation elsewhere"
          },
          "produceSeparateResultForLinearOtcLegs": {
            "type": "boolean",
            "description": "If true (default), when pricing an Fx-Forward or Interest Rate Swap, Future and other linearly separable products, product two results, one for each leg\r\nrather than a single line result with the amalgamated/summed pv from both legs."
          },
          "enableUseOfCachedUnitResults": {
            "type": "boolean",
            "description": "If true, when pricing using a model or for an instrument that supports use of intermediate cached-results, use them.\r\nDefault is that this caching is turned off."
          },
          "windowValuationOnInstrumentStartEnd": {
            "type": "boolean",
            "description": "If true, when valuing an instrument outside the period where it is 'alive' (the start-maturity window) it will return a valuation of zero"
          },
          "removeContingentCashflowsInPaymentDiary": {
            "type": "boolean",
            "description": "When creating a payment diary, should contingent cash payments (e.g. from exercise of a swaption into a swap) be included or not.\r\ni.e. Is exercise or default being assumed to happen or not."
          },
          "useChildSubHoldingKeysForPortfolioExpansion": {
            "type": "boolean",
            "description": "Should fund constituents inherit subholding keys from the parent subholding keyb"
          },
          "validateDomesticAndQuoteCurrenciesAreConsistent": {
            "type": "boolean",
            "description": "Do we validate that the instrument domestic currency matches the quote currency (unless unknown/zzz) when using lookup pricing."
          },
          "conservedQuantityForLookthroughExpansion": {
            "type": "string",
            "description": "When performing lookthrough portfolio expansion with ScalingMethodology set to \"Sum\" or \"AbsoluteSum\",\r\nthe quantity specified here will be conserved and apportioned to lookthrough constituents.\r\nFor example, an equal-weighting index with 100 constituents can be modelled as a reference portfolio with 1% weights on each equity.\r\nWhen expanding a $9000 holding of that index into its constituents while conserving PV, we end up with $90 of each equity.\r\nThe number of units of each equity held is then implied.\r\nNote that conservation of one quantity may imply non-conservation of others, especially when some constituents are OTCs.\r\n            \r\nAllowed values are: \"PV\" (default), \"Exposure\".",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Options for controlling the default aspects and behaviour of the pricing engine."
      },
      "ProcessedCommand": {
        "required": [
          "description",
          "processedTime",
          "userId"
        ],
        "type": "object",
        "properties": {
          "description": {
            "minLength": 1,
            "type": "string",
            "description": "The description of the command issued."
          },
          "path": {
            "type": "string",
            "description": "The unique identifier for the command including the request id.",
            "nullable": true
          },
          "userId": {
            "$ref": "#/components/schemas/User"
          },
          "processedTime": {
            "type": "string",
            "description": "The asAt datetime that the events published by the processing of this command were committed to LUSID.",
            "format": "date-time"
          }
        },
        "additionalProperties": false,
        "description": "The list of commands."
      },
      "Property": {
        "required": [
          "key"
        ],
        "type": "object",
        "properties": {
          "key": {
            "type": "string",
            "description": "The key of the property. This takes the format {domain}/{scope}/{code} e.g. 'Instrument/system/Name' or 'Transaction/strategy/quantsignal'."
          },
          "value": {
            "$ref": "#/components/schemas/PropertyValue"
          },
          "effectiveFrom": {
            "type": "string",
            "description": "The effective datetime from which the property is valid.",
            "format": "date-time",
            "nullable": true
          },
          "effectiveUntil": {
            "type": "string",
            "description": "The effective datetime until which the property is valid. If not supplied this will be valid indefinitely, or until the next 'effectiveFrom' datetime of the property.",
            "format": "date-time",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PropertyDefinition": {
        "type": "object",
        "properties": {
          "href": {
            "type": "string",
            "description": "The specific Uniform Resource Identifier (URI) for this resource at the requested effective and asAt datetime.",
            "format": "uri",
            "nullable": true
          },
          "key": {
            "type": "string",
            "description": "The property key which uniquely identifies the property. The format for the property key is {domain}/{scope}/{code}, e.g. 'Portfolio/Manager/Id'.",
            "nullable": true
          },
          "valueType": {
            "enum": [
              "String",
              "Int",
              "Decimal",
              "DateTime",
              "Boolean",
              "Map",
              "List",
              "PropertyArray",
              "Percentage",
              "Code",
              "Id",
              "Uri",
              "CurrencyAndAmount",
              "TradePrice",
              "Currency",
              "MetricValue",
              "ResourceId",
              "ResultValue",
              "CutLocalTime",
              "DateOrCutLabel",
              "UnindexedText"
            ],
            "type": "string",
            "description": "The type of values that can be associated with this property. This is defined by the property's data type. The available values are: String, Int, Decimal, DateTime, Boolean, Map, List, PropertyArray, Percentage, Code, Id, Uri, CurrencyAndAmount, TradePrice, Currency, MetricValue, ResourceId, ResultValue, CutLocalTime, DateOrCutLabel, UnindexedText"
          },
          "displayName": {
            "type": "string",
            "description": "The display name of the property.",
            "nullable": true
          },
          "dataTypeId": {
            "$ref": "#/components/schemas/ResourceId"
          },
          "type": {
            "enum": [
              "Label",
              "Metric",
              "Information"
            ],
            "type": "string",
            "description": "The type of the property. The available values are: Label, Metric, Information"
          },
          "unitSchema": {
            "enum": [
              "NoUnits",
              "Basic",
              "Iso4217Currency"
            ],
            "type": "string",
            "description": "The units that can be associated with the property's values. This is defined by the property's data type. The available values are: NoUnits, Basic, Iso4217Currency"
          },
          "domain": {
            "enum": [
              "NotDefined",
              "Transaction",
              "Portfolio",
              "Holding",
              "ReferenceHolding",
              "TransactionConfiguration",
              "Instrument",
              "CutLabelDefinition",
              "Analytic",
              "PortfolioGroup",
              "Person",
              "AccessMetadata",
              "Order",
              "UnitResult",
              "MarketData",
              "ConfigurationRecipe",
              "Allocation",
              "Calendar",
              "LegalEntity",
              "Placement",
              "Execution",
              "Block",
              "Participation",
              "Package",
              "OrderInstruction",
              "NextBestAction",
              "CustomEntity",
              "InstrumentEvent",
              "Account",
              "ChartOfAccounts",
              "CustodianAccount",
              "Abor",
              "AborConfiguration",
              "Reconciliation",
              "PropertyDefinition",
              "Compliance"
            ],
            "type": "string",
            "description": "The domain that the property exists in. The available values are: NotDefined, Transaction, Portfolio, Holding, ReferenceHolding, TransactionConfiguration, Instrument, CutLabelDefinition, Analytic, PortfolioGroup, Person, AccessMetadata, Order, UnitResult, MarketData, ConfigurationRecipe, Allocation, Calendar, LegalEntity, Placement, Execution, Block, Participation, Package, OrderInstruction, NextBestAction, CustomEntity, InstrumentEvent, Account, ChartOfAccounts, CustodianAccount, Abor, AborConfiguration, Reconciliation, PropertyDefinition, Compliance"
          },
          "scope": {
            "type": "string",
            "description": "The scope that the property exists in.",
            "nullable": true,
            "readOnly": true
          },
          "code": {
            "type": "string",
            "description": "The code of the property. Together with the domain and scope this uniquely identifies the property.",
            "nullable": true,
            "readOnly": true
          },
          "valueRequired": {
            "type": "boolean",
            "description": "This field is not implemented and should be disregarded."
          },
          "lifeTime": {
            "enum": [
              "Perpetual",
              "TimeVariant"
            ],
            "type": "string",
            "description": "Describes how the property's values can change over time. The available values are: Perpetual, TimeVariant"
          },
          "constraintStyle": {
            "type": "string",
            "description": "Describes the uniqueness and cardinality of the property for entity objects under the property domain specified in Key.",
            "nullable": true
          },
          "propertyDefinitionType": {
            "enum": [
              "ValueProperty",
              "DerivedDefinition"
            ],
            "type": "string",
            "description": "The definition type (DerivedDefinition or Definition). The available values are: ValueProperty, DerivedDefinition"
          },
          "propertyDescription": {
            "type": "string",
            "description": "A brief description of what a property of this property definition contains.",
            "nullable": true
          },
          "derivationFormula": {
            "type": "string",
            "description": "The rule that defines how data is composed for a derived property.",
            "nullable": true
          },
          "properties": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/Property"
            },
            "description": "Set of unique property definition properties and associated values to store with the property definition. Each property must be from the 'PropertyDefinition' domain.",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "description": "Collection of links.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "A list of property definitions."
      },
      "PropertyDefinitionSearchResult": {
        "type": "object",
        "properties": {
          "href": {
            "type": "string",
            "description": "The specific Uniform Resource Identifier (URI) for this resource at the requested effective and asAt datetime.",
            "format": "uri",
            "nullable": true
          },
          "key": {
            "type": "string",
            "description": "The property key which uniquely identifies the property. The format for the property key is {domain}/{scope}/{code}, e.g. 'Portfolio/Manager/Id'.",
            "nullable": true
          },
          "valueType": {
            "enum": [
              "String",
              "Int",
              "Decimal",
              "DateTime",
              "Boolean",
              "Map",
              "List",
              "PropertyArray",
              "Percentage",
              "Code",
              "Id",
              "Uri",
              "CurrencyAndAmount",
              "TradePrice",
              "Currency",
              "MetricValue",
              "ResourceId",
              "ResultValue",
              "CutLocalTime",
              "DateOrCutLabel",
              "UnindexedText"
            ],
            "type": "string",
            "description": "The type of values that can be associated with this property. This is defined by the property's data type. The available values are: String, Int, Decimal, DateTime, Boolean, Map, List, PropertyArray, Percentage, Code, Id, Uri, CurrencyAndAmount, TradePrice, Currency, MetricValue, ResourceId, ResultValue, CutLocalTime, DateOrCutLabel, UnindexedText"
          },
          "displayName": {
            "type": "string",
            "description": "The display name of the property.",
            "nullable": true
          },
          "dataTypeId": {
            "$ref": "#/components/schemas/ResourceId"
          },
          "type": {
            "enum": [
              "Label",
              "Metric",
              "Information"
            ],
            "type": "string",
            "description": "The type of the property. The available values are: Label, Metric, Information"
          },
          "unitSchema": {
            "enum": [
              "NoUnits",
              "Basic",
              "Iso4217Currency"
            ],
            "type": "string",
            "description": "The units that can be associated with the property's values. This is defined by the property's data type. The available values are: NoUnits, Basic, Iso4217Currency"
          },
          "domain": {
            "enum": [
              "NotDefined",
              "Transaction",
              "Portfolio",
              "Holding",
              "ReferenceHolding",
              "TransactionConfiguration",
              "Instrument",
              "CutLabelDefinition",
              "Analytic",
              "PortfolioGroup",
              "Person",
              "AccessMetadata",
              "Order",
              "UnitResult",
              "MarketData",
              "ConfigurationRecipe",
              "Allocation",
              "Calendar",
              "LegalEntity",
              "Placement",
              "Execution",
              "Block",
              "Participation",
              "Package",
              "OrderInstruction",
              "NextBestAction",
              "CustomEntity",
              "InstrumentEvent",
              "Account",
              "ChartOfAccounts",
              "CustodianAccount",
              "Abor",
              "AborConfiguration",
              "Reconciliation",
              "PropertyDefinition",
              "Compliance"
            ],
            "type": "string",
            "description": "The domain that the property exists in. The available values are: NotDefined, Transaction, Portfolio, Holding, ReferenceHolding, TransactionConfiguration, Instrument, CutLabelDefinition, Analytic, PortfolioGroup, Person, AccessMetadata, Order, UnitResult, MarketData, ConfigurationRecipe, Allocation, Calendar, LegalEntity, Placement, Execution, Block, Participation, Package, OrderInstruction, NextBestAction, CustomEntity, InstrumentEvent, Account, ChartOfAccounts, CustodianAccount, Abor, AborConfiguration, Reconciliation, PropertyDefinition, Compliance"
          },
          "scope": {
            "type": "string",
            "description": "The scope that the property exists in.",
            "nullable": true,
            "readOnly": true
          },
          "code": {
            "type": "string",
            "description": "The code of the property. Together with the domain and scope this uniquely identifies the property.",
            "nullable": true,
            "readOnly": true
          },
          "valueRequired": {
            "type": "boolean",
            "description": "This field is not implemented and should be disregarded."
          },
          "lifeTime": {
            "enum": [
              "Perpetual",
              "TimeVariant"
            ],
            "type": "string",
            "description": "Describes how the property's values can change over time. The available values are: Perpetual, TimeVariant"
          },
          "constraintStyle": {
            "type": "string",
            "description": "Describes the uniqueness and cardinality of the property for entity objects under the property domain specified in Key.",
            "nullable": true
          },
          "propertyDefinitionType": {
            "enum": [
              "ValueProperty",
              "DerivedDefinition"
            ],
            "type": "string",
            "description": "The definition type (DerivedDefinition or Definition). The available values are: ValueProperty, DerivedDefinition"
          },
          "propertyDescription": {
            "type": "string",
            "description": "A brief description of what a property of this property definition contains.",
            "nullable": true
          },
          "derivationFormula": {
            "type": "string",
            "description": "The rule that defines how data is composed for a derived property.",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "description": "Collection of links.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "A property definition search result"
      },
      "PropertyFilter": {
        "type": "object",
        "properties": {
          "left": {
            "type": "string",
            "description": "The key that uniquely identifies a queryable address in Lusid.",
            "nullable": true
          },
          "operator": {
            "enum": [
              "Equals",
              "NotEquals",
              "GreaterThan",
              "GreaterThanOrEqualTo",
              "LessThan",
              "LessThanOrEqualTo",
              "In"
            ],
            "type": "string",
            "description": "The available values are: Equals, NotEquals, GreaterThan, GreaterThanOrEqualTo, LessThan, LessThanOrEqualTo, In"
          },
          "right": {
            "nullable": true
          },
          "rightOperandType": {
            "enum": [
              "Absolute",
              "Property"
            ],
            "type": "string",
            "description": "The available values are: Absolute, Property"
          }
        },
        "additionalProperties": false
      },
      "PropertyInterval": {
        "required": [
          "asAtRange",
          "effectiveRange",
          "status",
          "value"
        ],
        "type": "object",
        "properties": {
          "value": {
            "$ref": "#/components/schemas/PropertyValue"
          },
          "effectiveRange": {
            "$ref": "#/components/schemas/DateRange"
          },
          "asAtRange": {
            "$ref": "#/components/schemas/DateRange"
          },
          "status": {
            "minLength": 1,
            "type": "string",
            "description": "Indicates whether the value is part of the prevailing effective date timeline for the requested asAt date, or whether it has been superseded by correctional activity"
          }
        },
        "additionalProperties": false
      },
      "PropertySchema": {
        "type": "object",
        "properties": {
          "href": {
            "type": "string",
            "format": "uri",
            "nullable": true
          },
          "values": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/FieldSchema"
            },
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "description": "Collection of links.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PropertyValue": {
        "type": "object",
        "properties": {
          "labelValue": {
            "type": "string",
            "description": "The text value of a property defined as having the 'Label' type.",
            "nullable": true
          },
          "metricValue": {
            "$ref": "#/components/schemas/MetricValue"
          },
          "labelValueSet": {
            "$ref": "#/components/schemas/LabelValueSet"
          }
        },
        "additionalProperties": false,
        "description": "The value of the property."
      },
      "Quote": {
        "required": [
          "asAt",
          "quoteId",
          "uploadedBy"
        ],
        "type": "object",
        "properties": {
          "quoteId": {
            "$ref": "#/components/schemas/QuoteId"
          },
          "metricValue": {
            "$ref": "#/components/schemas/MetricValue"
          },
          "lineage": {
            "type": "string",
            "description": "Description of the quote's lineage e.g. 'FundAccountant_GreenQuality'.",
            "nullable": true
          },
          "cutLabel": {
            "type": "string",
            "description": "The cut label that this quote was updated or inserted with.",
            "nullable": true
          },
          "uploadedBy": {
            "minLength": 1,
            "type": "string",
            "description": "The unique id of the user that updated or inserted the quote."
          },
          "asAt": {
            "type": "string",
            "description": "The asAt datetime at which the quote was committed to LUSID.",
            "format": "date-time"
          },
          "scaleFactor": {
            "type": "number",
            "description": "An optional scale factor for non-standard scaling of quotes against the instrument. For example, if you wish the quote's Value to be scaled down by a factor of 100, enter 100. If not supplied, the default ScaleFactor is 1.",
            "format": "double",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "The quote id, value and lineage of the quotes all keyed by a unique correlation id."
      },
      "QuoteDependency": {
        "allOf": [
          {
            "$ref": "#/components/schemas/EconomicDependency"
          },
          {
            "required": [
              "code",
              "date",
              "dependencyType",
              "marketIdentifier"
            ],
            "type": "object",
            "properties": {
              "marketIdentifier": {
                "minLength": 1,
                "type": "string",
                "description": "Type of the code identifying the asset, e.g. ISIN or CUSIP"
              },
              "code": {
                "maxLength": 50,
                "minLength": 0,
                "type": "string",
                "description": "The code identifying the corresponding equity, e.g. US0378331005 if the MarketIdentifier was set to ISIN"
              },
              "date": {
                "type": "string",
                "description": "The effectiveAt of the quote for the identified entity.",
                "format": "date-time"
              },
              "dependencyType": {
                "enum": [
                  "OpaqueDependency",
                  "CashDependency",
                  "DiscountingDependency",
                  "EquityCurveDependency",
                  "EquityVolDependency",
                  "FxDependency",
                  "FxForwardsDependency",
                  "FxVolDependency",
                  "IndexProjectionDependency",
                  "IrVolDependency",
                  "QuoteDependency",
                  "Vendor"
                ],
                "type": "string",
                "description": "The available values are: OpaqueDependency, CashDependency, DiscountingDependency, EquityCurveDependency, EquityVolDependency, FxDependency, FxForwardsDependency, FxVolDependency, IndexProjectionDependency, IrVolDependency, QuoteDependency, Vendor"
              }
            }
          }
        ],
        "description": "For indicating a dependency on the value of an asset at a point in time.\r\nIf the time is omitted, then the dependency is interpreted as the latest value with respect to anything observing it.\r\nE.g. An EquitySwap will declare a dependency on the current price of the underlying equity."
      },
      "QuoteId": {
        "required": [
          "effectiveAt",
          "quoteSeriesId"
        ],
        "type": "object",
        "properties": {
          "quoteSeriesId": {
            "$ref": "#/components/schemas/QuoteSeriesId"
          },
          "effectiveAt": {
            "minLength": 1,
            "type": "string",
            "description": "The effective datetime or cut label at which the quote is valid from.",
            "format": "dateorcutlabel"
          }
        },
        "additionalProperties": false,
        "description": "The unique identifier of the quote."
      },
      "QuoteSeriesId": {
        "required": [
          "field",
          "instrumentId",
          "instrumentIdType",
          "provider",
          "quoteType"
        ],
        "type": "object",
        "properties": {
          "provider": {
            "minLength": 1,
            "type": "string",
            "description": "The platform or vendor that provided the quote. The available values are: Client, DataScope, Lusid, Edi, TraderMade, FactSet, SIX, Bloomberg, Rimes"
          },
          "priceSource": {
            "type": "string",
            "description": "The source or originator of the quote, e.g. a bank or financial institution.",
            "nullable": true
          },
          "instrumentId": {
            "minLength": 1,
            "type": "string",
            "description": "The value of the instrument identifier that uniquely identifies the instrument that the quote is for, e.g. 'BBG00JX0P539'."
          },
          "instrumentIdType": {
            "enum": [
              "LusidInstrumentId",
              "Figi",
              "RIC",
              "QuotePermId",
              "Isin",
              "CurrencyPair",
              "ClientInternal",
              "Sedol",
              "Cusip"
            ],
            "type": "string",
            "description": "The type of instrument identifier used to uniquely identify the instrument that the quote is for, e.g. 'Figi'. The available values are: LusidInstrumentId, Figi, RIC, QuotePermId, Isin, CurrencyPair, ClientInternal, Sedol, Cusip",
            "nullable": true
          },
          "quoteType": {
            "enum": [
              "Price",
              "Spread",
              "Rate",
              "LogNormalVol",
              "NormalVol",
              "ParSpread",
              "IsdaSpread",
              "Upfront",
              "Index",
              "Ratio",
              "Delta"
            ],
            "type": "string",
            "description": "The type of the quote. This allows for quotes other than prices e.g. rates or spreads to be used. The available values are: Price, Spread, Rate, LogNormalVol, NormalVol, ParSpread, IsdaSpread, Upfront, Index, Ratio, Delta",
            "nullable": true
          },
          "field": {
            "minLength": 1,
            "type": "string",
            "description": "The field of the quote e.g. bid, mid, ask etc. This should be consistent across a time series of quotes. The allowed values depend on the provider according to the following rules: Client : *Any value is accepted*; DataScope : 'bid', 'mid', 'ask'; Lusid : *Any value is accepted*; Edi : 'bid', 'mid', 'ask', 'open', 'close', 'last'; TraderMade : 'bid', 'mid', 'ask', 'open', 'close', 'high', 'low'; FactSet : 'bid', 'mid', 'ask', 'open', 'close'; SIX : 'bid', 'mid', 'ask', 'open', 'close', 'last'; Bloomberg : 'bid', 'mid', 'ask', 'open', 'close', 'last'; Rimes : 'bid', 'mid', 'ask', 'open', 'close', 'last'"
          }
        },
        "additionalProperties": false,
        "description": "The time invariant unique identifier of the quote. Combined with the effective datetime of the quote this\r\nuniquely identifies the quote. This can be thought of as a unique identifier for a time series of quotes."
      },
      "RawVendorEvent": {
        "allOf": [
          {
            "$ref": "#/components/schemas/InstrumentEvent"
          },
          {
            "required": [
              "effectiveAt",
              "eventStatus",
              "eventType",
              "eventValue",
              "instrumentEventType"
            ],
            "type": "object",
            "properties": {
              "effectiveAt": {
                "type": "string",
                "description": "The effective date of the event",
                "format": "date-time"
              },
              "eventValue": {
                "$ref": "#/components/schemas/LifeCycleEventValue"
              },
              "eventType": {
                "minLength": 1,
                "type": "string",
                "description": "What type of internal event does this represent; reset, exercise, amortisation etc."
              },
              "eventStatus": {
                "minLength": 1,
                "type": "string",
                "description": "What is the event status, is it a known (ie historic) or unknown (ie projected) event?"
              },
              "instrumentEventType": {
                "enum": [
                  "TransitionEvent",
                  "InformationalEvent",
                  "OpenEvent",
                  "CloseEvent",
                  "StockSplitEvent",
                  "BondDefaultEvent",
                  "CashDividendEvent",
                  "AmortisationEvent",
                  "CashFlowEvent",
                  "ExerciseEvent",
                  "ResetEvent",
                  "TriggerEvent",
                  "RawVendorEvent",
                  "InformationalErrorEvent"
                ],
                "type": "string",
                "description": "The Type of Event. The available values are: TransitionEvent, InformationalEvent, OpenEvent, CloseEvent, StockSplitEvent, BondDefaultEvent, CashDividendEvent, AmortisationEvent, CashFlowEvent, ExerciseEvent, ResetEvent, TriggerEvent, RawVendorEvent, InformationalErrorEvent"
              }
            }
          }
        ],
        "description": "A generic event derived from the economic definition of an instrument. This should be considered purely\r\ninformational; any data provided by this event is not guaranteed to be processable by LUSID."
      },
      "RealisedGainLoss": {
        "required": [
          "costPortfolioCcy",
          "costTradeCcy",
          "instrumentUid",
          "realisedTotal",
          "realisedTradeCcy",
          "units"
        ],
        "type": "object",
        "properties": {
          "instrumentScope": {
            "type": "string",
            "description": "The scope in which the instrument lies.",
            "nullable": true
          },
          "instrumentUid": {
            "minLength": 1,
            "type": "string",
            "description": "The unqiue Lusid Instrument Id (LUID) of the instrument that this gain or loss is associated with."
          },
          "units": {
            "type": "number",
            "description": "The number of units of the associated instrument against which the gain or loss has been realised.",
            "format": "double"
          },
          "purchaseTradeDate": {
            "type": "string",
            "description": "The effective datetime that the units associated with this gain or loss where originally purchased.",
            "format": "date-time",
            "nullable": true,
            "readOnly": true
          },
          "purchaseSettlementDate": {
            "type": "string",
            "description": "The effective datetime that the units associated with this gain or loss where originally settled.",
            "format": "date-time",
            "nullable": true,
            "readOnly": true
          },
          "purchasePrice": {
            "type": "number",
            "description": "The purchase price of each unit associated with this gain or loss.",
            "format": "double",
            "nullable": true
          },
          "costTradeCcy": {
            "$ref": "#/components/schemas/CurrencyAndAmount"
          },
          "costPortfolioCcy": {
            "$ref": "#/components/schemas/CurrencyAndAmount"
          },
          "realisedTradeCcy": {
            "$ref": "#/components/schemas/CurrencyAndAmount"
          },
          "realisedTotal": {
            "$ref": "#/components/schemas/CurrencyAndAmount"
          },
          "realisedMarket": {
            "$ref": "#/components/schemas/CurrencyAndAmount"
          },
          "realisedCurrency": {
            "$ref": "#/components/schemas/CurrencyAndAmount"
          }
        },
        "additionalProperties": false
      },
      "ReconcileDateTimeRule": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ReconciliationRule"
          },
          {
            "required": [
              "appliesTo",
              "comparisonType",
              "ruleType"
            ],
            "type": "object",
            "properties": {
              "comparisonType": {
                "enum": [
                  "Exact",
                  "AbsoluteDifference"
                ],
                "type": "string",
                "description": "The available values are: Exact, AbsoluteDifference"
              },
              "tolerance": {
                "type": "number",
                "description": "For a numeric type only (i.e. decimal, integer, date or datetime offset possibly controversially), this is the quantity used in the comparison.\r\nThe units of the tolerance must be set appropriately for the item being compared.\r\nFor a number such as a currency or amount that will be a simple quantity, for a DateTime or DateTimeOffset it should be days. If fewer than a single day then this should be\r\npassed as a fraction.",
                "format": "double"
              },
              "appliesTo": {
                "$ref": "#/components/schemas/AggregateSpec"
              },
              "ruleType": {
                "enum": [
                  "ReconcileNumericRule",
                  "ReconcileDateTimeRule",
                  "ReconcileStringRule",
                  "ReconcileExact"
                ],
                "type": "string",
                "description": "The available values are: ReconcileNumericRule, ReconcileDateTimeRule, ReconcileStringRule, ReconcileExact"
              }
            }
          }
        ],
        "description": "Comparison of date time values"
      },
      "ReconciledTransaction": {
        "type": "object",
        "properties": {
          "left": {
            "$ref": "#/components/schemas/Transaction"
          },
          "right": {
            "$ref": "#/components/schemas/Transaction"
          },
          "percentageMatch": {
            "type": "number",
            "description": "How good a match this is considered to be.",
            "format": "double"
          },
          "mappingRuleSetResults": {
            "type": "array",
            "items": {
              "type": "boolean"
            },
            "description": "The result of each individual mapping rule result.\r\nWill only be present if both Finbourne.WebApi.Interface.Dto.Reconciliation.ReconciledTransaction.Left and Finbourne.WebApi.Interface.Dto.Reconciliation.ReconciledTransaction.Right are populated.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Information about reconciled transactions.\r\nAt least one of Finbourne.WebApi.Interface.Dto.Reconciliation.ReconciledTransaction.Left and Finbourne.WebApi.Interface.Dto.Reconciliation.ReconciledTransaction.Right will be populated."
      },
      "ReconcileNumericRule": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ReconciliationRule"
          },
          {
            "required": [
              "appliesTo",
              "comparisonType",
              "ruleType"
            ],
            "type": "object",
            "properties": {
              "comparisonType": {
                "enum": [
                  "Exact",
                  "AbsoluteDifference",
                  "RelativeDifference"
                ],
                "type": "string",
                "description": "The available values are: Exact, AbsoluteDifference, RelativeDifference"
              },
              "tolerance": {
                "type": "number",
                "description": "For a numeric type only (i.e. decimal, integer, date or datetime offset possibly controversially), this is the quantity used in the comparison.\r\nThe units of the tolerance must be set appropriately for the item being compared.\r\nFor a number such as a currency or amount that will be a simple quantity, for a DateTime or DateTimeOffset it should be days. If fewer than a single day then this should be\r\npassed as a fraction.",
                "format": "double"
              },
              "appliesTo": {
                "$ref": "#/components/schemas/AggregateSpec"
              },
              "ruleType": {
                "enum": [
                  "ReconcileNumericRule",
                  "ReconcileDateTimeRule",
                  "ReconcileStringRule",
                  "ReconcileExact"
                ],
                "type": "string",
                "description": "The available values are: ReconcileNumericRule, ReconcileDateTimeRule, ReconcileStringRule, ReconcileExact"
              }
            }
          }
        ]
      },
      "ReconcileStringRule": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ReconciliationRule"
          },
          {
            "required": [
              "appliesTo",
              "comparisonType",
              "ruleType"
            ],
            "type": "object",
            "properties": {
              "comparisonType": {
                "enum": [
                  "Exact",
                  "Contains",
                  "CaseInsensitive",
                  "ContainsAnyCase",
                  "IsOneOf"
                ],
                "type": "string",
                "description": "The available values are: Exact, Contains, CaseInsensitive, ContainsAnyCase, IsOneOf"
              },
              "oneOfCandidates": {
                "type": "object",
                "additionalProperties": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "description": "For cases of \"IsOneOf\" a set is required to match values against.\r\nFuzzy matching of strings against one of a set. There can be cases where systems \"A\" and \"B\" might use different terms for the same logical entity. A common case would be\r\ncomparison of something like a day count fraction where some convention like the \"actual 365\" convention might be represented as one of [\"A365\", \"Act365\", \"Actual365\"] or similar.\r\nThis is to allow this kind of fuzzy matching of values. Note that as this is exhaustive comparison across sets it will be slow and should therefore be used sparingly.",
                "nullable": true
              },
              "appliesTo": {
                "$ref": "#/components/schemas/AggregateSpec"
              },
              "ruleType": {
                "enum": [
                  "ReconcileNumericRule",
                  "ReconcileDateTimeRule",
                  "ReconcileStringRule",
                  "ReconcileExact"
                ],
                "type": "string",
                "description": "The available values are: ReconcileNumericRule, ReconcileDateTimeRule, ReconcileStringRule, ReconcileExact"
              }
            }
          }
        ],
        "description": "Comparison of string values"
      },
      "ReconciliationBreak": {
        "required": [
          "differenceCost",
          "differenceUnits",
          "instrumentProperties",
          "instrumentUid",
          "leftCost",
          "leftUnits",
          "rightCost",
          "rightUnits",
          "subHoldingKeys"
        ],
        "type": "object",
        "properties": {
          "instrumentScope": {
            "type": "string",
            "description": "The scope in which the instrument lies.",
            "nullable": true
          },
          "instrumentUid": {
            "minLength": 1,
            "type": "string",
            "description": "Unique instrument identifier"
          },
          "subHoldingKeys": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/PerpetualProperty"
            },
            "description": "Any other properties that comprise the Sub-Holding Key"
          },
          "leftUnits": {
            "type": "number",
            "description": "Units from the left hand side",
            "format": "double"
          },
          "rightUnits": {
            "type": "number",
            "description": "Units from the right hand side",
            "format": "double"
          },
          "differenceUnits": {
            "type": "number",
            "description": "Difference in units",
            "format": "double"
          },
          "leftCost": {
            "$ref": "#/components/schemas/CurrencyAndAmount"
          },
          "rightCost": {
            "$ref": "#/components/schemas/CurrencyAndAmount"
          },
          "differenceCost": {
            "$ref": "#/components/schemas/CurrencyAndAmount"
          },
          "instrumentProperties": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Property"
            },
            "description": "Additional features relating to the instrument"
          }
        },
        "additionalProperties": false,
        "description": "A reconciliation break"
      },
      "ReconciliationLeftRightAddressKeyPair": {
        "required": [
          "left",
          "right"
        ],
        "type": "object",
        "properties": {
          "left": {
            "type": "string",
            "description": "Address key defined by the lhs aggregation"
          },
          "right": {
            "type": "string",
            "description": "Address key defined by the rhs aggregation"
          }
        },
        "additionalProperties": false
      },
      "ReconciliationLine": {
        "type": "object",
        "properties": {
          "left": {
            "type": "object",
            "additionalProperties": {
              "type": "object",
              "additionalProperties": false
            },
            "description": "Left hand side of the comparison",
            "nullable": true
          },
          "right": {
            "type": "object",
            "additionalProperties": {
              "type": "object",
              "additionalProperties": false
            },
            "description": "Right hand side of the comparison",
            "nullable": true
          },
          "difference": {
            "type": "object",
            "additionalProperties": {
              "type": "object",
              "additionalProperties": false
            },
            "description": "Difference between LHS and RHS of comparison",
            "nullable": true
          },
          "resultComparison": {
            "type": "object",
            "additionalProperties": {
              "type": "object",
              "additionalProperties": false
            },
            "description": "The logical or semantic description of the difference, e.g. \"Matches\" or \"MatchesWithTolerance\" or \"Failed\".",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "In evaluating a left and right hand side holding or valuation set, two data records result. These are then compared based on a set of\r\nrules. This results in either a match or failure to match. If there is a match both left and right will be present, otherwise one will not.\r\nA difference will be present if a match was calculated.\r\nThe options used in comparison may result in elision of results where an exact or tolerable match is made."
      },
      "ReconciliationRequest": {
        "required": [
          "left",
          "right"
        ],
        "type": "object",
        "properties": {
          "left": {
            "$ref": "#/components/schemas/ValuationRequest"
          },
          "right": {
            "$ref": "#/components/schemas/ValuationRequest"
          },
          "leftToRightMapping": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ReconciliationLeftRightAddressKeyPair"
            },
            "description": "The mapping from property keys requested by left aggregation to property keys on right hand side",
            "nullable": true
          },
          "comparisonRules": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ReconciliationRule"
            },
            "description": "The set of rules to be used in comparing values. These are the rules that determine what constitues a match.\r\nThe simplest is obviously an exact one-for-one comparison, but tolerances on numerical or date time values and\r\ncase-insensitive string comparison are supported amongst other types.",
            "nullable": true
          },
          "preserveKeys": {
            "type": "array",
            "items": {
              "type": "string",
              "description": "The key that uniquely identifies a queryable address in Lusid."
            },
            "description": "List of keys to preserve (from rhs) in the diff. Used in conjunction with filtering/grouping.\r\nIf two values are equal, for a given key then the value is elided from the results. Setting it here\r\nwill preserve it (takes the values from the RHS and puts it into the line by line results).",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Specification for the reconciliation request. Left and Right hand sides are constructed. Each consists of a valuation of a portfolio\r\nusing an aggregation request. The results of this can then be compared to each other. The difference, which is effectively a risk based\r\ndifference allows comparison of the effects of changing a recipe, valuation date, or (though it may or may not make logical sense) a portfolio.\r\nFor instance, one might look at the difference in risk caused by the addition of transaction to a portfolio, or through changing the valuation\r\nmethodology or system."
      },
      "ReconciliationResponse": {
        "type": "object",
        "properties": {
          "comparisons": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ReconciliationLine"
            },
            "description": "List of comparisons of left to right hand sides.",
            "nullable": true
          },
          "dataSchema": {
            "$ref": "#/components/schemas/ResultDataSchema"
          }
        },
        "additionalProperties": false,
        "description": "Class representing the set of comparisons that result from comparing holdings and their valuations between two separate evaluations."
      },
      "ReconciliationRule": {
        "required": [
          "ruleType"
        ],
        "type": "object",
        "properties": {
          "ruleType": {
            "enum": [
              "ReconcileNumericRule",
              "ReconcileDateTimeRule",
              "ReconcileStringRule",
              "ReconcileExact"
            ],
            "type": "string",
            "description": "The available values are: ReconcileNumericRule, ReconcileDateTimeRule, ReconcileStringRule, ReconcileExact"
          }
        },
        "additionalProperties": false,
        "description": "Base class for representing reconciliation rules in LUSID.\r\nReconciliation rules describe how a comparison between two items in the reconciliation should be performed and what constitutes equality.\r\nThis does not influence WHAT constitutes a match, but only whether once a line has been matched whether an item within it matches another item.\r\nIf a rule is not given for an item, it will default to equality comparison.\r\nThis base class should not be directly instantiated; each supported ReconciliationRuleType has a corresponding inherited class.",
        "discriminator": {
          "propertyName": "ruleType"
        }
      },
      "ReferenceData": {
        "required": [
          "fieldDefinitions",
          "values"
        ],
        "type": "object",
        "properties": {
          "fieldDefinitions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FieldDefinition"
            }
          },
          "values": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FieldValue"
            }
          }
        },
        "additionalProperties": false
      },
      "ReferenceInstrument": {
        "allOf": [
          {
            "$ref": "#/components/schemas/LusidInstrument"
          },
          {
            "required": [
              "instrumentId",
              "instrumentIdType",
              "instrumentType",
              "scope"
            ],
            "type": "object",
            "properties": {
              "instrumentId": {
                "minLength": 1,
                "type": "string",
                "description": "The Identifier code"
              },
              "instrumentIdType": {
                "minLength": 1,
                "type": "string",
                "description": "The type of the instrument id e.g. LusidInstrument Id"
              },
              "scope": {
                "minLength": 1,
                "type": "string",
                "description": "Scope for the instrument (optional)"
              },
              "instrumentType": {
                "enum": [
                  "QuotedSecurity",
                  "InterestRateSwap",
                  "FxForward",
                  "Future",
                  "ExoticInstrument",
                  "FxOption",
                  "CreditDefaultSwap",
                  "InterestRateSwaption",
                  "Bond",
                  "EquityOption",
                  "FixedLeg",
                  "FloatingLeg",
                  "BespokeCashFlowsLeg",
                  "Unknown",
                  "TermDeposit",
                  "ContractForDifference",
                  "EquitySwap",
                  "CashPerpetual",
                  "CapFloor",
                  "CashSettled",
                  "CdsIndex",
                  "Basket",
                  "FundingLeg",
                  "FxSwap",
                  "ForwardRateAgreement",
                  "SimpleInstrument",
                  "Repo",
                  "Equity",
                  "ExchangeTradedOption",
                  "ReferenceInstrument",
                  "ComplexBond",
                  "InflationLinkedBond",
                  "InflationSwap",
                  "SimpleCashFlowLoan"
                ],
                "type": "string",
                "description": "The available values are: QuotedSecurity, InterestRateSwap, FxForward, Future, ExoticInstrument, FxOption, CreditDefaultSwap, InterestRateSwaption, Bond, EquityOption, FixedLeg, FloatingLeg, BespokeCashFlowsLeg, Unknown, TermDeposit, ContractForDifference, EquitySwap, CashPerpetual, CapFloor, CashSettled, CdsIndex, Basket, FundingLeg, FxSwap, ForwardRateAgreement, SimpleInstrument, Repo, Equity, ExchangeTradedOption, ReferenceInstrument, ComplexBond, InflationLinkedBond, InflationSwap, SimpleCashFlowLoan"
              }
            }
          }
        ],
        "description": "LUSID representation of a reference to another instrument that has already been loaded (e.g. a lookthrough to a portfolio)."
      },
      "ReferenceList": {
        "required": [
          "referenceListType"
        ],
        "type": "object",
        "properties": {
          "referenceListType": {
            "enum": [
              "PortfolioGroupIdList",
              "PortfolioIdList",
              "AddressKeyList",
              "StringList",
              "InstrumentList",
              "DecimalList"
            ],
            "type": "string",
            "description": "The reference list values. The available values are: PortfolioGroupIdList, PortfolioIdList, AddressKeyList, StringList, InstrumentList, DecimalList"
          }
        },
        "additionalProperties": false,
        "discriminator": {
          "propertyName": "referenceListType"
        }
      },
      "ReferenceListRequest": {
        "required": [
          "id",
          "name",
          "referenceList"
        ],
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/ResourceId"
          },
          "name": {
            "minLength": 1,
            "type": "string",
            "description": "The name of the reference list."
          },
          "description": {
            "type": "string",
            "description": "The description of the reference list.",
            "nullable": true
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The tags associated with the reference list.",
            "nullable": true
          },
          "referenceList": {
            "$ref": "#/components/schemas/ReferenceList"
          }
        },
        "additionalProperties": false
      },
      "ReferenceListResponse": {
        "required": [
          "id",
          "name",
          "referenceList",
          "version"
        ],
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/ResourceId"
          },
          "name": {
            "minLength": 1,
            "type": "string",
            "description": "The name of the reference list."
          },
          "description": {
            "type": "string",
            "description": "The description of the reference list.",
            "nullable": true
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The tags associated with the reference list.",
            "nullable": true
          },
          "referenceList": {
            "$ref": "#/components/schemas/ReferenceList"
          },
          "version": {
            "$ref": "#/components/schemas/Version"
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "description": "Collection of links.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ReferencePortfolioConstituent": {
        "required": [
          "currency",
          "instrumentUid",
          "weight"
        ],
        "type": "object",
        "properties": {
          "instrumentIdentifiers": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "Unique instrument identifiers",
            "nullable": true
          },
          "instrumentUid": {
            "minLength": 1,
            "type": "string",
            "description": "LUSID's internal unique instrument identifier, resolved from the instrument identifiers"
          },
          "currency": {
            "type": "string",
            "description": ""
          },
          "properties": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/PerpetualProperty"
            },
            "description": "Properties associated with the constituent",
            "nullable": true
          },
          "weight": {
            "type": "number",
            "description": "",
            "format": "double"
          },
          "floatingWeight": {
            "type": "number",
            "description": "",
            "format": "double",
            "nullable": true
          },
          "instrumentScope": {
            "type": "string",
            "description": "",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ReferencePortfolioConstituentRequest": {
        "required": [
          "instrumentIdentifiers",
          "weight"
        ],
        "type": "object",
        "properties": {
          "instrumentIdentifiers": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "Unique instrument identifiers"
          },
          "properties": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/PerpetualProperty"
            },
            "nullable": true
          },
          "weight": {
            "type": "number",
            "description": "",
            "format": "double"
          },
          "currency": {
            "type": "string",
            "description": "",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "RelatedEntity": {
        "required": [
          "displayName",
          "entityId",
          "entityType",
          "identifiers"
        ],
        "type": "object",
        "properties": {
          "entityType": {
            "minLength": 1,
            "type": "string",
            "description": "The type of the entity."
          },
          "entityId": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "The identifier of the other related entity in the relationship. It contains 'scope' and 'code' as keys for identifiers of a Portfolio or Portfolio Group, or 'idTypeScope', 'idTypeCode', 'code' as keys for identifiers of a Person or Legal Entity."
          },
          "displayName": {
            "minLength": 1,
            "type": "string",
            "description": "The display name of the entity."
          },
          "properties": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/Property"
            },
            "description": "The properties of the entity. This field is empty until further notice.",
            "nullable": true
          },
          "scope": {
            "type": "string",
            "description": "The scope of the identifier",
            "nullable": true
          },
          "lusidUniqueId": {
            "$ref": "#/components/schemas/LusidUniqueId"
          },
          "identifiers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EntityIdentifier"
            },
            "description": "The identifiers of the related entity in the relationship."
          },
          "href": {
            "type": "string",
            "description": "The link to the entity.",
            "format": "uri",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Information about the other related entity in the relationship"
      },
      "Relation": {
        "required": [
          "relatedEntityId",
          "relationDefinitionId",
          "traversalDescription",
          "traversalDirection"
        ],
        "type": "object",
        "properties": {
          "version": {
            "$ref": "#/components/schemas/Version"
          },
          "relationDefinitionId": {
            "$ref": "#/components/schemas/ResourceId"
          },
          "relatedEntityId": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "traversalDirection": {
            "minLength": 1,
            "type": "string"
          },
          "traversalDescription": {
            "minLength": 1,
            "type": "string"
          },
          "effectiveFrom": {
            "type": "string",
            "format": "date-time"
          }
        },
        "additionalProperties": false,
        "description": "Representation of a Relation between a requested entity with the stated entity as RelationedEntityId"
      },
      "Relationship": {
        "required": [
          "relatedEntity",
          "relationshipDefinitionId",
          "traversalDescription",
          "traversalDirection"
        ],
        "type": "object",
        "properties": {
          "version": {
            "$ref": "#/components/schemas/Version"
          },
          "relationshipDefinitionId": {
            "$ref": "#/components/schemas/ResourceId"
          },
          "relatedEntity": {
            "$ref": "#/components/schemas/RelatedEntity"
          },
          "traversalDirection": {
            "minLength": 1,
            "type": "string",
            "description": "Direction of relationship between the requested entity and related entity. This can be 'In' or 'Out'. Read more about relationships traversal direction in LUSID Knowledge Base here https://support.lusid.com/knowledgebase/article/KA-01679."
          },
          "traversalDescription": {
            "minLength": 1,
            "type": "string",
            "description": "Description of the relationship based on relationship's traversal direction. If 'TraversalDirection' is 'Out', this description would be 'OutwardDescription' from the associated relationship definition. If 'TraversalDirection' is 'In', this description would be 'InwardDescription' from the associated relationship definition."
          },
          "effectiveFrom": {
            "type": "string",
            "description": "The effective datetime from which the relationship is valid.",
            "format": "date-time"
          },
          "effectiveUntil": {
            "type": "string",
            "description": "The effective datetime until which the relationship is valid. If no future deletions are present or an effective until has not been set for the relationship, this will be indefinite and represented by the maximum date.",
            "format": "date-time"
          }
        },
        "additionalProperties": false,
        "description": "Representation of a Relationship between a requested entity with the stated entity as RelatedEntityId"
      },
      "RelationshipDefinition": {
        "required": [
          "displayName",
          "inwardDescription",
          "lifeTime",
          "outwardDescription",
          "relationshipCardinality",
          "relationshipDefinitionId",
          "sourceEntityType",
          "targetEntityType"
        ],
        "type": "object",
        "properties": {
          "version": {
            "$ref": "#/components/schemas/Version"
          },
          "relationshipDefinitionId": {
            "$ref": "#/components/schemas/ResourceId"
          },
          "sourceEntityType": {
            "minLength": 1,
            "type": "string",
            "description": "The entity type of the source entity object."
          },
          "targetEntityType": {
            "minLength": 1,
            "type": "string",
            "description": "The entity type of the target entity object."
          },
          "displayName": {
            "maxLength": 512,
            "minLength": 1,
            "pattern": "^[\\s\\S]*$",
            "type": "string",
            "description": "The display name of the relationship."
          },
          "outwardDescription": {
            "maxLength": 512,
            "minLength": 1,
            "pattern": "^[\\s\\S]*$",
            "type": "string",
            "description": "The description to relate source entity object and target entity object"
          },
          "inwardDescription": {
            "maxLength": 512,
            "minLength": 1,
            "pattern": "^[\\s\\S]*$",
            "type": "string",
            "description": "The description to relate target entity object and source entity object"
          },
          "lifeTime": {
            "minLength": 1,
            "type": "string",
            "description": "Describes how the relationships can change over time."
          },
          "relationshipCardinality": {
            "minLength": 1,
            "type": "string",
            "description": "Describes the cardinality of the relationship between source entity and target entity."
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "description": "Collection of links.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Repo": {
        "allOf": [
          {
            "$ref": "#/components/schemas/LusidInstrument"
          },
          {
            "required": [
              "accrualBasis",
              "domCcy",
              "instrumentType",
              "maturityDate",
              "startDate"
            ],
            "type": "object",
            "properties": {
              "startDate": {
                "type": "string",
                "description": "The start date of the instrument. This is normally synonymous with the trade-date.",
                "format": "date-time"
              },
              "maturityDate": {
                "type": "string",
                "description": "The final maturity date of the instrument. This means the last date on which the instruments makes a payment of any amount.\r\nFor the avoidance of doubt, that is not necessarily prior to its last sensitivity date for the purposes of risk; e.g. instruments such as\r\nConstant Maturity Swaps (CMS) often have sensitivities to rates that may well be observed or set prior to the maturity date, but refer to a termination date beyond it.",
                "format": "date-time"
              },
              "domCcy": {
                "type": "string",
                "description": "The domestic currency of the instrument."
              },
              "accrualBasis": {
                "minLength": 1,
                "type": "string",
                "description": "For calculation of interest, the accrual basis to be used.\r\nFor more information on day counts, see [knowledge base article KA-01798](https://support.lusid.com/knowledgebase/article/KA-01798)\r\n            \r\nSupported string (enumeration) values are: [Actual360, Act360, MoneyMarket, Actual365, Act365, Thirty360, ThirtyU360, Bond, ThirtyE360, EuroBond, ActualActual, ActAct, ActActIsda, ActActIsma, ActActIcma, OneOne, Act364, Act365F, Act365L, Act365_25, Act252, Bus252, NL360, NL365, ActActAFB, Act365Cad, ThirtyActIsda, Thirty365Isda, ThirtyEActIsda, ThirtyE360Isda, ThirtyE365Isda, ThirtyU360EOM]."
              },
              "collateral": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/LusidInstrument"
                },
                "description": "The actual collateral in the Repo.\r\nThis property is for informational purposes only, Lusid pricing is not affected.",
                "nullable": true
              },
              "collateralValue": {
                "type": "number",
                "description": "The full market value of the collateral in domestic currency, before any margin or haircut is applied.",
                "format": "double",
                "nullable": true
              },
              "haircut": {
                "type": "number",
                "description": "The haircut (or margin percentage) applied to the collateral, this should be a number between 0 and 1, i.e. for a 5% haircut this should be 0.05.\r\nThis is defined as (CollateralValue - PurchasePrice) / CollateralValue.\r\nIf this property is specified, so too must CollateralValue.\r\nWhile this property is optional, one, and only one, of PurchasePrice, Margin and Haircut must be specified.",
                "format": "double",
                "nullable": true
              },
              "margin": {
                "type": "number",
                "description": "The initial margin (or margin ratio) applied to the collateral, this should be a number greater than or equal to 1.0,\r\ni.e. for a 102% margin this should be 1.02. A value of 1.0 means no margin (100%).\r\nThis is defined as CollateralValue / PurchasePrice.\r\nIf this property is specified, so too must CollateralValue.\r\nWhile this property is optional, one, and only one, of PurchasePrice, Margin and Haircut must be specified.",
                "format": "double",
                "nullable": true
              },
              "purchasePrice": {
                "type": "number",
                "description": "The price the collateral is initially purchased for, this property can be used to explicitly set the purchase price and not require\r\ncollateral value and a margin or haircut.\r\nWhile this property is optional, one, and only one, of PurchasePrice, Margin and Haircut must be specified.",
                "format": "double",
                "nullable": true
              },
              "repoRate": {
                "type": "number",
                "description": "The rate at which interest is to be accrue and be paid upon redemption of the collateral at maturity.\r\nThis field is used to calculate the Repurchase price.\r\nWhile this property is optional, one, and only one, of the RepoRate and RepurchasePrice must be specified.",
                "format": "double",
                "nullable": true
              },
              "repurchasePrice": {
                "type": "number",
                "description": "The price at which the collateral is repurchased, this field is optional and can be explicitly set here or will be calculated\r\nfrom the PurchasePrice and RepoRate.\r\nOne, and only one, of the RepoRate and RepurchasePrice must be specified.",
                "format": "double",
                "nullable": true
              },
              "instrumentType": {
                "enum": [
                  "QuotedSecurity",
                  "InterestRateSwap",
                  "FxForward",
                  "Future",
                  "ExoticInstrument",
                  "FxOption",
                  "CreditDefaultSwap",
                  "InterestRateSwaption",
                  "Bond",
                  "EquityOption",
                  "FixedLeg",
                  "FloatingLeg",
                  "BespokeCashFlowsLeg",
                  "Unknown",
                  "TermDeposit",
                  "ContractForDifference",
                  "EquitySwap",
                  "CashPerpetual",
                  "CapFloor",
                  "CashSettled",
                  "CdsIndex",
                  "Basket",
                  "FundingLeg",
                  "FxSwap",
                  "ForwardRateAgreement",
                  "SimpleInstrument",
                  "Repo",
                  "Equity",
                  "ExchangeTradedOption",
                  "ReferenceInstrument",
                  "ComplexBond",
                  "InflationLinkedBond",
                  "InflationSwap",
                  "SimpleCashFlowLoan"
                ],
                "type": "string",
                "description": "The available values are: QuotedSecurity, InterestRateSwap, FxForward, Future, ExoticInstrument, FxOption, CreditDefaultSwap, InterestRateSwaption, Bond, EquityOption, FixedLeg, FloatingLeg, BespokeCashFlowsLeg, Unknown, TermDeposit, ContractForDifference, EquitySwap, CashPerpetual, CapFloor, CashSettled, CdsIndex, Basket, FundingLeg, FxSwap, ForwardRateAgreement, SimpleInstrument, Repo, Equity, ExchangeTradedOption, ReferenceInstrument, ComplexBond, InflationLinkedBond, InflationSwap, SimpleCashFlowLoan"
              }
            }
          }
        ],
        "description": "LUSID representation of a sale and repurchase agreement, supporting haircut, margin or repo rate methods."
      },
      "ResetEvent": {
        "allOf": [
          {
            "$ref": "#/components/schemas/InstrumentEvent"
          },
          {
            "required": [
              "eventStatus",
              "fixingDate",
              "instrumentEventType",
              "resetType"
            ],
            "type": "object",
            "properties": {
              "value": {
                "type": "number",
                "description": "The quantity associated with the reset. This will only be populated if the information is known.",
                "format": "double",
                "nullable": true
              },
              "resetType": {
                "minLength": 1,
                "type": "string",
                "description": "The type of the reset; e.g. RIC, Currency-pair"
              },
              "fixingSource": {
                "type": "string",
                "description": "Fixing identification source, if available.",
                "nullable": true
              },
              "eventStatus": {
                "minLength": 1,
                "type": "string",
                "description": "What is the event status, is it a known (ie historic) or unknown (ie projected) event?"
              },
              "fixingDate": {
                "type": "string",
                "description": "The date the reset fixes, or is observed upon.",
                "format": "date-time"
              },
              "instrumentEventType": {
                "enum": [
                  "TransitionEvent",
                  "InformationalEvent",
                  "OpenEvent",
                  "CloseEvent",
                  "StockSplitEvent",
                  "BondDefaultEvent",
                  "CashDividendEvent",
                  "AmortisationEvent",
                  "CashFlowEvent",
                  "ExerciseEvent",
                  "ResetEvent",
                  "TriggerEvent",
                  "RawVendorEvent",
                  "InformationalErrorEvent"
                ],
                "type": "string",
                "description": "The Type of Event. The available values are: TransitionEvent, InformationalEvent, OpenEvent, CloseEvent, StockSplitEvent, BondDefaultEvent, CashDividendEvent, AmortisationEvent, CashFlowEvent, ExerciseEvent, ResetEvent, TriggerEvent, RawVendorEvent, InformationalErrorEvent"
              }
            }
          }
        ],
        "description": "Definition of a reset event.\r\nThis is an event that describes a reset or fixing for an instrument such as the floating payment on\r\na swap cash flow."
      },
      "ResourceId": {
        "required": [
          "code",
          "scope"
        ],
        "type": "object",
        "properties": {
          "scope": {
            "maxLength": 512,
            "minLength": 1,
            "type": "string",
            "description": "The scope used to identify an entity"
          },
          "code": {
            "maxLength": 512,
            "minLength": 1,
            "type": "string",
            "description": "The code used to identify an entity"
          }
        },
        "additionalProperties": false,
        "description": "Identifiers of an entity"
      },
      "ResourceListOfAccessControlledResource": {
        "required": [
          "values"
        ],
        "type": "object",
        "properties": {
          "values": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AccessControlledResource"
            },
            "description": "The resources to list."
          },
          "href": {
            "type": "string",
            "description": "The URI of the resource list.",
            "format": "uri",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "description": "Collection of links.",
            "nullable": true
          },
          "nextPage": {
            "type": "string",
            "description": "The next page of results.",
            "nullable": true
          },
          "previousPage": {
            "type": "string",
            "description": "The previous page of results.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "A collection of resources that can be returned from requests."
      },
      "ResourceListOfAccessMetadataValueOf": {
        "required": [
          "values"
        ],
        "type": "object",
        "properties": {
          "values": {
            "type": "array",
            "items": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/AccessMetadataValue"
              }
            },
            "description": "The resources to list."
          },
          "href": {
            "type": "string",
            "description": "The URI of the resource list.",
            "format": "uri",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "description": "Collection of links.",
            "nullable": true
          },
          "nextPage": {
            "type": "string",
            "description": "The next page of results.",
            "nullable": true
          },
          "previousPage": {
            "type": "string",
            "description": "The previous page of results.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "A collection of resources that can be returned from requests."
      },
      "ResourceListOfAggregationQuery": {
        "required": [
          "values"
        ],
        "type": "object",
        "properties": {
          "values": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AggregationQuery"
            },
            "description": "The resources to list."
          },
          "href": {
            "type": "string",
            "description": "The URI of the resource list.",
            "format": "uri",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "description": "Collection of links.",
            "nullable": true
          },
          "nextPage": {
            "type": "string",
            "description": "The next page of results.",
            "nullable": true
          },
          "previousPage": {
            "type": "string",
            "description": "The previous page of results.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "A collection of resources that can be returned from requests."
      },
      "ResourceListOfAllocation": {
        "required": [
          "values"
        ],
        "type": "object",
        "properties": {
          "values": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Allocation"
            },
            "description": "The resources to list."
          },
          "href": {
            "type": "string",
            "description": "The URI of the resource list.",
            "format": "uri",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "description": "Collection of links.",
            "nullable": true
          },
          "nextPage": {
            "type": "string",
            "description": "The next page of results.",
            "nullable": true
          },
          "previousPage": {
            "type": "string",
            "description": "The previous page of results.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "A collection of resources that can be returned from requests."
      },
      "ResourceListOfBlock": {
        "required": [
          "values"
        ],
        "type": "object",
        "properties": {
          "values": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Block"
            },
            "description": "The resources to list."
          },
          "href": {
            "type": "string",
            "description": "The URI of the resource list.",
            "format": "uri",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "description": "Collection of links.",
            "nullable": true
          },
          "nextPage": {
            "type": "string",
            "description": "The next page of results.",
            "nullable": true
          },
          "previousPage": {
            "type": "string",
            "description": "The previous page of results.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "A collection of resources that can be returned from requests."
      },
      "ResourceListOfCalendarDate": {
        "required": [
          "values"
        ],
        "type": "object",
        "properties": {
          "values": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CalendarDate"
            },
            "description": "The resources to list."
          },
          "href": {
            "type": "string",
            "description": "The URI of the resource list.",
            "format": "uri",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "description": "Collection of links.",
            "nullable": true
          },
          "nextPage": {
            "type": "string",
            "description": "The next page of results.",
            "nullable": true
          },
          "previousPage": {
            "type": "string",
            "description": "The previous page of results.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "A collection of resources that can be returned from requests."
      },
      "ResourceListOfChange": {
        "required": [
          "values"
        ],
        "type": "object",
        "properties": {
          "values": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Change"
            },
            "description": "The resources to list."
          },
          "href": {
            "type": "string",
            "description": "The URI of the resource list.",
            "format": "uri",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "description": "Collection of links.",
            "nullable": true
          },
          "nextPage": {
            "type": "string",
            "description": "The next page of results.",
            "nullable": true
          },
          "previousPage": {
            "type": "string",
            "description": "The previous page of results.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "A collection of resources that can be returned from requests."
      },
      "ResourceListOfChangeHistory": {
        "required": [
          "values"
        ],
        "type": "object",
        "properties": {
          "values": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ChangeHistory"
            },
            "description": "The resources to list."
          },
          "href": {
            "type": "string",
            "description": "The URI of the resource list.",
            "format": "uri",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "description": "Collection of links.",
            "nullable": true
          },
          "nextPage": {
            "type": "string",
            "description": "The next page of results.",
            "nullable": true
          },
          "previousPage": {
            "type": "string",
            "description": "The previous page of results.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "A collection of resources that can be returned from requests."
      },
      "ResourceListOfConstituentsAdjustmentHeader": {
        "required": [
          "values"
        ],
        "type": "object",
        "properties": {
          "values": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ConstituentsAdjustmentHeader"
            },
            "description": "The resources to list."
          },
          "href": {
            "type": "string",
            "description": "The URI of the resource list.",
            "format": "uri",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "description": "Collection of links.",
            "nullable": true
          },
          "nextPage": {
            "type": "string",
            "description": "The next page of results.",
            "nullable": true
          },
          "previousPage": {
            "type": "string",
            "description": "The previous page of results.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "A collection of resources that can be returned from requests."
      },
      "ResourceListOfCorporateAction": {
        "required": [
          "values"
        ],
        "type": "object",
        "properties": {
          "values": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CorporateAction"
            },
            "description": "The resources to list."
          },
          "href": {
            "type": "string",
            "description": "The URI of the resource list.",
            "format": "uri",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "description": "Collection of links.",
            "nullable": true
          },
          "nextPage": {
            "type": "string",
            "description": "The next page of results.",
            "nullable": true
          },
          "previousPage": {
            "type": "string",
            "description": "The previous page of results.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "A collection of resources that can be returned from requests."
      },
      "ResourceListOfDataType": {
        "required": [
          "values"
        ],
        "type": "object",
        "properties": {
          "values": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DataType"
            },
            "description": "The resources to list."
          },
          "href": {
            "type": "string",
            "description": "The URI of the resource list.",
            "format": "uri",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "description": "Collection of links.",
            "nullable": true
          },
          "nextPage": {
            "type": "string",
            "description": "The next page of results.",
            "nullable": true
          },
          "previousPage": {
            "type": "string",
            "description": "The previous page of results.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "A collection of resources that can be returned from requests."
      },
      "ResourceListOfExecution": {
        "required": [
          "values"
        ],
        "type": "object",
        "properties": {
          "values": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Execution"
            },
            "description": "The resources to list."
          },
          "href": {
            "type": "string",
            "description": "The URI of the resource list.",
            "format": "uri",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "description": "Collection of links.",
            "nullable": true
          },
          "nextPage": {
            "type": "string",
            "description": "The next page of results.",
            "nullable": true
          },
          "previousPage": {
            "type": "string",
            "description": "The previous page of results.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "A collection of resources that can be returned from requests."
      },
      "ResourceListOfGetCounterpartyAgreementResponse": {
        "required": [
          "values"
        ],
        "type": "object",
        "properties": {
          "values": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GetCounterpartyAgreementResponse"
            },
            "description": "The resources to list."
          },
          "href": {
            "type": "string",
            "description": "The URI of the resource list.",
            "format": "uri",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "description": "Collection of links.",
            "nullable": true
          },
          "nextPage": {
            "type": "string",
            "description": "The next page of results.",
            "nullable": true
          },
          "previousPage": {
            "type": "string",
            "description": "The previous page of results.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "A collection of resources that can be returned from requests."
      },
      "ResourceListOfGetCreditSupportAnnexResponse": {
        "required": [
          "values"
        ],
        "type": "object",
        "properties": {
          "values": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GetCreditSupportAnnexResponse"
            },
            "description": "The resources to list."
          },
          "href": {
            "type": "string",
            "description": "The URI of the resource list.",
            "format": "uri",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "description": "Collection of links.",
            "nullable": true
          },
          "nextPage": {
            "type": "string",
            "description": "The next page of results.",
            "nullable": true
          },
          "previousPage": {
            "type": "string",
            "description": "The previous page of results.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "A collection of resources that can be returned from requests."
      },
      "ResourceListOfGetRecipeResponse": {
        "required": [
          "values"
        ],
        "type": "object",
        "properties": {
          "values": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GetRecipeResponse"
            },
            "description": "The resources to list."
          },
          "href": {
            "type": "string",
            "description": "The URI of the resource list.",
            "format": "uri",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "description": "Collection of links.",
            "nullable": true
          },
          "nextPage": {
            "type": "string",
            "description": "The next page of results.",
            "nullable": true
          },
          "previousPage": {
            "type": "string",
            "description": "The previous page of results.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "A collection of resources that can be returned from requests."
      },
      "ResourceListOfHoldingsAdjustmentHeader": {
        "required": [
          "values"
        ],
        "type": "object",
        "properties": {
          "values": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/HoldingsAdjustmentHeader"
            },
            "description": "The resources to list."
          },
          "href": {
            "type": "string",
            "description": "The URI of the resource list.",
            "format": "uri",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "description": "Collection of links.",
            "nullable": true
          },
          "nextPage": {
            "type": "string",
            "description": "The next page of results.",
            "nullable": true
          },
          "previousPage": {
            "type": "string",
            "description": "The previous page of results.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "A collection of resources that can be returned from requests."
      },
      "ResourceListOfInstrumentIdTypeDescriptor": {
        "required": [
          "values"
        ],
        "type": "object",
        "properties": {
          "values": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/InstrumentIdTypeDescriptor"
            },
            "description": "The resources to list."
          },
          "href": {
            "type": "string",
            "description": "The URI of the resource list.",
            "format": "uri",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "description": "Collection of links.",
            "nullable": true
          },
          "nextPage": {
            "type": "string",
            "description": "The next page of results.",
            "nullable": true
          },
          "previousPage": {
            "type": "string",
            "description": "The previous page of results.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "A collection of resources that can be returned from requests."
      },
      "ResourceListOfIUnitDefinitionDto": {
        "required": [
          "values"
        ],
        "type": "object",
        "properties": {
          "values": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IUnitDefinitionDto"
            },
            "description": "The resources to list."
          },
          "href": {
            "type": "string",
            "description": "The URI of the resource list.",
            "format": "uri",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "description": "Collection of links.",
            "nullable": true
          },
          "nextPage": {
            "type": "string",
            "description": "The next page of results.",
            "nullable": true
          },
          "previousPage": {
            "type": "string",
            "description": "The previous page of results.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "A collection of resources that can be returned from requests."
      },
      "ResourceListOfLegalEntity": {
        "required": [
          "values"
        ],
        "type": "object",
        "properties": {
          "values": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LegalEntity"
            },
            "description": "The resources to list."
          },
          "href": {
            "type": "string",
            "description": "The URI of the resource list.",
            "format": "uri",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "description": "Collection of links.",
            "nullable": true
          },
          "nextPage": {
            "type": "string",
            "description": "The next page of results.",
            "nullable": true
          },
          "previousPage": {
            "type": "string",
            "description": "The previous page of results.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "A collection of resources that can be returned from requests."
      },
      "ResourceListOfMapping": {
        "required": [
          "values"
        ],
        "type": "object",
        "properties": {
          "values": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Mapping"
            },
            "description": "The resources to list."
          },
          "href": {
            "type": "string",
            "description": "The URI of the resource list.",
            "format": "uri",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "description": "Collection of links.",
            "nullable": true
          },
          "nextPage": {
            "type": "string",
            "description": "The next page of results.",
            "nullable": true
          },
          "previousPage": {
            "type": "string",
            "description": "The previous page of results.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "A collection of resources that can be returned from requests."
      },
      "ResourceListOfOrder": {
        "required": [
          "values"
        ],
        "type": "object",
        "properties": {
          "values": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Order"
            },
            "description": "The resources to list."
          },
          "href": {
            "type": "string",
            "description": "The URI of the resource list.",
            "format": "uri",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "description": "Collection of links.",
            "nullable": true
          },
          "nextPage": {
            "type": "string",
            "description": "The next page of results.",
            "nullable": true
          },
          "previousPage": {
            "type": "string",
            "description": "The previous page of results.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "A collection of resources that can be returned from requests."
      },
      "ResourceListOfParticipation": {
        "required": [
          "values"
        ],
        "type": "object",
        "properties": {
          "values": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Participation"
            },
            "description": "The resources to list."
          },
          "href": {
            "type": "string",
            "description": "The URI of the resource list.",
            "format": "uri",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "description": "Collection of links.",
            "nullable": true
          },
          "nextPage": {
            "type": "string",
            "description": "The next page of results.",
            "nullable": true
          },
          "previousPage": {
            "type": "string",
            "description": "The previous page of results.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "A collection of resources that can be returned from requests."
      },
      "ResourceListOfPerformanceReturn": {
        "required": [
          "values"
        ],
        "type": "object",
        "properties": {
          "values": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PerformanceReturn"
            },
            "description": "The resources to list."
          },
          "href": {
            "type": "string",
            "description": "The URI of the resource list.",
            "format": "uri",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "description": "Collection of links.",
            "nullable": true
          },
          "nextPage": {
            "type": "string",
            "description": "The next page of results.",
            "nullable": true
          },
          "previousPage": {
            "type": "string",
            "description": "The previous page of results.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "A collection of resources that can be returned from requests."
      },
      "ResourceListOfPerson": {
        "required": [
          "values"
        ],
        "type": "object",
        "properties": {
          "values": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Person"
            },
            "description": "The resources to list."
          },
          "href": {
            "type": "string",
            "description": "The URI of the resource list.",
            "format": "uri",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "description": "Collection of links.",
            "nullable": true
          },
          "nextPage": {
            "type": "string",
            "description": "The next page of results.",
            "nullable": true
          },
          "previousPage": {
            "type": "string",
            "description": "The previous page of results.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "A collection of resources that can be returned from requests."
      },
      "ResourceListOfPlacement": {
        "required": [
          "values"
        ],
        "type": "object",
        "properties": {
          "values": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Placement"
            },
            "description": "The resources to list."
          },
          "href": {
            "type": "string",
            "description": "The URI of the resource list.",
            "format": "uri",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "description": "Collection of links.",
            "nullable": true
          },
          "nextPage": {
            "type": "string",
            "description": "The next page of results.",
            "nullable": true
          },
          "previousPage": {
            "type": "string",
            "description": "The previous page of results.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "A collection of resources that can be returned from requests."
      },
      "ResourceListOfPortfolio": {
        "required": [
          "values"
        ],
        "type": "object",
        "properties": {
          "values": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Portfolio"
            },
            "description": "The resources to list."
          },
          "href": {
            "type": "string",
            "description": "The URI of the resource list.",
            "format": "uri",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "description": "Collection of links.",
            "nullable": true
          },
          "nextPage": {
            "type": "string",
            "description": "The next page of results.",
            "nullable": true
          },
          "previousPage": {
            "type": "string",
            "description": "The previous page of results.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "A collection of resources that can be returned from requests."
      },
      "ResourceListOfPortfolioCashFlow": {
        "required": [
          "values"
        ],
        "type": "object",
        "properties": {
          "values": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PortfolioCashFlow"
            },
            "description": "The resources to list."
          },
          "href": {
            "type": "string",
            "description": "The URI of the resource list.",
            "format": "uri",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "description": "Collection of links.",
            "nullable": true
          },
          "nextPage": {
            "type": "string",
            "description": "The next page of results.",
            "nullable": true
          },
          "previousPage": {
            "type": "string",
            "description": "The previous page of results.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "A collection of resources that can be returned from requests."
      },
      "ResourceListOfPortfolioCashLadder": {
        "required": [
          "values"
        ],
        "type": "object",
        "properties": {
          "values": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PortfolioCashLadder"
            },
            "description": "The resources to list."
          },
          "href": {
            "type": "string",
            "description": "The URI of the resource list.",
            "format": "uri",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "description": "Collection of links.",
            "nullable": true
          },
          "nextPage": {
            "type": "string",
            "description": "The next page of results.",
            "nullable": true
          },
          "previousPage": {
            "type": "string",
            "description": "The previous page of results.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "A collection of resources that can be returned from requests."
      },
      "ResourceListOfPortfolioGroup": {
        "required": [
          "values"
        ],
        "type": "object",
        "properties": {
          "values": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PortfolioGroup"
            },
            "description": "The resources to list."
          },
          "href": {
            "type": "string",
            "description": "The URI of the resource list.",
            "format": "uri",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "description": "Collection of links.",
            "nullable": true
          },
          "nextPage": {
            "type": "string",
            "description": "The next page of results.",
            "nullable": true
          },
          "previousPage": {
            "type": "string",
            "description": "The previous page of results.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "A collection of resources that can be returned from requests."
      },
      "ResourceListOfProcessedCommand": {
        "required": [
          "values"
        ],
        "type": "object",
        "properties": {
          "values": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProcessedCommand"
            },
            "description": "The resources to list."
          },
          "href": {
            "type": "string",
            "description": "The URI of the resource list.",
            "format": "uri",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "description": "Collection of links.",
            "nullable": true
          },
          "nextPage": {
            "type": "string",
            "description": "The next page of results.",
            "nullable": true
          },
          "previousPage": {
            "type": "string",
            "description": "The previous page of results.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "A collection of resources that can be returned from requests."
      },
      "ResourceListOfProperty": {
        "required": [
          "values"
        ],
        "type": "object",
        "properties": {
          "values": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Property"
            },
            "description": "The resources to list."
          },
          "href": {
            "type": "string",
            "description": "The URI of the resource list.",
            "format": "uri",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "description": "Collection of links.",
            "nullable": true
          },
          "nextPage": {
            "type": "string",
            "description": "The next page of results.",
            "nullable": true
          },
          "previousPage": {
            "type": "string",
            "description": "The previous page of results.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "A collection of resources that can be returned from requests."
      },
      "ResourceListOfPropertyDefinition": {
        "required": [
          "values"
        ],
        "type": "object",
        "properties": {
          "values": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PropertyDefinition"
            },
            "description": "The resources to list."
          },
          "href": {
            "type": "string",
            "description": "The URI of the resource list.",
            "format": "uri",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "description": "Collection of links.",
            "nullable": true
          },
          "nextPage": {
            "type": "string",
            "description": "The next page of results.",
            "nullable": true
          },
          "previousPage": {
            "type": "string",
            "description": "The previous page of results.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "A collection of resources that can be returned from requests."
      },
      "ResourceListOfPropertyInterval": {
        "required": [
          "values"
        ],
        "type": "object",
        "properties": {
          "values": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PropertyInterval"
            },
            "description": "The resources to list."
          },
          "href": {
            "type": "string",
            "description": "The URI of the resource list.",
            "format": "uri",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "description": "Collection of links.",
            "nullable": true
          },
          "nextPage": {
            "type": "string",
            "description": "The next page of results.",
            "nullable": true
          },
          "previousPage": {
            "type": "string",
            "description": "The previous page of results.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "A collection of resources that can be returned from requests."
      },
      "ResourceListOfQuote": {
        "required": [
          "values"
        ],
        "type": "object",
        "properties": {
          "values": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Quote"
            },
            "description": "The resources to list."
          },
          "href": {
            "type": "string",
            "description": "The URI of the resource list.",
            "format": "uri",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "description": "Collection of links.",
            "nullable": true
          },
          "nextPage": {
            "type": "string",
            "description": "The next page of results.",
            "nullable": true
          },
          "previousPage": {
            "type": "string",
            "description": "The previous page of results.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "A collection of resources that can be returned from requests."
      },
      "ResourceListOfReconciliationBreak": {
        "required": [
          "values"
        ],
        "type": "object",
        "properties": {
          "values": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ReconciliationBreak"
            },
            "description": "The resources to list."
          },
          "href": {
            "type": "string",
            "description": "The URI of the resource list.",
            "format": "uri",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "description": "Collection of links.",
            "nullable": true
          },
          "nextPage": {
            "type": "string",
            "description": "The next page of results.",
            "nullable": true
          },
          "previousPage": {
            "type": "string",
            "description": "The previous page of results.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "A collection of resources that can be returned from requests."
      },
      "ResourceListOfRelation": {
        "required": [
          "values"
        ],
        "type": "object",
        "properties": {
          "values": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Relation"
            },
            "description": "The resources to list."
          },
          "href": {
            "type": "string",
            "description": "The URI of the resource list.",
            "format": "uri",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "description": "Collection of links.",
            "nullable": true
          },
          "nextPage": {
            "type": "string",
            "description": "The next page of results.",
            "nullable": true
          },
          "previousPage": {
            "type": "string",
            "description": "The previous page of results.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "A collection of resources that can be returned from requests."
      },
      "ResourceListOfRelationship": {
        "required": [
          "values"
        ],
        "type": "object",
        "properties": {
          "values": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Relationship"
            },
            "description": "The resources to list."
          },
          "href": {
            "type": "string",
            "description": "The URI of the resource list.",
            "format": "uri",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "description": "Collection of links.",
            "nullable": true
          },
          "nextPage": {
            "type": "string",
            "description": "The next page of results.",
            "nullable": true
          },
          "previousPage": {
            "type": "string",
            "description": "The previous page of results.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "A collection of resources that can be returned from requests."
      },
      "ResourceListOfScopeDefinition": {
        "required": [
          "values"
        ],
        "type": "object",
        "properties": {
          "values": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ScopeDefinition"
            },
            "description": "The resources to list."
          },
          "href": {
            "type": "string",
            "description": "The URI of the resource list.",
            "format": "uri",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "description": "Collection of links.",
            "nullable": true
          },
          "nextPage": {
            "type": "string",
            "description": "The next page of results.",
            "nullable": true
          },
          "previousPage": {
            "type": "string",
            "description": "The previous page of results.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "A collection of resources that can be returned from requests."
      },
      "ResourceListOfString": {
        "required": [
          "values"
        ],
        "type": "object",
        "properties": {
          "values": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The resources to list."
          },
          "href": {
            "type": "string",
            "description": "The URI of the resource list.",
            "format": "uri",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "description": "Collection of links.",
            "nullable": true
          },
          "nextPage": {
            "type": "string",
            "description": "The next page of results.",
            "nullable": true
          },
          "previousPage": {
            "type": "string",
            "description": "The previous page of results.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "A collection of resources that can be returned from requests."
      },
      "ResourceListOfValueType": {
        "required": [
          "values"
        ],
        "type": "object",
        "properties": {
          "values": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ValueType"
            },
            "description": "The resources to list."
          },
          "href": {
            "type": "string",
            "description": "The URI of the resource list.",
            "format": "uri",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "description": "Collection of links.",
            "nullable": true
          },
          "nextPage": {
            "type": "string",
            "description": "The next page of results.",
            "nullable": true
          },
          "previousPage": {
            "type": "string",
            "description": "The previous page of results.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "A collection of resources that can be returned from requests."
      },
      "ResponseMetaData": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "The type of meta data information being provided",
            "nullable": true
          },
          "description": {
            "type": "string",
            "description": "The description of what occured for this specific piece of meta data",
            "nullable": true
          },
          "identifierType": {
            "type": "string",
            "description": "The type of the listed identifiers",
            "nullable": true
          },
          "identifiers": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The related identifiers that were impacted by this event",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Metadata related to an api response"
      },
      "ResultDataKeyRule": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ResultKeyRule"
          },
          {
            "required": [
              "dataScope",
              "documentCode",
              "documentResultType",
              "resourceKey",
              "resultKeyRuleType",
              "supplier"
            ],
            "type": "object",
            "properties": {
              "supplier": {
                "maxLength": 32,
                "minLength": 0,
                "type": "string",
                "description": "the result resource supplier (where the data comes from)"
              },
              "dataScope": {
                "maxLength": 256,
                "minLength": 1,
                "pattern": "^[a-zA-Z0-9\\-_]+$",
                "type": "string",
                "description": "which is the scope in which the data should be found"
              },
              "documentCode": {
                "maxLength": 256,
                "minLength": 1,
                "type": "string",
                "description": "document code that defines which document is desired"
              },
              "quoteInterval": {
                "maxLength": 16,
                "minLength": 0,
                "type": "string",
                "description": "Shorthand for the time interval used to select result data. This must be a dot-separated string\r\n            specifying a start and end date, for example '5D.0D' to look back 5 days from today (0 days ago).",
                "nullable": true
              },
              "asAt": {
                "type": "string",
                "description": "The AsAt predicate specification.",
                "format": "date-time",
                "nullable": true
              },
              "resourceKey": {
                "maxLength": 256,
                "minLength": 0,
                "type": "string",
                "description": "The result data key that identifies the address pattern that this is a rule for"
              },
              "documentResultType": {
                "minLength": 1,
                "type": "string"
              },
              "resultKeyRuleType": {
                "enum": [
                  "Invalid",
                  "ResultDataKeyRule",
                  "PortfolioResultDataKeyRule"
                ],
                "type": "string",
                "description": "The available values are: Invalid, ResultDataKeyRule, PortfolioResultDataKeyRule"
              }
            }
          }
        ]
      },
      "ResultDataSchema": {
        "type": "object",
        "properties": {
          "nodeValueSchema": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/FieldSchema"
            },
            "description": "This has been deprecated. Please use AddressSchema instead.",
            "nullable": true
          },
          "propertySchema": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/FieldSchema"
            },
            "description": "This has been deprecated. Please use AddressSchema instead.",
            "nullable": true
          },
          "addressSchema": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/AddressDefinition"
            },
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "The shape and type of the returned data. The AddressSchema gives information about the requested keys,\r\nincluding the return type, links to further documentation, lifecycle status and removal date if they are\r\ndeprecated.\r\n            \r\nNote: the NodeValueSchema and PropertySchema fields have been deprecated. Please use the AddressSchema instead."
      },
      "ResultKeyRule": {
        "required": [
          "resultKeyRuleType"
        ],
        "type": "object",
        "properties": {
          "resultKeyRuleType": {
            "enum": [
              "Invalid",
              "ResultDataKeyRule",
              "PortfolioResultDataKeyRule"
            ],
            "type": "string",
            "description": "The available values are: Invalid, ResultDataKeyRule, PortfolioResultDataKeyRule"
          }
        },
        "additionalProperties": false,
        "description": "Base class for representing result key rules in LUSID, which describe how to resolve (unit) result data.\r\nThis base class should not be directly instantiated; each supported ResultKeyRuleType has a corresponding inherited class.",
        "discriminator": {
          "propertyName": "resultKeyRuleType"
        }
      },
      "ResultValue": {
        "required": [
          "resultValueType"
        ],
        "type": "object",
        "properties": {
          "resultValueType": {
            "enum": [
              "ResultValue",
              "ResultValueDictionary",
              "ResultValue0D",
              "ResultValueDecimal",
              "ResultValueInt",
              "ResultValueString",
              "ResultValueBool",
              "ResultValueCurrency",
              "CashFlowValue",
              "CashFlowValueSet",
              "ResultValueLifeCycleEventValue",
              "ResultValueDateTimeOffset"
            ],
            "type": "string",
            "description": "The available values are: ResultValue, ResultValueDictionary, ResultValue0D, ResultValueDecimal, ResultValueInt, ResultValueString, ResultValueBool, ResultValueCurrency, CashFlowValue, CashFlowValueSet, ResultValueLifeCycleEventValue, ResultValueDateTimeOffset"
          }
        },
        "additionalProperties": false,
        "description": "Base class for representing result values in LUSID.\r\nThis base class should not be directly instantiated; each supported ResultValueType has a corresponding inherited class.",
        "discriminator": {
          "propertyName": "resultValueType"
        }
      },
      "ResultValue0D": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ResultValue"
          },
          {
            "required": [
              "resultValueType"
            ],
            "type": "object",
            "properties": {
              "units": {
                "type": "string",
                "description": "Unit of the result",
                "nullable": true
              },
              "value": {
                "type": "number",
                "description": "The value of the result",
                "format": "double"
              },
              "dimension": {
                "type": "integer",
                "description": "The dimension of the result. Can be null if there is no sensible way of defining the dimension. This field should not be\r\npopulate by the user on upsertion.",
                "format": "int32",
                "nullable": true
              },
              "resultValueType": {
                "enum": [
                  "ResultValue",
                  "ResultValueDictionary",
                  "ResultValue0D",
                  "ResultValueDecimal",
                  "ResultValueInt",
                  "ResultValueString",
                  "ResultValueBool",
                  "ResultValueCurrency",
                  "CashFlowValue",
                  "CashFlowValueSet",
                  "ResultValueLifeCycleEventValue",
                  "ResultValueDateTimeOffset"
                ],
                "type": "string",
                "description": "The available values are: ResultValue, ResultValueDictionary, ResultValue0D, ResultValueDecimal, ResultValueInt, ResultValueString, ResultValueBool, ResultValueCurrency, CashFlowValue, CashFlowValueSet, ResultValueLifeCycleEventValue, ResultValueDateTimeOffset"
              }
            }
          }
        ],
        "description": "Result value representing a 0D result. These results can be equipped with a unit"
      },
      "ResultValueBool": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ResultValue"
          },
          {
            "required": [
              "resultValueType"
            ],
            "type": "object",
            "properties": {
              "value": {
                "type": "boolean",
                "description": "The value itself"
              },
              "resultValueType": {
                "enum": [
                  "ResultValue",
                  "ResultValueDictionary",
                  "ResultValue0D",
                  "ResultValueDecimal",
                  "ResultValueInt",
                  "ResultValueString",
                  "ResultValueBool",
                  "ResultValueCurrency",
                  "CashFlowValue",
                  "CashFlowValueSet",
                  "ResultValueLifeCycleEventValue",
                  "ResultValueDateTimeOffset"
                ],
                "type": "string",
                "description": "The available values are: ResultValue, ResultValueDictionary, ResultValue0D, ResultValueDecimal, ResultValueInt, ResultValueString, ResultValueBool, ResultValueCurrency, CashFlowValue, CashFlowValueSet, ResultValueLifeCycleEventValue, ResultValueDateTimeOffset"
              }
            }
          }
        ],
        "description": "A simple result for a boolean value"
      },
      "ResultValueCurrency": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ResultValue"
          },
          {
            "required": [
              "resultValueType"
            ],
            "type": "object",
            "properties": {
              "value": {
                "type": "string",
                "description": "The value itself",
                "nullable": true
              },
              "resultValueType": {
                "enum": [
                  "ResultValue",
                  "ResultValueDictionary",
                  "ResultValue0D",
                  "ResultValueDecimal",
                  "ResultValueInt",
                  "ResultValueString",
                  "ResultValueBool",
                  "ResultValueCurrency",
                  "CashFlowValue",
                  "CashFlowValueSet",
                  "ResultValueLifeCycleEventValue",
                  "ResultValueDateTimeOffset"
                ],
                "type": "string",
                "description": "The available values are: ResultValue, ResultValueDictionary, ResultValue0D, ResultValueDecimal, ResultValueInt, ResultValueString, ResultValueBool, ResultValueCurrency, CashFlowValue, CashFlowValueSet, ResultValueLifeCycleEventValue, ResultValueDateTimeOffset"
              }
            }
          }
        ],
        "description": "A simple result for a currency value"
      },
      "ResultValueDateTimeOffset": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ResultValue"
          },
          {
            "required": [
              "resultValueType"
            ],
            "type": "object",
            "properties": {
              "value": {
                "type": "string",
                "description": "The value itself",
                "format": "date-time"
              },
              "dimension": {
                "type": "integer",
                "description": "The dimension of the result. Can be null if there is no sensible way of defining the dimension. This field should not be\r\npopulate by the user on upsertion.",
                "format": "int32",
                "nullable": true
              },
              "resultValueType": {
                "enum": [
                  "ResultValue",
                  "ResultValueDictionary",
                  "ResultValue0D",
                  "ResultValueDecimal",
                  "ResultValueInt",
                  "ResultValueString",
                  "ResultValueBool",
                  "ResultValueCurrency",
                  "CashFlowValue",
                  "CashFlowValueSet",
                  "ResultValueLifeCycleEventValue",
                  "ResultValueDateTimeOffset"
                ],
                "type": "string",
                "description": "The available values are: ResultValue, ResultValueDictionary, ResultValue0D, ResultValueDecimal, ResultValueInt, ResultValueString, ResultValueBool, ResultValueCurrency, CashFlowValue, CashFlowValueSet, ResultValueLifeCycleEventValue, ResultValueDateTimeOffset"
              }
            }
          }
        ],
        "description": "A simple result for a date time value"
      },
      "ResultValueDecimal": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ResultValue"
          },
          {
            "required": [
              "resultValueType"
            ],
            "type": "object",
            "properties": {
              "value": {
                "type": "number",
                "description": "The value itself",
                "format": "double"
              },
              "dimension": {
                "type": "integer",
                "description": "The dimension of the result. Can be null if there is no sensible way of defining the dimension. This field should not be\r\npopulate by the user on upsertion.",
                "format": "int32",
                "nullable": true
              },
              "resultValueType": {
                "enum": [
                  "ResultValue",
                  "ResultValueDictionary",
                  "ResultValue0D",
                  "ResultValueDecimal",
                  "ResultValueInt",
                  "ResultValueString",
                  "ResultValueBool",
                  "ResultValueCurrency",
                  "CashFlowValue",
                  "CashFlowValueSet",
                  "ResultValueLifeCycleEventValue",
                  "ResultValueDateTimeOffset"
                ],
                "type": "string",
                "description": "The available values are: ResultValue, ResultValueDictionary, ResultValue0D, ResultValueDecimal, ResultValueInt, ResultValueString, ResultValueBool, ResultValueCurrency, CashFlowValue, CashFlowValueSet, ResultValueLifeCycleEventValue, ResultValueDateTimeOffset"
              }
            }
          }
        ],
        "description": "A simple result for a decimal value"
      },
      "ResultValueDictionary": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ResultValue"
          },
          {
            "required": [
              "resultValueType"
            ],
            "type": "object",
            "properties": {
              "elements": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/components/schemas/ResultValue"
                },
                "description": "The dictionary elements",
                "nullable": true
              },
              "resultValueType": {
                "enum": [
                  "ResultValue",
                  "ResultValueDictionary",
                  "ResultValue0D",
                  "ResultValueDecimal",
                  "ResultValueInt",
                  "ResultValueString",
                  "ResultValueBool",
                  "ResultValueCurrency",
                  "CashFlowValue",
                  "CashFlowValueSet",
                  "ResultValueLifeCycleEventValue",
                  "ResultValueDateTimeOffset"
                ],
                "type": "string",
                "description": "The available values are: ResultValue, ResultValueDictionary, ResultValue0D, ResultValueDecimal, ResultValueInt, ResultValueString, ResultValueBool, ResultValueCurrency, CashFlowValue, CashFlowValueSet, ResultValueLifeCycleEventValue, ResultValueDateTimeOffset"
              }
            }
          }
        ],
        "description": "Result value for a collection of key-value pairs. Used for diagnostics associated to a cash flow, etc."
      },
      "ResultValueInt": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ResultValue"
          },
          {
            "required": [
              "resultValueType"
            ],
            "type": "object",
            "properties": {
              "value": {
                "type": "integer",
                "description": "The value itself",
                "format": "int32"
              },
              "dimension": {
                "type": "integer",
                "description": "The dimension of the result. Can be null if there is no sensible way of defining the dimension. This field should not be\r\npopulate by the user on upsertion.",
                "format": "int32",
                "nullable": true
              },
              "resultValueType": {
                "enum": [
                  "ResultValue",
                  "ResultValueDictionary",
                  "ResultValue0D",
                  "ResultValueDecimal",
                  "ResultValueInt",
                  "ResultValueString",
                  "ResultValueBool",
                  "ResultValueCurrency",
                  "CashFlowValue",
                  "CashFlowValueSet",
                  "ResultValueLifeCycleEventValue",
                  "ResultValueDateTimeOffset"
                ],
                "type": "string",
                "description": "The available values are: ResultValue, ResultValueDictionary, ResultValue0D, ResultValueDecimal, ResultValueInt, ResultValueString, ResultValueBool, ResultValueCurrency, CashFlowValue, CashFlowValueSet, ResultValueLifeCycleEventValue, ResultValueDateTimeOffset"
              }
            }
          }
        ],
        "description": "A simple result type which holds an integer"
      },
      "ResultValueString": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ResultValue"
          },
          {
            "required": [
              "resultValueType"
            ],
            "type": "object",
            "properties": {
              "value": {
                "type": "string",
                "description": "the value itself",
                "nullable": true
              },
              "resultValueType": {
                "enum": [
                  "ResultValue",
                  "ResultValueDictionary",
                  "ResultValue0D",
                  "ResultValueDecimal",
                  "ResultValueInt",
                  "ResultValueString",
                  "ResultValueBool",
                  "ResultValueCurrency",
                  "CashFlowValue",
                  "CashFlowValueSet",
                  "ResultValueLifeCycleEventValue",
                  "ResultValueDateTimeOffset"
                ],
                "type": "string",
                "description": "The available values are: ResultValue, ResultValueDictionary, ResultValue0D, ResultValueDecimal, ResultValueInt, ResultValueString, ResultValueBool, ResultValueCurrency, CashFlowValue, CashFlowValueSet, ResultValueLifeCycleEventValue, ResultValueDateTimeOffset"
              }
            }
          }
        ],
        "description": "A simple result value holding a string"
      },
      "RoundingConvention": {
        "type": "object",
        "properties": {
          "faceValue": {
            "type": "number",
            "description": "The face value to round against.\r\nThe number to be rounded is scaled to this face value before being rounded, and then re-scaled to the holding amount.\r\nFor example if rounding an accrued interest value using a FaceValue of 1,000, but 10,000 units are held,\r\nthen the initial calculated value would be divided by 10,000, then multiplied by 1,000 and rounded per the convention.\r\nThe result of this would then be divided by 1,000 and multiplied by 10,000 to get the final value.",
            "format": "double"
          },
          "precision": {
            "type": "integer",
            "description": "The precision of the rounding.  The decimal places to which the rounding takes place.",
            "format": "int32"
          },
          "roundingTarget": {
            "type": "string",
            "description": "The target of the rounding convention.\r\nAccepted values are 'AccruedInterest', 'Cashflows', or 'All'\r\n\r\nSupported string (enumeration) values are: [All, AccruedInterest, Cashflows].",
            "nullable": true
          },
          "roundingType": {
            "type": "string",
            "description": "The type of rounding.  e.g. Round Up, Round Down\r\n\r\nSupported string (enumeration) values are: [Down, Up, Floor, Ceiling, Nearest].",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Certain bonds will follow certain rounding conventions.\r\nFor example, Thai government bonds will round accrued interest and cashflow values 2dp, whereas for\r\nFrench government bonds, the rounding is to 7dp."
      },
      "Schedule": {
        "required": [
          "scheduleType"
        ],
        "type": "object",
        "properties": {
          "scheduleType": {
            "enum": [
              "Fixed",
              "Float",
              "Optionality",
              "Step",
              "Exercise",
              "FxRate",
              "Invalid"
            ],
            "type": "string",
            "description": "The available values are: Fixed, Float, Optionality, Step, Exercise, FxRate, Invalid"
          }
        },
        "additionalProperties": false,
        "description": "Base class for representing schedules in LUSID.\r\nThis base class should not be directly instantiated; each supported ScheduleType has a corresponding inherited class.",
        "discriminator": {
          "propertyName": "scheduleType"
        }
      },
      "Schema": {
        "type": "object",
        "properties": {
          "entity": {
            "type": "string",
            "nullable": true
          },
          "href": {
            "type": "string",
            "format": "uri",
            "nullable": true
          },
          "values": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/FieldSchema"
            },
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "description": "Collection of links.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ScopeDefinition": {
        "required": [
          "scope"
        ],
        "type": "object",
        "properties": {
          "scope": {
            "minLength": 1,
            "type": "string",
            "description": "The unique identifier for the scope."
          }
        },
        "additionalProperties": false,
        "description": "A list of scopes."
      },
      "SequenceDefinition": {
        "required": [
          "cycle",
          "id",
          "increment",
          "maxValue",
          "minValue",
          "start"
        ],
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/ResourceId"
          },
          "increment": {
            "type": "integer",
            "description": "The Resource Id of the sequence definition",
            "format": "int64"
          },
          "minValue": {
            "type": "integer",
            "description": "The minimum value of the sequence",
            "format": "int64"
          },
          "maxValue": {
            "type": "integer",
            "description": "The maximum value of the sequence",
            "format": "int64"
          },
          "start": {
            "type": "integer",
            "description": "The start value of the sequence",
            "format": "int64"
          },
          "value": {
            "type": "integer",
            "description": "The last used value of the sequence",
            "format": "int64",
            "nullable": true
          },
          "cycle": {
            "type": "boolean",
            "description": "Indicates if the sequence would start from minimun value once it reaches maximum value. If set to false, a failure would return if the sequence reaches maximum value."
          },
          "pattern": {
            "type": "string",
            "description": "The pattern to be used to generate next values in the sequence.",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "description": "Collection of links.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SetLegalEntityIdentifiersRequest": {
        "type": "object",
        "properties": {
          "identifiers": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/Property"
            },
            "description": "Identifiers to set for a Legal Entity. Identifiers not included in the request will not be amended.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SetLegalEntityPropertiesRequest": {
        "type": "object",
        "properties": {
          "properties": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/Property"
            },
            "description": "Properties to set for a Legal Entity. All time-variant properties must have same EffectiveFrom date. Properties not included in the request will not be amended.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SetPersonIdentifiersRequest": {
        "type": "object",
        "properties": {
          "identifiers": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/Property"
            },
            "description": "Identifiers to set for a Person. Identifiers not included in the request will not be amended.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SetPersonPropertiesRequest": {
        "required": [
          "properties"
        ],
        "type": "object",
        "properties": {
          "properties": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/Property"
            },
            "description": "Properties to set for a Person. All time-variant properties must have same EffectiveFrom date. Properties not included in the request will not be amended."
          }
        },
        "additionalProperties": false
      },
      "SideConfigurationData": {
        "required": [
          "amount",
          "currency",
          "rate",
          "security",
          "side",
          "units"
        ],
        "type": "object",
        "properties": {
          "side": {
            "minLength": 1,
            "type": "string",
            "description": "The side's label."
          },
          "security": {
            "minLength": 1,
            "type": "string",
            "description": "The security, or instrument."
          },
          "currency": {
            "minLength": 1,
            "type": "string",
            "description": "The currency."
          },
          "rate": {
            "minLength": 1,
            "type": "string",
            "description": "The rate."
          },
          "units": {
            "minLength": 1,
            "type": "string",
            "description": "The units."
          },
          "amount": {
            "minLength": 1,
            "type": "string",
            "description": "The amount."
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "description": "Collection of links.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Configuration needed to define a side. Sides are referenced by Label. Beyond that, other properties\r\ncan be used to reference either transaction fields, or transaction properties."
      },
      "SimpleCashFlowLoan": {
        "allOf": [
          {
            "$ref": "#/components/schemas/LusidInstrument"
          },
          {
            "required": [
              "domCcy",
              "instrumentType",
              "maturityDate",
              "periods",
              "startDate"
            ],
            "type": "object",
            "properties": {
              "startDate": {
                "type": "string",
                "description": "The start date of the instrument. This is normally synonymous with the trade-date.",
                "format": "date-time"
              },
              "maturityDate": {
                "type": "string",
                "description": "The final maturity date of the instrument. This means the last date on which the instruments makes a payment of any amount.\r\nFor the avoidance of doubt, that is not necessarily prior to its last sensitivity date for the purposes of risk; e.g. instruments such as\r\nConstant Maturity Swaps (CMS) often have sensitivities to rates that may well be observed or set prior to the maturity date, but refer to a termination date beyond it.",
                "format": "date-time"
              },
              "domCcy": {
                "type": "string",
                "description": "The domestic currency of the instrument."
              },
              "periods": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/LoanPeriod"
                },
                "description": "Periods of the underlying loan"
              },
              "instrumentType": {
                "enum": [
                  "QuotedSecurity",
                  "InterestRateSwap",
                  "FxForward",
                  "Future",
                  "ExoticInstrument",
                  "FxOption",
                  "CreditDefaultSwap",
                  "InterestRateSwaption",
                  "Bond",
                  "EquityOption",
                  "FixedLeg",
                  "FloatingLeg",
                  "BespokeCashFlowsLeg",
                  "Unknown",
                  "TermDeposit",
                  "ContractForDifference",
                  "EquitySwap",
                  "CashPerpetual",
                  "CapFloor",
                  "CashSettled",
                  "CdsIndex",
                  "Basket",
                  "FundingLeg",
                  "FxSwap",
                  "ForwardRateAgreement",
                  "SimpleInstrument",
                  "Repo",
                  "Equity",
                  "ExchangeTradedOption",
                  "ReferenceInstrument",
                  "ComplexBond",
                  "InflationLinkedBond",
                  "InflationSwap",
                  "SimpleCashFlowLoan"
                ],
                "type": "string",
                "description": "The available values are: QuotedSecurity, InterestRateSwap, FxForward, Future, ExoticInstrument, FxOption, CreditDefaultSwap, InterestRateSwaption, Bond, EquityOption, FixedLeg, FloatingLeg, BespokeCashFlowsLeg, Unknown, TermDeposit, ContractForDifference, EquitySwap, CashPerpetual, CapFloor, CashSettled, CdsIndex, Basket, FundingLeg, FxSwap, ForwardRateAgreement, SimpleInstrument, Repo, Equity, ExchangeTradedOption, ReferenceInstrument, ComplexBond, InflationLinkedBond, InflationSwap, SimpleCashFlowLoan"
              }
            }
          }
        ],
        "description": "LUSID representation of a SimpleCashFlowLoan.\r\nThis is a simple loan, with interest payments and nationals provided and not calculated."
      },
      "SimpleInstrument": {
        "allOf": [
          {
            "$ref": "#/components/schemas/LusidInstrument"
          },
          {
            "required": [
              "assetClass",
              "domCcy",
              "instrumentType",
              "simpleInstrumentType"
            ],
            "type": "object",
            "properties": {
              "maturityDate": {
                "type": "string",
                "description": "The final maturity date of the instrument. This means the last date on which the instruments makes a payment of any amount.\r\nFor the avoidance of doubt, that is not necessarily prior to its last sensitivity date for the purposes of risk; e.g. instruments such as\r\nConstant Maturity Swaps (CMS) often have sensitivities to rates that may well be observed or set prior to the maturity date, but refer to a termination date beyond it.",
                "format": "date-time"
              },
              "domCcy": {
                "type": "string",
                "description": "The domestic currency."
              },
              "assetClass": {
                "enum": [
                  "InterestRates",
                  "FX",
                  "Inflation",
                  "Equities",
                  "Credit",
                  "Commodities",
                  "Money",
                  "Unknown"
                ],
                "type": "string",
                "description": "The available values are: InterestRates, FX, Inflation, Equities, Credit, Commodities, Money, Unknown"
              },
              "fgnCcys": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "The set of foreign currencies, if any (optional).",
                "nullable": true
              },
              "simpleInstrumentType": {
                "minLength": 1,
                "type": "string",
                "description": "The Instrument type of the simple instrument."
              },
              "instrumentType": {
                "enum": [
                  "QuotedSecurity",
                  "InterestRateSwap",
                  "FxForward",
                  "Future",
                  "ExoticInstrument",
                  "FxOption",
                  "CreditDefaultSwap",
                  "InterestRateSwaption",
                  "Bond",
                  "EquityOption",
                  "FixedLeg",
                  "FloatingLeg",
                  "BespokeCashFlowsLeg",
                  "Unknown",
                  "TermDeposit",
                  "ContractForDifference",
                  "EquitySwap",
                  "CashPerpetual",
                  "CapFloor",
                  "CashSettled",
                  "CdsIndex",
                  "Basket",
                  "FundingLeg",
                  "FxSwap",
                  "ForwardRateAgreement",
                  "SimpleInstrument",
                  "Repo",
                  "Equity",
                  "ExchangeTradedOption",
                  "ReferenceInstrument",
                  "ComplexBond",
                  "InflationLinkedBond",
                  "InflationSwap",
                  "SimpleCashFlowLoan"
                ],
                "type": "string",
                "description": "The available values are: QuotedSecurity, InterestRateSwap, FxForward, Future, ExoticInstrument, FxOption, CreditDefaultSwap, InterestRateSwaption, Bond, EquityOption, FixedLeg, FloatingLeg, BespokeCashFlowsLeg, Unknown, TermDeposit, ContractForDifference, EquitySwap, CashPerpetual, CapFloor, CashSettled, CdsIndex, Basket, FundingLeg, FxSwap, ForwardRateAgreement, SimpleInstrument, Repo, Equity, ExchangeTradedOption, ReferenceInstrument, ComplexBond, InflationLinkedBond, InflationSwap, SimpleCashFlowLoan"
              }
            }
          }
        ],
        "description": "LUSID representation of a Simple Instrument, used as a basic definition of a generic instrument.\r\nNo analytics can be obtained for this."
      },
      "StepSchedule": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Schedule"
          },
          {
            "required": [
              "levelType",
              "scheduleType",
              "steps",
              "stepScheduleType"
            ],
            "type": "object",
            "properties": {
              "levelType": {
                "minLength": 1,
                "type": "string",
                "description": "The type of shift or adjustment that the quantity represents.\r\n\r\nSupported string (enumeration) values are: [Absolute, AbsoluteShift, Percentage, AbsolutePercentage]."
              },
              "stepScheduleType": {
                "minLength": 1,
                "type": "string",
                "description": "The type of step that this schedule is for.\r\nSupported string (enumeration) values are: [Coupon, Notional, Spread]."
              },
              "steps": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/LevelStep"
                },
                "description": "The level steps which are applied."
              },
              "scheduleType": {
                "enum": [
                  "Fixed",
                  "Float",
                  "Optionality",
                  "Step",
                  "Exercise",
                  "FxRate",
                  "Invalid"
                ],
                "type": "string",
                "description": "The available values are: Fixed, Float, Optionality, Step, Exercise, FxRate, Invalid"
              }
            }
          }
        ],
        "description": "Schedule that steps at known dated points in time.\r\nUsed in representation of a sinking bond, also called amortisation, steps in coupons for fixed bonds and spreads for floating bonds."
      },
      "StockSplitEvent": {
        "allOf": [
          {
            "$ref": "#/components/schemas/InstrumentEvent"
          },
          {
            "required": [
              "equitySplitRatio",
              "instrumentEventType",
              "paymentDate",
              "recordDate"
            ],
            "type": "object",
            "properties": {
              "equitySplitRatio": {
                "type": "number",
                "description": "This number describes the rate at which the company will be dividing their current shares outstanding. It is displayed as new shares per old.",
                "format": "double"
              },
              "paymentDate": {
                "type": "string",
                "description": "Date on which the stock-split takes effect.",
                "format": "date-time"
              },
              "recordDate": {
                "type": "string",
                "description": "Date you have to be the holder of record in order to participate in the tender.",
                "format": "date-time"
              },
              "instrumentEventType": {
                "enum": [
                  "TransitionEvent",
                  "InformationalEvent",
                  "OpenEvent",
                  "CloseEvent",
                  "StockSplitEvent",
                  "BondDefaultEvent",
                  "CashDividendEvent",
                  "AmortisationEvent",
                  "CashFlowEvent",
                  "ExerciseEvent",
                  "ResetEvent",
                  "TriggerEvent",
                  "RawVendorEvent",
                  "InformationalErrorEvent"
                ],
                "type": "string",
                "description": "The Type of Event. The available values are: TransitionEvent, InformationalEvent, OpenEvent, CloseEvent, StockSplitEvent, BondDefaultEvent, CashDividendEvent, AmortisationEvent, CashFlowEvent, ExerciseEvent, ResetEvent, TriggerEvent, RawVendorEvent, InformationalErrorEvent"
              }
            }
          }
        ],
        "description": "A split in the company's shares. Shareholders are given additional company shares based on the terms of the stock split."
      },
      "Stream": {
        "type": "object",
        "properties": {
          "canRead": {
            "type": "boolean",
            "readOnly": true
          },
          "canWrite": {
            "type": "boolean",
            "readOnly": true
          },
          "canSeek": {
            "type": "boolean",
            "readOnly": true
          },
          "canTimeout": {
            "type": "boolean",
            "readOnly": true
          },
          "length": {
            "type": "integer",
            "format": "int64",
            "readOnly": true
          },
          "position": {
            "type": "integer",
            "format": "int64"
          },
          "readTimeout": {
            "type": "integer",
            "format": "int32"
          },
          "writeTimeout": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "StringList": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ReferenceList"
          },
          {
            "required": [
              "referenceListType",
              "values"
            ],
            "type": "object",
            "properties": {
              "values": {
                "maxItems": 100,
                "minItems": 1,
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "referenceListType": {
                "enum": [
                  "PortfolioGroupIdList",
                  "PortfolioIdList",
                  "AddressKeyList",
                  "StringList",
                  "InstrumentList",
                  "DecimalList"
                ],
                "type": "string",
                "description": "The reference list values. The available values are: PortfolioGroupIdList, PortfolioIdList, AddressKeyList, StringList, InstrumentList, DecimalList"
              }
            }
          }
        ]
      },
      "TargetTaxLot": {
        "required": [
          "units"
        ],
        "type": "object",
        "properties": {
          "units": {
            "type": "number",
            "description": "The number of units of the instrument in this tax-lot.",
            "format": "double"
          },
          "cost": {
            "$ref": "#/components/schemas/CurrencyAndAmount"
          },
          "portfolioCost": {
            "type": "number",
            "description": "The total cost of the tax-lot in the transaction portfolio's base currency.",
            "format": "double",
            "nullable": true
          },
          "price": {
            "type": "number",
            "description": "The purchase price of each unit of the instrument held in this tax-lot. This forms part of the unique key required for multiple tax-lots.",
            "format": "double",
            "nullable": true
          },
          "purchaseDate": {
            "type": "string",
            "description": "The purchase date of this tax-lot. This forms part of the unique key required for multiple tax-lots.",
            "format": "date-time",
            "nullable": true
          },
          "settlementDate": {
            "type": "string",
            "description": "The settlement date of the tax-lot's opening transaction.",
            "format": "date-time",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Used to specify holdings target amounts at the tax-lot level"
      },
      "TargetTaxLotRequest": {
        "required": [
          "units"
        ],
        "type": "object",
        "properties": {
          "units": {
            "type": "number",
            "description": "The number of units of the instrument in this tax-lot.",
            "format": "double"
          },
          "cost": {
            "$ref": "#/components/schemas/CurrencyAndAmount"
          },
          "portfolioCost": {
            "type": "number",
            "description": "The total cost of the tax-lot in the transaction portfolio's base currency.",
            "format": "double",
            "nullable": true
          },
          "price": {
            "type": "number",
            "description": "The purchase price of each unit of the instrument held in this tax-lot. This forms part of the unique key required for multiple tax-lots.",
            "format": "double",
            "nullable": true
          },
          "purchaseDate": {
            "type": "string",
            "description": "The purchase date of this tax-lot. This forms part of the unique key required for multiple tax-lots.",
            "format": "date-time",
            "nullable": true
          },
          "settlementDate": {
            "type": "string",
            "description": "The settlement date of the tax-lot's opening transaction.",
            "format": "date-time",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "TermDeposit": {
        "allOf": [
          {
            "$ref": "#/components/schemas/LusidInstrument"
          },
          {
            "required": [
              "contractSize",
              "flowConvention",
              "instrumentType",
              "maturityDate",
              "rate",
              "startDate"
            ],
            "type": "object",
            "properties": {
              "startDate": {
                "type": "string",
                "description": "The start date of the instrument. This is normally synonymous with the trade-date.",
                "format": "date-time"
              },
              "maturityDate": {
                "type": "string",
                "description": "The final maturity date of the instrument. This means the last date on which the instruments makes a payment of any amount.\r\nFor the avoidance of doubt, that is not necessarily prior to its last sensitivity date for the purposes of risk; e.g. instruments such as\r\nConstant Maturity Swaps (CMS) often have sensitivities to rates that may well be observed or set prior to the maturity date, but refer to a termination date beyond it.",
                "format": "date-time"
              },
              "contractSize": {
                "type": "number",
                "description": "With an OTC we have the problem of multiple ways of booking a quantity.\r\n            e.g.\r\n            If buying a swap do you have a holding of size 1 of 100,000,000 notional swap or a holding of 100,000,000 size of 1 notional swap, or any combination that multiplies to 10^8.\r\n            When you get for a price for a 'unit swap' what do you mean? The definition must be consistent across all quotes. This includes bonds which have a face value and\r\n            fx-forwards which often trade in standard contract sizes. When we look up a price, and there are no units, we are assuming it is a price for a contract size of 1.\r\n            The logical effect of this is that\r\n            instrument clean price = contract size * quoted unit price\r\n            holding clean price    = holding quantity * instrument clean price = holding quantity * contract size * quoted unit price\r\n            In calculating accrued interest the same should hold.\r\n            NB: The real problem is that people store \"prices\" without complete units. Everything should really be \"x ccy for n units\". Where the n is implicit the above has to hold.",
                "format": "double"
              },
              "flowConvention": {
                "$ref": "#/components/schemas/FlowConventions"
              },
              "rate": {
                "type": "number",
                "description": "The fixed rate for the term deposit. Specified as a decimal, e.g 0.03 is meant to be 3% interest",
                "format": "double"
              },
              "domCcy": {
                "type": "string",
                "description": "DomCcy of the TermDeposit. If provided, must match the currency of FlowConvention.",
                "nullable": true
              },
              "instrumentType": {
                "enum": [
                  "QuotedSecurity",
                  "InterestRateSwap",
                  "FxForward",
                  "Future",
                  "ExoticInstrument",
                  "FxOption",
                  "CreditDefaultSwap",
                  "InterestRateSwaption",
                  "Bond",
                  "EquityOption",
                  "FixedLeg",
                  "FloatingLeg",
                  "BespokeCashFlowsLeg",
                  "Unknown",
                  "TermDeposit",
                  "ContractForDifference",
                  "EquitySwap",
                  "CashPerpetual",
                  "CapFloor",
                  "CashSettled",
                  "CdsIndex",
                  "Basket",
                  "FundingLeg",
                  "FxSwap",
                  "ForwardRateAgreement",
                  "SimpleInstrument",
                  "Repo",
                  "Equity",
                  "ExchangeTradedOption",
                  "ReferenceInstrument",
                  "ComplexBond",
                  "InflationLinkedBond",
                  "InflationSwap",
                  "SimpleCashFlowLoan"
                ],
                "type": "string",
                "description": "The available values are: QuotedSecurity, InterestRateSwap, FxForward, Future, ExoticInstrument, FxOption, CreditDefaultSwap, InterestRateSwaption, Bond, EquityOption, FixedLeg, FloatingLeg, BespokeCashFlowsLeg, Unknown, TermDeposit, ContractForDifference, EquitySwap, CashPerpetual, CapFloor, CashSettled, CdsIndex, Basket, FundingLeg, FxSwap, ForwardRateAgreement, SimpleInstrument, Repo, Equity, ExchangeTradedOption, ReferenceInstrument, ComplexBond, InflationLinkedBond, InflationSwap, SimpleCashFlowLoan"
              }
            }
          }
        ],
        "description": "LUSID representation of a Term Deposit."
      },
      "Touch": {
        "required": [
          "direction",
          "level",
          "type"
        ],
        "type": "object",
        "properties": {
          "direction": {
            "minLength": 1,
            "type": "string",
            "description": "Supported string (enumeration) values are: [Down, Up]."
          },
          "level": {
            "type": "number",
            "description": "Trigger level, which the underlying should (or should not) cross/touch.",
            "format": "double"
          },
          "monitoring": {
            "type": "string",
            "description": "Supported string (enumeration) values are: [European, Bermudan, American].",
            "nullable": true
          },
          "type": {
            "minLength": 1,
            "type": "string",
            "description": "Supported string (enumeration) values are: [Touch, Notouch]."
          }
        },
        "additionalProperties": false,
        "description": "Touch class for exotic FxOption"
      },
      "Transaction": {
        "required": [
          "instrumentUid",
          "settlementDate",
          "totalConsideration",
          "transactionDate",
          "transactionId",
          "type",
          "units"
        ],
        "type": "object",
        "properties": {
          "transactionId": {
            "minLength": 1,
            "type": "string",
            "description": "The unique identifier for the transaction."
          },
          "type": {
            "minLength": 1,
            "type": "string",
            "description": "The type of the transaction e.g. 'Buy', 'Sell'. The transaction type should have been pre-configured via the System Configuration API endpoint."
          },
          "instrumentIdentifiers": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "A set of instrument identifiers that can resolve the transaction to a unique instrument.",
            "nullable": true
          },
          "instrumentScope": {
            "type": "string",
            "description": "The scope in which the transaction's instrument lies.",
            "nullable": true
          },
          "instrumentUid": {
            "minLength": 1,
            "type": "string",
            "description": "The unqiue Lusid Instrument Id (LUID) of the instrument that the transaction is in."
          },
          "transactionDate": {
            "type": "string",
            "description": "The date of the transaction.",
            "format": "date-time"
          },
          "settlementDate": {
            "type": "string",
            "description": "The settlement date of the transaction.",
            "format": "date-time"
          },
          "units": {
            "type": "number",
            "description": "The number of units transacted in the associated instrument.",
            "format": "double"
          },
          "transactionPrice": {
            "$ref": "#/components/schemas/TransactionPrice"
          },
          "totalConsideration": {
            "$ref": "#/components/schemas/CurrencyAndAmount"
          },
          "exchangeRate": {
            "type": "number",
            "description": "The exchange rate between the transaction and settlement currency (settlement currency being represented by the TotalConsideration.Currency). For example if the transaction currency is in USD and the settlement currency is in GBP this this the USD/GBP rate.",
            "format": "double",
            "nullable": true
          },
          "transactionCurrency": {
            "type": "string",
            "description": "The transaction currency.",
            "nullable": true
          },
          "properties": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/PerpetualProperty"
            },
            "description": "Set of unique transaction properties and associated values to stored with the transaction. Each property will be from the 'Transaction' domain.",
            "nullable": true
          },
          "counterpartyId": {
            "type": "string",
            "description": "The identifier for the counterparty of the transaction.",
            "nullable": true
          },
          "source": {
            "type": "string",
            "description": "The source of the transaction. This is used to look up the appropriate transaction group set in the transaction type configuration.",
            "nullable": true
          },
          "entryDateTime": {
            "type": "string",
            "description": "The asAt datetime that the transaction was added to LUSID.",
            "format": "date-time"
          },
          "otcConfirmation": {
            "$ref": "#/components/schemas/OtcConfirmation"
          },
          "transactionStatus": {
            "enum": [
              "Active",
              "Amended",
              "Cancelled"
            ],
            "type": "string",
            "description": "The status of the transaction. The available values are: Active, Amended, Cancelled"
          },
          "cancelDateTime": {
            "type": "string",
            "description": "If the transaction has been cancelled, the asAt datetime that the transaction was cancelled.",
            "format": "date-time",
            "nullable": true
          },
          "orderId": {
            "$ref": "#/components/schemas/ResourceId"
          },
          "allocationId": {
            "$ref": "#/components/schemas/ResourceId"
          },
          "custodianAccount": {
            "$ref": "#/components/schemas/CustodianAccount"
          }
        },
        "additionalProperties": false,
        "description": "A list of transactions."
      },
      "TransactionConfigurationData": {
        "required": [
          "aliases",
          "movements"
        ],
        "type": "object",
        "properties": {
          "aliases": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TransactionConfigurationTypeAlias"
            },
            "description": "List of transaction types that map to this specific transaction configuration"
          },
          "movements": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TransactionConfigurationMovementData"
            },
            "description": "Movement data for the transaction type"
          },
          "properties": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/PerpetualProperty"
            },
            "description": "Properties attached to the transaction type",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "TransactionConfigurationDataRequest": {
        "required": [
          "aliases",
          "movements"
        ],
        "type": "object",
        "properties": {
          "aliases": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TransactionConfigurationTypeAlias"
            },
            "description": "List of transaction codes that map to this specific transaction model"
          },
          "movements": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TransactionConfigurationMovementDataRequest"
            },
            "description": "Movement data for the transaction code"
          },
          "properties": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/PerpetualProperty"
            },
            "description": "Properties attached to the underlying holding.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "TransactionConfigurationMovementData": {
        "required": [
          "direction",
          "movementTypes",
          "side"
        ],
        "type": "object",
        "properties": {
          "movementTypes": {
            "enum": [
              "Settlement",
              "Traded",
              "StockMovement",
              "FutureCash",
              "Commitment",
              "Receivable",
              "CashSettlement",
              "CashForward",
              "CashCommitment",
              "CashReceivable",
              "Accrual",
              "CashAccrual",
              "ForwardFx",
              "CashFxForward",
              "UnsettledCashTypes",
              "Carry",
              "CarryAsPnl",
              "VariationMargin"
            ],
            "type": "string",
            "description": ". The available values are: Settlement, Traded, StockMovement, FutureCash, Commitment, Receivable, CashSettlement, CashForward, CashCommitment, CashReceivable, Accrual, CashAccrual, ForwardFx, CashFxForward, UnsettledCashTypes, Carry, CarryAsPnl, VariationMargin"
          },
          "side": {
            "minLength": 1,
            "type": "string",
            "description": "The Side determines which of the fields from our transaction are used to generate the Movement. Side1 means the 'security' side of the transaction, ie the Instrument and Units; Side2 means the 'cash' side, ie the Total Consideration"
          },
          "direction": {
            "type": "integer",
            "description": " A multiplier to apply to Transaction amounts; the values are -1 to indicate to reverse the signs and 1 to indicate to use the signed values from the Transaction directly. For a typical Transaction with unsigned values, 1 means increase, -1 means decrease",
            "format": "int32"
          },
          "properties": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/PerpetualProperty"
            },
            "description": "The properties associated with the underlying Movement",
            "nullable": true
          },
          "mappings": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TransactionPropertyMapping"
            },
            "description": "This allows you to map a transaction property to a property on the underlying holding",
            "nullable": true
          },
          "name": {
            "type": "string",
            "description": "The movement name (optional)",
            "nullable": true
          },
          "movementOptions": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Allows extra specifications for the movement. The only option currently available is 'DirectAdjustment'. A movement type of 'StockMovement' with an option of 'DirectAdjusment' will allow you to adjust the unitsof a holding without affecting its cost base. You will, therefore, be able to reflect the impact of a stock split by loading a Transaction.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "TransactionConfigurationMovementDataRequest": {
        "required": [
          "direction",
          "movementTypes",
          "side"
        ],
        "type": "object",
        "properties": {
          "movementTypes": {
            "enum": [
              "Settlement",
              "Traded",
              "StockMovement",
              "FutureCash",
              "Commitment",
              "Receivable",
              "CashSettlement",
              "CashForward",
              "CashCommitment",
              "CashReceivable",
              "Accrual",
              "CashAccrual",
              "ForwardFx",
              "CashFxForward",
              "UnsettledCashTypes",
              "Carry",
              "CarryAsPnl",
              "VariationMargin"
            ],
            "type": "string",
            "description": ". The available values are: Settlement, Traded, StockMovement, FutureCash, Commitment, Receivable, CashSettlement, CashForward, CashCommitment, CashReceivable, Accrual, CashAccrual, ForwardFx, CashFxForward, UnsettledCashTypes, Carry, CarryAsPnl, VariationMargin"
          },
          "side": {
            "minLength": 1,
            "type": "string",
            "description": "The movement side"
          },
          "direction": {
            "type": "integer",
            "description": "The movement direction",
            "format": "int32"
          },
          "properties": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/PerpetualProperty"
            },
            "description": "The properties associated with the underlying Movement.",
            "nullable": true
          },
          "mappings": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TransactionPropertyMappingRequest"
            },
            "description": "This allows you to map a transaction property to a property on the underlying holding.",
            "nullable": true
          },
          "name": {
            "type": "string",
            "description": "The movement name (optional)",
            "nullable": true
          },
          "movementOptions": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Allows extra specifications for the movement. The only option currently available is 'DirectAdjustment'. A movement type of 'StockMovement' with an option of 'DirectAdjusment' will allow you to adjust the unitsof a holding without affecting its cost base. You will, therefore, be able to reflect the impact of a stock split by loading a Transaction.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "TransactionConfigurationTypeAlias": {
        "required": [
          "description",
          "transactionClass",
          "transactionRoles",
          "type"
        ],
        "type": "object",
        "properties": {
          "type": {
            "minLength": 1,
            "type": "string",
            "description": "The transaction type"
          },
          "description": {
            "minLength": 1,
            "type": "string",
            "description": "Brief description of the transaction"
          },
          "transactionClass": {
            "minLength": 1,
            "type": "string",
            "description": "Relates types of a similar class. E.g. Buy/Sell, StockIn/StockOut"
          },
          "transactionGroup": {
            "type": "string",
            "description": "Group is a set of codes related to a source, or sync. DEPRECATED: This field will be removed, use `Source` instead",
            "nullable": true
          },
          "source": {
            "maxLength": 64,
            "minLength": 1,
            "pattern": "^[a-zA-Z0-9\\-_]+$",
            "type": "string",
            "description": "Used to group a set of transaction types",
            "nullable": true
          },
          "transactionRoles": {
            "enum": [
              "None",
              "LongLonger",
              "LongShorter",
              "ShortShorter",
              "Shorter",
              "ShortLonger",
              "Longer",
              "AllRoles"
            ],
            "type": "string",
            "description": ". The available values are: None, LongLonger, LongShorter, ShortShorter, Shorter, ShortLonger, Longer, AllRoles"
          },
          "isDefault": {
            "type": "boolean",
            "description": "IsDefault is a flag that denotes the default alias for a source. There can only be, at most, one per source."
          }
        },
        "additionalProperties": false
      },
      "TransactionPrice": {
        "type": "object",
        "properties": {
          "price": {
            "type": "number",
            "format": "double"
          },
          "type": {
            "enum": [
              "Price",
              "Yield",
              "Spread"
            ],
            "type": "string",
            "description": "The available values are: Price, Yield, Spread"
          }
        },
        "additionalProperties": false
      },
      "TransactionPropertyMapping": {
        "required": [
          "propertyKey"
        ],
        "type": "object",
        "properties": {
          "propertyKey": {
            "type": "string",
            "description": "The key that uniquely identifies the property. It has the format {domain}/{scope}/{code}"
          },
          "mapFrom": {
            "type": "string",
            "description": "The Property Key of the Property to map from",
            "nullable": true
          },
          "setTo": {
            "description": "A pointer to the Property being mapped from",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "TransactionPropertyMappingRequest": {
        "required": [
          "propertyKey"
        ],
        "type": "object",
        "properties": {
          "propertyKey": {
            "type": "string",
            "description": "Uniquely identifies the property definition and consists of a Domain, Scope and Code."
          },
          "mapFrom": {
            "type": "string",
            "description": "The Property Key of the Property to map from.",
            "nullable": true
          },
          "setTo": {
            "description": "A pointer to the Property being mapped from.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "TransactionQueryParameters": {
        "required": [
          "endDate",
          "startDate"
        ],
        "type": "object",
        "properties": {
          "startDate": {
            "minLength": 1,
            "type": "string",
            "description": "The lower bound effective datetime or cut label (inclusive) from which to build the transactions.",
            "format": "dateorcutlabel"
          },
          "endDate": {
            "minLength": 1,
            "type": "string",
            "description": "The upper bound effective datetime or cut label (inclusive) from which to retrieve transactions.",
            "format": "dateorcutlabel"
          },
          "queryMode": {
            "enum": [
              "TradeDate",
              "SettleDate"
            ],
            "type": "string",
            "description": "The date to compare against the upper and lower bounds for the effective datetime or cut label. Defaults to 'TradeDate' if not specified. The available values are: TradeDate, SettleDate"
          },
          "showCancelledTransactions": {
            "type": "boolean",
            "description": "Option to specify whether or not to include cancelled transactions in the output. Defaults to False if not specified."
          }
        },
        "additionalProperties": false
      },
      "TransactionReconciliationRequest": {
        "required": [
          "fromTransactionDate",
          "leftPortfolioId",
          "rightPortfolioId",
          "toTransactionDate"
        ],
        "type": "object",
        "properties": {
          "leftPortfolioId": {
            "$ref": "#/components/schemas/ResourceId"
          },
          "rightPortfolioId": {
            "$ref": "#/components/schemas/ResourceId"
          },
          "mappingId": {
            "$ref": "#/components/schemas/ResourceId"
          },
          "fromTransactionDate": {
            "type": "string",
            "format": "date-time"
          },
          "toTransactionDate": {
            "type": "string",
            "format": "date-time"
          },
          "asAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "propertyKeys": {
            "type": "array",
            "items": {
              "type": "string",
              "description": "The key that uniquely identifies the property. It has the format {domain}/{scope}/{code}."
            },
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Specifies the parameter to be use when performing a Transaction Reconciliation."
      },
      "TransactionRequest": {
        "required": [
          "instrumentIdentifiers",
          "settlementDate",
          "totalConsideration",
          "transactionDate",
          "transactionId",
          "type",
          "units"
        ],
        "type": "object",
        "properties": {
          "transactionId": {
            "minLength": 1,
            "type": "string",
            "description": "The unique identifier of the transaction."
          },
          "type": {
            "minLength": 1,
            "type": "string",
            "description": "The type of the transaction, for example 'Buy' or 'Sell'. The transaction type must have been pre-configured using the System Configuration API. If not, this operation will succeed but you are not able to calculate holdings for the portfolio that include this transaction."
          },
          "instrumentIdentifiers": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "A set of instrument identifiers that can resolve the transaction to a unique instrument."
          },
          "transactionDate": {
            "minLength": 1,
            "type": "string",
            "description": "The date of the transaction.",
            "format": "dateorcutlabel"
          },
          "settlementDate": {
            "minLength": 1,
            "type": "string",
            "description": "The settlement date of the transaction.",
            "format": "dateorcutlabel"
          },
          "units": {
            "type": "number",
            "description": "The number of units of the transacted instrument.",
            "format": "double"
          },
          "transactionPrice": {
            "$ref": "#/components/schemas/TransactionPrice"
          },
          "totalConsideration": {
            "$ref": "#/components/schemas/CurrencyAndAmount"
          },
          "exchangeRate": {
            "type": "number",
            "description": "The exchange rate between the transaction and settlement currency (settlement currency being represented by TotalConsideration.Currency). For example, if the transaction currency is USD and the settlement currency is GBP, this would be the appropriate USD/GBP rate.",
            "format": "double",
            "nullable": true
          },
          "transactionCurrency": {
            "type": "string",
            "description": "The transaction currency.",
            "nullable": true
          },
          "properties": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/PerpetualProperty"
            },
            "description": "A list of unique transaction properties and associated values to store for the transaction. Each property must be from the 'Transaction' domain.",
            "nullable": true
          },
          "counterpartyId": {
            "type": "string",
            "description": "The identifier for the counterparty of the transaction.",
            "nullable": true
          },
          "source": {
            "type": "string",
            "description": "The source of the transaction. This is used to look up the appropriate transaction group set in the transaction type configuration.",
            "nullable": true
          },
          "otcConfirmation": {
            "$ref": "#/components/schemas/OtcConfirmation"
          },
          "orderId": {
            "$ref": "#/components/schemas/ResourceId"
          },
          "allocationId": {
            "$ref": "#/components/schemas/ResourceId"
          },
          "custodianAccountId": {
            "$ref": "#/components/schemas/ResourceId"
          }
        },
        "additionalProperties": false
      },
      "TransactionSetConfigurationData": {
        "required": [
          "transactionConfigs"
        ],
        "type": "object",
        "properties": {
          "transactionConfigs": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TransactionConfigurationData"
            },
            "description": "Collection of transaction type models"
          },
          "sideDefinitions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SideConfigurationData"
            },
            "description": "Collection of side definitions",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "description": "Collection of links.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "A collection of the data required to configure transaction types.."
      },
      "TransactionsReconciliationsResponse": {
        "type": "object",
        "properties": {
          "mapping": {
            "$ref": "#/components/schemas/Mapping"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ReconciledTransaction"
            },
            "description": "The result of this reconciliation",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "TransitionEvent": {
        "allOf": [
          {
            "$ref": "#/components/schemas/InstrumentEvent"
          },
          {
            "required": [
              "instrumentEventType"
            ],
            "type": "object",
            "properties": {
              "announcementDate": {
                "type": "string",
                "description": "The announcement date of the corporate action",
                "format": "date-time"
              },
              "exDate": {
                "type": "string",
                "description": "The ex date of the corporate action",
                "format": "date-time"
              },
              "recordDate": {
                "type": "string",
                "description": "The record date of the corporate action",
                "format": "date-time"
              },
              "paymentDate": {
                "type": "string",
                "description": "The payment date of the corporate action",
                "format": "date-time"
              },
              "inputTransition": {
                "$ref": "#/components/schemas/InputTransition"
              },
              "outputTransitions": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/OutputTransition"
                },
                "description": "The resulting transitions from this event",
                "nullable": true
              },
              "instrumentEventType": {
                "enum": [
                  "TransitionEvent",
                  "InformationalEvent",
                  "OpenEvent",
                  "CloseEvent",
                  "StockSplitEvent",
                  "BondDefaultEvent",
                  "CashDividendEvent",
                  "AmortisationEvent",
                  "CashFlowEvent",
                  "ExerciseEvent",
                  "ResetEvent",
                  "TriggerEvent",
                  "RawVendorEvent",
                  "InformationalErrorEvent"
                ],
                "type": "string",
                "description": "The Type of Event. The available values are: TransitionEvent, InformationalEvent, OpenEvent, CloseEvent, StockSplitEvent, BondDefaultEvent, CashDividendEvent, AmortisationEvent, CashFlowEvent, ExerciseEvent, ResetEvent, TriggerEvent, RawVendorEvent, InformationalErrorEvent"
              }
            }
          }
        ],
        "description": "A 'transition' within a corporate action, representing a set of output movements paired to a single input position"
      },
      "TriggerEvent": {
        "allOf": [
          {
            "$ref": "#/components/schemas/InstrumentEvent"
          },
          {
            "required": [
              "instrumentEventType",
              "level",
              "maturityDate",
              "triggerDate",
              "triggerDirection",
              "triggerType"
            ],
            "type": "object",
            "properties": {
              "level": {
                "type": "number",
                "description": "The underlying price level that triggers the event",
                "format": "double"
              },
              "triggerType": {
                "minLength": 1,
                "type": "string",
                "description": "The type of the trigger; valid options are Knock-In, Knock-Out, Touch or No-Touch"
              },
              "triggerDirection": {
                "minLength": 1,
                "type": "string",
                "description": "The direction of the trigger; valid options are Up and Down"
              },
              "triggerDate": {
                "type": "string",
                "description": "The date the trigger happens at.",
                "format": "date-time"
              },
              "maturityDate": {
                "type": "string",
                "description": "The date the trigger takes effect.",
                "format": "date-time"
              },
              "instrumentEventType": {
                "enum": [
                  "TransitionEvent",
                  "InformationalEvent",
                  "OpenEvent",
                  "CloseEvent",
                  "StockSplitEvent",
                  "BondDefaultEvent",
                  "CashDividendEvent",
                  "AmortisationEvent",
                  "CashFlowEvent",
                  "ExerciseEvent",
                  "ResetEvent",
                  "TriggerEvent",
                  "RawVendorEvent",
                  "InformationalErrorEvent"
                ],
                "type": "string",
                "description": "The Type of Event. The available values are: TransitionEvent, InformationalEvent, OpenEvent, CloseEvent, StockSplitEvent, BondDefaultEvent, CashDividendEvent, AmortisationEvent, CashFlowEvent, ExerciseEvent, ResetEvent, TriggerEvent, RawVendorEvent, InformationalErrorEvent"
              }
            }
          }
        ],
        "description": "Definition of a trigger event.\r\nThis is an event that occurs on transformation of an option instrument being\r\ntriggered by a barrier/touch price level being hit by the underlying asset."
      },
      "TypedResourceId": {
        "required": [
          "code",
          "idTypeCode",
          "idTypeScope"
        ],
        "type": "object",
        "properties": {
          "idTypeScope": {
            "maxLength": 64,
            "minLength": 1,
            "pattern": "^[a-zA-Z0-9\\-_]+$",
            "type": "string",
            "description": "The scope of the identifier's (property) definition."
          },
          "idTypeCode": {
            "maxLength": 64,
            "minLength": 1,
            "pattern": "^[a-zA-Z0-9\\-_]+$",
            "type": "string",
            "description": "The code of identifier's (property) definition. This describes what the identifier represents.\r\nFor a Person this might be a username, nationalInsuranceNumber or similar.\r\nFor a Legal Entity, this might be a registeredCompanyNumber or LEI."
          },
          "code": {
            "maxLength": 64,
            "minLength": 1,
            "pattern": "^[a-zA-Z0-9\\-_]+$",
            "type": "string",
            "description": "The value of the user-defined identifier in respect of the entity."
          }
        },
        "additionalProperties": false,
        "description": "Represents the user-defined identifier for a Legal Entity or Person.\r\nUsers can define their own, scoped identifiers for Legal Entities and Persons using identifier properties.\r\nFor example,\r\nwhen used to identify a Person, the identifier defined by Person/myScope/username would be represented as\r\n {\r\n   \"idTypeScope\": \"myScope\",\r\n   \"idTypeCode\": \"username\",\r\n   \"code\": \"john_doe_001\"\r\n }"
      },
      "UpdateCalendarRequest": {
        "required": [
          "properties",
          "sourceProvider",
          "weekendMask"
        ],
        "type": "object",
        "properties": {
          "weekendMask": {
            "$ref": "#/components/schemas/WeekendMask"
          },
          "sourceProvider": {
            "maxLength": 256,
            "minLength": 1,
            "pattern": "^[a-zA-Z0-9\\-_]+$",
            "type": "string"
          },
          "properties": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Property"
            }
          }
        },
        "additionalProperties": false
      },
      "UpdateCustomEntityDefinitionRequest": {
        "required": [
          "description",
          "displayName",
          "fieldSchema"
        ],
        "type": "object",
        "properties": {
          "displayName": {
            "minLength": 1,
            "pattern": "^[\\s\\S]*$",
            "type": "string",
            "description": "A display label for the custom entity type."
          },
          "description": {
            "minLength": 1,
            "pattern": "^[\\s\\S]*$",
            "type": "string",
            "description": "A description for the custom entity type."
          },
          "fieldSchema": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CustomEntityFieldDefinition"
            },
            "description": "The description of the fields on the custom entity type."
          }
        },
        "additionalProperties": false
      },
      "UpdateCutLabelDefinitionRequest": {
        "required": [
          "cutLocalTime",
          "displayName",
          "timeZone"
        ],
        "type": "object",
        "properties": {
          "displayName": {
            "minLength": 1,
            "pattern": "^[\\s\\S]*$",
            "type": "string"
          },
          "description": {
            "pattern": "^[\\s\\S]*$",
            "type": "string",
            "nullable": true
          },
          "cutLocalTime": {
            "$ref": "#/components/schemas/CutLocalTime"
          },
          "timeZone": {
            "minLength": 1,
            "type": "string"
          }
        },
        "additionalProperties": false,
        "description": "This request specifies a new Cut Label Definition"
      },
      "UpdateDataTypeRequest": {
        "type": "object",
        "properties": {
          "displayName": {
            "maxLength": 512,
            "minLength": 1,
            "pattern": "^[\\s\\S]*$",
            "type": "string",
            "description": "The display name of the data type.",
            "nullable": true
          },
          "description": {
            "maxLength": 1024,
            "minLength": 0,
            "pattern": "^[\\s\\S]*$",
            "type": "string",
            "description": "The description of the data type.",
            "nullable": true
          },
          "acceptableValues": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The acceptable set of values for this data type. Only applies to 'open' value type range.",
            "nullable": true
          },
          "acceptableUnits": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UpdateUnitRequest"
            },
            "description": "The definitions of the acceptable units.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "UpdateDerivedPropertyDefinitionRequest": {
        "required": [
          "dataTypeId",
          "derivationFormula",
          "displayName"
        ],
        "type": "object",
        "properties": {
          "displayName": {
            "minLength": 1,
            "type": "string",
            "description": "The display name of the property."
          },
          "dataTypeId": {
            "$ref": "#/components/schemas/ResourceId"
          },
          "propertyDescription": {
            "maxLength": 512,
            "type": "string",
            "description": "Describes the property",
            "nullable": true
          },
          "derivationFormula": {
            "minLength": 1,
            "type": "string",
            "description": "The rule that defines how data is composed for a derived property."
          }
        },
        "additionalProperties": false
      },
      "UpdateInstrumentIdentifierRequest": {
        "required": [
          "type"
        ],
        "type": "object",
        "properties": {
          "type": {
            "minLength": 1,
            "type": "string",
            "description": "The allowable instrument identifier to update, insert or remove e.g. 'Figi'."
          },
          "value": {
            "type": "string",
            "description": "The new value of the allowable instrument identifier. If unspecified the identifier will be removed from the instrument.",
            "nullable": true
          },
          "effectiveAt": {
            "type": "string",
            "description": "The effective datetime from which the identifier should be updated, inserted or removed. Defaults to the current LUSID system datetime if not specified.",
            "format": "dateorcutlabel",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "UpdatePortfolioGroupRequest": {
        "required": [
          "displayName"
        ],
        "type": "object",
        "properties": {
          "displayName": {
            "minLength": 1,
            "type": "string",
            "description": "The name of the portfolio group."
          },
          "description": {
            "type": "string",
            "description": "A long form description of the portfolio group.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "UpdatePortfolioRequest": {
        "required": [
          "displayName"
        ],
        "type": "object",
        "properties": {
          "displayName": {
            "minLength": 1,
            "type": "string",
            "description": "The name of the transaction portfolio."
          },
          "description": {
            "type": "string",
            "description": "The description of the transaction portfolio.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "UpdatePropertyDefinitionRequest": {
        "required": [
          "displayName"
        ],
        "type": "object",
        "properties": {
          "displayName": {
            "minLength": 1,
            "type": "string",
            "description": "The display name of the property."
          },
          "propertyDescription": {
            "maxLength": 512,
            "type": "string",
            "description": "Describes the property",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "UpdateRelationshipDefinitionRequest": {
        "required": [
          "displayName",
          "inwardDescription",
          "outwardDescription"
        ],
        "type": "object",
        "properties": {
          "displayName": {
            "maxLength": 512,
            "minLength": 1,
            "pattern": "^[\\s\\S]*$",
            "type": "string",
            "description": "The display name of the relation."
          },
          "outwardDescription": {
            "maxLength": 512,
            "minLength": 1,
            "pattern": "^[\\s\\S]*$",
            "type": "string",
            "description": "The description to relate source entity object and target entity object."
          },
          "inwardDescription": {
            "maxLength": 512,
            "minLength": 1,
            "pattern": "^[\\s\\S]*$",
            "type": "string",
            "description": "The description to relate target entity object and source entity object."
          }
        },
        "additionalProperties": false
      },
      "UpdateUnitRequest": {
        "type": "object",
        "properties": {
          "code": {
            "maxLength": 64,
            "minLength": 1,
            "pattern": "^[a-zA-Z0-9\\-_]+$",
            "type": "string",
            "nullable": true
          },
          "displayName": {
            "maxLength": 512,
            "minLength": 1,
            "pattern": "^[\\s\\S]*$",
            "type": "string",
            "nullable": true
          },
          "description": {
            "maxLength": 512,
            "minLength": 1,
            "pattern": "^[\\s\\S]*$",
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "UpsertComplexMarketDataRequest": {
        "required": [
          "marketData",
          "marketDataId"
        ],
        "type": "object",
        "properties": {
          "marketDataId": {
            "$ref": "#/components/schemas/ComplexMarketDataId"
          },
          "marketData": {
            "$ref": "#/components/schemas/ComplexMarketData"
          }
        },
        "additionalProperties": false,
        "description": "The details of the complex market data item to upsert into Lusid."
      },
      "UpsertComplianceRuleRequest": {
        "required": [
          "id",
          "parameters",
          "properties",
          "templateId",
          "variation"
        ],
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/ResourceId"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "active": {
            "type": "boolean"
          },
          "templateId": {
            "$ref": "#/components/schemas/ResourceId"
          },
          "variation": {
            "minLength": 1,
            "type": "string"
          },
          "parameters": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/ComplianceParameter"
            }
          },
          "properties": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/PerpetualProperty"
            }
          }
        },
        "additionalProperties": false
      },
      "UpsertCorporateActionRequest": {
        "required": [
          "announcementDate",
          "corporateActionCode",
          "exDate",
          "paymentDate",
          "recordDate",
          "transitions"
        ],
        "type": "object",
        "properties": {
          "corporateActionCode": {
            "maxLength": 64,
            "minLength": 1,
            "pattern": "^[a-zA-Z0-9\\-_]+$",
            "type": "string",
            "description": "The unique identifier of this corporate action"
          },
          "description": {
            "maxLength": 1024,
            "minLength": 0,
            "pattern": "^[\\s\\S]*$",
            "type": "string",
            "description": "The description of the corporate action.",
            "nullable": true
          },
          "announcementDate": {
            "type": "string",
            "description": "The announcement date of the corporate action",
            "format": "date-time"
          },
          "exDate": {
            "type": "string",
            "description": "The ex date of the corporate action",
            "format": "date-time"
          },
          "recordDate": {
            "type": "string",
            "description": "The record date of the corporate action",
            "format": "date-time"
          },
          "paymentDate": {
            "type": "string",
            "description": "The payment date of the corporate action",
            "format": "date-time"
          },
          "transitions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CorporateActionTransitionRequest"
            },
            "description": "The transitions that result from this corporate action"
          }
        },
        "additionalProperties": false
      },
      "UpsertCorporateActionsResponse": {
        "type": "object",
        "properties": {
          "href": {
            "type": "string",
            "description": "The specific Uniform Resource Identifier (URI) for this resource at the requested effective and asAt datetime.",
            "format": "uri",
            "nullable": true
          },
          "values": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/CorporateAction"
            },
            "description": "The corporate actions which have been successfully updated or inserted.",
            "nullable": true
          },
          "failed": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/ErrorDetail"
            },
            "description": "The corporate actions that could not be updated or inserted along with a reason for their failure.",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "description": "Collection of links.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "UpsertCounterpartyAgreementRequest": {
        "required": [
          "counterpartyAgreement"
        ],
        "type": "object",
        "properties": {
          "counterpartyAgreement": {
            "$ref": "#/components/schemas/CounterpartyAgreement"
          }
        },
        "additionalProperties": false,
        "description": "Counterparty Agreement that is to be stored in the convention data store.\r\nThere must be only one of these present."
      },
      "UpsertCreditSupportAnnexRequest": {
        "type": "object",
        "properties": {
          "creditSupportAnnex": {
            "$ref": "#/components/schemas/CreditSupportAnnex"
          }
        },
        "additionalProperties": false,
        "description": "Credit Support Annex information. The interaction in terms of margining requirements between a set of trades for a given counterparty."
      },
      "UpsertCustomEntitiesResponse": {
        "type": "object",
        "properties": {
          "href": {
            "type": "string",
            "description": "The specific Uniform Resource Identifier (URI) for this resource at the requested effective and asAt datetime.",
            "format": "uri",
            "nullable": true
          },
          "values": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/CustomEntityResponse"
            },
            "description": "The custom-entities which have been successfully updated or created.",
            "nullable": true
          },
          "failed": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/ErrorDetail"
            },
            "description": "The custom-entities that could not be updated or created or were left unchanged without error along with a reason for their failure.",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "description": "Collection of links.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "UpsertCustomEntityAccessMetadataRequest": {
        "type": "object",
        "properties": {
          "metadata": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AccessMetadataValue"
            },
            "description": "The access control metadata to assign to a CustomEntity that matches the identifier",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "UpsertInstrumentEventRequest": {
        "required": [
          "instrumentEvent",
          "instrumentEventId",
          "instrumentIdentifiers"
        ],
        "type": "object",
        "properties": {
          "instrumentEventId": {
            "maxLength": 64,
            "minLength": 1,
            "pattern": "^[a-zA-Z0-9\\-_]+$",
            "type": "string",
            "description": "Free string that uniquely identifies the event within the corporate action source"
          },
          "instrumentIdentifiers": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "The set of identifiers which determine the instrument this event relates to."
          },
          "description": {
            "maxLength": 1024,
            "minLength": 0,
            "pattern": "^[\\s\\S]*$",
            "type": "string",
            "description": "The description of the instrument event.",
            "nullable": true
          },
          "instrumentEvent": {
            "$ref": "#/components/schemas/InstrumentEvent"
          },
          "properties": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PerpetualProperty"
            },
            "description": "The properties attached to this instrument event.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "UpsertInstrumentEventsResponse": {
        "type": "object",
        "properties": {
          "href": {
            "type": "string",
            "description": "The specific Uniform Resource Identifier (URI) for this resource at the requested effective and asAt datetime.",
            "format": "uri",
            "nullable": true
          },
          "values": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/InstrumentEventHolder"
            },
            "description": "The corporate actions which have been successfully updated or inserted.",
            "nullable": true
          },
          "failed": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/ErrorDetail"
            },
            "description": "The corporate actions that could not be updated or inserted along with a reason for their failure.",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "description": "Collection of links.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "UpsertInstrumentPropertiesResponse": {
        "required": [
          "asAtDate"
        ],
        "type": "object",
        "properties": {
          "asAtDate": {
            "type": "string",
            "description": "The as-at datetime at which properties were created or updated.",
            "format": "date-time"
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "description": "Collection of links.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "UpsertInstrumentPropertyRequest": {
        "required": [
          "identifier",
          "identifierType"
        ],
        "type": "object",
        "properties": {
          "identifierType": {
            "minLength": 1,
            "type": "string",
            "description": "The unique identifier type to search for the instrument, for example 'Figi'."
          },
          "identifier": {
            "minLength": 1,
            "type": "string",
            "description": "A value of that type to identify the instrument to upsert properties for, for example 'BBG000BLNNV0'."
          },
          "properties": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Property"
            },
            "description": "A set of instrument properties and associated values to store for the instrument. Each property must be from the 'Instrument' domain.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "UpsertInstrumentsResponse": {
        "type": "object",
        "properties": {
          "href": {
            "type": "string",
            "description": "The specific Uniform Resource Identifier (URI) for this resource at the requested effective and asAt datetime.",
            "format": "uri",
            "nullable": true
          },
          "values": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/Instrument"
            },
            "description": "The instruments which have been successfully updated or created.",
            "nullable": true
          },
          "failed": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/ErrorDetail"
            },
            "description": "The instruments that could not be updated or created or were left unchanged without error along with a reason for their failure.",
            "nullable": true
          },
          "metadata": {
            "type": "object",
            "additionalProperties": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/ResponseMetaData"
              }
            },
            "description": "Meta data associated with the upsert event.",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "description": "Collection of links.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "UpsertLegalEntitiesResponse": {
        "type": "object",
        "properties": {
          "href": {
            "type": "string",
            "description": "The specific Uniform Resource Identifier (URI) for this resource at the requested effective and asAt datetime.",
            "format": "uri",
            "nullable": true
          },
          "values": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/LegalEntity"
            },
            "description": "The legal entities which have been successfully updated or created.",
            "nullable": true
          },
          "failed": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/ErrorDetail"
            },
            "description": "The legal entities that could not be updated or created or were left unchanged without error along with a reason for their failure.",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "description": "Collection of links.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "UpsertLegalEntityAccessMetadataRequest": {
        "type": "object",
        "properties": {
          "metadata": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AccessMetadataValue"
            },
            "description": "The access control metadata to assign to a Legal Entity that matches the identifier",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "UpsertLegalEntityRequest": {
        "required": [
          "displayName",
          "identifiers"
        ],
        "type": "object",
        "properties": {
          "identifiers": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/Property"
            },
            "description": "The identifiers the legal entity will be upserted with.The provided keys should be idTypeScope, idTypeCode, code"
          },
          "properties": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/Property"
            },
            "description": "A set of properties associated to the Legal Entity.",
            "nullable": true
          },
          "displayName": {
            "maxLength": 512,
            "minLength": 1,
            "pattern": "^[\\s\\S]*$",
            "type": "string",
            "description": "The display name of the Legal Entity"
          },
          "description": {
            "maxLength": 512,
            "minLength": 0,
            "pattern": "^[\\s\\S]*$",
            "type": "string",
            "description": "The description of the Legal Entity",
            "nullable": true
          },
          "counterpartyRiskInformation": {
            "$ref": "#/components/schemas/CounterpartyRiskInformation"
          }
        },
        "additionalProperties": false,
        "description": "Request to create or update an legal entity"
      },
      "UpsertPersonAccessMetadataRequest": {
        "type": "object",
        "properties": {
          "metadata": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AccessMetadataValue"
            },
            "description": "The access control metadata to assign to a Person that matches the identifier",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "UpsertPersonRequest": {
        "required": [
          "displayName",
          "identifiers"
        ],
        "type": "object",
        "properties": {
          "identifiers": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/Property"
            },
            "description": "The identifiers the person will be upserted with.The provided keys should be idTypeScope, idTypeCode, code"
          },
          "properties": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/Property"
            },
            "description": "A set of properties associated to the Person. There can be multiple properties associated with a property key.",
            "nullable": true
          },
          "displayName": {
            "maxLength": 512,
            "minLength": 1,
            "type": "string",
            "description": "The display name of the Person"
          },
          "description": {
            "maxLength": 512,
            "minLength": 0,
            "type": "string",
            "description": "The description of the Person",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "UpsertPortfolioAccessMetadataRequest": {
        "required": [
          "metadata"
        ],
        "type": "object",
        "properties": {
          "metadata": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AccessMetadataValue"
            },
            "description": "The access control metadata to assign to portfolios that match the identifier"
          }
        },
        "additionalProperties": false
      },
      "UpsertPortfolioGroupAccessMetadataRequest": {
        "required": [
          "metadata"
        ],
        "type": "object",
        "properties": {
          "metadata": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AccessMetadataValue"
            },
            "description": "The access control metadata to assign to portfolio groups that match the identifier"
          }
        },
        "additionalProperties": false
      },
      "UpsertPortfolioTransactionsResponse": {
        "required": [
          "version"
        ],
        "type": "object",
        "properties": {
          "version": {
            "$ref": "#/components/schemas/Version"
          },
          "href": {
            "type": "string",
            "description": "The specific Uniform Resource Identifier (URI) for this resource at the requested effective and asAt datetime.",
            "format": "uri",
            "nullable": true
          },
          "metadata": {
            "type": "object",
            "additionalProperties": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/ResponseMetaData"
              }
            },
            "description": "Contains warnings related to unresolved instruments or non-existent transaction types for the upserted trades",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "description": "Collection of links.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "UpsertQuoteRequest": {
        "required": [
          "quoteId"
        ],
        "type": "object",
        "properties": {
          "quoteId": {
            "$ref": "#/components/schemas/QuoteId"
          },
          "metricValue": {
            "$ref": "#/components/schemas/MetricValue"
          },
          "lineage": {
            "type": "string",
            "description": "Description of the quote's lineage e.g. 'FundAccountant_GreenQuality'.",
            "nullable": true
          },
          "scaleFactor": {
            "type": "number",
            "description": "An optional scale factor for non-standard scaling of quotes against the instrument. For example, if you wish the quote's Value to be scaled down by a factor of 100, enter 100. If not supplied, the default ScaleFactor is 1.",
            "format": "double",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "The details of the quote including its unique identifier, value and lineage."
      },
      "UpsertQuotesResponse": {
        "type": "object",
        "properties": {
          "href": {
            "type": "string",
            "description": "The specific Uniform Resource Identifier (URI) for this resource at the requested effective and asAt datetime.",
            "format": "uri",
            "nullable": true
          },
          "values": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/Quote"
            },
            "description": "The quotes which have been successfully updated or inserted.",
            "nullable": true
          },
          "failed": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/ErrorDetail"
            },
            "description": "The quotes that could not be updated or inserted along with a reason for their failure.",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "description": "Collection of links.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "UpsertRecipeRequest": {
        "type": "object",
        "properties": {
          "configurationRecipe": {
            "$ref": "#/components/schemas/ConfigurationRecipe"
          },
          "configurationRecipeSnippet": {
            "$ref": "#/components/schemas/ConfigurationRecipeSnippet"
          }
        },
        "additionalProperties": false,
        "description": "A recipe or recipe snippet that is to be stored in the recipe structured data store.\r\nOnly one of these must be present."
      },
      "UpsertReferencePortfolioConstituentsRequest": {
        "required": [
          "constituents",
          "effectiveFrom",
          "weightType"
        ],
        "type": "object",
        "properties": {
          "effectiveFrom": {
            "minLength": 1,
            "type": "string",
            "description": "The first date from which the weights will apply",
            "format": "dateorcutlabel"
          },
          "weightType": {
            "enum": [
              "Static",
              "Floating",
              "Periodical"
            ],
            "type": "string",
            "description": "The available values are: Static, Floating, Periodical"
          },
          "periodType": {
            "enum": [
              "Daily",
              "Weekly",
              "Monthly",
              "Quarterly",
              "Annually"
            ],
            "type": "string",
            "description": "The available values are: Daily, Weekly, Monthly, Quarterly, Annually",
            "nullable": true
          },
          "periodCount": {
            "type": "integer",
            "description": "",
            "format": "int32",
            "nullable": true
          },
          "constituents": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ReferencePortfolioConstituentRequest"
            },
            "description": "Set of constituents (instrument/weight pairings)"
          }
        },
        "additionalProperties": false
      },
      "UpsertReferencePortfolioConstituentsResponse": {
        "type": "object",
        "properties": {
          "href": {
            "type": "string",
            "format": "uri",
            "nullable": true
          },
          "version": {
            "$ref": "#/components/schemas/Version"
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "description": "Collection of links.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "UpsertReturnsResponse": {
        "required": [
          "version"
        ],
        "type": "object",
        "properties": {
          "version": {
            "$ref": "#/components/schemas/Version"
          },
          "href": {
            "type": "string",
            "description": "The specific Uniform Resource Identifier (URI) for this resource at the requested effective and asAt datetime.",
            "format": "uri",
            "nullable": true
          },
          "values": {
            "type": "array",
            "items": {
              "type": "object",
              "additionalProperties": {
                "type": "string",
                "format": "date-time"
              }
            },
            "description": "The set of values that were successfully retrieved.",
            "nullable": true
          },
          "failed": {
            "type": "array",
            "items": {
              "type": "object",
              "additionalProperties": {
                "$ref": "#/components/schemas/ErrorDetail"
              }
            },
            "description": "The set of values that could not be retrieved due along with a reason for this, e.g badly formed request.",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "description": "Collection of links.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Response from upserting Returns"
      },
      "UpsertSingleStructuredDataResponse": {
        "type": "object",
        "properties": {
          "href": {
            "type": "string",
            "description": "The specific Uniform Resource Identifier (URI) for this resource at the requested effective and asAt datetime.",
            "format": "uri",
            "nullable": true
          },
          "value": {
            "type": "string",
            "description": "The value that was successfully retrieved.",
            "format": "date-time"
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "description": "Collection of links.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Response from upserting structured data document"
      },
      "UpsertStructuredDataResponse": {
        "type": "object",
        "properties": {
          "href": {
            "type": "string",
            "description": "The specific Uniform Resource Identifier (URI) for this resource at the requested effective and asAt datetime.",
            "format": "uri",
            "nullable": true
          },
          "values": {
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "format": "date-time"
            },
            "description": "The set of values that were successfully retrieved.",
            "nullable": true
          },
          "failed": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/ErrorDetail"
            },
            "description": "The set of values that could not be retrieved due along with a reason for this, e.g badly formed request.",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "description": "Collection of links.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Response from upserting structured data document"
      },
      "UpsertTransactionPropertiesResponse": {
        "type": "object",
        "properties": {
          "href": {
            "type": "string",
            "description": "The specific Uniform Resource Identifier (URI) for this resource at the requested effective and asAt datetime.",
            "format": "uri",
            "nullable": true
          },
          "version": {
            "$ref": "#/components/schemas/Version"
          },
          "properties": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/PerpetualProperty"
            },
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "description": "Collection of links.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "User": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The unique id of the user.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "The unique id of the user that issued the command."
      },
      "ValuationRequest": {
        "required": [
          "metrics",
          "portfolioEntityIds",
          "recipeId",
          "valuationSchedule"
        ],
        "type": "object",
        "properties": {
          "recipeId": {
            "$ref": "#/components/schemas/ResourceId"
          },
          "asAt": {
            "type": "string",
            "description": "The asAt date to use",
            "format": "date-time",
            "nullable": true
          },
          "metrics": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AggregateSpec"
            },
            "description": "The set of specifications to calculate or retrieve during the valuation and present in the results. For example:\r\nAggregateSpec('Valuation/PV','Sum') for returning the PV (present value) of holdings\r\nAggregateSpec('Holding/default/Units','Sum') for returning the units of holidays\r\nAggregateSpec('Instrument/default/LusidInstrumentId','Value') for returning the Lusid Instrument identifier"
          },
          "groupBy": {
            "type": "array",
            "items": {
              "type": "string",
              "description": "The key that uniquely identifies a queryable address in Lusid."
            },
            "description": "The set of items by which to perform grouping. This primarily matters when one or more of the metric operators is a mapping\r\nthat reduces set size, e.g. sum or proportion. The group-by statement determines the set of keys by which to break the results out.",
            "nullable": true
          },
          "filters": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PropertyFilter"
            },
            "description": "A set of filters to use to reduce the data found in a request. Equivalent to the 'where ...' part of a Sql select statement.\r\nFor example, filter a set of values within a given range or matching a particular value.",
            "nullable": true
          },
          "sort": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OrderBySpec"
            },
            "description": "A (possibly empty/null) set of specifications for how to order the results.",
            "nullable": true
          },
          "reportCurrency": {
            "maxLength": 3,
            "minLength": 0,
            "type": "string",
            "description": "Three letter ISO currency string indicating what currency to report in for ReportCurrency denominated queries.\r\nIf not present, then the currency of the relevant portfolio will be used in its place.",
            "nullable": true
          },
          "equipWithSubtotals": {
            "type": "boolean",
            "description": "Flag directing the Valuation call to populate the results with subtotals of aggregates."
          },
          "returnResultAsExpandedTypes": {
            "type": "boolean",
            "description": "Financially meaningful results can be presented as either simple flat types or more complex expanded types.\r\nFor example, the present value (PV) of a holding could be represented either as a simple decimal (with currency implied)\r\nor as a decimal-currency pair. This flag allows either representation to be returned. In the PV example,\r\nthe returned value would be the decimal-currency pair if this flag is true, or the decimal only if this flag is false."
          },
          "portfolioEntityIds": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PortfolioEntityId"
            },
            "description": "The set of portfolio or portfolio group identifier(s) that is to be valued."
          },
          "valuationSchedule": {
            "$ref": "#/components/schemas/ValuationSchedule"
          },
          "marketDataOverrides": {
            "$ref": "#/components/schemas/MarketDataOverrides"
          }
        },
        "additionalProperties": false,
        "description": "Specification object for the parameters of a valuation"
      },
      "ValuationSchedule": {
        "required": [
          "effectiveAt"
        ],
        "type": "object",
        "properties": {
          "effectiveFrom": {
            "type": "string",
            "description": "If present, the EffectiveFrom and EffectiveAt dates are interpreted as a range of dates for which to perform a valuation.\r\nIn this case, valuation is calculated for the portfolio(s) for each business day in the given range.",
            "format": "dateorcutlabel",
            "nullable": true
          },
          "effectiveAt": {
            "minLength": 1,
            "type": "string",
            "description": "The market data time, i.e. the time to run the valuation request effective of.",
            "format": "dateorcutlabel"
          },
          "tenor": {
            "maxLength": 16,
            "minLength": 0,
            "type": "string",
            "description": "Tenor, e.g \"1D\", \"1M\" to be used in generating the date schedule when effectiveFrom and effectiveAt are both given and are not the same.",
            "nullable": true
          },
          "rollConvention": {
            "maxLength": 50,
            "minLength": 0,
            "type": "string",
            "description": "When Tenor is given and is not equal to \"1D\", there may be cases where \"date + tenor\" land on non-business days around month end.\r\nIn that case, the RollConvention, e.g. modified following \"MF\" would be applied to determine the next GBD.",
            "nullable": true
          },
          "holidayCalendars": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The holiday calendar(s) that should be used in determining the date schedule.\r\nHoliday calendar(s) are supplied by their names, for example, \"CoppClark\". \r\nNote that when the calendars are not available (e.g. when the user has insufficient permissions), \r\na recipe setting will be used to determine whether the whole batch should then fail or whether the calendar not being available should simply be ignored.",
            "nullable": true
          },
          "valuationDateTimes": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "If given, this is the exact set of dates on which to perform a valuation. This will replace/override all other specified values if given.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Specification object for the valuation schedule, how do we determine which days we wish to perform a valuation upon."
      },
      "ValuationsReconciliationRequest": {
        "required": [
          "left",
          "right"
        ],
        "type": "object",
        "properties": {
          "left": {
            "$ref": "#/components/schemas/ValuationRequest"
          },
          "right": {
            "$ref": "#/components/schemas/ValuationRequest"
          },
          "leftToRightMapping": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ReconciliationLeftRightAddressKeyPair"
            },
            "description": "The mapping from property keys requested by left aggregation to property keys on right hand side",
            "nullable": true
          },
          "preserveKeys": {
            "type": "array",
            "items": {
              "type": "string",
              "description": "The key that uniquely identifies a queryable address in Lusid."
            },
            "description": "List of keys to preserve (from rhs) in the diff. Used in conjunction with filtering/grouping.\r\nIf two values are equal, for a given key then the value is elided from the results. Setting it here\r\nwill preserve it (takes the values from the RHS and puts it into the line by line results).",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Specification for the reconciliation request. Left and Right hand sides are constructed. Each consists of a valuation of a portfolio\r\nusing an aggregation request. The results of this can then be compared to each other. The difference, which is effectively a risk based\r\ndifference allows comparison of the effects of changing a recipe, valuation date, or (though it may or may not make logical sense) a portfolio.\r\nFor instance, one might look at the difference in risk caused by the addition of transaction to a portfolio, or through changing the valuation\r\nmethodology or system."
      },
      "ValueType": {
        "enum": [
          "String",
          "Int",
          "Decimal",
          "DateTime",
          "Boolean",
          "Map",
          "List",
          "PropertyArray",
          "Percentage",
          "Code",
          "Id",
          "Uri",
          "CurrencyAndAmount",
          "TradePrice",
          "Currency",
          "MetricValue",
          "ResourceId",
          "ResultValue",
          "CutLocalTime",
          "DateOrCutLabel",
          "UnindexedText"
        ],
        "type": "string",
        "description": "A list of types, familiar to the Ui, that define the expected input or output types on a piece of data"
      },
      "VendorModelRule": {
        "required": [
          "instrumentType",
          "modelName",
          "supplier"
        ],
        "type": "object",
        "properties": {
          "supplier": {
            "enum": [
              "Lusid",
              "RefinitivQps",
              "RefinitivTracsWeb",
              "VolMaster",
              "IsdaCds",
              "YieldBook",
              "LusidCalc"
            ],
            "type": "string",
            "description": "The available values are: Lusid, RefinitivQps, RefinitivTracsWeb, VolMaster, IsdaCds, YieldBook, LusidCalc"
          },
          "modelName": {
            "maxLength": 128,
            "minLength": 0,
            "type": "string",
            "description": "The vendor library model name"
          },
          "instrumentType": {
            "maxLength": 32,
            "minLength": 0,
            "type": "string",
            "description": "The vendor library instrument type"
          },
          "parameters": {
            "maxLength": 64,
            "minLength": 0,
            "type": "string",
            "description": "THIS FIELD IS DEPRECATED - use ModelOptions\r\nThe set of opaque model parameters, provided as a Json object, that is a string object which will internally be converted to a dictionary of string to object.\r\nNote that this is not intended as the final form of this object. It will be replaced with a more structured object as the set of parameters that are possible is\r\nbetter understood.",
            "nullable": true
          },
          "modelOptions": {
            "$ref": "#/components/schemas/ModelOptions"
          },
          "instrumentId": {
            "type": "string",
            "description": "This field should generally not be required. It indicates a specific case where there is a particular need to make a rule apply to only a single instrument\r\nspecified by an identifier on that instrument such as its LUID. One particular example would be to control the behaviour of a look-through portfolio scaling\r\nmethodology, such as where there is a mixture of indices and credit-debit portfolios where scaling on the sum of valuation would be deemed incorrectly for one\r\nset but desired in general.",
            "nullable": true
          },
          "addressKeyFilters": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AddressKeyFilter"
            },
            "description": "Condition for model selection. If a condition is satisfied the default model for valuation is overridden (for that instrument).",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "A rule that identifies the set of preferences to be used for a given library, model and instrument type.\r\nThere can be many such rules, though only the first found for a given combination would be used."
      },
      "Version": {
        "required": [
          "asAtDate",
          "effectiveFrom"
        ],
        "type": "object",
        "properties": {
          "effectiveFrom": {
            "type": "string",
            "description": "The effective datetime at which this version became valid. Only applies when a single entity is being interacted with.",
            "format": "date-time"
          },
          "asAtDate": {
            "type": "string",
            "description": "The asAt datetime at which the data was committed to LUSID.",
            "format": "date-time"
          },
          "asAtCreated": {
            "type": "string",
            "description": "The asAt datetime at which the entity was first created in LUSID.",
            "format": "date-time",
            "nullable": true,
            "readOnly": true
          },
          "userIdCreated": {
            "type": "string",
            "description": "The unique id of the user who created the entity.",
            "nullable": true,
            "readOnly": true
          },
          "asAtModified": {
            "type": "string",
            "description": "The asAt datetime at which the entity (including its properties) was last updated in LUSID.",
            "format": "date-time",
            "nullable": true,
            "readOnly": true
          },
          "userIdModified": {
            "type": "string",
            "description": "The unique id of the user who last updated the entity (including its properties) in LUSID.",
            "nullable": true,
            "readOnly": true
          },
          "asAtVersionNumber": {
            "type": "integer",
            "description": "The integer version number for the entity (the entity was created at version 1)",
            "format": "int32",
            "nullable": true,
            "readOnly": true
          }
        },
        "additionalProperties": false,
        "description": "The version metadata."
      },
      "VersionedResourceListOfA2BDataRecord": {
        "required": [
          "values",
          "version"
        ],
        "type": "object",
        "properties": {
          "version": {
            "$ref": "#/components/schemas/Version"
          },
          "values": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/A2BDataRecord"
            },
            "description": "The resources to list."
          },
          "href": {
            "type": "string",
            "description": "The URI of the resource list.",
            "format": "uri",
            "nullable": true
          },
          "nextPage": {
            "type": "string",
            "description": "The next page of results.",
            "nullable": true
          },
          "previousPage": {
            "type": "string",
            "description": "The previous page of results.",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "description": "Collection of links.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "VersionedResourceListOfA2BMovementRecord": {
        "required": [
          "values",
          "version"
        ],
        "type": "object",
        "properties": {
          "version": {
            "$ref": "#/components/schemas/Version"
          },
          "values": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/A2BMovementRecord"
            },
            "description": "The resources to list."
          },
          "href": {
            "type": "string",
            "description": "The URI of the resource list.",
            "format": "uri",
            "nullable": true
          },
          "nextPage": {
            "type": "string",
            "description": "The next page of results.",
            "nullable": true
          },
          "previousPage": {
            "type": "string",
            "description": "The previous page of results.",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "description": "Collection of links.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "VersionedResourceListOfOutputTransaction": {
        "required": [
          "values",
          "version"
        ],
        "type": "object",
        "properties": {
          "version": {
            "$ref": "#/components/schemas/Version"
          },
          "values": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OutputTransaction"
            },
            "description": "The resources to list."
          },
          "href": {
            "type": "string",
            "description": "The URI of the resource list.",
            "format": "uri",
            "nullable": true
          },
          "nextPage": {
            "type": "string",
            "description": "The next page of results.",
            "nullable": true
          },
          "previousPage": {
            "type": "string",
            "description": "The previous page of results.",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "description": "Collection of links.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "VersionedResourceListOfPortfolioHolding": {
        "required": [
          "values",
          "version"
        ],
        "type": "object",
        "properties": {
          "version": {
            "$ref": "#/components/schemas/Version"
          },
          "values": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PortfolioHolding"
            },
            "description": "The resources to list."
          },
          "href": {
            "type": "string",
            "description": "The URI of the resource list.",
            "format": "uri",
            "nullable": true
          },
          "nextPage": {
            "type": "string",
            "description": "The next page of results.",
            "nullable": true
          },
          "previousPage": {
            "type": "string",
            "description": "The previous page of results.",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "description": "Collection of links.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "VersionedResourceListOfTransaction": {
        "required": [
          "values",
          "version"
        ],
        "type": "object",
        "properties": {
          "version": {
            "$ref": "#/components/schemas/Version"
          },
          "values": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Transaction"
            },
            "description": "The resources to list."
          },
          "href": {
            "type": "string",
            "description": "The URI of the resource list.",
            "format": "uri",
            "nullable": true
          },
          "nextPage": {
            "type": "string",
            "description": "The next page of results.",
            "nullable": true
          },
          "previousPage": {
            "type": "string",
            "description": "The previous page of results.",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "description": "Collection of links.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "VersionSummaryDto": {
        "type": "object",
        "properties": {
          "apiVersion": {
            "type": "string",
            "nullable": true
          },
          "buildVersion": {
            "type": "string",
            "nullable": true
          },
          "excelVersion": {
            "type": "string",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "description": "Collection of links.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "WeekendMask": {
        "required": [
          "days",
          "timeZone"
        ],
        "type": "object",
        "properties": {
          "days": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DayOfWeek"
            }
          },
          "timeZone": {
            "maxLength": 256,
            "minLength": 1,
            "pattern": "^[a-zA-Z0-9\\-_]+$",
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "WeightedInstrument": {
        "type": "object",
        "properties": {
          "quantity": {
            "type": "number",
            "description": "The quantity of the instrument that is owned.",
            "format": "double"
          },
          "holdingIdentifier": {
            "maxLength": 256,
            "minLength": 0,
            "type": "string",
            "description": "Identifier for the instrument.\r\nFor a single, unique trade or transaction this can be thought of as equivalent to the transaction identifier, or\r\na composite of the sub-holding keys for a regular sub-holding. When there are multiple transactions sharing the same underlying instrument\r\nsuch as purchase of shares on multiple dates where tax implications are different this would not be the case.\r\n\r\nIn an inlined aggregation request if this is wanted to identify a line item, it can be specified in the set of aggregation keys given on the aggregation\r\nrequest that accompanies the set of weighted instruments.",
            "nullable": true
          },
          "instrument": {
            "$ref": "#/components/schemas/LusidInstrument"
          }
        },
        "additionalProperties": false,
        "description": "Specification for a holding or quantity of (weight for) an instrument on a given date."
      },
      "WeightedInstruments": {
        "required": [
          "instruments"
        ],
        "type": "object",
        "properties": {
          "instruments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/WeightedInstrument"
            },
            "description": "The instruments that are held in the set."
          }
        },
        "additionalProperties": false,
        "description": "Class that models a set of instruments of which each has some quantity and can be identified by a unique label."
      },
      "YieldCurveData": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ComplexMarketData"
          },
          {
            "required": [
              "baseDate",
              "instruments",
              "marketDataType",
              "quotes"
            ],
            "type": "object",
            "properties": {
              "baseDate": {
                "type": "string",
                "description": "Base date",
                "format": "date-time"
              },
              "instruments": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/LusidInstrument"
                },
                "description": "The set of instruments that define the curve."
              },
              "quotes": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/MarketQuote"
                },
                "description": "The market quotes corresponding to the the instruments used to define the curve"
              },
              "lineage": {
                "maxLength": 1024,
                "minLength": 0,
                "type": "string",
                "description": "Description of the complex market data's lineage e.g. 'FundAccountant_GreenQuality'.",
                "nullable": true
              },
              "marketDataOptions": {
                "$ref": "#/components/schemas/MarketDataOptions"
              },
              "marketDataType": {
                "enum": [
                  "DiscountFactorCurveData",
                  "EquityVolSurfaceData",
                  "FxVolSurfaceData",
                  "IrVolCubeData",
                  "OpaqueMarketData",
                  "YieldCurveData",
                  "FxForwardCurveData",
                  "FxForwardPipsCurveData",
                  "FxForwardTenorCurveData",
                  "FxForwardTenorPipsCurveData",
                  "FxForwardCurveByQuoteReference",
                  "CreditSpreadCurveData",
                  "EquityCurveByPricesData"
                ],
                "type": "string",
                "description": "The available values are: DiscountFactorCurveData, EquityVolSurfaceData, FxVolSurfaceData, IrVolCubeData, OpaqueMarketData, YieldCurveData, FxForwardCurveData, FxForwardPipsCurveData, FxForwardTenorCurveData, FxForwardTenorPipsCurveData, FxForwardCurveByQuoteReference, CreditSpreadCurveData, EquityCurveByPricesData"
              }
            }
          }
        ],
        "description": "Market data for a yield curve,  represented by a list of instruments and corresponding market quotes"
      }
    },
    "securitySchemes": {
      "oauth2": {
        "type": "oauth2",
        "description": "OAuth2 Implicit Grant",
        "flows": {
          "implicit": {
            "authorizationUrl": "https://dummyurl.lusid.com/",
            "scopes": {}
          }
        }
      }
    }
  },
  "security": [
    {}
  ],
  "tags": [
    {
      "name": "Abor",
      "description": "Methods to create and manage abor."
    },
    {
      "name": "AborConfiguration",
      "description": "Methods to create and manage abor configuration."
    },
    {
      "name": "AddressKeyDefinition",
      "description": "An address key definition contains an address key and a type. Globally defined address key definitions can be used to enhance the functionality of documents in the structured results store."
    },
    {
      "name": "Aggregation",
      "description": "Methods for accessing aggregated data"
    },
    {
      "name": "Allocation Service",
      "description": "Methods for interacting with the Allocation Service"
    },
    {
      "name": "Allocations",
      "description": "Methods for interacting with Allocations. An Allocation represents the redistribution of market Executions against an originating Order. Allocations are treated monotemporally; any updates are effective at the as-at time of update, and its not possible to make retroactive (or forward) changes."
    },
    {
      "name": "Application Metadata",
      "description": "Methods for querying application metadata"
    },
    {
      "name": "Blocks",
      "description": "A Block represents a set of orders for the same instrument, intended to record for example a trader'saggregation of outstanding orders at a given time. Blocks are treated monotemporally; any updates are effectiveat the as-at time of update, and it's not possible to make retroactive (or forward) changes."
    },
    {
      "name": "Calendars",
      "description": ""
    },
    {
      "name": "Chart Of Accounts",
      "description": "Methods to create and manage chart of accounts and accounts."
    },
    {
      "name": "Complex Market Data",
      "description": "Methods for the storage and retrieval of complex market data documents."
    },
    {
      "name": "Compliance",
      "description": "Methods for storage and retrieval of compliance data: rules and results."
    },
    {
      "name": "Compliance - Generic",
      "description": "Methods for storage and retrieval of generic compliance data: templates"
    },
    {
      "name": "Configuration Recipe",
      "description": "Methods for the storage and retrieval of Configuration Recipe documents. Read more about these in the LUSID Knowledge Base here https://support.lusid.com/what-is-a-lusid-recipe-and-how-is-it-used."
    },
    {
      "name": "Conventions",
      "description": "Methods for the storage and retrieval of flow conventions."
    },
    {
      "name": "Corporate Action Sources",
      "description": "Methods for storage and retrieval of Corporate Action Sources"
    },
    {
      "name": "Counterparties",
      "description": "Methods for the storage and retrieval of counterparty related information such as Counterparty Agreements, Credit Support Annexes and Netting Set data."
    },
    {
      "name": "CustomEntities",
      "description": ""
    },
    {
      "name": "CustomEntityDefinitions",
      "description": ""
    },
    {
      "name": "Cut Label Definitions",
      "description": "Methods for interacting with Cut Label Definitions"
    },
    {
      "name": "Data Types",
      "description": "Methods for administering data types"
    },
    {
      "name": "Derived Transaction Portfolios",
      "description": "A derived transaction portfolio inherits all the transactions from a parent transaction portfolio (though it can also contain its own transactions), enabling different modelling strategies to be devised, among other operations. Note that a derived transaction portfolio is a type of portfolio, so endpoints in the TransactionPortfolios API and the Portfolios API can also be called. For more information, see https://support.lusid.com/knowledgebase/article/KA-01853."
    },
    {
      "name": "Entities",
      "description": "Methods for querying data about entities"
    },
    {
      "name": "Executions",
      "description": "Methods for interacting with Executions. An Execution represents a market's fill of a street order. Executions are treated monotemporally; any updates are effective at the as-at time of update, and its not possible to make retroactive (or forward) changes."
    },
    {
      "name": "Instrument Events",
      "description": "Methods for querying for instrument events."
    },
    {
      "name": "Instruments",
      "description": "An instrument represents a financial asset that an investor owns or has exposure to. Each transaction should be booked against an instrument stored in the LUSID instrument master. For more information, see https://support.lusid.com/knowledgebase/article/KA-01857."
    },
    {
      "name": "Legacy Compliance",
      "description": "Methods for storage and retrieval of legacy compliance data: legacy rules and legacy results."
    },
    {
      "name": "Legal Entities",
      "description": "Endpoints for interacting with Legal Entities."
    },
    {
      "name": "OrderGraph",
      "description": "The order graph is a way of looking at orders with the various entities relating to the order, such as blocks, orders, placements, allocations and executions in one place. It also contains some state information which cannot be obtained any other way."
    },
    {
      "name": "OrderInstructions",
      "description": "Methods for handling order instructions."
    },
    {
      "name": "Orders",
      "description": "Methods for interacting with Orders. An Order represents an investor's instruction to a broker or similar agent to but or sell a single security. Orders are treated monotemporally; any updates are effective at the as-at time of update, and its not possible to make retroactive (or forward) changes."
    },
    {
      "name": "Packages",
      "description": "A structure used to describe the structure of an order or orders that make up a non-trivial trade."
    },
    {
      "name": "Participations",
      "description": "A Participation records an order's participation in a specific placement. Participations are treatedmonotemporally; any updates are effective at the as-at time of update, and its not possible to make retroactive(or forward) changes."
    },
    {
      "name": "Persons",
      "description": "Endpoints for interacting with Persons entities."
    },
    {
      "name": "Placements",
      "description": "Methods for interacting with Placements. This is experimental functionality, with limited documentation presently. A Placement represents a trader's placement of a street order with a specific entity in the market to buy or sell a single security. Placements are treated monotemporally; any updates are effective at the as-at time of update, and its not possible to make retroactive (or forward) changes."
    },
    {
      "name": "Portfolio Groups",
      "description": "Methods for interacting with Portfolios Groups. Read more about Portfolio Groups in the LUSID Knowledge Base here https://support.lusid.com/how-do-you-group-and-aggregate-portfolios."
    },
    {
      "name": "Portfolios",
      "description": "A portfolio is a store of economic information. There are three types: transaction, reference and derived transaction. Note that these endpoints can also be called when interacting with the respective Transaction Portfolios API,  Reference Portfolio API and Derived Transaction Portfolios API. For more information, see https://support.lusid.com/knowledgebase/article/KA-01848."
    },
    {
      "name": "Property Definitions",
      "description": "Methods for interacting with Properties. Read more about Properties in the LUSID Knowledge Base here https://support.lusid.com/what-is-a-property."
    },
    {
      "name": "Quotes",
      "description": "Methods for the storage and retrieval of Quotes. Read more about Quotes in the LUSID Knowledge Base here https://support.lusid.com/what-is-a-quote."
    },
    {
      "name": "Reconciliations",
      "description": "Endpoints for performing reconciliations"
    },
    {
      "name": "Reference Portfolio",
      "description": "A reference portfolio stores a weighted set of instruments rather than transactions, enabling entities such as indices to be represented. Note that a reference portfolio is a type of portfolio, so endpoints in the Portfolios API can also be called. For more information, see https://support.lusid.com/knowledgebase/article/KA-01852."
    },
    {
      "name": "ReferenceLists",
      "description": "Methods for interacting with Reference Lists."
    },
    {
      "name": "Relation Definitions",
      "description": "Methods for interacting with Relations Definitions."
    },
    {
      "name": "Relations",
      "description": "Methods for interacting with Relations."
    },
    {
      "name": "Relationship Definitions",
      "description": "Methods for interacting with Relationship Definitions. Read more about Relationships in the LUSID Knowledge Base at https://support.lusid.com/knowledgebase/article/KA-01679."
    },
    {
      "name": "Relationships",
      "description": "Methods for interacting with Relationships. Read more about Relationships in the LUSID Knowledge Base here https://support.lusid.com/knowledgebase/article/KA-01679."
    },
    {
      "name": "Schemas",
      "description": "Methods for retrieval of Schemas"
    },
    {
      "name": "Scopes",
      "description": "Methods for interacting with Scopes. Read more about Scopes in the LUSID Knowledge Base here https://support.lusid.com/what-is-a-scope-in-lusid-and-how-is-it-used."
    },
    {
      "name": "Search",
      "description": "Methods providing Search capability."
    },
    {
      "name": "Sequences",
      "description": "Methods for generating and using sequences."
    },
    {
      "name": "Structured Result Data",
      "description": "The structured result store persists information that might be useful to help value a portfolio or analyse performance or risk, but that is not traded like quote data (which can be stored in the quote store). For more information, see https://support.lusid.com/knowledgebase/article/KA-01893."
    },
    {
      "name": "System Configuration",
      "description": "LUSID is a transaction-based system. Every transaction in a particular instrument should belong to a transaction type in order that it might contribute to measuring your holding (position) in that instrument. Transaction types are a fundamental building block of LUSID, and care should be exercised when changing them. For more information, see https://support.lusid.com/knowledgebase/article/KA-01872/."
    },
    {
      "name": "Tax Rule Sets",
      "description": "Methods to manage rule sets defining tax rates for transactions"
    },
    {
      "name": "Transaction Configuration",
      "description": "LUSID is a transaction-based system. Every transaction in a particular instrument should belong to a transaction type in order that it might contribute to measuring your holding (position) in that instrument. Transaction types are a fundamental building block of LUSID, and care should be exercised when changing them. For more information, see https://support.lusid.com/knowledgebase/article/KA-01872/."
    },
    {
      "name": "Transaction Fees",
      "description": "Methods to retrieve applicable fees for a transaction, and manage the rules that defined them"
    },
    {
      "name": "Transaction Portfolios",
      "description": "A transaction portfolio stores transactions and calculates instrument holdings and cash balances, enabling valuation, analytic, profit & loss, risk assessment and other operations to be performed. Note that a transaction portfolio is a type of portfolio, so endpoints in the Portfolios API can also be called. For more information, see https://support.lusid.com/knowledgebase/article/KA-01851."
    },
    {
      "name": "Translation",
      "description": "Methods for translating between dialects."
    }
  ],
  "x-tagGroups": {
    "name": "API",
    "tags": [
      "Abor",
      "AborConfiguration",
      "AddressKeyDefinition",
      "Aggregation",
      "Allocation Service",
      "Allocations",
      "Application Metadata",
      "Blocks",
      "Calendars",
      "Chart Of Accounts",
      "Complex Market Data",
      "Compliance",
      "Compliance - Generic",
      "Configuration Recipe",
      "Conventions",
      "Corporate Action Sources",
      "Counterparties",
      "CustomEntities",
      "CustomEntityDefinitions",
      "Cut Label Definitions",
      "Data Types",
      "Derived Transaction Portfolios",
      "Entities",
      "Executions",
      "Instrument Events",
      "Instruments",
      "Legacy Compliance",
      "Legal Entities",
      "OrderGraph",
      "OrderInstructions",
      "Orders",
      "Packages",
      "Participations",
      "Persons",
      "Placements",
      "Portfolio Groups",
      "Portfolios",
      "Property Definitions",
      "Quotes",
      "Reconciliations",
      "Reference Portfolio",
      "ReferenceLists",
      "Relation Definitions",
      "Relations",
      "Relationship Definitions",
      "Relationships",
      "Schemas",
      "Scopes",
      "Search",
      "Sequences",
      "Structured Result Data",
      "System Configuration",
      "Tax Rule Sets",
      "Transaction Configuration",
      "Transaction Fees",
      "Transaction Portfolios",
      "Translation"
    ]
  }
}
